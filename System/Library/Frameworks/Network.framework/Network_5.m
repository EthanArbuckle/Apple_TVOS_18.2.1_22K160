void sub_181A8AF88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

BOOL nw_context_get_private_redacted(void *a1)
{
  id v1 = a1;
  v2 = v1;
  if (!v1) {
    goto LABEL_5;
  }
  int v3 = *((_DWORD *)v1 + 31);
  if (v3 != 1)
  {
    if (v3 == 3)
    {
      if (nwlog_get_sensitive_redacted::onceToken != -1) {
        dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
      }
      int v4 = nwlog_get_sensitive_redacted::sensitiveRedacted;
      goto LABEL_12;
    }

    if (v3 != 2)
    {
      BOOL v5 = 1LL;
      goto LABEL_13;
    }

char *nw_endpoint_get_url_hash(void *a1)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_endpoint_get_url_hash";
    v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v30, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_get_url_hash";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v41)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_endpoint_get_url_hash";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v31,  v34,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }

        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_get_url_hash";
          _os_log_impl(&dword_181A5C000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_get_url_hash";
          _os_log_impl( &dword_181A5C000,  v31,  v36,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181A8B73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_sanitized_url(void *a1)
{
  *(void *)&v46[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v44 = "nw_endpoint_get_sanitized_url";
    os_log_type_t v32 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v32, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v44 = "nw_endpoint_get_sanitized_url";
          _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v41)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v33, type);
        if (backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v44 = "nw_endpoint_get_sanitized_url";
            __int16 v45 = 2082;
            *(void *)v46 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v33,  v36,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }

        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v44 = "nw_endpoint_get_sanitized_url";
          _os_log_impl(&dword_181A5C000, v33, v36, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v44 = "nw_endpoint_get_sanitized_url";
          _os_log_impl( &dword_181A5C000,  v33,  v38,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181A8BE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_get_sanitized_url_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(void *)(v1 + 280))
  {
    uint64_t v2 = result;
    result = nw_utilities_copy_sanitized_url(*(CFURLRef *)(v1 + 232));
    *(void *)(*(void *)(v2 + 32) + 280LL) = result;
  }

  return result;
}

uint64_t nw_utilities_copy_sanitized_url(CFURLRef url)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!url)
  {
    __nwlog_obj();
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v19 = 136446210;
    *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
    uint64_t v3 = _os_log_send_and_compose_impl();

    LOBYTE(rangeIncludingSeparators.location) = 16;
    char v18 = 0;
    if (LOBYTE(rangeIncludingSeparators.location) == 17)
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t location = rangeIncludingSeparators.location;
      if (os_log_type_enabled(v10, rangeIncludingSeparators.location))
      {
        *(_DWORD *)os_log_type_t v19 = 136446210;
        *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
        id v12 = "%{public}s called with null absolute_url";
LABEL_36:
        _os_log_impl(&dword_181A5C000, v10, location, v12, v19, 0xCu);
      }
    }

    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t location = rangeIncludingSeparators.location;
        BOOL v16 = os_log_type_enabled(v10, rangeIncludingSeparators.location);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)os_log_type_t v19 = 136446466;
            *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
            *(_WORD *)&v19[12] = 2082;
            *(void *)&v19[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  location,  "%{public}s called with null absolute_url, dumping backtrace:%{public}s",  v19,  0x16u);
          }

          free(backtrace_string);
          if (!v3) {
            return 0LL;
          }
          goto LABEL_12;
        }

        if (!v16) {
          goto LABEL_37;
        }
        *(_DWORD *)os_log_type_t v19 = 136446210;
        *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
        id v12 = "%{public}s called with null absolute_url, no backtrace";
        goto LABEL_36;
      }

      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t location = rangeIncludingSeparators.location;
      if (os_log_type_enabled(v10, rangeIncludingSeparators.location))
      {
        *(_DWORD *)os_log_type_t v19 = 136446210;
        *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
        id v12 = "%{public}s called with null absolute_url, backtrace limit exceeded";
        goto LABEL_36;
      }
    }

BOOL __nw_endpoint_get_url_hash_block_invoke(BOOL result)
{
  uint64_t v1 = (char *)(*(void *)(result + 32) + 288LL);
  if (!*v1)
  {
    CFIndex v2 = *(const char **)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL);
    size_t v3 = strlen(v2);
    return __nwlog_salted_hash(v2, v3, v1);
  }

  return result;
}

uint64_t nw_protocol_stack_includes_protocol(void *a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  size_t v3 = a1;
  id v4 = a2;
  CFRange v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_includes_protocol";
    int v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v43 = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (v43 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = v43;
      if (os_log_type_enabled(v24, v43))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_includes_protocol";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = v43;
      BOOL v30 = os_log_type_enabled(v24, v43);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_includes_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_48:
        if (!v23)
        {
LABEL_50:
          uint64_t v20 = 0LL;
          goto LABEL_14;
        }

LABEL_49:
        free(v23);
        goto LABEL_50;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_includes_protocol";
        _os_log_impl(&dword_181A5C000, v24, v29, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = v43;
      if (os_log_type_enabled(v24, v43))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_includes_protocol";
        _os_log_impl( &dword_181A5C000,  v24,  v34,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }

      free(backtrace_string);
      goto LABEL_66;
    }

    uint64_t v20 = (os_log_s *)__nwlog_obj(v18, v19);
    BOOL v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136446210;
    v47 = "nw_hash_table_add_object";
    id v22 = "%{public}s called with null table";
LABEL_65:
    _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
LABEL_66:
    if (v17) {
      free(v17);
    }
    return 0LL;
  }

  if (!a2)
  {
    __nwlog_obj(a1, 0LL);
    *(_DWORD *)buf = 136446210;
    v47 = "nw_hash_table_add_object";
    id v17 = (void *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v44 = 0;
    int v23 = __nwlog_fault(v17, &type, &v44);
    if (!(_DWORD)v23) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = (os_log_s *)__nwlog_obj(v23, v24);
      BOOL v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      v47 = "nw_hash_table_add_object";
      id v22 = "%{public}s called with null object";
      goto LABEL_65;
    }

    if (!v44)
    {
      uint64_t v20 = (os_log_s *)__nwlog_obj(v23, v24);
      BOOL v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      v47 = "nw_hash_table_add_object";
      id v22 = "%{public}s called with null object, backtrace limit exceeded";
      goto LABEL_65;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = (os_log_s *)__nwlog_obj(backtrace_string, v39);
    BOOL v21 = type;
    id v40 = os_log_type_enabled(v20, type);
    if (backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_hash_table_add_object";
        v48 = 2082;
        v49 = (uint64_t)backtrace_string;
        os_log_type_t v38 = "%{public}s called with null object, dumping backtrace:%{public}s";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v40) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136446210;
    v47 = "nw_hash_table_add_object";
    id v22 = "%{public}s called with null object, no backtrace";
    goto LABEL_65;
  }

  if (*(_DWORD *)(a1 + 32))
  {
    CFRange v6 = *(_DWORD *)(a1 + 48);
    if ((v6 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  os_log_type_t v25 = (os_log_s *)__nwlog_obj(a1, a2);
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v47 = "nw_hash_table_lock";
  int v26 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
    CFRange v6 = *(_DWORD *)(a1 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_6:
      if ((v6 & 1) != 0)
      {
        *(_DWORD *)buf = 0;
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint8_t *))a1)(a2, buf);
        BOOL v8 = (*(unsigned int (**)(uint64_t, void))(a1 + 8))(v7, *(unsigned int *)buf) % *(_DWORD *)(a1 + 32);
        id v9 = a1 + 56;
        if (_nw_signposts_once != -1) {
          dispatch_once(&_nw_signposts_once, &__block_literal_global_62614);
        }
        BOOL v10 = (_BYTE *)(v9 + 16LL * v8);
        while (1)
        {
          BOOL v10 = *(_BYTE **)v10;
          if (!v10) {
            break;
          }
          if (v10[30] == 1 && *((void *)v10 + 2) == a2)
          {
            id v11 = 0;
            if (!a3) {
              goto LABEL_20;
            }
            goto LABEL_19;
          }
        }

        id v12 = *(unsigned int *)(a1 + 36) + 32LL;
        id v11 = 1;
        BOOL v10 = calloc(1uLL, v12);
        if (!v10)
        {
          BOOL v33 = (os_log_s *)__nwlog_obj(0LL, v13);
          os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          v47 = "strict_calloc";
          v48 = 2048;
          v49 = 1LL;
          v50 = 2048;
          v51 = v12;
          os_log_type_t v34 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v34);
          if (result) {
            goto LABEL_76;
          }
          free(v34);
        }

        *((_DWORD *)v10 + 6) = v8;
        *((void *)v10 + 2) = a2;
        *(void *)BOOL v10 = 0LL;
        id v14 = v9 + 16 * v8;
        int v15 = *(void **)(v14 + 8);
        *((void *)v10 + 1) = v15;
        *int v15 = v10;
        *(void *)(v14 + 8) = v10;
        v10[30] = 1;
        ++*(_DWORD *)(a1 + 40);
        if (a3) {
LABEL_19:
        }
          *a3 = v11;
LABEL_20:
        if ((*(_BYTE *)(a1 + 48) & 2) != 0) {
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 52));
        }
        return (BOOL)v10;
      }

      __nwlog_obj(a1, a2);
      *(_DWORD *)buf = 136446210;
      v47 = "nw_hash_table_add_object";
      os_log_type_t v27 = (void *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v44 = 0;
      int v28 = __nwlog_fault(v27, &type, &v44);
      if ((_DWORD)v28)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v30 = (os_log_s *)__nwlog_obj(v28, v29);
          v31 = type;
          if (!os_log_type_enabled(v30, type)) {
            goto LABEL_71;
          }
          *(_DWORD *)buf = 136446210;
          v47 = "nw_hash_table_add_object";
          os_log_type_t v32 = "%{public}s called with invalid hash table";
LABEL_70:
          _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
          goto LABEL_71;
        }

        if (!v44)
        {
          BOOL v30 = (os_log_s *)__nwlog_obj(v28, v29);
          v31 = type;
          if (!os_log_type_enabled(v30, type)) {
            goto LABEL_71;
          }
          *(_DWORD *)buf = 136446210;
          v47 = "nw_hash_table_add_object";
          os_log_type_t v32 = "%{public}s called with invalid hash table, backtrace limit exceeded";
          goto LABEL_70;
        }

        char v41 = (char *)__nw_create_backtrace_string();
        BOOL v30 = (os_log_s *)__nwlog_obj(v41, v42);
        v31 = type;
        os_log_type_t v43 = os_log_type_enabled(v30, type);
        if (!v41)
        {
          if (!v43) {
            goto LABEL_71;
          }
          *(_DWORD *)buf = 136446210;
          v47 = "nw_hash_table_add_object";
          os_log_type_t v32 = "%{public}s called with invalid hash table, no backtrace";
          goto LABEL_70;
        }

        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          v47 = "nw_hash_table_add_object";
          v48 = 2082;
          v49 = (uint64_t)v41;
          _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s called with invalid hash table, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v41);
      }

LABEL_50:
      if (!v6) {
        return 0LL;
      }
LABEL_51:
      free(v6);
      return 0LL;
    }

    if (v112 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v27 = type[0];
      if (os_log_type_enabled(v7, type[0]))
      {
        *(_DWORD *)buf = 136447234;
        v115 = "nw_path_copy_endpoint_from_tlv";
        v116 = 1024;
        v117 = a1;
        v118 = 1024;
        v119 = v3;
        v120 = 2080;
        v121 = "nw_path_copy_endpoint_from_tlv";
        v122 = 1024;
        v123 = 1693;
        _os_log_impl( &dword_181A5C000,  v7,  v27,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (os_log_s *)(id)gLogObj;
    id v19 = type[0];
    uint64_t v20 = os_log_type_enabled(v7, type[0]);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136447234;
        v115 = "nw_path_copy_endpoint_from_tlv";
        v116 = 1024;
        v117 = a1;
        v118 = 1024;
        v119 = v3;
        v120 = 2080;
        v121 = "nw_path_copy_endpoint_from_tlv";
        v122 = 1024;
        v123 = 1693;
        _os_log_impl( &dword_181A5C000,  v7,  v19,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
      }

      goto LABEL_49;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136447490;
      v115 = "nw_path_copy_endpoint_from_tlv";
      v116 = 1024;
      v117 = a1;
      v118 = 1024;
      v119 = v3;
      v120 = 2080;
      v121 = "nw_path_copy_endpoint_from_tlv";
      v122 = 1024;
      v123 = 1693;
      v124 = 2082;
      v125 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v7,  v19,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
    }

  os_log_type_t v25 = 0;
LABEL_50:

  LOBYTE(v23) = v25;
  return v23;
}

      _os_log_impl(&dword_181A5C000, v36, v37, v38, buf, 0x16u);
      goto LABEL_50;
    }

    os_log_type_t v36 = (os_log_s *)__nwlog_obj();
    id v37 = type;
    if (os_log_type_enabled(v36, type))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v44 = "sa_dst_cache_create";
      char v45 = 2048;
      uint64_t v46 = 112LL;
      os_log_type_t v38 = "%{public}s malloc(%zu) failed";
      goto LABEL_49;
    }

    if (!v28) {
      goto LABEL_31;
    }
    os_log_type_t v25 = (char *)v28;
    goto LABEL_30;
  }

  size_t v3 = v1;
  id v4 = [v3 type];

  if (v4 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (id)gLogObj;
    BOOL v8 = v3;
    id v9 = [v8 type];

    *(_DWORD *)buf = 136446466;
    uint64_t v39 = "nw_endpoint_get_ethernet_address";
    id v40 = 1024;
    *(_DWORD *)char v41 = v9;
    LODWORD(v35) = 18;
    BOOL v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v36 = 0;
    if (__nwlog_fault(v10, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        id v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          id v13 = v8;
          id v14 = objc_msgSend(v13, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          uint64_t v39 = "nw_endpoint_get_ethernet_address";
          id v40 = 1024;
          *(_DWORD *)char v41 = v14;
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }

      else if (v36)
      {
        int v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        id v16 = type;
        id v17 = os_log_type_enabled(v11, type);
        if (v15)
        {
          if (v17)
          {
            char v18 = v8;
            id v19 = objc_msgSend(v18, "type", buf, v35);

            *(_DWORD *)buf = 136446722;
            uint64_t v39 = "nw_endpoint_get_ethernet_address";
            id v40 = 1024;
            *(_DWORD *)char v41 = v19;
            v41[2] = 2082;
            *(void *)&v41[3] = v15;
            _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v15);
          if (!v10) {
            goto LABEL_31;
          }
LABEL_29:
          os_log_type_t v25 = (char *)v10;
LABEL_30:
          free(v25);
          goto LABEL_31;
        }

        if (v17)
        {
          int v23 = v8;
          os_log_type_t v24 = objc_msgSend(v23, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          uint64_t v39 = "nw_endpoint_get_ethernet_address";
          id v40 = 1024;
          *(_DWORD *)char v41 = v24;
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        uint64_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          BOOL v21 = v8;
          id v22 = objc_msgSend(v21, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          uint64_t v39 = "nw_endpoint_get_ethernet_address";
          id v40 = 1024;
          *(_DWORD *)char v41 = v22;
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s incorrect endpoint type %u, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

    if (!v10)
    {
LABEL_31:
      CFRange v6 = 0LL;
      goto LABEL_32;
    }

    goto LABEL_29;
  }

  CFRange v5 = v3;
  CFRange v6 = v5 + 360;
  if (!v5[360] && !v5[361] && !v5[362] && !v5[363] && !v5[364] && !v5[365]) {
    CFRange v6 = 0LL;
  }

LABEL_32:
  return v6;
}
      }
    }

    _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
    goto LABEL_50;
  }

  if (a2)
  {
    size_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      id v4 = *(void *)(v3 + 24);
      if (v4)
      {
        CFRange v5 = *(void (**)(void))(v4 + 56);
        if (!v5 || (v5(), (v6 = *(void *)(a2 + 24)) != 0) && (id v4 = *(void *)(v6 + 24)) != 0)
        {
          uint64_t v7 = *(void (**)(void))(v4 + 48);
          if (v7) {
            v7();
          }
        }
      }
    }

    BOOL v8 = *(void **)(a2 + 16);
    if (v8)
    {
      id v9 = v8;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;

      if ((*(_BYTE *)(a2 + 121) & 0x10) != 0)
      {
        if (gLogDatapath)
        {
          uint64_t v20 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v24 = "nw_channel_disconnect_flow";
            os_log_type_t v25 = 2080;
            int v26 = (char *)(a2 + 84);
            _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s Not closing flow registration %s",  buf,  0x16u);
          }
        }
      }

      else
      {
        if (gLogDatapath)
        {
          id v19 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v24 = "nw_channel_disconnect_flow";
            os_log_type_t v25 = 2080;
            int v26 = (char *)(a2 + 84);
            _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s Closing flow registration %s",  buf,  0x16u);
          }
        }

        nw_path_flow_registration_close(*(void **)(a2 + 16));
      }

      BOOL v10 = *(void **)(a2 + 16);
      if (v10)
      {
        os_release(v10);
        *(void *)(a2 + 16) = 0LL;
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v24 = "nw_channel_disconnect_flow";
  id v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v12 = (os_log_s *)__nwlog_obj();
    id v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_channel_disconnect_flow";
    id v14 = "%{public}s called with null input_flow";
    goto LABEL_49;
  }

  if (!v21)
  {
    id v12 = (os_log_s *)__nwlog_obj();
    id v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_channel_disconnect_flow";
    id v14 = "%{public}s called with null input_flow, backtrace limit exceeded";
    goto LABEL_49;
  }

  id v17 = (char *)__nw_create_backtrace_string();
  id v12 = (os_log_s *)__nwlog_obj();
  id v13 = type;
  char v18 = os_log_type_enabled(v12, type);
  if (!v17)
  {
    if (!v18) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_channel_disconnect_flow";
    id v14 = "%{public}s called with null input_flow, no backtrace";
    goto LABEL_49;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v24 = "nw_channel_disconnect_flow";
    os_log_type_t v25 = 2082;
    int v26 = v17;
    _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null input_flow, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v11) {
    goto LABEL_51;
  }
}

        goto LABEL_50;
      }

      if (!v26)
      {
        __nwlog_obj();
        int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null route_flags, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_49;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v22 = type;
      int v23 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_181A5C000, v15, v22, "%{public}s called with null route_flags, no backtrace", buf, 0xCu);
        }

        goto LABEL_49;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s called with null route_flags, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_37;
    }
  }

  else
  {
    __nwlog_obj();
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
    id v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v26 = 0;
    if (__nwlog_fault(v14, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null path", buf, 0xCu);
        }

        goto LABEL_49;
      }

      if (!v26)
      {
        __nwlog_obj();
        int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_49;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v20 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_181A5C000, v15, v20, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }

        goto LABEL_49;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
      }

          __break(1u);
          JUMPOUT(0x181BC2AB8LL);
        }

        goto LABEL_39;
      }
    }
  }

    if (!default_input_handler) {
      return;
    }
    goto LABEL_50;
  }

  default_input_handler = (uint64_t)a1->default_input_handler;
  if (!default_input_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v41 = "nw_protocol_udp_error";
    default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)gLogObj;
      int v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_udp_error";
      id v16 = "%{public}s udp_error requires a default input handler";
      goto LABEL_48;
    }

    if (!v38)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)gLogObj;
      int v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_udp_error";
      id v16 = "%{public}s udp_error requires a default input handler, backtrace limit exceeded";
      goto LABEL_48;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (os_log_s *)gLogObj;
    int v15 = type;
    char v18 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v18) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_udp_error";
      id v16 = "%{public}s udp_error requires a default input handler, no backtrace";
      goto LABEL_48;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      char v41 = "nw_protocol_udp_error";
      char v42 = 2082;
      os_log_type_t v43 = backtrace_string;
      id v19 = "%{public}s udp_error requires a default input handler, dumping backtrace:%{public}s";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v14, v15, v19, buf, 0x16u);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

  id v4 = *(void **)(default_input_handler + 40);
  if (v4 == &nw_protocol_ref_counted_handle)
  {
    CFRange v5 = *(void *)(default_input_handler + 88);
    if (v5) {
      *(void *)(default_input_handler + 88) = v5 + 1;
    }
  }

  handle = a2->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = a2[1].callbacks;
    if (callbacks) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }

  BOOL v8 = *(void *)(default_input_handler + 24);
  if (v8)
  {
    id v9 = *(void (**)(uint64_t, nw_protocol *))(v8 + 56);
    if (v9)
    {
      v9(default_input_handler, a2);
      goto LABEL_14;
    }
  }

  __nwlog_obj();
  os_log_type_t v24 = *(const char **)(default_input_handler + 16);
  *(_DWORD *)buf = 136446722;
  char v41 = "__nw_protocol_error";
  if (!v24) {
    os_log_type_t v24 = "invalid";
  }
  char v42 = 2082;
  os_log_type_t v43 = (void *)v24;
  uint64_t v44 = 2048;
  char v45 = default_input_handler;
  os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v38 = 0;
  if (__nwlog_fault(v25, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_106;
      }
      int v28 = *(const char **)(default_input_handler + 16);
      if (!v28) {
        int v28 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v41 = "__nw_protocol_error";
      char v42 = 2082;
      os_log_type_t v43 = (void *)v28;
      uint64_t v44 = 2048;
      char v45 = default_input_handler;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid error callback";
      goto LABEL_105;
    }

    if (!v38)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_106;
      }
      os_log_type_t v36 = *(const char **)(default_input_handler + 16);
      if (!v36) {
        os_log_type_t v36 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v41 = "__nw_protocol_error";
      char v42 = 2082;
      os_log_type_t v43 = (void *)v36;
      uint64_t v44 = 2048;
      char v45 = default_input_handler;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
      goto LABEL_105;
    }

    BOOL v30 = (char *)__nw_create_backtrace_string();
    int v26 = (os_log_s *)__nwlog_obj();
    os_log_type_t v27 = type;
    v31 = os_log_type_enabled(v26, type);
    if (v30)
    {
      if (v31)
      {
        os_log_type_t v32 = *(const char **)(default_input_handler + 16);
        if (!v32) {
          os_log_type_t v32 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        char v41 = "__nw_protocol_error";
        char v42 = 2082;
        os_log_type_t v43 = (void *)v32;
        uint64_t v44 = 2048;
        char v45 = default_input_handler;
        uint64_t v46 = 2082;
        v47 = v30;
        _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v30);
      goto LABEL_106;
    }

    if (v31)
    {
      id v37 = *(const char **)(default_input_handler + 16);
      if (!v37) {
        id v37 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v41 = "__nw_protocol_error";
      char v42 = 2082;
      os_log_type_t v43 = (void *)v37;
      uint64_t v44 = 2048;
      char v45 = default_input_handler;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_105:
      _os_log_impl(&dword_181A5C000, v26, v27, v29, buf, 0x20u);
    }
  }

  int v23 = (char *)operator new(0x30uLL);
  *(void *)int v23 = 0LL;
  *((void *)v23 + 1) = v8;
  os_log_type_t v24 = (std::string *)(v23 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v23 + 4) = *(void *)(a2 + 16);
  }

  *((_DWORD *)v23 + 10) = *(_DWORD *)(a2 + 24);
  os_log_type_t v25 = (float)(unint64_t)(qword_18C5A2820 + 1);
  if (!v9 || (float)(*(float *)&dword_18C5A2828 * (float)v9) < v25)
  {
    int v26 = 1LL;
    if (v9 >= 3) {
      int v26 = (v9 & (v9 - 1)) != 0;
    }
    os_log_type_t v27 = v26 | (2 * v9);
    int v28 = vcvtps_u32_f32(v25 / *(float *)&dword_18C5A2828);
    if (v27 <= v28) {
      prime = v28;
    }
    else {
      prime = v27;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }

    id v9 = *((void *)&mime_type_to_class(void)::instance + 1);
    if (prime <= *((void *)&mime_type_to_class(void)::instance + 1))
    {
      id v40 = vcvtps_u32_f32((float)(unint64_t)qword_18C5A2820 / *(float *)&dword_18C5A2828);
      if (*((void *)&mime_type_to_class(void)::instance + 1) < 3uLL
        || (char v41 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&mime_type_to_class(void)::instance + 8)),
            v41.i16[0] = vaddlv_u8(v41),
            v41.u32[0] > 1uLL))
      {
        id v40 = std::__next_prime(v40);
      }

      else
      {
        char v42 = 1LL << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          id v40 = v42;
        }
      }

      if (prime <= v40) {
        prime = v40;
      }
      if (prime >= v9)
      {
        id v9 = *((void *)&mime_type_to_class(void)::instance + 1);
LABEL_89:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            CFIndex v2 = v8 % v9;
          }
          else {
            CFIndex v2 = v8;
          }
        }

        else
        {
          CFIndex v2 = (v9 - 1) & v8;
        }

        goto LABEL_102;
      }

      if (!prime)
      {
        v50 = (void *)mime_type_to_class(void)::instance;
        *(void *)&mime_type_to_class(void)::instance = 0LL;
        if (v50) {
          operator delete(v50);
        }
        id v9 = 0LL;
        *((void *)&mime_type_to_class(void)::instance + 1) = 0LL;
        goto LABEL_89;
      }
    }

    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    BOOL v30 = operator new(8 * prime);
    v31 = (void *)mime_type_to_class(void)::instance;
    *(void *)&mime_type_to_class(void)::instance = v30;
    if (v31) {
      operator delete(v31);
    }
    os_log_type_t v32 = 0LL;
    *((void *)&mime_type_to_class(void)::instance + 1) = prime;
    do
      *(void *)(mime_type_to_class(void)::instance + 8 * v32++) = 0LL;
    while (prime != v32);
    BOOL v33 = (void **)qword_18C5A2818;
    if (!qword_18C5A2818)
    {
LABEL_88:
      id v9 = prime;
      goto LABEL_89;
    }

    os_log_type_t v34 = *(void *)(qword_18C5A2818 + 8);
    os_log_type_t v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      os_log_type_t v36 = v34 & v35;
      *(void *)(mime_type_to_class(void)::instance + 8 * v36) = &qword_18C5A2818;
      for (k = *v33; *v33; k = *v33)
      {
        os_log_type_t v38 = k[1] & v35;
        if (v38 == v36)
        {
          BOOL v33 = (void **)k;
        }

        else if (*(void *)(mime_type_to_class(void)::instance + 8 * v38))
        {
          os_log_s *v33 = (void *)*k;
          uint64_t v39 = 8 * v38;
          *k = **(void **)(mime_type_to_class(void)::instance + v39);
          **(void **)(mime_type_to_class(void)::instance + v39) = k;
        }

        else
        {
          *(void *)(mime_type_to_class(void)::instance + 8 * v38) = v33;
          BOOL v33 = (void **)k;
          os_log_type_t v36 = v38;
        }
      }

      goto LABEL_88;
    }

    if (v34 >= prime) {
      v34 %= prime;
    }
    *(void *)(mime_type_to_class(void)::instance + 8 * v34) = &qword_18C5A2818;
    os_log_type_t v43 = *v33;
    if (!*v33) {
      goto LABEL_88;
    }
    while (1)
    {
      char v45 = v43[1];
      if (v45 >= prime) {
        v45 %= prime;
      }
      if (v45 != v34)
      {
        if (!*(void *)(mime_type_to_class(void)::instance + 8 * v45))
        {
          *(void *)(mime_type_to_class(void)::instance + 8 * v45) = v33;
          goto LABEL_93;
        }

        os_log_s *v33 = (void *)*v43;
        uint64_t v44 = 8 * v45;
        *os_log_type_t v43 = **(void **)(mime_type_to_class(void)::instance + v44);
        **(void **)(mime_type_to_class(void)::instance + v44) = v43;
        os_log_type_t v43 = v33;
      }

      char v45 = v34;
LABEL_93:
      BOOL v33 = (void **)v43;
      os_log_type_t v43 = (void *)*v43;
      os_log_type_t v34 = v45;
      if (!v43) {
        goto LABEL_88;
      }
    }
  }

    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    LOBYTE(v292) = 1;
    (*(void (**)(void))(a1 + 104))();
    id v11 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    if (!v5) {
      return v11;
    }
    goto LABEL_282;
  }

  id v16 = nw_frame_unclaimed_length(v290);
  if (v16 > **(_DWORD **)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 120))
    {
      if (gLogDatapath)
      {
        v274 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v274, OS_LOG_TYPE_DEBUG))
        {
          v275 = **(_DWORD **)(a1 + 56);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v290;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v292) = v275;
          _os_log_impl( &dword_181A5C000,  v274,  OS_LOG_TYPE_DEBUG,  "%{public}s splitting frame %p with unknown metadata by offset %d",  buf,  0x1Cu);
        }
      }

      id v17 = v290;
      char v18 = v290 + 8;
      id v19 = *((void *)v290 + 4);
      uint64_t v20 = (void *)*((void *)v290 + 5);
      if (v19)
      {
        *(void *)(v19 + 40) = v20;
        uint64_t v20 = (void *)*((void *)v17 + 5);
      }

      else
      {
        *(void *)(*(void *)(a1 + 64) + 8LL) = v20;
      }

      *uint64_t v20 = v19;
      id *v18 = 0LL;
      v18[1] = 0LL;
      v61 = nw_frame_split((uint64_t *)&v290, **(_DWORD **)(a1 + 56));
      v62 = *(uint64_t **)(a1 + 64);
      v63 = v290;
      v64 = *v62;
      v65 = v290;
      *((void *)v290 + 4) = *v62;
      v66 = v65 + 8;
      if (v64) {
        v67 = (void *)(v64 + 40);
      }
      else {
        v67 = v62 + 1;
      }
      *v67 = v66;
      *v62 = (uint64_t)v63;
      *((void *)v63 + 5) = v62;
      v68 = *(void *)(a1 + 72);
      *(void *)(v61 + 32) = 0LL;
      v69 = *(uint64_t **)(v68 + 8);
      *(void *)(v61 + 40) = v69;
      *v69 = v61;
      *(void *)(v68 + 8) = v61 + 32;
      **(_DWORD **)(a1 + 80) = 0;
      **(_DWORD **)(a1 + 56) = 0;
      v70 = *(_DWORD **)(a1 + 40);
      if ((*v70)--)
      {
LABEL_190:
        v158 = *(_DWORD **)(a1 + 88);
        v159 = **(_DWORD **)(a1 + 56);
        v51 = __CFADD__(*v158, v159);
        *v158 += v159;
        if (!v51) {
          goto LABEL_209;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v160 = **(unsigned int **)(a1 + 56);
        v161 = (_DWORD *)**(unsigned int **)(a1 + 88);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "moved_bytes";
        *(_WORD *)&buf[22] = 2048;
        v292 = v160;
        v293 = 2048;
        v294 = v161;
        v162 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v288 = 0;
        if (__nwlog_fault(v162, &type, &v288))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v163 = (os_log_s *)__nwlog_obj();
            v164 = type;
            if (os_log_type_enabled(v163, type))
            {
              v165 = **(unsigned int **)(a1 + 56);
              v166 = (_DWORD *)**(unsigned int **)(a1 + 88);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "moved_bytes";
              *(_WORD *)&buf[22] = 2048;
              v292 = v165;
              v293 = 2048;
              v294 = v166;
              v167 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_205:
              _os_log_impl(&dword_181A5C000, v163, v164, v167, buf, 0x2Au);
            }
          }

          else if (v288)
          {
            v168 = (char *)__nw_create_backtrace_string();
            v163 = (os_log_s *)__nwlog_obj();
            v164 = type;
            v169 = os_log_type_enabled(v163, type);
            if (v168)
            {
              if (v169)
              {
                v170 = **(unsigned int **)(a1 + 56);
                v171 = (_DWORD *)**(unsigned int **)(a1 + 88);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "moved_bytes";
                *(_WORD *)&buf[22] = 2048;
                v292 = v170;
                v293 = 2048;
                v294 = v171;
                v295 = 2082;
                v296 = v168;
                _os_log_impl( &dword_181A5C000,  v163,  v164,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
              }

              free(v168);
              goto LABEL_206;
            }

            if (v169)
            {
              v174 = **(unsigned int **)(a1 + 56);
              v175 = (_DWORD *)**(unsigned int **)(a1 + 88);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "moved_bytes";
              *(_WORD *)&buf[22] = 2048;
              v292 = v174;
              v293 = 2048;
              v294 = v175;
              v167 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_205;
            }
          }

          else
          {
            v163 = (os_log_s *)__nwlog_obj();
            v164 = type;
            if (os_log_type_enabled(v163, type))
            {
              v172 = **(unsigned int **)(a1 + 56);
              v173 = (_DWORD *)**(unsigned int **)(a1 + 88);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "moved_bytes";
              *(_WORD *)&buf[22] = 2048;
              v292 = v172;
              v293 = 2048;
              v294 = v173;
              v167 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_205;
            }
          }
        }

        goto LABEL_50;
      }

      if (!v66)
      {
        __nwlog_obj();
        BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v58 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl( &dword_181A5C000,  v8,  v58,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_49;
      }

      uint64_t v44 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v47 = type;
      v48 = os_log_type_enabled(v8, type);
      if (!v44)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl( &dword_181A5C000,  v8,  v47,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
        }

        goto LABEL_49;
      }

      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        v69 = "nw_framer_protocol_add_input_handler";
        v70 = 2082;
        v71 = v44;
        _os_log_impl( &dword_181A5C000,  v8,  v47,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      id v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v69 = "nw_framer_protocol_add_input_handler";
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v66 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_181A5C000, v8, v38, "%{public}s called with null framer", buf, 0xCu);
        }

        goto LABEL_49;
      }

      if (!v66)
      {
        __nwlog_obj();
        BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v57 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl( &dword_181A5C000,  v8,  v57,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_49;
      }

      uint64_t v44 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v45 = type;
      uint64_t v46 = os_log_type_enabled(v8, type);
      if (!v44)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_181A5C000, v8, v45, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }

        goto LABEL_49;
      }

      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        v69 = "nw_framer_protocol_add_input_handler";
        v70 = 2082;
        v71 = v44;
        _os_log_impl( &dword_181A5C000,  v8,  v45,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(v44);
    goto LABEL_50;
  }

  __nwlog_obj();
  BOOL v33 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v69 = "nw_framer_protocol_add_input_handler";
  os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v66 = 0;
  if (__nwlog_fault(v34, &type, &v66))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v69 = "nw_framer_protocol_add_input_handler";
        _os_log_impl(&dword_181A5C000, v35, v36, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v66)
    {
      char v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v42 = type;
      os_log_type_t v43 = os_log_type_enabled(v35, type);
      if (v41)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          v69 = "nw_framer_protocol_add_input_handler";
          v70 = 2082;
          v71 = v41;
          _os_log_impl( &dword_181A5C000,  v35,  v42,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v41);
        goto LABEL_110;
      }

      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v69 = "nw_framer_protocol_add_input_handler";
        _os_log_impl(&dword_181A5C000, v35, v42, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v56 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v69 = "nw_framer_protocol_add_input_handler";
        _os_log_impl( &dword_181A5C000,  v35,  v56,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v7) {
    free(v7);
  }
  return 0LL;
}

  if (v5) {
    free(v5);
  }
}

    free(backtrace_string);
    goto LABEL_50;
  }

  uint64_t v7 = v5;
  BOOL v8 = v7[1];

  is_framer = nw_protocol_definition_is_framer(v8);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    char v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v41 = "nw_framer_message_access_value";
    int v15 = (char *)_os_log_send_and_compose_impl();

    uint64_t v39 = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (v39 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v19 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        char v41 = "nw_framer_message_access_value";
        _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null nw_protocol_metadata_is_framer_message(message)",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    if (!v38)
    {
      __nwlog_obj();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        char v41 = "nw_framer_message_access_value";
        _os_log_impl( &dword_181A5C000,  v16,  v34,  "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v27 = v39;
    int v28 = os_log_type_enabled(v16, v39);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        char v41 = "nw_framer_message_access_value";
        _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      char v41 = "nw_framer_message_access_value";
      char v42 = 2082;
      os_log_type_t v43 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

  if (!key)
  {
    __nwlog_obj();
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v41 = "nw_framer_message_access_value";
    int v15 = (char *)_os_log_send_and_compose_impl();

    uint64_t v39 = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (v39 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v21 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        char v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_181A5C000, v16, v21, "%{public}s called with null key", buf, 0xCu);
      }

      goto LABEL_76;
    }

    if (!v38)
    {
      __nwlog_obj();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        char v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_181A5C000, v16, v35, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }

      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v29 = v39;
    BOOL v30 = os_log_type_enabled(v16, v39);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        char v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_181A5C000, v16, v29, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }

      goto LABEL_76;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      char v41 = "nw_framer_message_access_value";
      char v42 = 2082;
      os_log_type_t v43 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v16,  v29,  "%{public}s called with null key, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

  if (v6)
  {
    v37[0] = MEMORY[0x1895F87A8];
    v37[1] = 3221225472LL;
    v37[2] = __nw_framer_message_access_value_block_invoke;
    v37[3] = &unk_189BC67A0;
    BOOL v10 = v6;
    v37[4] = v10;
    v37[5] = key;
    id v11 = v7[4];
    if (v11) {
      id v12 = __nw_framer_message_access_value_block_invoke((uint64_t)v37, v11);
    }
    else {
      id v12 = 0;
    }

    goto LABEL_9;
  }

  __nwlog_obj();
  id v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v41 = "nw_framer_message_access_value";
  int v15 = (char *)_os_log_send_and_compose_impl();

  uint64_t v39 = OS_LOG_TYPE_ERROR;
  os_log_type_t v38 = 0;
  if (__nwlog_fault(v15, &v39, &v38))
  {
    if (v39 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v23 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        char v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s called with null access_value", buf, 0xCu);
      }

    goto LABEL_50;
  }

  if (v6)
  {
    BOOL v8 = _Block_copy(*((const void **)v5 + 21));
    if (*((void *)v5 + 23))
    {
      if (*((void *)v5 + 24))
      {
LABEL_5:
        nw_array_append(*((void *)v5 + 23), v6);
        if (v7) {
          id v9 = v7;
        }
        else {
          id v9 = (void *)MEMORY[0x1895F8AA8];
        }
        nw_array_append(*((void *)v5 + 24), v9);
        if (v8)
        {
          aBlock[0] = MEMORY[0x1895F87A8];
          aBlock[1] = 3221225472LL;
          aBlock[2] = ___ZL37nw_resolver_update_client_alternativeP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectPU36objcproto25OS_nw_protocol_definitionS1__block_invoke;
          aBlock[3] = &unk_189BC7210;
          BOOL v10 = v5;
          os_log_type_t v32 = v10;
          os_log_type_t v35 = v8;
          BOOL v33 = v6;
          os_log_type_t v34 = v7;
          id v11 = _Block_copy(aBlock);
          id v12 = (dispatch_queue_s *)*((void *)v10 + 14);
          if (v12) {
            dispatch_async(v12, v11);
          }
          else {
            nw_queue_context_async(*((void **)v10 + 4), v11);
          }
        }

        goto LABEL_16;
      }
    }

    else
    {
      id v13 = nw_array_create();
      id v14 = (void *)*((void *)v5 + 23);
      *((void *)v5 + 23) = v13;

      if (*((void *)v5 + 24)) {
        goto LABEL_5;
      }
    }

    int v15 = nw_array_create();
    id v16 = (void *)*((void *)v5 + 24);
    *((void *)v5 + 24) = v15;

    goto LABEL_5;
  }

  __nwlog_obj();
  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v39 = "nw_resolver_update_client_alternative";
  char v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v36 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v22 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_resolver_update_client_alternative";
      _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null endpoint", buf, 0xCu);
    }

    goto LABEL_49;
  }

  if (!v36)
  {
    __nwlog_obj();
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v30 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_resolver_update_client_alternative";
      _os_log_impl( &dword_181A5C000,  v19,  v30,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_49;
  }

  int v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v27 = type;
  int v28 = os_log_type_enabled(v19, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_resolver_update_client_alternative";
      _os_log_impl(&dword_181A5C000, v19, v27, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }

    goto LABEL_49;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v39 = "nw_resolver_update_client_alternative";
    id v40 = 2082;
    char v41 = v26;
    _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v26);
  if (v18) {
    goto LABEL_51;
  }
LABEL_16:
}

    goto LABEL_24;
  }

  if (!v7) {
    goto LABEL_19;
  }
  id v9 = *v8;
  BOOL v10 = v8[1];
  id v11 = v8[2];
  id v12 = v8[3];
  id v13 = v8[4];
  id v14 = v9 == *v7 && v10 == v7[1];
  int v15 = v14 && v11 == v7[2];
  id v16 = v15 && v12 == v7[3];
  if (!v16 || v13 != v7[4])
  {
LABEL_19:
    char v18 = 1LL;
    goto LABEL_25;
  }

  if (gLogDatapath)
  {
    __nwlog_obj();
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v35 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446722;
      uint64_t v39 = "nw_endpoint_enumerate_edges_block_invoke";
      id v40 = 2080;
      char v41 = (void *)v35;
      char v42 = 2112;
      os_log_type_t v43 = v6;
      BOOL v21 = "%{public}s %s identifier matches for edge %@, calling enumerator";
      goto LABEL_48;
    }

    goto LABEL_49;
  }
    }

    goto LABEL_50;
  }

  if (!v4)
  {
    __nwlog_obj();
    char v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
    int v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v34 = OS_LOG_TYPE_ERROR;
    BOOL v33 = 0;
    if (v34 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v19 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v33)
    {
      int v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = v34;
      os_log_type_t v25 = os_log_type_enabled(v16, v34);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v23;
          _os_log_impl( &dword_181A5C000,  v16,  v24,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v23);
        if (!v15) {
          goto LABEL_13;
        }
        goto LABEL_51;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_181A5C000, v16, v24, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_49;
  }

  if (!nw_group_descriptor_add_endpoint(*((nw_group_descriptor_t *)v3 + 8), v4))
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      BOOL v10 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = *((_DWORD *)v3 + 42);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] Could not add endpoint to group",  buf,  0x12u);
      }
    }

    goto LABEL_13;
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  os_log_type_t v36 = 1;
  CFRange v6 = (os_unfair_lock_s *)*((void *)v3 + 9);
  if (v6)
  {
    uint64_t v7 = v6 + 24;
    BOOL v8 = v6;
    os_unfair_lock_lock(v7);
    id v9 = v8[6];
    os_unfair_lock_unlock(v7);

    if (v9)
    {
      v28[0] = MEMORY[0x1895F87A8];
      v28[1] = 3221225472LL;
      v28[2] = __nw_connection_group_add_member_block_invoke;
      v28[3] = &unk_189BB71E8;
      os_log_type_t v29 = v3;
      BOOL v30 = v5;
      os_log_type_t v32 = buf;
      id v9 = v9;
      v31 = v9;
      nw_path_enumerate_group_options(v9, v28);
    }
  }

  else
  {
    id v9 = 0LL;
  }

  id v12 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;

  _Block_object_dispose(buf, 8);
LABEL_16:

  return v12;
}

  return v11;
}

    if (v18) {
      free(v18);
    }
    goto LABEL_18;
  }

  if (!a2)
  {
    __nwlog_obj();
    BOOL v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v37 = "-[NWConcrete_nw_group_descriptor initWithType:member:groupID:]";
    id v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v33 = 0;
    if (__nwlog_fault(v22, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          id v37 = "-[NWConcrete_nw_group_descriptor initWithType:member:groupID:]";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null _type", buf, 0xCu);
        }
      }

      else if (v33)
      {
        int v28 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v23, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            id v37 = "-[NWConcrete_nw_group_descriptor initWithType:member:groupID:]";
            os_log_type_t v38 = 2082;
            uint64_t v39 = v28;
            _os_log_impl( &dword_181A5C000,  v23,  v29,  "%{public}s called with null _type, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v28);
          goto LABEL_54;
        }

        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          id v37 = "-[NWConcrete_nw_group_descriptor initWithType:member:groupID:]";
          _os_log_impl(&dword_181A5C000, v23, v29, "%{public}s called with null _type, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          id v37 = "-[NWConcrete_nw_group_descriptor initWithType:member:groupID:]";
          _os_log_impl( &dword_181A5C000,  v23,  v32,  "%{public}s called with null _type, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v14) {
    free(v14);
  }
  BOOL v8 = 0LL;
LABEL_16:

  return v8;
}

  if (v8) {
    free(v8);
  }
  return 0LL;
}

  if (v13) {
    free(v13);
  }
  return 0LL;
}

    int v26 = 0;
    *((_BYTE *)v5 + 302) |= 2u;
LABEL_50:
    uint64_t v39 = *((void *)v5 + 2);
    if (v39 && !nw_path_parameters_get_logging_disabled(*(void *)(v39 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      id v40 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        char v41 = v5;
        char v42 = v41 + 42;

        os_log_type_t v43 = v5[32];
        else {
          uint64_t v44 = off_189BB8B98[v43];
        }
        char v45 = off_189BB8B98[a2];
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
        uint64_t v46 = "";
        *(void *)&buf[14] = v42;
        *(_WORD *)&buf[12] = 2082;
        if (v26) {
          uint64_t v46 = ", suppressing client notification";
        }
        *(_WORD *)&buf[22] = 2082;
        v109 = (void *(*)(uint64_t, uint64_t))v44;
        *(_WORD *)v110 = 2082;
        *(void *)&v110[2] = v45;
        *(_WORD *)&v110[10] = 2114;
        *(void *)&v110[12] = v6;
        v111 = 2082;
        v112 = v46;
        _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] %{public}s -> %{public}s, error: %{public}@%{public}s",  buf,  0x3Eu);
      }
    }

    objc_storeStrong((id *)v5 + 17, a3);
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    v109 = __Block_byref_object_copy__3;
    *(void *)v110 = __Block_byref_object_dispose__4;
    *(void *)&v110[8] = 0LL;
    *(void *)os_log_type_t type = 0LL;
    v95 = type;
    v96 = 0x3032000000LL;
    v97 = __Block_byref_object_copy__17859;
    v98 = __Block_byref_object_dispose__17860;
    v99 = 0LL;
    v88 = 0LL;
    v89 = &v88;
    v90 = 0x3032000000LL;
    v91 = __Block_byref_object_copy__17859;
    v92 = __Block_byref_object_dispose__17860;
    v93 = 0LL;
    v47 = MEMORY[0x1895F87A8];
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    aBlock[3] = &unk_189BB8A10;
    v48 = v5;
    v87 = a2;
    v83 = v48;
    v84 = buf;
    v85 = type;
    v86 = &v88;
    v49 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v5 + 2);
    v49[2](v49);
    os_unfair_lock_unlock((os_unfair_lock_t)v5 + 2);

    if (*(void *)(*(void *)&buf[8] + 40LL)) {
      v50 = v26;
    }
    else {
      v50 = 1;
    }
    if ((v50 & 1) == 0)
    {
      v77[0] = v47;
      v77[1] = 3221225472LL;
      v77[2] = ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2;
      v77[3] = &unk_189BB8A38;
      v80 = buf;
      v81 = a2;
      v51 = v6;
      v78 = v51;
      v52 = v48;
      v79 = v52;
      v53 = _Block_copy(v77);
      if (*((void *)v95 + 5))
      {
        v54 = *((void *)v5 + 2);
        if (v54 && !nw_path_parameters_get_logging_disabled(*(void *)(v54 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          v55 = (os_log_s *)(id)glistenerLogObj;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            v56 = v52;

            v57 = off_189BB8B98[a2];
            *(_DWORD *)v100 = 136446978;
            v101 = "nw_listener_set_state_on_queue";
            v102 = 2082;
            v103 = (char *)v56 + 42;
            v104 = 2082;
            v105 = v57;
            v106 = 2114;
            v107 = v51;
            _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] reporting state %{public}s (%{public}@)",  v100,  0x2Au);
          }
        }

        v58 = (void *)*((void *)v95 + 5);
        v59 = *((_DWORD *)v52 + 18);
        block[0] = v47;
        block[1] = 3221225472LL;
        block[2] = ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_196;
        block[3] = &unk_189BBF570;
        v76 = &v88;
        v75 = v53;
        v60 = v58;
        v61 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0LL, v59, 0, block);
        dispatch_async(v60, v61);
      }

      else if (nw_context_is_inline(*((void **)v5 + 3)))
      {
        v62 = *((void *)v5 + 2);
        if (v62 && !nw_path_parameters_get_logging_disabled(*(void *)(v62 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          v63 = (os_log_s *)(id)glistenerLogObj;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            v64 = v52;

            v65 = off_189BB8B98[a2];
            *(_DWORD *)v100 = 136446978;
            v101 = "nw_listener_set_state_on_queue";
            v102 = 2082;
            v103 = (char *)v64 + 42;
            v104 = 2082;
            v105 = v65;
            v106 = 2114;
            v107 = v51;
            _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] reporting state %{public}s (%{public}@) inline",  v100,  0x2Au);
          }
        }

        nw_utilities_execute_block_as_persona_from_parameters((void *)v89[5], v53);
      }
    }

    _Block_object_dispose(&v88, 8);
    _Block_object_dispose(type, 8);

    _Block_object_dispose(buf, 8);
    goto LABEL_98;
  }

  id v14 = *((void *)v5 + 2);
  if (!v14 || nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104))) {
    goto LABEL_98;
  }
  if (__nwlog_listener_log::onceToken != -1) {
    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
  }
  int v15 = (id)glistenerLogObj;
  id v16 = v5;

  id v17 = v5[32];
  else {
    char v18 = off_189BB8B98[v17];
  }
  os_log_type_t v27 = off_189BB8B98[a2];
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
  *(_WORD *)&buf[12] = 2082;
  *(void *)&buf[14] = (char *)v16 + 42;
  *(_WORD *)&buf[22] = 2082;
  v109 = (void *(*)(uint64_t, uint64_t))v18;
  *(_WORD *)v110 = 2082;
  v73 = v27;
  *(void *)&v110[2] = v27;
  int v28 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v88) = 0;
  if (__nwlog_fault(v28, type, &v88))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      os_log_type_t v29 = (os_log_s *)(id)glistenerLogObj;
      BOOL v30 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {

        v31 = v5[32];
        else {
          os_log_type_t v32 = off_189BB8B98[v31];
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v16 + 42;
        *(_WORD *)&buf[22] = 2082;
        v109 = (void *(*)(uint64_t, uint64_t))v32;
        *(_WORD *)v110 = 2082;
        *(void *)&v110[2] = v73;
        _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s",  buf,  0x2Au);
      }
    }

    else if ((_BYTE)v88)
    {
      backtrace_string = __nw_create_backtrace_string();
      if (backtrace_string)
      {
        os_log_type_t v34 = (char *)backtrace_string;
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        os_log_type_t v35 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v36 = type[0];
        if (os_log_type_enabled(v35, type[0]))
        {

          id v37 = v5[32];
          else {
            os_log_type_t v38 = off_189BB8B98[v37];
          }
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = (char *)v16 + 42;
          *(_WORD *)&buf[22] = 2082;
          v109 = (void *(*)(uint64_t, uint64_t))v38;
          *(_WORD *)v110 = 2082;
          *(void *)&v110[2] = v73;
          *(_WORD *)&v110[10] = 2082;
          *(void *)&v110[12] = v34;
          _os_log_impl( &dword_181A5C000,  v35,  v36,  "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(v34);
        if (v28) {
          goto LABEL_97;
        }
        goto LABEL_98;
      }

      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      os_log_type_t v29 = (os_log_s *)(id)glistenerLogObj;
      v69 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {
        v70 = nw_listener_get_id_string(v16);
        v71 = v5[32];
        else {
          v72 = off_189BB8B98[v71];
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v70;
        *(_WORD *)&buf[22] = 2082;
        v109 = (void *(*)(uint64_t, uint64_t))v72;
        *(_WORD *)v110 = 2082;
        *(void *)&v110[2] = v73;
        _os_log_impl( &dword_181A5C000,  v29,  v69,  "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s, no backtrace",  buf,  0x2Au);
      }
    }

    else
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      os_log_type_t v29 = (os_log_s *)(id)glistenerLogObj;
      v66 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {

        v67 = v5[32];
        else {
          v68 = off_189BB8B98[v67];
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v16 + 42;
        *(_WORD *)&buf[22] = 2082;
        v109 = (void *(*)(uint64_t, uint64_t))v68;
        *(_WORD *)v110 = 2082;
        *(void *)&v110[2] = v73;
        _os_log_impl( &dword_181A5C000,  v29,  v66,  "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s, backtrace limit exceeded",  buf,  0x2Au);
      }
    }
  }

  if (v28) {
LABEL_97:
  }
    free(v28);
LABEL_98:
}

  os_log_type_t v38 = (id)v6;
LABEL_109:

  return v38;
}

        goto LABEL_50;
      }

      __nwlog_obj();
      BOOL v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
      char v18 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v32 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v22 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        int v28 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
            os_log_type_t v36 = 2082;
            id v37 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v18) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }

        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_181A5C000, v19, v27, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v30 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl( &dword_181A5C000,  v19,  v30,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    else
    {
      __nwlog_obj();
      id v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
      char v18 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v32 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null flow", buf, 0xCu);
        }
      }

      else if (v32)
      {
        int v23 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        os_log_type_t v25 = os_log_type_enabled(v19, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
            os_log_type_t v36 = 2082;
            id v37 = v23;
            _os_log_impl( &dword_181A5C000,  v19,  v24,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v23);
LABEL_47:
          if (!v18) {
            goto LABEL_49;
          }
LABEL_48:
          free(v18);
          goto LABEL_49;
        }

        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_181A5C000, v19, v24, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl( &dword_181A5C000,  v19,  v29,  "%{public}s called with null flow, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    goto LABEL_47;
  }

  id v14 = 1LL;
LABEL_52:

  return v14;
}

        free(v17);
        goto LABEL_50;
      }

      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_181A5C000, v18, v26, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v33 = "nw_listener_create_multicast";
        _os_log_impl( &dword_181A5C000,  v18,  v29,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

      xpc_dictionary_set_value(v2, "prohibited_interface_types", *v23);
      xpc_dictionary_set_value( v2,  "prohibited_interface_subtypes",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 8LL));
      xpc_dictionary_set_value( v2,  "preferred_interface_subtypes",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 16LL));
      xpc_dictionary_set_value( v2,  "prohibited_interfaces",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 24LL));
      xpc_dictionary_set_value( v2,  "prohibited_netagent_domains",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 32LL));
      xpc_dictionary_set_value( v2,  "prohibited_netagent_types",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 40LL));
      xpc_dictionary_set_value( v2,  "prohibited_netagent_uuids",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 48LL));
      xpc_dictionary_set_value( v2,  "required_netagent_domains",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 56LL));
      xpc_dictionary_set_value( v2,  "required_netagent_types",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 64LL));
      xpc_dictionary_set_value( v2,  "required_netagent_uuids",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 72LL));
      xpc_dictionary_set_value( v2,  "preferred_netagent_domains",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 80LL));
      xpc_dictionary_set_value( v2,  "preferred_netagent_types",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 88LL));
      xpc_dictionary_set_value( v2,  "preferred_netagent_uuids",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 96LL));
      xpc_dictionary_set_value( v2,  "avoided_netagent_domains",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 104LL));
      xpc_dictionary_set_value( v2,  "avoided_netagent_types",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 112LL));
      xpc_dictionary_set_value( v2,  "avoided_netagent_uuids",  *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176LL) + 120LL));
      goto LABEL_50;
    }

    if (v15) {
      free(v15);
    }
    id v13 = 0;
    goto LABEL_21;
  }

  size_t v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v4 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      CFRange v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_get_unsent_byte_count_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Client called nw_connection_get_unsent_byte_count on unconnected nw_connection",  buf,  0x12u);
    }
  }

      goto LABEL_50;
    }

    if (!v25)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        int v28 = "nw_authentication_credential_storage_set_default_credential";
        id v16 = "%{public}s called with null credential, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    BOOL v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v15 = type;
    os_log_type_t v24 = os_log_type_enabled(v14, type);
    if (!v21)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        int v28 = "nw_authentication_credential_storage_set_default_credential";
        id v16 = "%{public}s called with null credential, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      int v28 = "nw_authentication_credential_storage_set_default_credential";
      os_log_type_t v29 = 2082;
      BOOL v30 = v21;
      int v23 = "%{public}s called with null credential, dumping backtrace:%{public}s";
      goto LABEL_33;
    }

    goto LABEL_34;
  }

  id v9 = v5[1];
  ns_protection_space = (void *)nw_authentication_challenge_get_ns_protection_space(v6);
  if (ns_protection_space)
  {
    ns = (void *)nw_authentication_credential_create_ns(v8);
    [v9 setDefaultCredential:ns forProtectionSpace:ns_protection_space];
  }

LABEL_7:
}

  if ((v15 - 2001) > 1)
  {
    *(_DWORD *)buf = 4;
    nw_proxy_config_remove_protocols_from_stack(v40, v163);
    v54 = nw_protocol_options_copy_definition(options);
    v55 = nw_proxy_config_copy_protocol_stack(v40, v54, buf);

    if (!v55)
    {
LABEL_84:

      goto LABEL_85;
    }

    if (*(_DWORD *)buf == 2)
    {
      v57 = v163;
      nw_protocol_stack_append_application_protocol(v163, options);
      v56 = v161;
    }

    else
    {
      v56 = options;
      v57 = v163;
      if (*(_DWORD *)buf != 3) {
        goto LABEL_69;
      }
    }

    nw_protocol_stack_append_application_protocol(v57, v56);
LABEL_69:
    iterate_block[0] = MEMORY[0x1895F87A8];
    iterate_block[1] = 3221225472LL;
    iterate_block[2] = ___ZL38nw_endpoint_proxy_add_child_for_configP30NWConcrete_nw_endpoint_handlerPU29objcproto18OS_nw_proxy_config8NSObjectS3__block_invoke;
    iterate_block[3] = &unk_189BC5C38;
    v61 = (id)v29;
    v174 = v61;
    v62 = v57;
    v175 = v62;
    nw_protocol_stack_iterate_application_protocols((nw_protocol_stack_t)v55, iterate_block);
    v63 = v55;
    v64 = (nw_protocol_options *)v63[3];

    if (v64)
    {
      nw_protocol_stack_set_original_proxied_transport_protocol(v62, options);
      nw_protocol_stack_set_transport_protocol(v62, v64);
    }

    v65 = v40;
    v66 = (v65[171] & 4) == 0;

    if (!v66)
    {
      v67 = (id)g_tcp_definition;
      v68 = nw_parameters_copy_protocol_options_for_definition(v61, v67);

      if (v68)
      {
        nw_tcp_options_set_enable_fast_open((nw_protocol_options_t)v68, 1);
        v69 = v65;
        v70 = (v65[171] & 1) == 0;

        if (!v70) {
          nw_tcp_options_set_fast_open_force_enable(v68, 1);
        }
        v71 = v69;
        v72 = (v65[171] & 8) == 0;

        if (!v72) {
          nw_tcp_options_set_no_fast_open_cookie(v68, 1);
        }
      }
    }

    v73 = v65;
    v74 = v73[40];

    if (v74)
    {
      nw_parameters_set_multipath_service((nw_parameters_t)v61, v74);
      v75 = v73;
      v76 = (v65[171] & 2) == 0;

      if (!v76) {
        nw_parameters_set_multipath_force_enable(v61, 1);
      }
    }

    goto LABEL_84;
  }

  if (!nw_parameters_get_no_opaque_proxy((void *)v29))
  {
    nw_parameters_set_fast_open_enabled((nw_parameters_t)v29, 0);
    v58 = (id)g_tcp_definition;
    v59 = nw_parameters_copy_protocol_options_for_definition((void *)v29, v58);

    if (v59) {
      nw_tcp_options_set_enable_fast_open((nw_protocol_options_t)v59, 0);
    }
    v60 = (void *)nw_protocol_boringssl_copy_definition();
    nw_parameters_remove_definition_from_protocol_stack((void *)v29, v60);

    nw_proxy_config_remove_protocols_from_stack(v40, v163);
    goto LABEL_85;
  }

  uint64_t v44 = nw_endpoint_handler_get_minimize_logging(v171);
  char v45 = nw_endpoint_handler_get_logging_disabled(v171);
  if (v44)
  {
    if ((v45 & 1) != 0) {
      goto LABEL_98;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    inner = (id *)(id)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)inner, OS_LOG_TYPE_DEBUG))
    {
      v137 = nw_endpoint_handler_get_id_string(v171);
      v138 = nw_endpoint_handler_dry_run_string(v171);
      v139 = nw_endpoint_handler_copy_endpoint(v171);
      v140 = nw_endpoint_get_logging_description(v139);
      v141 = nw_endpoint_handler_state_string(v171);
      v142 = nw_endpoint_handler_mode_string(v171);
      v143 = nw_endpoint_handler_copy_current_path(v171);
      *(_DWORD *)buf = 136447746;
      v178 = "nw_endpoint_proxy_add_child_for_config";
      v179 = 2082;
      v180 = (void *)v137;
      v181 = 2082;
      v182 = v138;
      v183 = 2082;
      v184 = v140;
      v185 = 2082;
      v186 = v141;
      v187 = 2082;
      v188 = v142;
      v189 = 2114;
      v190 = v143;
      _os_log_impl( &dword_181A5C000,  (os_log_t)inner,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] opaque proxy not supported on c onnection, skipping",  buf,  0x48u);
    }

    goto LABEL_97;
  }

  if ((v45 & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    inner = (id *)(id)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)inner, OS_LOG_TYPE_INFO))
    {
      v47 = nw_endpoint_handler_get_id_string(v171);
      v48 = nw_endpoint_handler_dry_run_string(v171);
      v49 = nw_endpoint_handler_copy_endpoint(v171);
      v50 = nw_endpoint_get_logging_description(v49);
      v51 = nw_endpoint_handler_state_string(v171);
      v52 = nw_endpoint_handler_mode_string(v171);
      v53 = nw_endpoint_handler_copy_current_path(v171);
      *(_DWORD *)buf = 136447746;
      v178 = "nw_endpoint_proxy_add_child_for_config";
      v179 = 2082;
      v180 = (void *)v47;
      v181 = 2082;
      v182 = v48;
      v183 = 2082;
      v184 = v50;
      v185 = 2082;
      v186 = v51;
      v187 = 2082;
      v188 = v52;
      v189 = 2114;
      v190 = v53;
      _os_log_impl( &dword_181A5C000,  (os_log_t)inner,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] opaque proxy not supported on c onnection, skipping",  buf,  0x48u);
    }

    goto LABEL_97;
  }

      if (v13) {
        free(v13);
      }
      return 0LL;
    }

    if (!v23)
    {
      id v14 = (os_log_s *)__nwlog_obj();
      int v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        int v26 = "nw_masque_deserialize_options";
        id v16 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v14 = (os_log_s *)__nwlog_obj();
    int v15 = type;
    uint64_t v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        int v26 = "nw_masque_deserialize_options";
        id v16 = "%{public}s called with null serialized_bytes, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      int v26 = "nw_masque_deserialize_options";
      os_log_type_t v27 = 2082;
      int v28 = (uint64_t)backtrace_string;
      BOOL v21 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
LABEL_38:
      _os_log_impl(&dword_181A5C000, v14, v15, v21, buf, 0x16u);
    }

    free(backtrace_string);
    if (!v8) {
      return;
    }
LABEL_81:
    free(v8);
    return;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v42 = "nw_protocol_masque_input_finished";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = (os_log_s *)__nwlog_obj();
      BOOL v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_masque_input_finished";
      id v11 = "%{public}s called with null masque";
      goto LABEL_67;
    }

    if (!v39)
    {
      id v9 = (os_log_s *)__nwlog_obj();
      BOOL v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_masque_input_finished";
      id v11 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_67;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v9 = (os_log_s *)__nwlog_obj();
    BOOL v10 = type;
    os_log_type_t v24 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v24) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_masque_input_finished";
      id v11 = "%{public}s called with null masque, no backtrace";
      goto LABEL_67;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      char v42 = "nw_protocol_masque_input_finished";
      os_log_type_t v43 = 2082;
      uint64_t v44 = backtrace_string;
      int v23 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_48;
    }

    goto LABEL_49;
  }

  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    id v12 = (os_log_s *)gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      char v42 = "nw_protocol_masque_input_finished";
      os_log_type_t v43 = 2082;
      uint64_t v44 = handle + 531;
      char v45 = 2080;
      uint64_t v46 = " ";
      _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }

  if (*((_DWORD *)handle + 127) != 2 && !*((_DWORD *)handle + 129))
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_finished = (void (*)(void))callbacks->input_finished;
        if (input_finished)
        {
          input_finished();
          return;
        }
      }
    }

    __nwlog_obj();
    id v13 = a1->default_input_handler;
    id v14 = "invalid";
    if (v13)
    {
      identifier = v13->identifier;
      if (identifier) {
        id v14 = (const char *)identifier;
      }
    }

    *(_DWORD *)buf = 136446466;
    char v42 = "nw_protocol_masque_input_finished";
    os_log_type_t v43 = 2082;
    uint64_t v44 = (char *)v14;
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v39 = 0;
    if (__nwlog_fault(v8, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v16 = (os_log_s *)__nwlog_obj();
        id v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_80;
        }
        char v18 = a1->default_input_handler;
        id v19 = "invalid";
        if (v18)
        {
          uint64_t v20 = v18->identifier;
          if (v20) {
            id v19 = (const char *)v20;
          }
        }

        *(_DWORD *)buf = 136446466;
        char v42 = "nw_protocol_masque_input_finished";
        os_log_type_t v43 = 2082;
        uint64_t v44 = (char *)v19;
        id v11 = "%{public}s protocol %{public}s has invalid input_finished callback";
LABEL_78:
        BOOL v30 = v16;
        v31 = v17;
        os_log_type_t v32 = 22;
        goto LABEL_79;
      }

      if (!v39)
      {
        id v16 = (os_log_s *)__nwlog_obj();
        id v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_80;
        }
        BOOL v33 = a1->default_input_handler;
        os_log_type_t v34 = "invalid";
        if (v33)
        {
          os_log_type_t v35 = v33->identifier;
          if (v35) {
            os_log_type_t v34 = (const char *)v35;
          }
        }

        *(_DWORD *)buf = 136446466;
        char v42 = "nw_protocol_masque_input_finished";
        os_log_type_t v43 = 2082;
        uint64_t v44 = (char *)v34;
        id v11 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
        goto LABEL_78;
      }

      os_log_type_t v25 = (char *)__nw_create_backtrace_string();
      id v16 = (os_log_s *)__nwlog_obj();
      id v17 = type;
      int v26 = os_log_type_enabled(v16, type);
      if (!v25)
      {
        if (!v26) {
          goto LABEL_80;
        }
        os_log_type_t v36 = a1->default_input_handler;
        id v37 = "invalid";
        if (v36)
        {
          os_log_type_t v38 = v36->identifier;
          if (v38) {
            id v37 = (const char *)v38;
          }
        }

        *(_DWORD *)buf = 136446466;
        char v42 = "nw_protocol_masque_input_finished";
        os_log_type_t v43 = 2082;
        uint64_t v44 = (char *)v37;
        id v11 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
        goto LABEL_78;
      }

      if (v26)
      {
        os_log_type_t v27 = a1->default_input_handler;
        int v28 = "invalid";
        if (v27)
        {
          os_log_type_t v29 = v27->identifier;
          if (v29) {
            int v28 = (const char *)v29;
          }
        }

        *(_DWORD *)buf = 136446722;
        char v42 = "nw_protocol_masque_input_finished";
        os_log_type_t v43 = 2082;
        uint64_t v44 = (char *)v28;
        char v45 = 2082;
        uint64_t v46 = v25;
        _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(v25);
    }

  v52 = v11;
  state = v52->state;

  if ((state & 0xFFFFFFFE) != 4)
  {
    v67 = nw_endpoint_handler_copy_resolver(v52);
    v68 = v67;
    if (*((id *)v67 + 1) == v141)
    {
      v81 = (void *)*((void *)v67 + 13);
      if (!v81)
      {
        v82 = nw_endpoint_handler_copy_endpoint(v52);
        v83 = nw_endpoint_copy(v82);
        v84 = (void *)*((void *)v68 + 13);
        *((void *)v68 + 13) = v83;

        v81 = (void *)*((void *)v68 + 13);
      }

      nw_endpoint_add_alternative(v81, v142, v143);
      v52->event = (nw_endpoint_handler_event_s)524290;
      nw_endpoint_handler_report(v52, 0LL, &v52->event.domain, 0LL);
      goto LABEL_94;
    }

    if (nw_endpoint_handler_get_minimize_logging(v52))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v71 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
        v128 = nw_endpoint_handler_get_id_string(v52);
        v129 = nw_endpoint_handler_dry_run_string(v52);
        v130 = nw_endpoint_handler_copy_endpoint(v52);
        v131 = nw_endpoint_get_logging_description(v130);
        v132 = nw_endpoint_handler_state_string(v52);
        v133 = nw_endpoint_handler_mode_string(v52);
        v134 = nw_endpoint_handler_copy_current_path(v52);
        v135 = (const char *)*((void *)v68 + 1);
        *(_DWORD *)buf = 136448258;
        v147 = "nw_endpoint_resolver_handle_alternative";
        v148 = 2082;
        id_str = (char *)v128;
        v150 = 2082;
        v151 = v129;
        v152 = 2082;
        v153 = v131;
        v154 = 2082;
        v155 = v132;
        v156 = 2082;
        v157 = v133;
        v158 = 2114;
        v159 = v134;
        v160 = 2048;
        v161 = v135;
        v162 = 2048;
        v163 = v141;
        _os_log_impl( &dword_181A5C000,  v71,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring update from old reso lver object (%p != %p)",  buf,  0x5Cu);
      }
    }

    else
    {
      v69 = v52;
      v70 = (*((_BYTE *)v69 + 268) & 0x20) == 0;

      if (!v70)
      {
LABEL_94:

        goto LABEL_95;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v71 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        v72 = v69;

        v73 = v72;
        v74 = (*((_BYTE *)v69 + 268) & 1) == 0;

        if (v74) {
          v75 = "";
        }
        else {
          v75 = "dry-run ";
        }
        v76 = nw_endpoint_handler_copy_endpoint(v73);
        v138 = nw_endpoint_get_logging_description(v76);
        v77 = v73;
        v78 = v77;
        v79 = v52->state;
        else {
          v80 = off_189BBBBF0[v79];
        }

        v89 = v78;
        v90 = v89;
        v91 = v11[29];
        v92 = "path";
        switch(v91)
        {
          case 0u:
            break;
          case 1u:
            v92 = "resolver";
            break;
          case 2u:
            v92 = nw_endpoint_flow_mode_string(v89[31]);
            break;
          case 3u:
            v92 = "proxy";
            break;
          case 4u:
            v92 = "fallback";
            break;
          case 5u:
            v92 = "transform";
            break;
          default:
            v92 = "unknown-mode";
            break;
        }

        v95 = v76;
        v96 = v90;
        os_unfair_lock_lock((os_unfair_lock_t)v96 + 28);
        v97 = v96[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v96 + 28);

        v98 = (const char *)*((void *)v68 + 1);
        *(_DWORD *)buf = 136448258;
        v147 = "nw_endpoint_resolver_handle_alternative";
        v148 = 2082;
        id_str = v72->id_str;
        v150 = 2082;
        v151 = v75;
        v152 = 2082;
        v153 = v138;
        v154 = 2082;
        v155 = v80;
        v156 = 2082;
        v157 = v92;
        v158 = 2114;
        v159 = v97;
        v160 = 2048;
        v161 = v98;
        v162 = 2048;
        v163 = v141;
        _os_log_impl( &dword_181A5C000,  v71,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring update from old reso lver object (%p != %p)",  buf,  0x5Cu);
      }
    }

    goto LABEL_94;
  }

  if (nw_endpoint_handler_get_minimize_logging(v52))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v56 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      v113 = nw_endpoint_handler_get_id_string(v52);
      v114 = nw_endpoint_handler_dry_run_string(v52);
      v115 = nw_endpoint_handler_copy_endpoint(v52);
      v116 = nw_endpoint_get_logging_description(v115);
      v117 = nw_endpoint_handler_state_string(v52);
      v118 = nw_endpoint_handler_mode_string(v52);
      v119 = nw_endpoint_handler_copy_current_path(v52);
      *(_DWORD *)buf = 136447746;
      v147 = "nw_endpoint_resolver_handle_alternative";
      v148 = 2082;
      id_str = (char *)v113;
      v150 = 2082;
      v151 = v114;
      v152 = 2082;
      v153 = v116;
      v154 = 2082;
      v155 = v117;
      v156 = 2082;
      v157 = v118;
      v158 = 2114;
      v159 = v119;
      _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Ignoring resolver alternative",  buf,  0x48u);
    }

    goto LABEL_86;
  }

  v54 = v52;
  v55 = (*((_BYTE *)v54 + 268) & 0x20) == 0;

  if (v55)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v56 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      v57 = v54;

      v58 = v57;
      v59 = (*((_BYTE *)v54 + 268) & 1) == 0;

      if (v59) {
        v60 = "";
      }
      else {
        v60 = "dry-run ";
      }
      v61 = nw_endpoint_handler_copy_endpoint(v58);
      v62 = nw_endpoint_get_logging_description(v61);
      v63 = v58;
      v64 = v63;
      v65 = v52->state;
      else {
        v66 = off_189BBBBF0[v65];
      }

      v85 = v64;
      v86 = v85;
      v87 = v11[29];
      v88 = "path";
      switch(v87)
      {
        case 0u:
          break;
        case 1u:
          v88 = "resolver";
          break;
        case 2u:
          v88 = nw_endpoint_flow_mode_string(v85[31]);
          break;
        case 3u:
          v88 = "proxy";
          break;
        case 4u:
          v88 = "fallback";
          break;
        case 5u:
          v88 = "transform";
          break;
        default:
          v88 = "unknown-mode";
          break;
      }

      v93 = v86;
      os_unfair_lock_lock((os_unfair_lock_t)v93 + 28);
      v94 = v93[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v93 + 28);

      *(_DWORD *)buf = 136447746;
      v147 = "nw_endpoint_resolver_handle_alternative";
      v148 = 2082;
      id_str = v57->id_str;
      v150 = 2082;
      v151 = v60;
      v152 = 2082;
      v153 = v62;
      v154 = 2082;
      v155 = v66;
      v156 = 2082;
      v157 = v88;
      v158 = 2114;
      v159 = v94;
      _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Ignoring resolver alternative",  buf,  0x48u);
    }
  }

LABEL_50:
    if (v23) {
      free(v23);
    }
    goto LABEL_52;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v8 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  char v41 = "tcp_connection_set_persistent";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v38 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (os_log_s *)(id)gLogObj;
    id v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v41 = "tcp_connection_set_persistent";
    id v12 = "%{public}s called with null connection";
LABEL_39:
    BOOL v30 = v10;
    v31 = v11;
LABEL_40:
    _os_log_impl(&dword_181A5C000, v30, v31, v12, buf, 0xCu);
    goto LABEL_41;
  }

  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (os_log_s *)(id)gLogObj;
    id v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v41 = "tcp_connection_set_persistent";
    id v12 = "%{public}s called with null connection, backtrace limit exceeded";
    goto LABEL_39;
  }

  id v19 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v10 = (os_log_s *)(id)gLogObj;
  uint64_t v20 = type;
  BOOL v21 = os_log_type_enabled(v10, type);
  if (v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      char v41 = "tcp_connection_set_persistent";
      char v42 = 2082;
      os_log_type_t v43 = v19;
      _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v19);
LABEL_22:
    if (!v9) {
      goto LABEL_53;
    }
    goto LABEL_42;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446210;
    char v41 = "tcp_connection_set_persistent";
    id v12 = "%{public}s called with null connection, no backtrace";
    BOOL v30 = v10;
    v31 = v20;
    goto LABEL_40;
  }

    if (v11) {
      free(v11);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
    id v11 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v100[0]) = 0;
    if (__nwlog_fault(v11, type, v100))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v12 = (os_log_s *)__nwlog_obj();
        id v13 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
          id v14 = "%{public}s called with null webtransport_session";
          goto LABEL_48;
        }
      }

      else if (LOBYTE(v100[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v12 = (os_log_s *)__nwlog_obj();
        id v13 = type[0];
        v67 = os_log_type_enabled(v12, type[0]);
        if (backtrace_string)
        {
          if (!v67) {
            goto LABEL_25;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          int v23 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
          goto LABEL_24;
        }

        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
          id v14 = "%{public}s called with null webtransport_session, no backtrace";
          goto LABEL_48;
        }
      }

      else
      {
        id v12 = (os_log_s *)__nwlog_obj();
        id v13 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
          id v14 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
          goto LABEL_48;
        }
      }
    }

    goto LABEL_49;
  }

  uint64_t v7 = *((void *)handle + 50);
  if ((handle[548] & 2) == 0)
  {
    if (gLogDatapath)
    {
      v64 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        v65 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&buf[22] = 2080;
        v107 = (uint64_t (*)(uint64_t, uint64_t))" ";
        LOWORD(v108) = 1024;
        *(_DWORD *)((char *)&v108 + 2) = v65;
        HIWORD(v108) = 2112;
        v109 = a2;
        _os_log_impl( &dword_181A5C000,  v64,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> creating new inbound flow from %@",  buf,  0x30u);
      }
    }
  }

  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
    id v11 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v100[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)gLogObj;
      id v13 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v14 = "%{public}s No listener found for webtransport inbound stream";
      goto LABEL_48;
    }

    if (!LOBYTE(v100[0]))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)gLogObj;
      id v13 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v14 = "%{public}s No listener found for webtransport inbound stream, backtrace limit exceeded";
      goto LABEL_48;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (os_log_s *)gLogObj;
    id v13 = type[0];
    id v22 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v14 = "%{public}s No listener found for webtransport inbound stream, no backtrace";
      goto LABEL_48;
    }

    if (!v22)
    {
LABEL_25:
      free(backtrace_string);
      goto LABEL_49;
    }

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    int v23 = "%{public}s No listener found for webtransport inbound stream, dumping backtrace:%{public}s";
LABEL_24:
    _os_log_impl(&dword_181A5C000, v12, v13, v23, buf, 0x16u);
    goto LABEL_25;
  }

  BOOL v8 = *((_DWORD *)handle + 112);
  if (v8 >= 2)
  {
    if (v8 != 2 || (handle[548] & 2) != 0) {
      return 0LL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v15 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    id v17 = *((_DWORD *)handle + 115);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = handle + 464;
    *(_WORD *)&buf[22] = 2080;
    v107 = (uint64_t (*)(uint64_t, uint64_t))" ";
    LOWORD(v108) = 1024;
    *(_DWORD *)((char *)&v108 + 2) = v17;
    char v18 = "%{public}s %{public}s%s<i%u> Cannot create new inbound flow with unknown transport mode";
    id v19 = (os_log_s *)v15;
    uint64_t v20 = OS_LOG_TYPE_ERROR;
    goto LABEL_19;
  }

  if (*((_DWORD *)handle + 111) != 2)
  {
    os_log_type_t v24 = handle[548] | 0x20;
    handle[548] = v24;
    if (v8 != 1)
    {
LABEL_56:
      result = (**(uint64_t (***)(uint64_t, nw_endpoint *, nw_parameters *))v7)(v7, a2, a3);
      handle[548] &= ~0x20u;
      *((void *)handle + 22) = -1LL;
      return result;
    }

    if (*(void *)(v7 + 8))
    {
      os_log_type_t v25 = (void *)*((void *)handle + 47);
      if (v25)
      {
        last_application_stream_id = nw_http_connection_metadata_get_last_application_stream_id(v25);
        if ((handle[548] & 2) != 0) {
          goto LABEL_55;
        }
      }

      else
      {
        last_application_stream_id = -1LL;
        if ((v24 & 2) != 0)
        {
LABEL_55:
          *((void *)handle + 22) = last_application_stream_id;
          goto LABEL_56;
        }
      }

      if (gLogDatapath)
      {
        v82 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
        {
          v83 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&buf[22] = 2080;
          v107 = (uint64_t (*)(uint64_t, uint64_t))" ";
          LOWORD(v108) = 1024;
          *(_DWORD *)((char *)&v108 + 2) = v83;
          HIWORD(v108) = 2048;
          v109 = (void *)last_application_stream_id;
          v110 = 1024;
          v111 = 1;
          _os_log_impl( &dword_181A5C000,  v82,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Got stream ID: %llu from session: %u",  buf,  0x36u);
        }
      }

      goto LABEL_55;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
    v72 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v100[0]) = 0;
    if (__nwlog_fault(v72, type, v100))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v73 = (os_log_s *)__nwlog_obj();
        v74 = type[0];
        if (os_log_type_enabled(v73, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
          v75 = "%{public}s called with null output_protocol";
LABEL_171:
          _os_log_impl(&dword_181A5C000, v73, v74, v75, buf, 0xCu);
        }
      }

      else if (LOBYTE(v100[0]))
      {
        v84 = (char *)__nw_create_backtrace_string();
        v73 = (os_log_s *)__nwlog_obj();
        v74 = type[0];
        v85 = os_log_type_enabled(v73, type[0]);
        if (v84)
        {
          if (v85)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v84;
            _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s called with null output_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v84);
          goto LABEL_172;
        }

        if (v85)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
          v75 = "%{public}s called with null output_protocol, no backtrace";
          goto LABEL_171;
        }
      }

      else
      {
        v73 = (os_log_s *)__nwlog_obj();
        v74 = type[0];
        if (os_log_type_enabled(v73, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
          v75 = "%{public}s called with null output_protocol, backtrace limit exceeded";
          goto LABEL_171;
        }
      }
    }

      if (v16) {
        free(v16);
      }
      goto LABEL_51;
    }

    if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
      goto LABEL_71;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    id v40 = "nw_http_connect_send_auth_request";
    char v41 = 2082;
    char v42 = (char *)(a1 + 284);
    os_log_type_t v43 = 2080;
    uint64_t v44 = " ";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v33 = 0;
    if (__nwlog_fault(v10, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)gLogObj;
        id v12 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_69;
        }
        *(_DWORD *)buf = 136446722;
        id v40 = "nw_http_connect_send_auth_request";
        char v41 = 2082;
        char v42 = (char *)(a1 + 284);
        os_log_type_t v43 = 2080;
        uint64_t v44 = " ";
        id v13 = "%{public}s %{public}s%sCFDictionaryCreateMutable failed";
LABEL_68:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0x20u);
        goto LABEL_69;
      }

      if (!v33)
      {
        id v11 = (os_log_s *)__nwlog_obj();
        id v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_69;
        }
        *(_DWORD *)buf = 136446722;
        id v40 = "nw_http_connect_send_auth_request";
        char v41 = 2082;
        char v42 = (char *)(a1 + 284);
        os_log_type_t v43 = 2080;
        uint64_t v44 = " ";
        id v13 = "%{public}s %{public}s%sCFDictionaryCreateMutable failed, backtrace limit exceeded";
        goto LABEL_68;
      }

      id v14 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = (os_log_s *)gLogObj;
      id v12 = type;
      int v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_69;
        }
        *(_DWORD *)buf = 136446722;
        id v40 = "nw_http_connect_send_auth_request";
        char v41 = 2082;
        char v42 = (char *)(a1 + 284);
        os_log_type_t v43 = 2080;
        uint64_t v44 = " ";
        id v13 = "%{public}s %{public}s%sCFDictionaryCreateMutable failed, no backtrace";
        goto LABEL_68;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446978;
        id v40 = "nw_http_connect_send_auth_request";
        char v41 = 2082;
        char v42 = (char *)(a1 + 284);
        os_log_type_t v43 = 2080;
        uint64_t v44 = " ";
        char v45 = 2082;
        uint64_t v46 = v14;
        _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s %{public}s%sCFDictionaryCreateMutable failed, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v14);
    }

      if (v7) {
        free(v7);
      }
      goto LABEL_8;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
    id v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v26 = 0;
    if (__nwlog_fault(v12, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v13 = (os_log_s *)__nwlog_obj();
        id v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
        int v15 = "%{public}s called with null http2_transport";
        goto LABEL_55;
      }

      if (!v26)
      {
        id v13 = (os_log_s *)__nwlog_obj();
        id v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
        int v15 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_55;
      }

      id v22 = (char *)__nw_create_backtrace_string();
      id v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      int v23 = os_log_type_enabled(v13, type);
      if (v22)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
          BOOL v30 = 2082;
          v31 = v22;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null http2_transport, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v22);
        if (v12) {
          goto LABEL_57;
        }
        return;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
        int v15 = "%{public}s called with null http2_transport, no backtrace";
LABEL_55:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
    id v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
      int v15 = "%{public}s called with null protocol";
      goto LABEL_55;
    }

    if (!v26)
    {
      id v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
      int v15 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_55;
    }

    uint64_t v20 = (char *)__nw_create_backtrace_string();
    id v13 = (os_log_s *)__nwlog_obj();
    id v14 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!v20)
    {
      if (!v21) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
      int v15 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_55;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_protocol_http2_transport_disconnected";
      BOOL v30 = 2082;
      v31 = v20;
      _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v20);
  }

  if (v40) {
    free(v40);
  }
  size_t v3 = 0LL;
LABEL_32:

  return v3;
}

          free(v21);
          goto LABEL_50;
        }

        __nwlog_obj();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136447234;
        v95 = "nw_necp_append_tlv";
        v96 = 2048;
        v97 = v18;
        v98 = 2048;
        v99 = v19;
        v100 = 1024;
        *(_DWORD *)v101 = 4;
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)&v101[6] = 42;
        BOOL v21 = (char *)_os_log_send_and_compose_impl();

        v90 = OS_LOG_TYPE_ERROR;
        v89 = 0;
        if (v90 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v59 = v90;
          if (os_log_type_enabled(v22, v90))
          {
            *(_DWORD *)buf = 136447234;
            v95 = "nw_necp_append_tlv";
            v96 = 2048;
            v97 = v18;
            v98 = 2048;
            v99 = v19;
            v100 = 1024;
            *(_DWORD *)v101 = 4;
            *(_WORD *)&v101[4] = 1024;
            *(_DWORD *)&v101[6] = 42;
            _os_log_impl( &dword_181A5C000,  v22,  v59,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  buf,  0x2Cu);
          }
        }

        else if (v89)
        {
          v74 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v75 = v90;
          v76 = os_log_type_enabled(v22, v90);
          if (v74)
          {
            if (v76)
            {
              *(_DWORD *)buf = 136447490;
              v95 = "nw_necp_append_tlv";
              v96 = 2048;
              v97 = v18;
              v98 = 2048;
              v99 = v19;
              v100 = 1024;
              *(_DWORD *)v101 = 4;
              *(_WORD *)&v101[4] = 1024;
              *(_DWORD *)&v101[6] = 42;
              *(_WORD *)v102 = 2082;
              *(void *)&v102[2] = v74;
              _os_log_impl( &dword_181A5C000,  v22,  v75,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
            }

            free(v74);
            goto LABEL_48;
          }

          if (v76)
          {
            *(_DWORD *)buf = 136447234;
            v95 = "nw_necp_append_tlv";
            v96 = 2048;
            v97 = v18;
            v98 = 2048;
            v99 = v19;
            v100 = 1024;
            *(_DWORD *)v101 = 4;
            *(_WORD *)&v101[4] = 1024;
            *(_DWORD *)&v101[6] = 42;
            _os_log_impl( &dword_181A5C000,  v22,  v75,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  buf,  0x2Cu);
          }
        }

        else
        {
          __nwlog_obj();
          id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v82 = v90;
          if (os_log_type_enabled(v22, v90))
          {
            *(_DWORD *)buf = 136447234;
            v95 = "nw_necp_append_tlv";
            v96 = 2048;
            v97 = v18;
            v98 = 2048;
            v99 = v19;
            v100 = 1024;
            *(_DWORD *)v101 = 4;
            *(_WORD *)&v101[4] = 1024;
            *(_DWORD *)&v101[6] = 42;
            _os_log_impl( &dword_181A5C000,  v22,  v82,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  buf,  0x2Cu);
          }
        }

          id v37 = *(void *)(v2 + 488);
          if (v37)
          {
            nw_protocol_error(*(void **)(v37 + 48), v37);
            os_log_type_t v38 = *(void *)(v2 + 488);
            if (v38) {
              uint64_t v39 = *(void **)(v38 + 48);
            }
            else {
              uint64_t v39 = 0LL;
            }
            nw_protocol_disconnected(v39, v38);
          }

          return;
        }

    if (v28) {
      free(v28);
    }
    *(_DWORD *)(v11 + 340) = 0;
    goto LABEL_52;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
  id v13 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v213) = 0;
  if (type == 17)
  {
    v108 = (os_log_s *)__nwlog_obj();
    v109 = type;
    if (os_log_type_enabled(v108, (os_log_type_t)type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
      id v16 = "%{public}s called with null http1_connection";
      goto LABEL_334;
    }

    goto LABEL_42;
  }

  if (!(_BYTE)v213)
  {
    v108 = (os_log_s *)__nwlog_obj();
    v109 = type;
    if (os_log_type_enabled(v108, (os_log_type_t)type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
      id v16 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_334;
    }

    goto LABEL_42;
  }

  id v19 = (char *)__nw_create_backtrace_string();
  v108 = (os_log_s *)__nwlog_obj();
  v109 = type;
  v168 = os_log_type_enabled(v108, (os_log_type_t)type);
  if (!v19)
  {
    id v12 = &qword_18C45F000;
    if (v168)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
      id v16 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_334;
    }

    goto LABEL_42;
  }

  if (v168)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v19;
    BOOL v21 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
    id v22 = v108;
    int v23 = v109;
    os_log_type_t v24 = 22;
LABEL_22:
    _os_log_impl(&dword_181A5C000, v22, v23, v21, buf, v24);
  }

      goto LABEL_50;
    }

    if (!v33)
    {
      __nwlog_obj();
      int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "-[NWRemoteConnectionDirector createOpenConnectionMessageForClientID:endpoint:parameters:]";
        os_log_type_t v25 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = type;
    os_log_type_t v32 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "-[NWRemoteConnectionDirector createOpenConnectionMessageForClientID:endpoint:parameters:]";
        os_log_type_t v25 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v32) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v36 = "-[NWRemoteConnectionDirector createOpenConnectionMessageForClientID:endpoint:parameters:]";
    id v37 = 2082;
    os_log_type_t v38 = backtrace_string;
    BOOL v30 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
    goto LABEL_34;
  }

      goto LABEL_50;
    }

    if (!v33)
    {
      __nwlog_obj();
      int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "-[NWRemoteConnectionDirector createStartBrowseMessageForClientID:descriptor:parameters:]";
        os_log_type_t v25 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = type;
    os_log_type_t v32 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "-[NWRemoteConnectionDirector createStartBrowseMessageForClientID:descriptor:parameters:]";
        os_log_type_t v25 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v32) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v36 = "-[NWRemoteConnectionDirector createStartBrowseMessageForClientID:descriptor:parameters:]";
    id v37 = 2082;
    os_log_type_t v38 = backtrace_string;
    BOOL v30 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
    goto LABEL_34;
  }

    if (v21) {
      free(v21);
    }
    BOOL v8 = 0LL;
    goto LABEL_18;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v33) = 0;
    if (__nwlog_fault(v21, type, &v33))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
          os_log_type_t v24 = "%{public}s called with null size";
          goto LABEL_47;
        }

        goto LABEL_48;
      }

      if (!(_BYTE)v33)
      {
        __nwlog_obj();
        id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
          os_log_type_t v24 = "%{public}s called with null size, backtrace limit exceeded";
          goto LABEL_47;
        }

        goto LABEL_48;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v23 = type[0];
      os_log_type_t v29 = os_log_type_enabled(v22, type[0]);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
          os_log_type_t v24 = "%{public}s called with null size, no backtrace";
          goto LABEL_47;
        }

        goto LABEL_48;
      }

      if (!v29) {
        goto LABEL_36;
      }
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "nw_h3_0rtt_storage_canvas_serialize";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = backtrace_string;
      int v28 = "%{public}s called with null size, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_181A5C000, v22, v23, v28, applier, 0x16u);
LABEL_36:

      free(backtrace_string);
      goto LABEL_49;
    }

    goto LABEL_49;
  }

  CFRange v5 = v3;
  *((_BYTE *)v5 + 32) = 0;
  CFRange v6 = (dispatch_data_s *)*((void *)v5 + 1);
  if (!v6 || (uint64_t v7 = (dispatch_data_s *)*((void *)v5 + 2)) == 0LL)
  {
    BOOL v8 = 0LL;
    goto LABEL_17;
  }

  BOOL v8 = (dispatch_data_s *)*((void *)v5 + 3);
  if (!v8)
  {
LABEL_17:

LABEL_18:
    return (BOOL)v8;
  }

  size = dispatch_data_get_size(v6);
  BOOL v10 = dispatch_data_get_size(v7);
  id v11 = v10;
  os_log_type_t v32 = dispatch_data_get_size(v8);
  *a2 = size + (unint64_t)v10 + v32 + 6;
  BOOL v8 = (dispatch_data_s *)malloc(size + (unint64_t)v10 + v32 + 6);
  if (v8)
  {
LABEL_7:
    *(_WORD *)BOOL v8 = size;
    id v12 = (dispatch_data_s *)*((void *)v5 + 1);
    *(void *)os_log_type_t type = 0LL;
    os_log_type_t v38 = type;
    uint64_t v39 = 0x2000000000LL;
    id v40 = 0LL;
    BOOL v33 = 0LL;
    os_log_type_t v34 = &v33;
    os_log_type_t v35 = 0x2000000000LL;
    os_log_type_t v36 = (uint64_t)v8 + 2;
    if (v12)
    {
      *(void *)applier = MEMORY[0x1895F87A8];
      *(void *)&applier[8] = 0x40000000LL;
      *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      char v42 = &unk_189BBF598;
      uint64_t v44 = &v33;
      char v45 = size;
      os_log_type_t v43 = type;
      dispatch_data_apply(v12, applier);
      id v13 = *((void *)v38 + 3);
    }

    else
    {
      id v13 = 0LL;
    }

    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(type, 8);
    id v14 = (unsigned __int16 *)((char *)v8 + v13 + 2);
    *id v14 = v10;
    int v15 = v14 + 1;
    id v16 = (dispatch_data_s *)*((void *)v5 + 2);
    *(void *)os_log_type_t type = 0LL;
    os_log_type_t v38 = type;
    uint64_t v39 = 0x2000000000LL;
    id v40 = 0LL;
    BOOL v33 = 0LL;
    os_log_type_t v34 = &v33;
    os_log_type_t v35 = 0x2000000000LL;
    os_log_type_t v36 = (uint64_t)v15;
    if (v16)
    {
      *(void *)applier = MEMORY[0x1895F87A8];
      *(void *)&applier[8] = 0x40000000LL;
      *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      char v42 = &unk_189BBF598;
      uint64_t v44 = &v33;
      char v45 = v11;
      os_log_type_t v43 = type;
      dispatch_data_apply(v16, applier);
      id v17 = *((void *)v38 + 3);
    }

    else
    {
      id v17 = 0LL;
    }

    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(type, 8);
    *(_WORD *)((char *)v15 + v17) = v32;
    char v18 = (dispatch_data_s *)*((void *)v5 + 3);
    *(void *)os_log_type_t type = 0LL;
    os_log_type_t v38 = type;
    uint64_t v39 = 0x2000000000LL;
    id v40 = 0LL;
    BOOL v33 = 0LL;
    os_log_type_t v34 = &v33;
    os_log_type_t v35 = 0x2000000000LL;
    os_log_type_t v36 = (uint64_t)v15 + v17 + 2;
    if (v18)
    {
      *(void *)applier = MEMORY[0x1895F87A8];
      *(void *)&applier[8] = 0x40000000LL;
      *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      char v42 = &unk_189BBF598;
      uint64_t v44 = &v33;
      char v45 = v32;
      os_log_type_t v43 = type;
      dispatch_data_apply(v18, applier);
    }

    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(type, 8);
    goto LABEL_17;
  }

  __nwlog_obj();
  BOOL v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(void *)&applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = size + (unint64_t)v10 + v32 + 6;
  v31 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v31);
  if (!result)
  {
    free(v31);
    id v11 = v10;
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

    goto LABEL_50;
  }

  if (a3)
  {
    CFRange v6 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_storage_flush_item);
    if (!v6)
    {
LABEL_58:
      BOOL v8 = 0LL;
      goto LABEL_6;
    }

    v32.receiver = v6;
    v32.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_storage_flush_item;
    uint64_t v7 = objc_msgSendSuper2(&v32, sel_init);
    if (v7)
    {
      BOOL v8 = v7;
      *((void *)v7 + 1) = a3;
      *((void *)v7 + 2) = a2;
LABEL_6:
      nw_array_append(*((void *)v5 + 9), v8);
      if ((*((_BYTE *)v5 + 96) & 1) == 0)
      {
        *((_BYTE *)v5 + 96) |= 1u;
        id v9 = dispatch_walltime(0LL, 5000000000LL);
        BOOL v10 = (dispatch_queue_s *)*((void *)v5 + 2);
        block[0] = MEMORY[0x1895F87A8];
        block[1] = 3221225472LL;
        block[2] = __nw_storage_enqueue_flush_and_free_key_block_invoke;
        block[3] = &unk_189BC93A0;
        os_log_type_t v29 = v5;
        dispatch_after(v9, v10, block);
      }

      goto LABEL_9;
    }

    __nwlog_obj();
    id v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
    char v18 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v30 = 0;
    if (!__nwlog_fault((const char *)v18, &type, &v30))
    {
LABEL_56:
      if (v18) {
        free(v18);
      }
      goto LABEL_58;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
        BOOL v21 = "%{public}s [super init] failed";
LABEL_54:
        _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
      }
    }

    else
    {
      if (v30)
      {
        int v26 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v20 = type;
        os_log_type_t v27 = os_log_type_enabled(v19, type);
        if (v26)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
            os_log_type_t v35 = 2082;
            os_log_type_t v36 = v26;
            _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v26);
          goto LABEL_56;
        }

        if (!v27) {
          goto LABEL_55;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
        BOOL v21 = "%{public}s [super init] failed, no backtrace";
        goto LABEL_54;
      }

      __nwlog_obj();
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "-[NWConcrete_nw_storage_flush_item initWithType:key:]";
        BOOL v21 = "%{public}s [super init] failed, backtrace limit exceeded";
        goto LABEL_54;
      }
    }

            if (v8->connection)
            {
              if (nw_service_connector_get_new_sequence_number(void)::onceToken != -1) {
                dispatch_once( &nw_service_connector_get_new_sequence_number(void)::onceToken,  &__block_literal_global_181);
              }
              do
                os_log_type_t v38 = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
              while (__stlxr( v38 + 1,  (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber));
              if (!v38)
              {
                do
                {
                  os_log_type_t v38 = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
                  if (__stlxr( v38 + 1,  (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber))
                  {
                    uint64_t v39 = 1;
                  }

                  else
                  {
                    uint64_t v39 = v38 == 0;
                  }
                }

                while (v39);
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v40 = (os_log_s *)(id)gLogObj;
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_service_connector_reject_incoming_request";
                *(_WORD *)&buf[12] = 2114;
                *(void *)&buf[14] = v5;
                *(_WORD *)&buf[22] = 2114;
                *(void *)&_BYTE buf[24] = v8;
                LOWORD(v67) = 2048;
                *(void *)((char *)&v67 + 2) = v38;
                _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ rejecting incoming request %{public}@ reply seq %llu",  buf,  0x2Au);
              }

              connection = v8->connection;
              v8->connection = 0LL;
              char v42 = connection;

              nwsc_send_feedback(v5, v42, v38, 0, a3, 0LL);
            }

            goto LABEL_64;
          }

    free(v27);
    if (!v23) {
      return;
    }
LABEL_73:
    id v22 = (char *)v23;
LABEL_74:
    free(v22);
    return;
  }

  id v12 = *(void **)(v11 + 40);
  if (v12 == &nw_protocol_ref_counted_handle)
  {
    id v13 = *(void *)(v11 + 88);
    if (v13) {
      *(void *)(v11 + 88) = v13 + 1;
    }
  }

  id v14 = *(void **)(a1 + 40);
  if (v14 == &nw_protocol_ref_counted_handle)
  {
    int v15 = *(void *)(a1 + 88);
    if (v15) {
      *(void *)(a1 + 88) = v15 + 1;
    }
  }

  id v16 = *(void *)(v11 + 24);
  if (v16)
  {
    id v17 = *(void (**)(uint64_t, uint64_t))(v16 + 40);
    if (v17)
    {
      v17(v11, a1);
      goto LABEL_28;
    }
  }

  __nwlog_obj();
  v54 = *(const char **)(v11 + 16);
  *(_DWORD *)buf = 136446722;
  v71 = "__nw_protocol_connected";
  if (!v54) {
    v54 = "invalid";
  }
  v72 = 2082;
  v73 = (void *)v54;
  v74 = 2048;
  v75 = v11;
  v55 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v68 = 0;
  if (__nwlog_fault(v55, &type, &v68))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v56 = (os_log_s *)__nwlog_obj();
      v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_167;
      }
      v58 = *(const char **)(v11 + 16);
      if (!v58) {
        v58 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      v71 = "__nw_protocol_connected";
      v72 = 2082;
      v73 = (void *)v58;
      v74 = 2048;
      v75 = v11;
      v59 = "%{public}s protocol %{public}s (%p) has invalid connected callback";
      goto LABEL_166;
    }

    if (!v68)
    {
      v56 = (os_log_s *)__nwlog_obj();
      v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_167;
      }
      v66 = *(const char **)(v11 + 16);
      if (!v66) {
        v66 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      v71 = "__nw_protocol_connected";
      v72 = 2082;
      v73 = (void *)v66;
      v74 = 2048;
      v75 = v11;
      v59 = "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded";
      goto LABEL_166;
    }

    v61 = (char *)__nw_create_backtrace_string();
    v56 = (os_log_s *)__nwlog_obj();
    v57 = type;
    v62 = os_log_type_enabled(v56, type);
    if (v61)
    {
      if (v62)
      {
        v63 = *(const char **)(v11 + 16);
        if (!v63) {
          v63 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v71 = "__nw_protocol_connected";
        v72 = 2082;
        v73 = (void *)v63;
        v74 = 2048;
        v75 = v11;
        v76 = 2082;
        v77 = v61;
        _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v61);
      goto LABEL_167;
    }

    if (v62)
    {
      v67 = *(const char **)(v11 + 16);
      if (!v67) {
        v67 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      v71 = "__nw_protocol_connected";
      v72 = 2082;
      v73 = (void *)v67;
      v74 = 2048;
      v75 = v11;
      v59 = "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace";
LABEL_166:
      _os_log_impl(&dword_181A5C000, v56, v57, v59, buf, 0x20u);
    }
  }

        free((void *)v3);
      }
    }
  }

        free((void *)v3);
      }
    }
  }

        free((void *)v3);
      }
    }
  }

        free((void *)v3);
      }
    }
  }

        free((void *)v3);
      }
    }
  }

        free((void *)v3);
      }
    }
  }

        free((void *)v3);
      }
    }
  }

        free((void *)v3);
      }
    }
  }

    if (!v4) {
      return;
    }
    goto LABEL_50;
  }

  id v4 = *(void *)(a1 + 48);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v42 = "nw_protocol_common_link_state";
    id v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v15 = (os_log_s *)gLogObj;
      id v16 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_link_state";
      id v17 = "%{public}s link_state requires a default input handler";
      goto LABEL_48;
    }

    if (!v39)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v15 = (os_log_s *)gLogObj;
      id v16 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_link_state";
      id v17 = "%{public}s link_state requires a default input handler, backtrace limit exceeded";
      goto LABEL_48;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v15 = (os_log_s *)gLogObj;
    id v16 = type;
    id v19 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v19) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v42 = "nw_protocol_common_link_state";
      id v17 = "%{public}s link_state requires a default input handler, no backtrace";
      goto LABEL_48;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      char v42 = "nw_protocol_common_link_state";
      os_log_type_t v43 = 2082;
      uint64_t v44 = backtrace_string;
      uint64_t v20 = "%{public}s link_state requires a default input handler, dumping backtrace:%{public}s";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v15, v16, v20, buf, 0x16u);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

  CFRange v5 = *(void **)(v4 + 40);
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    CFRange v6 = *(void *)(v4 + 88);
    if (v6) {
      *(void *)(v4 + 88) = v6 + 1;
    }
  }

  uint64_t v7 = *(void **)(a2 + 40);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    BOOL v8 = *(void *)(a2 + 88);
    if (v8) {
      *(void *)(a2 + 88) = v8 + 1;
    }
  }

  id v9 = *(void *)(v4 + 24);
  if (v9)
  {
    BOOL v10 = *(void (**)(uint64_t, uint64_t))(v9 + 104);
    if (v10)
    {
      v10(v4, a2);
      goto LABEL_14;
    }
  }

  __nwlog_obj();
  os_log_type_t v25 = *(const char **)(v4 + 16);
  *(_DWORD *)buf = 136446722;
  char v42 = "__nw_protocol_link_state";
  if (!v25) {
    os_log_type_t v25 = "invalid";
  }
  os_log_type_t v43 = 2082;
  uint64_t v44 = (void *)v25;
  char v45 = 2048;
  uint64_t v46 = v4;
  int v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault(v26, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      int v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_106;
      }
      os_log_type_t v29 = *(const char **)(v4 + 16);
      if (!v29) {
        os_log_type_t v29 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v42 = "__nw_protocol_link_state";
      os_log_type_t v43 = 2082;
      uint64_t v44 = (void *)v29;
      char v45 = 2048;
      uint64_t v46 = v4;
      BOOL v30 = "%{public}s protocol %{public}s (%p) has invalid link_state callback";
      goto LABEL_105;
    }

    if (!v39)
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      int v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_106;
      }
      id v37 = *(const char **)(v4 + 16);
      if (!v37) {
        id v37 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v42 = "__nw_protocol_link_state";
      os_log_type_t v43 = 2082;
      uint64_t v44 = (void *)v37;
      char v45 = 2048;
      uint64_t v46 = v4;
      BOOL v30 = "%{public}s protocol %{public}s (%p) has invalid link_state callback, backtrace limit exceeded";
      goto LABEL_105;
    }

    v31 = (char *)__nw_create_backtrace_string();
    os_log_type_t v27 = (os_log_s *)__nwlog_obj();
    int v28 = type;
    os_log_type_t v32 = os_log_type_enabled(v27, type);
    if (v31)
    {
      if (v32)
      {
        BOOL v33 = *(const char **)(v4 + 16);
        if (!v33) {
          BOOL v33 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        char v42 = "__nw_protocol_link_state";
        os_log_type_t v43 = 2082;
        uint64_t v44 = (void *)v33;
        char v45 = 2048;
        uint64_t v46 = v4;
        v47 = 2082;
        v48 = v31;
        _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s protocol %{public}s (%p) has invalid link_state callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v31);
      goto LABEL_106;
    }

    if (v32)
    {
      os_log_type_t v38 = *(const char **)(v4 + 16);
      if (!v38) {
        os_log_type_t v38 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v42 = "__nw_protocol_link_state";
      os_log_type_t v43 = 2082;
      uint64_t v44 = (void *)v38;
      char v45 = 2048;
      uint64_t v46 = v4;
      BOOL v30 = "%{public}s protocol %{public}s (%p) has invalid link_state callback, no backtrace";
LABEL_105:
      _os_log_impl(&dword_181A5C000, v27, v28, v30, buf, 0x20u);
    }
  }

    __break(1u);
    return result;
  }

    free(backtrace_string);
    goto LABEL_50;
  }

  if ((v7[9]._os_unfair_lock_opaque & 1) == 0)
  {
    __nwlog_obj();
    id v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
    id v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null (txt_record->is_dictionary == true)",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    if (!v35)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl( &dword_181A5C000,  v14,  v32,  "%{public}s called with null (txt_record->is_dictionary == true), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v25 = type;
    int v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null (txt_record->is_dictionary == true), no backtrace",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
      os_log_type_t v38 = 2082;
      uint64_t v39 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null (txt_record->is_dictionary == true), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

  if ((nw_txt_record_key_is_valid((uint64_t)a2) & 1) == 0)
  {
    __nwlog_obj();
    char v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
    id v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null nw_txt_record_key_is_valid(key)",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    if (!v35)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v33 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl( &dword_181A5C000,  v14,  v33,  "%{public}s called with null nw_txt_record_key_is_valid(key), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v27 = type;
    int v28 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl( &dword_181A5C000,  v14,  v27,  "%{public}s called with null nw_txt_record_key_is_valid(key), no backtrace",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
      os_log_type_t v38 = 2082;
      uint64_t v39 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v27,  "%{public}s called with null nw_txt_record_key_is_valid(key), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

  if (a3)
  {
    os_unfair_lock_lock(v8 + 8);
    *(void *)buf = 0LL;
    if (*(void *)&v8[4]._os_unfair_lock_opaque == 1LL)
    {
      *a3 = 0LL;
      start_of_key_locked = 1;
    }

    else
    {
      start_of_key_locked = nw_txt_record_find_start_of_key_locked(v8, a2, 0LL, 0LL, buf, a3);
    }

    *a4 = start_of_key_locked;
    os_unfair_lock_unlock(v8 + 8);
    BOOL v10 = *(void *)buf;
    goto LABEL_9;
  }

  __nwlog_obj();
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
  id v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v35 = 0;
  if (__nwlog_fault(v13, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v21 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null value_len", buf, 0xCu);
      }

        free(backtrace_string);
        goto LABEL_83;
      }

      if (!v79) {
        goto LABEL_83;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
      id v17 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      v72 = (os_log_s *)__nwlog_obj();
      v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
      id v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

  if (v5) {
    free(v5);
  }
  return 0LL;
}

  if (v5) {
    free(v5);
  }
  return 0LL;
}

    free(v22);
    if (!v10) {
      goto LABEL_9;
    }
    goto LABEL_76;
  }

  uint64_t v7 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  if (!v6[7]) {
    v6[7] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
  }
  BOOL v8 = CFDataCreate(v7, a2, a3);
  CFArrayAppendValue(v6[7], v8);
  if (v8) {
    CFRelease(v8);
  }
LABEL_9:
}

    if (v23) {
      free(v23);
    }
    goto LABEL_51;
  }

  __nwlog_obj();
  os_log_type_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v64 = "strict_calloc";
  v65 = 2048;
  *(void *)v66 = 1LL;
  *(_WORD *)&v66[8] = 2048;
  *(void *)&v66[10] = 21LL;
  id v37 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v37);
  if (!result)
  {
    free(v37);
    __nwlog_obj();
    os_log_type_t v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_necp_append_tlv";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v39, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s called with null tlv_start", buf, 0xCu);
        }
      }

      else if (v61)
      {
        v48 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v49 = type;
        v50 = os_log_type_enabled(v40, type);
        if (v48)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            v64 = "nw_necp_append_tlv";
            v65 = 2082;
            *(void *)v66 = v48;
            _os_log_impl( &dword_181A5C000,  v40,  v49,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v48);
          goto LABEL_99;
        }

        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v40, v49, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v54 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_necp_append_tlv";
          _os_log_impl( &dword_181A5C000,  v40,  v54,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v16) {
    free(v16);
  }
LABEL_7:
  if (v2->status != 1) {
    goto LABEL_3;
  }
  CFRange v6 = nw_parameters_copy_required_interface(v2->parameters);
  size_t v3 = v6 && !v2->policy_result.routed_interface_index && nw_path_uses_nexus_internal(v2, 1);

LABEL_12:
  return v3;
}

  if (v8) {
    free(v8);
  }
  return 0LL;
}

LABEL_50:
      if (v24) {
        free(v24);
      }
      goto LABEL_19;
    }

    if (!v33)
    {
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle1, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v26 = type;
    BOOL v30 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle1, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v36 = "nw_http_compare_metadata";
      id v37 = 2082;
      os_log_type_t v38 = backtrace_string;
      v31 = "%{public}s called with null handle1, dumping backtrace:%{public}s";
LABEL_38:
      _os_log_impl(&dword_181A5C000, v25, v26, v31, buf, 0x16u);
    }

    free(v24);
    if (!v12) {
      goto LABEL_9;
    }
    goto LABEL_76;
  }

  v35[0] = MEMORY[0x1895F87A8];
  v35[1] = 3221225472LL;
  v35[2] = __nw_http_metadata_add_header_block_invoke;
  v35[3] = &__block_descriptor_48_e9_B16__0_v8l;
  v35[4] = a2;
  v35[5] = a3;
  BOOL v10 = *((void *)v7 + 4);
  if (v10) {
    __nw_http_metadata_add_header_block_invoke((uint64_t)v35, v10);
  }
LABEL_9:
}

  if (v10) {
    free(v10);
  }
  singleton = 0LL;
LABEL_9:

  return singleton;
}

    free(backtrace_string);
    goto LABEL_64;
  }

  *a2 = 0LL;
  if (uuid_is_null(v3 + 16) || (CFRange v5 = *((unsigned int *)v4 + 8), v5 > 0x20))
  {
LABEL_5:
    CFRange v6 = 0LL;
LABEL_6:

    return (BOOL)v6;
  }

  BOOL v8 = v5 + 36;
  CFRange v6 = malloc(v5 + 36);
  if (v6)
  {
LABEL_8:
    unsigned __int8 *v6 = *((_OWORD *)v4 + 1);
    v6[1] = *(_OWORD *)(v4 + 88);
    *((_DWORD *)v6 + 8) = v5;
    id v9 = (char *)v6 + 36;
    if ((_DWORD)v5)
    {
      memcpy((char *)v6 + 36, v4 + 36, v5);
      v9 += v5;
    }

    *a2 = v8;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (id)gLogObj;
    *(_DWORD *)buf = 136447234;
    os_log_type_t v35 = "nw_application_id_copy_serialized_bytes";
    os_log_type_t v36 = 2048;
    id v37 = v9;
    os_log_type_t v38 = 2048;
    uint64_t v39 = v6;
    id v40 = 2048;
    char v41 = v9 - (char *)v6;
    char v42 = 2048;
    os_log_type_t v43 = v8;
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v32 = 0;
    if (__nwlog_fault(v11, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (os_log_s *)(id)gLogObj;
        id v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136447234;
          os_log_type_t v35 = "nw_application_id_copy_serialized_bytes";
          os_log_type_t v36 = 2048;
          id v37 = v9;
          os_log_type_t v38 = 2048;
          uint64_t v39 = v6;
          id v40 = 2048;
          char v41 = v9 - (char *)v6;
          char v42 = 2048;
          os_log_type_t v43 = v8;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu",  buf,  0x34u);
        }
      }

      else if (v32)
      {
        id v14 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v15 = type;
        id v16 = os_log_type_enabled(v12, type);
        if (v14)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136447490;
            os_log_type_t v35 = "nw_application_id_copy_serialized_bytes";
            os_log_type_t v36 = 2048;
            id v37 = v9;
            os_log_type_t v38 = 2048;
            uint64_t v39 = v6;
            id v40 = 2048;
            char v41 = v9 - (char *)v6;
            char v42 = 2048;
            os_log_type_t v43 = v8;
            uint64_t v44 = 2082;
            char v45 = v14;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length need ed %zu, dumping backtrace:%{public}s",  buf,  0x3Eu);
          }

          free(v14);
          if (!v11) {
            goto LABEL_6;
          }
          goto LABEL_29;
        }

        if (v16)
        {
          *(_DWORD *)buf = 136447234;
          os_log_type_t v35 = "nw_application_id_copy_serialized_bytes";
          os_log_type_t v36 = 2048;
          id v37 = v9;
          os_log_type_t v38 = 2048;
          uint64_t v39 = v6;
          id v40 = 2048;
          char v41 = v9 - (char *)v6;
          char v42 = 2048;
          os_log_type_t v43 = v8;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu, no backtrace",  buf,  0x34u);
        }
      }

      else
      {
        __nwlog_obj();
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136447234;
          os_log_type_t v35 = "nw_application_id_copy_serialized_bytes";
          os_log_type_t v36 = 2048;
          id v37 = v9;
          os_log_type_t v38 = 2048;
          uint64_t v39 = v6;
          id v40 = 2048;
          char v41 = v9 - (char *)v6;
          char v42 = 2048;
          os_log_type_t v43 = v8;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu, backtrace limit exceeded",  buf,  0x34u);
        }
      }
    }

    if (!v11) {
      goto LABEL_6;
    }
LABEL_29:
    free(v11);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  os_log_type_t v35 = "strict_malloc";
  os_log_type_t v36 = 2048;
  id v37 = (char *)(v5 + 36);
  CFRange v5 = _os_log_send_and_compose_impl();

  result = __nwlog_abort(v5);
  if (!result)
  {
    free((void *)v5);
    LODWORD(v5) = *((_DWORD *)v4 + 8);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

    free(backtrace_string);
    goto LABEL_63;
  }

  int v15 = (os_log_s *)__nwlog_obj();
  id v16 = type;
  if (os_log_type_enabled(v15, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_parallel_array_apply_with_range";
    id v17 = "%{public}s called with null applier";
    goto LABEL_62;
  }

  if (v26) {
    free(v26);
  }
LABEL_32:
}

    if (!v17)
    {
LABEL_51:
      id v14 = 0LL;
      goto LABEL_52;
    }

  v31 = nghttp2_submit_data();
  if (!v31)
  {
    if (((*v24 | (*((unsigned __int8 *)v24 + 2) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v102 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v103 = *(_DWORD *)(v20 + 176);
        v104 = *(_DWORD *)(v20 + 180);
        v105 = *(_DWORD *)(v11 + 52);
        if (v105) {
          v105 -= *(_DWORD *)(v11 + 56) + *(_DWORD *)(v11 + 60);
        }
        *(_DWORD *)buf = 136447746;
        v153 = "nw_http2_submit_data";
        v154 = 2082;
        v155 = v20 + 191;
        v156 = 2080;
        *(void *)v157 = " ";
        *(_WORD *)&v157[8] = 1024;
        *(_DWORD *)&v157[10] = v104;
        v158 = 1024;
        v159 = v103;
        v160 = 1024;
        *(_DWORD *)v161 = v105;
        *(_WORD *)&v161[4] = 1024;
        *(_DWORD *)&v161[6] = v21;
        _os_log_impl( &dword_181A5C000,  v102,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> submitted %u bytes on stream %d",  buf,  0x38u);
        BOOL v8 = &qword_18C45F000;
      }
    }

    int v15 = 1LL;
    goto LABEL_90;
  }

  os_log_type_t v32 = v31;
  if (v31 == -510)
  {
    BOOL v8 = &qword_18C45F000;
    if (((*v24 | (*((unsigned __int8 *)v24 + 2) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v33 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v35 = *(_DWORD *)(v20 + 176);
        os_log_type_t v34 = *(_DWORD *)(v20 + 180);
        *(_DWORD *)buf = 136447490;
        v153 = "nw_http2_submit_data";
        v154 = 2082;
        v155 = v20 + 191;
        v156 = 2080;
        *(void *)v157 = " ";
        *(_WORD *)&v157[8] = 1024;
        *(_DWORD *)&v157[10] = v34;
        v158 = 1024;
        v159 = v35;
        v160 = 1024;
        *(_DWORD *)v161 = v21;
        _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%d> stream %d is closed, cannot send frames",  buf,  0x32u);
      }
    }

    a4 = v147;
    goto LABEL_235;
  }

  if (v31 == -529)
  {
    BOOL v8 = &qword_18C45F000;
    if (((*v24 | (*((unsigned __int8 *)v24 + 2) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v98 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v99 = *(_DWORD *)(v20 + 176);
        v100 = *(_DWORD *)(v20 + 180);
        v101 = *(_DWORD *)(v11 + 52);
        if (v101) {
          v101 -= *(_DWORD *)(v11 + 56) + *(_DWORD *)(v11 + 60);
        }
        *(_DWORD *)buf = 136447746;
        v153 = "nw_http2_submit_data";
        v154 = 2082;
        v155 = v20 + 191;
        v156 = 2080;
        *(void *)v157 = " ";
        *(_WORD *)&v157[8] = 1024;
        *(_DWORD *)&v157[10] = v100;
        v158 = 1024;
        v159 = v99;
        v160 = 1024;
        *(_DWORD *)v161 = v21;
        *(_WORD *)&v161[4] = 1024;
        *(_DWORD *)&v161[6] = v101;
        _os_log_impl( &dword_181A5C000,  v98,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> already have data outgoing on stream %d, cannot send %u bytes",  buf,  0x38u);
        BOOL v8 = &qword_18C45F000;
      }
    }

    a4 = v147;
    goto LABEL_81;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v36 = nghttp2_strerror();
  *(_DWORD *)buf = 136446722;
  v153 = "nw_http2_submit_data";
  v154 = 2082;
  v155 = v36;
  v156 = 1024;
  *(_DWORD *)v157 = v21;
  id v37 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v148 = 0;
  if (__nwlog_fault(v37, &type, &v148))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v38 = (os_log_s *)gLogObj;
      uint64_t v39 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_77;
      }
      id v40 = nghttp2_strerror();
      *(_DWORD *)buf = 136446722;
      v153 = "nw_http2_submit_data";
      v154 = 2082;
      v155 = v40;
      v156 = 1024;
      *(_DWORD *)v157 = v21;
      char v41 = "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed";
LABEL_75:
      uint64_t v46 = v38;
LABEL_76:
      _os_log_impl(&dword_181A5C000, v46, v39, v41, buf, 0x1Cu);
      goto LABEL_77;
    }

    if (!v148)
    {
      os_log_type_t v38 = (os_log_s *)__nwlog_obj();
      uint64_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_77;
      }
      char v45 = nghttp2_strerror();
      *(_DWORD *)buf = 136446722;
      v153 = "nw_http2_submit_data";
      v154 = 2082;
      v155 = v45;
      v156 = 1024;
      *(_DWORD *)v157 = v21;
      char v41 = "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed, backtrace limit exceeded";
      goto LABEL_75;
    }

    char v42 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v39 = type;
    log = (os_log_s *)gLogObj;
    os_log_type_t v43 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v42)
    {
      if (v43)
      {
        uint64_t v44 = nghttp2_strerror();
        *(_DWORD *)buf = 136446978;
        v153 = "nw_http2_submit_data";
        v154 = 2082;
        v155 = v44;
        v156 = 1024;
        *(_DWORD *)v157 = v21;
        *(_WORD *)&v157[4] = 2082;
        *(void *)&v157[6] = v42;
        _os_log_impl( &dword_181A5C000,  log,  v39,  "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed, dumping backtrace:%{public}s",  buf,  0x26u);
      }

      free(v42);
    }

    else if (v43)
    {
      v53 = nghttp2_strerror();
      *(_DWORD *)buf = 136446722;
      v153 = "nw_http2_submit_data";
      v154 = 2082;
      v155 = v53;
      v156 = 1024;
      *(_DWORD *)v157 = v21;
      char v41 = "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed, no backtrace";
      uint64_t v46 = log;
      goto LABEL_76;
    }
  }

    free(v32);
    if (!v20) {
      return 0LL;
    }
    goto LABEL_67;
  }

  if (v48)
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_add_input_handler";
    int v23 = "%{public}s called with null test, no backtrace";
    goto LABEL_65;
  }

  LOBYTE(v12) = *((_BYTE *)a3 + *v9) == 0;
  return v12;
}

    if (v15) {
      free(v15);
    }
    goto LABEL_51;
  }

    if (!default_input_handler) {
      return;
    }
    goto LABEL_50;
  }

  default_input_handler = (uint64_t)a1->default_input_handler;
  if (!default_input_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v41 = "nw_protocol_ipv6_error";
    default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)gLogObj;
      int v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_ipv6_error";
      id v16 = "%{public}s ipv6_error requires a default input handler";
      goto LABEL_48;
    }

    if (!v38)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)gLogObj;
      int v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_ipv6_error";
      id v16 = "%{public}s ipv6_error requires a default input handler, backtrace limit exceeded";
      goto LABEL_48;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (os_log_s *)gLogObj;
    int v15 = type;
    char v18 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v18) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_ipv6_error";
      id v16 = "%{public}s ipv6_error requires a default input handler, no backtrace";
      goto LABEL_48;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      char v41 = "nw_protocol_ipv6_error";
      char v42 = 2082;
      os_log_type_t v43 = backtrace_string;
      id v19 = "%{public}s ipv6_error requires a default input handler, dumping backtrace:%{public}s";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v14, v15, v19, buf, 0x16u);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

  id v4 = *(void **)(default_input_handler + 40);
  if (v4 == &nw_protocol_ref_counted_handle)
  {
    CFRange v5 = *(void *)(default_input_handler + 88);
    if (v5) {
      *(void *)(default_input_handler + 88) = v5 + 1;
    }
  }

  handle = a2->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = a2[1].callbacks;
    if (callbacks) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }

  BOOL v8 = *(void *)(default_input_handler + 24);
  if (v8)
  {
    id v9 = *(void (**)(uint64_t, nw_protocol *))(v8 + 56);
    if (v9)
    {
      v9(default_input_handler, a2);
      goto LABEL_14;
    }
  }

  __nwlog_obj();
  os_log_type_t v24 = *(const char **)(default_input_handler + 16);
  *(_DWORD *)buf = 136446722;
  char v41 = "__nw_protocol_error";
  if (!v24) {
    os_log_type_t v24 = "invalid";
  }
  char v42 = 2082;
  os_log_type_t v43 = (void *)v24;
  uint64_t v44 = 2048;
  char v45 = default_input_handler;
  os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v38 = 0;
  if (__nwlog_fault(v25, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_106;
      }
      int v28 = *(const char **)(default_input_handler + 16);
      if (!v28) {
        int v28 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v41 = "__nw_protocol_error";
      char v42 = 2082;
      os_log_type_t v43 = (void *)v28;
      uint64_t v44 = 2048;
      char v45 = default_input_handler;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid error callback";
      goto LABEL_105;
    }

    if (!v38)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_106;
      }
      os_log_type_t v36 = *(const char **)(default_input_handler + 16);
      if (!v36) {
        os_log_type_t v36 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v41 = "__nw_protocol_error";
      char v42 = 2082;
      os_log_type_t v43 = (void *)v36;
      uint64_t v44 = 2048;
      char v45 = default_input_handler;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
      goto LABEL_105;
    }

    BOOL v30 = (char *)__nw_create_backtrace_string();
    int v26 = (os_log_s *)__nwlog_obj();
    os_log_type_t v27 = type;
    v31 = os_log_type_enabled(v26, type);
    if (v30)
    {
      if (v31)
      {
        os_log_type_t v32 = *(const char **)(default_input_handler + 16);
        if (!v32) {
          os_log_type_t v32 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        char v41 = "__nw_protocol_error";
        char v42 = 2082;
        os_log_type_t v43 = (void *)v32;
        uint64_t v44 = 2048;
        char v45 = default_input_handler;
        uint64_t v46 = 2082;
        v47 = v30;
        _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v30);
      goto LABEL_106;
    }

    if (v31)
    {
      id v37 = *(const char **)(default_input_handler + 16);
      if (!v37) {
        id v37 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v41 = "__nw_protocol_error";
      char v42 = 2082;
      os_log_type_t v43 = (void *)v37;
      uint64_t v44 = 2048;
      char v45 = default_input_handler;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_105:
      _os_log_impl(&dword_181A5C000, v26, v27, v29, buf, 0x20u);
    }
  }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v41 = "__nw_frame_is_single_ip_aggregate";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (__nwlog_fault(v32, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          char v41 = "__nw_frame_is_single_ip_aggregate";
          os_log_type_t v35 = "%{public}s called with null frame";
LABEL_62:
          _os_log_impl(&dword_181A5C000, v33, v34, v35, buf, 0xCu);
        }
      }

      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        id v37 = os_log_type_enabled(v33, type);
        if (backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            char v41 = "__nw_frame_is_single_ip_aggregate";
            char v42 = 2082;
            os_log_type_t v43 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_63;
        }

        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          char v41 = "__nw_frame_is_single_ip_aggregate";
          os_log_type_t v35 = "%{public}s called with null frame, no backtrace";
          goto LABEL_62;
        }
      }

      else
      {
        BOOL v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          char v41 = "__nw_frame_is_single_ip_aggregate";
          os_log_type_t v35 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_62;
        }
      }
    }

    if (!default_input_handler) {
      return;
    }
    goto LABEL_50;
  }

  default_input_handler = (uint64_t)a1->default_input_handler;
  if (!default_input_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v41 = "nw_protocol_ipv4_error";
    default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)gLogObj;
      int v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_ipv4_error";
      id v16 = "%{public}s ipv4_error requires a default input handler";
      goto LABEL_48;
    }

    if (!v38)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)gLogObj;
      int v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_ipv4_error";
      id v16 = "%{public}s ipv4_error requires a default input handler, backtrace limit exceeded";
      goto LABEL_48;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (os_log_s *)gLogObj;
    int v15 = type;
    char v18 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v18) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_ipv4_error";
      id v16 = "%{public}s ipv4_error requires a default input handler, no backtrace";
      goto LABEL_48;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      char v41 = "nw_protocol_ipv4_error";
      char v42 = 2082;
      os_log_type_t v43 = backtrace_string;
      id v19 = "%{public}s ipv4_error requires a default input handler, dumping backtrace:%{public}s";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v14, v15, v19, buf, 0x16u);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

  id v4 = *(void **)(default_input_handler + 40);
  if (v4 == &nw_protocol_ref_counted_handle)
  {
    CFRange v5 = *(void *)(default_input_handler + 88);
    if (v5) {
      *(void *)(default_input_handler + 88) = v5 + 1;
    }
  }

  handle = a2->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = a2[1].callbacks;
    if (callbacks) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }

  BOOL v8 = *(void *)(default_input_handler + 24);
  if (v8)
  {
    id v9 = *(void (**)(uint64_t, nw_protocol *))(v8 + 56);
    if (v9)
    {
      v9(default_input_handler, a2);
      goto LABEL_14;
    }
  }

  __nwlog_obj();
  os_log_type_t v24 = *(const char **)(default_input_handler + 16);
  *(_DWORD *)buf = 136446722;
  char v41 = "__nw_protocol_error";
  if (!v24) {
    os_log_type_t v24 = "invalid";
  }
  char v42 = 2082;
  os_log_type_t v43 = (void *)v24;
  uint64_t v44 = 2048;
  char v45 = default_input_handler;
  os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v38 = 0;
  if (__nwlog_fault(v25, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_106;
      }
      int v28 = *(const char **)(default_input_handler + 16);
      if (!v28) {
        int v28 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v41 = "__nw_protocol_error";
      char v42 = 2082;
      os_log_type_t v43 = (void *)v28;
      uint64_t v44 = 2048;
      char v45 = default_input_handler;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid error callback";
      goto LABEL_105;
    }

    if (!v38)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_106;
      }
      os_log_type_t v36 = *(const char **)(default_input_handler + 16);
      if (!v36) {
        os_log_type_t v36 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v41 = "__nw_protocol_error";
      char v42 = 2082;
      os_log_type_t v43 = (void *)v36;
      uint64_t v44 = 2048;
      char v45 = default_input_handler;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
      goto LABEL_105;
    }

    BOOL v30 = (char *)__nw_create_backtrace_string();
    int v26 = (os_log_s *)__nwlog_obj();
    os_log_type_t v27 = type;
    v31 = os_log_type_enabled(v26, type);
    if (v30)
    {
      if (v31)
      {
        os_log_type_t v32 = *(const char **)(default_input_handler + 16);
        if (!v32) {
          os_log_type_t v32 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        char v41 = "__nw_protocol_error";
        char v42 = 2082;
        os_log_type_t v43 = (void *)v32;
        uint64_t v44 = 2048;
        char v45 = default_input_handler;
        uint64_t v46 = 2082;
        v47 = v30;
        _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v30);
      goto LABEL_106;
    }

    if (v31)
    {
      id v37 = *(const char **)(default_input_handler + 16);
      if (!v37) {
        id v37 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      char v41 = "__nw_protocol_error";
      char v42 = 2082;
      os_log_type_t v43 = (void *)v37;
      uint64_t v44 = 2048;
      char v45 = default_input_handler;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_105:
      _os_log_impl(&dword_181A5C000, v26, v27, v29, buf, 0x20u);
    }
  }

  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0LL);
  if (buffer) {
    free(buffer);
  }
  id v37 = *((void *)a1 + 2);
  os_log_type_t v38 = (void *)*((void *)a1 + 3);
  if (v37)
  {
    *(void *)(v37 + 24) = v38;
    os_log_type_t v38 = (void *)*((void *)a1 + 3);
  }

  else
  {
    a3[13] = v38;
  }

  *os_log_type_t v38 = v37;
  *((void *)a1 + 2) = 0LL;
  *((void *)a1 + 3) = 0LL;
  os_release(a1);
}

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "__nw_frame_is_single_ip_aggregate";
    BOOL v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v36 = 0;
    if (__nwlog_fault(v30, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "__nw_frame_is_single_ip_aggregate";
          BOOL v33 = "%{public}s called with null frame";
LABEL_62:
          _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0xCu);
        }
      }

      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        os_log_type_t v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v39 = "__nw_frame_is_single_ip_aggregate";
            id v40 = 2082;
            char v41 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_63;
        }

        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "__nw_frame_is_single_ip_aggregate";
          BOOL v33 = "%{public}s called with null frame, no backtrace";
          goto LABEL_62;
        }
      }

      else
      {
        v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "__nw_frame_is_single_ip_aggregate";
          BOOL v33 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_62;
        }
      }
    }

    if (v21) {
      free(v21);
    }
    return 0LL;
  }

  id v12 = *(void *)(a1 + 40);
  if (!v12 || (*(_BYTE *)(v12 + 136) & 1) == 0)
  {
    id v13 = (os_log_s *)__nwlog_obj();
    id v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    id v12 = *(void *)(a1 + 40);
    if (v14)
    {
      int v15 = (const char *)(v12 + 137);
      if (!v12) {
        int v15 = "";
      }
      *(_DWORD *)buf = 136446978;
      os_log_type_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
      uint64_t v44 = 2082;
      char v45 = v15;
      id v16 = " ";
      if (!v12) {
        id v16 = "";
      }
      uint64_t v46 = 2080;
      v47 = v16;
      v48 = 2048;
      v49 = v12;
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p Frame is no longer valid",  buf,  0x2Au);
      id v12 = *(void *)(a1 + 40);
    }
  }

  result = 0LL;
  *(void *)(v12 + 48) = 0LL;
  return result;
}

void sub_181A8C9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_protocol_stack_includes_protocol_block_invoke_2(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 32), (uint64_t)v4);
  if (is_equal_unsafe) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  BOOL v6 = !is_equal_unsafe;

  return v6;
}

void sub_181A8CA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_protocol_definition_t nw_protocol_options_copy_definition(nw_protocol_options_t options)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = options;
  CFIndex v2 = v1;
  if (v1)
  {
    size_t v3 = (nw_protocol_definition *)v1[1];
    goto LABEL_3;
  }

  __nwlog_obj();
  CFRange v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_protocol_options_copy_definition";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_protocol_options_copy_definition";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_options_copy_definition";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

char *nw_protocol_definition_get_identifier(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  CFIndex v2 = v1;
  if (v1)
  {
    size_t v3 = v1 + 8;
    goto LABEL_3;
  }

  __nwlog_obj();
  CFRange v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_protocol_definition_get_identifier";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_definition_get_identifier";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_protocol_definition_get_identifier";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_definition_get_identifier";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_definition_get_identifier";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_parameters_attribution_t nw_parameters_get_attribution(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    else {
      nw_parameters_attribution_t v3 = 0;
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  CFRange v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_parameters_get_attribution";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_attribution";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_parameters_get_attribution";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_attribution";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_attribution";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_endpoint_handler_start(void *a1)
{
  uint64_t v93 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v80 = "nw_endpoint_handler_start";
    v59 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (__nwlog_fault(v59, &type, &v77))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v61 = type;
        if (os_log_type_enabled(v60, type))
        {
          *(_DWORD *)buf = 136446210;
          v80 = "nw_endpoint_handler_start";
          _os_log_impl(&dword_181A5C000, v60, v61, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v77)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v71 = type;
        BOOL v72 = os_log_type_enabled(v60, type);
        if (backtrace_string)
        {
          if (v72)
          {
            *(_DWORD *)buf = 136446466;
            v80 = "nw_endpoint_handler_start";
            __int16 v81 = 2082;
            v82 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v60,  v71,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_86;
        }

        if (v72)
        {
          *(_DWORD *)buf = 136446210;
          v80 = "nw_endpoint_handler_start";
          _os_log_impl(&dword_181A5C000, v60, v71, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v73 = type;
        if (os_log_type_enabled(v60, type))
        {
          *(_DWORD *)buf = 136446210;
          v80 = "nw_endpoint_handler_start";
          _os_log_impl( &dword_181A5C000,  v60,  v73,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_86:
    if (v59) {
      free(v59);
    }
    goto LABEL_64;
  }

  id v3 = nw_parameters_copy_context(v1[4]);
  nw_context_assert_queue(v3);

  nw_protocol_definition_t v4 = v2;
  CFRange v5 = v4;
  BOOL v6 = v2[4];
  if (!v6)
  {

    if ((*((_BYTE *)v5 + 268) & 0x20) != 0) {
      goto LABEL_25;
    }
    goto LABEL_7;
  }

  uint64_t v7 = v6;
  uint64_t v8 = v7[12];

  if ((v8 & 0x4000000000LL) != 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v9 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(v5);
      v63 = nw_endpoint_handler_dry_run_string(v5);
      nw_endpoint_t v64 = nw_endpoint_handler_copy_endpoint(v5);
      v65 = v2;
      logging_description = nw_endpoint_get_logging_description(v64);
      v67 = nw_endpoint_handler_state_string(v5);
      v68 = nw_endpoint_handler_mode_string(v5);
      id v69 = nw_endpoint_handler_copy_current_path(v5);
      *(_DWORD *)buf = 136447746;
      v80 = "nw_endpoint_handler_start";
      __int16 v81 = 2082;
      v82 = id_string;
      __int16 v83 = 2082;
      v84 = v63;
      __int16 v85 = 2082;
      v86 = logging_description;
      __int16 v87 = 2082;
      v88 = v67;
      __int16 v89 = 2082;
      v90 = v68;
      __int16 v91 = 2114;
      id v92 = v69;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ",  buf,  0x48u);

      nw_parameters_t v2 = v65;
    }

          v155 = v47;
          if ((_DWORD)v20 == 20) {
            goto LABEL_87;
          }
          if (v20 >= 0x15)
          {
            __nwlog_obj();
            v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 6;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 20;
              _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_87:
            v50 = *(_OWORD *)v27;
            v51 = (char *)&v14[HIDWORD(v158)];
            *((_DWORD *)v51 + 4) = *(_DWORD *)(v27 + 16);
            *(_OWORD *)v51 = v50;
            ++HIDWORD(v158);
          }

          break;
        case 7:
          if ((_DWORD)v20 == 4) {
            goto LABEL_95;
          }
          __nwlog_obj();
          v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            v164 = 1024;
            *(_DWORD *)v165 = 7;
            *(_WORD *)&v165[4] = 1024;
            *(_DWORD *)&v165[6] = v20;
            *(_WORD *)&v165[10] = 1024;
            *(_DWORD *)&v165[12] = 4;
            _os_log_impl( &dword_181A5C000,  v80,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_95:
          v53 = *(_DWORD *)v27;
          if ((*(_DWORD *)v27 & 1) != 0)
          {
            *((_BYTE *)v160 + 473) |= 0x10u;
            if ((v53 & 2) == 0)
            {
LABEL_97:
              if ((v53 & 4) == 0) {
                goto LABEL_98;
              }
              goto LABEL_143;
            }
          }

          else if ((v53 & 2) == 0)
          {
            goto LABEL_97;
          }

          *((_BYTE *)v160 + 473) |= 0x20u;
          if ((v53 & 4) == 0)
          {
LABEL_98:
            if ((v53 & 8) == 0) {
              goto LABEL_99;
            }
            goto LABEL_144;
          }

    if (!v41) {
      goto LABEL_52;
    }
    id v38 = (char *)v41;
    goto LABEL_51;
  }

  if (!a2)
  {
    __nwlog_obj();
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
    char v41 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v41, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        nw_endpoint_t v45 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_181A5C000, v42, v45, "%{public}s called with null addr", buf, 0xCu);
        }

            v49 = 0;
            a4 = v258;
            goto LABEL_87;
          }

          if (a2 != 3 || (BOOL v72 = *((_DWORD *)v45 + 5)) == 0 || !*((void *)v45 + 7))
          {
            v49 = 0;
            goto LABEL_87;
          }

          nw_array_get_object_at_index(v46, (v72 - 1));
          v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (v50 != object) {
            goto LABEL_86;
          }
          os_log_type_t v73 = nw_endpoint_handler_get_minimize_logging(v269);
          v74 = nw_endpoint_handler_get_logging_disabled(v269);
          if (v73)
          {
            if ((v74 & 1) != 0)
            {
LABEL_82:
              v84 = *((void *)v45 + 7);
              v50 = object;
              if (v84)
              {
                nw_queue_cancel_source(v84, v75);
                *((void *)v45 + 7) = 0LL;
                v50 = object;
              }

              goto LABEL_86;
            }

            v256 = v13;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v76 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              loga = nw_endpoint_handler_get_id_string(v269);
              v216 = nw_endpoint_handler_dry_run_string(v269);
              v217 = nw_endpoint_handler_copy_endpoint(v269);
              v218 = nw_endpoint_get_logging_description(v217);
              v219 = nw_endpoint_handler_state_string(v269);
              v220 = nw_endpoint_handler_mode_string(v269);
              v221 = nw_endpoint_handler_copy_current_path(v269);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = loga;
              v290 = 2082;
              v291 = v216;
              v292 = 2082;
              v293 = v218;
              v294 = 2082;
              v295 = (void *)v219;
              v296 = 2082;
              v297 = v220;
              v298 = 2114;
              v299 = v221;
              _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child is proxy, cancell ing happy eyeballs timer",  buf,  0x48u);

              uint64_t v13 = v256;
              __int16 v17 = &qword_18C45F000;
            }
          }

          else
          {
            if ((v74 & 1) != 0) {
              goto LABEL_82;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v76 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
            {
              char v77 = nw_endpoint_handler_get_id_string(v269);
              v78 = nw_endpoint_handler_dry_run_string(v269);
              v79 = nw_endpoint_handler_copy_endpoint(v269);
              v255 = v13;
              v80 = nw_endpoint_get_logging_description(v79);
              __int16 v81 = nw_endpoint_handler_state_string(v269);
              v82 = nw_endpoint_handler_mode_string(v269);
              __int16 v83 = nw_endpoint_handler_copy_current_path(v269);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v77;
              v290 = 2082;
              v291 = v78;
              v292 = 2082;
              v293 = v80;
              v294 = 2082;
              v295 = (void *)v81;
              v296 = 2082;
              v297 = v82;
              v298 = 2114;
              v299 = v83;
              _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child is proxy, cancell ing happy eyeballs timer",  buf,  0x48u);

              __int16 v17 = &qword_18C45F000;
              uint64_t v13 = v255;
            }
          }

          goto LABEL_82;
        }

        if (a3 != 4) {
          goto LABEL_70;
        }
        v67 = v15;
        v68 = (v15[67] & 8) == 0;

        int v15 = v269;
        a3 = v261;
        if (v68
          || (id v69 = nw_endpoint_handler_copy_parent(v67),
              v70 = v69 == 0LL,
              v69,
              int v15 = v269,
              a3 = v261,
              !v70))
        {
LABEL_70:
          os_log_type_t v71 = v15;
          v71[30] = a3;

          nw_endpoint_handler_report(v71, 0LL, v258, 0LL);
          goto LABEL_190;
        }

        v143 = nw_endpoint_handler_get_minimize_logging(v67);
        v144 = nw_endpoint_handler_get_logging_disabled(v67);
        if (v143)
        {
          if ((v144 & 1) != 0) {
            goto LABEL_170;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v145 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
          {
            v202 = nw_endpoint_handler_get_id_string(v67);
            v203 = nw_endpoint_handler_dry_run_string(v67);
            v204 = nw_endpoint_handler_copy_endpoint(v67);
            v205 = nw_endpoint_get_logging_description(v204);
            v206 = nw_endpoint_handler_state_string(v67);
            v207 = nw_endpoint_handler_mode_string(v67);
            v208 = nw_endpoint_handler_copy_current_path(v67);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v202;
            v290 = 2082;
            v291 = v203;
            v292 = 2082;
            v293 = v205;
            v294 = 2082;
            v295 = (void *)v206;
            v296 = 2082;
            v297 = v207;
            v298 = 2114;
            v299 = v208;
            _os_log_impl( &dword_181A5C000,  v145,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] connected child failed wh en a better path is available",  buf,  0x48u);
          }
        }

        else
        {
          if ((v144 & 1) != 0)
          {
LABEL_170:
            nw_endpoint_handler_handle_failure(v67);
            goto LABEL_190;
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v145 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
          {
            v146 = nw_endpoint_handler_get_id_string(v67);
            v147 = nw_endpoint_handler_dry_run_string(v67);
            v148 = nw_endpoint_handler_copy_endpoint(v67);
            v149 = nw_endpoint_get_logging_description(v148);
            v150 = nw_endpoint_handler_state_string(v67);
            v151 = nw_endpoint_handler_mode_string(v67);
            v152 = nw_endpoint_handler_copy_current_path(v67);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v146;
            v290 = 2082;
            v291 = v147;
            v292 = 2082;
            v293 = v149;
            v294 = 2082;
            v295 = (void *)v150;
            v296 = 2082;
            v297 = v151;
            v298 = 2114;
            v299 = v152;
            _os_log_impl( &dword_181A5C000,  v145,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] connected child failed wh en a better path is available",  buf,  0x48u);
          }
        }

        goto LABEL_170;
      }
    }

    if (a3 | a2 || !a4 || *a4 != 1 || a4[1] != 1) {
      goto LABEL_190;
    }
    v50 = (os_log_s *)nw_endpoint_handler_copy_parameters(object);
    v51 = nw_endpoint_handler_copy_parameters(v15);
    if ((nw_parameters_get_desperate_ivan(v51) & 1) != 0)
    {
LABEL_59:

LABEL_159:
      goto LABEL_190;
    }

    int v52 = nw_endpoint_handler_copy_endpoint(object);
    if (nw_endpoint_get_type(v52) != nw_endpoint_type_address
      || nw_endpoint_get_address_family(v52) != 30)
    {
LABEL_58:

      goto LABEL_59;
    }

    *(void *)os_log_type_t type = 0LL;
    v277 = type;
    v278 = 0x2020000000LL;
    v279 = 0;
    v53 = (unsigned __int8 *)*((void *)v45 + 5);
    v273[0] = MEMORY[0x1895F87A8];
    v273[1] = 3221225472LL;
    v273[2] = ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_112;
    v273[3] = &unk_189BC7960;
    v274 = v52;
    v275 = type;
    nw_array_apply(v53, (uint64_t)v273);
    if (!*((_BYTE *)v277 + 24))
    {
LABEL_57:

      _Block_object_dispose(type, 8);
      goto LABEL_58;
    }

    v54 = nw_endpoint_handler_get_minimize_logging(v269);
    v55 = nw_endpoint_handler_get_logging_disabled(v269);
    if (v54)
    {
      if ((v55 & 1) != 0) {
        goto LABEL_56;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v56 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        v266 = nw_endpoint_handler_get_id_string(v269);
        v260 = nw_endpoint_handler_dry_run_string(v269);
        v222 = nw_endpoint_handler_copy_endpoint(v269);
        v223 = nw_endpoint_get_logging_description(v222);
        v224 = nw_endpoint_handler_state_string(v269);
        v225 = nw_endpoint_handler_mode_string(v269);
        v226 = nw_endpoint_handler_copy_current_path(v269);
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v266;
        v290 = 2082;
        v291 = v260;
        v292 = 2082;
        v293 = v223;
        v294 = 2082;
        v295 = (void *)v224;
        v296 = 2082;
        v297 = v225;
        v298 = 2114;
        v299 = v226;
        _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping DesperateIvan, addre ss already started",  buf,  0x48u);
      }
    }

    else
    {
      if ((v55 & 1) != 0)
      {
LABEL_56:
        nw_endpoint_handler_cancel(object, 0LL, 1);
        goto LABEL_57;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v56 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        id v57 = nw_endpoint_handler_get_id_string(v269);
        v259 = nw_endpoint_handler_dry_run_string(v269);
        v262 = v56;
        v58 = nw_endpoint_handler_copy_endpoint(v269);
        v59 = nw_endpoint_get_logging_description(v58);
        v60 = nw_endpoint_handler_state_string(v269);
        os_log_type_t v61 = nw_endpoint_handler_mode_string(v269);
        v62 = nw_endpoint_handler_copy_current_path(v269);
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v57;
        v290 = 2082;
        v291 = v259;
        v292 = 2082;
        v293 = v59;
        v294 = 2082;
        v295 = (void *)v60;
        v296 = 2082;
        v297 = v61;
        v298 = 2114;
        v299 = v62;
        _os_log_impl( &dword_181A5C000,  v262,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping DesperateIvan, addre ss already started",  buf,  0x48u);

        v56 = v262;
      }
    }

    goto LABEL_56;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v28 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    else {
      BOOL v29 = off_189BBBBC0[v14];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v29;
    v290 = 2082;
    v291 = "resolver";
    _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
  }

LABEL_18:
  BOOL v30 = 0LL;
LABEL_191:

  return v30;
}

  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

              if (v34)
              {
                os_log_type_t v35 = v34[19] + v33;
                ++v34[18];
                v34[19] = v35;
              }

      free(v47);
      if (!v21) {
        goto LABEL_140;
      }
LABEL_138:
      BOOL v72 = (char *)v21;
LABEL_139:
      free(v72);
      goto LABEL_140;
    }

    value = xpc_int64_get_value(v19);
    id v40 = value;
    if (!value)
    {
      uint64_t v46 = 0;
LABEL_141:

      goto LABEL_177;
    }

    if (!(value >> 31))
    {
      __nwlog_obj();
      char v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446466;
      v109 = "networkd_privileged_setup_feth_pair";
      v110 = 1024;
      *(_DWORD *)v111 = v40;
      id v42 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v106 = 0;
      if (__nwlog_fault(v42, &type, &v106))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446466;
            v109 = "networkd_privileged_setup_feth_pair";
            v110 = 1024;
            *(_DWORD *)v111 = v40;
            _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s received failure result code %{darwin.errno}d",  buf,  0x12u);
          }
        }

        else if (v106)
        {
          os_log_type_t v73 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v74 = type;
          v75 = os_log_type_enabled(v43, type);
          if (v73)
          {
            if (v75)
            {
              *(_DWORD *)buf = 136446722;
              v109 = "networkd_privileged_setup_feth_pair";
              v110 = 1024;
              *(_DWORD *)v111 = v40;
              *(_WORD *)&v111[4] = 2082;
              *(void *)&v111[6] = v73;
              _os_log_impl( &dword_181A5C000,  v43,  v74,  "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v73);
            if (!v42) {
              goto LABEL_140;
            }
LABEL_188:
            BOOL v72 = (char *)v42;
            goto LABEL_139;
          }

          if (v75)
          {
            *(_DWORD *)buf = 136446466;
            v109 = "networkd_privileged_setup_feth_pair";
            v110 = 1024;
            *(_DWORD *)v111 = v40;
            _os_log_impl( &dword_181A5C000,  v43,  v74,  "%{public}s received failure result code %{darwin.errno}d, no backtrace",  buf,  0x12u);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          __int16 v81 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446466;
            v109 = "networkd_privileged_setup_feth_pair";
            v110 = 1024;
            *(_DWORD *)v111 = v40;
            _os_log_impl( &dword_181A5C000,  v43,  v81,  "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
          }
        }
      }

      free(backtrace_string);
LABEL_113:
      id v38 = (char *)v63;
    }
  }

  else
  {
    __nwlog_obj();
    id v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
    v63 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    id v69 = 0;
    id v38 = (char *)v63;
    if (__nwlog_fault(v63, type, &v69))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v40 = type[0];
        if (os_log_type_enabled(v39, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
          _os_log_impl(&dword_181A5C000, v39, v40, "%{public}s called with null options", buf, 0xCu);
        }

        goto LABEL_112;
      }

      if (!v69)
      {
        __nwlog_obj();
        uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v57 = type[0];
        if (os_log_type_enabled(v39, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
          _os_log_impl( &dword_181A5C000,  v39,  v57,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_112;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type[0];
      v50 = os_log_type_enabled(v39, type[0]);
      if (!backtrace_string)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
          _os_log_impl(&dword_181A5C000, v39, v61, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }

        goto LABEL_112;
      }

      if (v50)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v39,  v61,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_86;
    }
  }

  if (v38) {
    free(v38);
  }
  id v21 = 0LL;
LABEL_28:

  uint64_t v22 = *((_BYTE *)v6 + 600);
  if ((v22 & 1) != 0)
  {
    uint64_t v23 = v6[74];
    if (v23)
    {
      _Block_release(v23);
      uint64_t v22 = *((_BYTE *)v6 + 600);
    }
  }

  v6[74] = v21;
  *((_BYTE *)v6 + 600) = v22 | 1;
  id v24 = v17;
  os_log_type_t v25 = v24;
  if (!v17)
  {
    __nwlog_obj();
    char v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
    id v42 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    id v69 = 0;
    if (__nwlog_fault(v42, type, &v69))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v44 = type[0];
        if (os_log_type_enabled(v43, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s called with null options", buf, 0xCu);
        }

        goto LABEL_119;
      }

      if (!v69)
      {
        __nwlog_obj();
        os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v58 = type[0];
        if (os_log_type_enabled(v43, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl( &dword_181A5C000,  v43,  v58,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_119;
      }

      v51 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v52 = type[0];
      v53 = os_log_type_enabled(v43, type[0]);
      if (!v51)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl(&dword_181A5C000, v43, v52, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }

        goto LABEL_119;
      }

      if (v53)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v51;
        _os_log_impl( &dword_181A5C000,  v43,  v52,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v17) {
    free(v17);
  }
LABEL_34:
}

    free(v62);
    goto LABEL_120;
  }

  if (a2 && a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = (char *)v7 + 609;
      _os_log_impl(&dword_181A5C000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %s Remove input handler", buf, 0x16u);
    }
  }

  if (a1->default_input_handler != a2)
  {
LABEL_9:
    uint64_t v8 = 0LL;
LABEL_52:

    return v8;
  }

  id v9 = MEMORY[0x1895F87A8];
  if (v7[66])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = (char *)v7 + 609;
      _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_INFO,  "%{public}s %s finalizing remaining pending input frames",  buf,  0x16u);
    }

    if (gLogDatapath)
    {
      __nwlog_obj();
      v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_181A5C000, v67, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }

    *(void *)buf = v9;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5194;
    char v77 = &__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    v78 = v7 + 66;
    v79 = 0;
    nw_endpoint_t v11 = v7[66];
    do
    {
      if (!v11) {
        break;
      }
      os_log_type_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      nw_endpoint_t v11 = v12;
    }

    while ((v13 & 1) != 0);
  }

  if (v7[64])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = (char *)v7 + 609;
      _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s %s finalizing remaining received input frames",  buf,  0x16u);
    }

    if (gLogDatapath)
    {
      __nwlog_obj();
      v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_181A5C000, v68, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }

    *(void *)buf = v9;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5194;
    char v77 = &__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    v78 = v7 + 64;
    v79 = 0;
    int v15 = v7[64];
    do
    {
      if (!v15) {
        break;
      }
      id v16 = *(void *)(v15 + 32);
      __int16 v17 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      int v15 = v16;
    }

    while ((v17 & 1) != 0);
  }

  if (v7[71])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v18 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = (char *)v7 + 609;
      _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_INFO,  "%{public}s %s finalizing remaining received output frames",  buf,  0x16u);
    }

    if (gLogDatapath)
    {
      __nwlog_obj();
      id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_181A5C000, v69, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }

    *(void *)buf = v9;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5194;
    char v77 = &__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    v78 = v7 + 71;
    v79 = 0;
    uint64_t v19 = v7[71];
    do
    {
      if (!v19) {
        break;
      }
      uint64_t v20 = *(void *)(v19 + 32);
      id v21 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      uint64_t v19 = v20;
    }

    while ((v21 & 1) != 0);
  }

  nw_protocol_set_input_handler((uint64_t)a1, 0LL);
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      remove_input_handler = (void (*)(void))callbacks->remove_input_handler;
      if (remove_input_handler)
      {
        remove_input_handler();
        nw_protocol_set_output_handler((uint64_t)a1, 0LL);
      }
    }
  }

  if (!a3)
  {
LABEL_51:
    uint64_t v8 = 1LL;
    goto LABEL_52;
  }

  os_log_type_t v25 = v7;
  int v26 = (char *)*((void *)v25 + 41);
  if (v26 == v25)
  {
LABEL_39:
    if (gLogDatapath)
    {
      __nwlog_obj();
      BOOL v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_framer_protocol_destroy";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v25 + 609;
        _os_log_impl(&dword_181A5C000, v72, OS_LOG_TYPE_DEBUG, "%{public}s %s Destroying protocol", buf, 0x16u);
      }
    }

    BOOL v30 = *((void *)v25 + 54);
    if (v30) {
      (*(void (**)(uint64_t, char *))(v30 + 16))(v30, v25);
    }
    nw_protocol_remove_instance((uint64_t)(v25 + 288));
    v31 = *((void *)v25 + 40);
    if (v31)
    {
      os_log_type_t v32 = *(void *)(v31 + 24);
      if (v32)
      {
        BOOL v33 = *(void (**)(uint64_t, char *))(v32 + 8);
        if (v33)
        {
          v33(v31, v25 + 288);
          nw_protocol_set_output_handler((uint64_t)(v25 + 288), 0LL);
        }
      }
    }

    while (1)
    {
      nw_endpoint_t v34 = (void *)*((void *)v25 + 58);
      if (!v34) {
        break;
      }
      os_log_type_t v35 = v34;
      nw_frame_finalize((uint64_t)v35);
    }

    while (1)
    {
      id v37 = (void *)*((void *)v25 + 60);
      if (!v37) {
        break;
      }
      os_log_type_t v36 = v37;
      nw_frame_finalize((uint64_t)v36);
    }

    id v38 = *((id *)v25 + 46);
    nw_context_reset_timer_block_with_time(v38, (uint64_t)v25, -1LL, 0LL);

    uint64_t v39 = (void *)*((void *)v25 + 70);
    *((void *)v25 + 70) = 0LL;

    *((void *)v25 + 41) = 0LL;
    id v40 = (void *)*((void *)v25 + 45);
    *((void *)v25 + 45) = 0LL;

    char v41 = (void *)*((void *)v25 + 44);
    *((void *)v25 + 44) = 0LL;

    id v42 = (void *)*((void *)v25 + 49);
    *((void *)v25 + 49) = 0LL;

    os_log_type_t v43 = (void *)*((void *)v25 + 50);
    *((void *)v25 + 50) = 0LL;

    uint64_t v44 = (void *)*((void *)v25 + 51);
    *((void *)v25 + 51) = 0LL;

    nw_endpoint_t v45 = (void *)*((void *)v25 + 52);
    *((void *)v25 + 52) = 0LL;

    uint64_t v46 = (void *)*((void *)v25 + 53);
    *((void *)v25 + 53) = 0LL;

    uint64_t v47 = (void *)*((void *)v25 + 54);
    *((void *)v25 + 54) = 0LL;

    goto LABEL_51;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v27 = (os_log_s *)(id)gLogObj;
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_framer_protocol_destroy";
  int v28 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v28);
  if (!result)
  {
    free(v28);
    goto LABEL_39;
  }

  __break(1u);
  return result;
}

          int v15 = 60000LL;
          goto LABEL_87;
        }

        __nwlog_obj();
        id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          goto LABEL_86;
        }
        v31 = *((_DWORD *)v13 + 85);
        *(_DWORD *)buf = 136446978;
        char v77 = "nw_resolver_start_delayed_reporting_timer";
        v78 = 1024;
        *(_DWORD *)v79 = v31;
        *(_WORD *)&v79[4] = 2048;
        *(void *)&v79[6] = v15;
        *(_WORD *)&v79[14] = 2048;
        int v15 = 60000LL;
        *(void *)&v79[16] = 60000LL;
        __int16 v17 = "%{public}s [R%u] Invalid resolver reporting delay %llums, reverting to max value %llums";
LABEL_84:
        uint64_t v23 = v16;
        id v24 = 38;
        goto LABEL_85;
      }

      int v15 = 60000LL;
    }

    if (v33) {
      free(v33);
    }
    goto LABEL_16;
  }

  v5->attempt_started_after_milliseconds = xpc_dictionary_get_uint64(v2, "attempt_started_after_milliseconds");
  v5->duration_milliseconds = xpc_dictionary_get_uint64(v2, "duration_milliseconds");
  v5->resolution_started_after_milliseconds = xpc_dictionary_get_uint64(v2, "resolution_started_after_milliseconds");
  v5->flow_started_after_milliseconds = xpc_dictionary_get_uint64(v2, "flow_started_after_milliseconds");
  if (object_getClass(v2) != v4)
  {
LABEL_5:
    BOOL v6 = 0LL;
    goto LABEL_6;
  }

  value = xpc_dictionary_get_value(v2, "proxy_endpoints");
  BOOL v6 = value;
  if (value)
  {
    if (object_getClass(value) != (Class)MEMORY[0x1895F9220]) {
      goto LABEL_5;
    }
    BOOL v6 = xpc_retain(v6);
    if (v6)
    {
      id v14 = nw_array_create();
      proxy_endpoints = v5->proxy_endpoints;
      v5->proxy_endpoints = (OS_nw_array *)v14;

      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = __nw_establishment_report_create_from_dictionary_block_invoke;
      applier[3] = &unk_189BC8CB8;
      v55 = v5;
      xpc_array_apply(v6, applier);
    }
  }

  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

    if (v27) {
      free(v27);
    }
    goto LABEL_21;
  }

  __nwlog_obj();
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v52 = "__nw_protocol_notify";
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();

  v49[0] = OS_LOG_TYPE_ERROR;
  v46[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v49, v46))
  {
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "__nw_protocol_notify";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v46[0])
    {
      nw_endpoint_t v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = v49[0];
      os_log_type_t v36 = os_log_type_enabled(v24, v49[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          int v52 = "__nw_protocol_notify";
          v53 = 2082;
          v54 = v34;
          _os_log_impl( &dword_181A5C000,  v24,  v35,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v34);
        goto LABEL_81;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "__nw_protocol_notify";
        _os_log_impl(&dword_181A5C000, v24, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v43 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "__nw_protocol_notify";
        _os_log_impl( &dword_181A5C000,  v24,  v43,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    goto LABEL_87;
  }

  uint64_t v7 = v5[1];
  if (!v7)
  {
    __nwlog_obj();
    int v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_instance_set_cached_content";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null instance->parent_definition", buf, 0xCu);
      }

      goto LABEL_86;
    }

    if (!v43)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v39 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v39,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    int v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v29 = type;
    BOOL v30 = os_log_type_enabled(v13, type);
    if (!v28)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v29,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v46 = "nw_protocol_instance_set_cached_content";
      uint64_t v47 = 2082;
      v48 = v28;
      _os_log_impl( &dword_181A5C000,  v13,  v29,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_53;
  }

  uint64_t v8 = *(void *)(v7 + 72);
  if (!v8)
  {
    __nwlog_obj();
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_instance_set_cached_content";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null instance->parent_definition->common_state",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    if (!v43)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v40 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v40,  "%{public}s called with null instance->parent_definition->common_state, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    int v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v31 = type;
    os_log_type_t v32 = os_log_type_enabled(v13, type);
    if (!v28)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v31,  "%{public}s called with null instance->parent_definition->common_state, no backtrace",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v46 = "nw_protocol_instance_set_cached_content";
      uint64_t v47 = 2082;
      v48 = v28;
      _os_log_impl( &dword_181A5C000,  v13,  v31,  "%{public}s called with null instance->parent_definition->common_state, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_53;
  }

  if (!*(void *)(v8 + 56))
  {
    __nwlog_obj();
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_instance_set_cached_content";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v20 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    if (!v43)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v41 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v41,  "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    int v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v33 = type;
    nw_endpoint_t v34 = os_log_type_enabled(v13, type);
    if (!v28)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v33,  "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, no backtrace",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v46 = "nw_protocol_instance_set_cached_content";
      uint64_t v47 = 2082;
      v48 = v28;
      _os_log_impl( &dword_181A5C000,  v13,  v33,  "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v27) {
      free(v27);
    }
    goto LABEL_21;
  }

  __nwlog_obj();
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v52 = "__nw_protocol_output_available";
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();

  v49[0] = OS_LOG_TYPE_ERROR;
  v46[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v49, v46))
  {
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "__nw_protocol_output_available";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v46[0])
    {
      nw_endpoint_t v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = v49[0];
      os_log_type_t v36 = os_log_type_enabled(v24, v49[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          int v52 = "__nw_protocol_output_available";
          v53 = 2082;
          v54 = v34;
          _os_log_impl( &dword_181A5C000,  v24,  v35,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v34);
        goto LABEL_81;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "__nw_protocol_output_available";
        _os_log_impl(&dword_181A5C000, v24, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v43 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "__nw_protocol_output_available";
        _os_log_impl( &dword_181A5C000,  v24,  v43,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v27) {
      free(v27);
    }
    goto LABEL_21;
  }

  __nwlog_obj();
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v52 = "__nw_protocol_error";
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();

  v49[0] = OS_LOG_TYPE_ERROR;
  v46[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v49, v46))
  {
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "__nw_protocol_error";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v46[0])
    {
      nw_endpoint_t v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = v49[0];
      os_log_type_t v36 = os_log_type_enabled(v24, v49[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          int v52 = "__nw_protocol_error";
          v53 = 2082;
          v54 = v34;
          _os_log_impl( &dword_181A5C000,  v24,  v35,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v34);
        goto LABEL_81;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "__nw_protocol_error";
        _os_log_impl(&dword_181A5C000, v24, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v43 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "__nw_protocol_error";
        _os_log_impl( &dword_181A5C000,  v24,  v43,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v40) {
      free(v40);
    }
    BOOL v30 = 0LL;
    BOOL v29 = v47;
    os_log_type_t v25 = v48;
    goto LABEL_41;
  }

  return 0LL;
}

  __break(1u);
  return result;
}

    if (v18) {
      free(v18);
    }
    os_release(v11);
    return 0LL;
  }

  return v11;
}

  return 1LL;
}

              free(v35);
              goto LABEL_87;
            }

            __nwlog_obj();
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            id v92 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v147 = 0;
            if (__nwlog_fault(v92, &type, &v147))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                uint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v106 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl( &dword_181A5C000,  v93,  v106,  "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
                }

    goto LABEL_87;
  }

  id v3 = nw_parameters_create();
  if (v3)
  {
    options = nw_protocol_create_options((void *)g_tcp_definition);
    if (options)
    {
      if (nw_parameters_add_protocol_stack_member(v3, 3, 0, options))
      {
        *((_BYTE *)v3 + 92) = 2;
        *(_WORD *)(*((void *)v3 + 13) + 100LL) |= 0x10u;
        CFRange v5 = v3;
        goto LABEL_51;
      }

          goto LABEL_87;
        }

        if (!v41)
        {
          __nwlog_obj();
          int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v40 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            nw_endpoint_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl( &dword_181A5C000,  v15,  v40,  "%{public}s sec_identity_create failed, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_86;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = type;
        os_log_type_t v36 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446210;
            nw_endpoint_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_181A5C000, v15, v35, "%{public}s sec_identity_create failed, no backtrace", buf, 0xCu);
          }

          goto LABEL_86;
        }

        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          uint64_t v46 = 2082;
          uint64_t v47 = (CFErrorRef)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v35,  "%{public}s sec_identity_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v14) {
          return;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v24 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
        id v14 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v41 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v15 = (os_log_s *)(id)gLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            nw_endpoint_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_181A5C000, v15, v25, "%{public}s SecIdentityCreate failed", buf, 0xCu);
          }

          goto LABEL_86;
        }

        if (!v41)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v15 = (os_log_s *)(id)gLogObj;
          id v38 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            nw_endpoint_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl( &dword_181A5C000,  v15,  v38,  "%{public}s SecIdentityCreate failed, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_86;
        }

        BOOL v30 = __nw_create_backtrace_string();
        if (!v30)
        {
          __nwlog_obj();
          int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v39 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            nw_endpoint_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_181A5C000, v15, v39, "%{public}s SecIdentityCreate failed, no backtrace", buf, 0xCu);
          }

          goto LABEL_86;
        }

        v31 = (__CFError *)v30;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (os_log_s *)(id)gLogObj;
        BOOL v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          uint64_t v46 = 2082;
          uint64_t v47 = v31;
          _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s SecIdentityCreate failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v31);
        if (!v14) {
          return;
        }
      }

      if (v37) {
        free(v37);
      }
      goto LABEL_9;
    }
  }

  __int16 v17 = v11[2];
  if (v17 && !nw_path_parameters_get_logging_disabled(v17[13]) && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v26 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v27 = *((_DWORD *)v11 + 112);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = nw_protocol_definition_get_identifier(v12);
      _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] %{public}s does not have handler registered, ignoring metadata change notification",  buf,  0x1Cu);
    }
  }
}

    if (v40) {
      free(v40);
    }
    return 0LL;
  }

  nw_parameters_t v2 = __size;
  *(void *)v63 = 0LL;
  nw_endpoint_t v64 = v63;
  v65 = 0x2000000000LL;
  v66 = 0LL;
  v59 = 0LL;
  v60 = &v59;
  os_log_type_t v61 = 0x2000000000LL;
  v62 = 0LL;
  if (gLogDatapath)
  {
    uint64_t v44 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      buf = 136446466;
      v68 = "nw_frame_cache_create_frame";
      id v69 = 1024;
      LODWORD(v70) = v2;
      _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s requested frame of length %u",  (uint8_t *)&buf,  0x12u);
    }
  }

  v52[0] = MEMORY[0x1895F87A8];
  v52[1] = 0x40000000LL;
  v53 = __nw_frame_cache_create_frame_block_invoke;
  v54 = &unk_189BBA090;
  v56 = &v59;
  id v57 = a1;
  v58 = v2;
  v55 = v63;
  nw_protocol_definition_t v4 = *a1;
  do
  {
    if (!v4) {
      break;
    }
    CFRange v5 = *(void *)(v4 + 16);
    BOOL v6 = ((uint64_t (*)(void *))v53)(v52);
    nw_protocol_definition_t v4 = v5;
  }

  while ((v6 & 1) != 0);
  if (*((void *)v64 + 3)) {
    goto LABEL_7;
  }
  if (!v2) {
    goto LABEL_14;
  }
  id v9 = calloc(1uLL, v2);
  if (v9) {
    goto LABEL_15;
  }
  os_log_type_t v10 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  buf = 136446722;
  v68 = "strict_calloc";
  id v69 = 2048;
  v70 = 1LL;
  os_log_type_t v71 = 2048;
  BOOL v72 = v2;
  nw_endpoint_t v11 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
LABEL_14:
    id v9 = 0LL;
LABEL_15:
    uint64_t v13 = v60[3];
    if (v13)
    {
      id v14 = *(void *)(v13 + 16);
      int v15 = *(void **)(v13 + 24);
      if (v14)
      {
        *(void *)(v14 + 24) = v15;
        int v15 = *(void **)(v13 + 24);
      }

      else
      {
        a1[1] = (uint64_t)v15;
      }

      *int v15 = v14;
      *(void *)(v13 + 16) = 0LL;
      *(void *)(v13 + 24) = 0LL;
      id v21 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 6) = v21 - 1;
      if (v21) {
        goto LABEL_51;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = *((unsigned int *)a1 + 6);
      buf = 136446978;
      v68 = "nw_frame_cache_create_frame";
      id v69 = 2082;
      v70 = (uint64_t)"frame_cache->empty_frames_count";
      os_log_type_t v71 = 2048;
      BOOL v72 = 1LL;
      os_log_type_t v73 = 2048;
      v74 = v22;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v50 = 0;
      if (__nwlog_fault(v23, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v24 = (os_log_s *)gLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            int v26 = *((unsigned int *)a1 + 6);
            buf = 136446978;
            v68 = "nw_frame_cache_create_frame";
            id v69 = 2082;
            v70 = (uint64_t)"frame_cache->empty_frames_count";
            os_log_type_t v71 = 2048;
            BOOL v72 = 1LL;
            os_log_type_t v73 = 2048;
            v74 = v26;
            os_log_type_t v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_47:
            _os_log_impl(&dword_181A5C000, v24, v25, v27, (uint8_t *)&buf, 0x2Au);
          }
        }

        else if (v50)
        {
          os_log_type_t v32 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v24 = (os_log_s *)gLogObj;
          os_log_type_t v25 = type;
          BOOL v33 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v32)
          {
            if (v33)
            {
              nw_endpoint_t v34 = *((unsigned int *)a1 + 6);
              buf = 136447234;
              v68 = "nw_frame_cache_create_frame";
              id v69 = 2082;
              v70 = (uint64_t)"frame_cache->empty_frames_count";
              os_log_type_t v71 = 2048;
              BOOL v72 = 1LL;
              os_log_type_t v73 = 2048;
              v74 = v34;
              v75 = 2082;
              v76 = v32;
              _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x34u);
            }

            free(v32);
            goto LABEL_48;
          }

          if (v33)
          {
            id v38 = *((unsigned int *)a1 + 6);
            buf = 136446978;
            v68 = "nw_frame_cache_create_frame";
            id v69 = 2082;
            v70 = (uint64_t)"frame_cache->empty_frames_count";
            os_log_type_t v71 = 2048;
            BOOL v72 = 1LL;
            os_log_type_t v73 = 2048;
            v74 = v38;
            os_log_type_t v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_47;
          }
        }

        else
        {
          id v24 = (os_log_s *)__nwlog_obj();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            id v37 = *((unsigned int *)a1 + 6);
            buf = 136446978;
            v68 = "nw_frame_cache_create_frame";
            id v69 = 2082;
            v70 = (uint64_t)"frame_cache->empty_frames_count";
            os_log_type_t v71 = 2048;
            BOOL v72 = 1LL;
            os_log_type_t v73 = 2048;
            v74 = v37;
            os_log_type_t v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_47;
          }
        }
      }

      free(v33);
      if (!v27) {
        return;
      }
LABEL_102:
      free(v27);
      return;
    }

    int v28 = (os_log_s *)__nwlog_obj();
    BOOL v29 = type;
    if (!os_log_type_enabled(v28, type)) {
      goto LABEL_101;
    }
    *(_DWORD *)buf = 136446210;
    char v41 = "nw_protocol_masque_notify";
    BOOL v30 = "%{public}s called with null masque";
LABEL_100:
    _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0xCu);
    goto LABEL_101;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v41 = "nw_protocol_masque_notify";
    os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v28 = (os_log_s *)__nwlog_obj();
      BOOL v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_101;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_masque_notify";
      BOOL v30 = "%{public}s called with null other_protocol";
      goto LABEL_100;
    }

    if (!v38)
    {
      int v28 = (os_log_s *)__nwlog_obj();
      BOOL v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_101;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_masque_notify";
      BOOL v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_100;
    }

    BOOL v33 = (char *)__nw_create_backtrace_string();
    int v28 = (os_log_s *)__nwlog_obj();
    BOOL v29 = type;
    os_log_type_t v36 = os_log_type_enabled(v28, type);
    if (!v33)
    {
      if (!v36) {
        goto LABEL_101;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "nw_protocol_masque_notify";
      BOOL v30 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_100;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      char v41 = "nw_protocol_masque_notify";
      id v42 = 2082;
      os_log_type_t v43 = v33;
      os_log_type_t v35 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_85;
    }

    goto LABEL_86;
  }

  if ((*(_BYTE *)(handle + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    BOOL v6 = (os_log_s *)gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      if (a3 > 0x1A) {
        uint64_t v7 = "unknown";
      }
      else {
        uint64_t v7 = off_189BBE330[a3];
      }
      *(_DWORD *)buf = 136446978;
      char v41 = "nw_protocol_masque_notify";
      id v42 = 2082;
      os_log_type_t v43 = (const char *)(handle + 531);
      uint64_t v44 = 2080;
      nw_endpoint_t v45 = " ";
      uint64_t v46 = 2082;
      uint64_t v47 = v7;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sreceived notification %{public}s",  buf,  0x2Au);
    }
  }

  switch(a3)
  {
    case 5u:
      secondary_certificate_count = nw_http_connection_metadata_get_secondary_certificate_count(*(void **)(handle + 456));
      __int16 v17 = *(_DWORD *)(handle + 516);
      if (v17 != 1 || secondary_certificate_count == 0)
      {
        if (!v17
          && secondary_certificate_count
          && *(_DWORD *)(handle + 508) == 2
          && (*(_BYTE *)(handle + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
          }
          uint64_t v19 = (os_log_s *)gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446466;
            char v41 = (const char *)(handle + 531);
            id v42 = 2080;
            os_log_type_t v43 = " ";
            _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_INFO,  "%{public}s%sHave secondary certificates, not utilizing without rejection from proxy",  buf,  0x16u);
          }
        }
      }

      else
      {
        if ((*(_BYTE *)(handle + 529) & 1) == 0 && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
          }
          id v37 = (os_log_s *)gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            char v41 = "nw_protocol_masque_notify";
            id v42 = 2082;
            os_log_type_t v43 = (const char *)(handle + 531);
            uint64_t v44 = 2080;
            nw_endpoint_t v45 = " ";
            _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sMASQUE waiting for secondary certs, checking to reverse proxy",  buf,  0x20u);
          }
        }

        if ((nw_masque_setup_reverse_proxy(handle) & 1) != 0) {
          return;
        }
      }

      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        callbacks = default_input_handler->callbacks;
        if (callbacks)
        {
          notify = (void (*)(void))callbacks->notify;
          if (notify) {
            goto LABEL_58;
          }
        }
      }

      return;
    case 7u:
    case 0x15u:
      return;
    case 0xDu:
      nw_masque_report_error_to_proxy_agent(handle, 1302);
      output_handler = a1->output_handler;
      if (output_handler)
      {
        id v24 = output_handler->callbacks;
        if (v24)
        {
          notify = (void (*)(void))v24->notify;
          if (notify) {
            goto LABEL_58;
          }
        }
      }

      return;
    case 0x12u:
    case 0x18u:
      uint64_t v8 = *(void *)(handle + 432);
      if (!v8 || !*(void *)(handle + 384) || !*(void *)(handle + 392)) {
        goto LABEL_44;
      }
      nw_protocol_masque_reset_demux_protocol(a1);
      if (v8 != *(void *)(handle + 432))
      {
        id v9 = *(void **)(handle + 424);
        if (v9)
        {
          os_release(v9);
          *(void *)(handle + 424) = 0LL;
        }

        *(_DWORD *)(handle + 527) &= ~0x20000u;
        os_log_type_t v10 = *(void *)(handle + 160);
        if (v10)
        {
          nw_endpoint_t v11 = *(void *)(v10 + 24);
          if (v11)
          {
            os_log_type_t v12 = *(void (**)(void))(v11 + 8);
            if (v12) {
              v12();
            }
          }
        }

        uint64_t v13 = *(void *)(handle + 224);
        if (v13)
        {
          id v14 = *(void *)(v13 + 24);
          if (v14)
          {
            int v15 = *(void (**)(void))(v14 + 8);
            if (v15) {
              v15();
            }
          }
        }

        nw_masque_setup_demux(handle, 1);
        nw_masque_setup_demux(handle, 0);
      }

      return;
    default:
      if (a3 - 15 > 1)
      {
LABEL_44:
        uint64_t v20 = a1->default_input_handler;
        if (!v20) {
          return;
        }
      }

      else
      {
        uint64_t v20 = a1->output_handler;
        if (!v20) {
          return;
        }
      }

      id v21 = v20->callbacks;
      if (v21)
      {
        notify = (void (*)(void))v21->notify;
        if (notify) {
LABEL_58:
        }
          notify();
      }

      return;
  }

      if (v32) {
        free(v32);
      }
LABEL_32:
      v42[0] = v12;
      v42[1] = 0x40000000LL;
      os_log_type_t v43 = (uint64_t (*)(void *))___ZL33nw_protocol_ohttp_context_destroyP16nw_ohttp_context_block_invoke;
      uint64_t v44 = &__block_descriptor_tmp_17_29094;
      nw_endpoint_t v45 = a1;
      uint64_t v19 = a1[3];
      do
      {
        if (!v19) {
          break;
        }
        uint64_t v20 = *(void *)(v19 + 16);
        id v21 = v43(v42);
        uint64_t v19 = v20;
      }

      while ((v21 & 1) != 0);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)os_log_type_t type = 136446210;
    v49 = "nw_protocol_finalize_master_frame_array";
    os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
    uint64_t v47 = OS_LOG_TYPE_ERROR;
    uint64_t v46 = 0;
    if (__nwlog_fault(v27, &v47, &v46))
    {
      if (v47 == OS_LOG_TYPE_FAULT)
      {
        int v28 = (os_log_s *)__nwlog_obj();
        BOOL v29 = v47;
        if (!os_log_type_enabled(v28, v47)) {
          goto LABEL_81;
        }
        *(_DWORD *)os_log_type_t type = 136446210;
        v49 = "nw_protocol_finalize_master_frame_array";
        BOOL v30 = "%{public}s frame array is not empty after finalize";
        goto LABEL_80;
      }

      if (!v46)
      {
        int v28 = (os_log_s *)__nwlog_obj();
        BOOL v29 = v47;
        if (!os_log_type_enabled(v28, v47)) {
          goto LABEL_81;
        }
        *(_DWORD *)os_log_type_t type = 136446210;
        v49 = "nw_protocol_finalize_master_frame_array";
        BOOL v30 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
        goto LABEL_80;
      }

      id v38 = (char *)__nw_create_backtrace_string();
      int v28 = (os_log_s *)__nwlog_obj();
      BOOL v29 = v47;
      uint64_t v39 = os_log_type_enabled(v28, v47);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          v49 = "nw_protocol_finalize_master_frame_array";
          v50 = 2082;
          v51 = v38;
          _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
        }

        free(v38);
        goto LABEL_81;
      }

      if (v39)
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        v49 = "nw_protocol_finalize_master_frame_array";
        BOOL v30 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_80:
        _os_log_impl(&dword_181A5C000, v28, v29, v30, (uint8_t *)type, 0xCu);
      }
    }

    goto LABEL_87;
  }

  uint64_t v7 = v5;
  uint64_t v8 = *((id *)v7 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v8,  nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    os_log_type_t v10 = *((void *)v7 + 4);
    if (v10) {
      __nw_http_client_metadata_mark_end_block_invoke((uint64_t)&__block_literal_global_55_74677, v10);
    }
    goto LABEL_12;
  }

  __nwlog_obj();
  id v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v37 = "nw_http_client_metadata_mark_end";
  id v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  nw_endpoint_t v34 = 0;
  if (__nwlog_fault(v21, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        id v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_181A5C000, v22, v25, "%{public}s metadata must be http_client", buf, 0xCu);
      }
    }

    else if (v34)
    {
      BOOL v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v30 = type;
      v31 = os_log_type_enabled(v22, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          id v37 = "nw_http_client_metadata_mark_end";
          id v38 = 2082;
          uint64_t v39 = v29;
          _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v29);
        if (!v21) {
          goto LABEL_12;
        }
        goto LABEL_88;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        id v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_181A5C000, v22, v30, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v33 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        id v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl( &dword_181A5C000,  v22,  v33,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_86;
  }
  }

          free(v58);
          goto LABEL_122;
        }

        if (v65)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl( &dword_181A5C000,  v59,  v64,  "%{public}s called with null result_handler, no backtrace",  buf,  0xCu);
        }

        goto LABEL_121;
      }
    }

    else
    {
      id v42 = v20;
      __nwlog_obj();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      __int16 v83 = "nw_pac_resolver_create_with_url";
      nw_endpoint_t v45 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (__nwlog_fault(v45, &type, &v80))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v49 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_181A5C000, v46, v49, "%{public}s called with null endpointURL", buf, 0xCu);
          }

          goto LABEL_106;
        }

        if (!v80)
        {
          __nwlog_obj();
          uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v74 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl( &dword_181A5C000,  v46,  v74,  "%{public}s called with null endpointURL, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_106;
        }

        v58 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v62 = type;
        v63 = os_log_type_enabled(v59, type);
        if (v58)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v83 = "nw_pac_resolver_create_with_url";
            v84 = 2082;
            __int16 v85 = v58;
            _os_log_impl( &dword_181A5C000,  v59,  v62,  "%{public}s called with null endpointURL, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          goto LABEL_86;
        }

        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl(&dword_181A5C000, v59, v62, "%{public}s called with null endpointURL, no backtrace", buf, 0xCu);
        }

      nw_http_connect_fail(a1, 22);
      if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
        return 0LL;
      }
LABEL_213:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v102 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        _os_log_impl( &dword_181A5C000,  v102,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sFailed to create request message",  buf,  0x20u);
        return 0LL;
      }

      return 0LL;
    }

    hostname = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 144));
    BOOL v29 = 0LL;
  }

  uint64_t v39 = nw_endpoint_copy_port_string(*(nw_endpoint_t *)(a1 + 144));
  if (!v39)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v58 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        v49 = "%{public}s %{public}s%sCannot connect without port";
        v50 = (os_log_s *)v58;
        v51 = 32;
        goto LABEL_85;
      }
    }

    goto LABEL_86;
  }

  id v40 = v39;
  char v41 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  id v42 = "";
  if (v29) {
    id v42 = v29;
  }
  if (hostname) {
    os_log_type_t v43 = hostname;
  }
  else {
    os_log_type_t v43 = v42;
  }
  uint64_t v44 = CFStringCreateWithFormat(v41, 0LL, @"%s:%s", v43, v39);
  if (!v44)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
      goto LABEL_186;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&buf[22] = 2080;
    v171 = " ";
    os_log_type_t v61 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v161[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v61, type, v161))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v62 = (os_log_s *)gLogObj;
        v63 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_184;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        nw_endpoint_t v64 = "%{public}s %{public}s%sCFStringCreateWithFormat failed";
        goto LABEL_183;
      }

      if (v161[0] == OS_LOG_TYPE_DEFAULT)
      {
        v62 = (os_log_s *)__nwlog_obj();
        v63 = type[0];
        if (!os_log_type_enabled(v62, type[0])) {
          goto LABEL_184;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        nw_endpoint_t v64 = "%{public}s %{public}s%sCFStringCreateWithFormat failed, backtrace limit exceeded";
        goto LABEL_183;
      }

      os_log_type_t v71 = (char *)__nw_create_backtrace_string();
      v62 = (os_log_s *)__nwlog_obj();
      v63 = type[0];
      BOOL v72 = os_log_type_enabled(v62, type[0]);
      if (v71)
      {
        if (v72)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 284;
          *(_WORD *)&buf[22] = 2080;
          v171 = " ";
          LOWORD(v172) = 2082;
          *(void *)((char *)&v172 + 2) = v71;
          _os_log_impl( &dword_181A5C000,  v62,  v63,  "%{public}s %{public}s%sCFStringCreateWithFormat failed, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v71);
        goto LABEL_184;
      }

      if (v72)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        nw_endpoint_t v64 = "%{public}s %{public}s%sCFStringCreateWithFormat failed, no backtrace";
LABEL_183:
        _os_log_impl(&dword_181A5C000, v62, v63, v64, buf, 0x20u);
      }
    }

  if (v19)
  {
    nw_endpoint_t v34 = (char *)v19;
    goto LABEL_88;
  }

      _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0x16u);
      goto LABEL_87;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_protocol_http2_transport_frame_output_finalizer";
    id v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v3, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        nw_protocol_definition_t v4 = (os_log_s *)__nwlog_obj();
        CFRange v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_protocol_http2_transport_frame_output_finalizer";
          BOOL v6 = "%{public}s called with null http2_transport";
          goto LABEL_37;
        }
      }

      else if (v51)
      {
        int v15 = (char *)__nw_create_backtrace_string();
        nw_protocol_definition_t v4 = (os_log_s *)__nwlog_obj();
        CFRange v5 = type;
        os_log_type_t v43 = os_log_type_enabled(v4, type);
        if (v15)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            v54 = "nw_protocol_http2_transport_frame_output_finalizer";
            v55 = 2082;
            v56 = (nw_frame *)v15;
            __int16 v17 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
            goto LABEL_16;
          }

          goto LABEL_17;
        }

        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_protocol_http2_transport_frame_output_finalizer";
          BOOL v6 = "%{public}s called with null http2_transport, no backtrace";
          goto LABEL_37;
        }
      }

      else
      {
        nw_protocol_definition_t v4 = (os_log_s *)__nwlog_obj();
        CFRange v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_protocol_http2_transport_frame_output_finalizer";
          BOOL v6 = "%{public}s called with null http2_transport, backtrace limit exceeded";
          goto LABEL_37;
        }
      }
    }

        if (v59) {
          free(v59);
        }
        *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = -1;
        goto LABEL_89;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v41 = *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      *(_DWORD *)buf = 136446978;
      v147 = "nw_http1_connection_process_input_frames_block_invoke";
      v148 = 2082;
      v149 = "frames_processed";
      v150 = 2048;
      *(void *)v151 = 1LL;
      *(_WORD *)&v151[8] = 2048;
      *(void *)&v151[10] = v41;
      id v42 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v144 = 0;
      if (__nwlog_fault(v42, &type, &v144))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v43 = (os_log_s *)gLogObj;
          uint64_t v44 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            nw_endpoint_t v45 = *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
            *(_DWORD *)buf = 136446978;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = "frames_processed";
            v150 = 2048;
            *(void *)v151 = 1LL;
            *(_WORD *)&v151[8] = 2048;
            *(void *)&v151[10] = v45;
            uint64_t v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_66:
            _os_log_impl(&dword_181A5C000, v43, v44, v46, buf, 0x2Au);
          }
        }

        else if (v144)
        {
          uint64_t v47 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v43 = (os_log_s *)gLogObj;
          uint64_t v44 = type;
          v48 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v47)
          {
            if (v48)
            {
              v49 = *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
              *(_DWORD *)buf = 136447234;
              v147 = "nw_http1_connection_process_input_frames_block_invoke";
              v148 = 2082;
              v149 = "frames_processed";
              v150 = 2048;
              *(void *)v151 = 1LL;
              *(_WORD *)&v151[8] = 2048;
              *(void *)&v151[10] = v49;
              *(_WORD *)&v151[18] = 2082;
              v152 = v47;
              _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(v47);
            goto LABEL_67;
          }

          if (v48)
          {
            v53 = *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
            *(_DWORD *)buf = 136446978;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = "frames_processed";
            v150 = 2048;
            *(void *)v151 = 1LL;
            *(_WORD *)&v151[8] = 2048;
            *(void *)&v151[10] = v53;
            uint64_t v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_66;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v43 = (os_log_s *)gLogObj;
          uint64_t v44 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            int v52 = *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
            *(_DWORD *)buf = 136446978;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = "frames_processed";
            v150 = 2048;
            *(void *)v151 = 1LL;
            *(_WORD *)&v151[8] = 2048;
            *(void *)&v151[10] = v52;
            uint64_t v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_66;
          }
        }
      }

          *(void *)buf = v4;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39794;
          v137 = (uint64_t)&__block_descriptor_tmp_57_39795;
          v138[0] = 0;
          int v52 = *(void *)(v2 + 680);
          do
          {
            if (!v52) {
              break;
            }
            v53 = *(void *)(v52 + 16);
            v54 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            int v52 = v53;
          }

          while ((v54 & 1) != 0);
          if (!*(void *)(v2 + 680))
          {
            if (!gLogDatapath) {
              goto LABEL_91;
            }
            goto LABEL_201;
          }

          v129 = v14;
          os_log_type_t v71 = v4;
          __nwlog_obj();
          v141 = 136446210;
          v142 = "nw_protocol_finalize_master_frame_array";
          BOOL v72 = (char *)_os_log_send_and_compose_impl();
          v131 = OS_LOG_TYPE_ERROR;
          v130 = 0;
          if (__nwlog_fault(v72, &v131, &v130))
          {
            if (v131 == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v73 = (os_log_s *)__nwlog_obj();
              v74 = v131;
              if (!os_log_type_enabled(v73, v131)) {
                goto LABEL_198;
              }
              v141 = 136446210;
              v142 = "nw_protocol_finalize_master_frame_array";
              v75 = "%{public}s frame array is not empty after finalize";
LABEL_197:
              _os_log_impl(&dword_181A5C000, v73, v74, v75, (uint8_t *)&v141, 0xCu);
              goto LABEL_198;
            }

            if (!v130)
            {
              os_log_type_t v73 = (os_log_s *)__nwlog_obj();
              v74 = v131;
              if (!os_log_type_enabled(v73, v131)) {
                goto LABEL_198;
              }
              v141 = 136446210;
              v142 = "nw_protocol_finalize_master_frame_array";
              v75 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
              goto LABEL_197;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            os_log_type_t v73 = (os_log_s *)__nwlog_obj();
            v74 = v131;
            v117 = os_log_type_enabled(v73, v131);
            if (!backtrace_string)
            {
              if (!v117) {
                goto LABEL_198;
              }
              v141 = 136446210;
              v142 = "nw_protocol_finalize_master_frame_array";
              v75 = "%{public}s frame array is not empty after finalize, no backtrace";
              goto LABEL_197;
            }

            if (v117)
            {
              v141 = 136446466;
              v142 = "nw_protocol_finalize_master_frame_array";
              v143 = 2082;
              v144 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s",  (uint8_t *)&v141,  0x16u);
            }

            free(backtrace_string);
          }

      goto LABEL_87;
    }

    char v18 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = (id)gLogObj;
    *(_DWORD *)v70 = 136446978;
    os_log_type_t v71 = "createKernelSocket";
    BOOL v72 = 2082;
    *(void *)os_log_type_t v73 = &buf[4];
    *(_WORD *)&v73[8] = 1024;
    *(_DWORD *)&v73[10] = v5;
    *(_WORD *)&v73[14] = 1024;
    *(_DWORD *)&v73[16] = v18;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    v66[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v66[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (os_log_s *)(id)gLogObj;
      uint64_t v20 = v66[0];
      if (!os_log_type_enabled(v9, (os_log_type_t)v66[0])) {
        goto LABEL_63;
      }
      *(_DWORD *)v70 = 136446978;
      os_log_type_t v71 = "createKernelSocket";
      BOOL v72 = 2082;
      *(void *)os_log_type_t v73 = &buf[4];
      *(_WORD *)&v73[8] = 1024;
      *(_DWORD *)&v73[10] = v5;
      *(_WORD *)&v73[14] = 1024;
      *(_DWORD *)&v73[16] = v18;
      nw_endpoint_t v11 = "%{public}s unable to look up socket control name %{public}s on fd %d %{darwin.errno}d";
    }

    else
    {
      if (type)
      {
        os_log_type_t v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v36 = v66[0];
        id v37 = os_log_type_enabled(v9, (os_log_type_t)v66[0]);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)v70 = 136447234;
            os_log_type_t v71 = "createKernelSocket";
            BOOL v72 = 2082;
            *(void *)os_log_type_t v73 = &buf[4];
            *(_WORD *)&v73[8] = 1024;
            *(_DWORD *)&v73[10] = v5;
            *(_WORD *)&v73[14] = 1024;
            *(_DWORD *)&v73[16] = v18;
            v74 = 2082;
            v75[0] = v35;
            _os_log_impl( &dword_181A5C000,  v9,  v36,  "%{public}s unable to look up socket control name %{public}s on fd %d %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)v70,  0x2Cu);
          }

          free(v35);
LABEL_64:
          if (!v8)
          {
LABEL_66:
            close(v5);
            id v24 = -1004LL;
            goto LABEL_114;
          }

LABEL_87:
        if (!v49)
        {
LABEL_55:
          uint64_t v20 = 0;
          goto LABEL_59;
        }

            free(v37);
            goto LABEL_87;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v29 = (id)gLogObj;
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_ws_create_client_request";
          BOOL v30 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v80[0]) = 0;
          if (__nwlog_fault(v30, type, v80))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v31 = (os_log_s *)(id)gLogObj;
              os_log_type_t v32 = type[0];
              if (os_log_type_enabled(v31, type[0]))
              {
                *(_DWORD *)applier = 136446210;
                *(void *)&applier[4] = "nw_ws_create_client_request";
                _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s CFHTTPMessageCreateRequest failed", applier, 0xCu);
              }
            }

            else if (LOBYTE(v80[0]))
            {
              id v40 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v31 = (os_log_s *)(id)gLogObj;
              char v41 = type[0];
              id v42 = os_log_type_enabled(v31, type[0]);
              if (v40)
              {
                if (v42)
                {
                  *(_DWORD *)applier = 136446466;
                  *(void *)&applier[4] = "nw_ws_create_client_request";
                  *(_WORD *)&applier[12] = 2082;
                  *(void *)&applier[14] = v40;
                  _os_log_impl( &dword_181A5C000,  v31,  v41,  "%{public}s CFHTTPMessageCreateRequest failed, dumping backtrace:%{public}s",  applier,  0x16u);
                }

                free(v40);
                if (!v30) {
                  goto LABEL_78;
                }
                goto LABEL_77;
              }

              if (v42)
              {
                *(_DWORD *)applier = 136446210;
                *(void *)&applier[4] = "nw_ws_create_client_request";
                _os_log_impl( &dword_181A5C000,  v31,  v41,  "%{public}s CFHTTPMessageCreateRequest failed, no backtrace",  applier,  0xCu);
              }
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v31 = (os_log_s *)(id)gLogObj;
              v55 = type[0];
              if (os_log_type_enabled(v31, type[0]))
              {
                *(_DWORD *)applier = 136446210;
                *(void *)&applier[4] = "nw_ws_create_client_request";
                _os_log_impl( &dword_181A5C000,  v31,  v55,  "%{public}s CFHTTPMessageCreateRequest failed, backtrace limit exceeded",  applier,  0xCu);
              }
            }
          }

          if (!v30)
          {
LABEL_78:
            CFRelease(v8);
            goto LABEL_88;
          }

      goto LABEL_87;
    }

    if (!v45)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v21 = v46;
      if (os_log_type_enabled(v20, v46))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_storage_store_items";
        uint64_t v22 = "%{public}s called with null completion, backtrace limit exceeded";
        goto LABEL_85;
      }

      goto LABEL_86;
    }

    BOOL v30 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v21 = v46;
    os_log_type_t v36 = os_log_type_enabled(v20, v46);
    if (!v30)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_storage_store_items";
        uint64_t v22 = "%{public}s called with null completion, no backtrace";
        goto LABEL_85;
      }

      goto LABEL_86;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_storage_store_items";
      v49 = 2082;
      v50 = v30;
      os_log_type_t v32 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_58;
    }

        goto LABEL_87;
      }

      if (!v61)
      {
        __nwlog_obj();
        os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v52 = v62;
        if (os_log_type_enabled(v43, v62))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl( &dword_181A5C000,  v43,  v52,  "%{public}s called with null serviceConnector->activeConnections, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_86;
      }

      v49 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v54 = v62;
      v50 = os_log_type_enabled(v43, v62);
      if (!v49)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl( &dword_181A5C000,  v43,  v54,  "%{public}s called with null serviceConnector->activeConnections, no backtrace",  buf,  0xCu);
        }

        goto LABEL_86;
      }

      if (v50)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v49;
        _os_log_impl( &dword_181A5C000,  v43,  v54,  "%{public}s called with null serviceConnector->activeConnections, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v49);
    }

  __break(1u);
  return result;
}

    goto LABEL_87;
  }

  if (!v6)
  {
    __nwlog_obj();
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_activity_retrieve_metrics";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    v63 = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (v63 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v23 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null callback_queue", buf, 0xCu);
      }

      goto LABEL_86;
    }

    if (!v62)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      nw_endpoint_t v45 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_activity_retrieve_metrics";
        _os_log_impl( &dword_181A5C000,  v20,  v45,  "%{public}s called with null callback_queue, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    BOOL v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v30 = v63;
    v31 = os_log_type_enabled(v20, v63);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_181A5C000, v20, v30, "%{public}s called with null callback_queue, no backtrace", buf, 0xCu);
      }

      goto LABEL_86;
    }

    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v65 = "nw_activity_retrieve_metrics";
      v66 = 2082;
      v67 = v29;
      _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null callback_queue, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_57;
  }

  if (!v7)
  {
    __nwlog_obj();
    id v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_activity_retrieve_metrics";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    v63 = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (v63 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null completion", buf, 0xCu);
      }

      goto LABEL_86;
    }

    if (!v62)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v46 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_activity_retrieve_metrics";
        _os_log_impl( &dword_181A5C000,  v20,  v46,  "%{public}s called with null completion, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_86;
    }

    BOOL v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v36 = v63;
    id v37 = os_log_type_enabled(v20, v63);
    if (!v29)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_181A5C000, v20, v36, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }

      goto LABEL_86;
    }

    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      v65 = "nw_activity_retrieve_metrics";
      v66 = 2082;
      v67 = v29;
      _os_log_impl( &dword_181A5C000,  v20,  v36,  "%{public}s called with null completion, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      free(v43);
      if (!v37) {
        return;
      }
LABEL_102:
      free(v37);
      return;
    }

    id v38 = (os_log_s *)__nwlog_obj();
    uint64_t v39 = type;
    if (!os_log_type_enabled(v38, type)) {
      goto LABEL_101;
    }
    *(_DWORD *)buf = 136446210;
    v50 = "nw_protocol_http3_notify";
    id v40 = "%{public}s called with null http3";
LABEL_100:
    _os_log_impl(&dword_181A5C000, v38, v39, v40, buf, 0xCu);
    goto LABEL_101;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_protocol_http3_notify";
    id v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v38 = (os_log_s *)__nwlog_obj();
      uint64_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_101;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http3_notify";
      id v40 = "%{public}s called with null other_protocol";
      goto LABEL_100;
    }

    if (!v47)
    {
      id v38 = (os_log_s *)__nwlog_obj();
      uint64_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_101;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http3_notify";
      id v40 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_100;
    }

    os_log_type_t v43 = (char *)__nw_create_backtrace_string();
    id v38 = (os_log_s *)__nwlog_obj();
    uint64_t v39 = type;
    uint64_t v46 = os_log_type_enabled(v38, type);
    if (!v43)
    {
      if (!v46) {
        goto LABEL_101;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http3_notify";
      id v40 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_100;
    }

    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      v50 = "nw_protocol_http3_notify";
      v51 = 2082;
      int v52 = v43;
      nw_endpoint_t v45 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_85;
    }

    goto LABEL_86;
  }

  switch(a3)
  {
    case 12:
      if ((*(_WORD *)(v6 + 1373) & 8) == 0)
      {
        nw_http3_async_close_connection_if_no_stream(*(void *)(a1 + 40));
        nw_http3_notify_do_not_reuse(v6);
      }

      return;
    case 13:
      uint64_t v7 = *(unsigned __int16 *)(v6 + 1373) | (*(unsigned __int8 *)(v6 + 1375) << 16);
      if ((v7 & 0x100000) == 0 && *(void *)(v6 + 1240) && *(_DWORD *)(v6 + 1276))
      {
        if ((v7 & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v8 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            id v9 = *(_DWORD *)(v6 + 1280);
            *(_DWORD *)buf = 136446978;
            v50 = "nw_protocol_http3_notify";
            v51 = 2082;
            int v52 = (char *)(v6 + 1289);
            v53 = 2080;
            v54 = " ";
            v55 = 1024;
            v56 = v9;
            _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> increasing QUIC keepalive frequency due to data stall",  buf,  0x26u);
          }
        }

        *(_BYTE *)(v6 + 1375) |= 0x10u;
        nw_quic_connection_set_keepalive(*(void **)(v6 + 1240), 2);
      }

      os_log_type_t v10 = *(void *)(a1 + 32);
      if (v10)
      {
        nw_endpoint_t v11 = *(void *)(v10 + 24);
        if (v11)
        {
          os_log_type_t v12 = *(void (**)(void))(v11 + 160);
          if (v12) {
            goto LABEL_53;
          }
        }
      }

      return;
    case 16:
      if (!a4 || a5 != 1) {
        goto LABEL_50;
      }
      if (!*a4)
      {
        os_log_type_t v27 = (_WORD *)(v6 + 1373);
        int v28 = *(unsigned __int16 *)(v6 + 1373) | (*(unsigned __int8 *)(v6 + 1375) << 16);
        if ((v28 & 0x200000) != 0 && *(void *)(v6 + 1240))
        {
          int v15 = (void **)(v6 + 1240);
          if ((v28 & 0x400000) == 0)
          {
            BOOL v29 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              BOOL v30 = *(_DWORD *)(v6 + 1280);
              *(_DWORD *)buf = 136446978;
              v50 = "nw_protocol_http3_notify";
              v51 = 2082;
              int v52 = (char *)(v6 + 1289);
              v53 = 2080;
              v54 = " ";
              v55 = 1024;
              v56 = v30;
              _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> re-enabling QUIC keepalives due to connection reuse",  buf,  0x26u);
            }
          }

          v31 = (unsigned __int16)*v27;
          os_log_type_t v32 = (v31 | (*(unsigned __int8 *)(v6 + 1375) << 16)) & 0xFFDFFFFF;
          *os_log_type_t v27 = v31;
          *(_BYTE *)(v6 + 1375) = BYTE2(v32);
          char v18 = -1;
          goto LABEL_49;
        }

    goto LABEL_92;
  }

  v60 = 0LL;
  asprintf(&v60, "%s%s%s%s%s%s%s%s%s%s", a3, "<token=", "{domain=", a5, "}", "[type=", a6, "]", ">", a4);
  if (!v60)
  {
    __nwlog_obj();
    BOOL v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    int v15 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t v61 = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (v61 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = v61;
      if (os_log_type_enabled(v31, v61))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null value", buf, 0xCu);
      }

  __int16 v85 = *(void *)(a1 + 40);
  if (v85
    && (![*(id *)(v85 + 32) _explicitlySetShouldHandleCookies]
     || ([*(id *)(v85 + 32) HTTPShouldHandleCookies] & 1) != 0))
  {
    goto LABEL_95;
  }

  v86 = v35;
  __int16 v87 = v86;
  if (!v86)
  {
    __nwlog_obj();
    v202 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
    LODWORD(v389) = 12;
    v388 = buf;
    v203 = (char *)_os_log_send_and_compose_impl();

    v427 = OS_LOG_TYPE_ERROR;
    v426 = 0;
    if (v427 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v205 = v427;
      if (os_log_type_enabled(v204, v427))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
        _os_log_impl(&dword_181A5C000, v204, v205, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v426)
    {
      v220 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v221 = v427;
      v222 = os_log_type_enabled(v204, v427);
      if (v220)
      {
        if (v222)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v220;
          _os_log_impl( &dword_181A5C000,  v204,  v221,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v220);
LABEL_415:
        if (!v203) {
          goto LABEL_94;
        }
LABEL_416:
        free(v203);
        goto LABEL_94;
      }

      if (v222)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
        _os_log_impl(&dword_181A5C000, v204, v221, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v238 = v427;
      if (os_log_type_enabled(v204, v427))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
        _os_log_impl( &dword_181A5C000,  v204,  v238,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

  if (v39) {
LABEL_87:
  }
    free(v39);
LABEL_96:
}

        goto LABEL_87;
      }

      if (!v51)
      {
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v49 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl( &dword_181A5C000,  v27,  v49,  "%{public}s called with null connection->endpoint_handler_connected, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_86;
      }

      char v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v42 = type;
      os_log_type_t v43 = os_log_type_enabled(v27, type);
      if (!v41)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl( &dword_181A5C000,  v27,  v42,  "%{public}s called with null connection->endpoint_handler_connected, no backtrace",  buf,  0xCu);
        }

        goto LABEL_86;
      }

      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        v54 = "nw_connection_create_interface_status_monitor";
        v55 = 2082;
        v56 = v41;
        _os_log_impl( &dword_181A5C000,  v27,  v42,  "%{public}s called with null connection->endpoint_handler_connected, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v41);
    }

    if (v52) {
      free(v52);
    }
    goto LABEL_47;
  }

  if ([(id)objc_opt_class() conformsToProtocol:&unk_18C5BE5E0])
  {
    v71.receiver = self;
    v71.super_class = (Class)&OBJC_CLASS___NWTCPListener;
    os_log_type_t v12 = -[NWTCPListener init](&v71, sel_init);
    if (v12)
    {
      if (v69)
      {
        secure_tcp = (nw_parameters *)[v69 copyCParameters];
        id v14 = nw_parameters_copy_default_protocol_stack(secure_tcp);
        int v15 = nw_protocol_stack_copy_transport_protocol(v14);
        id v16 = v15 == 0LL;

        if (v16)
        {
          options = nw_protocol_create_options((void *)g_tcp_definition);
          nw_protocol_stack_set_transport_protocol(v14, (nw_protocol_options_t)options);
        }

        char v18 = v70;
        if (v70) {
          goto LABEL_10;
        }
      }

      else
      {
        secure_tcp = nw_parameters_create_secure_tcp(&__block_literal_global_18956, &__block_literal_global_91);
        char v18 = v70;
        if (v70)
        {
LABEL_10:
          uint64_t v19 = (nw_listener_t)nw_listener_create_with_launchd_key( secure_tcp,  (const char *)[v18 UTF8String]);
          goto LABEL_24;
        }
      }

      uint64_t v19 = nw_listener_create(secure_tcp);
LABEL_24:
      int v28 = v19;
      -[NWTCPListener setInternalListener:](v12, "setInternalListener:", v19);

      -[NWTCPListener internalListener](v12, "internalListener");
      BOOL v29 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v28) = v29 == 0LL;

      if (!(_DWORD)v28)
      {
        if (v11)
        {
          [v11 name];
          BOOL v30 = (void *)objc_claimAutoreleasedReturnValue();
          [v11 type];
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          [v11 domain];
          os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
          bonjour_service = nw_advertise_descriptor_create_bonjour_service( (const char *)[v30 UTF8String],  (const char *)objc_msgSend(v31, "UTF8String"),  (const char *)objc_msgSend(v32, "UTF8String"));
          -[NWTCPListener internalListener](v12, "internalListener");
          nw_endpoint_t v34 = (nw_listener *)objc_claimAutoreleasedReturnValue();
          nw_listener_set_advertise_descriptor(v34, bonjour_service);
        }

        os_log_type_t v35 = -[NWParameters initWithParameters:]( objc_alloc(&OBJC_CLASS___NWParameters),  "initWithParameters:",  secure_tcp);
        parameters = v12->_parameters;
        v12->_parameters = v35;

        objc_storeWeak((id *)&v12->_delegate, v10);
        error = v12->_error;
        v12->_error = 0LL;

        localEndpoint = v12->_localEndpoint;
        v12->_localEndpoint = 0LL;

        objc_storeStrong((id *)&v12->_launchdKey, a5);
        -[NWTCPListener startInternal](v12, "startInternal");
        uint64_t v39 = v12;
        goto LABEL_58;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v40 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "-[NWTCPListener initWithParameters:delegate:launchdKey:bonjourEndpoint:]";
      char v41 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      BOOL v72 = 0;
      if (__nwlog_fault(v41, &type, &v72))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v42 = (os_log_s *)(id)gLogObj;
          os_log_type_t v43 = type;
          if (os_log_type_enabled(v42, type))
          {
            *(_DWORD *)buf = 136446210;
            v75 = "-[NWTCPListener initWithParameters:delegate:launchdKey:bonjourEndpoint:]";
            _os_log_impl(&dword_181A5C000, v42, v43, "%{public}s nw_listener_create failed", buf, 0xCu);
          }

void sub_181A8DC70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_endpoint_handler_copy_endpoint(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v18 = "nw_endpoint_handler_copy_endpoint";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v18 = "nw_endpoint_handler_copy_endpoint";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            char v18 = "nw_endpoint_handler_copy_endpoint";
            __int16 v19 = 2082;
            uint64_t v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          char v18 = "nw_endpoint_handler_copy_endpoint";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v18 = "nw_endpoint_handler_copy_endpoint";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181A8DFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_flow_copy_connected_path(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 220);
    if ((v2[8]._os_unfair_lock_opaque & 2) != 0 || (v2[8]._os_unfair_lock_opaque & 0x100) != 0)
    {
      id v5 = *(id *)&v2[2]._os_unfair_lock_opaque;
    }

    else
    {
      id v3 = *(void **)&v2[234]._os_unfair_lock_opaque;
      if (v3)
      {
        nw_protocol_definition_t v4 = (void *)nw_endpoint_handler_copy_connected_path(v3);
        id v5 = v4;
        if (v4)
        {
          BOOL v6 = *(void **)&v2[2]._os_unfair_lock_opaque;
          if (v6) {
            nw_path_apply_override_interface_types_from_path(v4, v6);
          }
        }
      }

      else
      {
        id v5 = 0LL;
      }
    }

    os_unfair_lock_unlock(v2 + 220);
    goto LABEL_10;
  }

  __nwlog_obj();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v19 = "nw_endpoint_flow_copy_connected_path";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v19 = "nw_endpoint_flow_copy_connected_path";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v19 = "nw_endpoint_flow_copy_connected_path";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v19 = "nw_endpoint_flow_copy_connected_path";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v19 = "nw_endpoint_flow_copy_connected_path";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A8E2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_endpoint_flow_mode_string(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    if ((v1[32] & 3) == 1)
    {
      id v3 = "parent-flow";
    }

    else if ((v1[32] & 2) != 0)
    {
      if (v1[33] < 0) {
        nw_protocol_definition_t v4 = "multipath-socket-flow";
      }
      else {
        nw_protocol_definition_t v4 = "socket-flow";
      }
      if ((v1[33] & 0x40) != 0) {
        id v3 = "channel-flow";
      }
      else {
        id v3 = v4;
      }
    }

    else
    {
      id v3 = "intermediate-flow";
    }

    goto LABEL_12;
  }

  __nwlog_obj();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_endpoint_flow_mode_string";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_endpoint_flow_mode_string";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_endpoint_flow_mode_string";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_endpoint_flow_mode_string";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_endpoint_flow_mode_string";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

LABEL_29:
  if (v7) {
    free(v7);
  }
  id v3 = "null-flow";
LABEL_12:

  return v3;
}

    if (v9) {
      free(v9);
    }
    goto LABEL_31;
  }

  id v3 = v1[19];
  if (!v3) {
    goto LABEL_31;
  }
  nw_protocol_definition_t v4 = *(void **)(v3 + 24);
  if (!v4) {
    goto LABEL_31;
  }
  id v5 = v4;
  BOOL v6 = nw_protocol_options_matches_definition(v5, (void *)g_tcp_definition);

  if (!v6)
  {
    if (nw_protocol_options_is_udp(*(void **)(v2[19] + 24LL))
      || nw_protocol_options_is_quic(*(nw_protocol_options_t *)(v2[19] + 24LL)))
    {
      protocol = 17LL;
      goto LABEL_32;
    }

    if (nw_protocol_options_is_custom_ip(*(void **)(v2[19] + 24LL)))
    {
      protocol = nw_custom_ip_options_get_protocol(*(void **)(v2[19] + 24LL));
      goto LABEL_32;
    }

    free(backtrace_string);
    goto LABEL_42;
  }

  if (!v3[6])
  {
    os_log_type_t v11 = 1LL;
    goto LABEL_45;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v6 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
    _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_INFO, "%{public}s matching url scheme", buf, 0xCu);
  }

  uint64_t v7 = v5;
  uint64_t v8 = [v7 type];

  if (v8 != 4 || (url_scheme = nw_endpoint_get_url_scheme(v7)) == 0)
  {
LABEL_44:
    os_log_type_t v11 = 0LL;
    goto LABEL_45;
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  BOOL v30 = 0;
  os_log_type_t v10 = (void *)v3[6];
  applier[0] = MEMORY[0x1895F87A8];
  applier[1] = 3221225472LL;
  applier[2] = __nw_protocol_transform_supports_endpoint_block_invoke;
  applier[3] = &unk_189BC5538;
  applier[4] = buf;
  applier[5] = url_scheme;
  xpc_array_apply(v10, applier);
  os_log_type_t v11 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
  _Block_object_dispose(buf, 8);
LABEL_45:

  return v11;
}

LABEL_30:
    if (v4) {
      free(v4);
    }
    return 0LL;
  }

  if ((*(_BYTE *)(a1 + 210) & 1) == 0 || *(_DWORD *)(a1 + 212) < 0xCCu) {
    return 0LL;
  }
  return *(_DWORD *)(a1 + 288) == a2
      || *(_DWORD *)(a1 + 296) == a2
      || *(_DWORD *)(a1 + 304) == a2
      || *(_DWORD *)(a1 + 312) == a2
      || *(_DWORD *)(a1 + 320) == a2
      || *(_DWORD *)(a1 + 328) == a2
      || *(_DWORD *)(a1 + 336) == a2
      || *(_DWORD *)(a1 + 344) == a2;
}

  return hostname;
}

  if (v12) {
    free(v12);
  }
  os_log_type_t v9 = 0LL;
LABEL_12:

  return v9;
}

  os_log_type_t v15 = (_WORD *)a3 + 222;
  if ((*((_WORD *)a3 + 222) & 4) != 0)
  {
    char v16 = (void *)a3[21];
    if (v16)
    {
    }
  }

  if (!a3[17]) {
    goto LABEL_42;
  }
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
  }
  if (!os_channel_sync())
  {
LABEL_42:
    __int16 v17 = a3[21];
    if (!v17) {
      return;
    }
  }

  else
  {
    nw_channel_check_defunct((uint64_t)a3);
    __int16 v17 = a3[21];
    if (!v17) {
      return;
    }
  }

  __int16 v18 = (unsigned __int16)*v15;
  if ((v18 & 8) != 0)
  {
    __int16 v19 = v18 & 0xFFFFFFF7 | (*((unsigned __int8 *)a3 + 446) << 16);
    *os_log_type_t v15 = v18 & 0xFFF7;
    *((_BYTE *)a3 + 446) = BYTE2(v19);
    nw_queue_resume_source(v17, v13);
  }

    if (v13) {
      free(v13);
    }
    os_log_type_t v11 = 0LL;
    goto LABEL_12;
  }

  id v5 = (void *)nw_endpoint_copy_proxy_original_endpoint(v3);
  BOOL v6 = v5;
  if (v5) {
    goto LABEL_3;
  }
  if ([v4 type] == (_DWORD)a2 || (id v5 = (void *)v4[14]) == 0)
  {
    uint64_t v7 = v4;
    goto LABEL_11;
  }

  if (v5 != v4)
  {
LABEL_3:
    uint64_t v7 = (void *)nw_endpoint_copy_original_endpoint(v5, a2);
LABEL_11:
    os_log_type_t v11 = v7;

LABEL_12:
    return (BOOL)v11;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v8 = (os_log_s *)(id)gLogObj;
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_endpoint_copy_original_endpoint";
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    id v5 = (void *)v4[14];
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

  if (v11) {
    free(v11);
  }
  uint64_t v8 = 0LL;
LABEL_12:

  return v8;
}

  if (v16) {
    free(v16);
  }
LABEL_12:
}

    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }

  else
  {
LABEL_9:
    swift_release();
    return *(void *)(*(void *)(v51 + 16) + 16LL);
  }

  return result;
}

  if (v16)
  {
LABEL_37:

    return 1LL;
  }

  __nwlog_obj();
  __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
  uint64_t v20 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v20);
  if (!result)
  {
    free(v20);
    goto LABEL_37;
  }

  if (v12) {
    free(v12);
  }
}

  char v16 = a1->output_handler;
  if (!v16)
  {
    int v28 = a2->handle;
    if (v28 == &nw_protocol_ref_counted_handle)
    {
      char v41 = a2[1].callbacks;
      if (v41) {
        a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v41->add_input_handler + 1);
      }
    }

    BOOL v30 = a1->handle;
    if (v30 == &nw_protocol_ref_counted_handle)
    {
      id v42 = a1[1].callbacks;
      if (v42) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v42->add_input_handler + 1);
      }
    }

    os_log_type_t v43 = a2->callbacks;
    if (!v43 || (disconnected = (void (*)(nw_protocol *, nw_protocol *))v43->disconnected) == 0LL)
    {
      __nwlog_obj();
      uint64_t v44 = a2->identifier;
      *(_DWORD *)buf = 136446722;
      v129 = "__nw_protocol_disconnected";
      if (!v44) {
        uint64_t v44 = (nw_protocol_identifier *)"invalid";
      }
      v130 = 2082;
      v131 = (nw_protocol *)v44;
      v132 = 2048;
      v133 = a2;
      os_log_type_t v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v126 = 0;
      if (__nwlog_fault(v35, &type, &v126))
      {
        if (type != OS_LOG_TYPE_FAULT)
        {
          if (v126)
          {
            nw_endpoint_t v45 = (char *)__nw_create_backtrace_string();
            id v37 = (os_log_s *)__nwlog_obj();
            id v38 = type;
            uint64_t v46 = os_log_type_enabled(v37, type);
            if (v45)
            {
              if (!v46) {
                goto LABEL_248;
              }
              uint64_t v47 = a2->identifier;
              if (!v47) {
                uint64_t v47 = (nw_protocol_identifier *)"invalid";
              }
              *(_DWORD *)buf = 136446978;
              v129 = "__nw_protocol_disconnected";
              v130 = 2082;
              v131 = (nw_protocol *)v47;
              v132 = 2048;
              v133 = a2;
              v134 = 2082;
              goto LABEL_247;
            }

            if (!v46) {
              goto LABEL_299;
            }
            v124 = a2->identifier;
            if (!v124) {
              v124 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446722;
            v129 = "__nw_protocol_disconnected";
            v130 = 2082;
            v131 = (nw_protocol *)v124;
LABEL_297:
            v132 = 2048;
            v133 = a2;
            v104 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
            goto LABEL_298;
          }

          id v37 = (os_log_s *)__nwlog_obj();
          id v38 = type;
          if (!os_log_type_enabled(v37, type)) {
            goto LABEL_299;
          }
          v122 = a2->identifier;
          if (!v122) {
            v122 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446722;
          v129 = "__nw_protocol_disconnected";
          v130 = 2082;
          v131 = (nw_protocol *)v122;
LABEL_288:
          v132 = 2048;
          v133 = a2;
          v104 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
LABEL_298:
          _os_log_impl(&dword_181A5C000, v37, v38, v104, buf, 0x20u);
          goto LABEL_299;
        }

  __int16 v17 = a2->default_input_handler;
  if (!v17)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
    v102 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v165 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v102, type, &v165))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v103 = (os_log_s *)__nwlog_obj();
        v104 = type[0];
        if (os_log_type_enabled(v103, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          v105 = "%{public}s called with null protocol";
LABEL_282:
          _os_log_impl(&dword_181A5C000, v103, v104, v105, buf, 0xCu);
        }
      }

      else if (v165)
      {
        v119 = (char *)__nw_create_backtrace_string();
        v103 = (os_log_s *)__nwlog_obj();
        v104 = type[0];
        v120 = os_log_type_enabled(v103, type[0]);
        if (v119)
        {
          if (v120)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v119;
            _os_log_impl( &dword_181A5C000,  v103,  v104,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v119);
          goto LABEL_283;
        }

        if (v120)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          v105 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_282;
        }
      }

      else
      {
        v103 = (os_log_s *)__nwlog_obj();
        v104 = type[0];
        if (os_log_type_enabled(v103, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          v105 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_282;
        }
      }
    }

      free(backtrace_string);
    }
  }

    uint64_t v8 = *(_BYTE **)(a1 + 32);
    goto LABEL_30;
  }

  if ((v8[346] & 0x20) == 0)
  {
    if (v8[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v9 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_29;
      }
      os_log_type_t v10 = *(void *)(a1 + 32);
      uint64_t v21 = 136446978;
      uint64_t v22 = "nw_resolver_set_update_handler_block_invoke";
      uint64_t v23 = 2082;
      *(void *)id v24 = v10 + 256;
      *(_WORD *)&v24[8] = 2082;
      *(void *)&v24[10] = nw_endpoint_get_logging_description(v5);
      *(_WORD *)&v24[18] = 2114;
      *(void *)&v24[20] = v7;
      os_log_type_t v11 = "%{public}s [C%{public}s] found cached alternative %{public}s for %{public}@";
      BOOL v12 = v9;
      os_log_type_t v13 = 42;
      goto LABEL_28;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      __int16 v19 = *(_DWORD *)(*(void *)(a1 + 32) + 340LL);
      uint64_t v21 = 136446978;
      uint64_t v22 = "nw_resolver_set_update_handler_block_invoke";
      uint64_t v23 = 1024;
      *(_DWORD *)id v24 = v19;
      *(_WORD *)&v24[4] = 2082;
      *(void *)&v24[6] = nw_endpoint_get_logging_description(v5);
      *(_WORD *)&v24[14] = 2114;
      *(void *)&v24[16] = v7;
      os_log_type_t v11 = "%{public}s [R%u] found cached alternative %{public}s for %{public}@";
      BOOL v12 = v9;
      os_log_type_t v13 = 38;
      goto LABEL_28;
    }

    goto LABEL_29;
  }
}

LABEL_30:
  if (v13)
  {
    id v24 = *(void **)(a1 + 32);
    os_log_type_t v25 = *(void **)(a1 + 40);
    if (!v25) {
      os_log_type_t v25 = (void *)v24[3];
    }
    nw_resolver_update_client_alternative(v24, v25, v13);
  }

  return 1LL;
}

  v41[0] = MEMORY[0x1895F87A8];
  v41[1] = 3221225472LL;
  v41[2] = ___ZL26nw_resolver_insert_addressP22NWConcrete_nw_resolverPU38objcproto27OS_dnssd_getaddrinfo_result8NSObjectPK8sockaddrtPU27objcproto16OS_dispatch_dataS1__block_invoke;
  v41[3] = &__block_descriptor_40_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
  v41[4] = v40;
  nw_resolver_insert_endpoint_locked(v9, address, v41);
LABEL_30:
}

  if (v7) {
    free(v7);
  }
  os_unfair_lock_opaque = 0LL;
LABEL_11:

  return os_unfair_lock_opaque;
}

      free(v18);
      goto LABEL_30;
    }

    __nwlog_obj();
    os_log_type_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if ((__nwlog_fault(v36, &type, &v53) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
          _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }

      else if (v53)
      {
        uint64_t v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v47 = type;
        v48 = os_log_type_enabled(v37, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v46;
            _os_log_impl( &dword_181A5C000,  v37,  v47,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v46);
          goto LABEL_100;
        }

        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
          _os_log_impl(&dword_181A5C000, v37, v47, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v52 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
          _os_log_impl( &dword_181A5C000,  v37,  v52,  "%{public}s xpc_dictionary_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    free(backtrace_string);
    goto LABEL_39;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_new";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = (os_log_s *)__nwlog_obj();
      BOOL v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_new";
        os_log_type_t v13 = "%{public}s called with null parameters";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (!v22)
    {
      os_log_type_t v11 = (os_log_s *)__nwlog_obj();
      BOOL v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_new";
        os_log_type_t v13 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = (os_log_s *)__nwlog_obj();
    BOOL v12 = type;
    uint64_t v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_new";
        os_log_type_t v13 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_new";
      int v26 = 2082;
      os_log_type_t v27 = (uint64_t)backtrace_string;
      uint64_t v20 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  BOOL v6 = a1 + 96;
  if (a1 == -96)
  {
    char v14 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "strict_calloc";
    os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v15);
    if ((_DWORD)result) {
      goto LABEL_42;
    }
    free(v15);
  }

  uint64_t v7 = calloc(1uLL, v6);
  if (v7)
  {
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    char *v7 = 0u;
    *((void *)v7 + 10) = 0LL;
    *((void *)v7 + 11) = 1LL;
    *((void *)v7 + 2) = a3;
    *((void *)v7 + 3) = a4;
    uint64_t v8 = (char *)(v7 + 6);
    *((void *)v7 + 5) = &nw_protocol_ref_counted_handle;
    return (uint64_t)v8;
  }

  char v16 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v25 = "strict_calloc";
  int v26 = 2048;
  os_log_type_t v27 = 1LL;
  int v28 = 2048;
  BOOL v29 = v6;
  __int16 v17 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v17);
  if (!(_DWORD)result)
  {
    free(v17);
    uint64_t v8 = 0LL;
    MEMORY[0x50] = 0LL;
    MEMORY[0x40] = 0u;
    MEMORY[0x30] = 0u;
    MEMORY[0x20] = 0u;
    MEMORY[0x10] = 0u;
    MEMORY[0] = 0u;
    MEMORY[0x58] = 1LL;
    nw_protocol_set_identifier(0LL, a3);
    nw_protocol_set_callbacks(0LL, a4);
    nw_protocol_set_handle(0LL, (uint64_t)&nw_protocol_ref_counted_handle);
    if ((_UNKNOWN *)MEMORY[0x28] == &nw_protocol_ref_counted_handle) {
      return 96LL;
    }
    return (uint64_t)v8;
  }

    os_log_type_t v13 = 0LL;
LABEL_30:

    return v13;
  }

  __nwlog_obj();
  char v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v49 = "strict_calloc";
  v50 = 2048;
  v51 = 1LL;
  int v52 = 2048;
  v53 = (const char *)(v7 + 4);
  id v42 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v42);
  if (!result)
  {
    free(v42);
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

  if ((*(_WORD *)(v7 + 1062) & 0x10) != 0)
  {
    v50 = *(void *)(a1 + 40);
    if (!v50)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
      v63 = (char *)_os_log_send_and_compose_impl();
      v130[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v63, v130, &type))
      {
        if (v130[0] == 17)
        {
          v65 = (os_log_s *)__nwlog_obj();
          v66 = v130[0];
          if (os_log_type_enabled(v65, (os_log_type_t)v130[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s called with null http_authentication";
            goto LABEL_105;
          }
        }

        else if (type)
        {
          v109 = (char *)__nw_create_backtrace_string();
          v65 = (os_log_s *)__nwlog_obj();
          v66 = v130[0];
          v110 = os_log_type_enabled(v65, (os_log_type_t)v130[0]);
          if (v109)
          {
            if (v110)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v109;
              _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s called with null http_authentication, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v109);
          }

          else if (v110)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s called with null http_authentication, no backtrace";
            goto LABEL_105;
          }
        }

        else
        {
          v65 = (os_log_s *)__nwlog_obj();
          v66 = v130[0];
          if (os_log_type_enabled(v65, (os_log_type_t)v130[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s called with null http_authentication, backtrace limit exceeded";
            goto LABEL_105;
          }
        }
      }

      goto LABEL_106;
    }

    v118 = a5;
    v119 = a6;
    v51 = *(void *)(a1 + 40);
    while (1)
    {
      int v52 = *(void **)(v51 + 16);
      if (nw_protocol_http_messaging_identifier::onceToken != -1) {
        dispatch_once(&nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_76181);
      }
      if (nw_protocols_are_equal(v52, nw_protocol_http_messaging_identifier::protocol_identifier)) {
        break;
      }
      v51 = *(void *)(v51 + 32);
      if (!v51)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
        v63 = (char *)_os_log_send_and_compose_impl();
        v130[0] = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        nw_endpoint_t v64 = __nwlog_fault(v63, v130, &type);
        a6 = v119;
        if (v64)
        {
          if (v130[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v65 = (os_log_s *)gLogObj;
            v66 = v130[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130[0])) {
              goto LABEL_106;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s could not find http_messaging";
            goto LABEL_105;
          }

          if (type)
          {
            os_log_type_t v73 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v65 = (os_log_s *)gLogObj;
            v66 = v130[0];
            v74 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130[0]);
            if (v73)
            {
              if (v74)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v73;
                _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s could not find http_messaging, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v73);
              if (!v63) {
                goto LABEL_117;
              }
LABEL_107:
              free(v63);
              goto LABEL_117;
            }

            if (!v74) {
              goto LABEL_106;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s could not find http_messaging, no backtrace";
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v65 = (os_log_s *)gLogObj;
            v66 = v130[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130[0])) {
              goto LABEL_106;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s could not find http_messaging, backtrace limit exceeded";
          }

    if (v12) {
      free(v12);
    }
    goto LABEL_10;
  }

    if (!v6 && a2 == 1 && !v5[32])
    {
      int v26 = 1;
      goto LABEL_50;
    }

    if (v12) {
      free(v12);
    }
    goto LABEL_12;
  }

  id v5 = *(void **)(v3[19] + 48LL);
  if (v5)
  {
    BOOL v6 = v5;
    uint64_t v7 = v6[1];

    uint64_t v8 = (id)g_ip_definition;
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

    if (!is_equal_unsafe) {
      goto LABEL_11;
    }
    if (a2 == 2)
    {
      os_log_type_t v10 = nw_ip_version_4;
    }

    else
    {
      if (a2 != 30)
      {
LABEL_11:

        goto LABEL_12;
      }

      os_log_type_t v10 = nw_ip_version_6;
    }

    nw_ip_options_set_version(*(nw_protocol_options_t *)(v4[19] + 48LL), v10);
    goto LABEL_11;
  }

  return quic_stream_protocol_identifier;
}

    if (v10) {
      free(v10);
    }
    goto LABEL_31;
  }

  id v3 = v1[13];
  if (*(_DWORD *)(v3 + 84) != 1)
  {
    id v5 = *(void **)(v3 + 176);
    if (v5)
    {
      BOOL v6 = (void *)v5[10];
      if (v6)
      {
        if (xpc_array_get_count(v6)) {
          goto LABEL_3;
        }
        id v5 = *(void **)(v2[13] + 176LL);
      }

      uint64_t v7 = (void *)v5[11];
      if (v7)
      {
        if (xpc_array_get_count(v7)) {
          goto LABEL_3;
        }
        id v5 = *(void **)(v2[13] + 176LL);
      }

      uint64_t v8 = (void *)v5[12];
      if (v8)
      {
        nw_protocol_definition_t v4 = xpc_array_get_count(v8) != 0;
        goto LABEL_32;
      }
    }

  if (v12) {
    free(v12);
  }
LABEL_12:
}

    if (!v7) {
      return;
    }
    os_log_type_t v13 = (char *)v7;
    goto LABEL_31;
  }

  if ((handle[294] & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v6 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v27 = "nw_protocol_http_client_bottom_disconnect";
      int v28 = 2082;
      BOOL v29 = (nw_protocol *)(handle + 208);
      BOOL v30 = 2080;
      v31 = " ";
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sdisconnecting output handler",  buf,  0x20u);
    }
  }

  handle[294] |= 0x10u;
  nw_protocol_disconnect(*((void **)handle + 4), (uint64_t)handle);
}

  nw_protocol_remove_instance((uint64_t)a1);
  char v16 = *((void *)a1 + 4);
  if (v16)
  {
    (*(void (**)(uint64_t, char *))(*(void *)(v16 + 24) + 8LL))(v16, a1);
    nw_protocol_set_output_handler((uint64_t)a1, 0LL);
  }

  free(a1);
}

      *os_log_type_t v10 = -1;
    }

  v144 = 0LL;
  v145 = 0LL;
  uint64_t v21 = (_BYTE *)(a1 + 527);
  uint64_t v22 = *(_DWORD *)(a1 + 527);
  if ((v22 & 0x10) != 0)
  {
    if ((v22 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      os_log_type_t v27 = (os_log_s *)gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)&buf[0].sa_len = 136446466;
        *(void *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(void *)&buf[0].sa_data[12] = " ";
        _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_INFO,  "%{public}s%sCreating CONNECT (connect-udp) request for listening",  &buf[0].sa_len,  0x16u);
      }
    }

    int v28 = *(void **)(a1 + 344);
    if (!v28 || (BOOL v29 = v28, v30 = v29[3], v29, !v30))
    {
      if ((*(_BYTE *)(a1 + 529) & 1) != 0) {
        goto LABEL_109;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      os_log_type_t v36 = (os_log_s *)gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_109;
      }
      goto LABEL_102;
    }

    v31 = v30;
    os_log_type_t v32 = [v31 hostname];

    BOOL v33 = v31;
    nw_endpoint_t v34 = [v33 port];

    os_release(v33);
    if (!v32)
    {
      if ((*(_BYTE *)(a1 + 529) & 1) != 0) {
        goto LABEL_109;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      os_log_type_t v36 = (os_log_s *)gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_109;
      }
      goto LABEL_107;
    }

    os_log_type_t v35 = __rev16(v34);
    if (v35 != 443 && v35) {
      asprintf(&v145, "%s:%u");
    }
    else {
      asprintf(&v145, "%s");
    }
    nw_endpoint_t v64 = 0;
    v63 = "connect-udp";
  }

  else
  {
    if ((v22 & 8) == 0)
    {
      if ((v22 & 0x20) == 0)
      {
        if ((v22 & 0x10000) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
          }
          uint64_t v23 = (os_log_s *)gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
          {
            id v24 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
            *(_DWORD *)&buf[0].sa_len = 136446722;
            *(void *)&buf[0].sa_data[2] = a1 + 531;
            *(_WORD *)&buf[0].sa_data[10] = 2080;
            *(void *)&buf[0].sa_data[12] = " ";
            *(_WORD *)&buf[1].sa_data[4] = 2082;
            *(void *)&buf[1].sa_data[6] = v24;
            _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_INFO,  "%{public}s%sCreating CONNECT request for %{public}s",  &buf[0].sa_len,  0x20u);
          }
        }

        os_log_type_t v25 = 0LL;
        int v26 = nw_http_request_method_connect;
        goto LABEL_83;
      }

      if ((v22 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        uint64_t v47 = (os_log_s *)gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          v48 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
          *(_DWORD *)&buf[0].sa_len = 136446722;
          *(void *)&buf[0].sa_data[2] = a1 + 531;
          *(_WORD *)&buf[0].sa_data[10] = 2080;
          *(void *)&buf[0].sa_data[12] = " ";
          *(_WORD *)&buf[1].sa_data[4] = 2082;
          *(void *)&buf[1].sa_data[6] = v48;
          _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_INFO,  "%{public}s%sCreating CONNECT (connect-ip) request for %{public}s",  &buf[0].sa_len,  0x20u);
        }
      }

      v49 = *(void **)(a1 + 344);
      if (v49)
      {
        v50 = v49;
        v51 = v50[3];

        if (v51)
        {
          int v52 = v51;
          v53 = [v52 hostname];

          v54 = v52;
          v55 = [v54 port];

          os_release(v54);
          if (v53)
          {
            v56 = __rev16(v55);
            if (v56 != 443 && v56) {
              asprintf(&v145, "%s:%u");
            }
            else {
              asprintf(&v145, "%s");
            }
            nw_endpoint_t v64 = 0;
            v63 = "connect-ip";
            goto LABEL_113;
          }

          if ((*(_BYTE *)(a1 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
            }
            os_log_type_t v36 = (os_log_s *)gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            {
LABEL_107:
              *(_DWORD *)&buf[0].sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = a1 + 531;
              *(_WORD *)&buf[0].sa_data[10] = 2080;
              *(void *)&buf[0].sa_data[12] = " ";
              v68 = "%{public}s%sProxy hostname not found";
              goto LABEL_108;
            }
          }

  if (v5) {
    free(v5);
  }
  return 0LL;
}

        os_log_type_t v11 = 1LL;
LABEL_101:

        goto LABEL_102;
      }

      if ((nw_endpoint_handler_get_logging_disabled(v13) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v18 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          v100 = nw_endpoint_handler_get_id_string(v13);
          v101 = nw_endpoint_handler_dry_run_string(v13);
          v102 = nw_endpoint_handler_copy_endpoint(v13);
          v103 = nw_endpoint_get_logging_description(v102);
          v104 = nw_endpoint_handler_state_string(v13);
          v105 = nw_endpoint_handler_mode_string(v13);
          v106 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v13);
          *(_DWORD *)buf = 136447746;
          v140 = "nw_endpoint_handler_triggered_agents_updated";
          v141 = 2082;
          v142 = (void *)v100;
          v143 = 2082;
          v144 = v101;
          v145 = 2082;
          v146 = v103;
          v147 = 2082;
          v148 = v104;
          v149 = 2082;
          v150 = v105;
          v151 = 2114;
          v152 = v106;
          _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no inactive agents remaining",  buf,  0x48u);
        }

                goto LABEL_42;
              }

              if (!v80)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v35 = (os_log_s *)(id)gLogObj;
                char v41 = type;
                if (os_log_type_enabled(v35, type))
                {
                  *(_DWORD *)buf = 136446210;
                  __int16 v83 = "nw_pac_resolver_create_with_url";
                  _os_log_impl( &dword_181A5C000,  v35,  v41,  "%{public}s nw_pac_resolver_obj_alloc failed, backtrace limit exceeded",  buf,  0xCu);
                }

                goto LABEL_29;
              }

              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v38 = (os_log_s *)(id)gLogObj;
              uint64_t v39 = type;
              id v40 = os_log_type_enabled(v38, type);
              if (backtrace_string)
              {
                if (v40)
                {
                  *(_DWORD *)buf = 136446466;
                  __int16 v83 = "nw_pac_resolver_create_with_url";
                  v84 = 2082;
                  __int16 v85 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s nw_pac_resolver_obj_alloc failed, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(backtrace_string);
                if (!v34) {
                  goto LABEL_44;
                }
                goto LABEL_43;
              }

              if (v40)
              {
                *(_DWORD *)buf = 136446210;
                __int16 v83 = "nw_pac_resolver_create_with_url";
                _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s nw_pac_resolver_obj_alloc failed, no backtrace",  buf,  0xCu);
              }
            }

LABEL_30:
  if (-[NWEndpoint isMemberOfClass:](self, "isMemberOfClass:", objc_opt_class()))
  {
    -[NWEndpoint txtRecord](self, "txtRecord");
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3) {
      objc_storeStrong((id *)&v3->_txtRecord, v19);
    }
  }

  -[NWEndpoint interface](self, "interface");
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v21 = (void *)[v20 createProtocolBufferObject];
  if (v3) {
    objc_storeStrong((id *)&v3->_interface, v21);
  }

  return v3;
}

  if (v10) {
    free(v10);
  }
  uint64_t v7 = 0LL;
  id v3 = 0LL;
LABEL_12:

  return v3;
}

      free(backtrace_string);
      goto LABEL_39;
    }

    uint64_t v7 = (os_log_s *)__nwlog_obj();
    uint64_t v8 = type[0];
    if (!os_log_type_enabled(v7, type[0])) {
      goto LABEL_39;
    }
    v16.ai_flags = 136446210;
    *(void *)&v16.ai_family = "tcp_listener_set_port";
    os_log_type_t v9 = "%{public}s called with null listener";
LABEL_38:
    _os_log_impl(&dword_181A5C000, v7, v8, v9, (uint8_t *)&v16, 0xCu);
LABEL_39:
    if (v6) {
      free(v6);
    }
    return 22LL;
  }

  if (!a2)
  {
    __nwlog_obj();
    v16.ai_flags = 136446210;
    *(void *)&v16.ai_family = "tcp_listener_set_port";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v15 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      uint64_t v8 = type[0];
      if (!os_log_type_enabled(v7, type[0])) {
        goto LABEL_39;
      }
      v16.ai_flags = 136446210;
      *(void *)&v16.ai_family = "tcp_listener_set_port";
      os_log_type_t v9 = "%{public}s called with null portstr";
      goto LABEL_38;
    }

    if (!v15)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      uint64_t v8 = type[0];
      if (!os_log_type_enabled(v7, type[0])) {
        goto LABEL_39;
      }
      v16.ai_flags = 136446210;
      *(void *)&v16.ai_family = "tcp_listener_set_port";
      os_log_type_t v9 = "%{public}s called with null portstr, backtrace limit exceeded";
      goto LABEL_38;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    uint64_t v8 = type[0];
    os_log_type_t v13 = os_log_type_enabled(v7, type[0]);
    if (backtrace_string)
    {
      if (v13)
      {
        v16.ai_flags = 136446466;
        *(void *)&v16.ai_family = "tcp_listener_set_port";
        LOWORD(v16.ai_protocol) = 2082;
        *(void *)((char *)&v16.ai_protocol + 2) = backtrace_string;
        BOOL v12 = "%{public}s called with null portstr, dumping backtrace:%{public}s";
        goto LABEL_28;
      }

      goto LABEL_29;
    }

    if (!v13) {
      goto LABEL_39;
    }
    v16.ai_flags = 136446210;
    *(void *)&v16.ai_family = "tcp_listener_set_port";
    os_log_type_t v9 = "%{public}s called with null portstr, no backtrace";
    goto LABEL_38;
  }

  if (xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "launchd")) {
    return 22LL;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    memset(&v16.ai_addrlen, 0, 32);
    v16.ai_flags = 0;
    v16.ai_protocol = 6;
    *(void *)&v16.ai_family = 0x100000002LL;
    *(void *)os_log_type_t type = 0LL;
    nw_protocol_definition_t v4 = getaddrinfo(0LL, a2, &v16, (addrinfo **)type);
    if (!(_DWORD)v4)
    {
      xpc_dictionary_set_uint64( *(xpc_object_t *)(a1 + 16),  "port",  *(unsigned __int16 *)(*(void *)(*(void *)type + 32LL) + 2LL));
      if (*(void *)type) {
        freeaddrinfo(*(addrinfo **)type);
      }
    }
  }

  else
  {
    nw_protocol_definition_t v4 = 16LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v4;
}

  return v6;
}

  uint64_t v21 = 0LL;
  if ((has & 8) == 0) {
    goto LABEL_30;
  }
LABEL_15:
  uint64_t v22 = 2654435761LL * self->_multipathService;
  if ((has & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_16:
  uint64_t v23 = 2654435761LL * self->_keepalive;
LABEL_32:
  id v24 = v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10;
  os_log_type_t v25 = v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ -[NWPBEndpoint hash]( self->_localEndpoint,  "hash");
  int v26 = v24 ^ v25 ^ -[NWPBInterface hash](self->_requiredInterface, "hash");
  os_log_type_t v27 = PBRepeatedInt32Hash();
  int v28 = v27 ^ PBRepeatedInt32Hash();
  BOOL v29 = v28 ^ -[NSMutableArray hash](self->_prohibitedInterfaces, "hash");
  BOOL v30 = v29 ^ -[NSMutableArray hash](self->_prohibitedAgents, "hash");
  v31 = v30 ^ -[NSMutableArray hash](self->_requiredAgents, "hash");
  os_log_type_t v32 = v26 ^ v31 ^ -[NSMutableArray hash](self->_preferredAgents, "hash");
  return v32 ^ -[NSData hash](self->_metadata, "hash");
}

    if (*((_BYTE *)v2 + 1537))
    {
      nw_endpoint_t v34 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v35 = *(_DWORD *)(*(void *)&v60[8] + 24LL);
        *(_DWORD *)buf = 136446722;
        v55 = "nw_protocol_http2_transport_process_input";
        v56 = 2082;
        id v57 = a1 + 205;
        v58 = 1024;
        LODWORD(v59) = v35;
        _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s consumed %u bytes on connection",  buf,  0x1Cu);
      }
    }

    BOOL v30 = *(char **)(a1 + 112);
    v45[0] = v3;
    v45[1] = 0x40000000LL;
    v45[2] = ___ZL41nw_protocol_http2_transport_process_inputP27nw_protocol_http2_transport_block_invoke_23;
    v45[3] = &__block_descriptor_tmp_24_37877;
    v45[4] = a1;
    nw_hash_table_apply(v30, (uint64_t)v45);
    v31 = v53[0];
    if (v53[0])
    {
      do
      {
        os_log_type_t v32 = *(void *)(v31 + 32);
        nw_frame_finalize(v31);
        v31 = v32;
      }

      while (v32);
    }

    if (*((_BYTE *)v2 + 1537))
    {
      os_log_type_t v36 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v55 = "nw_protocol_http2_transport_process_input";
        v56 = 2082;
        id v57 = a1 + 205;
        v58 = 1024;
        LODWORD(v59) = v8;
        _os_log_impl(&dword_181A5C000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s processed %u frames", buf, 0x1Cu);
      }
    }

    _Block_object_dispose(v60, 8);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)v60 = 136446466;
  *(void *)&v60[4] = "nw_protocol_http2_transport_process_input";
  *(_WORD *)&v60[12] = 2082;
  *(void *)&v60[14] = a1 + 205;
  id v37 = (char *)_os_log_send_and_compose_impl();
  buf[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (buf[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v38 = (os_log_s *)gLogObj;
    uint64_t v39 = buf[0];
    if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)v60 = 136446466;
      *(void *)&v60[4] = "nw_protocol_http2_transport_process_input";
      *(_WORD *)&v60[12] = 2082;
      *(void *)&v60[14] = a1 + 205;
      id v40 = "%{public}s %{public}s output handler has no get_input_frames callback";
      goto LABEL_53;
    }

    goto LABEL_54;
  }

  if (type == OS_LOG_TYPE_DEFAULT)
  {
    id v38 = (os_log_s *)__nwlog_obj();
    uint64_t v39 = buf[0];
    if (!os_log_type_enabled(v38, (os_log_type_t)buf[0])) {
      goto LABEL_54;
    }
    *(_DWORD *)v60 = 136446466;
    *(void *)&v60[4] = "nw_protocol_http2_transport_process_input";
    *(_WORD *)&v60[12] = 2082;
    *(void *)&v60[14] = a1 + 205;
    id v40 = "%{public}s %{public}s output handler has no get_input_frames callback, backtrace limit exceeded";
    goto LABEL_53;
  }

  char v41 = (char *)__nw_create_backtrace_string();
  id v38 = (os_log_s *)__nwlog_obj();
  uint64_t v39 = buf[0];
  id v42 = os_log_type_enabled(v38, (os_log_type_t)buf[0]);
  if (v41)
  {
    if (v42)
    {
      *(_DWORD *)v60 = 136446722;
      *(void *)&v60[4] = "nw_protocol_http2_transport_process_input";
      *(_WORD *)&v60[12] = 2082;
      *(void *)&v60[14] = a1 + 205;
      *(_WORD *)&v60[22] = 2082;
      os_log_type_t v61 = v41;
      _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s %{public}s output handler has no get_input_frames callback, dumping backtrace:%{public}s",  v60,  0x20u);
    }

    free(v41);
    goto LABEL_54;
  }

  if (v42)
  {
    *(_DWORD *)v60 = 136446466;
    *(void *)&v60[4] = "nw_protocol_http2_transport_process_input";
    *(_WORD *)&v60[12] = 2082;
    *(void *)&v60[14] = a1 + 205;
    id v40 = "%{public}s %{public}s output handler has no get_input_frames callback, no backtrace";
LABEL_53:
    _os_log_impl(&dword_181A5C000, v38, v39, v40, v60, 0x16u);
  }

  return is_equal;
}

    if (!v11)
    {
LABEL_31:
      a3 = 0LL;
      goto LABEL_32;
    }

    free(backtrace_string);
    goto LABEL_39;
  }

  uint64_t v8 = (os_log_s *)__nwlog_obj();
  os_log_type_t v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http1_on_status";
    os_log_type_t v10 = "%{public}s called with null parser";
LABEL_38:
    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
  }

    free(backtrace_string);
    goto LABEL_39;
  }

  if (!*(void *)(a1 + 48))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_http1_on_chunk_complete";
    nw_parameters_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v3 = (os_log_s *)__nwlog_obj();
      nw_protocol_definition_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http1_on_chunk_complete";
        id v5 = "%{public}s called with null http1_connection";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (!v12)
    {
      id v3 = (os_log_s *)__nwlog_obj();
      nw_protocol_definition_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http1_on_chunk_complete";
        id v5 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v3 = (os_log_s *)__nwlog_obj();
    nw_protocol_definition_t v4 = type;
    os_log_type_t v11 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http1_on_chunk_complete";
        id v5 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v15 = "nw_http1_on_chunk_complete";
      char v16 = 2082;
      __int16 v17 = backtrace_string;
      uint64_t v8 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  if (*(void *)(a1 + 64)) {
    nw_parameters_t v1 = 1;
  }
  else {
    nw_parameters_t v1 = gLogDatapath == 0;
  }
  if (v1) {
    return 0LL;
  }
  os_log_type_t v9 = (os_log_s *)__nwlog_obj();
  result = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_http1_on_chunk_complete";
    _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_DEBUG, "%{public}s this is the final chunk of the body", buf, 0xCu);
    return 0LL;
  }

  return result;
}

  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v194 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
      {
        v195 = *(void *)(v6 + 488);
        v196 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
        v197 = *(_DWORD *)(v6 + 860);
        if (v195) {
          LODWORD(v195) = *(_DWORD *)(v195 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
        v638 = 2082;
        *(void *)v639 = v6 + 74;
        *(_WORD *)&v639[8] = 2080;
        *(void *)&v639[10] = " ";
        *(_WORD *)&v639[18] = 1024;
        *(_DWORD *)v640 = v196;
        *(_WORD *)&v640[4] = 1024;
        *(_DWORD *)&v640[6] = v197;
        *(_WORD *)v641 = 1024;
        *(_DWORD *)&v641[2] = v195;
        _os_log_impl( &dword_181A5C000,  v194,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> disposing of output frame, finalizer called with success == false",  buf,  0x32u);
      }
    }
  }

  if ((*((_WORD *)a1 + 102) & 0x100) == 0
    || !g_channel_check_validity
    || g_channel_check_validity(a1, *((void *)a1 + 11)))
  {
    char v16 = (void *)*((void *)a1 + 14);
    if (v16) {
      free(v16);
    }
  }

  nw_frame_reset((uint64_t)a1, 0LL, 0, 0LL, 0LL);
  os_release(a1);
}

        os_log_type_t v13 = 1;
        char v16 = 2;
        __int16 v18 = *(void **)(v8 + 200);
        if (v18)
        {
LABEL_19:
          is_equal |= nw_endpoint_is_equal(v18, *(void **)(a1 + 32), 0LL);
          __int16 v19 = *(void **)(v8 + 208);
          if (v19) {
            goto LABEL_20;
          }
          goto LABEL_31;
        }

  if (v9) {
    free(v9);
  }
  BOOL v6 = 0LL;
LABEL_12:

  return v6;
}

  if (v7) {
    free(v7);
  }
  id v3 = 0LL;
LABEL_12:

  return v3;
}

          goto LABEL_30;
        }
      }
    }
  }

  BOOL v6 = 22LL;
LABEL_6:

  return v6;
}

      free(v12);
      goto LABEL_30;
    }
}

      if (v14) {
        free(v14);
      }
      nw_protocol_definition_t v4 = 0xFFFFFFFFLL;
      BOOL v6 = v12;
      os_log_type_t v11 = __CFADD__((_DWORD)v5, v8);
      id v5 = v5 + v8;
      if (!v11) {
        goto LABEL_6;
      }
LABEL_33:
      pthread_once(v6, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446978;
      v79 = "nw_frame_array_get_frame_count";
      v80 = 2082;
      __int16 v81 = "byte_count";
      v82 = 2048;
      __int16 v83 = v8;
      v84 = 2048;
      __int16 v85 = v5;
      int v26 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v76 = 0;
      if (__nwlog_fault(v26, &type, &v76))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(v6, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v27 = gLogObj;
          int v28 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446978;
            v79 = "nw_frame_array_get_frame_count";
            v80 = 2082;
            __int16 v81 = "byte_count";
            v82 = 2048;
            __int16 v83 = v8;
            v84 = 2048;
            __int16 v85 = v5;
            BOOL v29 = (os_log_s *)v27;
            BOOL v30 = v28;
            v31 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_46:
            _os_log_impl(&dword_181A5C000, v29, v30, v31, buf, 0x2Au);
          }
        }

        else if (v76)
        {
          os_log_type_t v32 = (char *)__nw_create_backtrace_string();
          pthread_once(v6, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v33 = (os_log_s *)gLogObj;
          nw_endpoint_t v34 = type;
          os_log_type_t v35 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v32)
          {
            if (v35)
            {
              *(_DWORD *)buf = 136447234;
              v79 = "nw_frame_array_get_frame_count";
              v80 = 2082;
              __int16 v81 = "byte_count";
              v82 = 2048;
              __int16 v83 = v8;
              v84 = 2048;
              __int16 v85 = v5;
              v86 = 2082;
              __int16 v87 = v32;
              _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(v32);
            goto LABEL_47;
          }

          if (v35)
          {
            *(_DWORD *)buf = 136446978;
            v79 = "nw_frame_array_get_frame_count";
            v80 = 2082;
            __int16 v81 = "byte_count";
            v82 = 2048;
            __int16 v83 = v8;
            v84 = 2048;
            __int16 v85 = v5;
            BOOL v29 = v33;
            BOOL v30 = v34;
            v31 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_46;
          }
        }

        else
        {
          pthread_once(v6, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v36 = gLogObj;
          id v37 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446978;
            v79 = "nw_frame_array_get_frame_count";
            v80 = 2082;
            __int16 v81 = "byte_count";
            v82 = 2048;
            __int16 v83 = v8;
            v84 = 2048;
            __int16 v85 = v5;
            BOOL v29 = (os_log_s *)v36;
            BOOL v30 = v37;
            v31 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_46;
          }
        }
      }

    if (v22) {
      free(v22);
    }
    __int16 v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    __int16 v19 = *(void *)(a1 + 48);
    return v18 < v19;
  }

  os_log_type_t v9 = *(_BYTE **)(a1 + 56);
  if (v9) {
    *os_log_type_t v9 = 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v10 = (os_log_s *)gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    BOOL v12 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 136446466;
    uint64_t v39 = "nw_dispatch_data_to_iovec_partial_block_invoke";
    id v40 = 1024;
    LODWORD(v41) = v12;
    _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s Data had too many fragments for iovec (max %d)",  buf,  0x12u);
    return 0LL;
  }

  return result;
}

      free(backtrace_string);
    }

    if (v10) {
      free(v10);
    }
    goto LABEL_31;
  }

  if ((*((_BYTE *)v3 + 36) & 1) == 0)
  {
    __nwlog_obj();
    os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__dst = 136446210;
      *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_ERROR,  "%{public}s txt_record is not of type dictionary",  __dst,  0xCu);
    }

    goto LABEL_14;
  }

  if ((nw_txt_record_key_is_valid((uint64_t)a2) & 1) == 0)
  {
    __nwlog_obj();
    os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__dst = 136446210;
      *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
      _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_ERROR, "%{public}s invalid key", __dst, 0xCu);
    }

    if (v11) {
      free(v11);
    }
    goto LABEL_12;
  }

  a2->domain = v3->domain;
  a2->label = v3->label;
  *(_OWORD *)a2->activity_uuid = *(_OWORD *)v3->token;
  m_obj = v3->parent.m_obj;
  if (m_obj && !uuid_is_null(m_obj->token)) {
    *(_OWORD *)a2->parent_activity_uuid = *(_OWORD *)v4->parent.m_obj->token;
  }
  *((_BYTE *)a2 + 304) = *((_BYTE *)a2 + 304) & 0xFE | *((_BYTE *)v4 + 140) & 1;
  a2->investigation_identifier = v4->investigation_identifier;
  if (nw_utilities_get_self_bundle_id::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
  }
  BOOL v6 = (unsigned __int8 *)nw_utilities_get_self_bundle_id::bundle_identifier_string;
  if (nw_utilities_get_self_bundle_id::bundle_identifier_string)
  {
    bundle_id = a2->bundle_id;
    uint64_t v8 = 256LL;
    while (1)
    {
      os_log_type_t v9 = *v6;
      *bundle_id = v9;
      if (!v9) {
        break;
      }
      ++bundle_id;
      ++v6;
      if ((unint64_t)--v8 <= 1)
      {
        *bundle_id = 0;
        break;
      }
    }
  }

    if (v9) {
      free(v9);
    }
    BOOL v6 = 0LL;
    goto LABEL_6;
  }

  [v1 redactedDescription];
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  nw_protocol_definition_t v4 = [v3 length];
  if (!v4)
  {
    __nwlog_obj();
    BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_activity_copy_redacted_description";
    LODWORD(v23) = 12;
    uint64_t v22 = buf;
    os_log_type_t v13 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v13);
    if (result) {
      goto LABEL_32;
    }
    free(v13);
  }

  id v5 = (const void *)objc_msgSend(v3, "UTF8String", v22, v23);
  if (v4 == -1LL)
  {
    __nwlog_obj();
    char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "strict_calloc";
    os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v15);
    if (result) {
      goto LABEL_32;
    }
    free(v15);
  }

  BOOL v6 = calloc(1uLL, v4 + 1);
  if (v6)
  {
LABEL_5:
    memcpy(v6, v5, v4);

LABEL_6:
    return (BOOL)v6;
  }

  __nwlog_obj();
  char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v27 = "strict_calloc";
  int v28 = 2048;
  BOOL v29 = 1LL;
  BOOL v30 = 2048;
  v31 = v4 + 1;
  __int16 v17 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
    goto LABEL_5;
  }

    free(backtrace_string);
    goto LABEL_42;
  }

  if (*(void *)a2 == *(void *)a3
    && ((*(_BYTE *)(a3 + 16) ^ *(_BYTE *)(a2 + 16)) & 7) == 0
    && (a4 || *(void *)(a2 + 8) == *(void *)(a3 + 8)))
  {
    uint64_t v8 = 1LL;
    goto LABEL_6;
  }

    int v28 = *(void *)(v8 + 24);
    if (v28)
    {
      BOOL v29 = *(void (**)(uint64_t, uint64_t))(v28 + 24);
      if (v29)
      {
        v29(v8, v25);
LABEL_61:
        uint64_t v47 = 1LL;
        goto LABEL_62;
      }
    }

    __nwlog_obj();
    v86 = *(const char **)(v8 + 16);
    if (!v86) {
      v86 = "invalid";
    }
LABEL_176:
    *(_DWORD *)aBlock = 136446466;
    *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    *(_WORD *)&aBlock[12] = 2082;
    *(void *)&aBlock[14] = v86;
    v106 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v117 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v107 = (os_log_s *)__nwlog_obj();
      v108 = type[0];
      if (!os_log_type_enabled(v107, type[0])) {
        goto LABEL_202;
      }
      v109 = "invalid";
      if (v8 && *(void *)(v8 + 16)) {
        v109 = *(const char **)(v8 + 16);
      }
      *(_DWORD *)aBlock = 136446466;
      *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v109;
      v110 = "%{public}s protocol %{public}s has invalid connect callback";
    }

    else if (v117)
    {
      v111 = (char *)__nw_create_backtrace_string();
      v107 = (os_log_s *)__nwlog_obj();
      v108 = type[0];
      v112 = os_log_type_enabled(v107, type[0]);
      if (v111)
      {
        if (v112)
        {
          v113 = "invalid";
          if (v8 && *(void *)(v8 + 16)) {
            v113 = *(const char **)(v8 + 16);
          }
          *(_DWORD *)aBlock = 136446722;
          *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v113;
          *(_WORD *)&aBlock[22] = 2082;
          v128 = (uint64_t)v111;
          _os_log_impl( &dword_181A5C000,  v107,  v108,  "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s",  aBlock,  0x20u);
        }

        free(v111);
        goto LABEL_202;
      }

      if (!v112)
      {
LABEL_202:
        if (v106) {
          free(v106);
        }
        goto LABEL_61;
      }

      v115 = "invalid";
      if (v8 && *(void *)(v8 + 16)) {
        v115 = *(const char **)(v8 + 16);
      }
      *(_DWORD *)aBlock = 136446466;
      *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v115;
      v110 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
    }

    else
    {
      v107 = (os_log_s *)__nwlog_obj();
      v108 = type[0];
      if (!os_log_type_enabled(v107, type[0])) {
        goto LABEL_202;
      }
      v114 = "invalid";
      if (v8 && *(void *)(v8 + 16)) {
        v114 = *(const char **)(v8 + 16);
      }
      *(_DWORD *)aBlock = 136446466;
      *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v114;
      v110 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v107, v108, v110, aBlock, 0x16u);
    goto LABEL_202;
  }

  id = nw_quic_stream_get_id(v15);
  v31 = id;
  os_log_type_t v32 = (handle[1375] >> 6) & 1;
  if (!gLogDatapath) {
    LOBYTE(v32) = 1;
  }
  if ((id & 2) == 0)
  {
    if ((v32 & 1) == 0)
    {
      __int16 v81 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
      {
        v82 = *((_DWORD *)handle + 320);
        *(_DWORD *)aBlock = 136446978;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = handle + 1289;
        *(_WORD *)&aBlock[22] = 2080;
        v128 = (uint64_t)" ";
        LOWORD(v129) = 1024;
        *(_DWORD *)((char *)&v129 + 2) = v82;
        _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> new incoming flow is bidi-stream, calling our listen handler",  aBlock,  0x26u);
      }
    }

    BOOL v33 = (void (***)(void, nw_endpoint *, nw_parameters *))*((void *)handle + 136);
    nw_endpoint_t v34 = (unsigned __int16)*v7 | (handle[1375] << 16);
    if (v33)
    {
      if ((*v7 & 1) != 0)
      {
        *((void *)handle + 123) = v31;
        handle[1375] = BYTE2(v34);
        char *v7 = v34 | 0x8000;
        (**v33)(v33, a2, a3);
        v48 = (unsigned __int16)*v7;
        v49 = v48 & 0xFFFF7FFF | (handle[1375] << 16);
        char *v7 = v48 & 0x7FFF;
        handle[1375] = BYTE2(v49);
        goto LABEL_61;
      }

      if ((v34 & 0x400000) != 0) {
        goto LABEL_59;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v35 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      os_log_type_t v36 = *((_DWORD *)handle + 320);
      *(_DWORD *)aBlock = 136446978;
      *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = handle + 1289;
      *(_WORD *)&aBlock[22] = 2080;
      v128 = (uint64_t)" ";
      LOWORD(v129) = 1024;
      *(_DWORD *)((char *)&v129 + 2) = v36;
      uint64_t v20 = "%{public}s %{public}s%s<i%u> Rejecting server initiated stream";
    }

    else
    {
      if ((v34 & 0x400000) != 0) {
        goto LABEL_59;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v35 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      uint64_t v46 = *((_DWORD *)handle + 320);
      *(_DWORD *)aBlock = 136446978;
      *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = handle + 1289;
      *(_WORD *)&aBlock[22] = 2080;
      v128 = (uint64_t)" ";
      LOWORD(v129) = 1024;
      *(_DWORD *)((char *)&v129 + 2) = v46;
      uint64_t v20 = "%{public}s %{public}s%s<i%u> No listen handler found for inbound stream";
    }

    uint64_t v21 = (os_log_s *)v35;
    uint64_t v22 = 38;
    goto LABEL_58;
  }

  if ((v32 & 1) == 0)
  {
    __int16 v83 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
    {
      v84 = *((_DWORD *)handle + 320);
      *(_DWORD *)aBlock = 136446978;
      *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = handle + 1289;
      *(_WORD *)&aBlock[22] = 2080;
      v128 = (uint64_t)" ";
      LOWORD(v129) = 1024;
      *(_DWORD *)((char *)&v129 + 2) = v84;
      _os_log_impl( &dword_181A5C000,  v83,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> New incoming flow is uni-stream, opening",  aBlock,  0x26u);
    }
  }

  id v37 = calloc(1uLL, 0x88uLL);
  if (v37)
  {
LABEL_43:
    v37[16] = 0LL;
    *((_OWORD *)v37 + 6) = 0u;
    *((_OWORD *)v37 + 7) = 0u;
    *((_OWORD *)v37 + 4) = 0u;
    *((_OWORD *)v37 + 5) = 0u;
    *((_OWORD *)v37 + 2) = 0u;
    *((_OWORD *)v37 + 3) = 0u;
    *(_OWORD *)id v37 = 0u;
    *((_OWORD *)v37 + 1) = 0u;
    if (gLogDatapath)
    {
      v80 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_http3_uni_stream_create_inbound";
        *(_WORD *)&aBlock[12] = 2048;
        *(void *)&aBlock[14] = v37;
        _os_log_impl(&dword_181A5C000, v80, OS_LOG_TYPE_DEBUG, "%{public}s created uni_stream %p", aBlock, 0x16u);
      }
    }

    *(void *)os_log_type_t type = 0LL;
    v124 = type;
    v125 = 0x2000000000LL;
    v126 = v37;
    *(void *)aBlock = v9;
    *(void *)&aBlock[8] = 0x40000000LL;
    *(void *)&aBlock[16] = ___ZL34nw_http3_uni_stream_create_inboundP17nw_protocol_http3_block_invoke;
    v128 = (uint64_t)&unk_189BC4968;
    v129 = type;
    v37[12] = _Block_copy(aBlock);
    _Block_object_dispose(type, 8);
    v37[2] = &g_http3_uni_stream_protocol_identifier;
    v37[3] = &nw_protocol_http3_uni_stream_get_callbacks(void)::protocol_callbacks;
    v37[5] = v37;
    id v38 = *((_BYTE *)v37 + 131);
    v37[9] = handle;
    v37[13] = 0LL;
    v37[14] = v37 + 13;
    *((_WORD *)v37 + 64) = 0;
    *((_BYTE *)v37 + 131) = v38 & 0xF2 | 8;
    *(_OWORD *)id v37 = *(_OWORD *)handle;
    nw_protocol_set_input_handler((uint64_t)v37, (uint64_t)handle);
    protocol_handler = a1->protocol_handler;
    if (protocol_handler)
    {
      callbacks = protocol_handler->callbacks;
      if (callbacks)
      {
        add_input_handler = (void (*)(nw_protocol *, void *))callbacks->add_input_handler;
        if (add_input_handler)
        {
          add_input_handler(protocol_handler, v37);
LABEL_50:
          id v42 = *((void *)handle + 112);
          v37[10] = v42;
          if (v42) {
            os_log_type_t v43 = (void *)(v42 + 88);
          }
          else {
            os_log_type_t v43 = handle + 904;
          }
          *os_log_type_t v43 = v37 + 10;
          *((void *)handle + 112) = v37;
          v37[11] = handle + 896;
          uint64_t v44 = v37[12];
          nw_endpoint_t v45 = (void *)*((void *)handle + 157);
          v116[0] = v9;
          v116[1] = 0x40000000LL;
          v116[2] = ___ZL42nw_protocol_http3_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke_171;
          v116[3] = &unk_189BC4940;
          v116[4] = v44;
          nw_queue_context_async(v45, v116);
          goto LABEL_61;
        }
      }
    }

    __nwlog_obj();
    os_log_type_t v61 = a1->protocol_handler;
    v62 = "invalid";
    if (v61)
    {
      identifier = v61->identifier;
      if (identifier) {
        v62 = (const char *)identifier;
      }
    }

    *(_DWORD *)aBlock = 136446466;
    *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    *(_WORD *)&aBlock[12] = 2082;
    *(void *)&aBlock[14] = v62;
    nw_endpoint_t v64 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v117 = 0;
    if (__nwlog_fault(v64, type, &v117))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v65 = (os_log_s *)__nwlog_obj();
        v66 = type[0];
        if (!os_log_type_enabled(v65, type[0])) {
          goto LABEL_159;
        }
        v67 = a1->protocol_handler;
        v68 = "invalid";
        if (v67)
        {
          id v69 = v67->identifier;
          if (v69) {
            v68 = (const char *)v69;
          }
        }

        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v68;
        v70 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
        goto LABEL_158;
      }

      if (!v117)
      {
        v65 = (os_log_s *)__nwlog_obj();
        v66 = type[0];
        if (!os_log_type_enabled(v65, type[0])) {
          goto LABEL_159;
        }
        __int16 v87 = a1->protocol_handler;
        v88 = "invalid";
        if (v87)
        {
          __int16 v89 = v87->identifier;
          if (v89) {
            v88 = (const char *)v89;
          }
        }

        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v88;
        v70 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_158;
      }

      os_log_type_t v73 = (char *)__nw_create_backtrace_string();
      v65 = (os_log_s *)__nwlog_obj();
      v66 = type[0];
      v74 = os_log_type_enabled(v65, type[0]);
      if (v73)
      {
        if (v74)
        {
          v75 = a1->protocol_handler;
          v76 = "invalid";
          if (v75)
          {
            char v77 = v75->identifier;
            if (v77) {
              v76 = (const char *)v77;
            }
          }

          *(_DWORD *)aBlock = 136446722;
          *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v76;
          *(_WORD *)&aBlock[22] = 2082;
          v128 = (uint64_t)v73;
          _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s",  aBlock,  0x20u);
        }

        free(v73);
        goto LABEL_159;
      }

      if (v74)
      {
        v101 = a1->protocol_handler;
        v102 = "invalid";
        if (v101)
        {
          v103 = v101->identifier;
          if (v103) {
            v102 = (const char *)v103;
          }
        }

        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v102;
        v70 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
LABEL_158:
        _os_log_impl(&dword_181A5C000, v65, v66, v70, aBlock, 0x16u);
      }
    }

      free(backtrace_string);
      goto LABEL_42;
    }

    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_protocol_http3_add_listen_handler";
    os_log_type_t v11 = "%{public}s called with null protocol";
LABEL_41:
    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
LABEL_42:
    if (v8) {
      free(v8);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_protocol_http3_add_listen_handler";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v21 = "nw_protocol_http3_add_listen_handler";
      os_log_type_t v11 = "%{public}s called with null http3";
      goto LABEL_41;
    }

    if (!v18)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v21 = "nw_protocol_http3_add_listen_handler";
      os_log_type_t v11 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_41;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    os_log_type_t v15 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v21 = "nw_protocol_http3_add_listen_handler";
        uint64_t v22 = 2082;
        uint64_t v23 = backtrace_string;
        char v14 = "%{public}s called with null http3, dumping backtrace:%{public}s";
        goto LABEL_28;
      }

      goto LABEL_29;
    }

    if (!v15) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_protocol_http3_add_listen_handler";
    os_log_type_t v11 = "%{public}s called with null http3, no backtrace";
    goto LABEL_41;
  }

  if (*((void *)handle + 136))
  {
    if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_protocol_definition_t v4 = (os_log_s *)gLogObj;
      result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        BOOL v6 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136446978;
        uint64_t v21 = "nw_protocol_http3_add_listen_handler";
        uint64_t v22 = 2082;
        uint64_t v23 = handle + 1289;
        id v24 = 2080;
        os_log_type_t v25 = " ";
        int v26 = 1024;
        os_log_type_t v27 = v6;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> Already have a listen handler, ignoring add",  buf,  0x26u);
        return 0LL;
      }

      return result;
    }

    return 0LL;
  }

  *((void *)handle + 136) = a2;
  a2->protocol_handler = (nw_protocol *)handle;
  if ((a3 & 1) != 0)
  {
    handle[1375] = (*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16) | 0x10000u) >> 16;
    nw_protocol_remove_instance((uint64_t)handle);
  }

  result = 1LL;
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0 && gLogDatapath)
  {
    char v16 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      __int16 v17 = *((_DWORD *)handle + 320);
      *(_DWORD *)buf = 136447234;
      uint64_t v21 = "nw_protocol_http3_add_listen_handler";
      uint64_t v22 = 2082;
      uint64_t v23 = handle + 1289;
      id v24 = 2080;
      os_log_type_t v25 = " ";
      int v26 = 1024;
      os_log_type_t v27 = v17;
      int v28 = 2048;
      BOOL v29 = a2;
      _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> added protocol listen handler %p",  buf,  0x30u);
    }

    return 1LL;
  }

  return result;
}

        *(_DWORD *)buf = 136446466;
        v95 = "nw_protocol_http3_stream_input_finished";
        v96 = 2082;
        v97 = (char *)v22;
        id v24 = "%{public}s protocol %{public}s has invalid input_finished callback";
LABEL_164:
        _os_log_impl(&dword_181A5C000, v19, v20, v24, buf, 0x16u);
        goto LABEL_165;
      }

      if (v92)
      {
        v67 = (char *)__nw_create_backtrace_string();
        __int16 v19 = (os_log_s *)__nwlog_obj();
        uint64_t v20 = type;
        v68 = os_log_type_enabled(v19, type);
        if (v67)
        {
          if (v68)
          {
            id v69 = a1->default_input_handler;
            v70 = "invalid";
            if (v69)
            {
              os_log_type_t v71 = v69->identifier;
              if (v71) {
                v70 = (const char *)v71;
              }
            }

            *(_DWORD *)buf = 136446722;
            v95 = "nw_protocol_http3_stream_input_finished";
            v96 = 2082;
            v97 = (char *)v70;
            v98 = 2082;
            v99 = v67;
            _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v67);
          if (v18) {
            goto LABEL_166;
          }
          return;
        }

        if (v68)
        {
          v90 = a1->default_input_handler;
          __int16 v85 = "invalid";
          if (v90)
          {
            __int16 v91 = v90->identifier;
            if (v91) {
              __int16 v85 = (const char *)v91;
            }
          }

      free(backtrace_string);
      goto LABEL_39;
    }

    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_socket_reset";
    os_log_type_t v11 = "%{public}s called with null protocol";
LABEL_38:
    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
LABEL_39:
    if (v8) {
      free(v8);
    }
    return 0LL;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_socket_reset";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "nw_socket_reset";
      os_log_type_t v11 = "%{public}s called with null socket_handler";
      goto LABEL_38;
    }

    if (!v16)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "nw_socket_reset";
      os_log_type_t v11 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_38;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    os_log_type_t v15 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v19 = "nw_socket_reset";
        uint64_t v20 = 2082;
        uint64_t v21 = backtrace_string;
        char v14 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
        goto LABEL_28;
      }

      goto LABEL_29;
    }

    if (!v15) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_socket_reset";
    os_log_type_t v11 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_38;
  }

  if ((nw_protocol *)a1[2].identifier != a2) {
    return 0LL;
  }
  nw_socket_cancel_input_source((uint64_t)&a1[1].output_handler, (uint64_t)a2);
  callbacks = a1[3].callbacks;
  if (callbacks)
  {
    nw_queue_cancel_source((uint64_t)a1[3].callbacks, v4);
    a1[3].callbacks = 0LL;
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x800) == 0)
    {
      nw_queue_resume_source((uint64_t)callbacks, v4);
      *(_WORD *)&a1[6].flow_id[13] |= 0x800u;
    }
  }

  BOOL v6 = *(void *)a1[3].flow_id;
  if (v6)
  {
    nw_queue_cancel_source(v6, v4);
    *(void *)a1[3].flow_id = 0LL;
  }

  nw_protocol_socket_cancel((uint64_t)&a1[1].output_handler);
  *(_DWORD *)&a1[4].flow_id[12] = -1;
  HIDWORD(a1[4].identifier) = 6159;
  a1[3].output_handler_context = (void *)0x100000001LL;
  uint64_t v7 = (*(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16)) & 0xFC31C0;
  *(_WORD *)&a1[6].flow_id[13] = *(_WORD *)&a1[6].flow_id[13] & 0x31C0 | 0x20;
  a1[6].flow_id[15] = BYTE2(v7);
  nw_socket_initialize_socket(a1);
  return 1LL;
}

    if (gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v134 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v135 = *(void *)(a1 + 40);
        if (v135) {
          v136 = (const char *)(v135 + 308);
        }
        else {
          v136 = "";
        }
        *(_DWORD *)applier = 136446466;
        *(void *)&applier[4] = "nw_socket_service_writes_block_invoke";
        *(_WORD *)&applier[12] = 2082;
        *(void *)&applier[14] = v136;
        _os_log_impl( &dword_181A5C000,  v134,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Dispatch data too fragmented, making a copy",  applier,  0x16u);
      }
    }

    goto LABEL_30;
  }

  v129 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v129, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(void *)&applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = v24;
  v130 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v130);
  if (!result)
  {
    free(v130);
    os_log_type_t v25 = *(void *)(a1 + 40);
    if (!v25) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }

      goto LABEL_30;
    }

    if (!v27)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = (os_log_s *)(id)gLogObj;
      uint64_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v30 = "nw_path_create_evaluator_for_listener";
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_29;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = (os_log_s *)(id)gLogObj;
    __int16 v18 = type;
    __int16 v19 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v30 = "nw_path_create_evaluator_for_listener";
        _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace",  buf,  0xCu);
      }

      goto LABEL_29;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v30 = "nw_path_create_evaluator_for_listener";
      v31 = 2082;
      os_log_type_t v32 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      goto LABEL_30;
    }

    if (!v61)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v60 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v64 = "nw_path_agent_action";
        _os_log_impl( &dword_181A5C000,  v8,  v60,  "%{public}s nw_path_create_necp_agent_action failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_29;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v58 = type;
    v59 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v64 = "nw_path_agent_action";
        _os_log_impl( &dword_181A5C000,  v8,  v58,  "%{public}s nw_path_create_necp_agent_action failed, no backtrace",  buf,  0xCu);
      }

      goto LABEL_29;
    }

    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      nw_endpoint_t v64 = "nw_path_agent_action";
      v65 = 2082;
      *(void *)v66 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v58,  "%{public}s nw_path_create_necp_agent_action failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      free(v11);
      goto LABEL_30;
    }

    __nwlog_obj();
    BOOL v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v66 = "nw_necp_append_tlv";
    v67 = 2048;
    v68 = (size_t)v6;
    id v69 = 2048;
    v70 = (uint64_t)v9;
    os_log_type_t v71 = 1024;
    *(_DWORD *)BOOL v72 = 1;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&v72[6] = 8;
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    nw_endpoint_t v64 = OS_LOG_TYPE_ERROR;
    v63 = 0;
    if (v64 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      nw_endpoint_t v34 = v64;
      if (os_log_type_enabled(v12, v64))
      {
        *(_DWORD *)buf = 136447234;
        v66 = "nw_necp_append_tlv";
        v67 = 2048;
        v68 = (size_t)v6;
        id v69 = 2048;
        v70 = (uint64_t)v9;
        os_log_type_t v71 = 1024;
        *(_DWORD *)BOOL v72 = 1;
        *(_WORD *)&v72[4] = 1024;
        *(_DWORD *)&v72[6] = 8;
        _os_log_impl( &dword_181A5C000,  v12,  v34,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  buf,  0x2Cu);
      }
    }

    else if (v63)
    {
      char v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v42 = v64;
      os_log_type_t v43 = os_log_type_enabled(v12, v64);
      if (v41)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136447490;
          v66 = "nw_necp_append_tlv";
          v67 = 2048;
          v68 = (size_t)v6;
          id v69 = 2048;
          v70 = (uint64_t)v9;
          os_log_type_t v71 = 1024;
          *(_DWORD *)BOOL v72 = 1;
          *(_WORD *)&v72[4] = 1024;
          *(_DWORD *)&v72[6] = 8;
          *(_WORD *)os_log_type_t v73 = 2082;
          *(void *)&v73[2] = v41;
          _os_log_impl( &dword_181A5C000,  v12,  v42,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
        }

        free(v41);
        goto LABEL_28;
      }

      if (v43)
      {
        *(_DWORD *)buf = 136447234;
        v66 = "nw_necp_append_tlv";
        v67 = 2048;
        v68 = (size_t)v6;
        id v69 = 2048;
        v70 = (uint64_t)v9;
        os_log_type_t v71 = 1024;
        *(_DWORD *)BOOL v72 = 1;
        *(_WORD *)&v72[4] = 1024;
        *(_DWORD *)&v72[6] = 8;
        _os_log_impl( &dword_181A5C000,  v12,  v42,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  buf,  0x2Cu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v46 = v64;
      if (os_log_type_enabled(v12, v64))
      {
        *(_DWORD *)buf = 136447234;
        v66 = "nw_necp_append_tlv";
        v67 = 2048;
        v68 = (size_t)v6;
        id v69 = 2048;
        v70 = (uint64_t)v9;
        os_log_type_t v71 = 1024;
        *(_DWORD *)BOOL v72 = 1;
        *(_WORD *)&v72[4] = 1024;
        *(_DWORD *)&v72[6] = 8;
        _os_log_impl( &dword_181A5C000,  v12,  v46,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  buf,  0x2Cu);
      }
    }

          free(v11);
          goto LABEL_40;
        }

        if (!v13) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v32 = "nw_endpoint_create_with_sock_name";
        BOOL v33 = 1024;
        nw_endpoint_t v34 = v30;
        os_log_type_t v35 = 1024;
        LODWORD(v36[0]) = address[0].sa_len;
        uint64_t v8 = "%{public}s getsockname provided invalid length: len: %u, ss.ss_len: %u, no backtrace";
        uint64_t v20 = (sockaddr *)buf;
        uint64_t v21 = v6;
        uint64_t v22 = v12;
LABEL_33:
        uint64_t v23 = 24;
LABEL_38:
        _os_log_impl(&dword_181A5C000, v21, v22, v8, &v20->sa_len, v23);
        goto LABEL_39;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v6 = (os_log_s *)(id)gLogObj;
      uint64_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v32 = "nw_endpoint_create_with_sock_name";
      BOOL v33 = 1024;
      nw_endpoint_t v34 = v30;
      os_log_type_t v35 = 1024;
      LODWORD(v36[0]) = address[0].sa_len;
      uint64_t v8 = "%{public}s getsockname provided invalid length: len: %u, ss.ss_len: %u, backtrace limit exceeded";
    }

    uint64_t v20 = (sockaddr *)buf;
    uint64_t v21 = v6;
    uint64_t v22 = v7;
    goto LABEL_33;
  }

  nw_parameters_t v1 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v1 != 22 && v1 != 57 && v1 != 102)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    os_log_type_t v32 = "nw_endpoint_create_with_sock_name";
    BOOL v33 = 1024;
    nw_endpoint_t v34 = v1;
    id v5 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v32 = "nw_endpoint_create_with_sock_name";
        BOOL v33 = 1024;
        nw_endpoint_t v34 = v1;
        uint64_t v8 = "%{public}s getsockname failed %{darwin.errno}d";
LABEL_36:
        uint64_t v20 = (sockaddr *)buf;
        uint64_t v21 = v6;
        uint64_t v22 = v10;
LABEL_37:
        uint64_t v23 = 18;
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v32 = "nw_endpoint_create_with_sock_name";
        BOOL v33 = 1024;
        nw_endpoint_t v34 = v1;
        uint64_t v8 = "%{public}s getsockname failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_36;
      }

    if (v11) {
      free(v11);
    }
    nw_protocol_definition_t v4 = 0LL;
    goto LABEL_10;
  }

  nw_protocol_definition_t v4 = calloc(1uLL, 0x20uLL);
  if (v4)
  {
LABEL_3:
    *nw_protocol_definition_t v4 = 0u;
    v4[1] = 0u;
    if (*(void *)a2) {
      *(void *)nw_protocol_definition_t v4 = CFRetain(*(CFTypeRef *)a2);
    }
    id v5 = *(const void **)(a2 + 8);
    if (v5) {
      *((void *)v4 + 1) = CFRetain(v5);
    }
    BOOL v6 = *(const __CFArray **)(a2 + 16);
    if (v6) {
      *((void *)v4 + 2) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x189604DB0], v6);
    }
    uint64_t v7 = *((_BYTE *)v4 + 24) & 0xFE | *(_BYTE *)(a2 + 24) & 1;
    *((_BYTE *)v4 + 24) = v7;
    uint64_t v8 = v7 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 24) >> 1) & 1));
    *((_BYTE *)v4 + 24) = v8;
    *((_BYTE *)v4 + 24) = v8 & 0xFB | *(_BYTE *)(a2 + 24) & 4;
LABEL_10:

    return (BOOL)v4;
  }

  __nwlog_obj();
  char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v23 = "strict_calloc";
  id v24 = 2048;
  os_log_type_t v25 = 1LL;
  int v26 = 2048;
  os_log_type_t v27 = 32LL;
  os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

LABEL_30:
    return (BOOL)v15;
  }

  __nwlog_obj();
  id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v47 = "_strict_strlcpy";
  uint64_t v39 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v39);
  if (!result)
  {
    free(v39);
    goto LABEL_25;
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

        goto LABEL_30;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (os_log_s *)(id)gLogObj;
      os_log_type_t v15 = type;
      char v16 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v16) {
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_http_metadata_set_method_block_invoke";
        os_log_type_t v11 = "%{public}s Setting invalid method, no backtrace";
        __int16 v17 = v9;
        __int16 v18 = v15;
        goto LABEL_28;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "nw_http_metadata_set_method_block_invoke";
        uint64_t v23 = 2082;
        id v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v15,  "%{public}s Setting invalid method, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
LABEL_30:
      if (v8) {
        free(v8);
      }
      BOOL v6 = 0LL;
LABEL_19:

      return v6;
    case 1:
      BOOL v12 = "GET";
      goto LABEL_18;
    case 2:
      BOOL v12 = "HEAD";
      goto LABEL_18;
    case 3:
      BOOL v12 = "POST";
      goto LABEL_18;
    case 4:
      BOOL v12 = "PUT";
      goto LABEL_18;
    case 5:
      BOOL v12 = "DELETE";
      goto LABEL_18;
    case 6:
      BOOL v12 = "CONNECT";
      goto LABEL_18;
    case 7:
      BOOL v12 = "OPTIONS";
      goto LABEL_18;
    case 8:
      BOOL v12 = "TRACE";
      goto LABEL_18;
    case 9:
      BOOL v12 = "PATCH";
      goto LABEL_18;
    case 100:
      BOOL v12 = "CONNECT-UDP";
LABEL_18:
      nw_http_request_set_method(v4, (uint64_t)v12);
      goto LABEL_19;
    default:
      goto LABEL_19;
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

      free(backtrace_string);
    }
  }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v50 = "nw_protocol_http_messaging_remove_input_handler";
    v51 = 2048;
    int v52 = a2;
    os_log_type_t v25 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v26 = (os_log_s *)gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        int v52 = a2;
        int v28 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_72:
        _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0x16u);
        goto LABEL_73;
      }

      goto LABEL_73;
    }

    if (!v47)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v26 = (os_log_s *)gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        int v52 = a2;
        int v28 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
        goto LABEL_72;
      }

      goto LABEL_73;
    }

    BOOL v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v26 = (os_log_s *)gLogObj;
    os_log_type_t v27 = type;
    BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v29)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        int v52 = a2;
        int v28 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
        goto LABEL_72;
      }

      goto LABEL_73;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446722;
      v50 = "nw_protocol_http_messaging_remove_input_handler";
      v51 = 2048;
      int v52 = a2;
      v53 = 2082;
      v54 = v29;
      v31 = "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s";
LABEL_45:
      _os_log_impl(&dword_181A5C000, v26, v27, v31, buf, 0x20u);
      goto LABEL_46;
    }

    goto LABEL_46;
  }

  if (((uint64_t)handle[4].identifier & 0x40) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v50 = "nw_protocol_http_messaging_remove_input_handler";
    v51 = 2048;
    int v52 = a2;
    os_log_type_t v25 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v26 = (os_log_s *)gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        int v52 = a2;
        int v28 = "%{public}s Reentrantly removing default input handler %p";
        goto LABEL_72;
      }

    if (!v7) {
      return;
    }
    os_log_type_t v13 = (char *)v7;
    goto LABEL_31;
  }

  if ((handle[272] & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v6 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v27 = "nw_protocol_http_messaging_disconnect";
      int v28 = 2082;
      BOOL v29 = (nw_protocol *)(handle + 188);
      BOOL v30 = 2080;
      v31 = " ";
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sdisconnecting output handler",  buf,  0x20u);
    }
  }

  handle[272] |= 0x10u;
  nw_protocol_disconnect(*((void **)handle + 4), (uint64_t)handle);
}

    if (v17) {
      free(v17);
    }
    mode = 0;
LABEL_32:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v24 = (id)gLogObj;
    if (mode > 5) {
      os_log_type_t v25 = "unknown-mode";
    }
    else {
      os_log_type_t v25 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v25;
    *(_WORD *)&buf[22] = 2082;
    uint64_t v44 = "flow";
    int v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v26, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v27 = (os_log_s *)(id)gLogObj;
        int v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          if (mode > 5) {
            BOOL v29 = "unknown-mode";
          }
          else {
            BOOL v29 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v29;
          *(_WORD *)&buf[22] = 2082;
          uint64_t v44 = "flow";
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v41)
      {
        BOOL v30 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v27 = (os_log_s *)(id)gLogObj;
        v31 = type;
        os_log_type_t v32 = os_log_type_enabled(v27, type);
        if (v30)
        {
          if (v32)
          {
            if (mode > 5) {
              BOOL v33 = "unknown-mode";
            }
            else {
              BOOL v33 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v33;
            *(_WORD *)&buf[22] = 2082;
            uint64_t v44 = "flow";
            nw_endpoint_t v45 = 2082;
            uint64_t v46 = v30;
            _os_log_impl( &dword_181A5C000,  v27,  v31,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v30);
          if (!v26) {
            goto LABEL_53;
          }
          goto LABEL_52;
        }

        if (v32)
        {
          if (mode > 5) {
            id v37 = "unknown-mode";
          }
          else {
            id v37 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v37;
          *(_WORD *)&buf[22] = 2082;
          uint64_t v44 = "flow";
          _os_log_impl( &dword_181A5C000,  v27,  v31,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v27 = (os_log_s *)(id)gLogObj;
        nw_endpoint_t v34 = type;
        if (os_log_type_enabled(v27, type))
        {
          if (mode > 5) {
            os_log_type_t v35 = "unknown-mode";
          }
          else {
            os_log_type_t v35 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2082;
          uint64_t v44 = "flow";
          _os_log_impl( &dword_181A5C000,  v27,  v34,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v26)
    {
LABEL_53:
      char v14 = 0LL;
      goto LABEL_54;
    }

  if (v9) {
    free(v9);
  }
  uint64_t v7 = *((_WORD *)handle + 194);
LABEL_32:
  if (v7 < 0) {
    return 0LL;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  __int16 v19 = (os_log_s *)gconnectionLogObj;
  result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v21 = *((_DWORD *)handle + 92);
    *(_DWORD *)buf = 136446978;
    v76 = "nw_protocol_http2_add_listen_handler";
    char v77 = 2082;
    v78 = handle + 390;
    v79 = 2080;
    v80 = " ";
    __int16 v81 = 1024;
    v82 = v21;
    _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> already have a listen handler, ignoring add",  buf,  0x26u);
    return 0LL;
  }

  return result;
}

        if (gLogDatapath)
        {
          v62 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            *(void *)&type[4] = "nw_protocol_test_get_output_frames";
            *(_WORD *)&type[12] = 2082;
            *(void *)&type[14] = a1 + 2;
            _os_log_impl( &dword_181A5C000,  v62,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Requesting UINT32_MAX output frame",  type,  0x16u);
          }
        }

        a4 = 0xFFFFFFFFLL;
        goto LABEL_31;
      }

      if (!gLogDatapath) {
        goto LABEL_77;
      }
      char v14 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 2;
      os_log_type_t v15 = "%{public}s %{public}s Failing random request for get_output_frames";
      goto LABEL_148;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
    v48 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v84[0] = 0;
    if (type[0] == 17)
    {
      v49 = (os_log_s *)__nwlog_obj();
      v50 = type[0];
      if (os_log_type_enabled(v49, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
        v51 = "%{public}s called with null test";
        goto LABEL_142;
      }

      goto LABEL_143;
    }

    if (!v84[0])
    {
      v49 = (os_log_s *)__nwlog_obj();
      v50 = type[0];
      if (os_log_type_enabled(v49, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
        v51 = "%{public}s called with null test, backtrace limit exceeded";
        goto LABEL_142;
      }

      goto LABEL_143;
    }

    int v52 = (char *)__nw_create_backtrace_string();
    v49 = (os_log_s *)__nwlog_obj();
    v50 = type[0];
    v55 = os_log_type_enabled(v49, (os_log_type_t)type[0]);
    if (!v52)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
        v51 = "%{public}s called with null test, no backtrace";
        goto LABEL_142;
      }

      goto LABEL_143;
    }

    if (v55)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v52;
      v54 = "%{public}s called with null test, dumping backtrace:%{public}s";
      goto LABEL_115;
    }

    goto LABEL_116;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
  v48 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  v84[0] = 0;
  if (type[0] != 17)
  {
    if (!v84[0])
    {
      v49 = (os_log_s *)__nwlog_obj();
      v50 = type[0];
      if (os_log_type_enabled(v49, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
        v51 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_142;
      }

      goto LABEL_143;
    }

    int v52 = (char *)__nw_create_backtrace_string();
    v49 = (os_log_s *)__nwlog_obj();
    v50 = type[0];
    v53 = os_log_type_enabled(v49, (os_log_type_t)type[0]);
    if (!v52)
    {
      if (v53)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
        v51 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_142;
      }

      goto LABEL_143;
    }

    if (v53)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v52;
      v54 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_115:
      _os_log_impl(&dword_181A5C000, v49, v50, v54, buf, 0x16u);
    }

uint64_t nw_endpoint_flow_should_not_use_path(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[34] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_endpoint_flow_should_not_use_path";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_flow_should_not_use_path";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_endpoint_flow_should_not_use_path";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_flow_should_not_use_path";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_flow_should_not_use_path";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_endpoint_handler_report(void *a1, void *a2, _WORD *a3, void *a4)
{
  __int16 v17 = a1;
  uint64_t v7 = a2;
  id v8 = a4;
  if (v17[30] != 5)
  {
    os_log_type_t v9 = v17;
    os_log_type_t v10 = v9;
    if (a3)
    {
      if ((*((_BYTE *)v9 + 268) & 0x10) == 0 && *a3 == 3)
      {
        unsigned int v11 = (unsigned __int16)a3[1];
        if (v11 <= 0xD && ((1 << v11) & 0x2060) != 0) {
          *((_BYTE *)v9 + 268) |= 0x10u;
        }
      }
    }

    if (v9->fallback_timer)
    {
      if (!nw_endpoint_handler_should_reset_for_fallback(v9))
      {
        uint64_t fallback_timer = (uint64_t)v10->fallback_timer;
        if (fallback_timer)
        {
          nw_queue_cancel_source(fallback_timer, v12);
          v10->uint64_t fallback_timer = 0LL;
        }
      }
    }

    id WeakRetained = objc_loadWeakRetained((id *)&v10->callback_context);
    os_log_type_t v15 = v7 + 30;
    if (v7)
    {
      char v16 = v7;
    }

    else
    {
      os_log_type_t v15 = v17 + 30;
      char v16 = (unsigned int *)v10;
    }

    ((void (*)(unsigned int *, void, void, _WORD *, id, id))v10->report_callback)( v16,  v16[29],  *v15,  a3,  v8,  WeakRetained);
  }
}

void sub_181A8E9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_delta_nanos(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  unsigned int v4 = dword_18C45F3A4;
  if (dword_18C45F3A4) {
    return (a2 - a1) * (unint64_t)time_base / v4;
  }
  mach_timebase_info((mach_timebase_info_t)&time_base);
  unsigned int v4 = dword_18C45F3A4;
  if (dword_18C45F3A4) {
    return (a2 - a1) * (unint64_t)time_base / v4;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_delta_nanos";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_delta_nanos";
        os_log_type_t v9 = "%{public}s nw_init_timebase failed";
LABEL_18:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_delta_nanos";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s nw_init_timebase failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_delta_nanos";
        os_log_type_t v9 = "%{public}s nw_init_timebase failed, no backtrace";
        goto LABEL_18;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_delta_nanos";
        os_log_type_t v9 = "%{public}s nw_init_timebase failed, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
  }

uint64_t nw_endpoint_handler_is_dry_run(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 268) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_endpoint_handler_is_dry_run";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_is_dry_run";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_endpoint_handler_is_dry_run";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_is_dry_run";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_is_dry_run";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_connection_add_timestamp_locked_on_nw_queue(void *a1, _OWORD *a2)
{
  *(void *)&v44[5] = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  unsigned int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        id v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          id v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
          __int16 v43 = 2082;
          *(void *)uint64_t v44 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v25,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_81:
        if (!v17) {
          goto LABEL_27;
        }
LABEL_82:
        free(v17);
        goto LABEL_27;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        id v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v18, v25, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        id v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v18,  v36,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181A8F94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_logging_disabled(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[268] >> 5) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_endpoint_handler_get_logging_disabled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_get_logging_disabled";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_endpoint_handler_get_logging_disabled";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_get_logging_disabled";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_get_logging_disabled";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_endpoint_handler_get_minimize_logging(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (void *)*((void *)v1 + 4);
    if (v3)
    {
      unsigned int v4 = v3;
      uint64_t v5 = (v4[12] >> 38) & 1LL;
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_endpoint_handler_get_minimize_logging";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_endpoint_handler_get_minimize_logging";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_endpoint_handler_get_minimize_logging";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_endpoint_handler_get_minimize_logging";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_endpoint_handler_get_minimize_logging";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_endpoint_handler_get_id_string(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = (char *)v1;
  if (v1)
  {
    uint64_t v3 = v1 + 168;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_endpoint_handler_get_id_string";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_get_id_string";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_endpoint_handler_get_id_string";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_get_id_string";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_get_id_string";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_endpoint_handler_dry_run_string(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    if ((*((_BYTE *)v1 + 268) & 1) != 0) {
      uint64_t v3 = "dry-run ";
    }
    else {
      uint64_t v3 = "";
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_endpoint_handler_dry_run_string";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_dry_run_string";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_endpoint_handler_dry_run_string";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_dry_run_string";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_dry_run_string";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_endpoint_handler_state_string(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[30];
    else {
      unsigned int v4 = off_189BBBBF0[v3];
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_endpoint_handler_state_string";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_endpoint_handler_state_string";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_endpoint_handler_state_string";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_endpoint_handler_state_string";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_endpoint_handler_state_string";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_endpoint_handler_mode_string(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = "path";
    switch(*((_DWORD *)v1 + 29))
    {
      case 0:
        goto LABEL_9;
      case 1:
        uint64_t v3 = "resolver";
        break;
      case 2:
        uint64_t v3 = nw_endpoint_flow_mode_string(v1[31]);
        break;
      case 3:
        uint64_t v3 = "proxy";
        break;
      case 4:
        uint64_t v3 = "fallback";
        break;
      case 5:
        uint64_t v3 = "transform";
        break;
      default:
        uint64_t v3 = "unknown-mode";
        break;
    }

    goto LABEL_9;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_endpoint_handler_mode_string";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_mode_string";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_endpoint_handler_mode_string";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_mode_string";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_mode_string";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_endpoint_handler_copy_current_path(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 28);
    id v3 = *(id *)&v2[16]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2 + 28);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_endpoint_handler_copy_current_path";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_copy_current_path";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_endpoint_handler_copy_current_path";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_copy_current_path";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_endpoint_handler_copy_current_path";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_endpoint_handler_initialize_association(void *a1)
{
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1[7])
  {
    id v3 = nw_context_copy_registered_endpoint(v1[5], v1[3]);
    unsigned int v4 = v2[3];
    v2[3] = v3;

    uint64_t v5 = nw_endpoint_copy_association_with_evaluator(v2[3], v2[4], v2[32]);
    BOOL v6 = v2[7];
    v2[7] = v5;

    uint64_t v7 = v2[7];
    if (v7)
    {
      os_log_type_t v8 = v2[4];
      int v9 = *((_BYTE *)v2 + 268) & 1;
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 3221225472LL;
      v13[2] = __nw_endpoint_handler_initialize_association_block_invoke;
      v13[3] = &unk_189BBBAA8;
      os_log_type_t v10 = v2;
      char v14 = v10;
      nw_association_register_internal(v7, v8, v10, v9, 1, v13);
      id v11 = nw_association_copy_current_path(v2[7], v2[4]);
      os_unfair_lock_lock(v10 + 28);
      os_log_type_t v12 = *(void **)&v10[16]._os_unfair_lock_opaque;
      *(void *)&v10[16]._os_unfair_lock_opaque = v11;

      os_unfair_lock_unlock(v10 + 28);
    }

    *((_BYTE *)v2 + 268) |= 4u;
  }
}

void sub_181A90D80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id nw_context_copy_registered_endpoint(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      if (((_BYTE)v3[17] & 8) == 0) {
        dispatch_assert_queue_V2(v3[1]);
      }
      id v6 = nw_context_copy_registered_endpoint_internal(v3, v5, 0);
      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v24 = "nw_context_copy_registered_endpoint";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          id v24 = "nw_context_copy_registered_endpoint";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null endpoint", buf, 0xCu);
        }

void sub_181A9126C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_context_copy_registered_endpoint_internal(void *a1, void *a2, int a3)
{
  uint64_t v127 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v120 = 136446210;
    *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
    __int16 v87 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v87, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v89 = buf[0];
        if (os_log_type_enabled(v88, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v120 = 136446210;
          *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
          _os_log_impl(&dword_181A5C000, v88, v89, "%{public}s called with null context", v120, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v99 = buf[0];
        BOOL v100 = os_log_type_enabled(v88, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v100)
          {
            *(_DWORD *)v120 = 136446466;
            *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
            *(_WORD *)&v120[12] = 2082;
            *(void *)&v120[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v88,  v99,  "%{public}s called with null context, dumping backtrace:%{public}s",  v120,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_158;
        }

        if (v100)
        {
          *(_DWORD *)v120 = 136446210;
          *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
          _os_log_impl(&dword_181A5C000, v88, v99, "%{public}s called with null context, no backtrace", v120, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v114 = buf[0];
        if (os_log_type_enabled(v88, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v120 = 136446210;
          *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
          _os_log_impl( &dword_181A5C000,  v88,  v114,  "%{public}s called with null context, backtrace limit exceeded",  v120,  0xCu);
        }
      }
    }

LABEL_163:
    if (v91) {
      free(v91);
    }
    goto LABEL_171;
  }

  os_log_type_t v8 = v5;
  int v9 = v8;
  if ((*((_BYTE *)v8 + 136) & 8) == 0) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v8 + 1));
  }

  if (a3) {
    BOOL v10 = nw_context_copy_globals_context(v9);
  }
  else {
    BOOL v10 = nw_context_copy_cache_context(v9);
  }
  uint64_t v5 = (void *)v10;

  id v11 = v7;
  int v12 = [v11 type];

  if (v12 == 2)
  {
    os_log_type_t v13 = (uint64_t *)(v5[3] + 40LL);
  }

  else if (v12 == 1)
  {
    os_log_type_t v13 = (uint64_t *)(v5[3] + 32LL);
  }

  else
  {
    os_log_type_t v13 = (uint64_t *)(v5[3] + 48LL);
  }

  uint64_t v14 = *v13;
  if (!*v13)
  {
    __nwlog_obj();
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v120 = 136446210;
    *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
    v95 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v95, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v97 = buf[0];
        if (os_log_type_enabled(v96, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v120 = 136446210;
          *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
          _os_log_impl(&dword_181A5C000, v96, v97, "%{public}s called with null hash_table", v120, 0xCu);
        }
      }

      else if (type)
      {
        v108 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v109 = buf[0];
        BOOL v110 = os_log_type_enabled(v96, (os_log_type_t)buf[0]);
        if (v108)
        {
          if (v110)
          {
            *(_DWORD *)v120 = 136446466;
            *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
            *(_WORD *)&v120[12] = 2082;
            *(void *)&v120[14] = v108;
            _os_log_impl( &dword_181A5C000,  v96,  v109,  "%{public}s called with null hash_table, dumping backtrace:%{public}s",  v120,  0x16u);
          }

          free(v108);
          goto LABEL_169;
        }

        if (v110)
        {
          *(_DWORD *)v120 = 136446210;
          *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
          _os_log_impl(&dword_181A5C000, v96, v109, "%{public}s called with null hash_table, no backtrace", v120, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v116 = buf[0];
        if (os_log_type_enabled(v96, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v120 = 136446210;
          *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
          _os_log_impl( &dword_181A5C000,  v96,  v116,  "%{public}s called with null hash_table, backtrace limit exceeded",  v120,  0xCu);
        }
      }
    }

      if (v49) {
        free(v49);
      }
      return 0LL;
    }

    if (!v79)
    {
      v50 = (os_log_s *)__nwlog_obj();
      v51 = type;
      if (os_log_type_enabled(v50, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
        goto LABEL_162;
      }

      goto LABEL_163;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v50 = (os_log_s *)__nwlog_obj();
    v51 = type;
    nw_endpoint_t v64 = os_log_type_enabled(v50, type);
    if (!backtrace_string)
    {
      if (v64)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel_protocol, no backtrace";
        goto LABEL_162;
      }

      goto LABEL_163;
    }

    if (v64)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v82 = "nw_channel_connect";
      __int16 v83 = 2082;
      os_log_type_t v84 = backtrace_string;
      v65 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
LABEL_127:
      _os_log_impl(&dword_181A5C000, v50, v51, v65, buf, 0x16u);
    }

  if (v149) {
    free(v149);
  }
LABEL_119:
}

                free(v153);
                goto LABEL_197;
              }

              if (v97)
              {
                *(_DWORD *)buf = 136446210;
                v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl( &dword_181A5C000,  v95,  v96,  "%{public}s nw_protocol_transform_create failed, no backtrace",  buf,  0xCu);
              }

  v148 = *((void *)v42 + 1);
  if (!v148 || !v9) {
    goto LABEL_216;
  }
  v150 = *(NWConcrete_nw_endpoint_handler ***)(v148 + 16);
  v149 = *(NWConcrete_nw_endpoint_handler ***)(v148 + 24);
  if (v150 != v149)
  {
    while (*v150 != v9)
    {
      if (++v150 == v149)
      {
        v150 = v149;
        break;
      }
    }
  }

  if (v150 == v149) {
    goto LABEL_216;
  }
  if (a3 != 3)
  {
    if (a3 == 4)
    {
      if ((v458 | v451) == 1) {
        nw_endpoint_proxy_record_result(v9, 0);
      }
      if (!v453) {
        *((_BYTE *)v42 + 100) |= 2u;
      }
      v171 = *((void *)v42 + 2);
      if (v171)
      {
        v173 = *(NWConcrete_nw_endpoint_handler ***)(v171 + 16);
        v172 = *(NWConcrete_nw_endpoint_handler ***)(v171 + 24);
        if (v173 != v172)
        {
          while (*v173 != v9)
          {
            if (++v173 == v172)
            {
              v173 = *(NWConcrete_nw_endpoint_handler ***)(v171 + 24);
              break;
            }
          }
        }

        if (v173 != v172) {
          goto LABEL_229;
        }
      }

      else
      {
        v174 = nw_array_create();
        v176 = (void *)*((void *)v42 + 2);
        v175 = (uint64_t *)((char *)v42 + 16);
        *v175 = v174;

        v171 = *v175;
        int v9 = v474;
        id v42 = loga;
      }

      nw_array_append(v171, v9);
      if (v458)
      {
        v177 = (nw_error *)*((void *)v42 + 10);
        if (v177)
        {
          error_code = nw_error_get_error_code(v177);
          error_domain = nw_error_get_error_domain(*((nw_error_t *)v42 + 10));
          if (error_code == 65) {
            v180 = (*((unsigned __int8 *)v42 + 97) >> 2) & 1;
          }
          else {
            v180 = 0;
          }
          if (error_code == 64 || error_domain == nw_error_domain_tls) {
            v253 = (*((unsigned __int8 *)v42 + 97) >> 2) & 1;
          }
          else {
            v253 = 0;
          }
          if (v180)
          {
            v254 = *((_BYTE *)v42 + 96);
            *((_BYTE *)v42 + 96) = v254 | 0x10;
            if (!(*((_BYTE *)v42 + 97) & 0x10 | v254 & 6)) {
              goto LABEL_283;
            }
            v66 = (v254 & 2) == 0;
            v255 = HIDWORD(v449);
            if (!v66) {
              v255 = 0;
            }
            if (v255 == 1)
            {
LABEL_283:
              if (!(_DWORD)v449)
              {
                v256 = nw_endpoint_handler_get_minimize_logging(v471);
                v257 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v256)
                {
                  if ((v257 & 1) != 0) {
                    goto LABEL_302;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  v258 = (os_log_s *)(id)gconnectionLogObj;
                  if (os_log_type_enabled(v258, OS_LOG_TYPE_DEBUG))
                  {
                    v432 = nw_endpoint_handler_get_id_string(v471);
                    v433 = nw_endpoint_handler_dry_run_string(v471);
                    v434 = nw_endpoint_handler_copy_endpoint(v471);
                    v435 = nw_endpoint_get_logging_description(v434);
                    v436 = nw_endpoint_handler_state_string(v471);
                    v437 = nw_endpoint_handler_mode_string(v471);
                    v438 = nw_endpoint_handler_copy_current_path(v471);
                    v439 = *((_BYTE *)loga + 97);
                    v440 = nw_endpoint_handler_get_id_string(v474);
                    *(_DWORD *)buf = 136448770;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v441 = "";
                    v483 = (uint64_t)v432;
                    v482 = 2082;
                    if ((v439 & 4) == 0) {
                      v441 = " during establishment";
                    }
                    v484 = 2082;
                    v485 = (uint64_t)v433;
                    v486 = 2082;
                    v487 = v435;
                    v488 = 2082;
                    v489 = v436;
                    v490 = 2082;
                    v491 = v437;
                    v492 = 2114;
                    v493 = v438;
                    v494 = 1024;
                    *(_DWORD *)v495 = error_code;
                    *(_WORD *)&v495[4] = 2082;
                    *(void *)&v495[6] = v441;
                    *(_WORD *)&v495[14] = 2082;
                    *(void *)&v495[16] = v440;
                    *(_WORD *)&v495[24] = 2114;
                    *(void *)&v495[26] = v461;
                    _os_log_impl( &dword_181A5C000,  v258,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy fai led with error %d%{public}s, failing open ([C%{public}s] %{public}@)",  buf,  0x6Cu);
                  }

                  goto LABEL_301;
                }

                if ((v257 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  v258 = (os_log_s *)(id)gconnectionLogObj;
                  if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
                  {
                    v259 = nw_endpoint_handler_get_id_string(v471);
                    v260 = nw_endpoint_handler_dry_run_string(v471);
                    v261 = nw_endpoint_handler_copy_endpoint(v471);
                    v262 = nw_endpoint_get_logging_description(v261);
                    v263 = nw_endpoint_handler_state_string(v471);
                    v264 = nw_endpoint_handler_mode_string(v471);
                    v265 = nw_endpoint_handler_copy_current_path(v471);
                    v266 = *((_BYTE *)loga + 97);
                    v267 = nw_endpoint_handler_get_id_string(v474);
                    *(_DWORD *)buf = 136448770;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v268 = "";
                    v483 = (uint64_t)v259;
                    v482 = 2082;
                    if ((v266 & 4) == 0) {
                      v268 = " during establishment";
                    }
                    v484 = 2082;
                    v485 = (uint64_t)v260;
                    v486 = 2082;
                    v487 = v262;
                    v488 = 2082;
                    v489 = v263;
                    v490 = 2082;
                    v491 = v264;
                    v492 = 2114;
                    v493 = v265;
                    v494 = 1024;
                    *(_DWORD *)v495 = error_code;
                    *(_WORD *)&v495[4] = 2082;
                    *(void *)&v495[6] = v268;
                    *(_WORD *)&v495[14] = 2082;
                    *(void *)&v495[16] = v267;
                    *(_WORD *)&v495[24] = 2114;
                    *(void *)&v495[26] = v461;
                    _os_log_impl( &dword_181A5C000,  v258,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy fai led with error %d%{public}s, failing open ([C%{public}s] %{public}@)",  buf,  0x6Cu);
                  }

      if (v51)
      {
LABEL_164:
        id v42 = (char *)v51;
        goto LABEL_62;
      }

      return;
    case 3:
      if ((v9 & 0x80) != 0) {
        return;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v30 = handle + 284;
      *(_DWORD *)buf = 136446722;
      os_log_type_t v117 = "nw_protocol_http_connect_connected";
      char v118 = 2082;
      v119 = handle + 284;
      v120 = 2080;
      v121 = " ";
      BOOL v31 = (const char *)_os_log_send_and_compose_impl();
      LOBYTE(uu) = 16;
      LOBYTE(v112) = 0;
      if (uu == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v32 = (os_log_s *)gLogObj;
        BOOL v33 = uu;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)uu)) {
          goto LABEL_60;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v117 = "nw_protocol_http_connect_connected";
        char v118 = 2082;
        v119 = v30;
        v120 = 2080;
        v121 = " ";
        id v34 = "%{public}s %{public}s%shttp connect state is failed";
LABEL_58:
        char v39 = v32;
        id v40 = v33;
        char v41 = 32;
        goto LABEL_59;
      }

      if (!(_BYTE)v112)
      {
        id v32 = (os_log_s *)__nwlog_obj();
        BOOL v33 = uu;
        if (!os_log_type_enabled(v32, (os_log_type_t)uu)) {
          goto LABEL_60;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v117 = "nw_protocol_http_connect_connected";
        char v118 = 2082;
        v119 = v30;
        v120 = 2080;
        v121 = " ";
        id v34 = "%{public}s %{public}s%shttp connect state is failed, backtrace limit exceeded";
        goto LABEL_58;
      }

      os_log_type_t v35 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v32 = (os_log_s *)gLogObj;
      BOOL v33 = uu;
      os_log_type_t v36 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)uu);
      if (!v35)
      {
        if (!v36) {
          goto LABEL_60;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v117 = "nw_protocol_http_connect_connected";
        char v118 = 2082;
        v119 = v30;
        v120 = 2080;
        v121 = " ";
        id v34 = "%{public}s %{public}s%shttp connect state is failed, no backtrace";
        goto LABEL_58;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446978;
        os_log_type_t v117 = "nw_protocol_http_connect_connected";
        char v118 = 2082;
        v119 = v30;
        v120 = 2080;
        v121 = " ";
        v122 = 2082;
        v123 = v35;
        _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s %{public}s%shttp connect state is failed, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v35);
      break;
    default:
      return;
  }

  goto LABEL_60;
}

        goto LABEL_164;
      }

      if (v90 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v79 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v95 = "nw_necp_append_tlv";
          _os_log_impl( &dword_181A5C000,  v50,  v79,  "%{public}s called with null beyond, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_163;
      }

      os_log_type_t v63 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v66 = type[0];
      v67 = os_log_type_enabled(v50, type[0]);
      if (!v63)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          v95 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v50, v66, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }

        goto LABEL_163;
      }

      if (v67)
      {
        *(_DWORD *)buf = 136446466;
        v95 = "nw_necp_append_tlv";
        v96 = 2082;
        os_log_type_t v97 = (size_t)v63;
        _os_log_impl( &dword_181A5C000,  v50,  v66,  "%{public}s called with null beyond, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_120;
    }

    goto LABEL_164;
  }

  if (v9 >= v10)
  {
    __nwlog_obj();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v95 = "nw_necp_append_tlv";
    v96 = 2048;
    os_log_type_t v97 = v9;
    v98 = 2048;
    os_log_type_t v99 = v10;
    BOOL v100 = 1024;
    *(_DWORD *)v101 = 4;
    *(_WORD *)&v101[4] = 1024;
    *(_DWORD *)&v101[6] = v4;
    os_log_type_t v13 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v90 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v57 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136447234;
        v95 = "nw_necp_append_tlv";
        v96 = 2048;
        os_log_type_t v97 = v9;
        v98 = 2048;
        os_log_type_t v99 = v10;
        BOOL v100 = 1024;
        *(_DWORD *)v101 = 4;
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)&v101[6] = v4;
        _os_log_impl( &dword_181A5C000,  v14,  v57,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  buf,  0x2Cu);
      }
    }

    else if (v90)
    {
      BOOL v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v72 = type[0];
      os_log_type_t v73 = os_log_type_enabled(v14, type[0]);
      if (v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136447490;
          v95 = "nw_necp_append_tlv";
          v96 = 2048;
          os_log_type_t v97 = v9;
          v98 = 2048;
          os_log_type_t v99 = v10;
          BOOL v100 = 1024;
          *(_DWORD *)v101 = 4;
          *(_WORD *)&v101[4] = 1024;
          *(_DWORD *)&v101[6] = v4;
          *(_WORD *)os_log_type_t v102 = 2082;
          *(void *)&v102[2] = v71;
          _os_log_impl( &dword_181A5C000,  v14,  v72,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
        }

        free(v71);
        goto LABEL_58;
      }

      if (v73)
      {
        *(_DWORD *)buf = 136447234;
        v95 = "nw_necp_append_tlv";
        v96 = 2048;
        os_log_type_t v97 = v9;
        v98 = 2048;
        os_log_type_t v99 = v10;
        BOOL v100 = 1024;
        *(_DWORD *)v101 = 4;
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)&v101[6] = v4;
        _os_log_impl( &dword_181A5C000,  v14,  v72,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  buf,  0x2Cu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v81 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136447234;
        v95 = "nw_necp_append_tlv";
        v96 = 2048;
        os_log_type_t v97 = v9;
        v98 = 2048;
        os_log_type_t v99 = v10;
        BOOL v100 = 1024;
        *(_DWORD *)v101 = 4;
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)&v101[6] = v4;
        _os_log_impl( &dword_181A5C000,  v14,  v81,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  buf,  0x2Cu);
      }
    }

                        if (a2 == a3) {
                          return 213LL;
                        }
                        nw_endpoint_t v64 = *a2;
                        if (v64 == 32)
                        {
                          ++a2;
LABEL_170:
                          if (a2 == a3) {
                            return 212LL;
                          }
                          *(void *)(a1 + 8) = a2;
                          *(void *)(a1 + 16) = llhttp__on_status;
LABEL_172:
                          result = 211LL;
                          if (a2 == a3) {
                            return result;
                          }
                          while (1)
                          {
                            v65 = *a2;
                            if (v65 == 10) {
                              break;
                            }
                            if (v65 == 13)
                            {
                              v74 = *(void *)(a1 + 8);
                              *(void *)(a1 + 8) = 0LL;
                              os_log_type_t v75 = *(void *)(a1 + 88);
                              if (!v75) {
                                goto LABEL_190;
                              }
                              v76 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v75 + 16);
                              if (!v76) {
                                goto LABEL_190;
                              }
                              os_log_type_t v77 = v76(a1, v74, &a2[-v74]);
                              if (!v77) {
                                goto LABEL_190;
                              }
                              v352 = v77;
                              if (v77 == -1)
                              {
                                *(void *)(a1 + 32) = "Span callback error in on_status";
                                v352 = 24;
                              }

                              result = 0LL;
                              *(_DWORD *)(a1 + 24) = v352;
                              *(void *)(a1 + 40) = a2 + 1;
                              *(void *)(a1 + 56) = 97LL;
                              return result;
                            }

                            if (++a2 == a3) {
                              return result;
                            }
                          }

                          v66 = *(void *)(a1 + 8);
                          *(void *)(a1 + 8) = 0LL;
                          v67 = *(void *)(a1 + 88);
                          if (v67)
                          {
                            os_log_type_t v68 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v67 + 16);
                            if (v68)
                            {
                              id v69 = v68(a1, v66, &a2[-v66]);
                              if (v69)
                              {
                                v351 = v69;
                                if (v69 == -1)
                                {
                                  *(void *)(a1 + 32) = "Span callback error in on_status";
                                  v351 = 24;
                                }

                                result = 0LL;
                                *(_DWORD *)(a1 + 24) = v351;
                                *(void *)(a1 + 40) = a2 + 1;
                                *(void *)(a1 + 56) = 210LL;
                                return result;
                              }
                            }
                          }

                          ++a2;
LABEL_181:
                          if ((*(_WORD *)(a1 + 78) & 0x100) == 0)
                          {
                            result = 0LL;
                            *(_DWORD *)(a1 + 24) = 25;
                            os_log_type_t v8 = "Missing expected CR after response line";
                            goto LABEL_2272;
                          }
                        }

                        else
                        {
                          if (v64 == 13)
                          {
LABEL_190:
                            ++a2;
LABEL_2361:
                            while (a2 != a3)
                            {
                              v638 = *a2;
                              if (v638 != 13)
                              {
                                if (v638 == 10)
                                {
                                  ++a2;
                                  goto LABEL_182;
                                }

                                if ((*(_WORD *)(a1 + 78) & 0x40) != 0) {
                                  goto LABEL_182;
                                }
LABEL_1773:
                                result = 0LL;
                                *(_DWORD *)(a1 + 24) = 2;
                                os_log_type_t v8 = "Expected LF after CR";
                                goto LABEL_2272;
                              }

                v106 = *v7++;
                v105 = v106;
                v19 += (unint64_t)(v106 & 0x7F) << v14;
                v14 += 7;
              }

              while ((v106 & 0x80) != 0);
              if (v14 >= 0x40)
              {
                v146 = 3621;
                if (v19 > -1 || v105 > 1) {
                  v148 = v10;
                }
                else {
                  v148 = v7;
                }
                v149 = 3621;
                goto LABEL_285;
              }

              v161 = 3621;
              goto LABEL_348;
            }

              if (v54) {
                free(v54);
              }
              BOOL v10 = 0LL;
              goto LABEL_81;
            }
          }

          else
          {
            id v32 = 0LL;
          }

          BOOL v33 = nw_array_create();
          goto LABEL_60;
        }

        __nwlog_obj();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        v54 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v90 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v66 = type;
          if (os_log_type_enabled(v55, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl(&dword_181A5C000, v55, v66, "%{public}s Should have removed old result", buf, 0xCu);
          }

          goto LABEL_197;
        }

        if (!v90)
        {
          __nwlog_obj();
          v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          __int16 v87 = type;
          if (os_log_type_enabled(v55, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl( &dword_181A5C000,  v55,  v87,  "%{public}s Should have removed old result, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_197;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v77 = type;
        os_log_type_t v78 = os_log_type_enabled(v55, type);
        if (!backtrace_string)
        {
          if (v78)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl( &dword_181A5C000,  v55,  v77,  "%{public}s Should have removed old result, no backtrace",  buf,  0xCu);
          }

          goto LABEL_197;
        }

        if (v78)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          v94 = 2082;
          *(void *)v95 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v55,  v77,  "%{public}s Should have removed old result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

          *(_DWORD *)buf = 136446466;
          v95 = "nw_protocol_http3_stream_input_finished";
          v96 = 2082;
          os_log_type_t v97 = (char *)v85;
          id v24 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
          goto LABEL_164;
        }

        goto LABEL_165;
      }

      int64_t v19 = (os_log_s *)__nwlog_obj();
      uint64_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_165;
      }
      v88 = a1->default_input_handler;
      v76 = "invalid";
      if (v88)
      {
        os_log_type_t v89 = v88->identifier;
        if (v89) {
          v76 = (const char *)v89;
        }
      }

    free(v81);
    goto LABEL_164;
  }

  *int64_t v19 = 13;
  *(_DWORD *)(v19 + 1) = v80;
  if (v79 != -1) {
    memcpy(v19 + 5, v14, v80);
  }
  v19 += v80 + 5;
  if ((v173 & 1) != 0) {
    goto LABEL_186;
  }
LABEL_166:
  id v92 = strlen(v15);
  if (!v19)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v179 = "nw_necp_append_tlv";
    v138 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v176 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v139 = (os_log_s *)__nwlog_obj();
      v140 = type;
      if (!os_log_type_enabled(v139, type)) {
        goto LABEL_332;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v141 = "%{public}s called with null tlv_start";
    }

    else if (v176)
    {
      v154 = (char *)__nw_create_backtrace_string();
      v139 = (os_log_s *)__nwlog_obj();
      v140 = type;
      v155 = os_log_type_enabled(v139, type);
      if (v154)
      {
        if (v155)
        {
          *(_DWORD *)buf = 136446466;
          v179 = "nw_necp_append_tlv";
          v180 = 2082;
          *(void *)v181 = v154;
          _os_log_impl( &dword_181A5C000,  v139,  v140,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v154);
        goto LABEL_332;
      }

      if (!v155) {
        goto LABEL_332;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v141 = "%{public}s called with null tlv_start, no backtrace";
    }

    else
    {
      v139 = (os_log_s *)__nwlog_obj();
      v140 = type;
      if (!os_log_type_enabled(v139, type)) {
        goto LABEL_332;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v141 = "%{public}s called with null tlv_start, backtrace limit exceeded";
    }

    v164 = v139;
    v165 = v140;
    v166 = 12;
    goto LABEL_331;
  }

  os_log_type_t v93 = (v92 + 1);
  if (v19 >= v36)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    v179 = "nw_necp_append_tlv";
    v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v36;
    *(_WORD *)&v182[8] = 1024;
    *(_DWORD *)&v182[10] = 12;
    *(_WORD *)&v182[14] = 1024;
    *(_DWORD *)&v182[16] = v93;
    v138 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v176 = 0;
    if (__nwlog_fault(v138, &type, &v176))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v144 = (os_log_s *)__nwlog_obj();
        v145 = type;
        if (os_log_type_enabled(v144, type))
        {
          *(_DWORD *)buf = 136447234;
          v179 = "nw_necp_append_tlv";
          v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v175;
          *(_WORD *)&v182[8] = 1024;
          *(_DWORD *)&v182[10] = 12;
          *(_WORD *)&v182[14] = 1024;
          *(_DWORD *)&v182[16] = v93;
          v141 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
LABEL_302:
          v164 = v144;
          v165 = v145;
LABEL_303:
          v166 = 44;
LABEL_331:
          _os_log_impl(&dword_181A5C000, v164, v165, v141, buf, v166);
        }
      }

      else if (v176)
      {
        v160 = (char *)__nw_create_backtrace_string();
        v161 = (os_log_s *)__nwlog_obj();
        v162 = type;
        v163 = os_log_type_enabled(v161, type);
        if (v160)
        {
          if (v163)
          {
            *(_DWORD *)buf = 136447490;
            v179 = "nw_necp_append_tlv";
            v180 = 2048;
            *(void *)v181 = v19;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v175;
            *(_WORD *)&v182[8] = 1024;
            *(_DWORD *)&v182[10] = 12;
            *(_WORD *)&v182[14] = 1024;
            *(_DWORD *)&v182[16] = v93;
            *(_WORD *)&v182[20] = 2082;
            *(void *)&v182[22] = v160;
            _os_log_impl( &dword_181A5C000,  v161,  v162,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
          }

          free(v160);
          goto LABEL_332;
        }

        if (v163)
        {
          *(_DWORD *)buf = 136447234;
          v179 = "nw_necp_append_tlv";
          v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v175;
          *(_WORD *)&v182[8] = 1024;
          *(_DWORD *)&v182[10] = 12;
          *(_WORD *)&v182[14] = 1024;
          *(_DWORD *)&v182[16] = v93;
          v141 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
          v164 = v161;
          v165 = v162;
          goto LABEL_303;
        }
      }

      else
      {
        v144 = (os_log_s *)__nwlog_obj();
        v145 = type;
        if (os_log_type_enabled(v144, type))
        {
          *(_DWORD *)buf = 136447234;
          v179 = "nw_necp_append_tlv";
          v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v175;
          *(_WORD *)&v182[8] = 1024;
          *(_DWORD *)&v182[10] = 12;
          *(_WORD *)&v182[14] = 1024;
          *(_DWORD *)&v182[16] = v93;
          v141 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
          goto LABEL_302;
        }
      }
    }

    free(backtrace_string);
    goto LABEL_207;
  }

  uint64_t v5 = &qword_18C45F000;
  if ((*((__int16 *)handle + 194) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    __int16 v81 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v82 = *((_DWORD *)handle + 92);
      *(_DWORD *)buf = 136447234;
      v106 = "nw_protocol_http2_remove_input_handler";
      os_log_type_t v107 = 2082;
      v108 = handle + 390;
      os_log_type_t v109 = 2080;
      BOOL v110 = " ";
      v111 = 1024;
      os_log_type_t v112 = v82;
      BOOL v113 = 2048;
      *(void *)os_log_type_t v114 = a2;
      _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called with input_protocol %p",  buf,  0x30u);
    }
  }

  id v6 = (char *)a1->handle;
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v106 = "nw_http2_remove_input_handler";
    os_log_type_t v77 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      v79 = type;
      if (!os_log_type_enabled(v78, type)) {
        goto LABEL_214;
      }
      *(_DWORD *)buf = 136446210;
      v106 = "nw_http2_remove_input_handler";
      os_log_type_t v80 = "%{public}s called with null http2";
      goto LABEL_213;
    }

    if (!v103)
    {
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      v79 = type;
      if (!os_log_type_enabled(v78, type)) {
        goto LABEL_214;
      }
      *(_DWORD *)buf = 136446210;
      v106 = "nw_http2_remove_input_handler";
      os_log_type_t v80 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_213;
    }

    v90 = (char *)__nw_create_backtrace_string();
    os_log_type_t v78 = (os_log_s *)__nwlog_obj();
    v79 = type;
    __int16 v91 = os_log_type_enabled(v78, type);
    if (!v90)
    {
      if (!v91) {
        goto LABEL_214;
      }
      *(_DWORD *)buf = 136446210;
      v106 = "nw_http2_remove_input_handler";
      os_log_type_t v80 = "%{public}s called with null http2, no backtrace";
      goto LABEL_213;
    }

    if (v91)
    {
      *(_DWORD *)buf = 136446466;
      v106 = "nw_http2_remove_input_handler";
      os_log_type_t v107 = 2082;
      v108 = v90;
      _os_log_impl( &dword_181A5C000,  v78,  v79,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v90);
LABEL_214:
    if (!v77) {
      goto LABEL_20;
    }
    goto LABEL_215;
  }

  if (!*((void *)handle + 19))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v106 = "nw_http2_remove_input_handler";
    os_log_type_t v77 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      v79 = type;
      if (!os_log_type_enabled(v78, type)) {
        goto LABEL_214;
      }
      *(_DWORD *)buf = 136446210;
      v106 = "nw_http2_remove_input_handler";
      os_log_type_t v80 = "%{public}s called with null table";
      goto LABEL_213;
    }

    if (!v103)
    {
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      v79 = type;
      if (!os_log_type_enabled(v78, type)) {
        goto LABEL_214;
      }
      *(_DWORD *)buf = 136446210;
      v106 = "nw_http2_remove_input_handler";
      os_log_type_t v80 = "%{public}s called with null table, backtrace limit exceeded";
      goto LABEL_213;
    }

    id v92 = (char *)__nw_create_backtrace_string();
    os_log_type_t v78 = (os_log_s *)__nwlog_obj();
    v79 = type;
    os_log_type_t v93 = os_log_type_enabled(v78, type);
    if (v92)
    {
      if (v93)
      {
        *(_DWORD *)buf = 136446466;
        v106 = "nw_http2_remove_input_handler";
        os_log_type_t v107 = 2082;
        v108 = v92;
        _os_log_impl( &dword_181A5C000,  v78,  v79,  "%{public}s called with null table, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v92);
      if (!v77) {
        goto LABEL_20;
      }
LABEL_215:
      free(v77);
      goto LABEL_20;
    }

    if (v93)
    {
      *(_DWORD *)buf = 136446210;
      v106 = "nw_http2_remove_input_handler";
      os_log_type_t v80 = "%{public}s called with null table, no backtrace";
LABEL_213:
      _os_log_impl(&dword_181A5C000, v78, v79, v80, buf, 0xCu);
      goto LABEL_214;
    }

    goto LABEL_214;
  }

  if ((*((__int16 *)v6 + 194) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    __int16 v83 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v84 = *((_DWORD *)v6 + 92);
      *(_DWORD *)buf = 136446978;
      v106 = "nw_http2_remove_input_handler";
      os_log_type_t v107 = 2082;
      v108 = v6 + 390;
      os_log_type_t v109 = 2080;
      BOOL v110 = " ";
      v111 = 1024;
      os_log_type_t v112 = v84;
      _os_log_impl(&dword_181A5C000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }

  output_handler_context = a2->output_handler_context;
  if (output_handler_context)
  {
    os_log_type_t v8 = output_handler_context[4];
    if (v8)
    {
      nw_http_transaction_metadata_mark_end(*(void **)(v8 + 96));
      int v9 = *(unsigned __int16 *)(v8 + 188) | (*(unsigned __int8 *)(v8 + 190) << 16);
      BOOL v10 = *(_WORD *)(v8 + 188) & 0xFFFB | (*(unsigned __int8 *)(v8 + 190) << 16);
      *(_WORD *)(v8 + 188) &= ~4u;
      *(_BYTE *)(v8 + 190) = BYTE2(v10);
      if ((v9 & 1) != 0 || *(_DWORD *)(v8 + 176) != -1)
      {
        nw_http2_stream_close((uint64_t)v6, v8);
        goto LABEL_36;
      }

      if ((v9 & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v22 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          id v24 = *(_DWORD *)(v8 + 176);
          id v23 = *(_DWORD *)(v8 + 180);
          *(_DWORD *)buf = 136447234;
          v106 = "nw_http2_remove_input_handler";
          os_log_type_t v107 = 2082;
          v108 = (char *)(v8 + 191);
          os_log_type_t v109 = 2080;
          BOOL v110 = " ";
          v111 = 1024;
          os_log_type_t v112 = v23;
          BOOL v113 = 1024;
          *(_DWORD *)os_log_type_t v114 = v24;
          uint64_t v18 = "%{public}s %{public}s%s<i%u:s%d> not closing already closed stream";
          int64_t v19 = (os_log_s *)v22;
          uint64_t v20 = OS_LOG_TYPE_DEBUG;
          dispatch_time_t v21 = 44;
          goto LABEL_35;
        }
      }
    }

    else if ((*((__int16 *)v6 + 194) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v16 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v17 = *((_DWORD *)v6 + 92);
        *(_DWORD *)buf = 136446978;
        v106 = "nw_http2_remove_input_handler";
        os_log_type_t v107 = 2082;
        v108 = v6 + 390;
        os_log_type_t v109 = 2080;
        BOOL v110 = " ";
        v111 = 1024;
        os_log_type_t v112 = v17;
        uint64_t v18 = "%{public}s %{public}s%s<i%u> stream not found as extra";
        int64_t v19 = (os_log_s *)v16;
        uint64_t v20 = OS_LOG_TYPE_ERROR;
        dispatch_time_t v21 = 38;
LABEL_35:
        _os_log_impl(&dword_181A5C000, v19, v20, v18, buf, v21);
      }
    }

    free(backtrace_string);
    goto LABEL_210;
  }

  v59 = (os_log_s *)__nwlog_obj();
  v60 = type;
  if (os_log_type_enabled(v59, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v93 = "__nw_protocol_finalize_output_frames";
    os_log_type_t v61 = "%{public}s called with null protocol";
    goto LABEL_209;
  }

LABEL_169:
    if (v95) {
      free(v95);
    }
LABEL_171:

LABEL_172:
    id v30 = 0LL;
    goto LABEL_57;
  }

  os_log_type_t v15 = v5;
  BOOL v16 = v15;
  if ((v15[17] & 7) != 0)
  {
    if (*(void *)(v15[3] + 56LL)) {
      goto LABEL_28;
    }
    *(void *)v120 = MEMORY[0x1895F87A8];
    *(void *)&v120[8] = 3221225472LL;
    *(void *)&v120[16] = ___ZL28nw_context_start_purge_timerP21NWConcrete_nw_context_block_invoke;
    v121 = (const char *)&unk_189BC93A0;
    os_log_type_t v17 = v15;
    v122[0] = v17;
    *(void *)(v16[3] + 56LL) = nw_queue_context_create_source(v17, 2, 3, 0, v120, 0LL);
    uint64_t v18 = *(void *)(v16[3] + 56LL);
    if (v18)
    {
      int64_t v19 = v17[13];
      if (!v19)
      {
        int64_t v19 = 1000 * networkd_settings_get_int64_with_default((const char *)nw_setting_context_purge_delay, 30LL);
        uint64_t v18 = *(void *)(v16[3] + 56LL);
      }

      uint64_t v20 = 1000000 * v19;
      dispatch_time_t v21 = dispatch_time(0x8000000000000000LL, 1000000 * v19);
      nw_queue_set_timer_values(v18, v21, v20, v20);
      nw_queue_activate_source(*(void *)(v16[3] + 56LL), v22);
      goto LABEL_27;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v124 = "nw_context_start_purge_timer";
    id v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v118 = 0;
    if (__nwlog_fault(v24, &type, &v118))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v124 = "nw_context_start_purge_timer";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s nw_queue_context_create_source failed", buf, 0xCu);
        }
      }

      else if (v118)
      {
        v65 = __nw_create_backtrace_string();
        if (v65)
        {
          v66 = (char *)v65;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v67 = (os_log_s *)(id)gLogObj;
          os_log_type_t v68 = type;
          if (os_log_type_enabled(v67, type))
          {
            *(_DWORD *)buf = 136446466;
            v124 = "nw_context_start_purge_timer";
            __int16 v125 = 2082;
            v126 = v66;
            _os_log_impl( &dword_181A5C000,  v67,  v68,  "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v66);
          if (!v24) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }

        __nwlog_obj();
        __int16 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v84 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v124 = "nw_context_start_purge_timer";
          _os_log_impl( &dword_181A5C000,  v25,  v84,  "%{public}s nw_queue_context_create_source failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v77 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v124 = "nw_context_start_purge_timer";
          _os_log_impl( &dword_181A5C000,  v25,  v77,  "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v24)
    {
LABEL_27:

      goto LABEL_28;
    }

              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              if (!v78)
              {
LABEL_182:
                os_log_type_t v99 = 0LL;
LABEL_183:

                goto LABEL_184;
              }

    if (v53) {
      free(v53);
    }
    uint64_t v7 = 0LL;
    id v6 = 1;
    goto LABEL_19;
  }

  output_handler_context = (char *)a2->output_handler_context;
  id v6 = output_handler_context == 0LL;
  if (output_handler_context)
  {
    uint64_t v7 = output_handler_context + 32;
    output_handler_context[153] |= 8u;
    callbacks = a2->callbacks;
    if (!callbacks) {
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    callbacks = a2->callbacks;
    if (!callbacks) {
      goto LABEL_19;
    }
  }

  connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
  if (connected)
  {
    BOOL v10 = a2->handle;
    if (v10 == &nw_protocol_ref_counted_handle)
    {
      id v11 = a2[1].callbacks;
      if (v11) {
        a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v11->add_input_handler + 1);
      }
    }

    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      int v12 = a1[1].callbacks;
      if (v12) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v12->add_input_handler + 1);
      }
      connected(a2, a1);
      if (a1->handle == &nw_protocol_ref_counted_handle)
      {
        id v24 = a1[1].callbacks;
        if (v24)
        {
          __int16 v25 = (nw_protocol_callbacks *)((char *)v24 - 1);
          a1[1].callbacks = v25;
          if (!v25)
          {
            os_log_type_t v26 = *(void (***)(void))a1[1].flow_id;
            if (v26)
            {
              *(void *)a1[1].flow_id = 0LL;
              v26[2](v26);
              _Block_release(v26);
            }

            if ((a1[1].flow_id[8] & 1) != 0)
            {
              uint64_t v27 = *(const void **)a1[1].flow_id;
              if (v27) {
                _Block_release(v27);
              }
            }

            free(a1);
          }
        }
      }
    }

    else
    {
      connected(a2, a1);
    }

    if (v10 == &nw_protocol_ref_counted_handle && v4->handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v28 = v4[1].callbacks;
      if (v28)
      {
        uint64_t v29 = (nw_protocol_callbacks *)((char *)v28 - 1);
        v4[1].callbacks = v29;
        if (!v29)
        {
          id v30 = *(void (***)(void))v4[1].flow_id;
          if (v30)
          {
            *(void *)v4[1].flow_id = 0LL;
            v30[2](v30);
            _Block_release(v30);
          }

          if ((v4[1].flow_id[8] & 1) != 0)
          {
            BOOL v31 = *(const void **)v4[1].flow_id;
            if (v31) {
              _Block_release(v31);
            }
          }

          free(v4);
        }
      }
    }
  }

        free(backtrace_string);
        goto LABEL_113;
      }

      if (!v92) {
        goto LABEL_113;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_get_output_frames";
      uint64_t v28 = "%{public}s called with null channel_protocol, no backtrace";
    }

    else
    {
      __int16 v85 = (os_log_s *)__nwlog_obj();
      v86 = type[0];
      if (!os_log_type_enabled(v85, type[0])) {
        goto LABEL_113;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_get_output_frames";
      uint64_t v28 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
    }

          if (v58) {
            free(v58);
          }
          int v12 = 0LL;
          if (handle == &nw_protocol_ref_counted_handle)
          {
LABEL_14:
            if (a2->handle == &nw_protocol_ref_counted_handle)
            {
              BOOL v33 = a2[1].callbacks;
              if (v33)
              {
                id v34 = (nw_protocol_callbacks *)((char *)v33 - 1);
                a2[1].callbacks = v34;
                if (!v34)
                {
                  os_log_type_t v35 = *(void (***)(void))a2[1].flow_id;
                  if (v35)
                  {
                    *(void *)a2[1].flow_id = 0LL;
                    v35[2](v35);
                    _Block_release(v35);
                  }

                  if ((a2[1].flow_id[8] & 1) != 0)
                  {
                    os_log_type_t v36 = *(const void **)a2[1].flow_id;
                    if (v36) {
                      _Block_release(v36);
                    }
                  }

                  free(a2);
                }
              }
            }
          }

    id v4 = v117;
    if (v119) {
      free(v119);
    }
    goto LABEL_7;
  }

  os_log_type_t v8 = *(_DWORD *)(v6 + 228);
  if (v8 != 1)
  {
    if (!v8)
    {
      nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v9 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        BOOL v10 = *(void *)(*(void *)(a1 + 40) + 8LL) + 275LL;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v10;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s input The protocol should not be in the invalid state here",  buf,  0x16u);
      }

    if (v60) {
      free(v60);
    }
    goto LABEL_24;
  }

  uint64_t v22 = v18;
LABEL_16:
  if (nw_endpoint_is_equal(v22, v15, 31LL))
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        id v24 = *(void *)(v7 + 16);
        *(_DWORD *)buf = 136447490;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        __int16 v87 = 2112;
        v88 = v8;
        os_log_type_t v89 = 2048;
        v90 = v7;
        __int16 v91 = 2080;
        id v92 = v24;
        os_log_type_t v93 = 2112;
        v94 = v22;
        v95 = 2112;
        v96 = v15;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ instance %p of %s source and destination endpoints (%@ -> %@) are the same, skipping",  buf,  0x3Eu);
      }
    }
  }

  else
  {
    __int16 v25 = nw_endpoint_edge_create(v15, *(__int128 **)(v7 + 16), 0);
    nw_endpoint_add_edge(v22, v25);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        v66 = *(void *)(v7 + 16);
        *(_DWORD *)buf = 136447490;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        __int16 v87 = 2112;
        v88 = v8;
        os_log_type_t v89 = 2048;
        v90 = v7;
        __int16 v91 = 2080;
        id v92 = v66;
        os_log_type_t v93 = 2112;
        v94 = v22;
        v95 = 2112;
        v96 = v15;
        _os_log_impl( &dword_181A5C000,  v65,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ instance %p of %s added edge from endpoint %@ to endpoint %@",  buf,  0x3Eu);
      }
    }
  }

  uint64_t v18 = v22;
LABEL_24:

  os_log_type_t v13 = v15;
LABEL_25:

LABEL_26:
  return 1LL;
}

    goto LABEL_170;
  }

  if (!v9)
  {
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
    nw_endpoint_t v64 = (char *)_os_log_send_and_compose_impl();

    v135[0] = 16;
    v131[0] = 0;
    if (v135[0] == 17)
    {
      __nwlog_obj();
      v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v68 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_181A5C000, v65, v68, "%{public}s called with null connection", buf, 0xCu);
      }

      goto LABEL_169;
    }

    if (!v131[0])
    {
      __nwlog_obj();
      v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v82 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl( &dword_181A5C000,  v65,  v82,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_169;
    }

    v76 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v77 = v135[0];
    os_log_type_t v78 = os_log_type_enabled(v65, (os_log_type_t)v135[0]);
    if (!v76)
    {
      if (v78)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_181A5C000, v65, v77, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }

      goto LABEL_169;
    }

    if (v78)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v76;
      _os_log_impl( &dword_181A5C000,  v65,  v77,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_150;
  }

  if (!a2)
  {
    __nwlog_obj();
    id v69 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
    nw_endpoint_t v64 = (char *)_os_log_send_and_compose_impl();

    v135[0] = 16;
    v131[0] = 0;
    if (v135[0] == 17)
    {
      __nwlog_obj();
      v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v70 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_181A5C000, v65, v70, "%{public}s called with null connection_state", buf, 0xCu);
      }

      goto LABEL_169;
    }

    if (!v131[0])
    {
      __nwlog_obj();
      v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v83 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl( &dword_181A5C000,  v65,  v83,  "%{public}s called with null connection_state, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_169;
    }

    v76 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v79 = v135[0];
    os_log_type_t v80 = os_log_type_enabled(v65, (os_log_type_t)v135[0]);
    if (!v76)
    {
      if (v80)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl( &dword_181A5C000,  v65,  v79,  "%{public}s called with null connection_state, no backtrace",  buf,  0xCu);
      }

      goto LABEL_169;
    }

    if (v80)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v76;
      _os_log_impl( &dword_181A5C000,  v65,  v79,  "%{public}s called with null connection_state, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      free(backtrace_string);
      if (!v107) {
        goto LABEL_292;
      }
      goto LABEL_222;
    }
  }

  else
  {
    __nwlog_obj();
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
    os_log_type_t v107 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v223) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v109 = type[0];
      if (os_log_type_enabled(v108, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        _os_log_impl(&dword_181A5C000, v108, v109, "%{public}s called with null instance", buf, 0xCu);
      }

      goto LABEL_220;
    }

    if (!(_BYTE)v223)
    {
      __nwlog_obj();
      v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v131 = type[0];
      if (os_log_type_enabled(v108, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        _os_log_impl( &dword_181A5C000,  v108,  v131,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_220;
    }

    os_log_type_t v116 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v117 = type[0];
    char v118 = os_log_type_enabled(v108, type[0]);
    if (!v116)
    {
      if (v118)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        _os_log_impl(&dword_181A5C000, v108, v117, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }

      goto LABEL_220;
    }

    if (v118)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v116;
      _os_log_impl( &dword_181A5C000,  v108,  v117,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v116);
  }

    if (v170) {
      free(v170);
    }
    goto LABEL_34;
  }

  if (*(_BYTE *)(*(void *)(a1 + 32) + 96LL))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v46 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      uint64_t v47 = *(void *)(a1 + 32);
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(void *)&applier[14] = v47;
      _os_log_impl( &dword_181A5C000,  v46,  OS_LOG_TYPE_INFO,  "%{public}s %{public}@ Dropping request, sending no reply",  applier,  0x16u);
    }

    goto LABEL_34;
  }

  id v48 = v24;
  has_method = _nw_http_request_has_method((uint64_t)v48);
  v195 = v48;

  if (has_method)
  {
    v50 = v48;
    if ([(id)v229[5] containsString:@"%"])
    {
      v51 = _CFStringCreateByRemovingPercentEncoding();
      if (v51)
      {
        __nwlog_obj();
        os_log_type_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          v53 = *(void *)(a1 + 32);
          v54 = v229[5];
          *(_DWORD *)applier = 136446978;
          *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
          *(_WORD *)&applier[12] = 2114;
          *(void *)&applier[14] = v53;
          *(_WORD *)&applier[22] = 2112;
          *(void *)v286 = v54;
          *(_WORD *)&v286[8] = 2112;
          *(void *)&v286[10] = v51;
          _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_INFO,  "%{public}s %{public}@ decoded path %@ -> %@",  applier,  0x2Au);
        }

        v55 = (void *)v229[5];
        v229[5] = v51;

        v50 = v195;
      }
    }

    if (*((_BYTE *)v241 + 24))
    {
      if ([(id)v229[5] hasPrefix:@"/.well-known/masque/udp/"])
      {
        objc_msgSend((id)v229[5], "substringFromIndex:", objc_msgSend(@"/.well-known/masque/udp/", "length"));
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        [v56 componentsSeparatedByString:@"/"];
        id v57 = (void *)objc_claimAutoreleasedReturnValue();
        if ((unint64_t)[v57 count] < 2)
        {
          v59 = 0LL;
          os_log_type_t v58 = 0LL;
        }

        else
        {
          [v57 objectAtIndexedSubscript:0];
          os_log_type_t v58 = (void *)objc_claimAutoreleasedReturnValue();
          [v57 objectAtIndexedSubscript:1];
          v59 = (void *)objc_claimAutoreleasedReturnValue();
        }

        if (v58 && v59)
        {
          if ([v58 isEqualToString:@"*"]
            && [v59 isEqualToString:@"*"])
          {
            __nwlog_obj();
            os_log_type_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
            {
              BOOL v113 = *(void *)(a1 + 32);
              *(_DWORD *)applier = 136446466;
              *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
              *(_WORD *)&applier[12] = 2114;
              *(void *)&applier[14] = v113;
              _os_log_impl( &dword_181A5C000,  v112,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ requested listener mode",  applier,  0x16u);
            }

            well_known = (uint64_t)nw_masque_listener_pair_create(*(NWConcrete_nw_masque_connection **)(a1 + 32));
            *(_BYTE *)(well_known + 84) = 1;
            nw_masque_listener_pair_setup_outer_connection_group((void *)well_known, v195);
            nw_masque_listener_pair_read_inner((NWConcrete_nw_masque_listener_pair *)well_known);
            os_log_type_t v99 = v58;
            goto LABEL_106;
          }

          well_known = (uint64_t)nw_masque_connection_pair_create(*(NWConcrete_nw_masque_connection **)(a1 + 32));
          *(_BYTE *)(well_known + 221) = 1;
          host = nw_endpoint_create_host( (const char *)[v58 UTF8String],  (const char *)objc_msgSend(v59, "UTF8String"));
          nw_masque_connection_pair_setup_outer_connection((void *)well_known, host, 17, v195);
          os_log_type_t v99 = v58;
LABEL_105:

LABEL_106:
          goto LABEL_34;
        }

        os_log_type_t v99 = v58;
      }

      else
      {
        os_log_type_t v99 = 0LL;
        v59 = 0LL;
      }

      if (gLogDatapath)
      {
        __nwlog_obj();
        v177 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG))
        {
          v178 = *(void *)(a1 + 32);
          v179 = v229[5];
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
          *(_WORD *)&applier[12] = 2114;
          *(void *)&applier[14] = v178;
          *(_WORD *)&applier[22] = 2112;
          *(void *)v286 = v179;
          _os_log_impl( &dword_181A5C000,  v177,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ Failed to parse target out of path: %@",  applier,  0x20u);
        }
      }

      well_known = _nw_http_response_create_well_known(400LL);
      host = nw_http_create_metadata_for_response((void *)well_known);
      os_log_type_t v116 = nw_content_context_create("response");
      nw_content_context_set_metadata_for_protocol(v116, (nw_protocol_metadata_t)host);
      os_log_type_t v117 = *(void **)(a1 + 32);
      char v118 = (nw_connection *)v117[6];
      v225[0] = MEMORY[0x1895F87A8];
      v225[1] = 3221225472LL;
      v225[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_206;
      v225[3] = &unk_189BC5E68;
      v226 = v117;
      nw_connection_send(v118, 0LL, v116, 1, v225);

      goto LABEL_105;
    }

    if (!*((_BYTE *)v237 + 24))
    {
      v119 = nw_masque_connection_pair_create(*(NWConcrete_nw_masque_connection **)(a1 + 32));
      nw_masque_connection_pair_setup_outer_connection(v119, (void *)v246[5], 6, v50);

      goto LABEL_34;
    }

    if ([(id)v229[5] hasPrefix:@"/.well-known/masque/ip/"])
    {
      objc_msgSend((id)v229[5], "substringFromIndex:", objc_msgSend(@"/.well-known/masque/ip/", "length"));
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      [v95 componentsSeparatedByString:@"/"];
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      if ((unint64_t)[v96 count] < 2)
      {
        v98 = 0LL;
        os_log_type_t v97 = 0LL;
      }

      else
      {
        [v96 objectAtIndexedSubscript:0];
        os_log_type_t v97 = (void *)objc_claimAutoreleasedReturnValue();
        [v96 objectAtIndexedSubscript:1];
        v98 = (void *)objc_claimAutoreleasedReturnValue();
      }

      if (v97 && v98)
      {
        v134 = [v98 integerValue];
        v135 = nw_masque_connection_pair_create(*(NWConcrete_nw_masque_connection **)(a1 + 32));
        metadata_for_response = nw_endpoint_create_host((const char *)[v97 UTF8String], "0");
        nw_masque_connection_pair_setup_outer_connection(v135, metadata_for_response, v134, v195);
        v120 = v97;
LABEL_122:

        goto LABEL_34;
      }

      v120 = v97;
    }

    else
    {
      v120 = 0LL;
      v98 = 0LL;
    }

    if (gLogDatapath)
    {
      __nwlog_obj();
      v183 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
      {
        v184 = *(void *)(a1 + 32);
        v185 = v229[5];
        *(_DWORD *)applier = 136446722;
        *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
        *(_WORD *)&applier[12] = 2114;
        *(void *)&applier[14] = v184;
        *(_WORD *)&applier[22] = 2112;
        *(void *)v286 = v185;
        _os_log_impl( &dword_181A5C000,  v183,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ Failed to parse target out of path: %@",  applier,  0x20u);
      }
    }

    v135 = (void *)_nw_http_response_create_well_known(400LL);
    metadata_for_response = nw_http_create_metadata_for_response(v135);
    v137 = nw_content_context_create("response");
    nw_content_context_set_metadata_for_protocol(v137, (nw_protocol_metadata_t)metadata_for_response);
    v138 = *(void **)(a1 + 32);
    v139 = (nw_connection *)v138[6];
    v223[0] = MEMORY[0x1895F87A8];
    v223[1] = 3221225472LL;
    v223[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_213;
    v223[3] = &unk_189BC5E68;
    v224 = v138;
    nw_connection_send(v139, 0LL, v137, 1, v223);

    goto LABEL_122;
  }

  v60 = v48;
  if (nw_http_request_has_method(v48, (uint64_t)"CONNECT-UDP"))
  {
    os_log_type_t v61 = *(void *)(a1 + 32);
    if (*(void *)(v61 + 72))
    {
      v62 = nw_masque_connection_pair_create((NWConcrete_nw_masque_connection *)v61);
      os_log_type_t v63 = v62;
      nw_endpoint_t v64 = v284;
      BYTE2(v62[44]._os_unfair_lock_opaque) = v284;
      if (v64)
      {
        v65 = BYTE1(v284);
        HIBYTE(v62[44]._os_unfair_lock_opaque) = BYTE1(v284);
        if (v65)
        {
          v66 = BYTE2(v284);
          LOBYTE(v62[45]._os_unfair_lock_opaque) = BYTE2(v284);
          if (v66)
          {
            v67 = BYTE3(v284);
            BYTE1(v62[45]._os_unfair_lock_opaque) = BYTE3(v284);
            if (v67)
            {
              os_log_type_t v68 = BYTE4(v284);
              BYTE2(v62[45]._os_unfair_lock_opaque) = BYTE4(v284);
              if (v68)
              {
                id v69 = BYTE5(v284);
                HIBYTE(v62[45]._os_unfair_lock_opaque) = BYTE5(v284);
                if (v69)
                {
                  os_log_type_t v70 = BYTE6(v284);
                  LOBYTE(v62[46]._os_unfair_lock_opaque) = BYTE6(v284);
                  if (v70) {
                    BYTE1(v62[46]._os_unfair_lock_opaque) = 0;
                  }
                }
              }
            }
          }
        }
      }

      BOOL v71 = (dispatch_data_s *)v272[5];
      if (v71)
      {
        LOWORD(v63[18]._os_unfair_lock_opaque) = nw_dispatch_data_copyout( v71,  (uint64_t)&v63[18]._os_unfair_lock_opaque + 2,  20LL);
        nw_dispatch_data_copyout((dispatch_data_s *)v260[5], (uint64_t)&v63[29], 20LL);
        if (gLogDatapath)
        {
          __nwlog_obj();
          v180 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG))
          {
            v181 = *(void *)(a1 + 32);
            v182 = LOWORD(v63[18]._os_unfair_lock_opaque);
            *(_DWORD *)applier = 136446722;
            *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
            *(_WORD *)&applier[12] = 2114;
            *(void *)&applier[14] = v181;
            *(_WORD *)&applier[22] = 1024;
            *(_DWORD *)v286 = v182;
            _os_log_impl( &dword_181A5C000,  v180,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ Received client connection ID of length %u",  applier,  0x1Cu);
          }
        }
      }

      objc_storeStrong((id *)&v63[60], *(id *)(*(void *)(a1 + 32) + 72LL));
      nw_masque_connection_pair_setup_outer_connection(v63, (void *)v246[5], 17, v195);
      *(_BYTE *)(*(void *)(a1 + 32) + 97LL) = 1;
    }

    else if ((_BYTE)v284)
    {
      if (v266[5])
      {
        v105 = nw_connection_copy_endpoint(*(nw_connection_t *)(v61 + 48));
        v106 = nw_masque_copy_matching_connection_pair(*(void **)(a1 + 32), v105, (uint64_t)&v284);
        os_log_type_t v107 = v106;
        if (v106 && *((_WORD *)v106 + 36))
        {
          objc_storeStrong((id *)v106 + 3, *(id *)(*(void *)(a1 + 32) + 48LL));
          v107[68] = nw_dispatch_data_copyout((dispatch_data_s *)v266[5], (uint64_t)(v107 + 69), 20LL);
          nw_dispatch_data_copyout((dispatch_data_s *)v254[5], (uint64_t)(v107 + 79), 20LL);
          if (gLogDatapath)
          {
            __nwlog_obj();
            v186 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
            {
              v187 = *(void *)(a1 + 32);
              v188 = (unsigned __int16)v107[68];
              *(_DWORD *)applier = 136447234;
              *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
              *(_WORD *)&applier[12] = 2114;
              *(void *)&applier[14] = v187;
              *(_WORD *)&applier[22] = 1024;
              *(_DWORD *)v286 = v188;
              *(_WORD *)&v286[4] = 2080;
              *(void *)&v286[6] = &v284;
              *(_WORD *)&v286[14] = 2112;
              *(void *)&v286[16] = v105;
              _os_log_impl( &dword_181A5C000,  v186,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ Received server connection ID of length %u for datagram flow %s from %@",  applier,  0x30u);
            }
          }

          options = nw_demux_create_options();
          nw_demux_options_add_pattern(options, 1, (unsigned __int16)v107[68], (uint64_t)(v107 + 69), 0LL);
          nw_masque_connection_pair_setup_inner_direct_connections(v107, options);
          os_log_type_t v109 = (void *)_nw_http_response_create_well_known(200LL);
          nw_http_fields_append(v109, (uint64_t)"Datagram-Flow-Id", (uint64_t)&v284);
          nw_http_fields_append(v109, (uint64_t)"Server-Connection-Id", (uint64_t)(v107 + 79));
          BOOL v110 = (nw_protocol_metadata *)nw_http_create_metadata_for_response(v109);
          v111 = nw_content_context_create("response");
          nw_content_context_set_metadata_for_protocol(v111, v110);
          nw_connection_send( *(nw_connection_t *)(*(void *)(a1 + 32) + 48LL),  0LL,  v111,  1,  &__block_literal_global_24170);
        }

        else
        {
          __nwlog_obj();
          v140 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
          {
            v141 = *(void *)(a1 + 32);
            *(_DWORD *)applier = 136446978;
            *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
            *(_WORD *)&applier[12] = 2114;
            *(void *)&applier[14] = v141;
            *(_WORD *)&applier[22] = 2080;
            *(void *)v286 = &v284;
            *(_WORD *)&v286[8] = 2112;
            *(void *)&v286[10] = v105;
            _os_log_impl( &dword_181A5C000,  v140,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ Rejecting server connection ID for unknown datagram flow %s from %@",  applier,  0x2Au);
          }

          options = (void *)_nw_http_response_create_well_known(501LL);
          os_log_type_t v109 = nw_http_create_metadata_for_response(options);
          BOOL v110 = nw_content_context_create("response");
          nw_content_context_set_metadata_for_protocol(v110, (nw_protocol_metadata_t)v109);
          v142 = *(void **)(a1 + 32);
          v143 = (nw_connection *)v142[6];
          v219[0] = MEMORY[0x1895F87A8];
          v219[1] = 3221225472LL;
          v219[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_216;
          v219[3] = &unk_189BC5E68;
          v220 = v142;
          nw_connection_send(v143, 0LL, v110, 1, v219);
          v111 = v220;
        }
      }

      else
      {
        v144 = nw_masque_connection_pair_create((NWConcrete_nw_masque_connection *)v61);
        v145 = v144;
        v146 = v284;
        BYTE2(v144[44]._os_unfair_lock_opaque) = v284;
        if (v146)
        {
          v147 = BYTE1(v284);
          HIBYTE(v144[44]._os_unfair_lock_opaque) = BYTE1(v284);
          if (v147)
          {
            v148 = BYTE2(v284);
            LOBYTE(v144[45]._os_unfair_lock_opaque) = BYTE2(v284);
            if (v148)
            {
              v149 = BYTE3(v284);
              BYTE1(v144[45]._os_unfair_lock_opaque) = BYTE3(v284);
              if (v149)
              {
                v150 = BYTE4(v284);
                BYTE2(v144[45]._os_unfair_lock_opaque) = BYTE4(v284);
                if (v150)
                {
                  v151 = BYTE5(v284);
                  HIBYTE(v144[45]._os_unfair_lock_opaque) = BYTE5(v284);
                  if (v151)
                  {
                    v152 = BYTE6(v284);
                    LOBYTE(v144[46]._os_unfair_lock_opaque) = BYTE6(v284);
                    if (v152) {
                      BYTE1(v144[46]._os_unfair_lock_opaque) = 0;
                    }
                  }
                }
              }
            }
          }
        }

        v153 = (dispatch_data_s *)v272[5];
        if (v153)
        {
          LOWORD(v145[18]._os_unfair_lock_opaque) = nw_dispatch_data_copyout( v153,  (uint64_t)&v145[18]._os_unfair_lock_opaque + 2,  20LL);
          nw_dispatch_data_copyout((dispatch_data_s *)v260[5], (uint64_t)&v145[29], 20LL);
          if (gLogDatapath)
          {
            __nwlog_obj();
            v189 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
            {
              v190 = *(void *)(a1 + 32);
              v191 = LOWORD(v145[18]._os_unfair_lock_opaque);
              *(_DWORD *)applier = 136446722;
              *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
              *(_WORD *)&applier[12] = 2114;
              *(void *)&applier[14] = v190;
              *(_WORD *)&applier[22] = 1024;
              *(_DWORD *)v286 = v191;
              _os_log_impl( &dword_181A5C000,  v189,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ Received client connection ID of length %u",  applier,  0x1Cu);
            }

            v60 = v195;
          }
        }

        nw_masque_connection_pair_setup_outer_connection(v145, (void *)v246[5], 17, v60);
      }
    }

    else
    {
      v129 = (void *)_nw_http_response_create_well_known(501LL);
      v130 = nw_http_create_metadata_for_response(v129);
      v131 = nw_content_context_create("response");
      nw_content_context_set_metadata_for_protocol(v131, (nw_protocol_metadata_t)v130);
      v132 = *(void **)(a1 + 32);
      v133 = (nw_connection *)v132[6];
      v221[0] = MEMORY[0x1895F87A8];
      v221[1] = 3221225472LL;
      v221[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_215;
      v221[3] = &unk_189BC5E68;
      v222 = v132;
      nw_connection_send(v133, 0LL, v131, 1, v221);
    }

    goto LABEL_34;
  }

  if (!nw_http_request_has_method(v48, (uint64_t)"POST"))
  {
    BOOL v100 = (void *)_nw_http_response_create_well_known(501LL);
    v101 = nw_http_create_metadata_for_response(v100);
    os_log_type_t v102 = nw_content_context_create("response");
    nw_content_context_set_metadata_for_protocol(v102, (nw_protocol_metadata_t)v101);
    BOOL v103 = *(void **)(a1 + 32);
    v104 = (nw_connection *)v103[6];
    completion[0] = MEMORY[0x1895F87A8];
    completion[1] = 3221225472LL;
    completion[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2_245;
    completion[3] = &unk_189BC5E68;
    v204 = v103;
    nw_connection_send(v104, 0LL, v102, 1, completion);

    goto LABEL_34;
  }

  [NSString stringWithFormat:@"https://host.com%@", v229[5]];
  v192 = (void *)objc_claimAutoreleasedReturnValue();
  v193 = (void *)[objc_alloc(MEMORY[0x189604030]) initWithString:v192];
  [v193 query];
  v194 = (void *)objc_claimAutoreleasedReturnValue();
  [v194 componentsSeparatedByString:@"&"];
  v217 = 0u;
  v218 = 0u;
  v215 = 0u;
  v216 = 0u;
  BOOL v72 = (id)objc_claimAutoreleasedReturnValue();
  os_log_type_t v73 = [v72 countByEnumeratingWithState:&v215 objects:v283 count:16];
  if (!v73)
  {

    v199 = 0LL;
    v197 = 0LL;
    goto LABEL_111;
  }

  v197 = 0LL;
  v199 = 0LL;
  v74 = *(void *)v216;
  do
  {
    for (i = 0LL; i != v73; ++i)
    {
      if (*(void *)v216 != v74) {
        objc_enumerationMutation(v72);
      }
      [*(id *)(*((void *)&v215 + 1) + 8 * i) componentsSeparatedByString:@"="];
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      if ([v76 count] == 2)
      {
        [v76 firstObject];
        os_log_type_t v77 = (void *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v78 = [v77 isEqualToString:@"targethost"];

        if (v78)
        {
          v79 = [v76 lastObject];
          os_log_type_t v80 = v199;
          v199 = (void *)v79;
LABEL_73:

          goto LABEL_74;
        }
      }

      if ([v76 count] == 2)
      {
        [v76 firstObject];
        __int16 v81 = (void *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v82 = [v81 isEqualToString:@"targetpath"];

        if (v82)
        {
          __int16 v83 = [v76 lastObject];
          os_log_type_t v80 = v197;
          v197 = (void *)v83;
          goto LABEL_73;
        }
      }

      if (!v43)
      {
LABEL_171:
        id v24 = 0LL;
LABEL_51:
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v24;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v34 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v95 = "nw_proxy_config_serialize_one_stack_block_invoke";
          v96 = 2112;
          os_log_type_t v97 = (size_t)v16;
          _os_log_impl(&dword_181A5C000, v34, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy protocol %@", buf, 0x16u);
        }

        if (!v3) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }

    _os_log_impl(&dword_181A5C000, v90, OS_LOG_TYPE_DEBUG, v94, buf, 0x32u);
    goto LABEL_170;
  }

  a3 = v229;
  uint64_t v5 = v228;
  if (v89 != 4)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
      goto LABEL_170;
    }
    v90 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_170;
    }
    os_log_type_t v109 = *(void *)(v12 + 488);
    BOOL v110 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
    v111 = *(_DWORD *)(v12 + 860);
    if (v109) {
      LODWORD(v109) = *(_DWORD *)(v109 + 424);
    }
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&_BYTE buf[32] = 1024;
    *(_DWORD *)&buf[34] = v110;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v111;
    *(_WORD *)v236 = 1024;
    *(_DWORD *)&v236[2] = v109;
    v94 = "%{public}s %{public}s%s<i%u:c%u:s%u> no change to http1 connection state";
    goto LABEL_169;
  }

  if (v87 | v88)
  {
    if (!v87) {
      goto LABEL_170;
    }
    if (v88) {
      goto LABEL_170;
    }
    *(_DWORD *)(v12 + 864) = 3;
    if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
      goto LABEL_170;
    }
    v90 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_170;
    }
    os_log_type_t v115 = *(void *)(v12 + 488);
    os_log_type_t v116 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
    os_log_type_t v117 = *(_DWORD *)(v12 + 860);
    if (v115) {
      LODWORD(v115) = *(_DWORD *)(v115 + 424);
    }
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&_BYTE buf[32] = 1024;
    *(_DWORD *)&buf[34] = v116;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v117;
    *(_WORD *)v236 = 1024;
    *(_DWORD *)&v236[2] = v115;
    v94 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream pending";
    goto LABEL_169;
  }

  *(_DWORD *)(v12 + 864) = 2;
  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
  {
    v90 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
    {
      __int16 v91 = *(void *)(v12 + 488);
      id v92 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
      os_log_type_t v93 = *(_DWORD *)(v12 + 860);
      if (v91) {
        LODWORD(v91) = *(_DWORD *)(v91 + 424);
      }
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      *(_WORD *)&_BYTE buf[32] = 1024;
      *(_DWORD *)&buf[34] = v92;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v93;
      *(_WORD *)v236 = 1024;
      *(_DWORD *)&v236[2] = v91;
      v94 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream complete";
      goto LABEL_169;
    }
  }

  return 1LL;
}

        if (v84) {
          free(v84);
        }
        goto LABEL_177;
      }

      __nwlog_obj();
      BOOL v71 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_activity_epilogue_report_if_selected";
      BOOL v72 = (char *)_os_log_send_and_compose_impl();

      v126[0] = 16;
      LOBYTE(v116) = 0;
      if (__nwlog_fault(v72, v126, &v116))
      {
        if (v126[0] == 17)
        {
          __nwlog_obj();
          os_log_type_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v74 = v126[0];
          if (os_log_type_enabled(v73, (os_log_type_t)v126[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_activity_epilogue_report_if_selected";
            _os_log_impl(&dword_181A5C000, v73, v74, "%{public}s Cannot report activity before activation", buf, 0xCu);
          }
        }

        else if ((_BYTE)v116)
        {
          os_log_type_t v78 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v79 = v126[0];
          os_log_type_t v80 = os_log_type_enabled(v73, (os_log_type_t)v126[0]);
          if (v78)
          {
            if (v80)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_activity_epilogue_report_if_selected";
              *(_WORD *)&buf[12] = 2082;
              *(void *)v119 = v78;
              _os_log_impl( &dword_181A5C000,  v73,  v79,  "%{public}s Cannot report activity before activation, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v78);
            goto LABEL_148;
          }

          if (v80)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_activity_epilogue_report_if_selected";
            _os_log_impl( &dword_181A5C000,  v73,  v79,  "%{public}s Cannot report activity before activation, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v82 = v126[0];
          if (os_log_type_enabled(v73, (os_log_type_t)v126[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_activity_epilogue_report_if_selected";
            _os_log_impl( &dword_181A5C000,  v73,  v82,  "%{public}s Cannot report activity before activation, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (v68) {
        free(v68);
      }
      goto LABEL_41;
    }

    id v30 = *(void *)(v29 + 32);
    if (v30)
    {
      BOOL v31 = *(void *)(v30 + 24);
      if (v31)
      {
        id v32 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
        if (v32)
        {
          v32(v30, v29);
LABEL_35:
          nw_protocol_http3_uni_stream_destroy(*((void *)handle + 132));
          *((void *)handle + 132) = 0LL;
          goto LABEL_36;
        }
      }
    }

    __nwlog_obj();
    v55 = *(void *)(*((void *)handle + 132) + 32LL);
    v56 = "invalid";
    if (v55)
    {
      id v57 = *(const char **)(v55 + 16);
      if (v57) {
        v56 = v57;
      }
    }

    *(_DWORD *)buf = 136446466;
    os_log_type_t v115 = "nw_http3_reset";
    os_log_type_t v116 = 2082;
    os_log_type_t v117 = (char *)v56;
    os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v112 = 0;
    if (__nwlog_fault(v58, &type, &v112))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v59 = (os_log_s *)__nwlog_obj();
        v60 = type;
        if (!os_log_type_enabled(v59, type)) {
          goto LABEL_161;
        }
        os_log_type_t v61 = *(void *)(*((void *)handle + 132) + 32LL);
        v62 = "invalid";
        if (v61)
        {
          os_log_type_t v63 = *(const char **)(v61 + 16);
          if (v63) {
            v62 = v63;
          }
        }

        *(_DWORD *)buf = 136446466;
        os_log_type_t v115 = "nw_http3_reset";
        os_log_type_t v116 = 2082;
        os_log_type_t v117 = (char *)v62;
        nw_endpoint_t v64 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
        goto LABEL_160;
      }

      if (!v112)
      {
        v59 = (os_log_s *)__nwlog_obj();
        v60 = type;
        if (!os_log_type_enabled(v59, type)) {
          goto LABEL_161;
        }
        BOOL v100 = *(void *)(*((void *)handle + 132) + 32LL);
        v101 = "invalid";
        if (v100)
        {
          os_log_type_t v102 = *(const char **)(v100 + 16);
          if (v102) {
            v101 = v102;
          }
        }

        *(_DWORD *)buf = 136446466;
        os_log_type_t v115 = "nw_http3_reset";
        os_log_type_t v116 = 2082;
        os_log_type_t v117 = (char *)v101;
        nw_endpoint_t v64 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
        goto LABEL_160;
      }

      os_log_type_t v84 = (char *)__nw_create_backtrace_string();
      v59 = (os_log_s *)__nwlog_obj();
      v60 = type;
      __int16 v85 = os_log_type_enabled(v59, type);
      if (v84)
      {
        if (v85)
        {
          v86 = *(void *)(*((void *)handle + 132) + 32LL);
          __int16 v87 = "invalid";
          if (v86)
          {
            v88 = *(const char **)(v86 + 16);
            if (v88) {
              __int16 v87 = v88;
            }
          }

          *(_DWORD *)buf = 136446722;
          os_log_type_t v115 = "nw_http3_reset";
          os_log_type_t v116 = 2082;
          os_log_type_t v117 = (char *)v87;
          char v118 = 2082;
          v119 = v84;
          _os_log_impl( &dword_181A5C000,  v59,  v60,  "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v84);
        goto LABEL_161;
      }

      if (v85)
      {
        v106 = *(void *)(*((void *)handle + 132) + 32LL);
        os_log_type_t v107 = "invalid";
        if (v106)
        {
          v108 = *(const char **)(v106 + 16);
          if (v108) {
            os_log_type_t v107 = v108;
          }
        }

        *(_DWORD *)buf = 136446466;
        os_log_type_t v115 = "nw_http3_reset";
        os_log_type_t v116 = 2082;
        os_log_type_t v117 = (char *)v107;
        nw_endpoint_t v64 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_160:
        _os_log_impl(&dword_181A5C000, v59, v60, v64, buf, 0x16u);
      }
    }

              if ((v4 & 0x200) == 0) {
                return;
              }
              if ((*v2 & 0x80) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v68 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)os_log_type_t type = 136446466;
                  *(void *)&type[4] = "nw_socket_handle_socket_event";
                  *(_WORD *)&type[12] = 2082;
                  *(void *)&type[14] = v1 + 308;
                  _os_log_impl( &dword_181A5C000,  v68,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s Socket received ADAPTIVE_WRITE_TIMEOUT event",  type,  0x16u);
                }
              }

              if (_nw_signposts_once == -1)
              {
                if (_nw_signposts_enabled) {
                  goto LABEL_177;
                }
              }

              else
              {
                dispatch_once(&_nw_signposts_once, &__block_literal_global_18_64095);
                if (_nw_signposts_enabled)
                {
LABEL_177:
                }
              }

              id v69 = *(void *)(v1 + 48);
              if (v69)
              {
                os_log_type_t v70 = *(void *)(v69 + 24);
                if (v70)
                {
                  BOOL v71 = *(void (**)(uint64_t, uint64_t))(v70 + 160);
                  if (v71) {
                    v71(v69, v1 - 96);
                  }
                }
              }

              return;
            }

            goto LABEL_193;
          }

      if (!v44) {
        return 0LL;
      }
      char v39 = (char *)v44;
      goto LABEL_32;
    }

    if (!(_BYTE)v80)
    {
      nw_endpoint_t v45 = (os_log_s *)__nwlog_obj();
      id v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v83 = "nw_http_encrypt_oblivious_request";
        uint64_t v47 = "%{public}s called with null out_encrypted_length, backtrace limit exceeded";
        goto LABEL_168;
      }

      goto LABEL_169;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v45 = (os_log_s *)__nwlog_obj();
    id v46 = type[0];
    v59 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v83 = "nw_http_encrypt_oblivious_request";
        uint64_t v47 = "%{public}s called with null out_encrypted_length, no backtrace";
        goto LABEL_168;
      }

      goto LABEL_169;
    }

    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v83 = "nw_http_encrypt_oblivious_request";
      os_log_type_t v84 = 2082;
      __int16 v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null out_encrypted_length, dumping backtrace:%{public}s";
      goto LABEL_118;
    }

                _os_log_impl(&dword_181A5C000, v143, v144, v145, buf, 0x2Au);
                goto LABEL_170;
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v139 = gLogObj;
              v140 = v265[0];
              if (os_log_type_enabled((os_log_t)gLogObj, v265[0]))
              {
                v141 = v286[3];
                v142 = *((unsigned int *)v309 + 6);
                *(_DWORD *)buf = 136446978;
                v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                v319 = "total_bytes";
                v320 = 2048;
                v321 = v141;
                v322 = 2048;
                *(void *)v323 = v142;
                v143 = (os_log_s *)v139;
                v144 = v140;
                v145 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
                goto LABEL_169;
              }

LABEL_179:
  if (v105) {
    free(v105);
  }
LABEL_28:

  uint64_t node = nw_hash_table_get_node(v14, (uint64_t)v11, 0LL);
  if (!node)
  {
    BOOL internal = nw_hash_table_create_internal( 0x11u,  0,  (const void *(*)(const void *, unsigned int *))nw_context_object_get_key,  (unsigned int (*)(const void *, unsigned int))nw_context_endpoint_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_context_endpoint_matches_key,  (void (*)(void *))nw_context_object_release);
    id v32 = v11;
    BOOL v33 = (void *)[v32 copyEndpoint];
    nw_endpoint_copy_properties(v32, v33);

    nw_endpoint_set_context(v33, v16);
    nw_endpoint_set_is_registered(v33);
    buf[0] = 0;
    id v30 = v33;
    nw_hash_table_add_object(internal, (uint64_t)v30, (char *)buf);
    if (buf[0]) {
      goto LABEL_39;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v34 = (id)gLogObj;
    logging_description = nw_endpoint_get_logging_description(v30);
    *(_DWORD *)v120 = 136446722;
    *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
    *(_WORD *)&v120[12] = 2114;
    *(void *)&v120[14] = v16;
    *(_WORD *)&v120[22] = 2082;
    v121 = logging_description;
    os_log_type_t v36 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v118 = 0;
    if (__nwlog_fault((const char *)v36, &type, &v118))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v37 = (os_log_s *)(id)gLogObj;
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          char v39 = nw_endpoint_get_logging_description(v30);
          *(_DWORD *)v120 = 136446722;
          *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
          *(_WORD *)&v120[12] = 2114;
          *(void *)&v120[14] = v16;
          *(_WORD *)&v120[22] = 2082;
          v121 = v39;
          _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s %{public}@ failed to add endpoint %{public}s",  v120,  0x20u);
        }
      }

      else if (v118)
      {
        v55 = __nw_create_backtrace_string();
        if (v55)
        {
          v56 = (char *)v55;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v57 = (os_log_s *)(id)gLogObj;
          os_log_type_t v58 = type;
          if (os_log_type_enabled(v57, type))
          {
            v59 = nw_endpoint_get_logging_description(v30);
            *(_DWORD *)v120 = 136446978;
            *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
            *(_WORD *)&v120[12] = 2114;
            *(void *)&v120[14] = v16;
            *(_WORD *)&v120[22] = 2082;
            v121 = v59;
            LOWORD(v122[0]) = 2082;
            *(id *)((char *)v122 + 2) = v56;
            _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s %{public}@ failed to add endpoint %{public}s, dumping backtrace:%{public}s",  v120,  0x2Au);
          }

          free(v56);
          if (!v36)
          {
LABEL_39:
            nw_hash_table_add_object(v14, internal, (char *)buf);
            if (buf[0]) {
              goto LABEL_56;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v40 = (id)gLogObj;
            char v41 = nw_endpoint_get_logging_description(v30);
            *(_DWORD *)v120 = 136446722;
            *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
            *(_WORD *)&v120[12] = 2114;
            *(void *)&v120[14] = v16;
            *(_WORD *)&v120[22] = 2082;
            v121 = v41;
            id v42 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v118 = 0;
            if (__nwlog_fault(v42, &type, &v118))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                __int16 v43 = (os_log_s *)(id)gLogObj;
                os_log_type_t v44 = type;
                if (os_log_type_enabled(v43, type))
                {
                  nw_endpoint_t v45 = nw_endpoint_get_logging_description(v30);
                  *(_DWORD *)v120 = 136446722;
                  *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
                  *(_WORD *)&v120[12] = 2114;
                  *(void *)&v120[14] = v16;
                  *(_WORD *)&v120[22] = 2082;
                  v121 = v45;
                  _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s %{public}@ failed to add hash table for endpoint %{public}s",  v120,  0x20u);
                }
              }

              else if (v118)
              {
                v60 = __nw_create_backtrace_string();
                if (v60)
                {
                  os_log_type_t v61 = (char *)v60;
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v62 = (os_log_s *)(id)gLogObj;
                  os_log_type_t v63 = type;
                  if (os_log_type_enabled(v62, type))
                  {
                    nw_endpoint_t v64 = nw_endpoint_get_logging_description(v30);
                    *(_DWORD *)v120 = 136446978;
                    *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
                    *(_WORD *)&v120[12] = 2114;
                    *(void *)&v120[14] = v16;
                    *(_WORD *)&v120[22] = 2082;
                    v121 = v64;
                    LOWORD(v122[0]) = 2082;
                    *(id *)((char *)v122 + 2) = v61;
                    _os_log_impl( &dword_181A5C000,  v62,  v63,  "%{public}s %{public}@ failed to add hash table for endpoint %{public}s, dumping backtrace:%{public}s",  v120,  0x2Au);
                  }

                  free(v61);
                  if (!v42) {
                    goto LABEL_56;
                  }
                  goto LABEL_46;
                }

                __nwlog_obj();
                __int16 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v82 = type;
                if (os_log_type_enabled(v43, type))
                {
                  __int16 v83 = nw_endpoint_get_logging_description(v30);
                  *(_DWORD *)v120 = 136446722;
                  *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
                  *(_WORD *)&v120[12] = 2114;
                  *(void *)&v120[14] = v16;
                  *(_WORD *)&v120[22] = 2082;
                  v121 = v83;
                  _os_log_impl( &dword_181A5C000,  v43,  v82,  "%{public}s %{public}@ failed to add hash table for endpoint %{public}s, no backtrace",  v120,  0x20u);
                }
              }

              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                __int16 v43 = (os_log_s *)(id)gLogObj;
                os_log_type_t v75 = type;
                if (os_log_type_enabled(v43, type))
                {
                  v76 = nw_endpoint_get_logging_description(v30);
                  *(_DWORD *)v120 = 136446722;
                  *(void *)&v120[4] = "nw_context_copy_registered_endpoint_internal";
                  *(_WORD *)&v120[12] = 2114;
                  *(void *)&v120[14] = v16;
                  *(_WORD *)&v120[22] = 2082;
                  v121 = v76;
                  _os_log_impl( &dword_181A5C000,  v43,  v75,  "%{public}s %{public}@ failed to add hash table for endpoint %{public}s, backtrace limit exceeded",  v120,  0x20u);
                }
              }
            }

            if (!v42) {
              goto LABEL_56;
            }
LABEL_46:
            free(v42);
            goto LABEL_56;
          }

                goto LABEL_180;
              }

              if (!v236)
              {
                __nwlog_obj();
                v134 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v139 = v237;
                if (os_log_type_enabled(v134, v237))
                {
                  *(_DWORD *)buf = 136446210;
                  v239 = "nw_endpoint_transform_start_next_child";
                  _os_log_impl( &dword_181A5C000,  v134,  v139,  "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded",  buf,  0xCu);
                }

                goto LABEL_179;
              }

              v136 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v134 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v137 = v237;
              v138 = os_log_type_enabled(v134, v237);
              if (!v136)
              {
                if (v138)
                {
                  *(_DWORD *)buf = 136446210;
                  v239 = "nw_endpoint_transform_start_next_child";
                  _os_log_impl( &dword_181A5C000,  v134,  v137,  "%{public}s nw_queue_context_create_source(timer) failed, no backtrace",  buf,  0xCu);
                }

                goto LABEL_179;
              }

              if (v138)
              {
                *(_DWORD *)buf = 136446466;
                v239 = "nw_endpoint_transform_start_next_child";
                v240 = 2082;
                id_str = v136;
                _os_log_impl( &dword_181A5C000,  v134,  v137,  "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v136);
            }

  if (v21) {
    free(v21);
  }
LABEL_20:
  if (v6 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
  {
    BOOL v16 = a1[1].callbacks;
    if (v16)
    {
      os_log_type_t v17 = (nw_protocol_callbacks *)((char *)v16 - 1);
      a1[1].callbacks = v17;
      if (!v17)
      {
        uint64_t v18 = *(void (***)(void))a1[1].flow_id;
        if (v18)
        {
          *(void *)a1[1].flow_id = 0LL;
          v18[2](v18);
          _Block_release(v18);
        }

        if ((a1[1].flow_id[8] & 1) != 0)
        {
          int64_t v19 = *(const void **)a1[1].flow_id;
          if (v19) {
            _Block_release(v19);
          }
        }

        free(a1);
      }
    }
  }

  if (v4 == &nw_protocol_ref_counted_handle && v3->handle == &nw_protocol_ref_counted_handle)
  {
    BOOL v10 = v3[1].callbacks;
    if (v10)
    {
      id v11 = (nw_protocol_callbacks *)((char *)v10 - 1);
      v3[1].callbacks = v11;
      if (!v11)
      {
        int v12 = *(void (***)(void))v3[1].flow_id;
        if (v12)
        {
          *(void *)v3[1].flow_id = 0LL;
          v12[2](v12);
          _Block_release(v12);
        }

        if ((v3[1].flow_id[8] & 1) != 0)
        {
          os_log_type_t v13 = *(const void **)v3[1].flow_id;
          if (v13) {
            _Block_release(v13);
          }
        }

        uint64_t v14 = v3;
        goto LABEL_32;
      }
    }
  }

      free(v73);
      goto LABEL_113;
    }

    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    os_log_type_t v70 = *(void *)(a1 + 32);
    if (v70) {
      BOOL v71 = (const char *)(v70 + 151);
    }
    else {
      BOOL v71 = "";
    }
LABEL_124:
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v71;
    _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s failed to create endpoint",  buf,  0x16u);
    return;
  }

  if (v9 == 7)
  {
    __int16 v43 = *(unsigned __int16 *)(a2 + 1);
    os_log_type_t v44 = __rev16(v43);
    nw_endpoint_t v45 = a2[4];
    if (v45 == 2 && v43 != 4096)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v39 = (os_log_s *)gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return;
      }
      id v46 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
      if (v46) {
        uint64_t v47 = (const char *)(v46 + 151);
      }
      else {
        uint64_t v47 = "";
      }
LABEL_67:
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v47;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v87) = v44;
      WORD2(v87) = 2048;
      *(void *)((char *)&v87 + 6) = 8LL;
      id v42 = "%{public}s %{public}s Invalid TLV length (%u != %zu)";
      goto LABEL_86;
    }

    if (v45 == 30 && v43 != 7168)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v39 = (os_log_s *)gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return;
      }
      v50 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
      if (v50) {
        uint64_t v47 = (const char *)(v50 + 151);
      }
      else {
        uint64_t v47 = "";
      }
      goto LABEL_67;
    }

    address = nw_endpoint_create_address((const sockaddr *)(a2 + 3));
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v55 = (os_log_s *)gLogObj;
    if (address)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v63 = *(void *)(a1 + 32);
        if (v63) {
          nw_endpoint_t v64 = (const char *)(v63 + 151);
        }
        else {
          nw_endpoint_t v64 = "";
        }
        v65 = nw_endpoint_get_description(address);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v64;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&__int16 v87 = v65;
        _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s detected remote endpoint from outer connection: %s",  buf,  0x20u);
      }

      v66 = *(void **)(*(void *)(a1 + 32) + 88LL);
      if (v66
        || (*(void *)(*(void *)(a1 + 32) + 88LL) = nw_shoes_create_metadata(),
            (v66 = *(void **)(*(void *)(a1 + 32) + 88LL)) != 0LL))
      {
        v67 = v66;
        os_log_type_t v68 = v67[1];

        if (nw_protocol_definition_is_equal_unsafe( (uint64_t)v68,  nw_protocol_shoes_get_definition(void)::proxy_definition))
        {
          *(void *)buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL37nw_shoes_metadata_set_remote_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke;
          *(void *)&__int16 v87 = &__block_descriptor_tmp_39;
          *((void *)&v87 + 1) = address;
          id v69 = v67[4];
          if (v69) {
            ___ZL37nw_shoes_metadata_set_remote_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke( (uint64_t)buf,  v69);
          }
          goto LABEL_113;
        }

        __nwlog_obj();
        *(_DWORD *)v88 = 136446210;
        os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
        os_log_type_t v73 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v84 = 0;
        if (__nwlog_fault(v73, &type, &v84))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v74 = (os_log_s *)__nwlog_obj();
            os_log_type_t v75 = type;
            if (!os_log_type_enabled(v74, type)) {
              goto LABEL_178;
            }
            *(_DWORD *)v88 = 136446210;
            os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
            v76 = "%{public}s metadata must be shoes";
            goto LABEL_177;
          }

          if (!v84)
          {
            v74 = (os_log_s *)__nwlog_obj();
            os_log_type_t v75 = type;
            if (!os_log_type_enabled(v74, type)) {
              goto LABEL_178;
            }
            *(_DWORD *)v88 = 136446210;
            os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
            v76 = "%{public}s metadata must be shoes, backtrace limit exceeded";
            goto LABEL_177;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          v74 = (os_log_s *)__nwlog_obj();
          os_log_type_t v75 = type;
          os_log_type_t v80 = os_log_type_enabled(v74, type);
          if (!backtrace_string)
          {
            if (!v80) {
              goto LABEL_178;
            }
            *(_DWORD *)v88 = 136446210;
            os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
            v76 = "%{public}s metadata must be shoes, no backtrace";
            goto LABEL_177;
          }

          if (v80)
          {
            *(_DWORD *)v88 = 136446466;
            os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
            v90 = 2082;
            __int16 v91 = backtrace_string;
            v79 = "%{public}s metadata must be shoes, dumping backtrace:%{public}s";
            goto LABEL_153;
          }

          goto LABEL_154;
        }
      }

      else
      {
        __nwlog_obj();
        *(_DWORD *)v88 = 136446210;
        os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
        os_log_type_t v73 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v84 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v74 = (os_log_s *)__nwlog_obj();
          os_log_type_t v75 = type;
          if (!os_log_type_enabled(v74, type)) {
            goto LABEL_178;
          }
          *(_DWORD *)v88 = 136446210;
          os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
          v76 = "%{public}s called with null metadata";
          goto LABEL_177;
        }

        if (!v84)
        {
          v74 = (os_log_s *)__nwlog_obj();
          os_log_type_t v75 = type;
          if (!os_log_type_enabled(v74, type)) {
            goto LABEL_178;
          }
          *(_DWORD *)v88 = 136446210;
          os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
          v76 = "%{public}s called with null metadata, backtrace limit exceeded";
          goto LABEL_177;
        }

        os_log_type_t v82 = (char *)__nw_create_backtrace_string();
        v74 = (os_log_s *)__nwlog_obj();
        os_log_type_t v75 = type;
        __int16 v83 = os_log_type_enabled(v74, type);
        if (!v82)
        {
          if (!v83) {
            goto LABEL_178;
          }
          *(_DWORD *)v88 = 136446210;
          os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
          v76 = "%{public}s called with null metadata, no backtrace";
          goto LABEL_177;
        }

        if (v83)
        {
          *(_DWORD *)v88 = 136446466;
          os_log_type_t v89 = "nw_shoes_metadata_set_remote_endpoint";
          v90 = 2082;
          __int16 v91 = v82;
          _os_log_impl( &dword_181A5C000,  v74,  v75,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  v88,  0x16u);
        }

        free(v82);
      }

      goto LABEL_178;
    }

    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    BOOL v72 = *(void *)(a1 + 32);
    if (v72) {
      BOOL v71 = (const char *)(v72 + 151);
    }
    else {
      BOOL v71 = "";
    }
    goto LABEL_124;
  }

  if (v9 != 4) {
    return;
  }
  BOOL v10 = *(unsigned __int16 *)(a2 + 1);
  if (!*(_WORD *)(a2 + 1))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v39 = (os_log_s *)gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    v51 = __rev16(v10);
    os_log_type_t v52 = *(void *)(a1 + 32);
    *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
    *(_DWORD *)buf = 136446978;
    *(_WORD *)&buf[12] = 2082;
    if (v52) {
      v53 = (const char *)(v52 + 151);
    }
    else {
      v53 = "";
    }
    *(void *)&buf[14] = v53;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v87) = v51;
    WORD2(v87) = 2048;
    *(void *)((char *)&v87 + 6) = 1LL;
    id v42 = "%{public}s %{public}s Invalid TLV length (%u < %zu)";
LABEL_86:
    _os_log_impl(&dword_181A5C000, v39, OS_LOG_TYPE_ERROR, v42, buf, 0x26u);
    return;
  }

  if (a2[3])
  {
    id v11 = (void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 48LL) + 24LL) + 112LL))();
    if (v11)
    {
      int v12 = v11;
      os_log_type_t v13 = *(id *)(v12[13] + 136LL);

      uint64_t v14 = nw_path_copy_flow_registration(v13, *(void *)(a1 + 32));
      if (v13) {
        os_release(v13);
      }
      if (v14)
      {
        if ((char)a2[3] < 0)
        {
          os_log_type_t v15 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v16 = *(void *)(a1 + 32);
            if (v16) {
              os_log_type_t v17 = (const char *)(v16 + 151);
            }
            else {
              os_log_type_t v17 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v17;
            _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s detected expensive network from outer connection",  buf,  0x16u);
          }
        }

        if ((a2[3] & 0x20) != 0)
        {
          uint64_t v18 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            int64_t v19 = *(void *)(a1 + 32);
            if (v19) {
              uint64_t v20 = (const char *)(v19 + 151);
            }
            else {
              uint64_t v20 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v20;
            _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s detected wifi network from outer connection",  buf,  0x16u);
          }
        }

        if ((a2[3] & 0x40) != 0)
        {
          dispatch_time_t v21 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = *(void *)(a1 + 32);
            if (v22) {
              id v23 = (const char *)(v22 + 151);
            }
            else {
              id v23 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v23;
            _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s detected cellular network from outer connection",  buf,  0x16u);
          }
        }

        if ((a2[3] & 0x10) != 0)
        {
          id v24 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v25 = *(void *)(a1 + 32);
            if (v25) {
              os_log_type_t v26 = (const char *)(v25 + 151);
            }
            else {
              os_log_type_t v26 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v26;
            _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s detected constrained network from outer connection",  buf,  0x16u);
          }
        }

        uint64_t v27 = a2[3];
        if ((v27 & 8) != 0)
        {
          uint64_t v28 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v29 = *(void *)(a1 + 32);
            if (v29) {
              id v30 = (const char *)(v29 + 151);
            }
            else {
              id v30 = "";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v30;
            _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s detected denied interface from outer connection",  buf,  0x16u);
          }

          effective_bundle_id = (const char *)nw_parameters_get_effective_bundle_id(v12);
          if (!effective_bundle_id)
          {
            if (nw_utilities_get_self_bundle_id::onceToken != -1) {
              dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
            }
            effective_bundle_id = (const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string;
          }

          nw_shoes_notify_interface_denied(effective_bundle_id, v32);
          uint64_t v27 = a2[3];
        }

        BOOL v33 = *(_BYTE *)(a1 + 40) == 0;
        id v34 = v14;
        v34[148] = v27 & 0x70 | (v27 >> 4) & 8 | (v33 << 7) | v34[148] & 7;

        os_log_type_t v35 = (nw_endpoint_t)v34;
        goto LABEL_114;
      }
    }
  }

              v49 = 1;
              goto LABEL_180;
            }

                  goto LABEL_180;
                }

                if (!(_BYTE)v115)
                {
                  __nwlog_obj();
                  v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v96 = type[0];
                  if (os_log_type_enabled(v60, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_service_input_frames";
                    _os_log_impl( &dword_181A5C000,  v60,  v96,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
                  }

                  goto LABEL_179;
                }

                v76 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                __int16 v85 = type[0];
                v86 = os_log_type_enabled(v60, type[0]);
                if (!v76)
                {
                  if (v86)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_service_input_frames";
                    _os_log_impl( &dword_181A5C000,  v60,  v85,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
                  }

                  goto LABEL_179;
                }

                if (v86)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_service_input_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v76;
                  _os_log_impl( &dword_181A5C000,  v60,  v85,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                goto LABEL_126;
              }

      goto LABEL_196;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      os_log_type_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v115 = v149[0];
      if (os_log_type_enabled(v82, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl( &dword_181A5C000,  v82,  v115,  "%{public}s called with null fd_wrapper, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_179;
    }

    v96 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v97 = v149[0];
    v98 = os_log_type_enabled(v93, (os_log_type_t)v149[0]);
    if (v96)
    {
      if (v98)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v96;
        _os_log_impl( &dword_181A5C000,  v93,  v97,  "%{public}s called with null fd_wrapper, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v96);
LABEL_196:
      if (!v81)
      {
LABEL_198:
        os_log_type_t v73 = 0LL;
        goto LABEL_121;
      }

  if (v65) {
    free(v65);
  }
  return 4294966394LL;
}

  output_frames = nw_protocol_get_output_frames(v20[4], (uint64_t)a2, a3, a4, a5, (uint64_t)a6);
  if ((*(_WORD *)(v19 + 428) & 0x100) != 0)
  {
    v174[0] = MEMORY[0x1895F87A8];
    v174[1] = 0x40000000LL;
    v174[2] = ___ZL35nw_protocol_http1_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    v174[3] = &__block_descriptor_tmp_119_40350;
    v174[4] = v19;
    v174[5] = v20;
    v174[6] = a6;
    v174[7] = v16;
    v106 = v174;
  }

  else
  {
    v173[0] = MEMORY[0x1895F87A8];
    v173[1] = 0x40000000LL;
    v173[2] = ___ZL35nw_protocol_http1_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_120;
    v173[3] = &__block_descriptor_tmp_121;
    v173[4] = v19;
    v173[5] = v20;
    v106 = v173;
  }

  tqh_first = a6->tqh_first;
  do
  {
    if (!tqh_first) {
      break;
    }
    v108 = (nw_frame *)*((void *)tqh_first + 4);
    os_log_type_t v109 = ((uint64_t (*)(void *))v106[2])(v106);
    tqh_first = v108;
  }

  while ((v109 & 1) != 0);
  if ((*(_BYTE *)(v19 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v110 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
      {
        v111 = *(void *)(v19 + 256);
        os_log_type_t v112 = *(_DWORD *)(*(void *)(v19 + 248) + 372LL);
        if (v111) {
          LODWORD(v111) = *(_DWORD *)(v111 + 860);
        }
        BOOL v113 = *(_DWORD *)(v19 + 424);
        *(_DWORD *)buf = 136447746;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 2082;
        *(void *)v180 = v19 + 74;
        *(_WORD *)&v180[8] = 2080;
        *(void *)&v180[10] = " ";
        v181 = 1024;
        *(_DWORD *)v182 = v112;
        *(_WORD *)&v182[4] = 1024;
        *(_DWORD *)&v182[6] = v111;
        LOWORD(v183) = 1024;
        *(_DWORD *)((char *)&v183 + 2) = v113;
        HIWORD(v183) = 1024;
        v184 = output_frames;
        _os_log_impl( &dword_181A5C000,  v110,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> outbound headers complete, returning %u frames from below",  buf,  0x38u);
      }
    }
  }

  return output_frames;
}

  v67 = v40;
  os_log_type_t v68 = *(_DWORD *)(*((void *)v67 + 13) + 72LL);

  if (v68)
  {
    id v69 = nw_socket_set_traffic_class((uint64_t)p_output_handler, v68);
    if ((_DWORD)v69)
    {
      os_log_type_t v70 = v69;
      BOOL v71 = (uint64_t)p_output_handler;
LABEL_329:
      nw_socket_internal_error(v71, v70);
      return 0LL;
    }
  }

  BOOL v72 = v8;
  os_log_type_t v73 = [v72 type];

  if (v73 == 1 && identifier_low == 2 && setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 0x20000, &v551, 4u))
  {
    v74 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v75 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 2080;
      *(void *)v555 = (char *)a1 + 404;
      *(_WORD *)&v555[8] = 1024;
      *(_DWORD *)&v555[10] = v74;
      _os_log_impl( &dword_181A5C000,  v75,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_NOAPNFALLBK failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v76 = (os_log_s *)gLogObj;
    if (v74 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        v554 = 1024;
        *(_DWORD *)v555 = 22;
        _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt SO_NOAPNFALLBK failed %{darwin.errno}d",  buf,  0x12u);
      }

      goto LABEL_208;
    }

    *(_DWORD *)buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    v554 = 1024;
    *(_DWORD *)v555 = v74;
    os_log_type_t v77 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v556) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (v556 == 17)
    {
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      v79 = v556;
      if (!os_log_type_enabled(v78, (os_log_type_t)v556)) {
        goto LABEL_206;
      }
      *(_DWORD *)buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v74;
      os_log_type_t v80 = "%{public}s setsockopt SO_NOAPNFALLBK failed %{darwin.errno}d";
    }

    else if (type[0])
    {
      __int16 v81 = p_output_handler;
      os_log_type_t v82 = (char *)__nw_create_backtrace_string();
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      v79 = v556;
      __int16 v83 = os_log_type_enabled(v78, (os_log_type_t)v556);
      if (v82)
      {
        if (v83)
        {
          *(_DWORD *)buf = 136446722;
          v553 = "nw_socket_set_common_sockopts";
          v554 = 1024;
          *(_DWORD *)v555 = v74;
          *(_WORD *)&v555[4] = 2082;
          *(void *)&v555[6] = v82;
          _os_log_impl( &dword_181A5C000,  v78,  v79,  "%{public}s setsockopt SO_NOAPNFALLBK failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v82);
        p_output_handler = v81;
        goto LABEL_206;
      }

      p_output_handler = v81;
      if (!v83)
      {
LABEL_206:
        if (v77) {
          free(v77);
        }
        goto LABEL_208;
      }

      *(_DWORD *)buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v74;
      os_log_type_t v80 = "%{public}s setsockopt SO_NOAPNFALLBK failed %{darwin.errno}d, no backtrace";
    }

    else
    {
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      v79 = v556;
      if (!os_log_type_enabled(v78, (os_log_type_t)v556)) {
        goto LABEL_206;
      }
      *(_DWORD *)buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v74;
      os_log_type_t v80 = "%{public}s setsockopt SO_NOAPNFALLBK failed %{darwin.errno}d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v78, v79, v80, buf, 0x12u);
    goto LABEL_206;
  }

    if (v61 != a2)
    {
      if (v6)
      {
        os_log_type_t v115 = v258;
        os_log_type_t v116 = v6;
        while (*v115 != v61)
        {
          ++v115;
          if (!--v116)
          {
            os_log_type_t v117 = v6;
            goto LABEL_186;
          }
        }
      }

      else
      {
        os_log_type_t v117 = 0LL;
LABEL_186:
        v258[v117] = v61;
        ++v6;
      }
    }

void sub_181A929A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_queue_context_create_source(void *a1, int a2, int a3, unsigned int a4, void *a5, void *a6)
{
  uint64_t v76 = *MEMORY[0x1895F89C0];
  id v12 = a1;
  id v13 = a5;
  id v14 = a6;
  BOOL v16 = v14;
  if (a2 == -1)
  {
    __nwlog_obj(v14, v15);
    id v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v71 = "nw_queue_context_create_source";
    id v24 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    uint64_t v25 = __nwlog_fault(v24, &type, &v68);
    if (!(_DWORD)v25) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v25, v26);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v71 = "nw_queue_context_create_source";
        _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null (fd != -1)", buf, 0xCu);
      }

      goto LABEL_78;
    }

    if (!v68)
    {
      __nwlog_obj(v25, v26);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v62 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v71 = "nw_queue_context_create_source";
        _os_log_impl( &dword_181A5C000,  v27,  v62,  "%{public}s called with null (fd != -1), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_78;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj(backtrace_string, v56);
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v57 = type;
    BOOL v58 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v71 = "nw_queue_context_create_source";
        _os_log_impl(&dword_181A5C000, v27, v57, "%{public}s called with null (fd != -1), no backtrace", buf, 0xCu);
      }

      goto LABEL_78;
    }

    if (v58)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v71 = "nw_queue_context_create_source";
      __int16 v72 = 2082;
      uint64_t v73 = (uint64_t)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v27,  v57,  "%{public}s called with null (fd != -1), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_66;
  }

  if (!v13)
  {
    __nwlog_obj(v14, v15);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v71 = "nw_queue_context_create_source";
    id v24 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    uint64_t v30 = __nwlog_fault(v24, &type, &v68);
    if (!(_DWORD)v30) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v30, v31);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v71 = "nw_queue_context_create_source";
        _os_log_impl(&dword_181A5C000, v27, v32, "%{public}s called with null block", buf, 0xCu);
      }

LABEL_52:
      free(v41);
      goto LABEL_53;
    }

      v169 = v33;
      if (*((_DWORD *)v167 + 6))
      {
        if (((uint64_t)a1[3].handle & 1) == 0)
        {
          if (gLogDatapath)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            nw_endpoint_t v64 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              v65 = *((_DWORD *)v167 + 6);
              id v66 = "s";
              if (v65 == 1) {
                id v66 = "";
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_get_input_frames";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v146;
              *(_WORD *)&buf[22] = 2080;
              v199 = " ";
              v200 = 2048;
              v201 = (char *)p_output_handler;
              v202 = 1024;
              v203 = v65;
              v204 = 2080;
              v205 = v66;
              _os_log_impl( &dword_181A5C000,  v64,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Found %u IPv4 extra fragment%s",  buf,  0x3Au);
            }
          }
        }

        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000LL;
        LOBYTE(v199) = 0;
        v157[0] = MEMORY[0x1895F87A8];
        v157[1] = 0x40000000LL;
        v158 = (uint64_t (*)(void *))___ZL33nw_protocol_ipv4_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_19;
        v159 = &unk_189BC88D8;
        v164 = v170;
        v165 = &v184;
        v160 = &v166;
        v161 = v188;
        v162 = buf;
        v163 = v8;
        id v34 = v170[0];
        do
        {
          if (!v34) {
            break;
          }
          os_log_type_t v35 = *(void *)(v34 + 32);
          dispatch_source_t v36 = v158(v157);
          id v34 = v35;
        }

        while ((v36 & 1) != 0);
        v152[0] = MEMORY[0x1895F87A8];
        v152[1] = 0x40000000LL;
        v153 = ___ZL33nw_protocol_ipv4_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2;
        v154 = &__block_descriptor_tmp_21_86165;
        v155 = v170;
        v156 = v8;
        dispatch_source_t v37 = v170[0];
        do
        {
          if (!v37) {
            break;
          }
          os_log_type_t v38 = *(void *)(v37 + 32);
          uint64_t v39 = ((uint64_t (*)(void *))v153)(v152);
          dispatch_source_t v37 = v38;
        }

        while ((v39 & 1) != 0);
        if (*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
          id v23 = 34;
        }
        else {
          id v23 = 0;
        }
        _Block_object_dispose(buf, 8);
      }

      else
      {
        id v23 = 34;
      }

      _Block_object_dispose(&v166, 8);
      if (v23) {
        id v24 = 1;
      }
      else {
        id v24 = v171 == 0;
      }
    }

    while (!v24);
    id v12 = a6;
    if (v184)
    {
      *a6->tqh_last = (nw_frame *)v184;
      uint64_t v76 = v185;
      *(void *)(v184 + 40) = a6->tqh_last;
      a6->tqh_last = v76;
      v184 = 0LL;
      v185 = (nw_frame **)&v184;
    }

    *((_DWORD *)v193 + 6) += *((_DWORD *)v189 + 6);
    os_log_type_t v77 = nw_protocol_ipv4_process_reassembly((uint64_t)v8, 0, (uint64_t)a6, 1, 0LL);
    os_log_type_t v78 = *((_DWORD *)v193 + 6) + v77;
    *((_DWORD *)v193 + 6) = v78;
    if (!v78)
    {
      if (((uint64_t)a1[3].handle & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v79 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v146;
          *(_WORD *)&buf[22] = 2080;
          v199 = " ";
          v200 = 2048;
          v201 = (char *)p_output_handler;
          _os_log_impl( &dword_181A5C000,  v79,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Dropped inbound packets, checking for more",  buf,  0x2Au);
        }
      }

      _Block_object_dispose(v182, 8);
      _Block_object_dispose(v186, 8);
      _Block_object_dispose(v188, 8);
      output_handler = a1->output_handler;
      if (!output_handler) {
        goto LABEL_195;
      }
      continue;
    }

    break;
  }

  _Block_object_dispose(v182, 8);
  _Block_object_dispose(v186, 8);
  _Block_object_dispose(v188, 8);
LABEL_214:
  v120 = *((unsigned int *)v193 + 6);
  _Block_object_dispose(&v192, 8);
  return v120;
}

            id v24 = 0LL;
LABEL_178:

            goto LABEL_179;
          }

          goto LABEL_111;
        }

        int64_t v19 = nw_endpoint_handler_add_write_request(v18, v4);
      }

      else
      {
        if (*((void *)v7 + 96))
        {
          if (*((void *)v7 + 108))
          {
            os_log_type_t v8 = (id *)v4;
            int v9 = v8;
            if (v8)
            {
              v151 = (os_log_s *)v8[13];

              if (v151)
              {
                repliable_metadata = nw_content_context_copy_first_repliable_metadata(v151);
                if (repliable_metadata) {
                  uint64_t node = nw_hash_table_get_node(*((void *)v7 + 108), (uint64_t)repliable_metadata, 1LL);
                }
                else {
                  uint64_t node = 0LL;
                }

                v55 = nw_write_request_copy_context(v9);
                if (node)
                {
LABEL_135:
                  BOOL v103 = *(void ***)(node + 16);
                  if (v103)
                  {
LABEL_137:
                    v150 = v55;
                    id v24 = nw_flow_add_write_request(v5, v103, v9);
                    v104 = v5;
                    v105 = *((_BYTE *)v104 + 268);

                    if ((_DWORD)v24)
                    {
                      if ((v105 & 0x20) == 0)
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        v106 = (os_log_s *)(id)gconnectionLogObj;
                        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
                        {
                          v143 = v106;
                          v146 = v104;

                          os_log_type_t v107 = v146;
                          v108 = (*((_BYTE *)v104 + 268) & 1) == 0;

                          os_log_type_t v109 = "dry-run ";
                          if (v108) {
                            os_log_type_t v109 = "";
                          }
                          v139 = v109;
                          BOOL v110 = nw_endpoint_handler_copy_endpoint(v107);
                          v138 = nw_endpoint_get_logging_description(v110);
                          v111 = v107;
                          os_log_type_t v112 = v111;
                          BOOL v113 = v111[30];
                          v137 = v110;
                          else {
                            os_log_type_t v114 = off_189BBBBF0[v113];
                          }
                          v136 = v114;

                          __int16 v125 = v112;
                          v126 = "path";
                          switch(v5->mode)
                          {
                            case 0:
                              break;
                            case 1:
                              v126 = "resolver";
                              break;
                            case 2:
                              v126 = nw_endpoint_flow_mode_string(v125[31]);
                              break;
                            case 3:
                              v126 = "proxy";
                              break;
                            case 4:
                              v126 = "fallback";
                              break;
                            case 5:
                              v126 = "transform";
                              break;
                            default:
                              v126 = "unknown-mode";
                              break;
                          }

                          v135 = v126;

                          v131 = v125;
                          os_unfair_lock_lock((os_unfair_lock_t)v131 + 28);
                          v142 = v131[8];
                          os_unfair_lock_unlock((os_unfair_lock_t)v131 + 28);

                          *(_DWORD *)buf = 136448514;
                          v156 = "nw_endpoint_handler_add_write_request";
                          v157 = 2082;
                          id_str = v146->id_str;
                          v159 = 2082;
                          v160 = v139;
                          v161 = 2082;
                          v162 = (void *)v138;
                          v163 = 2082;
                          v164 = v136;
                          v165 = 2082;
                          v166 = v135;
                          v167 = 2114;
                          v168 = v142;
                          v169 = 2112;
                          v170 = v9;
                          v171 = 2048;
                          v172 = v103;
                          v173 = 1024;
                          v174 = 1;
                          _os_log_impl( &dword_181A5C000,  v143,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Added write request %@ to flow protocol %p: %u",  buf,  0x62u);

                          v106 = v143;
                        }
                      }

                      nw_flow_service_writes(v104, (NWConcrete_nw_endpoint_flow *)v7, (nw_flow_protocol *)v103);
                    }

                    else if ((v105 & 0x20) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                      }
                      os_log_type_t v115 = (os_log_s *)(id)gconnectionLogObj;
                      if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
                      {
                        os_log_type_t v116 = v104;

                        os_log_type_t v117 = v116;
                        char v118 = (*((_BYTE *)v104 + 268) & 1) == 0;

                        if (v118) {
                          v119 = "";
                        }
                        else {
                          v119 = "dry-run ";
                        }
                        v120 = nw_endpoint_handler_copy_endpoint(v117);
                        v147 = nw_endpoint_get_logging_description(v120);
                        v121 = v117;
                        v122 = v121;
                        v123 = v121[30];
                        v141 = v119;
                        v144 = v120;
                        else {
                          v124 = off_189BBBBF0[v123];
                        }
                        v140 = v124;

                        uint64_t v127 = v122;
                        v128 = v127;
                        v129 = v5->mode;
                        v130 = "path";
                        switch(v129)
                        {
                          case 0:
                            break;
                          case 1:
                            v130 = "resolver";
                            break;
                          case 2:
                            v130 = nw_endpoint_flow_mode_string(v127[31]);
                            break;
                          case 3:
                            v130 = "proxy";
                            break;
                          case 4:
                            v130 = "fallback";
                            break;
                          case 5:
                            v130 = "transform";
                            break;
                          default:
                            v130 = "unknown-mode";
                            break;
                        }

                        v132 = v128;
                        os_unfair_lock_lock((os_unfair_lock_t)v132 + 28);
                        v133 = v132[8];
                        os_unfair_lock_unlock((os_unfair_lock_t)v132 + 28);

                        *(_DWORD *)buf = 136447746;
                        v156 = "nw_endpoint_handler_add_write_request";
                        v157 = 2082;
                        id_str = v116->id_str;
                        v159 = 2082;
                        v160 = v141;
                        v161 = 2082;
                        v162 = (void *)v147;
                        v163 = 2082;
                        v164 = v140;
                        v165 = 2082;
                        v166 = v130;
                        v167 = 2114;
                        v168 = v133;
                        _os_log_impl( &dword_181A5C000,  v115,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add write request when trying to send",  buf,  0x48u);
                      }
                    }

                    goto LABEL_177;
                  }

  if (v19) {
    free(v19);
  }
  return 0LL;
}

    goto LABEL_53;
  }

  if (v4)
  {
    if (v3 != (nw_content_context_t)&__block_literal_global_5_41854
      && v3 != (nw_content_context_t)&__block_literal_global_4
      && v3 != (nw_content_context_t)&__block_literal_global_3_41839
      && v3 != (nw_content_context_t)&__block_literal_global_41831)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v3 + 28);
      dispatch_source_t v37 = 0LL;
      os_log_type_t v38 = &v37;
      uint64_t v39 = 0x2020000000LL;
      id v40 = 0;
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v42 = __Block_byref_object_copy__42045;
      __int16 v43 = __Block_byref_object_dispose__42046;
      os_log_type_t v44 = 0LL;
      *(void *)os_log_type_t type = 0LL;
      os_log_type_t v32 = type;
      BOOL v33 = 0x3032000000LL;
      id v34 = __Block_byref_object_copy__42045;
      os_log_type_t v35 = __Block_byref_object_dispose__42046;
      dispatch_source_t v36 = 0LL;
      id v6 = (unsigned __int8 *)*((void *)v3 + 11);
      v26[0] = MEMORY[0x1895F87A8];
      v26[1] = 3221225472LL;
      v26[2] = __nw_content_context_set_metadata_for_protocol_block_invoke;
      v26[3] = &unk_189BBE030;
      uint64_t v7 = v5;
      uint64_t v27 = v7;
      os_log_type_t v28 = &v37;
      uint64_t v29 = type;
      uint64_t v30 = buf;
      nw_array_apply(v6, (uint64_t)v26);
      if (*((_BYTE *)v38 + 24))
      {
        os_unfair_lock_unlock((os_unfair_lock_t)v3 + 28);
      }

      else
      {
        os_log_type_t v8 = (void ***)*((void *)v3 + 11);
        int v9 = (void ***)nw_array_create();
        BOOL v10 = v9;
        if (v8)
        {
          if (v9 == v8) {
            BOOL v10 = v8;
          }
          else {
            std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( (uint64_t)(v9 + 2),  v8[2],  v8[3],  v8[3] - v8[2]);
          }
          id v11 = *(void *)(*(void *)&buf[8] + 40LL);
          if (v11) {
            nw_array_remove_object((uint64_t)v10, v11);
          }
        }

        nw_array_append((uint64_t)v10, v7);
        objc_storeStrong((id *)v3 + 11, v10);
        os_unfair_lock_unlock((os_unfair_lock_t)v3 + 28);
      }

      _Block_object_dispose(type, 8);
      _Block_object_dispose(buf, 8);

      _Block_object_dispose(&v37, 8);
    }

    goto LABEL_19;
  }

  __nwlog_obj();
  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
  id v13 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v37) = 0;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = type[0];
    if (os_log_type_enabled(v14, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
      _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null protocol_metadata", buf, 0xCu);
    }

    goto LABEL_52;
  }

  if (!(_BYTE)v37)
  {
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v25 = type[0];
    if (os_log_type_enabled(v14, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
      _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null protocol_metadata, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_52;
  }

  uint64_t v21 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v22 = type[0];
  id v23 = os_log_type_enabled(v14, type[0]);
  if (!v21)
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
      _os_log_impl(&dword_181A5C000, v14, v22, "%{public}s called with null protocol_metadata, no backtrace", buf, 0xCu);
    }

    goto LABEL_52;
  }

  if (v23)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v21;
    _os_log_impl( &dword_181A5C000,  v14,  v22,  "%{public}s called with null protocol_metadata, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v21);
  if (v13) {
    goto LABEL_54;
  }
LABEL_19:
}

LABEL_53:
        if (!v14) {
          goto LABEL_6;
        }
        goto LABEL_54;
      }

      if (!v45)
      {
        __nwlog_obj();
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v30 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446466;
          BOOL v48 = "nw_path_flow_registration_close";
          uint64_t v49 = 1024;
          *(_DWORD *)os_log_type_t v50 = v12;
          _os_log_impl( &dword_181A5C000,  v15,  v30,  "%{public}s NECP_CLIENT_ACTION_REMOVE_FLOW error %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
        }

        goto LABEL_52;
      }

      uint64_t v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v23 = type;
      id v24 = os_log_type_enabled(v15, type);
      if (!v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v48 = "nw_path_flow_registration_close";
          uint64_t v49 = 1024;
          *(_DWORD *)os_log_type_t v50 = v12;
          _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s NECP_CLIENT_ACTION_REMOVE_FLOW error %{darwin.errno}d, no backtrace",  buf,  0x12u);
        }

        goto LABEL_52;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446722;
        BOOL v48 = "nw_path_flow_registration_close";
        uint64_t v49 = 1024;
        *(_DWORD *)os_log_type_t v50 = v12;
        *(_WORD *)&v50[4] = 2082;
        *(void *)&v50[6] = v22;
        _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s NECP_CLIENT_ACTION_REMOVE_FLOW error %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(v22);
      if (v14) {
LABEL_54:
      }
        free(v14);
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = *((void *)v2 + 1) + 80LL;
        *(_DWORD *)buf = 136447234;
        BOOL v48 = "nw_path_flow_registration_close";
        uint64_t v49 = 1042;
        *(_DWORD *)os_log_type_t v50 = 16;
        *(_WORD *)&v50[4] = 2098;
        *(void *)&v50[6] = v2 + 32;
        v51 = 1042;
        id v52 = 16;
        v53 = 2098;
        id v54 = v21;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s Removed flow %{public,uuid_t}.16P from %{public,uuid_t}.16P",  buf,  0x2Cu);
      }
    }

    *(_OWORD *)nw_endpoint_t v45 = *(_OWORD *)v46;
    goto LABEL_53;
  }

  if (!v48)
  {
    swift_release();
    goto LABEL_52;
  }

  uint64_t v49 = *(void *)(v46 + 8);
  *nw_endpoint_t v45 = v48;
  v45[1] = v49;
  swift_release();
LABEL_53:
  v51 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  id v52 = *(void **)(a1 + v51);
  *(void *)(a1 + v51) = *(void *)(a2 + v51);

  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  v53 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v53) = *(_BYTE *)(a2 + v53);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  return a1;
}

  __break(1u);
  return result;
}

  if (v8) {
    free(v8);
  }
  return 0LL;
}

  if (v9) {
    free(v9);
  }
}

  if (v9) {
    free(v9);
  }
}

  if (v9) {
    free(v9);
  }
}

  if (v11) {
    free(v11);
  }
}

  if (v11) {
    free(v11);
  }
}

        goto LABEL_53;
      }

      if (!v35)
      {
        __nwlog_obj();
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v34 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_framer_protocol_create_frame";
          _os_log_impl( &dword_181A5C000,  v22,  v34,  "%{public}s called with null framer->context, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v29 = type;
      uint64_t v30 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_framer_protocol_create_frame";
          _os_log_impl( &dword_181A5C000,  v22,  v29,  "%{public}s called with null framer->context, no backtrace",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v38 = "nw_framer_protocol_create_frame";
        uint64_t v39 = 2082;
        id v40 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v22,  v29,  "%{public}s called with null framer->context, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_38;
    }

    goto LABEL_53;
  }

  if ((a5 & 1) != 0)
  {
    external = (void *)nw_frame_create_external(0, a2, a3, (uint64_t)v10);
    if (!external) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  if (!a2)
  {
    external = (void *)nw_frame_create(0, 0LL, 0, a3, (uint64_t)v10);
    if (!external) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(v11, a2);
  if (buffer_manager_with_context)
  {
    id v14 = buffer_manager_with_context;
    uint64_t v15 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v15)
    {
LABEL_11:
      os_log_type_t v17 = nw_frame_create(0, v15, a2, a3, (uint64_t)v10);
      external = (void *)v17;
      if (v14)
      {
        nw_frame_set_buffer_used_manager(v17, v14);
        if (!external) {
          goto LABEL_18;
        }
      }

      else
      {
        nw_frame_set_buffer_used_malloc(v17, 1);
        if (!external)
        {
LABEL_18:

          return (BOOL)external;
        }
      }

LABEL_53:
            char v41 = 0LL;
            goto LABEL_54;
          }
        }
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v82 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v5 + 609;
      uint64_t v73 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v167) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v83 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v5 + 609;
          _os_log_impl( &dword_181A5C000,  v74,  v83,  "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol",  buf,  0x16u);
        }

        uint64_t v22 = (NWConcrete_nw_resolver_service *)a1[5];
        goto LABEL_53;
      }

      if (v21)
      {
        if ((*(_BYTE *)(v21 + 346) & 0x20) != 0) {
          goto LABEL_88;
        }
        if (*(_BYTE *)(v21 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v30 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
            goto LABEL_87;
          }
          uint64_t v31 = a1[4] + 256LL;
          id v52 = 136446466;
          v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          id v54 = 2082;
          *(void *)v55 = v31;
          os_log_type_t v32 = "%{public}s [C%{public}s] Invalidating getaddrinfo DNS object";
          BOOL v33 = v30;
          id v34 = 22;
          goto LABEL_86;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v30 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          v51 = *(_DWORD *)(a1[4] + 340LL);
          id v52 = 136446466;
          v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          id v54 = 1024;
          *(_DWORD *)v55 = v51;
          os_log_type_t v32 = "%{public}s [R%u] Invalidating getaddrinfo DNS object";
          BOOL v33 = v30;
          id v34 = 18;
          goto LABEL_86;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v30 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          id v52 = 136446210;
          v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          os_log_type_t v32 = "%{public}s Invalidating getaddrinfo DNS object";
          BOOL v33 = v30;
          id v34 = 12;
LABEL_86:
          _os_log_impl(&dword_181A5C000, v33, OS_LOG_TYPE_INFO, v32, (uint8_t *)&v52, v34);
        }
      }

    if (v24) {
      free(v24);
    }

    goto LABEL_55;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v15 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v47 = "nw_endpoint_add_edge_block_invoke";
  BOOL v16 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v41[0] = OS_LOG_TYPE_DEFAULT;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v17 = (os_log_s *)(id)gLogObj;
    uint64_t v18 = type[0];
    if (os_log_type_enabled(v17, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v47 = "nw_endpoint_add_edge_block_invoke";
      _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s nw_array_create failed", buf, 0xCu);
    }

    if (v34) {
      free(v34);
    }
    __nwlog_obj();
    nw_endpoint_t v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    uint64_t v46 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v56) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v48 = type[0];
      if (os_log_type_enabled(v47, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_181A5C000, v47, v48, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if ((_BYTE)v56)
    {
      uint64_t v49 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v50 = type[0];
      v51 = os_log_type_enabled(v47, type[0]);
      if (v49)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          BOOL v58 = 2082;
          uint64_t v59 = v49;
          _os_log_impl( &dword_181A5C000,  v47,  v50,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v49);
        goto LABEL_70;
      }

      if (v51)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_181A5C000, v47, v50, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v52 = type[0];
      if (os_log_type_enabled(v47, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
        _os_log_impl( &dword_181A5C000,  v47,  v52,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_70:
    if (v46) {
      free(v46);
    }
    goto LABEL_17;
  }

  __nwlog_obj();
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
  uint64_t v30 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v56) = 0;
  if (__nwlog_fault(v30, type, &v56))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type[0];
      if (os_log_type_enabled(v31, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if ((_BYTE)v56)
    {
      dispatch_source_t v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type[0];
      uint64_t v39 = os_log_type_enabled(v31, type[0]);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
          BOOL v58 = 2082;
          uint64_t v59 = v37;
          _os_log_impl( &dword_181A5C000,  v31,  v38,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        goto LABEL_47;
      }

      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v31, v38, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v43 = type[0];
      if (os_log_type_enabled(v31, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v31,  v43,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  char v41 = v5;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v42 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    __int16 v43 = *((_DWORD *)v5 + 11);
    os_log_type_t v44 = *((_DWORD *)v41 + 12);
    *(_DWORD *)buf = 136446978;
    v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
    v95 = 2048;
    v96 = v41;
    os_log_type_t v97 = 1024;
    *(_DWORD *)v98 = v43;
    *(_WORD *)&v98[4] = 1024;
    *(_DWORD *)&v98[6] = v44;
    _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_DEBUG,  "%{public}s report %p path_count %u, allocated_path_count %u",  buf,  0x22u);
  }

  nw_endpoint_t v45 = *((_DWORD *)v5 + 11);
  if (!v45)
  {
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
    char v68 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v91 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v70 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_181A5C000, v69, v70, "%{public}s called with null report->path_count", buf, 0xCu);
      }
    }

    else if (v91)
    {
      __int16 v72 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v73 = type;
      __int16 v74 = os_log_type_enabled(v69, type);
      if (v72)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446466;
          v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
          v95 = 2082;
          v96 = v72;
          _os_log_impl( &dword_181A5C000,  v69,  v73,  "%{public}s called with null report->path_count, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v72);
LABEL_134:
        if (!v68) {
          goto LABEL_61;
        }
        goto LABEL_135;
      }

      if (v74)
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl( &dword_181A5C000,  v69,  v73,  "%{public}s called with null report->path_count, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v86 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl( &dword_181A5C000,  v69,  v86,  "%{public}s called with null report->path_count, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_53;
  }

  if (!v4)
  {
    __nwlog_obj();
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v35 = 136446210;
    *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)os_log_type_t v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null connection", v35, 0xCu);
      }
    }

    else if (v31)
    {
      uint64_t v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v27 = type;
      os_log_type_t v28 = os_log_type_enabled(v19, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)os_log_type_t v35 = 136446466;
          *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
          *(_WORD *)&v35[12] = 2082;
          *(void *)&v35[14] = v26;
          _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s called with null connection, dumping backtrace:%{public}s",  v35,  0x16u);
        }

        free(v26);
        if (!v18) {
          goto LABEL_55;
        }
        goto LABEL_54;
      }

      if (v28)
      {
        *(_DWORD *)os_log_type_t v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_181A5C000, v19, v27, "%{public}s called with null connection, no backtrace", v35, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)os_log_type_t v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl( &dword_181A5C000,  v19,  v30,  "%{public}s called with null connection, backtrace limit exceeded",  v35,  0xCu);
      }
    }

    goto LABEL_52;
  }

  *(void *)os_log_type_t v35 = 0LL;
  *(void *)&v35[8] = v35;
  *(void *)&v35[16] = 0x2020000000LL;
  dispatch_source_t v36 = 0;
  id v6 = (unsigned __int8 *)v3[13];
  if (!v6)
  {
    _Block_object_dispose(v35, 8);

    goto LABEL_11;
  }

  *(void *)buf = MEMORY[0x1895F87A8];
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = ___ZL41nw_connection_group_has_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
  *(void *)&_BYTE buf[24] = &unk_189BC7960;
  uint64_t v7 = v4;
  *(void *)&_BYTE buf[32] = v7;
  id v34 = v35;
  nw_array_apply(v6, (uint64_t)buf);

  os_log_type_t v8 = *(_BYTE *)(*(void *)&v35[8] + 24LL) == 0;
  _Block_object_dispose(v35, 8);

  if (v8)
  {
LABEL_11:
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56LL)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      id v12 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v13 = *(_DWORD *)(*(void *)(a1 + 32) + 168LL);
        id v14 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        identifier = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 40));
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v14;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = identifier;
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] did not find connection %p, dropping reply context %s",  buf,  0x26u);
      }
    }

    BOOL v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
    int v9 = *(os_log_s **)(v16 + 40);
    *(void *)(v16 + 40) = 0LL;
    goto LABEL_18;
  }

  if (nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56LL))) {
    return;
  }
  if (__nwlog_connection_group_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
  }
  int v9 = (os_log_s *)(id)gconnection_groupLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    BOOL v10 = *(_DWORD *)(*(void *)(a1 + 32) + 168LL);
    id = nw_connection_get_id(*(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_connection_group_reply_block_invoke";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = id;
    _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] has connection [C%llu], sending reply",  buf,  0x1Cu);
  }

LABEL_53:
      if (v12) {
        free(v12);
      }
      goto LABEL_13;
    }

    if (!v29)
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v24 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_52;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v21 = type;
    uint64_t v22 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }

      goto LABEL_52;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v22) {
      free(v22);
    }
    goto LABEL_29;
  }

  if (nw_protocol_definition_get_variant(v5[1]) != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int64_t v19 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v49 = "nw_protocol_instance_set_flow_for_key";
      os_log_type_t v50 = 2082;
      v51 = (uint64_t)v6 + 407;
      id v52 = 2080;
      v53 = " ";
      _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sCannot use custom flow mapping table on a non-multiplexing protocol",  buf,  0x20u);
    }

    if (v25) {
      free(v25);
    }
    __nwlog_obj();
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v50 = "nw_authentication_credential_cache_entry_get_type";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v47 = 0;
    if (__nwlog_fault(v32, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v50 = "nw_authentication_credential_cache_entry_get_type";
          os_log_type_t v35 = "%{public}s called with null cache_entry";
LABEL_67:
          _os_log_impl(&dword_181A5C000, v33, v34, v35, buf, 0xCu);
          goto LABEL_68;
        }

        goto LABEL_68;
      }

      if (!v47)
      {
        __nwlog_obj();
        BOOL v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v50 = "nw_authentication_credential_cache_entry_get_type";
          os_log_type_t v35 = "%{public}s called with null cache_entry, backtrace limit exceeded";
          goto LABEL_67;
        }

    if (v17) {
      free(v17);
    }
    id v6 = 0LL;
    goto LABEL_6;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
  id v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v27 = 0;
  if (__nwlog_fault(v12, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
        uint64_t v15 = "%{public}s called with null http_authentication";
LABEL_45:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else if (v27)
    {
      uint64_t v21 = (char *)__nw_create_backtrace_string();
      id v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      uint64_t v22 = os_log_type_enabled(v13, type);
      if (v21)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
          uint64_t v31 = 2082;
          os_log_type_t v32 = v21;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null http_authentication, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
        goto LABEL_46;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
        uint64_t v15 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_45;
      }
    }

    else
    {
      id v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_authentication_ask_authbroker_for_creds";
        uint64_t v15 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_45;
      }
    }
  }

    goto LABEL_58;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446978;
    os_log_type_t v47 = "nw_ids_info_create";
    BOOL v48 = 2080;
    uint64_t v49 = (void *)a1;
    os_log_type_t v50 = 2080;
    v51 = a2;
    id v52 = 2080;
    v53 = a3;
    _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_INFO,  "%{public}s Creating IDS info with sessionId='%s', pseudonym='%s', push_token='%s'",  buf,  0x2Au);
  }

  os_log_type_t v8 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_ids_info);
  if (!v8) {
    return 0LL;
  }
  v45.receiver = v8;
  v45.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_ids_info;
  int v9 = objc_msgSendSuper2(&v45, sel_init);
  if (!v9)
  {
    __nwlog_obj();
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v43 = 0;
    if ((__nwlog_fault(v15, &type, &v43) & 1) == 0) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s [super init] failed", buf, 0xCu);
      }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (!v27) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_protocol_default_replace_input_handler";
      id v11 = "%{public}s called with null new_input_handler, no backtrace";
    }

    else
    {
      uint64_t v21 = (os_log_s *)__nwlog_obj();
      uint64_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v31 = "nw_protocol_default_replace_input_handler";
      id v11 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
    }

    if (v19) {
      free(v19);
    }
    goto LABEL_16;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v34 = "nw_flow_replay_disconnect";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v31 = 0;
  if (__nwlog_fault(v15, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        id v34 = "nw_flow_replay_disconnect";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v31)
    {
      uint64_t v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v23 = type;
      id v24 = os_log_type_enabled(v16, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          id v34 = "nw_flow_replay_disconnect";
          os_log_type_t v35 = 2082;
          dispatch_source_t v36 = v22;
          _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v22);
        goto LABEL_47;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        id v34 = "nw_flow_replay_disconnect";
        _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        id v34 = "nw_flow_replay_disconnect";
        _os_log_impl( &dword_181A5C000,  v16,  v28,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if ((nw_parameters_get_disable_listener_datapath(*((void **)v1 + 26)) & 1) == 0
    && !v81[5]
    && v29
    && *((void *)v29 + 3) != *((void *)v29 + 2))
  {
    v73[0] = v30;
    v73[1] = 3221225472LL;
    v73[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_210;
    v73[3] = &unk_189BC7960;
    __int16 v74 = v26;
    uint64_t v75 = &v80;
    nw_array_apply(v29, (uint64_t)v73);
  }

  v55 = v26;
  nw_context_assert_queue(*((void **)v1 + 3));
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  BOOL v113 = __Block_byref_object_copy__17859;
  *(void *)os_log_type_t v114 = __Block_byref_object_dispose__17860;
  *(void *)&v114[8] = 0LL;
  uint64_t v56 = *v16;
  if (!*v16) {
    goto LABEL_60;
  }
  if (*(void *)(v56 + 24) == *(void *)(v56 + 16)) {
    goto LABEL_60;
  }
  nw_array_get_object_at_index(v56, 0LL);
  os_log_type_t v57 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v58 = objc_msgSend(v57, "local_endpoint");
  uint64_t v59 = *(void **)(*(void *)&buf[8] + 40LL);
  *(void *)(*(void *)&buf[8] + 40LL) = v58;

  os_log_type_t v60 = *(void **)(*(void *)&buf[8] + 40LL);
  if (!v60)
  {
LABEL_60:
    BOOL v61 = (void *)*((void *)v1 + 22);
    if (v61)
    {
      os_log_type_t v62 = v30;
      os_log_type_t v63 = v61;
      nw_endpoint_t v64 = (unsigned __int8 *)v63[9];

      *(void *)&os_log_type_t v115 = v62;
      *((void *)&v115 + 1) = 3221225472LL;
      os_log_type_t v116 = ___ZL40nw_listener_save_local_endpoint_on_queueP22NWConcrete_nw_listener_block_invoke;
      os_log_type_t v117 = &unk_189BC50D0;
      char v118 = buf;
      nw_array_apply(v64, (uint64_t)&v115);

      os_log_type_t v60 = *(void **)(*(void *)&buf[8] + 40LL);
    }

    else
    {
      os_log_type_t v60 = 0LL;
    }
  }

  nw_listener_set_local_endpoint_on_queue(v55, v60);
  _Block_object_dispose(buf, 8);

  if ((*((_DWORD *)v55 + 32) - 3) < 2 || (*((_BYTE *)v55 + 302) & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v70 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue";
      _os_log_impl( &dword_181A5C000,  v70,  OS_LOG_TYPE_DEBUG,  "%{public}s Listener already cancelled or failed, not modifying listener state",  buf,  0xCu);
    }

    goto LABEL_73;
  }

  v65 = (id)v81[5];
  if (v65)
  {
    id v66 = v65;
    v67 = v66[2];

    if (v67 == 1)
    {
      char v68 = v66;
      id v69 = v68[3];

      if (v69 <= 0x30 && ((1LL << v69) & 0x1000000402006LL) != 0)
      {

        nw_listener_set_state_on_queue(v55, 3, (void *)v81[5]);
LABEL_73:
        nw_listener_stop_advertising_on_queue(v55);
        goto LABEL_74;
      }
    }
  }

  if (!*v16 || *(void *)(*v16 + 24) == *(void *)(*v16 + 16))
  {
    nw_listener_set_state_on_queue(v55, 1, (void *)v81[5]);
  }

  else
  {
    nw_listener_set_state_on_queue(v55, 2, 0LL);
    nw_listener_start_advertising_on_queue(v55);
  }

    goto LABEL_53;
  }

  if (v4)
  {
    uint64_t v5 = (void *)*((void *)v3 + 1);
    id v6 = MEMORY[0x1895F87A8];
    if (v5)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      BOOL v48 = __Block_byref_object_copy__19159;
      uint64_t v49 = __Block_byref_object_dispose__19160;
      os_log_type_t v50 = v5;
      uint64_t v7 = (unsigned __int8 *)*((void *)v3 + 1);
      v41[0] = v6;
      v41[1] = 3221225472LL;
      v41[2] = __nw_protocol_stack_remove_protocol_block_invoke;
      v41[3] = &unk_189BC1378;
      uint64_t v42 = v36;
      os_log_type_t v44 = buf;
      __int16 v43 = v3;
      nw_array_apply(v7, (uint64_t)v41);
      objc_storeStrong((id *)v3 + 1, *(id *)(*(void *)&buf[8] + 40LL));

      _Block_object_dispose(buf, 8);
    }

    os_log_type_t v8 = (void *)*((void *)v3 + 2);
    if (v8)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      BOOL v48 = __Block_byref_object_copy__19159;
      uint64_t v49 = __Block_byref_object_dispose__19160;
      os_log_type_t v50 = v8;
      int v9 = (unsigned __int8 *)*((void *)v3 + 2);
      v37[0] = v6;
      v37[1] = 3221225472LL;
      v37[2] = __nw_protocol_stack_remove_protocol_block_invoke_2;
      v37[3] = &unk_189BC1378;
      os_log_type_t v38 = v36;
      id v40 = buf;
      uint64_t v39 = v3;
      nw_array_apply(v9, (uint64_t)v37);
      objc_storeStrong((id *)v3 + 2, *(id *)(*(void *)&buf[8] + 40LL));

      _Block_object_dispose(buf, 8);
    }

    BOOL v10 = (void *)*((void *)v3 + 3);
    if (v10)
    {
      id v11 = v10;
      id v12 = v11[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v36, (uint64_t)v12))
      {
        id v13 = (void *)*((void *)v3 + 3);
        *((void *)v3 + 3) = 0LL;
      }
    }

    id v14 = (void *)*((void *)v3 + 4);
    if (v14)
    {
      uint64_t v15 = v14;
      BOOL v16 = v15[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v36, (uint64_t)v16))
      {
        os_log_type_t v17 = (void *)*((void *)v3 + 4);
        *((void *)v3 + 4) = 0LL;
      }
    }

    uint64_t v18 = (void *)*((void *)v3 + 6);
    if (v18)
    {
      int64_t v19 = v18;
      uint64_t v20 = v19[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v36, (uint64_t)v20))
      {
        uint64_t v21 = (void *)*((void *)v3 + 6);
        *((void *)v3 + 6) = 0LL;
      }
    }

    goto LABEL_19;
  }

  __nwlog_obj();
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
  id v23 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  nw_endpoint_t v45 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v27 = type;
    if (os_log_type_enabled(v24, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
      _os_log_impl(&dword_181A5C000, v24, v27, "%{public}s called with null definition", buf, 0xCu);
    }

    goto LABEL_52;
  }

  if (!v45)
  {
    __nwlog_obj();
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v35 = type;
    if (os_log_type_enabled(v24, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
      _os_log_impl( &dword_181A5C000,  v24,  v35,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_52;
  }

  uint64_t v31 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v32 = type;
  BOOL v33 = os_log_type_enabled(v24, type);
  if (!v31)
  {
    if (v33)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
      _os_log_impl(&dword_181A5C000, v24, v32, "%{public}s called with null definition, no backtrace", buf, 0xCu);
    }

    goto LABEL_52;
  }

  if (v33)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v31;
    _os_log_impl( &dword_181A5C000,  v24,  v32,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v31);
  if (v23) {
    goto LABEL_54;
  }
LABEL_19:
}

    goto LABEL_53;
  }

  if (v4)
  {
    id v6 = (uint64_t *)v3[19];
    uint64_t v7 = v6;
    if (v6)
    {
      os_log_type_t v8 = v6[2];
      v31[0] = MEMORY[0x1895F87A8];
      v31[1] = 3221225472LL;
      v31[2] = __nw_parameters_remove_application_protocol_options_from_protocol_stack_block_invoke;
      v31[3] = &unk_189BB8E30;
      os_log_type_t v32 = v5;
      nw_array_remove_objects(v8, (uint64_t)v31);

LABEL_5:
      goto LABEL_6;
    }

    __nwlog_obj();
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    dispatch_source_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v33 = 0;
    if (__nwlog_fault(v16, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          dispatch_source_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null stack", buf, 0xCu);
        }
      }

      else if (v33)
      {
        uint64_t v25 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v26 = type;
        uint64_t v27 = os_log_type_enabled(v17, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            dispatch_source_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
            dispatch_source_t v37 = 2082;
            os_log_type_t v38 = v25;
            _os_log_impl( &dword_181A5C000,  v17,  v26,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v25);
          goto LABEL_58;
        }

        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          dispatch_source_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          _os_log_impl(&dword_181A5C000, v17, v26, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v30 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          dispatch_source_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          _os_log_impl( &dword_181A5C000,  v17,  v30,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    goto LABEL_53;
  }

  if (v6)
  {
    uint64_t v7 = (os_unfair_lock_s *)v6;
    *(void *)aBlock = MEMORY[0x1895F87A8];
    *(void *)&aBlock[8] = 3221225472LL;
    *(void *)&aBlock[16] = __nw_listener_get_path_uuid_block_invoke;
    os_log_type_t v44 = &unk_189BC66E8;
    os_log_type_t v8 = v7;
    nw_endpoint_t v45 = (nw_protocol_metadata_t)v8;
    uint64_t v46 = v5 + 24;
    int v9 = (void (**)(void))_Block_copy(aBlock);
    v7 += 2;
    os_unfair_lock_lock(v7);
    v9[2](v9);
    os_unfair_lock_unlock(v7);

    BOOL v10 = v5;
    id v11 = v8;
    id v12 = v40;
    if (v12)
    {
      id v13 = *(void *)(*((void *)v10 + 13) + 176LL);
      if (v13)
      {
        id v14 = *(id *)(v13 + 128);
        if (v14)
        {
          uint64_t v15 = v14;
          BOOL v16 = (id *)v12;
          os_log_type_t v17 = v16[2];

          if (nw_parameters_get_server_mode(v17))
          {
            *(_DWORD *)(*((void *)v10 + 13) + 84LL) = 0;
            *((void *)v10 + 12) = *((void *)v10 + 12) & 0xFFFFFFFFFFFF7F3FLL | 0x8080;
            nw_listener_register_client_demux_options_if_needed(v11, v15, v16);
          }

          else
          {
            uint64_t v39 = v17;
            if (nw_protocol_masque_get_definition(void)::definition
              && (uint64_t v18 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition)) != 0LL)
            {
              int64_t v19 = (nw_protocol_definition *)os_retain(v18);
            }

            else
            {
              int64_t v19 = 0LL;
            }

            uint64_t v20 = nw_connection_copy_protocol_metadata((nw_connection_t)v16, v19);

            if (v20)
            {
              dispatch_source_t v37 = v15;
              uint64_t v21 = v16;
              os_log_type_t v38 = v16[2];

              uint64_t v15 = v37;
              uint64_t v22 = nw_parameters_copy_context(v38);
              *(void *)aBlock = MEMORY[0x1895F87A8];
              *(void *)&aBlock[8] = 3221225472LL;
              *(void *)&aBlock[16] = ___ZL46nw_parameters_register_demux_options_if_neededP24NWConcrete_nw_parametersPU25objcproto14OS_nw_listener8NSObjectPU27objcproto16OS_nw_connectionS1__block_invoke;
              os_log_type_t v44 = &unk_189BC9238;
              nw_endpoint_t v45 = v20;
              uint64_t v46 = v37;
              nw_queue_context_async_if_needed(v22, aBlock);
            }

            os_log_type_t v17 = v39;
          }
        }
      }
    }

    goto LABEL_19;
  }

  __nwlog_obj();
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)aBlock = 136446210;
  *(void *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
  id v24 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v41 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v28 = type;
    if (os_log_type_enabled(v25, type))
    {
      *(_DWORD *)aBlock = 136446210;
      *(void *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
      _os_log_impl(&dword_181A5C000, v25, v28, "%{public}s called with null listener", aBlock, 0xCu);
    }

    goto LABEL_52;
  }

  if (!v41)
  {
    __nwlog_obj();
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    dispatch_source_t v36 = type;
    if (os_log_type_enabled(v25, type))
    {
      *(_DWORD *)aBlock = 136446210;
      *(void *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
      _os_log_impl( &dword_181A5C000,  v25,  v36,  "%{public}s called with null listener, backtrace limit exceeded",  aBlock,  0xCu);
    }

    goto LABEL_52;
  }

  os_log_type_t v32 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v33 = type;
  id v34 = os_log_type_enabled(v25, type);
  if (!v32)
  {
    if (v34)
    {
      *(_DWORD *)aBlock = 136446210;
      *(void *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
      _os_log_impl(&dword_181A5C000, v25, v33, "%{public}s called with null listener, no backtrace", aBlock, 0xCu);
    }

    goto LABEL_52;
  }

  if (v34)
  {
    *(_DWORD *)aBlock = 136446466;
    *(void *)&aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
    *(_WORD *)&aBlock[12] = 2082;
    *(void *)&aBlock[14] = v32;
    _os_log_impl( &dword_181A5C000,  v25,  v33,  "%{public}s called with null listener, dumping backtrace:%{public}s",  aBlock,  0x16u);
  }

  free(v32);
  if (v24) {
    goto LABEL_54;
  }
LABEL_19:
}

              _os_log_impl(&dword_181A5C000, v38, v39, v40, (uint8_t *)&v105, 0xCu);
              goto LABEL_53;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            dispatch_source_t v36 = (os_log_s *)(id)gLogObj;
            dispatch_source_t v37 = type[0];
            if (os_log_type_enabled(v36, type[0]))
            {
              v105 = 136446210;
              v106 = "isSysctlAllowlisted";
              os_log_type_t v38 = v36;
              uint64_t v39 = v37;
              id v40 = "%{public}s called with null name";
              goto LABEL_52;
            }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      handler[0] = OS_LOG_TYPE_ERROR;
      v64[0] = 0;
      if (handler[0] == OS_LOG_TYPE_FAULT)
      {
        id v23 = (os_log_s *)__nwlog_obj();
        id v24 = handler[0];
        if (!os_log_type_enabled(v23, handler[0])) {
          goto LABEL_106;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
        uint64_t v25 = "%{public}s called with null queue";
        goto LABEL_105;
      }

      if (v64[0])
      {
        uint64_t v31 = (char *)__nw_create_backtrace_string();
        id v23 = (os_log_s *)__nwlog_obj();
        id v24 = handler[0];
        uint64_t v49 = os_log_type_enabled(v23, handler[0]);
        if (v31)
        {
          if (!v49) {
            goto LABEL_72;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v31;
          BOOL v33 = "%{public}s called with null queue, dumping backtrace:%{public}s";
          goto LABEL_71;
        }

        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
          uint64_t v25 = "%{public}s called with null queue, no backtrace";
          goto LABEL_105;
        }
      }

      else
      {
        id v23 = (os_log_s *)__nwlog_obj();
        id v24 = handler[0];
        if (os_log_type_enabled(v23, handler[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
          uint64_t v25 = "%{public}s called with null queue, backtrace limit exceeded";
          goto LABEL_105;
        }
      }

      free(backtrace_string);
      goto LABEL_62;
    }

    uint64_t v22 = (os_log_s *)__nwlog_obj();
    id v23 = type[0];
    if (!os_log_type_enabled(v22, type[0])) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
    id v24 = "%{public}s called with null masque";
LABEL_61:
    _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
LABEL_62:
    if (v21) {
      free(v21);
    }
    return 0LL;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v30[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      id v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
      id v24 = "%{public}s called with null demux_options";
      goto LABEL_61;
    }

    if (!LOBYTE(v30[0]))
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      id v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
      id v24 = "%{public}s called with null demux_options, backtrace limit exceeded";
      goto LABEL_61;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v22 = (os_log_s *)__nwlog_obj();
    id v23 = type[0];
    os_log_type_t v28 = os_log_type_enabled(v22, type[0]);
    if (backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v27 = "%{public}s called with null demux_options, dumping backtrace:%{public}s";
        goto LABEL_51;
      }

      goto LABEL_52;
    }

    if (!v28) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
    id v24 = "%{public}s called with null demux_options, no backtrace";
    goto LABEL_61;
  }

  uint64_t v5 = *(_DWORD *)(a1 + 508);
  if ((a3 & 1) != 0)
  {
    if (v5 == 5)
    {
      if ((*(_BYTE *)(a1 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        id v6 = (os_log_s *)gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s%sCannot send demux options in disconnected state",  buf,  0x16u);
        }
      }

      return 0LL;
    }
  }

  else if (v5 != 4)
  {
    return 0LL;
  }

  uint64_t v7 = (int *)(a1 + 527);
  os_log_type_t v8 = *(_DWORD *)(a1 + 527);
  if ((v8 & 8) == 0) {
    return 0LL;
  }
  *(void *)os_log_type_t type = 0LL;
  BOOL v33 = type;
  id v34 = 0x2000000000LL;
  os_log_type_t v35 = 0LL;
  BOOL v10 = MEMORY[0x1895F87A8];
  v31[0] = MEMORY[0x1895F87A8];
  v31[1] = 0x40000000LL;
  v31[2] = ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke;
  v31[3] = &unk_189BBA328;
  v31[4] = type;
  *(void *)buf = MEMORY[0x1895F87A8];
  *(void *)&buf[8] = 0x40000000LL;
  *(void *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
  dispatch_source_t v37 = (const char *)&unk_189BB9D20;
  os_log_type_t v38 = v31;
  nw_protocol_options_access_handle(a2, buf);
  v30[4] = 0LL;
  alloc = (dispatch_object_s *)dispatch_data_create_alloc();
  v30[0] = 0LL;
  v30[1] = v30;
  v30[2] = 0x2000000000LL;
  v30[3] = 0LL;
  v29[0] = v10;
  v29[1] = 0x40000000LL;
  v29[2] = ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke_2;
  v29[3] = &unk_189BBA350;
  v29[4] = v30;
  *(void *)buf = v10;
  *(void *)&buf[8] = 0x40000000LL;
  *(void *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
  dispatch_source_t v37 = (const char *)&unk_189BB9D20;
  os_log_type_t v38 = v29;
  nw_protocol_options_access_handle(a2, buf);
  metadata_for_capsule = nw_http_create_metadata_for_capsule(16770304LL, alloc);
  int v9 = nw_masque_send_metadata(a1, (uint64_t)metadata_for_capsule, *(void *)(a1 + 32));
  id v13 = *v7;
  if ((v9 & 1) != 0)
  {
    if ((v13 & 0x10000) != 0) {
      goto LABEL_29;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    id v14 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_29;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = a1 + 531;
    *(_WORD *)&buf[22] = 2080;
    dispatch_source_t v37 = " ";
    uint64_t v15 = "%{public}s %{public}s%sSent REGISTER_DEMUX_PATTERN capsule";
    BOOL v16 = (os_log_s *)v14;
    os_log_type_t v17 = OS_LOG_TYPE_DEBUG;
    uint64_t v18 = 32;
  }

  else
  {
    if ((v13 & 0x10000) != 0) {
      goto LABEL_29;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    int64_t v19 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_29;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = a1 + 531;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = " ";
    uint64_t v15 = "%{public}s%sFailed to send REGISTER_DEMUX_PATTERN capsule";
    BOOL v16 = (os_log_s *)v19;
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    uint64_t v18 = 22;
  }

  _os_log_impl(&dword_181A5C000, v16, v17, v15, buf, v18);
LABEL_29:
  if (alloc) {
    dispatch_release(alloc);
  }
  if (metadata_for_capsule) {
    os_release(metadata_for_capsule);
  }
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(type, 8);
  return v9;
}

    free(backtrace_string);
    goto LABEL_66;
  }

  BOOL v16 = (os_log_s *)__nwlog_obj();
  os_log_type_t v17 = type;
  if (os_log_type_enabled(v16, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
    uint64_t v18 = "%{public}s called with null frames";
    goto LABEL_65;
  }

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v13) {
    free(v13);
  }
  return 0LL;
}

      if (!v7) {
        return 0LL;
      }
      dispatch_source_t v36 = (void *)v7;
LABEL_54:
      free(v36);
      return 0LL;
    }

    if (!v53)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = gLogObj;
      int v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        BOOL v10 = "%{public}s FIONBIO failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_50;
      }

      goto LABEL_52;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = gLogObj;
    int v9 = type;
    uint64_t v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        BOOL v10 = "%{public}s FIONBIO failed %{darwin.errno}d, no backtrace";
        goto LABEL_50;
      }

      goto LABEL_52;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v11;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = backtrace_string;
      int64_t v19 = "%{public}s FIONBIO failed %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_25;
    }

      close(v8);
      goto LABEL_53;
    }

  os_log_type_t v38 = *(void *)(a1 + 40);
  if (!v38 || (*(_WORD *)(v38 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v39 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      id v40 = *(void *)(a1 + 40);
      char v41 = v40 == 0;
      if (v40) {
        uint64_t v42 = (const char *)(v40 + 284);
      }
      else {
        uint64_t v42 = "";
      }
      *(_DWORD *)buf = 136446978;
      os_log_type_t v57 = "nw_http_connect_reattach_protocols_block_invoke";
      BOOL v58 = 2082;
      uint64_t v59 = (void *)v42;
      if (v41) {
        __int16 v43 = "";
      }
      else {
        __int16 v43 = " ";
      }
      os_log_type_t v60 = 2080;
      BOOL v61 = v43;
      os_log_type_t v62 = 2114;
      os_log_type_t v63 = a3;
      _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sFailed to attach protocol %{public}@",  buf,  0x2Au);
    }
  }

  BOOL result = 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  return result;
}

      free(v26);
      if (!v13) {
        return;
      }
LABEL_80:
      id v34 = (char *)v13;
LABEL_88:
      free(v34);
      return;
    }

    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    BOOL v16 = "%{public}s called with null http2_transport";
LABEL_78:
    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_79;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    id v13 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    dispatch_source_t v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v14 = (os_log_s *)__nwlog_obj();
      uint64_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      BOOL v16 = "%{public}s called with null other_protocol";
      goto LABEL_78;
    }

    if (!v36)
    {
      id v14 = (os_log_s *)__nwlog_obj();
      uint64_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      BOOL v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_78;
    }

    uint64_t v26 = (char *)__nw_create_backtrace_string();
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    uint64_t v29 = os_log_type_enabled(v14, type);
    if (!v26)
    {
      if (!v29) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      BOOL v16 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_78;
    }

    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      id v40 = 2082;
      char v41 = (nw_protocol_identifier *)v26;
      os_log_type_t v28 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

    goto LABEL_52;
  }

  if (gLogDatapath)
  {
    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      id v40 = 2082;
      char v41 = (nw_protocol_identifier *)(handle + 205);
      _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }

  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    id v40 = 2082;
    char v41 = (nw_protocol_identifier *)(handle + 205);
    int v9 = "%{public}s %{public}s attempting to disconnect on protocol that doesn't have entry in table, ignoring";
    BOOL v10 = (os_log_s *)v8;
    id v11 = 22;
LABEL_14:
    _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return;
  }

  uint64_t v5 = output_handler_context[4];
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    id v40 = 2082;
    char v41 = (nw_protocol_identifier *)(handle + 205);
    uint64_t v42 = 2048;
    __int16 v43 = a2;
    os_log_type_t v44 = 2048;
    nw_endpoint_t v45 = output_handler_context;
    int v9 = "%{public}s %{public}s protocol (%p) node (%p) has no stream pointer as extra";
    BOOL v10 = (os_log_s *)v12;
    id v11 = 42;
    goto LABEL_14;
  }

  nw_http2_transport_stream_close((uint64_t)handle, v5);
  callbacks = a2->callbacks;
  if (callbacks)
  {
    disconnected = (void (*)(nw_protocol *, char *))callbacks->disconnected;
    if (disconnected)
    {
      disconnected(a2, handle);
      return;
    }
  }

  __nwlog_obj();
  identifier = a2->identifier;
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)buf = 136446466;
  uint64_t v39 = "nw_protocol_http2_transport_disconnect";
  id v40 = 2082;
  char v41 = identifier;
  int64_t v19 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  dispatch_source_t v36 = 0;
  if (__nwlog_fault(v19, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = (os_log_s *)__nwlog_obj();
      uint64_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_86;
      }
      uint64_t v22 = a2->identifier;
      if (!v22) {
        uint64_t v22 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      id v40 = 2082;
      char v41 = v22;
      id v23 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_85:
      _os_log_impl(&dword_181A5C000, v20, v21, v23, buf, 0x16u);
      goto LABEL_86;
    }

    if (!v36)
    {
      uint64_t v20 = (os_log_s *)__nwlog_obj();
      uint64_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_86;
      }
      BOOL v33 = a2->identifier;
      if (!v33) {
        BOOL v33 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      id v40 = 2082;
      char v41 = v33;
      id v23 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_85;
    }

    uint64_t v30 = (char *)__nw_create_backtrace_string();
    uint64_t v20 = (os_log_s *)__nwlog_obj();
    uint64_t v21 = type;
    uint64_t v31 = os_log_type_enabled(v20, type);
    if (!v30)
    {
      if (!v31) {
        goto LABEL_86;
      }
      os_log_type_t v35 = a2->identifier;
      if (!v35) {
        os_log_type_t v35 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      id v40 = 2082;
      char v41 = v35;
      id v23 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
      goto LABEL_85;
    }

    if (v31)
    {
      if (a2->identifier) {
        os_log_type_t v32 = a2->identifier;
      }
      else {
        os_log_type_t v32 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      id v40 = 2082;
      char v41 = v32;
      uint64_t v42 = 2082;
      __int16 v43 = (nw_protocol *)v30;
      _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    free(v30);
  }

        free(backtrace_string);
        goto LABEL_75;
      }

      if (!v42) {
        goto LABEL_75;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "send_callback";
      uint64_t v25 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }

    else
    {
      os_log_type_t v32 = (os_log_s *)__nwlog_obj();
      BOOL v33 = type[0];
      if (!os_log_type_enabled(v32, type[0])) {
        goto LABEL_75;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "send_callback";
      uint64_t v25 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }

    BOOL v48 = v32;
    uint64_t v49 = v33;
    os_log_type_t v50 = 12;
    goto LABEL_74;
  }

  os_log_type_t v8 = &qword_18C45F000;
  if (gLogDatapath)
  {
    id v34 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = a5 + 205;
      _os_log_impl(&dword_181A5C000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", (uint8_t *)buf, 0x16u);
    }

    if (gLogDatapath)
    {
      os_log_type_t v35 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446722;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a5 + 205;
        HIWORD(buf[2]) = 2048;
        uint64_t v73 = a3;
        _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s asked to write %lu bytes by nghttp2",  (uint8_t *)buf,  0x20u);
      }
    }
  }

  v65[0] = 0LL;
  v65[1] = v65;
  v64[0] = 0LL;
  v64[1] = v64;
  int v9 = *(void *)(a5 + 32);
  if (v9)
  {
    BOOL v10 = *(void *)(v9 + 24);
    if (v10)
    {
      id v11 = *(unsigned int (**)(void, uint64_t, uint64_t, char *, uint64_t, void *))(v10 + 88);
      if (v11)
      {
        if (!v11(*(void *)(a5 + 32), a5, 1LL, a3, 0xFFFFFFFFLL, v65)) {
          return -504LL;
        }
        id v12 = v65[0];
        if (!v65[0]) {
          return -504LL;
        }
        buf[0] = 0LL;
        buf[1] = buf;
        LODWORD(v73) = 0;
        buf[2] = 0x2000000000LL;
        v54[0] = MEMORY[0x1895F87A8];
        v54[1] = 0x40000000LL;
        v55 = ___ZL13send_callbackP15nghttp2_sessionPKhmiPv_block_invoke;
        uint64_t v56 = &unk_189BBCF60;
        os_log_type_t v57 = buf;
        BOOL v58 = a3;
        uint64_t v59 = a2;
        os_log_type_t v60 = a5;
        BOOL v61 = v65;
        os_log_type_t v62 = v64;
        do
        {
          if (!v12) {
            break;
          }
          id v13 = *(void *)(v12 + 32);
          id v14 = ((uint64_t (*)(void *))v55)(v54);
          id v12 = v13;
        }

        while ((v14 & 1) != 0);
        uint64_t v15 = *(void *)(v9 + 24);
        if (v15)
        {
          BOOL v16 = *(void (**)(uint64_t, void *))(v15 + 96);
          if (v16)
          {
            v16(v9, v64);
LABEL_14:
            os_log_type_t v17 = v65[0];
            if (v65[0])
            {
              do
              {
                uint64_t v18 = *(void *)(v17 + 32);
                nw_frame_finalize(v17);
                os_log_type_t v17 = v18;
              }

              while (v18);
            }

            if (*((_BYTE *)v8 + 1537))
            {
              __int16 v43 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
              {
                os_log_type_t v44 = *(_DWORD *)(buf[1] + 24LL);
                *(_DWORD *)os_log_type_t type = 136446722;
                v67 = "send_callback";
                char v68 = 2082;
                id v69 = (const char *)(a5 + 205);
                os_log_type_t v70 = 1024;
                LODWORD(v71) = v44;
                _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s wrote %u bytes",  (uint8_t *)type,  0x1Cu);
              }
            }

            int64_t v19 = *(unsigned int *)(buf[1] + 24LL);
            _Block_object_dispose(buf, 8);
            return v19;
          }
        }

        __nwlog_obj();
        dispatch_source_t v36 = *(const char **)(v9 + 16);
        if (!v36) {
          dispatch_source_t v36 = "invalid";
        }
        *(_DWORD *)os_log_type_t type = 136446466;
        v67 = "send_callback";
        char v68 = 2082;
        id v69 = v36;
        dispatch_source_t v37 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v63 = OS_LOG_TYPE_ERROR;
        v53 = 0;
        if (__nwlog_fault(v37, &v63, &v53))
        {
          if (v63 == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v38 = (os_log_s *)__nwlog_obj();
            uint64_t v39 = v63;
            if (!os_log_type_enabled(v38, v63)) {
              goto LABEL_83;
            }
            id v40 = *(const char **)(v9 + 16);
            if (!v40) {
              id v40 = "invalid";
            }
            *(_DWORD *)os_log_type_t type = 136446466;
            v67 = "send_callback";
            char v68 = 2082;
            id v69 = v40;
            char v41 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
            goto LABEL_82;
          }

          if (!v53)
          {
            os_log_type_t v38 = (os_log_s *)__nwlog_obj();
            uint64_t v39 = v63;
            if (!os_log_type_enabled(v38, v63)) {
              goto LABEL_83;
            }
            v51 = *(const char **)(v9 + 16);
            if (!v51) {
              v51 = "invalid";
            }
            *(_DWORD *)os_log_type_t type = 136446466;
            v67 = "send_callback";
            char v68 = 2082;
            id v69 = v51;
            char v41 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
            goto LABEL_82;
          }

          nw_endpoint_t v45 = (char *)__nw_create_backtrace_string();
          os_log_type_t v38 = (os_log_s *)__nwlog_obj();
          uint64_t v39 = v63;
          uint64_t v46 = os_log_type_enabled(v38, v63);
          if (v45)
          {
            if (v46)
            {
              os_log_type_t v47 = *(const char **)(v9 + 16);
              if (!v47) {
                os_log_type_t v47 = "invalid";
              }
              *(_DWORD *)os_log_type_t type = 136446722;
              v67 = "send_callback";
              char v68 = 2082;
              id v69 = v47;
              os_log_type_t v70 = 2082;
              BOOL v71 = v45;
              _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s",  (uint8_t *)type,  0x20u);
            }

            free(v45);
            os_log_type_t v8 = &qword_18C45F000;
            goto LABEL_83;
          }

          os_log_type_t v8 = &qword_18C45F000;
          if (v46)
          {
            id v52 = *(const char **)(v9 + 16);
            if (!v52) {
              id v52 = "invalid";
            }
            *(_DWORD *)os_log_type_t type = 136446466;
            v67 = "send_callback";
            char v68 = 2082;
            id v69 = v52;
            char v41 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
LABEL_82:
            _os_log_impl(&dword_181A5C000, v38, v39, v41, (uint8_t *)type, 0x16u);
          }
        }

        free(v26);
        goto LABEL_53;
      }

      __nwlog_obj();
      os_log_type_t v70 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v116 = "nw_necp_append_tlv";
      BOOL v61 = (char *)_os_log_send_and_compose_impl();

      v111 = OS_LOG_TYPE_ERROR;
      BOOL v110 = 0;
      if (__nwlog_fault(v61, &v111, &v110))
      {
        if (v111 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v71 = v111;
          if (os_log_type_enabled(v62, v111))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_181A5C000, v62, v71, "%{public}s called with null beyond", buf, 0xCu);
          }
        }

        else if (v110)
        {
          v86 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          __int16 v87 = v111;
          v88 = os_log_type_enabled(v62, v111);
          if (v86)
          {
            if (v88)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v116 = "nw_necp_append_tlv";
              os_log_type_t v117 = 2082;
              char v118 = (size_t)v86;
              _os_log_impl( &dword_181A5C000,  v62,  v87,  "%{public}s called with null beyond, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v86);
            if (!v61) {
              goto LABEL_190;
            }
            goto LABEL_189;
          }

          if (v88)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_181A5C000, v62, v87, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v98 = v111;
          if (os_log_type_enabled(v62, v111))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v116 = "nw_necp_append_tlv";
            _os_log_impl( &dword_181A5C000,  v62,  v98,  "%{public}s called with null beyond, backtrace limit exceeded",  buf,  0xCu);
          }
        }

        goto LABEL_187;
      }

    free(backtrace_string);
    if (!v20) {
      goto LABEL_93;
    }
    goto LABEL_92;
  }

  if (!gateway_key_config_length)
  {
    __nwlog_obj();
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v54 = "nw_proxy_config_create_oblivious_http";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        id v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_181A5C000, v21, v28, "%{public}s called with null gateway_key_config_length", buf, 0xCu);
      }
    }

    else if (v51)
    {
      id v40 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v41 = type;
      uint64_t v42 = os_log_type_enabled(v21, type);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          id v54 = "nw_proxy_config_create_oblivious_http";
          v55 = 2082;
          uint64_t v56 = v40;
          _os_log_impl( &dword_181A5C000,  v21,  v41,  "%{public}s called with null gateway_key_config_length, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v40);
LABEL_91:
        if (!v20)
        {
LABEL_93:
          fallback_privacy_proxy = 0LL;
          goto LABEL_12;
        }

    if (v18)
    {
      if (v27)
      {
        if (v33)
        {
          os_log_type_t v35 = v27 + v33 - 1;
          *(_WORD *)(v35 - 1) = 2573;
          dispatch_source_t v36 = (_BYTE *)(v35 - 2);
          dispatch_source_t v37 = v18;
          do
          {
            if ((v37 & 0xF) >= 0xA) {
              os_log_type_t v38 = (v37 & 0xF) + 55;
            }
            else {
              os_log_type_t v38 = v37 & 0xF | 0x30;
            }
            *v36-- = v38;
            uint64_t v22 = v37 > 0xF;
            v37 >>= 4;
          }

          while (v22);
LABEL_60:
          uint64_t v39 = v33;
          id v40 = v25 - v33;
          if (v25 != v33) {
            memmove((void *)(v27 + v33), (const void *)(v27 + v25), v18);
          }
          char v41 = v135;
          if (*(void *)(*(void *)(a1[4] + 8LL) + 24LL))
          {
            if (v27)
            {
              uint64_t v42 = v27 + v39 + v18;
              *(_WORD *)uint64_t v42 = 2573;
              if (v30)
              {
                *(_BYTE *)(v42 + 6) = 10;
                *(_DWORD *)(v42 + 2) = 218762544;
              }

              goto LABEL_66;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v140 = "nw_http1_connection_write_chunk_trailer";
            v104 = (char *)_os_log_send_and_compose_impl();
            v138 = OS_LOG_TYPE_ERROR;
            v137 = 0;
            if (v138 == OS_LOG_TYPE_FAULT)
            {
              v105 = (os_log_s *)__nwlog_obj();
              v106 = v138;
              if (os_log_type_enabled(v105, v138))
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                os_log_type_t v107 = "%{public}s called with null buffer";
                goto LABEL_267;
              }

              goto LABEL_268;
            }

            if (!v137)
            {
              v105 = (os_log_s *)__nwlog_obj();
              v106 = v138;
              if (os_log_type_enabled(v105, v138))
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                os_log_type_t v107 = "%{public}s called with null buffer, backtrace limit exceeded";
                goto LABEL_267;
              }

              goto LABEL_268;
            }

            v123 = (char *)__nw_create_backtrace_string();
            v105 = (os_log_s *)__nwlog_obj();
            v106 = v138;
            v126 = os_log_type_enabled(v105, v138);
            if (!v123)
            {
              if (v126)
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                os_log_type_t v107 = "%{public}s called with null buffer, no backtrace";
                goto LABEL_267;
              }

              goto LABEL_268;
            }

            if (v126)
            {
              *(_DWORD *)buf = 136446466;
              v140 = "nw_http1_connection_write_chunk_trailer";
              v141 = 2082;
              v142 = v123;
              __int16 v125 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
              goto LABEL_207;
            }
          }

          else
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v140 = "nw_http1_connection_write_chunk_trailer";
            v104 = (char *)_os_log_send_and_compose_impl();
            v138 = OS_LOG_TYPE_ERROR;
            v137 = 0;
            if (v138 == OS_LOG_TYPE_FAULT)
            {
              v105 = (os_log_s *)__nwlog_obj();
              v106 = v138;
              if (os_log_type_enabled(v105, v138))
              {
                *(_DWORD *)buf = 136446210;
                v140 = "nw_http1_connection_write_chunk_trailer";
                os_log_type_t v107 = "%{public}s called with null http1_connection";
LABEL_267:
                _os_log_impl(&dword_181A5C000, v105, v106, v107, buf, 0xCu);
              }
  }

    goto LABEL_53;
  }

  BOOL v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  dispatch_source_t v36 = "handleConstrained";
  dispatch_source_t v37 = 1024;
  *(_DWORD *)os_log_type_t v38 = v10;
  id v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v33 = 0;
  if (__nwlog_fault(v12, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (os_log_s *)(id)gLogObj;
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "handleConstrained";
        dispatch_source_t v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = v10;
        uint64_t v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_35:
        os_log_type_t v28 = v13;
        uint64_t v29 = v14;
LABEL_36:
        _os_log_impl(&dword_181A5C000, v28, v29, v15, buf, 0x12u);
      }
    }

    else
    {
      if (v33)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v13 = (os_log_s *)(id)gLogObj;
        uint64_t v22 = type;
        id v23 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            dispatch_source_t v36 = "handleConstrained";
            dispatch_source_t v37 = 1024;
            *(_DWORD *)os_log_type_t v38 = v10;
            *(_WORD *)&void v38[4] = 2082;
            *(void *)&v38[6] = v21;
            _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v21);
          goto LABEL_38;
        }

        if (!v23) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "handleConstrained";
        dispatch_source_t v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = v10;
        uint64_t v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        os_log_type_t v28 = v13;
        uint64_t v29 = v22;
        goto LABEL_36;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (os_log_s *)(id)gLogObj;
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "handleConstrained";
        dispatch_source_t v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = v10;
        uint64_t v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_35;
      }
    }

    goto LABEL_53;
  }

  BOOL v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  dispatch_source_t v36 = "handleUltraConstrained";
  dispatch_source_t v37 = 1024;
  *(_DWORD *)os_log_type_t v38 = v10;
  id v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v33 = 0;
  if (__nwlog_fault(v12, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (os_log_s *)(id)gLogObj;
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "handleUltraConstrained";
        dispatch_source_t v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = v10;
        uint64_t v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_35:
        os_log_type_t v28 = v13;
        uint64_t v29 = v14;
LABEL_36:
        _os_log_impl(&dword_181A5C000, v28, v29, v15, buf, 0x12u);
      }
    }

    else
    {
      if (v33)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v13 = (os_log_s *)(id)gLogObj;
        uint64_t v22 = type;
        id v23 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            dispatch_source_t v36 = "handleUltraConstrained";
            dispatch_source_t v37 = 1024;
            *(_DWORD *)os_log_type_t v38 = v10;
            *(_WORD *)&void v38[4] = 2082;
            *(void *)&v38[6] = v21;
            _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v21);
          goto LABEL_38;
        }

        if (!v23) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "handleUltraConstrained";
        dispatch_source_t v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = v10;
        uint64_t v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        os_log_type_t v28 = v13;
        uint64_t v29 = v22;
        goto LABEL_36;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (os_log_s *)(id)gLogObj;
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "handleUltraConstrained";
        dispatch_source_t v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = v10;
        uint64_t v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_35;
      }
    }

    goto LABEL_53;
  }

  BOOL v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  dispatch_source_t v36 = "handleExpensive";
  dispatch_source_t v37 = 1024;
  *(_DWORD *)os_log_type_t v38 = v10;
  id v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v33 = 0;
  if (__nwlog_fault(v12, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (os_log_s *)(id)gLogObj;
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "handleExpensive";
        dispatch_source_t v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = v10;
        uint64_t v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
LABEL_35:
        os_log_type_t v28 = v13;
        uint64_t v29 = v14;
LABEL_36:
        _os_log_impl(&dword_181A5C000, v28, v29, v15, buf, 0x12u);
      }
    }

    else
    {
      if (v33)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v13 = (os_log_s *)(id)gLogObj;
        uint64_t v22 = type;
        id v23 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            dispatch_source_t v36 = "handleExpensive";
            dispatch_source_t v37 = 1024;
            *(_DWORD *)os_log_type_t v38 = v10;
            *(_WORD *)&void v38[4] = 2082;
            *(void *)&v38[6] = v21;
            _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v21);
          goto LABEL_38;
        }

        if (!v23) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "handleExpensive";
        dispatch_source_t v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = v10;
        uint64_t v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
        os_log_type_t v28 = v13;
        uint64_t v29 = v22;
        goto LABEL_36;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (os_log_s *)(id)gLogObj;
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "handleExpensive";
        dispatch_source_t v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = v10;
        uint64_t v15 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_35;
      }
    }

      free(v18);
      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int64_t v19 = (os_log_s *)(id)gLogObj;
    os_log_type_t v28 = uu[0];
    os_log_type_t v32 = os_log_type_enabled(v19, uu[0]);
    if (!backtrace_string)
    {
      if (!v32) {
        goto LABEL_50;
      }
      uint64_t v42 = objc_msgSend(v3, "pid", length, v45);
      *(_DWORD *)length = 136446466;
      *(void *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
      BOOL v48 = 1024;
      uint64_t v49 = v42;
      uint64_t v26 = "%{public}s Unable to extract interface name from agent request from pid %d, no backtrace";
      id v40 = v19;
      char v41 = v28;
      goto LABEL_49;
    }

    if (v32)
    {
      BOOL v33 = objc_msgSend(v3, "pid", length, v45);
      *(_DWORD *)length = 136446722;
      *(void *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
      BOOL v48 = 1024;
      uint64_t v49 = v33;
      os_log_type_t v50 = 2082;
      v51 = backtrace_string;
      uint64_t v31 = "%{public}s Unable to extract interface name from agent request from pid %d, dumping backtrace:%{public}s";
      goto LABEL_29;
    }

    goto LABEL_30;
  }

  [v3 request];
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  int v9 = xpc_dictionary_get_BOOL(v8, (const char *)networkd_privileged_key_remove);

  *(_OWORD *)uu = *(_OWORD *)uuid;
  if (a2)
  {
    BOOL v10 = nw_network_agent_copy_dictionary_for_uuid((const unsigned __int8 *)uu);
    id v11 = (void *)v10;
    if (!v10)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)length = 136446466;
        *(void *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
        BOOL v48 = 1024;
        uint64_t v49 = [v3 pid];
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to find agent for request from pid %d",  length,  0x12u);
      }

      BOOL v16 = 2LL;
      goto LABEL_37;
    }

    *(void *)length = 0LL;
    data = (const char *)xpc_dictionary_get_data((xpc_object_t)v10, "data", (size_t *)length);
    if (!data || *(void *)length < 0xD8uLL || (id v13 = data, *(void *)length != *((unsigned int *)data + 53) + 216LL))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        id v34 = [v3 pid];
        *(_DWORD *)length = 136446466;
        *(void *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
        BOOL v48 = 1024;
        uint64_t v49 = v34;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to parse agent for request from pid %d",  length,  0x12u);
      }

      BOOL v16 = -1006LL;
      goto LABEL_37;
    }

    if (strncmp(data + 16, "Persistent", 0x20uLL) || strncmp(v13 + 48, "Persistent", 0x20uLL))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = [v3 pid];
        *(_DWORD *)length = 136447234;
        *(void *)&length[4] = "internalHandleSetNetworkAgentOnInterface";
        BOOL v48 = 1024;
        uint64_t v49 = v15;
        os_log_type_t v50 = 2082;
        v51 = (void *)string;
        id v52 = 2082;
        v53 = v13 + 16;
        id v54 = 2082;
        v55 = v13 + 48;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Client pid %d not allowed to modify agent on %{public}s (domain:%{public}s, type:%{public}s)",  length,  0x30u);
      }

      BOOL v16 = 1LL;
LABEL_37:

      goto LABEL_61;
    }
  }

  if (v9) {
    __int16 v43 = nw_network_agent_remove_from_interface((uint64_t)string, (unsigned __int8 *)uu);
  }
  else {
    __int16 v43 = nw_network_agent_add_to_interface((uint64_t)string, (unsigned __int8 *)uu);
  }
  BOOL v16 = v43;
LABEL_61:

  return v16;
}

    id v14 = v17;
    uint64_t v15 = v18;
    BOOL v16 = 12;
    goto LABEL_22;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_array_insert_object_at_index";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      uint64_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_array_insert_object_at_index";
      id v11 = "%{public}s called with null object";
      goto LABEL_52;
    }

    if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      uint64_t v18 = type;
      uint64_t v22 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (!v22) {
          goto LABEL_42;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v27 = "nw_array_insert_object_at_index";
        os_log_type_t v28 = 2082;
        uint64_t v29 = backtrace_string;
        uint64_t v21 = "%{public}s called with null object, dumping backtrace:%{public}s";
LABEL_41:
        _os_log_impl(&dword_181A5C000, v17, v18, v21, buf, 0x16u);
LABEL_42:
        free(backtrace_string);
        if (v4) {
          goto LABEL_5;
        }
        return;
      }

      if (!v22) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_array_insert_object_at_index";
      id v11 = "%{public}s called with null object, no backtrace";
    }

    else
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      uint64_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_array_insert_object_at_index";
      id v11 = "%{public}s called with null object, backtrace limit exceeded";
    }

    goto LABEL_52;
  }

  if (!atomic_load((unsigned __int8 *)(a1 + 40)))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    id v6 = (unint64_t *)(a1 + 16);
    os_log_type_t v8 = v7 + 8LL * (void)a3;
    if (v6[1] >= v8)
    {
      std::vector<nw_object_wrapper_t>::emplace<nw_object *&>(v6, v8, &v25);
      return;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_array_insert_object_at_index";
    os_log_type_t v28 = 2048;
    uint64_t v29 = a3;
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v9 = (os_log_s *)gLogObj;
      BOOL v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v27 = "nw_array_insert_object_at_index";
      os_log_type_t v28 = 2048;
      uint64_t v29 = a3;
      id v11 = "%{public}s array index out of range: %lu";
LABEL_21:
      id v14 = v9;
      uint64_t v15 = v10;
      BOOL v16 = 22;
LABEL_22:
      _os_log_impl(&dword_181A5C000, v14, v15, v11, buf, v16);
      goto LABEL_23;
    }

    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v9 = (os_log_s *)gLogObj;
      BOOL v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v27 = "nw_array_insert_object_at_index";
      os_log_type_t v28 = 2048;
      uint64_t v29 = a3;
      id v11 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
      goto LABEL_21;
    }

    id v12 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (os_log_s *)gLogObj;
    BOOL v10 = type;
    id v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v27 = "nw_array_insert_object_at_index";
      os_log_type_t v28 = 2048;
      uint64_t v29 = a3;
      id v11 = "%{public}s array index out of range: %lu, no backtrace";
      goto LABEL_21;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v27 = "nw_array_insert_object_at_index";
      os_log_type_t v28 = 2048;
      uint64_t v29 = a3;
      uint64_t v30 = 2082;
      uint64_t v31 = v12;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s array index out of range: %lu, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    free(v12);
LABEL_23:
    if (v4) {
      goto LABEL_5;
    }
    return;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v27 = "nw_array_insert_object_at_index";
  id v4 = (char *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v4))
  {
LABEL_5:
    free(v4);
    return;
  }

  __break(1u);
}

        goto LABEL_53;
      }

      if (!(_BYTE)out_signature_length)
      {
        __nwlog_obj();
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v44 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v48 = "nw_browser_start_query_record_for_endpoint_locked";
          _os_log_impl( &dword_181A5C000,  v20,  v44,  "%{public}s called with null fullname, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      os_log_type_t v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v41 = type[0];
      uint64_t v42 = os_log_type_enabled(v20, type[0]);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v48 = "nw_browser_start_query_record_for_endpoint_locked";
          _os_log_impl(&dword_181A5C000, v20, v41, "%{public}s called with null fullname, no backtrace", buf, 0xCu);
        }

        goto LABEL_52;
      }

      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v48 = "nw_browser_start_query_record_for_endpoint_locked";
        uint64_t v49 = 2082;
        *(void *)os_log_type_t v50 = v38;
        _os_log_impl( &dword_181A5C000,  v20,  v41,  "%{public}s called with null fullname, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        __int16 v72 = "nw_protocol_http3_stream_disconnect";
        id v24 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        id v69 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v25 = (os_log_s *)gLogObj;
          uint64_t v26 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v72 = "nw_protocol_http3_stream_disconnect";
            uint64_t v27 = "%{public}s Failed to generate stream cancellation instruction";
            goto LABEL_65;
          }

          goto LABEL_66;
        }

        if (v69)
        {
          os_log_type_t v28 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v25 = (os_log_s *)gLogObj;
          uint64_t v26 = type;
          uint64_t v29 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v28)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              __int16 v72 = "nw_protocol_http3_stream_disconnect";
              uint64_t v73 = 2082;
              __int16 v74 = v28;
              _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s Failed to generate stream cancellation instruction, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v28);
            goto LABEL_66;
          }

          if (!v29)
          {
LABEL_66:
            if (v24) {
              free(v24);
            }
            goto LABEL_68;
          }

          *(_DWORD *)buf = 136446210;
          __int16 v72 = "nw_protocol_http3_stream_disconnect";
          uint64_t v27 = "%{public}s Failed to generate stream cancellation instruction, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v25 = (os_log_s *)gLogObj;
          uint64_t v26 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_66;
          }
          *(_DWORD *)buf = 136446210;
          __int16 v72 = "nw_protocol_http3_stream_disconnect";
          uint64_t v27 = "%{public}s Failed to generate stream cancellation instruction, backtrace limit exceeded";
        }

        if (!v25) {
          return;
        }
        goto LABEL_53;
      }

      if (!(_BYTE)size_ptr)
      {
        uint64_t v26 = (os_log_s *)__nwlog_obj();
        uint64_t v27 = buffer_ptr;
        if (os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "nw_http3_add_edges";
          os_log_type_t v28 = "%{public}s http3->remote_endpoint is not registered when connected, backtrace limit exceeded";
          goto LABEL_51;
        }

        goto LABEL_52;
      }

      uint64_t v29 = (char *)__nw_create_backtrace_string();
      uint64_t v26 = (os_log_s *)__nwlog_obj();
      uint64_t v27 = buffer_ptr;
      v55 = os_log_type_enabled(v26, (os_log_type_t)buffer_ptr);
      if (!v29)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "nw_http3_add_edges";
          os_log_type_t v28 = "%{public}s http3->remote_endpoint is not registered when connected, no backtrace";
          goto LABEL_51;
        }

        goto LABEL_52;
      }

      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v61 = "nw_http3_add_edges";
        os_log_type_t v62 = 2082;
        os_log_type_t v63 = (nw_protocol *)v29;
        uint64_t v31 = "%{public}s http3->remote_endpoint is not registered when connected, dumping backtrace:%{public}s";
        goto LABEL_44;
      }

      free(backtrace_string);
      goto LABEL_62;
    }

    uint64_t v26 = (os_log_s *)__nwlog_obj();
    uint64_t v27 = type;
    if (!os_log_type_enabled(v26, type)) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446210;
    dispatch_source_t v36 = "nw_protocol_http3_accept";
    os_log_type_t v28 = "%{public}s called with null protocol";
LABEL_61:
    _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0xCu);
LABEL_62:
    if (v25) {
      free(v25);
    }
    return 0LL;
  }

  id v1 = *(void *)(a1 + 40);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    dispatch_source_t v36 = "nw_protocol_http3_accept";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v26 = (os_log_s *)__nwlog_obj();
      uint64_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_source_t v36 = "nw_protocol_http3_accept";
      os_log_type_t v28 = "%{public}s called with null http3";
      goto LABEL_61;
    }

    if (!v33)
    {
      uint64_t v26 = (os_log_s *)__nwlog_obj();
      uint64_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      dispatch_source_t v36 = "nw_protocol_http3_accept";
      os_log_type_t v28 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_61;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v26 = (os_log_s *)__nwlog_obj();
    uint64_t v27 = type;
    os_log_type_t v32 = os_log_type_enabled(v26, type);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        dispatch_source_t v36 = "nw_protocol_http3_accept";
        dispatch_source_t v37 = 2082;
        os_log_type_t v38 = backtrace_string;
        uint64_t v31 = "%{public}s called with null http3, dumping backtrace:%{public}s";
        goto LABEL_51;
      }

      goto LABEL_52;
    }

    if (!v32) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446210;
    dispatch_source_t v36 = "nw_protocol_http3_accept";
    os_log_type_t v28 = "%{public}s called with null http3, no backtrace";
    goto LABEL_61;
  }

  nw_parameters_t v2 = (unsigned __int16 *)(v1 + 1373);
  if ((*(_WORD *)(v1 + 1373) & 0x10) == 0)
  {
    id v3 = *(void *)(v1 + 976);
    if (v3)
    {
      id v4 = mach_continuous_approximate_time();
      uint64_t v5 = v4 <= 1 ? 1LL : v4;
      id v6 = nw_delta_nanos(v3, v5);
      int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_proxy_setup_threshold_seconds,  5LL);
      if (v6 > 1000000000 * int64_with_default)
      {
        if (((*v2 | (*(unsigned __int8 *)(v1 + 1375) << 16)) & 0x400000) == 0)
        {
          os_log_type_t v8 = int64_with_default;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v9 = gLogObj;
          BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
          if (!result) {
            return result;
          }
          id v11 = *(_DWORD *)(v1 + 1280);
          *(_DWORD *)buf = 136447234;
          dispatch_source_t v36 = "nw_protocol_http3_accept";
          dispatch_source_t v37 = 2082;
          os_log_type_t v38 = (char *)(v1 + 1289);
          uint64_t v39 = 2080;
          id v40 = " ";
          char v41 = 1024;
          uint64_t v42 = v11;
          __int16 v43 = 2048;
          os_log_type_t v44 = v8;
          id v12 = "%{public}s %{public}s%s<i%u> denying join attempt because http3 connection not ready within %lld seconds";
          id v13 = (os_log_s *)v9;
          id v14 = 48;
          goto LABEL_32;
        }

        return 0LL;
      }
    }
  }

  if (*(_WORD *)(v1 + 1284))
  {
    uint64_t v15 = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_maximum_stall_count, 5LL);
    BOOL v16 = *(unsigned __int16 *)(v1 + 1373) | (*(unsigned __int8 *)(v1 + 1375) << 16);
    if (v15 < *(unsigned __int16 *)(v1 + 1284))
    {
      if ((v16 & 0x400000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = gLogObj;
        BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
        if (!result) {
          return result;
        }
        uint64_t v18 = *(_DWORD *)(v1 + 1280);
        int64_t v19 = *(unsigned __int16 *)(v1 + 1284);
        *(_DWORD *)buf = 136447234;
        dispatch_source_t v36 = "nw_protocol_http3_accept";
        dispatch_source_t v37 = 2082;
        os_log_type_t v38 = (char *)(v1 + 1289);
        uint64_t v39 = 2080;
        id v40 = " ";
        char v41 = 1024;
        uint64_t v42 = v18;
        __int16 v43 = 1024;
        LODWORD(v44) = v19;
        id v12 = "%{public}s %{public}s%s<i%u> denying join attempt because http3 connection has hit %u stalls";
        id v13 = (os_log_s *)v17;
        id v14 = 44;
        goto LABEL_32;
      }

      return 0LL;
    }
  }

  else
  {
    BOOL v16 = *v2 | (*(unsigned __int8 *)(v1 + 1375) << 16);
  }

  if ((v16 & 8) != 0)
  {
    if ((v16 & 0x400000) != 0) {
      return 0LL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v22 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    id v23 = *(_DWORD *)(v1 + 1280);
    *(_DWORD *)buf = 136446978;
    dispatch_source_t v36 = "nw_protocol_http3_accept";
    dispatch_source_t v37 = 2082;
    os_log_type_t v38 = (char *)(v1 + 1289);
    uint64_t v39 = 2080;
    id v40 = " ";
    char v41 = 1024;
    uint64_t v42 = v23;
    id v12 = "%{public}s %{public}s%s<i%u> denying join attempt because http3 connection is closed";
LABEL_31:
    id v13 = (os_log_s *)v22;
    id v14 = 38;
LABEL_32:
    _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
    return 0LL;
  }

  if ((v16 & 0x80000) != 0)
  {
    if ((v16 & 0x400000) != 0) {
      return 0LL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v22 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    id v24 = *(_DWORD *)(v1 + 1280);
    *(_DWORD *)buf = 136446978;
    dispatch_source_t v36 = "nw_protocol_http3_accept";
    dispatch_source_t v37 = 2082;
    os_log_type_t v38 = (char *)(v1 + 1289);
    uint64_t v39 = 2080;
    id v40 = " ";
    char v41 = 1024;
    uint64_t v42 = v24;
    id v12 = "%{public}s %{public}s%s<i%u> denying join attempt because http3 has a better alternate path";
    goto LABEL_31;
  }

  BOOL result = 1LL;
  if ((v16 & 0x400000) == 0 && gLogDatapath)
  {
    uint64_t v20 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(_DWORD *)(v1 + 1280);
      *(_DWORD *)buf = 136446978;
      dispatch_source_t v36 = "nw_protocol_http3_accept";
      dispatch_source_t v37 = 2082;
      os_log_type_t v38 = (char *)(v1 + 1289);
      uint64_t v39 = 2080;
      id v40 = " ";
      char v41 = 1024;
      uint64_t v42 = v21;
      _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> allowing join attempt",  buf,  0x26u);
    }

    return 1LL;
  }

  return result;
}

    if (v24) {
      free(v24);
    }
    goto LABEL_60;
  }

  os_log_type_t v8 = v7;
  *((_DWORD *)v7 + 7) = a1;
  int v9 = v7 + 8;
  objc_storeStrong(v7 + 8, a2);
  BOOL v10 = *v9;
  if (!*v9)
  {
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    objc_storeStrong(v9, (id)nw_context_copy_implicit_context::implicit_context);
    BOOL v10 = *v9;
  }

  if (nw_context_is_inline(v10))
  {
    __nwlog_obj();
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buffer[0]) = 136446210;
    *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (__nwlog_fault(v28, buf, &v42))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v30 = buf[0];
        if (os_log_type_enabled(v29, (os_log_type_t)buf[0]))
        {
          LODWORD(buffer[0]) = 136446210;
          *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s Cannot use nw_interpose on inline contexts",  (uint8_t *)buffer,  0xCu);
        }
      }

      else if ((_BYTE)v42)
      {
        id v34 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = buf[0];
        dispatch_source_t v36 = os_log_type_enabled(v29, (os_log_type_t)buf[0]);
        if (v34)
        {
          if (v36)
          {
            LODWORD(buffer[0]) = 136446466;
            *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
            WORD6(buffer[0]) = 2082;
            *(void *)((char *)buffer + 14) = v34;
            _os_log_impl( &dword_181A5C000,  v29,  v35,  "%{public}s Cannot use nw_interpose on inline contexts, dumping backtrace:%{public}s",  (uint8_t *)buffer,  0x16u);
          }

          free(v34);
          goto LABEL_57;
        }

        if (v36)
        {
          LODWORD(buffer[0]) = 136446210;
          *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl( &dword_181A5C000,  v29,  v35,  "%{public}s Cannot use nw_interpose on inline contexts, no backtrace",  (uint8_t *)buffer,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = buf[0];
        if (os_log_type_enabled(v29, (os_log_type_t)buf[0]))
        {
          LODWORD(buffer[0]) = 136446210;
          *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl( &dword_181A5C000,  v29,  v38,  "%{public}s Cannot use nw_interpose on inline contexts, backtrace limit exceeded",  (uint8_t *)buffer,  0xCu);
        }
      }
    }

        if (*(_DWORD *)(v1 + 176) != 2 || (*v2 & 0x2000) == 0) {
          goto LABEL_95;
        }
        *(_DWORD *)os_log_type_t type = 0x4000;
        if (!setsockopt(*(_DWORD *)(v1 + 172), 6, 513, type, 4u))
        {
          if ((*v2 & 0x80) != 0) {
            goto LABEL_95;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v31 = gconnectionLogObj;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_95;
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v1 + 308;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v105) = *(_DWORD *)type;
          uint64_t v26 = "%{public}s %{public}s Set TCP_NOTSENT_LOWAT(%u)";
          uint64_t v27 = (os_log_s *)v31;
          os_log_type_t v28 = OS_LOG_TYPE_DEBUG;
          uint64_t v29 = 28;
          goto LABEL_79;
        }

        uint64_t v20 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v21 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = *(_DWORD *)(v1 + 172);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v1 + 308;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v105) = *(_DWORD *)type;
          WORD2(v105) = 1024;
          *(_DWORD *)((char *)&v105 + 6) = v22;
          WORD5(v105) = 1024;
          HIDWORD(v105) = v20;
          _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d",  buf,  0x28u);
        }

        id v23 = (os_log_s *)__nwlog_obj();
        id v24 = v23;
        if (v20 == 22)
        {
          if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            goto LABEL_95;
          }
          uint64_t v25 = *(_DWORD *)(v1 + 172);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = *(_DWORD *)type;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v25;
          LOWORD(v105) = 1024;
          *(_DWORD *)((char *)&v105 + 2) = 22;
          uint64_t v26 = "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d";
          uint64_t v27 = v24;
          os_log_type_t v28 = OS_LOG_TYPE_ERROR;
          uint64_t v29 = 30;
LABEL_79:
          _os_log_impl(&dword_181A5C000, v27, v28, v26, buf, v29);
LABEL_95:
          *(_DWORD *)(v1 + 180) &= ~0x800u;
          nw_socket_add_socket_events(v1, 1LL);
          nw_socket_fillout_socket_properties((nw_protocol *)(v1 - 96));
          nw_socket_internal_connect((void *)v1);
          nw_endpoint_t v45 = *(void *)(v1 + 48);
          if (v45)
          {
            uint64_t v46 = *(void *)(v45 + 24);
            if (v46)
            {
              os_log_type_t v47 = *(uint64_t (**)(uint64_t))(v46 + 112);
              if (v47)
              {
                if (*(_UNKNOWN **)(v45 + 40) == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v49 = *(void *)(v45 + 88);
                  if (v49) {
                    *(void *)(v45 + 88) = v49 + 1;
                  }
                  BOOL v48 = (void *)v47(v45);
                  if (*(_UNKNOWN **)(v45 + 40) == &nw_protocol_ref_counted_handle)
                  {
                    __int16 v91 = *(void *)(v45 + 88);
                    if (v91)
                    {
                      id v92 = v91 - 1;
                      *(void *)(v45 + 88) = v92;
                      if (!v92)
                      {
                        os_log_type_t v93 = *(void (***)(void))(v45 + 64);
                        if (v93)
                        {
                          *(void *)(v45 + 64) = 0LL;
                          aBlock = v93;
                          v93[2](v93);
                          _Block_release(aBlock);
                        }

                        if ((*(_BYTE *)(v45 + 72) & 1) != 0)
                        {
                          v94 = *(const void **)(v45 + 64);
                          if (v94) {
                            _Block_release(v94);
                          }
                        }

                        free((void *)v45);
                      }
                    }
                  }
                }

                else
                {
                  BOOL v48 = (void *)v47(*(void *)(v1 + 48));
                }

                if (v48)
                {
                  os_log_type_t v50 = v48;
                  v51 = (nw_protocol_stack *)v50[19];

                  id v52 = nw_protocol_stack_copy_transport_protocol(v51);
                  if (v52)
                  {
                    v53 = v52;
                    if (nw_protocol_options_is_tcp(v52))
                    {
                      maximum_segment_size = nw_tcp_options_get_maximum_segment_size(v53);
                      if (maximum_segment_size) {
                        nw_socket_set_maximum_segment_size(v1, maximum_segment_size);
                      }
                    }

                    os_release(v53);
                  }

                  if (v51) {
                    os_release(v51);
                  }
                }
              }
            }
          }

          if (v98 < 0)
          {
            v55 = 0LL;
            *(void *)os_log_type_t type = 0LL;
            *(void *)&type[8] = type;
            *(void *)&type[16] = 0x2000000000LL;
            if (*(_UNKNOWN **)(v1 - 56) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v56 = *(void *)(v1 - 8);
              if (v56) {
                *(void *)(v1 - 8) = v56 + 1;
              }
              v55 = v1 - 96;
            }

            *(void *)&type[24] = v55;
            os_log_type_t v57 = *(void **)(v1 + 128);
            *(void *)buf = MEMORY[0x1895F87A8];
            *(void *)&buf[8] = 0x40000000LL;
            *(void *)&buf[16] = ___ZL29nw_socket_handle_socket_eventP9nw_socket_block_invoke;
            *(void *)&v105 = &unk_189BC4F38;
            *((void *)&v105 + 1) = type;
            v106 = v1;
            nw_queue_context_async(v57, buf);
            _Block_object_dispose(type, 8);
          }

          goto LABEL_117;
        }

        os_log_type_t v32 = *(_DWORD *)(v1 + 172);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = *(_DWORD *)type;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v32;
        LOWORD(v105) = 1024;
        *(_DWORD *)((char *)&v105 + 2) = v20;
        v103[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v102) = 0;
        BOOL v33 = (char *)_os_log_send_and_compose_impl();
        if (__nwlog_fault(v33, v103, &v102))
        {
          if (v103[0] == OS_LOG_TYPE_FAULT)
          {
            id v34 = (os_log_s *)__nwlog_obj();
            os_log_type_t v35 = v103[0];
            if (!os_log_type_enabled(v34, v103[0])) {
              goto LABEL_93;
            }
            dispatch_source_t v36 = *(_DWORD *)(v1 + 172);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = *(_DWORD *)type;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v36;
            LOWORD(v105) = 1024;
            *(_DWORD *)((char *)&v105 + 2) = v20;
            dispatch_source_t v37 = "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d";
LABEL_91:
            __int16 v43 = v34;
            os_log_type_t v44 = v35;
LABEL_92:
            _os_log_impl(&dword_181A5C000, v43, v44, v37, buf, 0x1Eu);
            goto LABEL_93;
          }

          if (!(_BYTE)v102)
          {
            id v34 = (os_log_s *)__nwlog_obj();
            os_log_type_t v35 = v103[0];
            if (!os_log_type_enabled(v34, v103[0])) {
              goto LABEL_93;
            }
            uint64_t v42 = *(_DWORD *)(v1 + 172);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = *(_DWORD *)type;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v42;
            LOWORD(v105) = 1024;
            *(_DWORD *)((char *)&v105 + 2) = v20;
            dispatch_source_t v37 = "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_91;
          }

          os_log_type_t v38 = (char *)__nw_create_backtrace_string();
          uint64_t v39 = (os_log_s *)__nwlog_obj();
          v96 = v103[0];
          id v40 = os_log_type_enabled(v39, v103[0]);
          if (v38)
          {
            if (v40)
            {
              char v41 = *(_DWORD *)(v1 + 172);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = *(_DWORD *)type;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v41;
              LOWORD(v105) = 1024;
              *(_DWORD *)((char *)&v105 + 2) = v20;
              WORD3(v105) = 2082;
              *((void *)&v105 + 1) = v38;
              _os_log_impl( &dword_181A5C000,  v39,  v96,  "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x28u);
            }

            free(v38);
            goto LABEL_93;
          }

          if (v40)
          {
            v95 = *(_DWORD *)(v1 + 172);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = *(_DWORD *)type;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v95;
            LOWORD(v105) = 1024;
            *(_DWORD *)((char *)&v105 + 2) = v20;
            dispatch_source_t v37 = "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d, no backtrace";
            __int16 v43 = v39;
            os_log_type_t v44 = v96;
            goto LABEL_92;
          }
        }

LABEL_53:
        if (!v21) {
          goto LABEL_55;
        }
LABEL_54:
        free(v21);
        goto LABEL_55;
      }

      if (!v53)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (os_log_s *)(id)gLogObj;
        id v40 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v56 = "nw_path_create_observer";
          os_log_type_t v57 = 1024;
          *(_DWORD *)BOOL v58 = v24;
          _os_log_impl( &dword_181A5C000,  v22,  v40,  "%{public}s necp_open(NECP_OPEN_FLAG_OBSERVER | NECP_OPEN_FLAG_PUSH_OBSERVER) %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
        }

        goto LABEL_52;
      }

      uint64_t v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = (os_log_s *)(id)gLogObj;
      uint64_t v30 = type;
      uint64_t v31 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v56 = "nw_path_create_observer";
          os_log_type_t v57 = 1024;
          *(_DWORD *)BOOL v58 = v24;
          _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s necp_open(NECP_OPEN_FLAG_OBSERVER | NECP_OPEN_FLAG_PUSH_OBSERVER) %{darwin.errno}d, no backtrace",  buf,  0x12u);
        }

        goto LABEL_52;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v56 = "nw_path_create_observer";
        os_log_type_t v57 = 1024;
        *(_DWORD *)BOOL v58 = v24;
        v58[2] = 2082;
        *(void *)&v58[3] = v27;
        _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s necp_open(NECP_OPEN_FLAG_OBSERVER | NECP_OPEN_FLAG_PUSH_OBSERVER) %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      uint64_t v56 = "nw_path_create_observer";
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (os_log_s *)(id)gLogObj;
        id v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v56 = "nw_path_create_observer";
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_observer) alloc] init] failed",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      if (!v53)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (os_log_s *)(id)gLogObj;
        dispatch_source_t v36 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v56 = "nw_path_create_observer";
          _os_log_impl( &dword_181A5C000,  v22,  v36,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_observer) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      uint64_t v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = (os_log_s *)(id)gLogObj;
      os_log_type_t v28 = type;
      uint64_t v29 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v56 = "nw_path_create_observer";
          _os_log_impl( &dword_181A5C000,  v22,  v28,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_observer) alloc] init] failed, no backtrace",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v56 = "nw_path_create_observer";
        os_log_type_t v57 = 2082;
        *(void *)BOOL v58 = v27;
        _os_log_impl( &dword_181A5C000,  v22,  v28,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_observer) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(v27);
    if (!v21) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }

  __nwlog_obj();
  __int16 v43 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v56 = "nw_path_create_observer";
  os_log_type_t v44 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v53 = 0;
  if (__nwlog_fault(v44, &type, &v53))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_endpoint_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v46 = type;
      if (os_log_type_enabled(v45, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v56 = "nw_path_create_observer";
        _os_log_impl(&dword_181A5C000, v45, v46, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v53)
    {
      os_log_type_t v47 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_endpoint_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v48 = type;
      uint64_t v49 = os_log_type_enabled(v45, type);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v56 = "nw_path_create_observer";
          os_log_type_t v57 = 2082;
          *(void *)BOOL v58 = v47;
          _os_log_impl( &dword_181A5C000,  v45,  v48,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v47);
        goto LABEL_84;
      }

      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v56 = "nw_path_create_observer";
        _os_log_impl(&dword_181A5C000, v45, v48, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_endpoint_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v45, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v56 = "nw_path_create_observer";
        _os_log_impl( &dword_181A5C000,  v45,  v50,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

        goto LABEL_53;
      }

      if (!v36)
      {
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v33 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl( &dword_181A5C000,  v23,  v33,  "%{public}s called with null interface_option_details, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v30 = type;
      uint64_t v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl( &dword_181A5C000,  v23,  v30,  "%{public}s called with null interface_option_details, no backtrace",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
        id v40 = 2082;
        char v41 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v23,  v30,  "%{public}s called with null interface_option_details, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_40;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    dispatch_source_t v36 = 0;
    if (__nwlog_fault(v22, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null flow_registration", buf, 0xCu);
        }

        goto LABEL_52;
      }

      if (!v36)
      {
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl( &dword_181A5C000,  v23,  v32,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      uint64_t v29 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl( &dword_181A5C000,  v23,  v28,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
        }

        goto LABEL_52;
      }

      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
        id v40 = 2082;
        char v41 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v23,  v28,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_53;
  }

  if (v4)
  {
    if (v3[86])
    {
      id v6 = 0LL;
      uint64_t v7 = 0LL;
      do
      {
        os_log_type_t v8 = *((void *)v3 + 38);
        uint64_t v39 = 0uLL;
        int v9 = nw_parameters_copy_context(*((void **)v3 + 2));
        BOOL v10 = nw_path_copy_interface_with_generation(v9, *(_DWORD *)(v8 + v6), *(_DWORD *)(v8 + v6 + 4));

        if (!v10 || (nw_path_interface_prohibited_by_parameters(v3, v10) & 1) == 0)
        {
          id v11 = nw_interface_option_details_create(v10, &v39, 0LL, 0, 0LL, -1);
          if (v11)
          {
            ((void (**)(void, NWConcrete_nw_interface_option_details *))v5)[2](v5, v11);
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v12 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              os_log_type_t v32 = "nw_path_enumerate_interface_options_with_details";
              BOOL v33 = 2112;
              id v34 = v10;
              os_log_type_t v35 = 1042;
              dispatch_source_t v36 = 16;
              dispatch_source_t v37 = 2098;
              os_log_type_t v38 = &v39;
              _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to create interface option details with %@ [%{public,uuid_t}.16P]",  buf,  0x26u);
            }
          }
        }

        ++v7;
        v6 += 24LL;
      }

      while (v7 < v3[86]);
    }

    id v13 = (unsigned __int8 *)*((void *)v3 + 25);
    v28[0] = MEMORY[0x1895F87A8];
    v28[1] = 3221225472LL;
    v28[2] = __nw_path_enumerate_interface_options_with_details_block_invoke;
    v28[3] = &unk_189BC8628;
    uint64_t v29 = v5;
    nw_array_apply(v13, (uint64_t)v28);

    goto LABEL_19;
  }

  __nwlog_obj();
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v32 = "nw_path_enumerate_interface_options_with_details";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v39) = 16;
  uint64_t v30 = 0;
  if (v39 == 17)
  {
    __nwlog_obj();
    BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int64_t v19 = v39;
    if (os_log_type_enabled(v16, (os_log_type_t)v39))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v32 = "nw_path_enumerate_interface_options_with_details";
      _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_52;
  }

  if (!v30)
  {
    __nwlog_obj();
    BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v27 = v39;
    if (os_log_type_enabled(v16, (os_log_type_t)v39))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v32 = "nw_path_enumerate_interface_options_with_details";
      _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_52;
  }

  id v23 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  id v24 = v39;
  uint64_t v25 = os_log_type_enabled(v16, (os_log_type_t)v39);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v32 = "nw_path_enumerate_interface_options_with_details";
      _os_log_impl(&dword_181A5C000, v16, v24, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_52;
  }

  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v32 = "nw_path_enumerate_interface_options_with_details";
    BOOL v33 = 2082;
    id v34 = v23;
    _os_log_impl( &dword_181A5C000,  v16,  v24,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v23);
  if (v15) {
    goto LABEL_54;
  }
LABEL_19:
}

    goto LABEL_53;
  }

  if (a2)
  {
    id v4 = v3;
    if (v4)
    {
      sec_protocol_options_add_transport_specific_application_protocol();
LABEL_5:

      goto LABEL_6;
    }

    __nwlog_obj();
    id v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_tls_options_add_transport_specific_application_protocol";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v30 = "nw_tls_options_add_transport_specific_application_protocol";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null sec_options", buf, 0xCu);
        }
      }

      else if (v27)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v22 = type;
        id v23 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v30 = "nw_tls_options_add_transport_specific_application_protocol";
            uint64_t v31 = 2082;
            os_log_type_t v32 = v21;
            _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null sec_options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v21);
          goto LABEL_58;
        }

        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v30 = "nw_tls_options_add_transport_specific_application_protocol";
          _os_log_impl(&dword_181A5C000, v13, v22, "%{public}s called with null sec_options, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v26 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v30 = "nw_tls_options_add_transport_specific_application_protocol";
          _os_log_impl( &dword_181A5C000,  v13,  v26,  "%{public}s called with null sec_options, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    id v14 = v18;
    uint64_t v15 = v19;
    BOOL v16 = 12;
    goto LABEL_21;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "tcp_connection_fallback_watcher_create";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(out_token) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (out_token == 17)
    {
      uint64_t v18 = (os_log_s *)__nwlog_obj();
      int64_t v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "tcp_connection_fallback_watcher_create";
      BOOL v10 = "%{public}s called with null block";
      goto LABEL_52;
    }

    if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v18 = (os_log_s *)__nwlog_obj();
      int64_t v19 = out_token;
      id v23 = os_log_type_enabled(v18, (os_log_type_t)out_token);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "tcp_connection_fallback_watcher_create";
          uint64_t v30 = 2082;
          uint64_t v31 = backtrace_string;
          uint64_t v22 = "%{public}s called with null block, dumping backtrace:%{public}s";
          goto LABEL_42;
        }

        goto LABEL_43;
      }

      if (!v23) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "tcp_connection_fallback_watcher_create";
      BOOL v10 = "%{public}s called with null block, no backtrace";
    }

    else
    {
      uint64_t v18 = (os_log_s *)__nwlog_obj();
      int64_t v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "tcp_connection_fallback_watcher_create";
      BOOL v10 = "%{public}s called with null block, backtrace limit exceeded";
    }

    goto LABEL_52;
  }

  out_token = -1;
  handler[0] = MEMORY[0x1895F87A8];
  handler[1] = 0x40000000LL;
  handler[2] = __tcp_connection_fallback_watcher_create_block_invoke;
  handler[3] = &unk_189BC6858;
  void handler[4] = a3;
  uint64_t v5 = notify_register_dispatch("com.apple.networkextension.fallback_in_use", &out_token, queue, handler);
  if (v5)
  {
    id v6 = v5;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    uint64_t v29 = "tcp_connection_fallback_watcher_create";
    uint64_t v30 = 2082;
    uint64_t v31 = "com.apple.networkextension.fallback_in_use";
    os_log_type_t v32 = 1024;
    BOOL v33 = v6;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)gLogObj;
      int v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v29 = "tcp_connection_fallback_watcher_create";
      uint64_t v30 = 2082;
      uint64_t v31 = "com.apple.networkextension.fallback_in_use";
      os_log_type_t v32 = 1024;
      BOOL v33 = v6;
      BOOL v10 = "%{public}s notify_register_dispatch(%{public}s) [status %u] failed";
      goto LABEL_20;
    }

    if (!v24)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)gLogObj;
      int v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v29 = "tcp_connection_fallback_watcher_create";
      uint64_t v30 = 2082;
      uint64_t v31 = "com.apple.networkextension.fallback_in_use";
      os_log_type_t v32 = 1024;
      BOOL v33 = v6;
      BOOL v10 = "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, backtrace limit exceeded";
      goto LABEL_20;
    }

    id v12 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (os_log_s *)gLogObj;
    int v9 = type;
    id v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v29 = "tcp_connection_fallback_watcher_create";
        uint64_t v30 = 2082;
        uint64_t v31 = "com.apple.networkextension.fallback_in_use";
        os_log_type_t v32 = 1024;
        BOOL v33 = v6;
        id v34 = 2082;
        os_log_type_t v35 = v12;
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, dumping backtrace:%{public}s",  buf,  0x26u);
      }

      free(v12);
      goto LABEL_22;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v29 = "tcp_connection_fallback_watcher_create";
      uint64_t v30 = 2082;
      uint64_t v31 = "com.apple.networkextension.fallback_in_use";
      os_log_type_t v32 = 1024;
      BOOL v33 = v6;
      BOOL v10 = "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, no backtrace";
LABEL_20:
      id v14 = v8;
      uint64_t v15 = v9;
      BOOL v16 = 28;
LABEL_21:
      _os_log_impl(&dword_181A5C000, v14, v15, v10, buf, v16);
    }

    free(v20);
    goto LABEL_53;
  }

  __nwlog_obj();
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v62 = "nw_report_excessive_data_usage_event";
  os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v59 = 0;
  if (__nwlog_fault(v47, &type, &v59))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v62 = "nw_report_excessive_data_usage_event";
        _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v59)
    {
      os_log_type_t v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v51 = type;
      id v52 = os_log_type_enabled(v48, type);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v62 = "nw_report_excessive_data_usage_event";
          os_log_type_t v63 = 2082;
          nw_endpoint_t v64 = (uint64_t)v50;
          _os_log_impl( &dword_181A5C000,  v48,  v51,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v50);
        goto LABEL_98;
      }

      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v62 = "nw_report_excessive_data_usage_event";
        _os_log_impl(&dword_181A5C000, v48, v51, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v53 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v62 = "nw_report_excessive_data_usage_event";
        _os_log_impl( &dword_181A5C000,  v48,  v53,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

              BOOL v58 = *((_BYTE *)v5 + 35);
              *((_BYTE *)v5 + 32) = *((_BYTE *)v5 + 32) & 0x1F | 0x20;
              *((_BYTE *)v5 + 35) = v58 & 0x6F;
              *((_BYTE *)v5 + 33) &= ~4u;
              v208[0] = MEMORY[0x1895F87A8];
              v208[1] = 3221225472LL;
              v209 = ___Z30nw_endpoint_flow_rebuild_stackP30NWConcrete_nw_endpoint_handlerP11nw_protocol_block_invoke;
              v210 = &unk_189BC7910;
              uint64_t v59 = v7;
              v211 = v59;
              os_log_type_t v60 = *((void *)v5 + 84);
              do
              {
                if (!v60) {
                  break;
                }
                BOOL v61 = *(void *)(v60 + 16);
                os_log_type_t v62 = ((uint64_t (*)(void *))v209)(v208);
                os_log_type_t v60 = v61;
              }

              while ((v62 & 1) != 0);
              os_log_type_t v63 = v59;
              if (v7)
              {
                nw_endpoint_t v64 = v63;
                v65 = (*((_BYTE *)v63 + 268) & 0x20) == 0;

                if (!v65)
                {
LABEL_103:
                  *((_BYTE *)v5 + 32) &= ~0x20u;

                  goto LABEL_237;
                }

                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                id v66 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  v67 = v64;

                  char v68 = v67;
                  id v69 = (*((_BYTE *)v64 + 268) & 1) == 0;

                  if (v69) {
                    os_log_type_t v70 = "";
                  }
                  else {
                    os_log_type_t v70 = "dry-run ";
                  }
                  BOOL v71 = nw_endpoint_handler_copy_endpoint(v68);
                  __int16 v72 = nw_endpoint_get_logging_description(v71);
                  uint64_t v73 = v68;
                  __int16 v74 = v73;
                  uint64_t v75 = v73[30];
                  else {
                    uint64_t v76 = off_189BBBBF0[v75];
                  }

                  id v92 = v74;
                  os_log_type_t v93 = "path";
                  switch(*((_DWORD *)v92 + 29))
                  {
                    case 0:
                      break;
                    case 1:
                      os_log_type_t v93 = "resolver";
                      break;
                    case 2:
                      os_log_type_t v93 = nw_endpoint_flow_mode_string(v92[31]);
                      break;
                    case 3:
                      os_log_type_t v93 = "proxy";
                      break;
                    case 4:
                      os_log_type_t v93 = "fallback";
                      break;
                    case 5:
                      os_log_type_t v93 = "transform";
                      break;
                    default:
                      os_log_type_t v93 = "unknown-mode";
                      break;
                  }

                  logd = v93;

                  os_log_type_t v102 = v71;
                  BOOL v103 = v76;
                  v104 = v70;
                  v105 = v72;
                  v106 = v92;
                  os_unfair_lock_lock((os_unfair_lock_t)v106 + 28);
                  os_log_type_t v107 = v106[8];
                  os_unfair_lock_unlock((os_unfair_lock_t)v106 + 28);

                  *(_DWORD *)buf = 136447746;
                  v219 = "nw_endpoint_flow_rebuild_stack";
                  v220 = 2082;
                  v221 = v67 + 168;
                  v222 = 2082;
                  v223 = (nw_protocol *)v104;
                  v224 = 2082;
                  v225 = (void *)v105;
                  v226 = 2082;
                  v227 = v103;
                  v228 = 2082;
                  v229 = logd;
                  v230 = 2114;
                  v231 = v107;
                  _os_log_impl( &dword_181A5C000,  v66,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unable to setup protocols",  buf,  0x48u);
                }

    free(v26);
    goto LABEL_53;
  }

  mode = v5->mode;

  if (mode != 2) {
    goto LABEL_32;
  }
  os_log_type_t v8 = nw_endpoint_handler_copy_flow(v6);
  int v9 = v8;
  if ((*((_BYTE *)v8 + 32) & 2) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v8 + 220);
    BOOL v10 = v6;
    id v11 = v10[4];

    os_unfair_lock_unlock((os_unfair_lock_t)v9 + 220);
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    LOBYTE(v44) = 0;
    v38[0] = MEMORY[0x1895F87A8];
    v38[1] = 3221225472LL;
    v38[2] = __nw_endpoint_flow_copy_joinable_clone_handler_block_invoke;
    v38[3] = &unk_189BC7938;
    id v12 = v4;
    uint64_t v39 = v12;
    id v40 = buf;
    nw_parameters_internal_iterate_protocol_stack(v11, 5, 0, v38);
    if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
    {
      id v13 = v10;
    }

    else
    {
      uint64_t v15 = *((void *)v9 + 117);
      if (!v15)
      {
        id v14 = 0LL;
        goto LABEL_10;
      }

      id v13 = (id *)nw_endpoint_flow_copy_joinable_clone_handler(v15, v12);
    }

    id v14 = (NWConcrete_nw_endpoint_handler *)v13;
LABEL_10:

    _Block_object_dispose(buf, 8);
    goto LABEL_11;
  }

  id v14 = v6;
LABEL_11:

LABEL_54:
  return v14;
}

      if (v7) {
        free(v7);
      }
      goto LABEL_9;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_http2_disconnected";
    id v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v13 = (os_log_s *)__nwlog_obj();
        id v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_59;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_http2_disconnected";
        uint64_t v15 = "%{public}s called with null http2";
        goto LABEL_58;
      }

      if (!v27)
      {
        id v13 = (os_log_s *)__nwlog_obj();
        id v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_59;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_http2_disconnected";
        uint64_t v15 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_58;
      }

      id v23 = (char *)__nw_create_backtrace_string();
      id v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      id v24 = os_log_type_enabled(v13, type);
      if (v23)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_protocol_http2_disconnected";
          uint64_t v31 = 2082;
          os_log_type_t v32 = v23;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v23);
        if (v12) {
          goto LABEL_60;
        }
        return;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_http2_disconnected";
        uint64_t v15 = "%{public}s called with null http2, no backtrace";
LABEL_58:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_http2_disconnected";
    id v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_http2_disconnected";
      uint64_t v15 = "%{public}s called with null protocol";
      goto LABEL_58;
    }

    if (!v27)
    {
      id v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_http2_disconnected";
      uint64_t v15 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_58;
    }

    uint64_t v21 = (char *)__nw_create_backtrace_string();
    id v13 = (os_log_s *)__nwlog_obj();
    id v14 = type;
    uint64_t v22 = os_log_type_enabled(v13, type);
    if (!v21)
    {
      if (!v22) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_http2_disconnected";
      uint64_t v15 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_58;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "nw_protocol_http2_disconnected";
      uint64_t v31 = 2082;
      os_log_type_t v32 = v21;
      _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v21);
  }

  if (v9) {
LABEL_53:
  }
    free(v9);
LABEL_54:
  uint64_t v15 = 0LL;
LABEL_64:

  return v15;
}

    free(v14);
    if (!v8) {
      return 0LL;
    }
    goto LABEL_76;
  }

      v169 = v33;
      if (*((_DWORD *)v167 + 6))
      {
        if ((BYTE6(a1[3].output_handler_context) & 1) == 0)
        {
          if (gLogDatapath)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            nw_endpoint_t v64 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              v65 = *((_DWORD *)v167 + 6);
              id v66 = "s";
              if (v65 == 1) {
                id v66 = "";
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v146;
              *(_WORD *)&buf[22] = 2080;
              v199 = " ";
              v200 = 2048;
              v201 = (char *)p_output_handler;
              v202 = 1024;
              v203 = v65;
              v204 = 2080;
              v205 = v66;
              _os_log_impl( &dword_181A5C000,  v64,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Found %u IPv6 extra fragment%s",  buf,  0x3Au);
            }
          }
        }

        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000LL;
        LOBYTE(v199) = 0;
        v157[0] = MEMORY[0x1895F87A8];
        v157[1] = 0x40000000LL;
        v158 = (uint64_t (*)(void *))___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_36;
        v159 = &unk_189BC8AA8;
        v164 = v170;
        v165 = &v184;
        v160 = &v166;
        v161 = v188;
        v162 = buf;
        v163 = v8;
        id v34 = v170[0];
        do
        {
          if (!v34) {
            break;
          }
          os_log_type_t v35 = *(void *)(v34 + 32);
          dispatch_source_t v36 = v158(v157);
          id v34 = v35;
        }

        while ((v36 & 1) != 0);
        v152[0] = MEMORY[0x1895F87A8];
        v152[1] = 0x40000000LL;
        v153 = ___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2;
        v154 = &__block_descriptor_tmp_38_85753;
        v155 = v170;
        v156 = v8;
        dispatch_source_t v37 = v170[0];
        do
        {
          if (!v37) {
            break;
          }
          os_log_type_t v38 = *(void *)(v37 + 32);
          uint64_t v39 = ((uint64_t (*)(void *))v153)(v152);
          dispatch_source_t v37 = v38;
        }

        while ((v39 & 1) != 0);
        if (*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
          id v23 = 34;
        }
        else {
          id v23 = 0;
        }
        _Block_object_dispose(buf, 8);
      }

      else
      {
        id v23 = 34;
      }

      _Block_object_dispose(&v166, 8);
      if (v23) {
        id v24 = 1;
      }
      else {
        id v24 = v171 == 0;
      }
    }

    while (!v24);
    id v12 = a6;
    if (v184)
    {
      *a6->tqh_last = (nw_frame *)v184;
      uint64_t v76 = v185;
      *(void *)(v184 + 40) = a6->tqh_last;
      a6->tqh_last = v76;
      v184 = 0LL;
      v185 = (nw_frame **)&v184;
    }

    *((_DWORD *)v193 + 6) += *((_DWORD *)v189 + 6);
    os_log_type_t v77 = nw_protocol_ipv6_process_reassembly((uint64_t)v8, 0, (uint64_t)a6, 1, 0LL);
    os_log_type_t v78 = *((_DWORD *)v193 + 6) + v77;
    *((_DWORD *)v193 + 6) = v78;
    if (!v78)
    {
      if ((BYTE6(a1[3].output_handler_context) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v79 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v146;
          *(_WORD *)&buf[22] = 2080;
          v199 = " ";
          v200 = 2048;
          v201 = (char *)p_output_handler;
          _os_log_impl( &dword_181A5C000,  v79,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Dropped inbound packets, checking for more",  buf,  0x2Au);
        }
      }

      _Block_object_dispose(v182, 8);
      _Block_object_dispose(v186, 8);
      _Block_object_dispose(v188, 8);
      output_handler = a1->output_handler;
      if (!output_handler) {
        goto LABEL_195;
      }
      continue;
    }

    break;
  }

  _Block_object_dispose(v182, 8);
  _Block_object_dispose(v186, 8);
  _Block_object_dispose(v188, 8);
LABEL_214:
  v120 = *((unsigned int *)v193 + 6);
  _Block_object_dispose(&v192, 8);
  return v120;
}

    free(v14);
    if (!v8) {
      return 0LL;
    }
    goto LABEL_76;
  }

        os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 20));
LABEL_53:
        id v34 = *(void **)(a1 + 16);
        if (v34)
        {
          free(v34);
          *(void *)(a1 + 16) = 0LL;
        }

        *(_DWORD *)(a1 + 424) = 0;
        os_log_type_t v35 = *(void **)(a1 + 160);
        if (v35)
        {
          if ((*(_WORD *)(a1 + 444) & 0x20) == 0 || (nw_nexus_remove_instance(), (os_log_type_t v35 = *(void **)(a1 + 160)) != 0LL))
          {
            os_release(v35);
            *(void *)(a1 + 160) = 0LL;
          }
        }

        return;
      }
    }

    else
    {
      id v6 = *(void *)(a1 + 192);
      if (!v6) {
        goto LABEL_14;
      }
    }

    nw_queue_cancel_source(v6, a2);
    *(void *)(a1 + 192) = 0LL;
    goto LABEL_14;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_channel_close";
  dispatch_source_t v36 = (char *)_os_log_send_and_compose_impl();
  v43[0] = 16;
  uint64_t v42 = 0;
  if (__nwlog_fault(v36, v43, &v42))
  {
    if (v43[0] == 17)
    {
      dispatch_source_t v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = v43[0];
      if (!os_log_type_enabled(v37, (os_log_type_t)v43[0])) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_close";
      uint64_t v39 = "%{public}s called with null channel";
      goto LABEL_75;
    }

    if (!v42)
    {
      dispatch_source_t v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = v43[0];
      if (!os_log_type_enabled(v37, (os_log_type_t)v43[0])) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_close";
      uint64_t v39 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    dispatch_source_t v37 = (os_log_s *)__nwlog_obj();
    os_log_type_t v38 = v43[0];
    char v41 = os_log_type_enabled(v37, (os_log_type_t)v43[0]);
    if (backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_channel_close";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s called with null channel, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_76;
    }

    if (v41)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_close";
      uint64_t v39 = "%{public}s called with null channel, no backtrace";
LABEL_75:
      _os_log_impl(&dword_181A5C000, v37, v38, v39, buf, 0xCu);
    }
  }

void sub_181A93470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_hash_table_get_node(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj(0LL, a2);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_hash_table_get_node";
    BOOL v10 = (void *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    uint64_t v11 = __nwlog_fault(v10, &type, &v35);
    if (!(_DWORD)v11) {
      goto LABEL_56;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        id v13 = (os_log_s *)__nwlog_obj(v11, v12);
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v38 = "nw_hash_table_get_node";
        uint64_t v15 = "%{public}s called with null table, backtrace limit exceeded";
        goto LABEL_55;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      id v13 = (os_log_s *)__nwlog_obj(backtrace_string, v27);
      os_log_type_t v14 = type;
      BOOL v28 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (!v28) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v38 = "nw_hash_table_get_node";
        uint64_t v15 = "%{public}s called with null table, no backtrace";
        goto LABEL_55;
      }

      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v38 = "nw_hash_table_get_node";
        __int16 v39 = 2082;
        id v40 = backtrace_string;
        uint64_t v29 = "%{public}s called with null table, dumping backtrace:%{public}s";
LABEL_38:
        _os_log_impl(&dword_181A5C000, v13, v14, v29, buf, 0x16u);
      }

LABEL_61:
      if (v20) {
        free(v20);
      }
      if ((*(_BYTE *)(a1 + 48) & 2) != 0)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 52));
        return 0LL;
      }

      return 0LL;
    }

        os_log_type_t v32 = 0LL;
LABEL_62:
        int v9 = v30 + v29 + v31 + v32;
        if (!a2) {
          goto LABEL_6;
        }
LABEL_5:
        *a2 = v9;
LABEL_6:
        if (v9 <= 0x1C) {
          BOOL v10 = 28LL;
        }
        else {
          BOOL v10 = v9;
        }
        goto LABEL_9;
      }

    goto LABEL_62;
  }

  id v3 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_resolver_config);
  *(void *)dispatch_source_t v36 = v3;
  dispatch_source_t v37 = -1;
  if (v3)
  {
    id v4 = v2;
    uint64_t v5 = v3;
    int v6 = v5;
    m_obj = v5->dictionary.m_obj;
    if ((*((_BYTE *)&v5->dictionary + 8) & 1) != 0 && m_obj)
    {
      v5->dictionary.m_obj = 0LL;

      m_obj = v6->dictionary.m_obj;
    }

    v6->dictionary.m_obj = 0LL;

    os_log_type_t v8 = v6->dictionary.m_obj;
    v6->dictionary.m_obj = v4;

    *((_BYTE *)&v6->dictionary + 8) |= 1u;
    int v9 = v6->dictionary.m_obj;
    BOOL v10 = v6;
    string = xpc_dictionary_get_string(v9, "Identifier");

    if (string) {
      uuid_parse(string, v10 + 24);
    }
    goto LABEL_28;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v12 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  id v40 = "nw_resolver_config_create_with_dictionary";
  id v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (os_log_s *)(id)gLogObj;
    uint64_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      id v40 = "nw_resolver_config_create_with_dictionary";
      _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s [nw_resolver_config init] failed", buf, 0xCu);
    }

        if (v33) {
          free(v33);
        }
        if (v9) {
          free((void *)v9);
        }
        goto LABEL_65;
      }

      else {
        id v13 = (__count + 20);
      }
      if (a4 >= 0xFFFFFFEC) {
        os_log_type_t v14 = 0xFFFFFFFFLL;
      }
      else {
        os_log_type_t v14 = a4 + 20;
      }
      output_handler = a1->output_handler;
      if (output_handler)
      {
        handle = output_handler->handle;
        if (handle == &nw_protocol_ref_counted_handle)
        {
          callbacks = output_handler[1].callbacks;
          if (callbacks) {
            output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          }
        }

        uint64_t v18 = a1[1].callbacks;
        if (v18) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v18->add_input_handler + 1);
        }
        if (a6)
        {
          int64_t v19 = output_handler->callbacks;
          if (v19)
          {
            get_output_frames = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t))v19->get_output_frames;
            if (get_output_frames)
            {
              uint64_t v21 = get_output_frames(output_handler, a1, v13, v14);
              goto LABEL_24;
            }
          }

          __nwlog_obj();
          name = output_handler->identifier->name;
          *(_DWORD *)buf = 136446722;
          os_log_type_t v80 = "__nw_protocol_get_output_frames";
          if (!name) {
            name = "invalid";
          }
          __int16 v81 = 2082;
          *(void *)os_log_type_t v82 = name;
          *(_WORD *)&v82[8] = 2048;
          *(void *)&v82[10] = output_handler;
          uint64_t v42 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          os_log_type_t v77 = 0;
          if (__nwlog_fault(v42, &type, &v77))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __int16 v43 = (os_log_s *)__nwlog_obj();
              os_log_type_t v44 = type;
              if (!os_log_type_enabled(v43, type)) {
                goto LABEL_154;
              }
              nw_endpoint_t v45 = output_handler->identifier->name;
              if (!v45) {
                nw_endpoint_t v45 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              os_log_type_t v80 = "__nw_protocol_get_output_frames";
              __int16 v81 = 2082;
              *(void *)os_log_type_t v82 = v45;
              *(_WORD *)&v82[8] = 2048;
              *(void *)&v82[10] = output_handler;
              uint64_t v46 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_131:
              os_log_type_t v70 = v43;
              BOOL v71 = v44;
              __int16 v72 = 32;
LABEL_153:
              _os_log_impl(&dword_181A5C000, v70, v71, v46, buf, v72);
              goto LABEL_154;
            }

            if (!v77)
            {
              __int16 v43 = (os_log_s *)__nwlog_obj();
              os_log_type_t v44 = type;
              if (!os_log_type_enabled(v43, type)) {
                goto LABEL_154;
              }
              char v68 = output_handler->identifier->name;
              if (!v68) {
                char v68 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              os_log_type_t v80 = "__nw_protocol_get_output_frames";
              __int16 v81 = 2082;
              *(void *)os_log_type_t v82 = v68;
              *(_WORD *)&v82[8] = 2048;
              *(void *)&v82[10] = output_handler;
              uint64_t v46 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
              goto LABEL_131;
            }

            os_log_type_t v57 = (char *)__nw_create_backtrace_string();
            __int16 v43 = (os_log_s *)__nwlog_obj();
            os_log_type_t v44 = type;
            BOOL v58 = os_log_type_enabled(v43, type);
            if (!v57)
            {
              if (!v58) {
                goto LABEL_154;
              }
              id v69 = output_handler->identifier->name;
              if (!v69) {
                id v69 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              os_log_type_t v80 = "__nw_protocol_get_output_frames";
              __int16 v81 = 2082;
              *(void *)os_log_type_t v82 = v69;
              *(_WORD *)&v82[8] = 2048;
              *(void *)&v82[10] = output_handler;
              uint64_t v46 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
              goto LABEL_131;
            }

            if (v58)
            {
              uint64_t v59 = output_handler->identifier->name;
              if (!v59) {
                uint64_t v59 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              os_log_type_t v80 = "__nw_protocol_get_output_frames";
              __int16 v81 = 2082;
              *(void *)os_log_type_t v82 = v59;
              *(_WORD *)&v82[8] = 2048;
              *(void *)&v82[10] = output_handler;
              __int16 v83 = 2082;
              os_log_type_t v84 = v57;
              _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v57);
          }

    if (v13) {
      free(v13);
    }
    uint64_t v7 = 0LL;
    goto LABEL_5;
  }

  uint64_t v7 = v5[62];
LABEL_5:

LABEL_42:
  return v7;
}

LABEL_62:
    if (!v24) {
      goto LABEL_64;
    }
LABEL_63:
    free(v24);
    goto LABEL_64;
  }

  if (!v63)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v25 = (os_log_s *)(id)gLogObj;
    char v35 = type;
    if (os_log_type_enabled(v25, type))
    {
      else {
        dispatch_source_t v36 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      id v66 = "nw_endpoint_handler_report_connection_idle";
      v67 = 2082;
      char v68 = (void *)v36;
      id v69 = 2082;
      os_log_type_t v70 = "flow";
      _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_61;
  }

  BOOL v28 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v25 = (os_log_s *)(id)gLogObj;
  uint64_t v29 = type;
  uint64_t v30 = os_log_type_enabled(v25, type);
  if (!v28)
  {
    if (v30)
    {
      else {
        dispatch_source_t v37 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      id v66 = "nw_endpoint_handler_report_connection_idle";
      v67 = 2082;
      char v68 = (void *)v37;
      id v69 = 2082;
      os_log_type_t v70 = "flow";
      _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_61;
  }

  if (v30)
  {
    else {
      BOOL v31 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    id v66 = "nw_endpoint_handler_report_connection_idle";
    v67 = 2082;
    char v68 = (void *)v31;
    id v69 = 2082;
    os_log_type_t v70 = "flow";
    BOOL v71 = 2082;
    __int16 v72 = v28;
    _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v28);
  if (v24) {
    goto LABEL_63;
  }
LABEL_64:
}

    free(v32);
    goto LABEL_62;
  }

  os_log_type_t v60 = v6;
  BOOL v61 = v60[128];

  if ((v61 & 4) == 0)
  {
LABEL_91:
    os_log_type_t v93 = nw_write_request_list_append(a2[24], v60);
    os_log_type_t v77 = (NWConcrete_nw_write_request *)a2[24];
    a2[24] = (void *)v93;
    goto LABEL_92;
  }

  if ((*((_BYTE *)v25 + 33) & 8) != 0 || a2[24])
  {
    os_log_type_t v62 = v10;
    os_log_type_t v63 = (*((_BYTE *)v62 + 268) & 0x20) == 0;

    if (v63)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      nw_endpoint_t v64 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        v65 = v62;

        id v66 = v65;
        v67 = (*((_BYTE *)v62 + 268) & 1) == 0;

        if (v67) {
          char v68 = "";
        }
        else {
          char v68 = "dry-run ";
        }
        id v69 = nw_endpoint_handler_copy_endpoint(v66);
        v147 = nw_endpoint_get_logging_description(v69);
        os_log_type_t v70 = v66;
        BOOL v71 = v70;
        __int16 v72 = v10->state;
        else {
          uint64_t v73 = off_189BBBBF0[v72];
        }

        __int16 v74 = v71;
        uint64_t v75 = v74;
        logb = "path";
        switch(v8[29])
        {
          case 0:
            goto LABEL_89;
          case 1:
            uint64_t v76 = "resolver";
            goto LABEL_88;
          case 2:
            logb = nw_endpoint_flow_mode_string(v74[31]);
            goto LABEL_89;
          case 3:
            uint64_t v76 = "proxy";
            goto LABEL_88;
          case 4:
            uint64_t v76 = "fallback";
            goto LABEL_88;
          case 5:
            uint64_t v76 = "transform";
            goto LABEL_88;
          default:
            uint64_t v76 = "unknown-mode";
LABEL_88:
            logb = v76;
LABEL_89:

            v144 = v68;
            __int16 v91 = v75;
            os_unfair_lock_lock((os_unfair_lock_t)v91 + 28);
            id v92 = v91[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v91 + 28);

            *(_DWORD *)buf = 136447746;
            v159 = "nw_flow_add_write_request";
            v160 = 2082;
            v161 = v65->id_str;
            v162 = 2082;
            v163 = v144;
            v164 = 2082;
            v165 = (void *)v147;
            v166 = 2082;
            v167 = v73;
            v168 = 2082;
            v169 = logb;
            v170 = 2114;
            v171 = v92;
            _os_log_impl( &dword_181A5C000,  v64,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding idempotent write request",  buf,  0x48u);

            break;
        }
      }
    }

    goto LABEL_91;
  }

  os_log_type_t v77 = nw_write_request_create_clone(v60);
  os_log_type_t v78 = nw_write_request_list_append(a2[26], v77);
  v79 = a2[26];
  a2[26] = (void *)v78;

  os_log_type_t v80 = nw_write_request_list_append(a2[25], v60);
  __int16 v81 = a2[25];
  a2[25] = (void *)v80;

  os_log_type_t v82 = v10;
  __int16 v83 = (*((_BYTE *)v82 + 268) & 0x20) == 0;

  if (v83)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v84 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
    {
      __int16 v85 = nw_endpoint_handler_get_id_string(v82);
      v148 = nw_endpoint_handler_dry_run_string(v82);
      logd = nw_endpoint_handler_copy_endpoint(v82);
      v86 = v85;
      __int16 v87 = nw_endpoint_get_logging_description(logd);
      v88 = nw_endpoint_handler_state_string(v82);
      os_log_type_t v89 = nw_endpoint_handler_mode_string(v82);
      v90 = nw_endpoint_handler_copy_current_path(v82);
      *(_DWORD *)buf = 136447746;
      v159 = "nw_flow_add_write_request";
      v160 = 2082;
      v161 = (char *)v86;
      v162 = 2082;
      v163 = v148;
      v164 = 2082;
      v165 = (void *)v87;
      v166 = 2082;
      v167 = v88;
      v168 = 2082;
      v169 = v89;
      v170 = 2114;
      v171 = v90;
      _os_log_impl( &dword_181A5C000,  v84,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding idempotent initial write request",  buf,  0x48u);
    }
  }

      if (v28) {
        free(v28);
      }
LABEL_63:
      uuid_clear((unsigned __int8 *)globals_for_path);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v35 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v48 = "nw_path_evaluator_cancel";
        _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s Removed last default path evaluator client",  buf,  0xCu);
      }

      goto LABEL_66;
    }

    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0 && (_dispatch_is_multithreaded() & 1) != 0
      || (getpid(), sandbox_check() == 1))
    {
      sNWDispatchAllowedNow = 1;
      goto LABEL_31;
    }

    if (sNWDispatchAllowedNow == 1) {
      goto LABEL_31;
    }
  }

      a4 = (char *)sub_18264EB20();
      uint64_t v27 = v26;
      goto LABEL_64;
    }
  }

    if (v39) {
      free(v39);
    }
    goto LABEL_17;
  }

  *((_WORD *)v10 + 6) = a2;
  uint64_t v12 = v10 + 12;
  id v13 = (nw_interface_t *)(v10 + 16);
  objc_storeStrong((id *)v10 + 2, a3);
  os_log_type_t v14 = v8 + 104;
  if (!v8) {
    os_log_type_t v14 = 0LL;
  }
  *((void *)v11 + 3) = v14;
  uint64_t v15 = (void *)*((void *)v11 + 8);
  *((void *)v11 + 8) = 0LL;

  uint64_t v16 = (void *)*((void *)v11 + 5);
  *((void *)v11 + 5) = 0LL;

  *((_BYTE *)v11 + 113) = 0;
  if (*v12 && *v13)
  {
    if (v9)
    {
      int v9 = v9;
      uint64_t v17 = *(id *)(*((void *)v9 + 13) + 136LL);

      uint64_t v18 = (void *)*((void *)v11 + 8);
      *((void *)v11 + 8) = v17;

      int64_t v19 = *((id *)v11 + 8);
      if (v19) {
        goto LABEL_22;
      }
    }

    else
    {
      int v9 = nw_parameters_create();
    }

    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    int64_t v19 = (id)nw_context_copy_implicit_context::implicit_context;
    nw_parameters_set_context(v9, v19);
LABEL_22:
    if (!nw_context_is_inline(v19))
    {
      nw_parameters_require_interface(v9, *v13);
      evaluator_for_custom_ether = nw_path_create_evaluator_for_custom_ether(v9, v11[6]);
      uint64_t v27 = (void *)*((void *)v11 + 9);
      *((void *)v11 + 9) = evaluator_for_custom_ether;

      if (*((void *)v11 + 9))
      {
        uint64_t v25 = v11;
LABEL_33:

        goto LABEL_34;
      }

      BOOL v28 = *((void *)v11 + 19);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v29 = (os_log_s *)(id)gLogObj;
      uint64_t v30 = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
      if (v28)
      {
        if (v30)
        {
          BOOL v31 = *((_DWORD *)v11 + 42);
          os_log_type_t v32 = v11[6];
          BOOL v34 = *((void *)v11 + 2);
          uint64_t v33 = (char *)*((void *)v11 + 3);
          *(_DWORD *)buf = 136447746;
          BOOL v58 = "-[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]";
          uint64_t v59 = 2080;
          os_log_type_t v60 = v33;
          BOOL v61 = 1042;
          os_log_type_t v62 = 16;
          os_log_type_t v63 = 2098;
          nw_endpoint_t v64 = (char *)v11 + 115;
          v65 = 1024;
          id v66 = v31;
          v67 = 1024;
          char v68 = v32;
          id v69 = 2112;
          os_log_type_t v70 = v34;
          _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] initWithEtherType: failed to create evaluator f or ethertype %X interface %@",  buf,  0x3Cu);
        }
      }

      else if (v30)
      {
        char v35 = v11[6];
        dispatch_source_t v36 = (char *)*((void *)v11 + 2);
        *(_DWORD *)buf = 136446978;
        BOOL v58 = "-[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]";
        uint64_t v59 = 2114;
        os_log_type_t v60 = (char *)v11;
        BOOL v61 = 1024;
        os_log_type_t v62 = v35;
        os_log_type_t v63 = 2112;
        nw_endpoint_t v64 = v36;
        _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] initWithEtherType: failed to create evaluator for ethertype %X interface %@",  buf,  0x26u);
      }

LABEL_32:
      uint64_t v25 = 0LL;
      goto LABEL_33;
    }

    __nwlog_obj();
    nw_endpoint_t v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v58 = "-[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]";
    uint64_t v46 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v54 = 0;
    if (__nwlog_fault(v46, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v48 = type;
        if (os_log_type_enabled(v47, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v58 = "-[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]";
          _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s Cannot use nw_ethernet_channel on inline contexts",  buf,  0xCu);
        }
      }

      else if (v54)
      {
        uint64_t v49 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v50 = type;
        v51 = os_log_type_enabled(v47, type);
        if (v49)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v58 = "-[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]";
            uint64_t v59 = 2082;
            os_log_type_t v60 = v49;
            _os_log_impl( &dword_181A5C000,  v47,  v50,  "%{public}s Cannot use nw_ethernet_channel on inline contexts, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v49);
          goto LABEL_69;
        }

        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v58 = "-[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]";
          _os_log_impl( &dword_181A5C000,  v47,  v50,  "%{public}s Cannot use nw_ethernet_channel on inline contexts, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v53 = type;
        if (os_log_type_enabled(v47, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v58 = "-[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]";
          _os_log_impl( &dword_181A5C000,  v47,  v53,  "%{public}s Cannot use nw_ethernet_channel on inline contexts, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v8) {
    free(v8);
  }
  return 0LL;
}

          goto LABEL_62;
        }

        if (!v30)
        {
          __nwlog_obj();
          uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v29 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl( &dword_181A5C000,  v15,  v29,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_61;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v25 = type;
        uint64_t v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_61;
        }

        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v33 = "nw_framer_protocol_get_parameters";
          BOOL v34 = 2082;
          char v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_40;
      }
    }

    else
    {
      __nwlog_obj();
      id v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      uint64_t v33 = "nw_framer_protocol_get_parameters";
      os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v30 = 0;
      if (__nwlog_fault(v14, &type, &v30))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
          }

          goto LABEL_61;
        }

        if (!v30)
        {
          __nwlog_obj();
          uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v28 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl( &dword_181A5C000,  v15,  v28,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_61;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v23 = type;
        os_log_type_t v24 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_181A5C000, v15, v23, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }

          goto LABEL_61;
        }

        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v33 = "nw_framer_protocol_get_parameters";
          BOOL v34 = 2082;
          char v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

      uint64_t v21 = *(_BYTE **)(a1 + 32);
      goto LABEL_62;
    }

    uint64_t v29 = *(_BYTE **)(a1 + 32);
    if (v29)
    {
      if ((v29[346] & 0x20) != 0)
      {
LABEL_57:
        nw_resolver_srv_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), 0LL, 0, 0, 0, 0LL, 0, v29);
        return;
      }

      if (v29[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v30 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
          goto LABEL_56;
        }
        BOOL v31 = *(void *)(a1 + 32);
        os_log_type_t v32 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
        *(_DWORD *)buf = 136446722;
        BOOL v48 = "nw_resolver_inject_dns_service_error_block_invoke";
        uint64_t v49 = 2082;
        *(void *)os_log_type_t v50 = v31 + 256;
        *(_WORD *)&v50[8] = 2082;
        *(void *)&v50[10] = v32;
        uint64_t v33 = "%{public}s [C%{public}s] Injecting error %{public}s";
        BOOL v34 = v30;
        char v35 = 32;
        goto LABEL_55;
      }

      __nwlog_obj();
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        __int16 v43 = *(_DWORD *)(*(void *)(a1 + 32) + 340LL);
        os_log_type_t v44 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
        *(_DWORD *)buf = 136446722;
        BOOL v48 = "nw_resolver_inject_dns_service_error_block_invoke";
        uint64_t v49 = 1024;
        *(_DWORD *)os_log_type_t v50 = v43;
        *(_WORD *)&v50[4] = 2082;
        *(void *)&v50[6] = v44;
        uint64_t v33 = "%{public}s [R%u] Injecting error %{public}s";
        BOOL v34 = v30;
        char v35 = 28;
        goto LABEL_55;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v30 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        uint64_t v41 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
        *(_DWORD *)buf = 136446466;
        BOOL v48 = "nw_resolver_inject_dns_service_error_block_invoke";
        uint64_t v49 = 2082;
        *(void *)os_log_type_t v50 = v41;
        uint64_t v33 = "%{public}s Injecting error %{public}s";
        BOOL v34 = v30;
        char v35 = 22;
LABEL_55:
        _os_log_impl(&dword_181A5C000, v34, OS_LOG_TYPE_INFO, v33, buf, v35);
      }
    }

          id v23 = (char *)v24;
          goto LABEL_62;
        }

        if (!v54)
        {
          os_log_type_t v24 = v28;
          __nwlog_obj();
          uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v40 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v57 = "nw_connection_group_copy_workloop";
            _os_log_impl( &dword_181A5C000,  v25,  v40,  "%{public}s called with null workloop, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_61;
        }

        dispatch_source_t v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v50 = type;
        dispatch_source_t v37 = os_log_type_enabled(v34, type);
        if (!v36)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v57 = "nw_connection_group_copy_workloop";
            _os_log_impl(&dword_181A5C000, v34, v50, "%{public}s called with null workloop, no backtrace", buf, 0xCu);
          }

    goto LABEL_62;
  }

  if (!name)
  {
    __nwlog_obj();
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_ws_response_add_additional_header";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null name", buf, 0xCu);
      }

      goto LABEL_61;
    }

    if (!v30)
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v28 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_ws_response_add_additional_header";
        _os_log_impl( &dword_181A5C000,  v13,  v28,  "%{public}s called with null name, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_61;
    }

    uint64_t v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v23 = type;
    os_log_type_t v24 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_181A5C000, v13, v23, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }

      goto LABEL_61;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "nw_ws_response_add_additional_header";
      BOOL v34 = 2082;
      char v35 = v22;
      _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null name, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_42;
  }

  if (!value)
  {
    __nwlog_obj();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_ws_response_add_additional_header";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null value", buf, 0xCu);
      }

      goto LABEL_61;
    }

    if (!v30)
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v29 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_ws_response_add_additional_header";
        _os_log_impl( &dword_181A5C000,  v13,  v29,  "%{public}s called with null value, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_61;
    }

    uint64_t v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v25 = type;
    uint64_t v26 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_181A5C000, v13, v25, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }

      goto LABEL_61;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "nw_ws_response_add_additional_header";
      BOOL v34 = 2082;
      char v35 = v22;
      _os_log_impl( &dword_181A5C000,  v13,  v25,  "%{public}s called with null value, dumping backtrace:%{public}s",  buf,  0x16u);
    }

          if ((void)v219) {
            free((void *)v219);
          }
        }
      }

      uint64_t v27 = endpoint;
LABEL_65:
      endpointa = v27;
      uint64_t v41 = *(void **)(v7 + 128);
      uint64_t v42 = v4[405];
      if (v41)
      {
        if ((v42 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v43 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v44 = *(os_unfair_lock_s **)(v7 + 128);
            if (v44)
            {
              nw_endpoint_t v45 = v44;
              os_unfair_lock_lock(v44 + 24);
              uint64_t v46 = v45[6];
              os_unfair_lock_unlock(v44 + 24);
            }

            else
            {
              uint64_t v46 = 0LL;
            }

            os_log_type_t v50 = v46;
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v208 = " ";
            v209 = 2112;
            v210 = (uint64_t)v44;
            v211 = 2112;
            *(void *)v212 = v50;
            _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sCreating new flow from evaluator %@ path %@",  buf,  0x34u);
          }

          uint64_t v41 = *(void **)(v7 + 128);
        }

        new_flow_from_evaluator = nw_path_flow_registration_create_new_flow_from_evaluator(*((void **)v4 + 35), v41);
      }

      else
      {
        if ((v42 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v47 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v208 = " ";
            v209 = 2112;
            v210 = (uint64_t)endpointa;
            _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sCreating new flow for %@",  buf,  0x2Au);
          }
        }

        if (is_null) {
          BOOL v48 = 0LL;
        }
        else {
          BOOL v48 = (_OWORD *)v185;
        }
        new_flow_from_evaluator = nw_path_flow_registration_create_new_flow( *((void **)v4 + 35),  1,  is_null == 0,  0,  0,  v48,  v186,  0);
      }

      v51 = *(void **)(v7 + 56);
      *(void *)(v7 + 56) = new_flow_from_evaluator;

      id v52 = *(void **)(v7 + 56);
      if (!v52)
      {
        if ((v4[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v68 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            id v69 = *(void *)(v7 + 48);
            os_log_type_t v70 = "socket";
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&buf[12] = 2082;
            if (!is_null) {
              os_log_type_t v70 = "channel";
            }
            *(void *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v208 = " ";
            v209 = 2048;
            v210 = a2;
            v211 = 2080;
            *(void *)v212 = v70;
            *(_WORD *)&v212[8] = 2112;
            *(void *)&v212[10] = v69;
            _os_log_impl( &dword_181A5C000,  v68,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sPath %lx failed to request %s flow over %@",  buf,  0x3Eu);
          }
        }

        *(_DWORD *)(v7 + 160) = 2;
        *(_BYTE *)(v7 + 169) |= 8u;
        BOOL v71 = endpointa;
        (*(void (**)(char *, uint64_t, uint64_t, BOOL))(*(void *)(*((void *)v4 + 1) + 80LL) + 208LL))( v4,  a2,  2LL,  *((void *)v4 + 39) == a2);
        nw_protocol_path_state_dispose(v4, v185);
        nw_hash_table_remove_node(*((void *)v4 + 37), v7);
        int v9 = 0LL;
        goto LABEL_198;
      }

      v53 = v4 - 96;
      if (is_null)
      {
        v226 = *(_OWORD *)v53;
        v225 = 0uLL;
        nw_path_flow_registration_get_id(v52, &v225);
        *(_OWORD *)v53 = v225;
        *((void *)v4 + 40) = a2;
        nw_path_override_interface(*((void **)v4 + 36), *(void **)(v7 + 48), 1);
        id v54 = v186;
        if (!v186) {
          id v54 = *v183;
        }
        objc_storeStrong((id *)v4 + 41, v54);
        v55 = (void *)*((void *)v4 + 42);
        *((void *)v4 + 42) = 0LL;

        uint64_t v56 = *((id *)v4 + 6);
        os_log_type_t v57 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v56,  0,  0);

        BOOL v58 = (void *)*((void *)v4 + 43);
        *((void *)v4 + 43) = v57;

        nw_parameters_require_interface(*((nw_parameters_t *)v4 + 43), *(nw_interface_t *)(v7 + 48));
        *(void *)&__dst = 0LL;
        *((void *)&__dst + 1) = &__dst;
        v223 = 0x2020000000LL;
        v224 = v4 - 96;
        *(void *)&v219 = 0LL;
        *((void *)&v219 + 1) = &v219;
        v220 = 0x2020000000LL;
        v221 = 0;
        v202[0] = 0LL;
        v202[1] = v202;
        v202[2] = 0x2020000000LL;
        v202[3] = 0LL;
        uint64_t v59 = (void *)*((void *)v4 + 6);
        os_log_type_t v60 = MEMORY[0x1895F87A8];
        v198[0] = MEMORY[0x1895F87A8];
        v198[1] = 3221225472LL;
        v198[2] = __nw_protocol_instance_establish_path_block_invoke;
        v198[3] = &unk_189BB7588;
        BOOL v61 = v4;
        v199 = v61;
        v200 = &v219;
        v201 = v202;
        nw_parameters_internal_iterate_protocol_stack(v59, 4, 0, v198);
        if (*(_BYTE *)(*((void *)&v219 + 1) + 24LL))
        {
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000LL;
          LOBYTE(v208) = 0;
          os_log_type_t v62 = (void *)*((void *)v4 + 43);
          v191[0] = v60;
          v191[1] = 3221225472LL;
          v191[2] = __nw_protocol_instance_establish_path_block_invoke_2;
          v191[3] = &unk_189BB75B0;
          v193 = v202;
          os_log_type_t v63 = v61;
          v192 = v63;
          p_dst = &__dst;
          v195 = buf;
          v196 = a2;
          v197 = v185;
          nw_parameters_internal_iterate_protocol_stack(v62, 4, 0, v191);
          if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
          {
            if ((v4[405] & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              nw_endpoint_t v64 = (os_log_s *)(id)gLogObj;
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v214 = 136446722;
                *(void *)&v214[4] = "nw_protocol_instance_establish_path";
                v215 = 2082;
                v216 = v63 + 407;
                v217 = 2080;
                v218 = " ";
                _os_log_impl( &dword_181A5C000,  v64,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sFailed to attach application protocol",  v214,  0x20u);
              }
            }

            nw_protocol_instance_tear_down_path_inner(v63, v185);
            *(_OWORD *)v53 = v226;
            *((void *)v4 + 40) = 0LL;
            nw_path_override_interface(*((void **)v4 + 36), 0LL, 0);
            v65 = (void *)*((void *)v4 + 41);
            *((void *)v4 + 41) = 0LL;

            id v66 = (void *)*((void *)v4 + 42);
            *((void *)v4 + 42) = 0LL;

            v67 = (void *)*((void *)v4 + 43);
            *((void *)v4 + 43) = 0LL;

            _Block_object_dispose(buf, 8);
            int v9 = 0LL;
            goto LABEL_196;
          }

          _Block_object_dispose(buf, 8);
        }

        v213 = *(_OWORD *)v53;
        if ((v4[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v87 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
          {
            v88 = *(void *)(v7 + 48);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v61 + 407;
            *(_WORD *)&buf[22] = 2080;
            v208 = " ";
            v209 = 2048;
            v210 = a2;
            v211 = 1040;
            *(_DWORD *)v212 = 16;
            *(_WORD *)&v212[4] = 2096;
            *(void *)&v212[6] = &v213;
            *(_WORD *)&v212[14] = 2112;
            *(void *)&v212[16] = v88;
            _os_log_impl( &dword_181A5C000,  v87,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sPath %lx requested socket flow %{uuid_t}.16P over %@",  buf,  0x44u);
          }
        }

        os_log_type_t v89 = v61;
        v90 = nw_hash_table_get_node(*((void *)v4 + 37), a2, 8LL);
        if (v90)
        {
          __int16 v91 = v90;
          if (*(void *)(v90 + 56))
          {
            if (nw_socket_protocol_identifier::onceToken != -1) {
              dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_64023);
            }
            BOOL internal = nw_protocol_create_internal( (uint64_t)&nw_socket_protocol_identifier::identifier,  *((void **)v4 + 41),  *((const char **)v4 + 43),  1);
            if (internal)
            {
              os_log_type_t v93 = (const char *)internal;
              if (nw_socket_protocol_identifier::onceToken != -1) {
                dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_64023);
              }
              v94 = nw_protocol_definition_create_with_identifier(&nw_socket_protocol_identifier::identifier);
              v95 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)v4 + 43));
              v178 = nw_protocol_stack_copy_transport_protocol(v95);
              nw_protocol_instance_set_protocol_instance(v89, v178, v94, (uint64_t)v93);
              v177 = v95;
              v179 = nw_protocol_stack_copy_internet_protocol(v95);
              nw_protocol_instance_set_protocol_instance(v89, v179, v94, (uint64_t)v93);
              v184 = (uint64_t *)(v91 + 64);
              if (*(void *)(v91 + 64)) {
                v96 = *(void *)(v91 + 64);
              }
              else {
                v96 = (uint64_t)(v4 - 96);
              }
              v182 = (void *)*((void *)v93 + 5);
              if (v182 == &nw_protocol_ref_counted_handle)
              {
                os_log_type_t v102 = *((void *)v93 + 11);
                if (v102) {
                  *((void *)v93 + 11) = v102 + 1;
                }
                *(void *)v214 = v93;
                os_log_type_t v97 = v214[8] | 1;
              }

              else
              {
                *(void *)v214 = v93;
                os_log_type_t v97 = v214[8] & 0xFE;
              }

              v214[8] = v97;
              v180 = *(void **)(v96 + 40);
              if (v180 == &nw_protocol_ref_counted_handle)
              {
                v104 = *(void *)(v96 + 88);
                if (v104) {
                  *(void *)(v96 + 88) = v104 + 1;
                }
                v205 = (char *)v96;
                BOOL v103 = v206 | 1;
              }

              else
              {
                v205 = (char *)v96;
                BOOL v103 = v206 & 0xFE;
              }

              v206 = v103;
              v105 = (uint64_t (**)(const char *))*((void *)v93 + 3);
              v176 = v94;
              if (v105)
              {
                v106 = *v105;
                if (v106)
                {
                  v101 = v106(v93);
LABEL_163:
                  if (v180 == &nw_protocol_ref_counted_handle) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)&v205);
                  }
                  if (v182 == &nw_protocol_ref_counted_handle) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v214);
                  }
                  if (!*v184)
                  {
                    if (*((_UNKNOWN **)v93 + 5) == &nw_protocol_ref_counted_handle)
                    {
                      v108 = *((void *)v93 + 11);
                      if (v108) {
                        *((void *)v93 + 11) = v108 + 1;
                      }
                      *(void *)buf = v93;
                      buf[8] |= 1u;
                      os_log_type_t v107 = 1;
                    }

                    else
                    {
                      os_log_type_t v107 = 0;
                      *(void *)buf = v93;
                      buf[8] &= ~1u;
                    }

                    os_log_type_t v109 = *(_BYTE *)(v91 + 72);
                    if ((v109 & 1) != 0)
                    {
                      nw::release_if_needed<nw_protocol *>(v184);
                      os_log_type_t v109 = *(_BYTE *)(v91 + 72);
                    }

                    *(void *)(v91 + 64) = v93;
                    *(_BYTE *)(v91 + 72) = v107 | v109 & 0xFE;
                  }

                  BOOL v100 = (os_log_s *)v176;
                  goto LABEL_182;
                }
              }

              __nwlog_obj();
              v141 = (void *)objc_claimAutoreleasedReturnValue();
              v142 = (const char *)*((void *)v93 + 2);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
              if (!v142) {
                v142 = "invalid";
              }
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v142;
              *(_WORD *)&buf[22] = 2048;
              v208 = v93;
              v175 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              v203 = 0;
              if (__nwlog_fault(v175, &type, &v203))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v143 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v144 = type;
                  if (os_log_type_enabled(v143, type))
                  {
                    v145 = (const char *)*((void *)v93 + 2);
                    if (!v145) {
                      v145 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v145;
                    *(_WORD *)&buf[22] = 2048;
                    v208 = v93;
                    _os_log_impl( &dword_181A5C000,  v143,  v144,  "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback",  buf,  0x20u);
                  }
                }

                else
                {
                  if (v203)
                  {
                    v152 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    log = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    v173 = type;
                    v153 = os_log_type_enabled(log, type);
                    if (v152)
                    {
                      if (v153)
                      {
                        v154 = (const char *)*((void *)v93 + 2);
                        if (!v154) {
                          v154 = "invalid";
                        }
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v154;
                        *(_WORD *)&buf[22] = 2048;
                        v208 = v93;
                        v209 = 2082;
                        v210 = (uint64_t)v152;
                        _os_log_impl( &dword_181A5C000,  log,  v173,  "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                      }

                      free(v152);
                    }

                    else
                    {
                      if (v153)
                      {
                        v170 = (const char *)*((void *)v93 + 2);
                        if (!v170) {
                          v170 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v170;
                        *(_WORD *)&buf[22] = 2048;
                        v208 = v93;
                        _os_log_impl( &dword_181A5C000,  log,  v173,  "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace",  buf,  0x20u);
                      }
                    }

                    goto LABEL_307;
                  }

                  __nwlog_obj();
                  v143 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v166 = type;
                  if (os_log_type_enabled(v143, type))
                  {
                    v167 = (const char *)*((void *)v93 + 2);
                    if (!v167) {
                      v167 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v167;
                    *(_WORD *)&buf[22] = 2048;
                    v208 = v93;
                    _os_log_impl( &dword_181A5C000,  v143,  v166,  "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
                  }
                }
              }

    goto LABEL_62;
  }

  if (v4)
  {
    int v6 = v3[403];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    uint64_t v33 = "nw_protocol_instance_process_external_input";
    BOOL v34 = 2082;
    char v35 = v3 + 407;
    dispatch_source_t v36 = 2080;
    dispatch_source_t v37 = " ";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v30 = 0;
    if (__nwlog_fault(v8, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        BOOL v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v33 = "nw_protocol_instance_process_external_input";
          BOOL v34 = 2082;
          char v35 = v3 + 407;
          dispatch_source_t v36 = 2080;
          dispatch_source_t v37 = " ";
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s %{public}s%snested nw_protocol_instance_process_external_input",  buf,  0x20u);
        }
      }

      else if (v30)
      {
        uint64_t v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        uint64_t v12 = type;
        id v13 = os_log_type_enabled(v9, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446978;
            uint64_t v33 = "nw_protocol_instance_process_external_input";
            BOOL v34 = 2082;
            char v35 = v3 + 407;
            dispatch_source_t v36 = 2080;
            dispatch_source_t v37 = " ";
            os_log_type_t v38 = 2082;
            __int16 v39 = v11;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s %{public}s%snested nw_protocol_instance_process_external_input, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v11);
          if (!v8) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v33 = "nw_protocol_instance_process_external_input";
          BOOL v34 = 2082;
          char v35 = v3 + 407;
          dispatch_source_t v36 = 2080;
          dispatch_source_t v37 = " ";
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s %{public}s%snested nw_protocol_instance_process_external_input, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v33 = "nw_protocol_instance_process_external_input";
          BOOL v34 = 2082;
          char v35 = v3 + 407;
          dispatch_source_t v36 = 2080;
          dispatch_source_t v37 = " ";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s %{public}s%snested nw_protocol_instance_process_external_input, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v8)
    {
LABEL_24:
      int v6 = v3[403];
LABEL_25:
      v3[403] = v6 | 0x10;
      uint64_t v15 = *(void (**)(_BYTE *))(*(void *)(*((void *)v3 + 1) + 80LL) + 80LL);
      if (v15) {
        v15(v3);
      }
      v5[2](v5);
      nw_protocol_instance_flush_batched_input_internal((NWConcrete_nw_protocol_instance *)v3);
      goto LABEL_28;
    }

    goto LABEL_62;
  }

  if (v4)
  {
    int v6 = v3[6];
    if (v6)
    {
      v3[6] = v6 - 1;
LABEL_24:
      uint64_t v15 = v5[4];
      uint64_t v16 = (void *)v5[5];
      if (v15)
      {
        *(void *)(v15 + 40) = v16;
        uint64_t v16 = (void *)v5[5];
      }

      else
      {
        *((void *)v3 + 2) = v16;
      }

      void *v16 = v15;
      v5[4] = 0LL;
      v5[5] = 0LL;
      goto LABEL_28;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v34 = "nw_protocol_data_array_remove";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v31 = 0;
    if (__nwlog_fault(v8, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        BOOL v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_protocol_data_array_remove";
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s Protocol data array count attempted to decrement below zero",  buf,  0xCu);
        }
      }

      else if (v31)
      {
        uint64_t v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        uint64_t v12 = type;
        id v13 = os_log_type_enabled(v9, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v34 = "nw_protocol_data_array_remove";
            char v35 = 2082;
            dispatch_source_t v36 = v11;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s Protocol data array count attempted to decrement below zero, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v11);
          if (!v8) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_protocol_data_array_remove";
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s Protocol data array count attempted to decrement below zero, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_protocol_data_array_remove";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s Protocol data array count attempted to decrement below zero, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v8) {
      goto LABEL_24;
    }
LABEL_23:
    free(v8);
    goto LABEL_24;
  }

  __nwlog_obj();
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v34 = "nw_protocol_data_array_remove";
  uint64_t v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v31 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    int64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v22 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "nw_protocol_data_array_remove";
      _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null data", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (!v31)
  {
    __nwlog_obj();
    int64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v30 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "nw_protocol_data_array_remove";
      _os_log_impl(&dword_181A5C000, v19, v30, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_61;
  }

  uint64_t v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  int64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v27 = type;
  BOOL v28 = os_log_type_enabled(v19, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "nw_protocol_data_array_remove";
      _os_log_impl(&dword_181A5C000, v19, v27, "%{public}s called with null data, no backtrace", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v34 = "nw_protocol_data_array_remove";
    char v35 = 2082;
    dispatch_source_t v36 = v26;
    _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s called with null data, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v26);
  if (v18) {
    goto LABEL_63;
  }
LABEL_28:
}

  if (v27) {
    free(v27);
  }
  return 1;
}

      *BOOL v10 = j;
      BOOL v10 = (unint64_t *)(a2[1].i64[0] + 8);
      a2[1].i64[0] = (uint64_t)v10;
      if (!--v15) {
        goto LABEL_419;
      }
    }
  }

  uint64_t v25 = j - v5;
  if (j <= v5) {
    goto LABEL_141;
  }
  v409 = v18;
  uint64_t v26 = 32 * v22 - 1;
  if (v10 == v9)
  {
    uint64_t v26 = 0LL;
    ++v25;
  }

  if ((_BYTE)v25) {
    uint64_t v27 = (v25 >> 8) + 1;
  }
  else {
    uint64_t v27 = v25 >> 8;
  }
  BOOL v28 = (v26 - v7) >> 8;
  if (v27 >= v28) {
    uint64_t v18 = v28;
  }
  else {
    uint64_t v18 = v27;
  }
  v412 = v24;
  if (v27 <= v28)
  {
LABEL_55:
    for (a2[2].i64[0] = v5 + (v18 << 8); v18; --v18)
    {
      uint64_t v46 = a2[1].i64[0];
      v420 = *(void **)(v46 - 8);
      a2[1].i64[0] = v46 - 8;
      std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_front( (const void **)a2,  &v420);
    }

    goto LABEL_140;
  }

  v410 = j;
  j = v27 - v18;
  uint64_t v29 = a2[1].i64[1] - a2->i64[0];
  uint64_t v30 = v10 - v9;
  if (v27 - v18 <= (v29 >> 3) - v30)
  {
    if (j)
    {
      if (v9 != (unint64_t *)a2->i64[0])
      {
        do
        {
          os_log_type_t v77 = calloc(0x100uLL, 0x10uLL);
          if (!v77) {
            goto LABEL_54;
          }
          v420 = v77;
          std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_front( (const void **)a2,  &v420);
          os_log_type_t v78 = a2->i64[1];
          if (a2[1].i64[0] - v78 == 8) {
            v79 = 255LL;
          }
          else {
            v79 = 256LL;
          }
          uint64_t v5 = v79 + a2[2].i64[0];
          a2[2].i64[0] = v5;
          if (!--j) {
            goto LABEL_96;
          }
        }

        while (v78 != a2->i64[0]);
      }

      v18 += j;
      do
      {
        os_log_type_t v80 = calloc(0x100uLL, 0x10uLL);
        if (!v80) {
          goto LABEL_54;
        }
        v420 = v80;
        std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_back( a2,  &v420);
        --j;
      }

      while (j);
      uint64_t v5 = a2[2].u64[0];
    }

      if (v25) {
        free(v25);
      }
      MEMORY[0x10] = 0LL;
      MEMORY[0x18] = *(void *)(v7 + 80);
      *MEMORY[0x18] = 0LL;
      *(void *)(v7 + 80) = 16LL;
      uint64_t v18 = 32LL;
      MEMORY[0x20] = 0LL;
      MEMORY[0x28] = *(void *)(v7 + 96);
      *MEMORY[0x28] = 0LL;
      goto LABEL_13;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v40 = "nw_protocol_trainer_bottom_inject_input";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    dispatch_source_t v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      id v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        os_log_type_t v24 = "%{public}s called with null trainer";
        goto LABEL_54;
      }

      goto LABEL_55;
    }

    if (!v37)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      id v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        os_log_type_t v24 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_54;
      }

      goto LABEL_55;
    }

    uint64_t v29 = (char *)__nw_create_backtrace_string();
    uint64_t v22 = (os_log_s *)__nwlog_obj();
    id v23 = type;
    BOOL v34 = os_log_type_enabled(v22, type);
    if (!v29)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        os_log_type_t v24 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_54;
      }

      goto LABEL_55;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      id v40 = "nw_protocol_trainer_bottom_inject_input";
      uint64_t v41 = 2082;
      uint64_t v42 = v29;
      BOOL v31 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_37;
    }

    goto LABEL_38;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v40 = "nw_protocol_trainer_bottom_inject_input";
  uint64_t v21 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  dispatch_source_t v37 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v37)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      id v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        os_log_type_t v24 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_54;
      }

      goto LABEL_55;
    }

    uint64_t v29 = (char *)__nw_create_backtrace_string();
    uint64_t v22 = (os_log_s *)__nwlog_obj();
    id v23 = type;
    uint64_t v30 = os_log_type_enabled(v22, type);
    if (!v29)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        id v40 = "nw_protocol_trainer_bottom_inject_input";
        os_log_type_t v24 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_54;
      }

      goto LABEL_55;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      id v40 = "nw_protocol_trainer_bottom_inject_input";
      uint64_t v41 = 2082;
      uint64_t v42 = v29;
      BOOL v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
      _os_log_impl(&dword_181A5C000, v22, v23, v31, buf, 0x16u);
    }

                          goto LABEL_128;
                        }

                        if (!v147)
                        {
                          __nwlog_obj();
                          uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          v86 = type;
                          if (os_log_type_enabled(v56, type))
                          {
                            *(_DWORD *)buf = 136446210;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            _os_log_impl( &dword_181A5C000,  v56,  v86,  "%{public}s nw_tcp_create_options failed, backtrace limit exceeded",  buf,  0xCu);
                          }

                          goto LABEL_61;
                        }

                        v67 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        char v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        id v69 = type;
                        os_log_type_t v70 = os_log_type_enabled(v68, type);
                        if (v67)
                        {
                          if (v70)
                          {
                            *(_DWORD *)buf = 136446466;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            v151 = 2082;
                            v152 = v67;
                            _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s nw_tcp_create_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v67);
                          if (!v55) {
                            goto LABEL_130;
                          }
                          goto LABEL_129;
                        }

                        if (v70)
                        {
                          *(_DWORD *)buf = 136446210;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s nw_tcp_create_options failed, no backtrace",  buf,  0xCu);
                        }
                      }

    if (v12) {
      free(v12);
    }
    return 0LL;
  }

  parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
  if (parameters)
  {
    BOOL v10 = os_retain(parameters);
    uint64_t v11 = handle[112];
    if ((v11 & 1) == 0) {
      goto LABEL_31;
    }
  }

  else
  {
    BOOL v10 = 0LL;
    uint64_t v11 = handle[112];
    if ((v11 & 1) == 0) {
      goto LABEL_31;
    }
  }

  uint64_t v18 = (void *)*((void *)handle + 13);
  if (v18)
  {
    os_release(v18);
    uint64_t v11 = handle[112];
  }

        free(v36);
        if (!v12) {
          goto LABEL_98;
        }
        goto LABEL_97;
      }

      if (!v48) {
        goto LABEL_96;
      }
      *(_DWORD *)nw_endpoint_t v64 = 136446210;
      v65 = "network_config_setup_policy_event_watcher";
      uint64_t v15 = "%{public}s dispatch_source_create failed, no backtrace";
    }

    else
    {
      __int16 v43 = (os_log_s *)__nwlog_obj();
      os_log_type_t v44 = v58;
      if (!os_log_type_enabled(v43, v58)) {
        goto LABEL_96;
      }
      *(_DWORD *)nw_endpoint_t v64 = 136446210;
      v65 = "network_config_setup_policy_event_watcher";
      uint64_t v15 = "%{public}s dispatch_source_create failed, backtrace limit exceeded";
    }

    nw_endpoint_t v45 = v43;
    uint64_t v46 = v44;
    os_log_type_t v47 = 12;
    goto LABEL_95;
  }

  uint64_t v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)nw_endpoint_t v64 = 136446466;
  v65 = "network_config_setup_policy_event_watcher";
  id v66 = 1024;
  *(_DWORD *)v67 = v17;
  uint64_t v18 = (char *)_os_log_send_and_compose_impl();
  v59[0] = OS_LOG_TYPE_ERROR;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v18, v59, type))
  {
    if (v59[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int64_t v19 = (os_log_s *)gLogObj;
      uint64_t v20 = v59[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v59[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)nw_endpoint_t v64 = 136446466;
      v65 = "network_config_setup_policy_event_watcher";
      id v66 = 1024;
      *(_DWORD *)v67 = v17;
      uint64_t v21 = "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d";
      goto LABEL_79;
    }

    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int64_t v19 = (os_log_s *)gLogObj;
      uint64_t v20 = v59[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v59[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)nw_endpoint_t v64 = 136446466;
      v65 = "network_config_setup_policy_event_watcher";
      id v66 = 1024;
      *(_DWORD *)v67 = v17;
      uint64_t v21 = "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_79;
    }

    uint64_t v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int64_t v19 = (os_log_s *)gLogObj;
    uint64_t v20 = v59[0];
    uint64_t v30 = os_log_type_enabled((os_log_t)gLogObj, v59[0]);
    if (v29)
    {
      if (v30)
      {
        *(_DWORD *)nw_endpoint_t v64 = 136446722;
        v65 = "network_config_setup_policy_event_watcher";
        id v66 = 1024;
        *(_DWORD *)v67 = v17;
        v67[2] = 2082;
        *(void *)&v67[3] = v29;
        _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d, dumping backtrace:%{public}s",  v64,  0x1Cu);
      }

      free(v29);
      goto LABEL_80;
    }

    if (v30)
    {
      *(_DWORD *)nw_endpoint_t v64 = 136446466;
      v65 = "network_config_setup_policy_event_watcher";
      id v66 = 1024;
      *(_DWORD *)v67 = v17;
      uint64_t v21 = "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d, no backtrace";
LABEL_79:
      _os_log_impl(&dword_181A5C000, v19, v20, v21, v64, 0x12u);
    }
  }

    goto LABEL_62;
  }

  if (!v6)
  {
    __nwlog_obj();
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v35 = "nw_connection_get_listener_protocol_on_nw_queue";
    int64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v32)
    {
      uint64_t v27 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v28 = type;
      uint64_t v29 = os_log_type_enabled(v20, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          char v35 = "nw_connection_get_listener_protocol_on_nw_queue";
          dispatch_source_t v36 = 2082;
          dispatch_source_t v37 = v27;
          _os_log_impl( &dword_181A5C000,  v20,  v28,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v27);
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_63;
      }

      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        char v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v20, v28, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v31 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v20,  v31,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_61;
  }

  nw_context_assert_queue(v5[3]);
  os_log_type_t v8 = v5[18];
  if (!v8)
  {
    uint64_t v11 = v5[2];
    if (v11 && !nw_path_parameters_get_logging_disabled(v11[13]))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v12 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v13 = *((_DWORD *)v5 + 112);
        *(_DWORD *)buf = 136446466;
        char v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        dispatch_source_t v36 = 1024;
        LODWORD(v37) = v13;
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Connection has no parent handler",  buf,  0x12u);
      }
    }

    goto LABEL_19;
  }

  if (!a3) {
    goto LABEL_7;
  }
  listener_protocol_on_nw_queue = nw_endpoint_handler_get_listener_protocol_on_nw_queue(v8, v7);
  if (!listener_protocol_on_nw_queue)
  {
    os_log_type_t v8 = v5[18];
LABEL_7:
    BOOL v10 = nw_endpoint_handler_copy_connected_flow_handler(v8);
    if (!v10)
    {
      if (!nw_endpoint_handler_has_connected_flow(v5[18]))
      {
        uint64_t v15 = v5[2];
        if (v15 && !nw_path_parameters_get_logging_disabled(v15[13]))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v16 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            uint64_t v17 = *((_DWORD *)v5 + 112);
            *(_DWORD *)buf = 136446466;
            char v35 = "nw_connection_get_listener_protocol_on_nw_queue";
            dispatch_source_t v36 = 1024;
            LODWORD(v37) = v17;
            _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Connection has no available handler",  buf,  0x12u);
          }
        }

        BOOL v10 = 0LL;
        listener_protocol_on_nw_queue = 0LL;
        goto LABEL_11;
      }

      BOOL v10 = v5[18];
    }

    listener_protocol_on_nw_queue = nw_endpoint_handler_get_listener_protocol_on_nw_queue(v10, v7);
LABEL_11:
  }

  if (v29) {
    free(v29);
  }
  if (self) {
    goto LABEL_10;
  }
  outbound_message = nw_http_transaction_metadata_get_outbound_message(0LL);
  transactionMetadata = 0LL;
LABEL_11:
  inbound_message = nw_http_transaction_metadata_get_inbound_message(transactionMetadata);
  uint64_t v12 = inbound_message;
  if (!outbound_message || !inbound_message)
  {

LABEL_24:
    os_log_type_t v8 = 0LL;
    return (NSURLResponse *)v8;
  }

  id v13 = nw_http_metadata_copy_request(outbound_message);
  os_log_type_t v14 = nw_http_metadata_copy_response(v12);
  uint64_t v15 = v14;
  if (v13) {
    uint64_t v16 = v14 == 0LL;
  }
  else {
    uint64_t v16 = 1;
  }
  uint64_t v17 = !v16;
  if (v16)
  {
    os_log_type_t v8 = 0LL;
  }

  else
  {
    version = nw_http_metadata_get_version(v12);
    os_log_type_t v8 = (void *)nw_http_response_copy_url_response(v15, v13, 0LL, **((void ***)&unk_189BC9758 + version));
  }

  if (!v17) {
    goto LABEL_24;
  }
  return (NSURLResponse *)v8;
}

      goto LABEL_62;
    }

    if (!v26)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "tcp_connection_create_with_service";
        uint64_t v16 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_60;
      }

      goto LABEL_61;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = type;
    uint64_t v25 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "tcp_connection_create_with_service";
        uint64_t v16 = "%{public}s called with null queue, no backtrace";
        goto LABEL_60;
      }

      goto LABEL_61;
    }

    if (!v25) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v29 = "tcp_connection_create_with_service";
    uint64_t v30 = 2082;
    BOOL v31 = backtrace_string;
    uint64_t v22 = "%{public}s called with null queue, dumping backtrace:%{public}s";
    goto LABEL_42;
  }

      free(backtrace_string);
      goto LABEL_73;
    }

    uint64_t v27 = (os_log_s *)__nwlog_obj();
    BOOL v28 = v58[0];
    if (!os_log_type_enabled(v27, (os_log_type_t)v58[0])) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
    uint64_t v29 = "%{public}s called with null protocol";
LABEL_72:
    _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
LABEL_73:
    if (v26) {
      free(v26);
    }
    return 0LL;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    v58[0] = 16;
    LOBYTE(v54) = 0;
    if (v58[0] == 17)
    {
      uint64_t v27 = (os_log_s *)__nwlog_obj();
      BOOL v28 = v58[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)v58[0])) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
      uint64_t v29 = "%{public}s called with null http_encoding";
      goto LABEL_72;
    }

    if (!(_BYTE)v54)
    {
      uint64_t v27 = (os_log_s *)__nwlog_obj();
      BOOL v28 = v58[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)v58[0])) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
      uint64_t v29 = "%{public}s called with null http_encoding, backtrace limit exceeded";
      goto LABEL_72;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v27 = (os_log_s *)__nwlog_obj();
    BOOL v28 = v58[0];
    os_log_type_t v38 = os_log_type_enabled(v27, (os_log_type_t)v58[0]);
    if (backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v33 = "%{public}s called with null http_encoding, dumping backtrace:%{public}s";
        goto LABEL_60;
      }

      goto LABEL_61;
    }

    if (!v38) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
    uint64_t v29 = "%{public}s called with null http_encoding, no backtrace";
    goto LABEL_72;
  }

  if ((handle[198] & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v30 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 114;
        *(_WORD *)&buf[22] = 2080;
        nw_endpoint_t v64 = (__n128 (*)(uint64_t, uint64_t))" ";
        LOWORD(v65) = 1024;
        *(_DWORD *)((char *)&v65 + 2) = a3;
        HIWORD(v65) = 1024;
        LODWORD(v66) = a4;
        WORD2(v66) = 1024;
        *(_DWORD *)((char *)&v66 + 6) = a5;
        _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sminimum bytes %u, maximum bytes %u, maximum frame count %u",  buf,  0x32u);
      }
    }
  }

  if ((handle[428] & 1) != 0)
  {
    uint64_t v17 = 0LL;
    if ((handle[198] & 1) != 0 || !gLogDatapath) {
      return v17;
    }
    uint64_t v18 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 114;
      *(_WORD *)&buf[22] = 2080;
      nw_endpoint_t v64 = (__n128 (*)(uint64_t, uint64_t))" ";
      _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%salready getting input frames, returning 0",  buf,  0x20u);
      return 0LL;
    }

    return 0LL;
  }

  handle[428] |= 1u;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000LL;
  nw_endpoint_t v64 = __Block_byref_object_copy__18;
  v65 = __Block_byref_object_dispose__19;
  *(void *)&id v66 = 0LL;
  *((void *)&v66 + 1) = &v66;
  id v54 = 0LL;
  v55 = &v54;
  os_log_type_t v57 = 0;
  uint64_t v56 = 0x2000000000LL;
  input_frames = nw_protocol_get_input_frames((uint64_t)a1->output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)&v66);
  id v13 = MEMORY[0x1895F87A8];
  if (input_frames && *(void *)(*(void *)&buf[8] + 40LL))
  {
    *(void *)BOOL v58 = 0LL;
    *(void *)&v58[8] = v58;
    *(void *)&v58[16] = 0x3802000000LL;
    uint64_t v59 = __Block_byref_object_copy__20_33212;
    os_log_type_t v60 = __Block_byref_object_dispose__21_33213;
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    object = (id)nw_protocol_copy_http_definition_http_definition;
    v62 |= 1u;
    v45[0] = v13;
    v45[1] = 0x40000000LL;
    uint64_t v46 = (uint64_t (*)(void *))___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    os_log_type_t v47 = &unk_189BBC068;
    id v52 = a1;
    v53 = a6;
    BOOL v48 = v58;
    uint64_t v49 = &v54;
    os_log_type_t v50 = buf;
    v51 = handle;
    os_log_type_t v14 = *(void *)(*(void *)&buf[8] + 40LL);
    do
    {
      if (!v14) {
        break;
      }
      uint64_t v15 = *(void *)(v14 + 32);
      uint64_t v16 = v46(v45);
      os_log_type_t v14 = v15;
    }

    while ((v16 & 1) != 0);
    _Block_object_dispose(v58, 8);
    if ((v62 & 1) != 0 && object) {
      os_release(object);
    }
  }

  else
  {
    int64_t v19 = *((_WORD *)handle + 324);
    if ((v19 & 0x40) != 0)
    {
      if ((v19 & 0x24) == 4)
      {
        if (*((void *)handle + 68))
        {
          if ((handle[198] & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v20 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)BOOL v58 = 136446722;
              *(void *)&v58[4] = "nw_protocol_http_encoding_get_input_frames";
              *(_WORD *)&v58[12] = 2082;
              *(void *)&v58[14] = handle + 114;
              *(_WORD *)&v58[22] = 2080;
              uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t))" ";
              _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sinput finished before decoder completed",  v58,  0x20u);
            }
          }
        }
      }

      *((_WORD *)handle + 324) |= 0x80u;
      nw_http_encoding_check_http1_content_length((uint64_t)handle);
    }
  }

  uint64_t v21 = (void (*)(uint64_t))(*(void *)&buf[8] + 40LL);
  if (gLogDatapath)
  {
    BOOL v34 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)BOOL v58 = 136446210;
      *(void *)&v58[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_181A5C000, v34, OS_LOG_TYPE_DEBUG, "%{public}s called", v58, 0xCu);
    }
  }

  *(void *)BOOL v58 = v13;
  *(void *)&v58[8] = 0x40000000LL;
  *(void *)&v58[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_33165;
  uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_38_33166;
  os_log_type_t v60 = v21;
  LOBYTE(object) = 1;
  uint64_t v22 = *(void *)v21;
  do
  {
    if (!v22) {
      break;
    }
    id v23 = *(void *)(v22 + 32);
    os_log_type_t v24 = (*(uint64_t (**)(_BYTE *))&v58[16])(v58);
    uint64_t v22 = v23;
  }

  while ((v24 & 1) != 0);
  if (gLogDatapath)
  {
    v41[0] = v13;
    v41[1] = 0x40000000LL;
    uint64_t v42 = (uint64_t (*)(void *))___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_31;
    __int16 v43 = &__block_descriptor_tmp_32_33216;
    os_log_type_t v44 = handle;
    tqh_first = a6->tqh_first;
    do
    {
      if (!tqh_first) {
        break;
      }
      dispatch_source_t v36 = (nw_frame *)*((void *)tqh_first + 4);
      dispatch_source_t v37 = v42(v41);
      tqh_first = v36;
    }

    while ((v37 & 1) != 0);
  }

  if ((handle[198] & 1) == 0)
  {
    if (gLogDatapath)
    {
      __int16 v39 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        id v40 = *((_DWORD *)v55 + 6);
        *(_DWORD *)BOOL v58 = 136446978;
        *(void *)&v58[4] = "nw_protocol_http_encoding_get_input_frames";
        *(_WORD *)&v58[12] = 2082;
        *(void *)&v58[14] = handle + 114;
        *(_WORD *)&v58[22] = 2080;
        uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t))" ";
        LOWORD(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 2) = v40;
        _os_log_impl(&dword_181A5C000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreturning %u frames", v58, 0x26u);
      }
    }
  }

  nw_protocol_plugin_retry_set_getting_input_frames((uint64_t)(handle + 216), (uint64_t)a1, 0);
  uint64_t v17 = *((unsigned int *)v55 + 6);
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(buf, 8);
  return v17;
}

  *(_BYTE *)(v5 + 189) = self->_reduceBuffering;
  *(_WORD *)(v5 + 196) |= 0x800u;
  has = (__int16)self->_has;
  if ((has & 0x100) == 0)
  {
LABEL_10:
    if ((has & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_63;
  }

    free(v24);
    goto LABEL_76;
  }

  uint64_t v21 = (os_log_s *)__nwlog_obj();
  uint64_t v22 = type[0];
  if (os_log_type_enabled(v21, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
    id v23 = "%{public}s called with null protocol";
LABEL_75:
    _os_log_impl(&dword_181A5C000, v21, v22, v23, buf, 0xCu);
  }

          if (!v18)
          {
LABEL_64:
            BOOL v31 = 0LL;
LABEL_65:
            v107[3] = (uint64_t)v31;
            free(v10);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v46 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v116 = "nw_proxy_config_serialize_one_stack";
              os_log_type_t v117 = 2112;
              char v118 = (size_t)v101;
              _os_log_impl( &dword_181A5C000,  v46,  OS_LOG_TYPE_DEBUG,  "%{public}s Serialized proxy transport protocol %@",  buf,  0x16u);
            }

LABEL_68:
            free(__src);
LABEL_69:
            os_log_type_t v8 = v103;
            goto LABEL_70;
          }

          goto LABEL_62;
        }

        __nwlog_obj();
        __int16 v72 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136447234;
        os_log_type_t v116 = "nw_necp_append_tlv";
        os_log_type_t v117 = 2048;
        char v118 = (size_t)v15;
        v119 = 2048;
        v120 = a3;
        v121 = 1024;
        *(_DWORD *)v122 = 5;
        *(_WORD *)&v122[4] = 1024;
        *(_DWORD *)&v122[6] = v9;
        uint64_t v18 = (const char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v111 = OS_LOG_TYPE_DEFAULT;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          int64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v73 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136447234;
            os_log_type_t v116 = "nw_necp_append_tlv";
            os_log_type_t v117 = 2048;
            char v118 = (size_t)v15;
            v119 = 2048;
            v120 = a3;
            v121 = 1024;
            *(_DWORD *)v122 = 5;
            *(_WORD *)&v122[4] = 1024;
            *(_DWORD *)&v122[6] = v9;
            _os_log_impl( &dword_181A5C000,  v19,  v73,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  buf,  0x2Cu);
          }
        }

        else if (v111)
        {
          os_log_type_t v89 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          int64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v90 = type[0];
          __int16 v91 = os_log_type_enabled(v19, type[0]);
          if (v89)
          {
            if (v91)
            {
              *(_DWORD *)buf = 136447490;
              os_log_type_t v116 = "nw_necp_append_tlv";
              os_log_type_t v117 = 2048;
              char v118 = (size_t)v15;
              v119 = 2048;
              v120 = a3;
              v121 = 1024;
              *(_DWORD *)v122 = 5;
              *(_WORD *)&v122[4] = 1024;
              *(_DWORD *)&v122[6] = v9;
              *(_WORD *)v123 = 2082;
              *(void *)&v123[2] = v89;
              _os_log_impl( &dword_181A5C000,  v19,  v90,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
            }

            free(v89);
            goto LABEL_61;
          }

          if (v91)
          {
            *(_DWORD *)buf = 136447234;
            os_log_type_t v116 = "nw_necp_append_tlv";
            os_log_type_t v117 = 2048;
            char v118 = (size_t)v15;
            v119 = 2048;
            v120 = a3;
            v121 = 1024;
            *(_DWORD *)v122 = 5;
            *(_WORD *)&v122[4] = 1024;
            *(_DWORD *)&v122[6] = v9;
            _os_log_impl( &dword_181A5C000,  v19,  v90,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  buf,  0x2Cu);
          }
        }

        else
        {
          __nwlog_obj();
          int64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v99 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136447234;
            os_log_type_t v116 = "nw_necp_append_tlv";
            os_log_type_t v117 = 2048;
            char v118 = (size_t)v15;
            v119 = 2048;
            v120 = a3;
            v121 = 1024;
            *(_DWORD *)v122 = 5;
            *(_WORD *)&v122[4] = 1024;
            *(_DWORD *)&v122[6] = v9;
            _os_log_impl( &dword_181A5C000,  v19,  v99,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  buf,  0x2Cu);
          }
        }

  uint64_t v25 = 0LL;
LABEL_62:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v25;
  free(v5);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  dispatch_source_t v36 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    v95 = "nw_proxy_config_serialize_one_stack_block_invoke";
    v96 = 2112;
    os_log_type_t v97 = (size_t)v83;
    _os_log_impl(&dword_181A5C000, v36, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy protocol %@", buf, 0x16u);
  }

LABEL_65:
  free(v84);
LABEL_66:
  dispatch_source_t v37 = options;
  os_log_type_t v38 = nw_protocol_options_copy_proxy_endpoint(options);
  if (v38)
  {
    else {
      __int16 v39 = 6;
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = nw_path_evaluator_add_endpoint_to_necp_message( v38,  v39,  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL)
                                                                              + 24LL),
                                                                    *(void *)(a1 + 40),
                                                                    0);
    dispatch_source_t v37 = options;
  }

  v86[0] = MEMORY[0x1895F87A8];
  v86[1] = 3221225472LL;
  v86[2] = ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke_234;
  v86[3] = &unk_189BC7198;
  __int16 v87 = *(_OWORD *)(a1 + 32);
  nw_protocol_options_enumerate_proxy_next_hops(v37, v86);
}

    free(backtrace_string);
    goto LABEL_75;
  }

  uint64_t v7 = (char *)calloc(1uLL, 0x180uLL);
  if (v7)
  {
LABEL_5:
    *((_OWORD *)v7 + 22) = 0u;
    *((_OWORD *)v7 + 23) = 0u;
    *((_OWORD *)v7 + 20) = 0u;
    *((_OWORD *)v7 + 21) = 0u;
    *((_OWORD *)v7 + 18) = 0u;
    *((_OWORD *)v7 + 19) = 0u;
    *((_OWORD *)v7 + 16) = 0u;
    *((_OWORD *)v7 + 17) = 0u;
    *((_OWORD *)v7 + 14) = 0u;
    *((_OWORD *)v7 + 15) = 0u;
    *((_OWORD *)v7 + 12) = 0u;
    *((_OWORD *)v7 + 13) = 0u;
    *((_OWORD *)v7 + 10) = 0u;
    *((_OWORD *)v7 + 11) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 9) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *((void *)v7 + 2) = a1;
    *((void *)v7 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
    *((_DWORD *)v7 + 46) = 1;
    *((void *)v7 + 20) = v7;
    *((void *)v7 + 5) = v7 + 160;
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    BOOL v48 = (uint64_t)v7;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 0x40000000LL;
    aBlock[2] = __nw_protocol_http1_create_block_invoke;
    aBlock[3] = &unk_189BBD2D8;
    aBlock[4] = buf;
    *((void *)v7 + 25) = _Block_copy(aBlock);
    _Block_object_dispose(buf, 8);
    os_log_type_t v8 = os_retain(a3);
    int v9 = v7[288];
    if ((v9 & 1) != 0)
    {
      BOOL v10 = (void *)*((void *)v7 + 35);
      if (v10)
      {
        os_release(v10);
        int v9 = v7[288];
      }
    }

    *((void *)v7 + 35) = v8;
    v7[288] = v9 | 1;
    uint64_t v11 = os_retain(a3);
    uint64_t v12 = v7[304];
    if ((v12 & 1) != 0)
    {
      id v13 = (void *)*((void *)v7 + 37);
      if (v13)
      {
        os_release(v13);
        uint64_t v12 = v7[304];
      }
    }

    *((void *)v7 + 37) = v11;
    v7[304] = v12 | 1;
    os_log_type_t v14 = a4;
    uint64_t v15 = v14[23];

    if (v15)
    {
      uint64_t v16 = nw_endpoint_copy_proxy_original_endpoint(a3);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = v7[304];
        if ((v18 & 1) != 0)
        {
          int64_t v19 = (void *)*((void *)v7 + 37);
          if (v19)
          {
            os_release(v19);
            uint64_t v18 = v7[304];
          }
        }

        *((void *)v7 + 37) = v17;
        v7[304] = v18 | 1;
      }

      uint64_t v20 = v15;
      if (v20[38] == 1)
      {
        uint64_t v21 = v20[39];

        uint64_t v22 = 4 * (v21 == 2001);
      }

      else
      {

        uint64_t v22 = 0;
      }

      v7[376] = v7[376] & 0xFB | v22;
    }

    metadata = nw_http_connection_create_metadata(0LL, 0LL, 0LL);
    os_log_type_t v24 = v7[320];
    if ((v24 & 1) != 0)
    {
      uint64_t v25 = (void *)*((void *)v7 + 39);
      if (v25)
      {
        os_release(v25);
        os_log_type_t v24 = v7[320];
      }
    }

    *((void *)v7 + 39) = metadata;
    v7[320] = v24 | 1;
    uint64_t v26 = v14;
    uint64_t v27 = v26[12];

    v7[376] = v7[376] & 0xFE | (((unsigned __int16)v27 & 0x8000) != 0);
    if ((v7[158] & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v28 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = *((_DWORD *)v7 + 93);
        uint64_t v30 = "server";
        BOOL v31 = (v7[376] & 1) == 0;
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
        if (v31) {
          uint64_t v30 = "client";
        }
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v7 + 74;
        *(_WORD *)&buf[22] = 2080;
        BOOL v48 = (uint64_t)" ";
        uint64_t v49 = 1024;
        os_log_type_t v50 = v29;
        v51 = 2082;
        id v52 = v30;
        _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> http1 is in %{public}s mode",  buf,  0x30u);
      }
    }

    *((void *)v7 + 26) = 0LL;
    *((_DWORD *)v7 + 88) = 0;
    *((void *)v7 + 27) = v7 + 208;
    *((void *)v7 + 29) = 0LL;
    *((void *)v7 + 30) = v7 + 232;
    *((void *)v7 + 31) = 0LL;
    *((void *)v7 + 32) = v7 + 248;
    *((void *)v7 + 42) = 0LL;
    *((void *)v7 + 43) = 0LL;
    *(void *)(v7 + 364) = 6LL;
    *((void *)v7 + 24) = 29000LL;
    if (v15) {
      os_release(v15);
    }
    return (BOOL)v7;
  }

  dispatch_source_t v37 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = 1LL;
  *(_WORD *)&buf[22] = 2048;
  BOOL v48 = 384LL;
  os_log_type_t v38 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v38);
  if (!result)
  {
    free(v38);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

  if (v23) {
LABEL_62:
  }
    free(v23);
}

      free(backtrace_string);
    }

    if (v33) {
      free(v33);
    }
    goto LABEL_10;
  }

  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings( (CFAllocatorRef)*MEMORY[0x189604DB0],  a2,  @",");
  uint64_t v16 = 0LL;
  while (v16 < CFArrayGetCount(ArrayBySeparatingStrings))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v16);
    uint64_t v18 = (char *)nw_utilities_create_c_string_from_cfstring(ValueAtIndex);
    if (v18)
    {
      int64_t v19 = v5;
      if (v5)
      {
        uint64_t v20 = (void *)v5[1];
        uint64_t v21 = xpc_string_create(v18);
        xpc_array_append_value(v20, v21);

        goto LABEL_16;
      }

      __nwlog_obj();
      id v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_ws_request_add_subprotocol";
      os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      __int16 v43 = 0;
      if (__nwlog_fault(v24, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          log = (os_log_t)v24;
          __nwlog_obj();
          uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v26 = type;
          uint64_t v27 = v25;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v46 = "nw_ws_request_add_subprotocol";
            _os_log_impl(&dword_181A5C000, v27, v26, "%{public}s called with null request", buf, 0xCu);
          }
        }

        else
        {
          if (v43)
          {
            BOOL v28 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            loga = (os_log_s *)objc_claimAutoreleasedReturnValue();
            id v40 = type;
            uint64_t v29 = os_log_type_enabled(loga, type);
            if (v28)
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446466;
                uint64_t v46 = "nw_ws_request_add_subprotocol";
                os_log_type_t v47 = 2082;
                BOOL v48 = v28;
                _os_log_impl( &dword_181A5C000,  loga,  v40,  "%{public}s called with null request, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v28);
            }

            else
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446210;
                uint64_t v46 = "nw_ws_request_add_subprotocol";
                _os_log_impl( &dword_181A5C000,  loga,  v40,  "%{public}s called with null request, no backtrace",  buf,  0xCu);
              }
            }

            goto LABEL_36;
          }

          log = (os_log_t)v24;
          __nwlog_obj();
          uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v31 = type;
          uint64_t v27 = v30;
          if (os_log_type_enabled(v30, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v46 = "nw_ws_request_add_subprotocol";
            _os_log_impl( &dword_181A5C000,  v27,  v31,  "%{public}s called with null request, backtrace limit exceeded",  buf,  0xCu);
          }
        }

        os_log_type_t v24 = (char *)log;
      }

      _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0x20u);
      goto LABEL_62;
    }

  if (v3)
  {
LABEL_62:
    uint64_t v27 = (char *)v3;
    goto LABEL_136;
  }

        if (!v30) {
          goto LABEL_47;
        }
        goto LABEL_62;
      }

      uint64_t v12 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v12);
      *(_DWORD *)buf = 136446722;
      __int16 v72 = "nw_append_format";
      uint64_t v73 = 2082;
      __int16 v74 = (unint64_t)a2;
      uint64_t v75 = 1024;
      uint64_t v76 = v5;
      id v13 = (void *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v67 = 0;
      os_log_type_t v14 = __nwlog_fault(v13, &type, &v67);
      if ((_DWORD)v14)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v16 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v16);
          uint64_t v17 = (os_log_s *)gLogObj;
          uint64_t v18 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            __int16 v72 = "nw_append_format";
            uint64_t v73 = 2082;
            __int16 v74 = (unint64_t)a2;
            uint64_t v75 = 1024;
            uint64_t v76 = v5;
            int64_t v19 = "%{public}s vasprintf(%{public}s) returned %d failed";
LABEL_42:
            _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0x1Cu);
          }
        }

        else if (v67)
        {
          uint64_t v20 = (void *)__nw_create_backtrace_string(v14, v15);
          uint64_t v21 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v21);
          uint64_t v17 = (os_log_s *)gLogObj;
          uint64_t v18 = type;
          uint64_t v22 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v20)
          {
            if (v22)
            {
              *(_DWORD *)buf = 136446978;
              __int16 v72 = "nw_append_format";
              uint64_t v73 = 2082;
              __int16 v74 = (unint64_t)a2;
              uint64_t v75 = 1024;
              uint64_t v76 = v5;
              os_log_type_t v77 = 2082;
              os_log_type_t v78 = v20;
              _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s vasprintf(%{public}s) returned %d failed, dumping backtrace:%{public}s",  buf,  0x26u);
            }

            free(v20);
            goto LABEL_43;
          }

          if (v22)
          {
            *(_DWORD *)buf = 136446722;
            __int16 v72 = "nw_append_format";
            uint64_t v73 = 2082;
            __int16 v74 = (unint64_t)a2;
            uint64_t v75 = 1024;
            uint64_t v76 = v5;
            int64_t v19 = "%{public}s vasprintf(%{public}s) returned %d failed, no backtrace";
            goto LABEL_42;
          }
        }

        else
        {
          uint64_t v41 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v41);
          uint64_t v17 = (os_log_s *)gLogObj;
          uint64_t v18 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            __int16 v72 = "nw_append_format";
            uint64_t v73 = 2082;
            __int16 v74 = (unint64_t)a2;
            uint64_t v75 = 1024;
            uint64_t v76 = v5;
            int64_t v19 = "%{public}s vasprintf(%{public}s) returned %d failed, backtrace limit exceeded";
            goto LABEL_42;
          }
        }
      }

    if (!v13) {
      return;
    }
    goto LABEL_62;
  }

  id v4 = (unsigned __int8 *)(a1 + 40);
  do
    uint64_t v5 = (void **)__ldxr(v4);
  while (__stxr(0xFFu, v4));
  if ((_DWORD)v5)
  {
    uint64_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_array_remove_objects";
    id v13 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v13))
    {
      free(v13);
      do
        __ldxr(v4);
      while (__stlxr(v5, v4));
      return;
    }

      if (!v16)
      {
LABEL_63:

        return;
      }

    if (v20) {
      free(v20);
    }
    return 0xFFFFFFFFLL;
  }

  if (!a3)
  {
    __nwlog_obj();
    os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v34 = "nw_nat64_synthesize";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst[0]) = 16;
    LOBYTE(v32) = 0;
    if (__nwlog_fault(v20, __dst, &v32))
    {
      if (LOBYTE(__dst[0]) == 17)
      {
        __nwlog_obj();
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v22 = __dst[0];
        if (os_log_type_enabled(v21, __dst[0]))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_nat64_synthesize";
          id v23 = "%{public}s called with null out_ipv6_addrs";
          goto LABEL_59;
        }

        goto LABEL_60;
      }

      if (!(_BYTE)v32)
      {
        __nwlog_obj();
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v22 = __dst[0];
        if (os_log_type_enabled(v21, __dst[0]))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_nat64_synthesize";
          id v23 = "%{public}s called with null out_ipv6_addrs, backtrace limit exceeded";
          goto LABEL_59;
        }

        goto LABEL_60;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v22 = __dst[0];
      uint64_t v30 = os_log_type_enabled(v21, __dst[0]);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_nat64_synthesize";
          id v23 = "%{public}s called with null out_ipv6_addrs, no backtrace";
          goto LABEL_59;
        }

        goto LABEL_60;
      }

      if (!v30) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v34 = "nw_nat64_synthesize";
      char v35 = 2082;
      *(void *)dispatch_source_t v36 = backtrace_string;
      uint64_t v29 = "%{public}s called with null out_ipv6_addrs, dumping backtrace:%{public}s";
LABEL_49:
      _os_log_impl(&dword_181A5C000, v21, v22, v29, buf, 0x16u);
LABEL_50:

      free(backtrace_string);
      goto LABEL_61;
    }

    goto LABEL_61;
  }

  os_log_type_t v32 = 0LL;
  int v6 = nw_nat64_copy_prefixes(a1, &v32);
  uint64_t v7 = v6;
  os_log_type_t v8 = v6;
  int v9 = calloc(v6, 0x10uLL);
  if (!v9)
  {
    __nwlog_obj();
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    BOOL v34 = "strict_calloc";
    char v35 = 2048;
    *(void *)dispatch_source_t v36 = v8;
    *(_WORD *)&v36[8] = 2048;
    *(void *)dispatch_source_t v37 = 16LL;
    uint64_t v26 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v26);
    if ((_DWORD)result)
    {
      __break(1u);
      return result;
    }

    free(v26);
  }

  BOOL v10 = 0LL;
  uint64_t v7 = 0LL;
  *a3 = v9;
  do
  {
    if (nw_nat64_synthesize_v6((char *)v32 + v10, a2, (char *)*a3 + 16 * (int)v7))
    {
      uint64_t v7 = (v7 + 1);
      goto LABEL_15;
    }

    if (*(_DWORD *)((char *)v32 + v10) > 0xCu)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(_DWORD *)a2;
        *(_DWORD *)buf = 136446466;
        BOOL v34 = "nw_nat64_synthesize";
        char v35 = 1024;
        *(_DWORD *)dispatch_source_t v36 = v17;
        os_log_type_t v14 = v11;
        uint64_t v15 = "%{public}s nw_nat64_synthesize_v6 for %{network:in_addr}d";
        uint64_t v16 = 18;
        goto LABEL_22;
      }
    }

    else
    {
      __dst[0] = 0LL;
      __dst[1] = 0LL;
      memcpy(__dst, (char *)v32 + v10 + 4, *(unsigned int *)((char *)v32 + v10));
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(_DWORD *)a2;
        id v13 = 8 * *(_DWORD *)((char *)v32 + v10);
        *(_DWORD *)buf = 136447234;
        BOOL v34 = "nw_nat64_synthesize";
        char v35 = 1024;
        *(_DWORD *)dispatch_source_t v36 = v12;
        *(_WORD *)&void v36[4] = 1040;
        *(_DWORD *)&v36[6] = 16;
        *(_WORD *)dispatch_source_t v37 = 2096;
        *(void *)&v37[2] = __dst;
        os_log_type_t v38 = 1024;
        __int16 v39 = v13;
        os_log_type_t v14 = v11;
        uint64_t v15 = "%{public}s nw_nat64_synthesize_v6 for %{network:in_addr}d from %{network:in6_addr}.16P/%d";
        uint64_t v16 = 40;
LABEL_22:
        _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_ERROR, v15, buf, v16);
      }
    }

LABEL_15:
    v10 += 16LL;
    --v8;
  }

  while (v8);
  if (v32)
  {
    free(v32);
    os_log_type_t v32 = 0LL;
  }

  if (!(_DWORD)v7)
  {
    if (*a3)
    {
      free(*a3);
      uint64_t v7 = 0LL;
      *a3 = 0LL;
      return v7;
    }

    return 0LL;
  }

  return v7;
}

    goto LABEL_62;
  }

  cached_content_for_protocol = (id *)nw_association_get_cached_content_for_protocol(v3, v5);
  if (cached_content_for_protocol || (cached_content_for_protocol = (id *)calloc(1uLL, 0x30uLL)) != 0LL)
  {
    objc_storeStrong(cached_content_for_protocol, a2);
    int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_quic_failure_cache_seconds,  1800LL);
    os_log_type_t v8 = time(0LL);
    nw_association_set_cached_content_for_protocol( v3,  v5,  (uint64_t)cached_content_for_protocol,  v8 + int64_with_default);
LABEL_8:

LABEL_9:
    return;
  }

  __nwlog_obj();
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  dispatch_source_t v36 = "strict_calloc";
  dispatch_source_t v37 = 2048;
  os_log_type_t v38 = 1LL;
  __int16 v39 = 2048;
  id v40 = 48LL;
  os_log_type_t v24 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v24))
  {
    free(v24);
    __nwlog_obj();
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    dispatch_source_t v36 = "nw_quic_save_token_on_queue";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v26 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_source_t v36 = "nw_quic_save_token_on_queue";
        _os_log_impl(&dword_181A5C000, v15, v26, "%{public}s called with null association_cache", buf, 0xCu);
      }
    }

    else if (v33)
    {
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v30 = type;
      BOOL v31 = os_log_type_enabled(v15, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          dispatch_source_t v36 = "nw_quic_save_token_on_queue";
          dispatch_source_t v37 = 2082;
          os_log_type_t v38 = (uint64_t)v29;
          _os_log_impl( &dword_181A5C000,  v15,  v30,  "%{public}s called with null association_cache, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v29);
        if (!v14) {
          goto LABEL_8;
        }
        goto LABEL_63;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        dispatch_source_t v36 = "nw_quic_save_token_on_queue";
        _os_log_impl( &dword_181A5C000,  v15,  v30,  "%{public}s called with null association_cache, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_source_t v36 = "nw_quic_save_token_on_queue";
        _os_log_impl( &dword_181A5C000,  v15,  v32,  "%{public}s called with null association_cache, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_61;
  }

  __break(1u);
}

    goto LABEL_62;
  }

  cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v5, v8);
  if (cached_content_for_protocol || (cached_content_for_protocol = (uint64_t)calloc(1uLL, 0x30uLL)) != 0)
  {
    objc_storeStrong((id *)(cached_content_for_protocol + 8), a2);
    objc_storeStrong((id *)(cached_content_for_protocol + 16), a3);
    int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_quic_failure_cache_seconds,  1800LL);
    uint64_t v11 = time(0LL);
    nw_association_set_cached_content_for_protocol(v5, v8, cached_content_for_protocol, v11 + int64_with_default);
LABEL_8:

LABEL_9:
    return;
  }

  __nwlog_obj();
  uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  __int16 v39 = "strict_calloc";
  id v40 = 2048;
  uint64_t v41 = 1LL;
  uint64_t v42 = 2048;
  __int16 v43 = 48LL;
  uint64_t v27 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v27))
  {
    free(v27);
    __nwlog_obj();
    BOOL v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    dispatch_source_t v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v29 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
        _os_log_impl(&dword_181A5C000, v18, v29, "%{public}s called with null association_cache", buf, 0xCu);
      }
    }

    else if (v36)
    {
      os_log_type_t v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v33 = type;
      BOOL v34 = os_log_type_enabled(v18, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
          id v40 = 2082;
          uint64_t v41 = (uint64_t)v32;
          _os_log_impl( &dword_181A5C000,  v18,  v33,  "%{public}s called with null association_cache, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v32);
        if (!v17) {
          goto LABEL_8;
        }
        goto LABEL_63;
      }

      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
        _os_log_impl( &dword_181A5C000,  v18,  v33,  "%{public}s called with null association_cache, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v35 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
        _os_log_impl( &dword_181A5C000,  v18,  v35,  "%{public}s called with null association_cache, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_61;
  }

  __break(1u);
}

  uint64_t v46 = v22 + 2;
  os_log_type_t v47 = a1[5] + a1[6];
  if ((unint64_t)(v22 + 2) < v47)
  {
    BOOL v48 = 0LL;
    uint64_t v49 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    os_log_type_t v50 = (const CFArrayCallBacks *)MEMORY[0x189605228];
    do
    {
      v51 = *(unsigned __int16 *)v22;
      uint64_t v22 = &v46[v51];
      if (!v48) {
        BOOL v48 = CFArrayCreateMutable(v49, 0LL, v50);
      }
      id v52 = CFDataCreate(v49, v46, v51);
      CFArrayAppendValue(v48, v52);
      if (v52) {
        CFRelease(v52);
      }
      uint64_t v46 = v22 + 2;
      os_log_type_t v47 = a1[5] + a1[6];
    }

    while ((unint64_t)(v22 + 2) < v47);
    if (v48)
    {
      v53 = *(const void **)(a2 + 104);
      if (v53)
      {
        CFRelease(v53);
        *(void *)(a2 + 104) = 0LL;
      }

      if (CFArrayGetCount(v48) >= 1)
      {
        *(void *)(a2 + 104) = CFRetain(v48);
        sec_protocol_options_set_server_raw_public_key_certificates();
      }

      CFRelease(v48);
    }
  }

  return 1LL;
}

    if (v15) {
      free(v15);
    }
    return 0LL;
  }

  if (a1 >= 0x22C5)
  {
    __nwlog_obj();
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v29 = 0;
    if (__nwlog_fault(v15, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int64_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s txt_record can't have length > 8900", buf, 0xCu);
        }

  if (v11) {
    free(v11);
  }
  return 0LL;
}

    BOOL v10 = v13;
    uint64_t v11 = v14;
    uint64_t v12 = 12;
    goto LABEL_18;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v23 = "nw_protocol_http3_disconnect";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      id v23 = "nw_protocol_http3_disconnect";
      uint64_t v7 = "%{public}s called with null http3";
      goto LABEL_61;
    }

    if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      uint64_t v18 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (!v18) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446466;
        id v23 = "nw_protocol_http3_disconnect";
        os_log_type_t v24 = 2082;
        uint64_t v25 = backtrace_string;
        uint64_t v17 = "%{public}s called with null http3, dumping backtrace:%{public}s";
        goto LABEL_46;
      }

      if (!v18) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      id v23 = "nw_protocol_http3_disconnect";
      uint64_t v7 = "%{public}s called with null http3, no backtrace";
    }

    else
    {
      id v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      id v23 = "nw_protocol_http3_disconnect";
      uint64_t v7 = "%{public}s called with null http3, backtrace limit exceeded";
    }

    goto LABEL_61;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (a2)
  {
    *(_DWORD *)buf = 136446466;
    id v23 = "nw_protocol_http3_disconnect";
    os_log_type_t v24 = 2048;
    uint64_t v25 = handle;
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      int v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446466;
      id v23 = "nw_protocol_http3_disconnect";
      os_log_type_t v24 = 2048;
      uint64_t v25 = handle;
      uint64_t v7 = "%{public}s http3 %p called";
LABEL_17:
      BOOL v10 = v5;
      uint64_t v11 = v6;
      uint64_t v12 = 22;
LABEL_18:
      _os_log_impl(&dword_181A5C000, v10, v11, v7, buf, v12);
      goto LABEL_19;
    }

    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      int v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446466;
      id v23 = "nw_protocol_http3_disconnect";
      os_log_type_t v24 = 2048;
      uint64_t v25 = handle;
      uint64_t v7 = "%{public}s http3 %p called, backtrace limit exceeded";
      goto LABEL_17;
    }

    os_log_type_t v8 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)gLogObj;
    int v6 = type;
    int v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v8)
    {
      if (!v9) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446466;
      id v23 = "nw_protocol_http3_disconnect";
      os_log_type_t v24 = 2048;
      uint64_t v25 = handle;
      uint64_t v7 = "%{public}s http3 %p called, no backtrace";
      goto LABEL_17;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446722;
      id v23 = "nw_protocol_http3_disconnect";
      os_log_type_t v24 = 2048;
      uint64_t v25 = handle;
      uint64_t v26 = 2082;
      uint64_t v27 = v8;
      _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s http3 %p called, dumping backtrace:%{public}s", buf, 0x20u);
    }

    free(v8);
LABEL_19:
    if (!v4) {
      return;
    }
    goto LABEL_20;
  }

  *(_DWORD *)buf = 136446210;
  id v23 = "nw_protocol_http3_disconnect";
  id v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 136446210;
    id v23 = "nw_protocol_http3_disconnect";
    uint64_t v7 = "%{public}s called with null other_protocol";
    goto LABEL_61;
  }

  if (!v20)
  {
    id v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 136446210;
    id v23 = "nw_protocol_http3_disconnect";
    uint64_t v7 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_61;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  id v13 = (os_log_s *)__nwlog_obj();
  os_log_type_t v14 = type;
  int64_t v19 = os_log_type_enabled(v13, type);
  if (!backtrace_string)
  {
    if (!v19) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 136446210;
    id v23 = "nw_protocol_http3_disconnect";
    uint64_t v7 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_61;
  }

  if (!v19) {
    goto LABEL_47;
  }
  *(_DWORD *)buf = 136446466;
  id v23 = "nw_protocol_http3_disconnect";
  os_log_type_t v24 = 2082;
  uint64_t v25 = backtrace_string;
  uint64_t v17 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_46:
  _os_log_impl(&dword_181A5C000, v13, v14, v17, buf, 0x16u);
LABEL_47:
  free(backtrace_string);
  if (v4) {
LABEL_20:
  }
    free(v4);
}

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v39 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buffer[0]) = 136446466;
    *(void *)((char *)buffer + 4) = "nw_interpose_client_register";
    WORD6(buffer[0]) = 2114;
    *(void *)((char *)buffer + 14) = 0LL;
    _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] failed to allocate interpose",  (uint8_t *)buffer,  0x16u);
  }

  uint64_t v22 = 0LL;
LABEL_64:

  return v22;
}

    if (!v20) {
      goto LABEL_73;
    }
LABEL_62:
    free(v20);
    goto LABEL_73;
  }

  __nwlog_obj();
  os_log_type_t v44 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v71 = 136446210;
  *(void *)__int16 v72 = "nw_path_create_bridged_flow_director";
  nw_endpoint_t v45 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v45, buf, type))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = buf[0];
      if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
      {
        BOOL v71 = 136446210;
        *(void *)__int16 v72 = "nw_path_create_bridged_flow_director";
        _os_log_impl(&dword_181A5C000, v46, v47, "%{public}s called with null context", (uint8_t *)&v71, 0xCu);
      }
    }

    else if (type[0])
    {
      os_log_type_t v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v51 = buf[0];
      id v52 = os_log_type_enabled(v46, (os_log_type_t)buf[0]);
      if (v50)
      {
        if (v52)
        {
          BOOL v71 = 136446466;
          *(void *)__int16 v72 = "nw_path_create_bridged_flow_director";
          *(_WORD *)&v72[8] = 2082;
          *(void *)&v72[10] = v50;
          _os_log_impl( &dword_181A5C000,  v46,  v51,  "%{public}s called with null context, dumping backtrace:%{public}s",  (uint8_t *)&v71,  0x16u);
        }

        free(v50);
        goto LABEL_105;
      }

      if (v52)
      {
        BOOL v71 = 136446210;
        *(void *)__int16 v72 = "nw_path_create_bridged_flow_director";
        _os_log_impl( &dword_181A5C000,  v46,  v51,  "%{public}s called with null context, no backtrace",  (uint8_t *)&v71,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v56 = buf[0];
      if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
      {
        BOOL v71 = 136446210;
        *(void *)__int16 v72 = "nw_path_create_bridged_flow_director";
        _os_log_impl( &dword_181A5C000,  v46,  v56,  "%{public}s called with null context, backtrace limit exceeded",  (uint8_t *)&v71,  0xCu);
      }
    }
  }

  return (NSMutableDictionary *)0LL;
}

  if (v12) {
    free(v12);
  }
  initial_remote_settings = 0LL;
LABEL_8:

  return initial_remote_settings;
}

      if (v17) {
        free(v17);
      }
      goto LABEL_8;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    v36[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v11, v36, &type))
    {
      if (v36[0] == 17)
      {
        __nwlog_obj();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v15 = v36[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v36[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http", buf, 0xCu);
        }

    goto LABEL_62;
  }

  v30[0] = MEMORY[0x1895F87A8];
  v30[1] = 3221225472LL;
  v30[2] = __nw_http_client_metadata_set_sniffed_media_type_block_invoke;
  v30[3] = &__block_descriptor_40_e9_B16__0_v8l;
  v30[4] = a2;
  if (v4)
  {
    uint64_t v7 = v4[4];
    if (v7) {
      __nw_http_client_metadata_set_sniffed_media_type_block_invoke((uint64_t)v30, v7);
    }
    goto LABEL_9;
  }

  __nwlog_obj();
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v34 = "nw_protocol_metadata_access_handle";
  id v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v31 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null metadata", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (!v31)
  {
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v29 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl( &dword_181A5C000,  v14,  v29,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_61;
  }

  os_log_type_t v24 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v25 = type;
  uint64_t v26 = os_log_type_enabled(v14, type);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v14, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v34 = "nw_protocol_metadata_access_handle";
    char v35 = 2082;
    dispatch_source_t v36 = v24;
    _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v24);
  if (v13) {
    goto LABEL_63;
  }
LABEL_9:
}

    goto LABEL_62;
  }

  v30[0] = MEMORY[0x1895F87A8];
  v30[1] = 3221225472LL;
  v30[2] = __nw_http_client_metadata_set_client_error_block_invoke;
  v30[3] = &__block_descriptor_36_e9_B16__0_v8l;
  BOOL v31 = a2;
  if (v4)
  {
    uint64_t v7 = v4[4];
    if (v7) {
      __nw_http_client_metadata_set_client_error_block_invoke((uint64_t)v30, v7);
    }
    goto LABEL_9;
  }

  __nwlog_obj();
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v35 = "nw_protocol_metadata_access_handle";
  id v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v32 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      char v35 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null metadata", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (!v32)
  {
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v29 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      char v35 = "nw_protocol_metadata_access_handle";
      _os_log_impl( &dword_181A5C000,  v14,  v29,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_61;
  }

  os_log_type_t v24 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v25 = type;
  uint64_t v26 = os_log_type_enabled(v14, type);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      char v35 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v14, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    char v35 = "nw_protocol_metadata_access_handle";
    dispatch_source_t v36 = 2082;
    dispatch_source_t v37 = v24;
    _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v24);
  if (v13) {
    goto LABEL_63;
  }
LABEL_9:
}

    goto LABEL_62;
  }

  v32[0] = MEMORY[0x1895F87A8];
  v32[1] = 3221225472LL;
  v32[2] = __nw_http_connection_metadata_set_cached_token_block_invoke;
  v32[3] = &__block_descriptor_48_e9_B16__0_v8l;
  v32[4] = a2;
  v32[5] = a3;
  if (v6)
  {
    int v9 = v6[4];
    if (v9) {
      __nw_http_connection_metadata_set_cached_token_block_invoke((uint64_t)v32, v9);
    }
    goto LABEL_9;
  }

  __nwlog_obj();
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  dispatch_source_t v36 = "nw_protocol_metadata_access_handle";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v33 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int64_t v19 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      dispatch_source_t v36 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null metadata", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (!v33)
  {
    __nwlog_obj();
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v31 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      dispatch_source_t v36 = "nw_protocol_metadata_access_handle";
      _os_log_impl( &dword_181A5C000,  v16,  v31,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_61;
  }

  uint64_t v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v27 = type;
  BOOL v28 = os_log_type_enabled(v16, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      dispatch_source_t v36 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v16, v27, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    dispatch_source_t v36 = "nw_protocol_metadata_access_handle";
    dispatch_source_t v37 = 2082;
    os_log_type_t v38 = v26;
    _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v26);
  if (v15) {
    goto LABEL_63;
  }
LABEL_9:
}

    goto LABEL_62;
  }

  if (v2)
  {
    uint64_t v5 = v2[4];
    if (v5)
    {
      int v6 = *(void **)(v5 + 88);
      *(void *)(v5 + 88) = 0LL;

      *(_BYTE *)(v5 + 196) |= 4u;
    }

    goto LABEL_9;
  }

  __nwlog_obj();
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v32 = "nw_protocol_metadata_access_handle";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v32 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null metadata", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (!v29)
  {
    __nwlog_obj();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v28 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v32 = "nw_protocol_metadata_access_handle";
      _os_log_impl( &dword_181A5C000,  v13,  v28,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_61;
  }

  id v23 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v24 = type;
  uint64_t v25 = os_log_type_enabled(v13, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v32 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v13, v24, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v32 = "nw_protocol_metadata_access_handle";
    uint64_t v33 = 2082;
    BOOL v34 = v23;
    _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v23);
  if (v12) {
    goto LABEL_63;
  }
LABEL_9:
}

    goto LABEL_62;
  }

  v30[0] = MEMORY[0x1895F87A8];
  v30[1] = 3221225472LL;
  v30[2] = __nw_http_connection_metadata_get_uuid_block_invoke;
  v30[3] = &__block_descriptor_40_e9_B16__0_v8l;
  v30[4] = a2;
  if (v4)
  {
    uint64_t v7 = v4[4];
    if (v7) {
      __nw_http_connection_metadata_get_uuid_block_invoke((uint64_t)v30, v7);
    }
    goto LABEL_9;
  }

  __nwlog_obj();
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v34 = "nw_protocol_metadata_access_handle";
  id v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v31 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null metadata", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (!v31)
  {
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v29 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl( &dword_181A5C000,  v14,  v29,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_61;
  }

  os_log_type_t v24 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v25 = type;
  uint64_t v26 = os_log_type_enabled(v14, type);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_181A5C000, v14, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }

    goto LABEL_61;
  }

  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v34 = "nw_protocol_metadata_access_handle";
    char v35 = 2082;
    dispatch_source_t v36 = v24;
    _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v24);
  if (v13) {
    goto LABEL_63;
  }
LABEL_9:
}

LABEL_81:
  os_log_type_t v8 = v148;
  uint64_t v7 = v149;
  if (!v20)
  {
LABEL_86:
    uint64_t v59 = nw_endpoint_flow_add_one_protocol( *(void **)(a1 + 32),  (__int128 *)identifier,  v8,  v7,  *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void **)(a1 + 48),  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL));
    if (!v59)
    {
      os_log_type_t v63 = 0LL;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = 1;
      goto LABEL_115;
    }

    v147 = v8;
    if (nw_protocol_definition_get_message_is_stream(v7))
    {
      os_log_type_t v60 = *(void *)(a1 + 56);
      if (!*(void *)(v60 + 768))
      {
        objc_storeStrong((id *)(v60 + 768), a3);
        if (*(_UNKNOWN **)(v59 + 40) == &nw_protocol_ref_counted_handle)
        {
          v79 = *(void *)(v59 + 88);
          if (v79) {
            *(void *)(v59 + 88) = v79 + 1;
          }
          *(void *)buf = v59;
          buf[8] |= 1u;
          nw_endpoint_t v64 = 1;
        }

        else
        {
          nw_endpoint_t v64 = 0;
          *(void *)buf = v59;
          buf[8] &= ~1u;
        }

        os_log_type_t v80 = *(void *)(a1 + 56);
        __int16 v81 = *(_BYTE *)(v80 + 784);
        if ((v81 & 1) != 0)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)(v80 + 776));
          __int16 v81 = *(_BYTE *)(v80 + 784);
        }

        *(void *)(v80 + 776) = v59;
        *(_BYTE *)(v80 + 784) = v64 | v81 & 0xFE;
        os_log_type_t v82 = *(void *)(v59 + 24);
        if (v82)
        {
          __int16 v83 = *(uint64_t (**)(uint64_t, uint64_t, void))(v82 + 232);
          if (v83)
          {
            os_log_type_t v84 = *(void *)(a1 + 56) + 440LL;
            __int16 v85 = *(void **)(v59 + 40);
            if (v85 == &nw_protocol_ref_counted_handle)
            {
              __int16 v87 = *(void *)(v59 + 88);
              if (v87) {
                *(void *)(v59 + 88) = v87 + 1;
              }
              *(void *)buf = v59;
              v86 = buf[8] | 1;
            }

            else
            {
              *(void *)buf = v59;
              v86 = buf[8] & 0xFE;
            }

            buf[8] = v86;
            v88 = v83(v59, v84, 0LL);
            if (v85 == &nw_protocol_ref_counted_handle) {
              nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
            }
            if ((v88 & 1) == 0 && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v89 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
              {
                v90 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                v144 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                v146 = v90;
                v142 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                __int16 v91 = nw_endpoint_get_logging_description(v142);
                id v92 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                os_log_type_t v93 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                v94 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                v95 = v94;
                v96 = "invalid";
                os_log_type_t v97 = *(const char **)(*(void *)(a1 + 56) + 392LL);
                if (!v97) {
                  os_log_type_t v97 = "invalid";
                }
                if (*(void *)(v59 + 16)) {
                  v96 = *(const char **)(v59 + 16);
                }
                *(_DWORD *)buf = 136448258;
                *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                v153 = 2082;
                v154 = (void *)v146;
                v155 = 2082;
                v156 = v144;
                v157 = 2082;
                v158 = (void *)v91;
                v159 = 2082;
                v160 = v92;
                v161 = 2082;
                v162 = v93;
                v163 = 2114;
                v164 = v94;
                v165 = 2082;
                v166 = (void *)v97;
                v167 = 2082;
                v168 = (uint64_t)v96;
                _os_log_impl( &dword_181A5C000,  v89,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add protoco l %{public}s as a listener to %{public}s",  buf,  0x5Cu);
              }

              os_log_type_t v8 = v147;
            }
          }
        }
      }
    }

    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880LL));
    BOOL v61 = *(void *)(a1 + 56);
    if (!*(void *)(v61 + 720))
    {
      if (*(_UNKNOWN **)(v59 + 40) == &nw_protocol_ref_counted_handle)
      {
        v67 = *(void *)(v59 + 88);
        if (v67)
        {
          *(void *)(v59 + 88) = v67 + 1;
          BOOL v61 = *(void *)(a1 + 56);
        }

        *(void *)buf = v59;
        os_log_type_t v62 = buf[8] | 1;
      }

      else
      {
        *(void *)buf = v59;
        os_log_type_t v62 = buf[8] & 0xFE;
      }

      buf[8] = v62;
      char v68 = *(_BYTE *)(v61 + 728);
      id v69 = v59;
      if ((v68 & 1) != 0)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)(v61 + 720));
        char v68 = *(_BYTE *)(v61 + 728);
        id v69 = *(void *)buf;
        os_log_type_t v62 = buf[8];
      }

      *(void *)(v61 + 720) = v69;
      *(_BYTE *)(v61 + 728) = v68 & 0xFE | v62 & 1;
      BOOL v61 = *(void *)(a1 + 56);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(v61 + 880));
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v59;
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v70 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
      {
        BOOL v71 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        __int16 v72 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        uint64_t v73 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        __int16 v74 = nw_endpoint_get_logging_description(v73);
        uint64_t v75 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        uint64_t v76 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        os_log_type_t v77 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        v153 = 2082;
        v154 = (void *)v71;
        v155 = 2082;
        v156 = v72;
        v157 = 2082;
        v158 = (void *)v74;
        v159 = 2082;
        v160 = v75;
        v161 = 2082;
        v162 = v76;
        v163 = 2114;
        v164 = v77;
        v165 = 2082;
        v166 = identifier;
        _os_log_impl( &dword_181A5C000,  v70,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached transport protocol: %{public}s",  buf,  0x52u);
      }

      goto LABEL_114;
    }

    goto LABEL_147;
  }

    free(v25);
    if (!v17) {
      return;
    }
LABEL_81:
    free(v17);
    return;
  }

  if ((*(__int16 *)(v6 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v21 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = *(_DWORD *)(v6 + 368);
      *(_DWORD *)buf = 136446978;
      char v35 = "nw_protocol_http2_notify";
      dispatch_source_t v36 = 2082;
      dispatch_source_t v37 = (char *)(v6 + 390);
      os_log_type_t v38 = 2080;
      __int16 v39 = " ";
      id v40 = 1024;
      uint64_t v41 = v22;
      _os_log_impl(&dword_181A5C000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }

  if (a3 > 0x16) {
    goto LABEL_21;
  }
  if (((1 << a3) & 0x208080) != 0) {
    return;
  }
  if (((1 << a3) & 0x12000) == 0)
  {
    if (a3 == 22)
    {
      if ((*(__int16 *)(v6 + 388) & 0x80000000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v14 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = *(_DWORD *)(v6 + 368);
          *(_DWORD *)buf = 136446978;
          char v35 = "nw_protocol_http2_notify";
          dispatch_source_t v36 = 2082;
          dispatch_source_t v37 = (char *)(v6 + 390);
          os_log_type_t v38 = 2080;
          __int16 v39 = " ";
          id v40 = 1024;
          uint64_t v41 = v15;
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> restarting all streams",  buf,  0x26u);
        }
      }

      *(_WORD *)(v6 + 388) |= 8u;
    }

    if (!v16) {
      goto LABEL_80;
    }
    goto LABEL_62;
  }

  callbacks = a1[1].callbacks;
  if (callbacks) {
    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
  }
  uint64_t v5 = a1->callbacks;
  if (v5)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v5->get_parameters;
    if (get_parameters)
    {
      uint64_t v7 = (void *)get_parameters(a1);
      goto LABEL_10;
    }
  }

  __nwlog_obj();
  identifier = a1->identifier;
  *(_DWORD *)buf = 136446722;
  v96 = "__nw_protocol_get_parameters";
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  os_log_type_t v97 = 2082;
  v98 = (nw_protocol *)identifier;
  os_log_type_t v99 = 2048;
  BOOL v100 = a1;
  v53 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v93 = 0;
  if (__nwlog_fault(v53, &type, &v93))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v54 = (os_log_s *)__nwlog_obj();
      v55 = type;
      if (os_log_type_enabled(v54, type))
      {
        uint64_t v56 = a1->identifier;
        if (!v56) {
          uint64_t v56 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446722;
        v96 = "__nw_protocol_get_parameters";
        os_log_type_t v97 = 2082;
        v98 = (nw_protocol *)v56;
        os_log_type_t v99 = 2048;
        BOOL v100 = a1;
        os_log_type_t v57 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_201:
        _os_log_impl(&dword_181A5C000, v54, v55, v57, buf, 0x20u);
      }
    }

    else if (v93)
    {
      id v69 = (char *)__nw_create_backtrace_string();
      id v54 = (os_log_s *)__nwlog_obj();
      v55 = type;
      os_log_type_t v70 = os_log_type_enabled(v54, type);
      if (v69)
      {
        if (v70)
        {
          BOOL v71 = a1->identifier;
          if (!v71) {
            BOOL v71 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446978;
          v96 = "__nw_protocol_get_parameters";
          os_log_type_t v97 = 2082;
          v98 = (nw_protocol *)v71;
          os_log_type_t v99 = 2048;
          BOOL v100 = a1;
          v101 = 2082;
          os_log_type_t v102 = v69;
          _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v69);
        goto LABEL_202;
      }

      if (v70)
      {
        v86 = a1->identifier;
        if (!v86) {
          v86 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446722;
        v96 = "__nw_protocol_get_parameters";
        os_log_type_t v97 = 2082;
        v98 = (nw_protocol *)v86;
        os_log_type_t v99 = 2048;
        BOOL v100 = a1;
        os_log_type_t v57 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
        goto LABEL_201;
      }
    }

    else
    {
      id v54 = (os_log_s *)__nwlog_obj();
      v55 = type;
      if (os_log_type_enabled(v54, type))
      {
        os_log_type_t v84 = a1->identifier;
        if (!v84) {
          os_log_type_t v84 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446722;
        v96 = "__nw_protocol_get_parameters";
        os_log_type_t v97 = 2082;
        v98 = (nw_protocol *)v84;
        os_log_type_t v99 = 2048;
        BOOL v100 = a1;
        os_log_type_t v57 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
        goto LABEL_201;
      }
    }
  }

        if (v33) {
          free(v33);
        }
        if (v9) {
          free((void *)v9);
        }
        goto LABEL_65;
      }

      else {
        id v13 = (__count + 40);
      }
      if (a4 >= 0xFFFFFFD8) {
        os_log_type_t v14 = 0xFFFFFFFFLL;
      }
      else {
        os_log_type_t v14 = a4 + 40;
      }
      uint64_t v15 = a1->output_handler;
      if (v15)
      {
        handle = v15->handle;
        if (handle == &nw_protocol_ref_counted_handle)
        {
          callbacks = v15[1].callbacks;
          if (callbacks) {
            v15[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          }
        }

        uint64_t v18 = a1[1].callbacks;
        if (v18) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v18->add_input_handler + 1);
        }
        if (a6)
        {
          int64_t v19 = v15->callbacks;
          if (v19)
          {
            get_output_frames = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t))v19->get_output_frames;
            if (get_output_frames)
            {
              uint64_t v21 = get_output_frames(v15, a1, v13, v14);
              goto LABEL_24;
            }
          }

          __nwlog_obj();
          name = v15->identifier->name;
          *(_DWORD *)buf = 136446722;
          __int16 v81 = "__nw_protocol_get_output_frames";
          if (!name) {
            name = "invalid";
          }
          os_log_type_t v82 = 2082;
          *(void *)__int16 v83 = name;
          *(_WORD *)&v83[8] = 2048;
          *(void *)&v83[10] = v15;
          uint64_t v42 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          os_log_type_t v78 = 0;
          if (__nwlog_fault(v42, &type, &v78))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __int16 v43 = (os_log_s *)__nwlog_obj();
              os_log_type_t v44 = type;
              if (!os_log_type_enabled(v43, type)) {
                goto LABEL_154;
              }
              nw_endpoint_t v45 = v15->identifier->name;
              if (!v45) {
                nw_endpoint_t v45 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              __int16 v81 = "__nw_protocol_get_output_frames";
              os_log_type_t v82 = 2082;
              *(void *)__int16 v83 = v45;
              *(_WORD *)&v83[8] = 2048;
              *(void *)&v83[10] = v15;
              uint64_t v46 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_131:
              os_log_type_t v70 = v43;
              BOOL v71 = v44;
              __int16 v72 = 32;
LABEL_153:
              _os_log_impl(&dword_181A5C000, v70, v71, v46, buf, v72);
              goto LABEL_154;
            }

            if (!v78)
            {
              __int16 v43 = (os_log_s *)__nwlog_obj();
              os_log_type_t v44 = type;
              if (!os_log_type_enabled(v43, type)) {
                goto LABEL_154;
              }
              char v68 = v15->identifier->name;
              if (!v68) {
                char v68 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              __int16 v81 = "__nw_protocol_get_output_frames";
              os_log_type_t v82 = 2082;
              *(void *)__int16 v83 = v68;
              *(_WORD *)&v83[8] = 2048;
              *(void *)&v83[10] = v15;
              uint64_t v46 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
              goto LABEL_131;
            }

            os_log_type_t v57 = (char *)__nw_create_backtrace_string();
            __int16 v43 = (os_log_s *)__nwlog_obj();
            os_log_type_t v44 = type;
            BOOL v58 = os_log_type_enabled(v43, type);
            if (!v57)
            {
              if (!v58) {
                goto LABEL_154;
              }
              id v69 = v15->identifier->name;
              if (!v69) {
                id v69 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              __int16 v81 = "__nw_protocol_get_output_frames";
              os_log_type_t v82 = 2082;
              *(void *)__int16 v83 = v69;
              *(_WORD *)&v83[8] = 2048;
              *(void *)&v83[10] = v15;
              uint64_t v46 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
              goto LABEL_131;
            }

            if (v58)
            {
              uint64_t v59 = v15->identifier->name;
              if (!v59) {
                uint64_t v59 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              __int16 v81 = "__nw_protocol_get_output_frames";
              os_log_type_t v82 = 2082;
              *(void *)__int16 v83 = v59;
              *(_WORD *)&v83[8] = 2048;
              *(void *)&v83[10] = v15;
              os_log_type_t v84 = 2082;
              __int16 v85 = v57;
              _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v57);
          }

void nw_endpoint_set_context(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    int v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v23 = "nw_endpoint_set_context";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v23 = "nw_endpoint_set_context";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          id v23 = "nw_endpoint_set_context";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        id v23 = "nw_endpoint_set_context";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v23 = "nw_endpoint_set_context";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_endpoint_set_is_registered(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    *((_BYTE *)v1 + 231) |= 4u;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_endpoint_set_is_registered";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_endpoint_set_is_registered";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v14 = "nw_endpoint_set_is_registered";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_endpoint_set_is_registered";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_endpoint_set_is_registered";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_hash_table_add_object(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj(0LL, a2);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "nw_hash_table_add_object";
    uint64_t v17 = (void *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    uint64_t v18 = __nwlog_fault(v17, &type, &v44);
    if (!(_DWORD)v18) {
      goto LABEL_66;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v44)
      {
        char v20 = (os_log_s *)__nwlog_obj(v18, v19);
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "nw_hash_table_add_object";
        uint64_t v22 = "%{public}s called with null table, backtrace limit exceeded";
        goto LABEL_65;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      char v20 = (os_log_s *)__nwlog_obj(backtrace_string, v36);
      os_log_type_t v21 = type;
      BOOL v37 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (!v37) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "nw_hash_table_add_object";
        uint64_t v22 = "%{public}s called with null table, no backtrace";
        goto LABEL_65;
      }

      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v47 = "nw_hash_table_add_object";
        __int16 v48 = 2082;
        uint64_t v49 = (uint64_t)backtrace_string;
        os_log_type_t v38 = "%{public}s called with null table, dumping backtrace:%{public}s";
LABEL_48:
        _os_log_impl(&dword_181A5C000, v20, v21, v38, buf, 0x16u);
      }

BOOL nw_hash_table_get_some_node(os_unfair_lock_s *a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_hash_table_get_some_node";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_hash_table_get_some_node";
      char v11 = "%{public}s called with null table";
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v19 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_hash_table_get_some_node";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null table, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_45;
      }

      if (!v19)
      {
LABEL_45:
        if (v8) {
          free(v8);
        }
        return 0LL;
      }

      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_hash_table_get_some_node";
      char v11 = "%{public}s called with null table, no backtrace";
    }

    else
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_hash_table_get_some_node";
      char v11 = "%{public}s called with null table, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_45;
  }

  if (a1[8]._os_unfair_lock_opaque)
  {
    uint32_t os_unfair_lock_opaque = a1[12]._os_unfair_lock_opaque;
    if ((os_unfair_lock_opaque & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  size_t v12 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v25 = "nw_hash_table_lock";
  uint64_t v13 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v13);
  if (!result)
  {
    free(v13);
    uint32_t os_unfair_lock_opaque = a1[12]._os_unfair_lock_opaque;
    if ((os_unfair_lock_opaque & 2) == 0)
    {
LABEL_5:
      if ((os_unfair_lock_opaque & 1) != 0)
      {
        uint32_t v3 = a1[8]._os_unfair_lock_opaque;
        if (v3)
        {
          int v4 = 0;
          uint64_t v5 = a1 + 14;
          do
          {
            int v6 = v5;
            while (1)
            {
              int v6 = *(os_unfair_lock_s **)&v6->_os_unfair_lock_opaque;
              if (!v6) {
                break;
              }
              if (BYTE2(v6[7]._os_unfair_lock_opaque) == 1) {
                goto LABEL_14;
              }
            }

            ++v4;
            v5 += 4;
          }

          while (v4 != v3);
        }

        int v6 = 0LL;
LABEL_14:
        if ((os_unfair_lock_opaque & 2) != 0) {
          os_unfair_lock_unlock(a1 + 13);
        }
        return (BOOL)v6;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_hash_table_get_some_node";
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v22 = 0;
      if (__nwlog_fault(v14, &type, &v22))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v15 = (os_log_s *)__nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_50;
          }
          *(_DWORD *)buf = 136446210;
          uint64_t v25 = "nw_hash_table_get_some_node";
          uint64_t v17 = "%{public}s called with invalid hash table";
LABEL_49:
          _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
          goto LABEL_50;
        }

        if (!v22)
        {
          __int16 v15 = (os_log_s *)__nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_50;
          }
          *(_DWORD *)buf = 136446210;
          uint64_t v25 = "nw_hash_table_get_some_node";
          uint64_t v17 = "%{public}s called with invalid hash table, backtrace limit exceeded";
          goto LABEL_49;
        }

        char v20 = (char *)__nw_create_backtrace_string();
        __int16 v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v21 = os_log_type_enabled(v15, type);
        if (!v20)
        {
          if (!v21) {
            goto LABEL_50;
          }
          *(_DWORD *)buf = 136446210;
          uint64_t v25 = "nw_hash_table_get_some_node";
          uint64_t v17 = "%{public}s called with invalid hash table, no backtrace";
          goto LABEL_49;
        }

        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_hash_table_get_some_node";
          __int16 v26 = 2082;
          uint64_t v27 = v20;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with invalid hash table, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
      }

id *nw_endpoint_copy_association_with_evaluator(void *a1, void *a2, void *a3)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (!v5)
  {
    id v41 = v7;
    __nwlog_obj();
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_copy_association_with_evaluator";
    BOOL v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v44, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_copy_association_with_evaluator";
        _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v68)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v49 = type;
      BOOL v50 = os_log_type_enabled(v44, type);
      if (backtrace_string)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_copy_association_with_evaluator";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v44,  v49,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_69:
        if (!v43)
        {
LABEL_71:
          __int16 v15 = 0LL;
          uint64_t v8 = v41;
          goto LABEL_30;
        }

LABEL_68:
    goto LABEL_69;
  }

  if (!v6)
  {
    id v41 = v7;
    __nwlog_obj();
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_copy_association_with_evaluator";
    BOOL v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v44, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_copy_association_with_evaluator";
        _os_log_impl(&dword_181A5C000, v44, v47, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v68)
    {
      size_t v51 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v52 = type;
      BOOL v53 = os_log_type_enabled(v44, type);
      if (v51)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_copy_association_with_evaluator";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v51;
          _os_log_impl( &dword_181A5C000,  v44,  v52,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v51);
        if (!v43) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }

      if (v53)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_copy_association_with_evaluator";
        _os_log_impl(&dword_181A5C000, v44, v52, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v44, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_copy_association_with_evaluator";
        _os_log_impl( &dword_181A5C000,  v44,  v55,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_68;
  }

  if (*((void *)v5 + 1))
  {
    uint64_t v9 = v6;
    id v10 = *(id *)(v9[13] + 136LL);

    v67 = v8;
    nw_context_assert_queue(v10);
    if ((nw_context_caches_are_shared(v10, *((void **)v5 + 1)) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v12 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = (void *)*((void *)v5 + 1);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_copy_association_with_evaluator";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v10;
        *(_WORD *)&buf[22] = 2112;
        BOOL v71 = v24;
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_INFO,  "%{public}s nw_context_caches_are_shared(context (%@), endpoint->context (%@)) is false",  buf,  0x20u);
      }

      __int16 v15 = 0LL;
      goto LABEL_29;
    }

    if (!*((void *)v5 + 25))
    {
      uint64_t internal = nw_hash_table_create_internal( 5u,  0,  (const void *(*)(const void *, unsigned int *))nw_endpoint_association_get_key,  (unsigned int (*)(const void *, unsigned int))nw_endpoint_association_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_endpoint_association_matches_key,  (void (*)(void *))nw_endpoint_association_release);
      *((void *)v5 + 25) = internal;
    }

    size_t v12 = (os_log_s *)nw_parameters_copy_path_parameters(v9, 0);
    uint64_t node = nw_hash_table_get_node(*((void *)v5 + 25), (uint64_t)v12, 0LL);
    if (!node)
    {
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      id v25 = v5;
      __int16 v26 = v9;
      id v27 = v8;
      nw_endpoint_t v64 = v25;
      v65 = v26;
      uint64_t v28 = nw_association_create(v25, v26);
      uint64_t v29 = v28;
      if (v27)
      {
        p_evaluator = (void **)&v28->evaluator;
        objc_storeStrong((id *)&v28->evaluator, a3);
        *((_BYTE *)v29 + 76) &= ~1u;
        os_log_type_t v31 = (os_unfair_lock_s *)*p_evaluator;
        if (*p_evaluator)
        {
          os_log_type_t v32 = v31 + 24;
          uint64_t v33 = v31;
          os_unfair_lock_lock(v32);
          id v34 = v33[6];
          os_unfair_lock_unlock(v32);
        }

        else
        {
          id v34 = 0LL;
        }

        char v35 = (OS_nw_path *)nw_path_copy_without_parameters(v34);
        previous_path = v29->previous_path;
        v29->previous_path = v35;

        evaluator = v29->evaluator;
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __nw_association_create_with_evaluator_block_invoke;
        BOOL v71 = &unk_189BC8678;
        __int16 v72 = v29;
        nw_path_evaluator_set_update_handler(evaluator, 0LL, buf);
      }

      uint64_t v38 = *((void *)v5 + 25);
      __int16 v15 = v29;
      nw_hash_table_add_object(v38, (uint64_t)v15, (char *)&type);
      goto LABEL_29;
    }

    uint64_t v14 = (id *)*(id *)(node + 16);
    __int16 v15 = v14;
    if (!v8)
    {
LABEL_29:

      uint64_t v8 = v67;
      goto LABEL_30;
    }

    __int16 v15 = v14;
    id v16 = v8;
    if (v15)
    {
      if ((*((_BYTE *)v15 + 76) & 1) != 0)
      {
        id v17 = v16;
        objc_storeStrong(v15 + 3, a3);
        *((_BYTE *)v15 + 76) &= ~1u;
        uint64_t v18 = (os_unfair_lock_s *)v15[3];
        if (v18)
        {
          BOOL v19 = v18 + 24;
          char v20 = v18;
          os_unfair_lock_lock(v19);
          id v21 = v20[6];
          os_unfair_lock_unlock(v19);

          if (v21)
          {
            char v22 = nw_path_copy_without_parameters(v21);
            id v23 = v15[4];
            v15[4] = v22;
          }
        }

        else
        {
          id v21 = 0LL;
        }

        id v39 = v15[3];
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __nw_association_update_with_evaluator_block_invoke;
        BOOL v71 = &unk_189BC8678;
        __int16 v72 = v15;
        nw_path_evaluator_set_update_handler(v39, 0LL, buf);

        id v16 = v17;
      }

      uint64_t v42 = 1LL;
      if (v7) {
        goto LABEL_49;
      }
      goto LABEL_69;
    default:
      custom_data_length = nw_endpoint_get_custom_data_length(v5);
      if (!custom_data_length) {
        goto LABEL_101;
      }
      if (custom_data_length <= 0x400)
      {
        os_log_type_t v45 = -9;
        if (custom_data_length < 0xF7) {
          os_log_type_t v45 = custom_data_length;
        }
        uint64_t v46 = v45 + 8;
        if (a2) {
          *a2 = v46;
        }
        if (v46 <= 0x1Cu) {
          id v10 = 28LL;
        }
        else {
          id v10 = v46;
        }
        goto LABEL_9;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v20 = (id)gLogObj;
      *(_DWORD *)uu = 136446466;
      *(void *)&uu[4] = "nw_path_struct_size_for_endpoint";
      *(_WORD *)&uu[12] = 1024;
      *(_DWORD *)&uu[14] = 1024;
      LODWORD(v52) = 18;
      size_t v51 = uu;
      id v21 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v57 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)uu = 136446466;
          *(void *)&uu[4] = "nw_path_struct_size_for_endpoint";
          *(_WORD *)&uu[12] = 1024;
          *(_DWORD *)&uu[14] = 1024;
          _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s Custom data size must be no larger than %d", uu, 0x12u);
        }

          v159 = v35;

          break;
        case 214:
          if ((_DWORD)v20 == 80) {
            goto LABEL_79;
          }
          if (v20 >= 0x51)
          {
            __nwlog_obj();
            __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 214;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 80;
              _os_log_impl( &dword_181A5C000,  v74,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_79:
            v160->nat64_prefixes[0].ipv6_prefix = *(in6_addr *)v27;
            BOOL v43 = *(_OWORD *)(v27 + 16);
            char v44 = *(in6_addr *)(v27 + 32);
            os_log_type_t v45 = *(in6_addr *)(v27 + 64);
            *(in6_addr *)((char *)&v160->nat64_prefixes[2].ipv6_prefix + 8) = *(in6_addr *)(v27 + 48);
            *(in6_addr *)((char *)&v160->nat64_prefixes[3].ipv6_prefix + 4) = v45;
            *(_OWORD *)&v160->nat64_prefixes[0].prefix_len = v43;
            *(in6_addr *)((char *)&v160->nat64_prefixes[1].ipv6_prefix + 12) = v44;
          }

          break;
        case 215:
          if ((_DWORD)v20 == 2) {
            goto LABEL_75;
          }
          BOOL v71 = v14;
          if (v20 < 3)
          {
LABEL_239:
            uint64_t v14 = v71;
          }

          else
          {
            __nwlog_obj();
            __int16 v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 215;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 2;
              _os_log_impl( &dword_181A5C000,  v72,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_75:
            v160->estimates = *(necp_client_result_estimated_throughput *)v27;
          }

          break;
        default:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          flow_result_from_tlv = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(flow_result_from_tlv, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
            v164 = 1024;
            *(_DWORD *)v165 = v19;
            _os_log_impl( &dword_181A5C000,  flow_result_from_tlv,  OS_LOG_TYPE_ERROR,  "%{public}s Received unknown client result TLV (type %d)",  buf,  0x12u);
          }

          goto LABEL_20;
      }
    }

    if (v15 >= a3 - 5) {
      goto LABEL_282;
    }
  }

  BOOL v100 = v14;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v101 = (id)gLogObj;
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
  v164 = 1024;
  *(_DWORD *)v165 = v20;
  *(_WORD *)&v165[4] = 2048;
  *(void *)&v165[6] = v15;
  *(_WORD *)&v165[14] = 2048;
  *(void *)&v165[16] = a3;
  os_log_type_t v102 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v162) = 16;
  v161 = 0;
  if (v162 == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v103 = (os_log_s *)(id)gLogObj;
    v104 = v162;
    if (os_log_type_enabled(v103, (os_log_type_t)v162))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      v164 = 1024;
      *(_DWORD *)v165 = v20;
      *(_WORD *)&v165[4] = 2048;
      *(void *)&v165[6] = v15;
      *(_WORD *)&v165[14] = 2048;
      *(void *)&v165[16] = a3;
      _os_log_impl( &dword_181A5C000,  v103,  v104,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)",  buf,  0x26u);
    }

    goto LABEL_278;
  }

  if (!v161)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v103 = (os_log_s *)(id)gLogObj;
    os_log_type_t v112 = v162;
    if (os_log_type_enabled(v103, (os_log_type_t)v162))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      v164 = 1024;
      *(_DWORD *)v165 = v20;
      *(_WORD *)&v165[4] = 2048;
      *(void *)&v165[6] = v15;
      *(_WORD *)&v165[14] = 2048;
      *(void *)&v165[16] = a3;
      _os_log_impl( &dword_181A5C000,  v103,  v112,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded",  buf,  0x26u);
    }

    goto LABEL_278;
  }

  v106 = __nw_create_backtrace_string();
  if (!v106)
  {
    __nwlog_obj();
    BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v113 = v162;
    if (os_log_type_enabled(v103, (os_log_type_t)v162))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      v164 = 1024;
      *(_DWORD *)v165 = v20;
      *(_WORD *)&v165[4] = 2048;
      *(void *)&v165[6] = v15;
      *(_WORD *)&v165[14] = 2048;
      *(void *)&v165[16] = a3;
      _os_log_impl( &dword_181A5C000,  v103,  v113,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace",  buf,  0x26u);
    }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v54 = (id)gLogObj;
  os_log_type_t v55 = v2;
  if (v3 > 5) {
    uint64_t v56 = "unknown-mode";
  }
  else {
    uint64_t v56 = off_189BBBBC0[v3];
  }
  LODWORD(buf[0]) = 136446722;
  *(void *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
  WORD6(buf[0]) = 2082;
  *(void *)((char *)buf + 14) = v56;
  WORD3(buf[1]) = 2082;
  *((void *)&buf[1] + 1) = "flow";
  os_log_type_t v57 = (void *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v140 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault((const char *)v57, type, &v140))
  {
LABEL_100:
    if (!v57) {
      goto LABEL_205;
    }
LABEL_101:
    free(v57);
    goto LABEL_205;
  }

  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v58 = (os_log_s *)(id)gLogObj;
    os_log_type_t v59 = type[0];
    if (os_log_type_enabled(v58, type[0]))
    {
      if (v3 > 5) {
        os_log_type_t v60 = "unknown-mode";
      }
      else {
        os_log_type_t v60 = off_189BBBBC0[v3];
      }
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
      WORD6(buf[0]) = 2082;
      *(void *)((char *)buf + 14) = v60;
      WORD3(buf[1]) = 2082;
      *((void *)&buf[1] + 1) = "flow";
      _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  (uint8_t *)buf,  0x20u);
    }

    goto LABEL_69;
  }

  if (v4)
  {
    id v6 = v4;
    *(_WORD *)(v6[13] + 108LL) |= 4u;

    id v7 = *((_DWORD *)v3 + 6);
    if (v7) {
      nw_parameters_set_data_mode(v6, v7);
    }
    if ((v3[8] & 8) != 0)
    {
      uint64_t v9 = v6;
      *(_WORD *)(v6[13] + 108LL) |= 2u;

      if ((v3[9] & 2) == 0)
      {
LABEL_7:
        uint64_t v8 = v3[8];
        if ((v8 & 0x20) == 0) {
          goto LABEL_8;
        }
        goto LABEL_12;
      }
    }

    else if ((v3[9] & 2) == 0)
    {
      goto LABEL_7;
    }

    id v10 = *((_DWORD *)v3 + 5);
    char v11 = v6;
    *(_DWORD *)(v6[13] + 103LL) = v10;

    uint64_t v8 = v3[8];
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x40) == 0)
      {
LABEL_14:
        if ((v3[9] & 1) != 0) {
          nw_parameters_set_fast_open_force_enable(v6, 1);
        }
        if (v3[8] < 0)
        {
          id v21 = v6;
          *(_WORD *)(v6[13] + 108LL) |= 0x20u;

          if ((v3[9] & 4) == 0)
          {
LABEL_18:
            size_t v12 = v3[8];
            if ((v12 & 1) == 0) {
              goto LABEL_19;
            }
            goto LABEL_33;
          }
        }

        else if ((v3[9] & 4) == 0)
        {
          goto LABEL_18;
        }

        char v22 = *((_DWORD *)v3 + 3);
        id v23 = v6;
        *(_DWORD *)(v6[13] + 72LL) = v22;

        size_t v12 = v3[8];
        if ((v12 & 1) == 0)
        {
LABEL_19:
          if ((v12 & 2) == 0) {
            goto LABEL_20;
          }
          goto LABEL_34;
        }

          char v35 = *(void **)(*(void *)&buf[8] + 40LL);
          uint64_t v36 = *(void *)(a1 + 32);
          goto LABEL_69;
        }

        BOOL v37 = *(_BYTE *)(v36 + 346);
LABEL_59:
        if ((v37 & 0x20) != 0)
        {
LABEL_69:
          objc_storeStrong((id *)(v36 + 144), v35);
          *(_BYTE *)(*(void *)(a1 + 32) + 346LL) |= 2u;
          nw_resolver_update_status_locked(*(void **)(a1 + 32), 0LL);
          uint64_t v29 = 1;
          goto LABEL_70;
        }

        if (*(_BYTE *)(v36 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v38 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_INFO)) {
            goto LABEL_68;
          }
          BOOL v43 = *(void *)(a1 + 32) + 256LL;
          char v44 = *(void *)(*(void *)&buf[8] + 40LL);
          *(_DWORD *)v90 = 136446722;
          __int16 v91 = "nw_resolver_set_update_handler_block_invoke";
          id v92 = 2082;
          *(void *)os_log_type_t v93 = v43;
          *(_WORD *)&v93[8] = 2112;
          *(void *)&v93[10] = v44;
          BOOL v40 = "%{public}s [C%{public}s] found proxy resolved endpoints %@";
          id v41 = v38;
          uint64_t v42 = 32;
          goto LABEL_67;
        }

        __nwlog_obj();
        uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v45 = *(_DWORD *)(*(void *)(a1 + 32) + 340LL);
          uint64_t v46 = *(void *)(*(void *)&buf[8] + 40LL);
          *(_DWORD *)v90 = 136446722;
          __int16 v91 = "nw_resolver_set_update_handler_block_invoke";
          id v92 = 1024;
          *(_DWORD *)os_log_type_t v93 = v45;
          *(_WORD *)&v93[4] = 2112;
          *(void *)&v93[6] = v46;
          BOOL v40 = "%{public}s [R%u] found proxy resolved endpoints %@";
          id v41 = v38;
          uint64_t v42 = 28;
          goto LABEL_67;
        }

        goto LABEL_68;
      }

      BOOL v37 = *(_BYTE *)(v36 + 346);
      if ((v37 & 0x40) != 0 && *(_BYTE *)(*(void *)&v99[8] + 24LL)
        || (*(_BYTE *)(v36 + 346) & 0x80) != 0 && *(_BYTE *)(*(void *)&v98[8] + 24LL))
      {
        goto LABEL_59;
      }
    }

    uint64_t v29 = 0;
LABEL_70:

    _Block_object_dispose(buf, 8);
    _Block_object_dispose(v98, 8);
    _Block_object_dispose(v99, 8);
    goto LABEL_71;
  }

  if (v22 == 4)
  {

    goto LABEL_39;
  }

LABEL_43:
  uint64_t v29 = 0;
LABEL_71:

LABEL_72:
  uint64_t v28 = nw_endpoint_copy_association_with_evaluator( *(void **)(*(void *)(a1 + 32) + 24LL),  *(void **)(*(void *)(a1 + 32) + 16LL),  0LL);

  if (v28 && (*(_BYTE *)(*(void *)(a1 + 32) + 346LL) & 2) == 0)
  {
    cached_content_for_protocol = nw_association_get_cached_content_for_protocol( v28,  (void *)nw_protocol_copy_resolver_definition(void)::resolver_definition);
    __int16 v48 = (id *)cached_content_for_protocol;
    if (cached_content_for_protocol)
    {
      if (*(_BYTE *)(cached_content_for_protocol + 24)) {
        *(_BYTE *)(*(void *)(a1 + 32) + 347LL) |= 0x80u;
      }
      if (*(void *)cached_content_for_protocol)
      {
        os_log_type_t v49 = *(void *)(cached_content_for_protocol + 8);
        if (v49)
        {
          BOOL v50 = *(void *)(cached_content_for_protocol + 16);
          if (v50)
          {
            if (*(void *)(v49 + 24) - *(void *)(v49 + 16) == *(void *)(v50 + 24) - *(void *)(v50 + 16))
            {
              v80[0] = MEMORY[0x1895F87A8];
              v80[1] = 3221225472LL;
              v80[2] = __nw_resolver_set_update_handler_block_invoke_76;
              v80[3] = &unk_189BBFE18;
              os_log_type_t v82 = cached_content_for_protocol;
              __int16 v81 = *(id *)(a1 + 32);
              nw_array_apply((unsigned __int8 *)v49, (uint64_t)v80);
            }
          }
        }

        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000LL;
        LOBYTE(v95) = 0;
        *(void *)os_log_type_t v99 = 0LL;
        *(void *)&v99[8] = v99;
        *(void *)&v99[16] = 0x2020000000LL;
        BOOL v100 = 0;
        size_t v51 = (unsigned __int8 *)*v48;
        v79[0] = MEMORY[0x1895F87A8];
        v79[1] = 3221225472LL;
        v79[2] = __nw_resolver_set_update_handler_block_invoke_78;
        v79[3] = &unk_189BC52F8;
        v79[4] = buf;
        v79[5] = v99;
        nw_array_apply(v51, (uint64_t)v79);
        *(_DWORD *)v90 = 0;
        os_log_type_t v52 = nw_resolver_get_scoped_interface_index(*(NWConcrete_nw_resolver **)(a1 + 32), (unsigned int *)v90);
        BOOL v53 = *(void *)(a1 + 32);
        os_log_type_t v54 = *(void **)(v53 + 200);
        if (v54)
        {
          os_log_type_t v55 = (nw_interface *)nw_path_copy_interface(v54);
          uint64_t v56 = v55;
          if (v55) {
            LODWORD(v54) = nw_interface_get_type(v55);
          }
          else {
            LODWORD(v54) = 0;
          }
          BOOL v53 = *(void *)(a1 + 32);
        }

        else
        {
          uint64_t v56 = 0LL;
        }

        if (v52 == -1 || (_DWORD)v54 == 4)
        {
          if (!v53)
          {
            __nwlog_obj();
            BOOL v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            {
              id v66 = *v48;
              *(_DWORD *)v98 = 136446466;
              *(void *)&v98[4] = "nw_resolver_set_update_handler_block_invoke_2";
              *(_WORD *)&v98[12] = 2112;
              *(void *)&v98[14] = v66;
              os_log_type_t v61 = "%{public}s found cached endpoints %@";
              BOOL v62 = v58;
              os_log_type_t v63 = 22;
              goto LABEL_109;
            }

    if (v26) {
      free(v26);
    }

    goto LABEL_77;
  }

  if ((*((_BYTE *)v3 + 136) & 8) == 0) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
  }
  id v6 = v5;
  id v7 = v6;
  uint64_t v8 = (void *)*((void *)v6 + 14);
  uint64_t v9 = v6;
  if (v8)
  {
    id v10 = v6;
    while ((v10[231] & 2) == 0)
    {
      uint64_t v9 = v8;

      uint64_t v8 = (void *)v9[14];
      id v10 = v9;
      if (!v8) {
        goto LABEL_9;
      }
    }

    char v11 = nw_context_copy_globals_context((NWConcrete_nw_context *)v3);
  }

  else
  {
LABEL_9:

    char v11 = nw_context_copy_cache_context(v3);
  }

  size_t v12 = (void *)v11;

  uint64_t v13 = v7;
  uint64_t v14 = [v13 type];

  if (v14 == 2)
  {
    __int16 v15 = (uint64_t *)(v12[3] + 40LL);
  }

  else if (v14 == 1)
  {
    __int16 v15 = (uint64_t *)(v12[3] + 32LL);
  }

  else
  {
    __int16 v15 = (uint64_t *)(v12[3] + 48LL);
  }

  id v16 = *v15;
  if (!*v15)
  {
    __nwlog_obj();
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v46 = 0;
    if (__nwlog_fault(v30, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null hash_table", buf, 0xCu);
        }
      }

      else if (v46)
      {
        id v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v40 = type;
        id v41 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v39;
            _os_log_impl( &dword_181A5C000,  v31,  v40,  "%{public}s called with null hash_table, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v39);
          goto LABEL_74;
        }

        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_181A5C000, v31, v40, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v44 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl( &dword_181A5C000,  v31,  v44,  "%{public}s called with null hash_table, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    info[0] = 0LL;
    info[1] = 0LL;
    gettimeofday((timeval *)info, 0LL);
    v33[4] = 1000LL * *(void *)info + (signed int)info[1].numer / 1000;
    *((_DWORD *)v33 + 11) = backtrace((void **)v33 + 6, 16);
    uint64_t v42 = *(unsigned int (**)(os_log_type_t *, __int128 *, void, uint64_t))(v2 + 184);
    if (!v42) {
      return v7;
    }
LABEL_52:
    if (v39) {
      BOOL v43 = &v65;
    }
    else {
      BOOL v43 = 0LL;
    }
    if (!v42(type, v43, *(void *)(v2 + 208), 1LL)) {
      return v7;
    }
    ++*(void *)v2;
    nw_mem_slab_free(v2, v7);
    return 0LL;
  }

  id v5 = *(void **)(v2 + 520);
LABEL_7:
  id v6 = v4 - 1;
  *(_DWORD *)(v2 + 552) = v6;
  id v7 = v5[v6 + 1];
  ++*(void *)(v2 + 536);
  if ((*(_BYTE *)(v2 + 176) & 2) == 0) {
    return v7;
  }
  uint64_t v8 = *(void *)(v2 + 288) + 8 * ((v7 >> *(void *)(v2 + 272)) & *(void *)(v2 + 280));
  while (1)
  {
    uint64_t v8 = *(void *)v8;
    if (!v8) {
      break;
    }
    if (*(void *)(v8 + 8) == v7)
    {
      info[0] = 0LL;
      info[1] = 0LL;
      gettimeofday((timeval *)info, 0LL);
      *(void *)(v8 + 32) = 1000LL * *(void *)info + (signed int)info[1].numer / 1000;
      *(_DWORD *)(v8 + 44) = backtrace((void **)(v8 + 48), 16);
      return v7;
    }
  }

  uint64_t v56 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
  info[0].numer = 136446722;
  *(void *)&info[0].denom = "nw_mem_audit_buf";
  LOWORD(info[1].denom) = 2082;
  *(void *)((char *)&info[1].denom + 2) = v2 + 96;
  HIWORD(info[2].denom) = 2048;
  info[3] = (mach_timebase_info)v7;
  os_log_type_t v57 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v57);
  if (!result)
  {
    free(v57);
    info[0] = 0LL;
    info[1] = 0LL;
    gettimeofday((timeval *)info, 0LL);
    MEMORY[0x20] = 1000LL * *(void *)info + (signed int)info[1].numer / 1000;
    MEMORY[0x2C] = backtrace((void **)0x30, 16);
    return v7;
  }

    if (v19) {
      free(v19);
    }
    char v11 = 0LL;
    goto LABEL_32;
  }

  if (!v4[1])
  {
    if (!v4[2]) {
      goto LABEL_4;
    }
    goto LABEL_40;
  }

  __nwlog_obj();
  char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  os_log_type_t v45 = "nw_write_request_list_append";
  id v23 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v23);
  if (result) {
    goto LABEL_78;
  }
  free(v23);
  if (*((void *)v5 + 2))
  {
LABEL_40:
    __nwlog_obj();
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v45 = "nw_write_request_list_append";
    id v25 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v25);
    if (result) {
      goto LABEL_78;
    }
    free(v25);
  }

    goto LABEL_69;
  }

  if (!v5)
  {
    __nwlog_obj();
    id v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        BOOL v40 = "%{public}s called with null value";
        goto LABEL_67;
      }
    }

    else
    {
      if (v48)
      {
        char v44 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v39 = type;
        os_log_type_t v45 = os_log_type_enabled(v38, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v44;
            _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s called with null value, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(v44);
          if (!v37) {
            goto LABEL_38;
          }
          goto LABEL_70;
        }

        if (!v45) {
          goto LABEL_68;
        }
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        BOOL v40 = "%{public}s called with null value, no backtrace";
        goto LABEL_67;
      }

      __nwlog_obj();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        BOOL v40 = "%{public}s called with null value, backtrace limit exceeded";
        goto LABEL_67;
      }
    }

    goto LABEL_68;
  }

  Class = object_getClass(v5);
  if (Class == (Class)MEMORY[0x1895F9220])
  {
    [NSString stringWithUTF8String:a2];
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    char v11 = (void *)MEMORY[0x189603FA8];
    size_t v12 = v6;
    [v11 array];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(void *)applier = MEMORY[0x1895F87A8];
    *(void *)&applier[8] = 3221225472LL;
    *(void *)&applier[16] = __NWUtilsCreateNSArrayFromXPCArray_block_invoke;
    size_t v51 = &unk_189BC8CB8;
    uint64_t v14 = v13;
    os_log_type_t v52 = v14;
    xpc_array_apply(v12, applier);

    if (!xpc_array_get_count(v12))
    {
LABEL_36:
      id v25 = *(void **)(a1 + 32);
      __int16 v26 = v14;
      id v27 = v10;
      goto LABEL_37;
    }

    xpc_array_get_value(v12, 0LL);
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue();
    id v16 = object_getClass(v15);
    if (v16 == (Class)MEMORY[0x1895F9280])
    {
      uint64_t v30 = (void *)NSString;
      os_log_type_t v31 = @"INT64-";
    }

    else if (v16 == (Class)MEMORY[0x1895F92F0])
    {
      uint64_t v30 = (void *)NSString;
      os_log_type_t v31 = @"UINT64-";
    }

    else
    {
      if (v16 != (Class)MEMORY[0x1895F9258])
      {
        if (v16 != (Class)MEMORY[0x1895F9228])
        {
          id v17 = [NSString stringWithUTF8String:a2];
LABEL_35:
          char v35 = (void *)v17;

          id v10 = v35;
          goto LABEL_36;
        }

        [NSString stringWithFormat:@"%@%s", @"BOOL-", a2];
        id v17 = LABEL_34:;
        goto LABEL_35;
      }

      uint64_t v30 = (void *)NSString;
      os_log_type_t v31 = @"DOUBLE-";
    }

    [v30 stringWithFormat:@"%@%s", v31, a2];
    goto LABEL_34;
  }

  if (Class != (Class)MEMORY[0x1895F9250])
  {
    uint64_t v8 = object_getClass(v6);
    if (v8 == (Class)MEMORY[0x1895F9280])
    {
      uint64_t v28 = (void *)NSString;
      uint64_t v29 = @"INT64-";
    }

    else if (v8 == (Class)MEMORY[0x1895F92F0])
    {
      uint64_t v28 = (void *)NSString;
      uint64_t v29 = @"UINT64-";
    }

    else
    {
      if (v8 != (Class)MEMORY[0x1895F9258])
      {
        if (v8 != (Class)MEMORY[0x1895F9228])
        {
          uint64_t v9 = [NSString stringWithUTF8String:a2];
LABEL_26:
          os_log_type_t v32 = (void *)v9;
          NSObjectFromSimpleXPCObject = NWUtilsCreateNSObjectFromSimpleXPCObject(v6);
          id v34 = NSObjectFromSimpleXPCObject;
          if (v32)
          {
            if (NSObjectFromSimpleXPCObject) {
              [*(id *)(a1 + 32) setObject:NSObjectFromSimpleXPCObject forKeyedSubscript:v32];
            }
          }

          goto LABEL_38;
        }

        [NSString stringWithFormat:@"%@%s", @"BOOL-", a2];
        uint64_t v9 = LABEL_25:;
        goto LABEL_26;
      }

      uint64_t v28 = (void *)NSString;
      uint64_t v29 = @"DOUBLE-";
    }

    [v28 stringWithFormat:@"%@%s", v29, a2];
    goto LABEL_25;
  }

  uint64_t v18 = (void *)MEMORY[0x189603FC8];
  BOOL v19 = v6;
  [v18 dictionary];
  char v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(void *)applier = MEMORY[0x1895F87A8];
  *(void *)&applier[8] = 3221225472LL;
  *(void *)&applier[16] = __NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke;
  size_t v51 = &unk_189BC5148;
  id v10 = v20;
  os_log_type_t v52 = v10;
  xpc_dictionary_apply(v19, applier);

  id v21 = *(void **)(a1 + 32);
  [NSString stringWithUTF8String:a2];
  uint64_t v14 = (id)objc_claimAutoreleasedReturnValue();
  if (v14) {
    goto LABEL_19;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v22 = (os_log_s *)(id)gLogObj;
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(void *)&applier[4] = "nw_nsstring";
  *(_WORD *)&applier[12] = 2080;
  *(void *)&applier[14] = a2;
  LODWORD(v47) = 22;
  uint64_t v46 = applier;
  id v23 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v23);
  if (!result)
  {
    free(v23);
LABEL_19:
    id v25 = v21;
    __int16 v26 = v10;
    id v27 = v14;
LABEL_37:
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v26, v27, v46, v47);

LABEL_38:
    return 1LL;
  }

  __break(1u);
  return result;
}

            __int16 v48 = *((_BYTE *)v6 + 728);
            if ((v48 & 1) == 0)
            {
LABEL_70:
              *((void *)v6 + 90) = 0LL;
              *((_BYTE *)v6 + 728) = v48 | 1;
              goto LABEL_71;
            }

      free(backtrace_string);
      goto LABEL_82;
    }

    uint64_t v38 = (os_log_s *)__nwlog_obj();
    id v39 = type;
    if (!os_log_type_enabled(v38, type)) {
      goto LABEL_82;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
    BOOL v40 = "%{public}s called with null protocol";
LABEL_81:
    _os_log_impl(&dword_181A5C000, v38, v39, v40, buf, 0xCu);
LABEL_82:
    if (v37) {
      free(v37);
    }
    return 0LL;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      id v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
      BOOL v40 = "%{public}s called with null shoes";
      goto LABEL_81;
    }

    if (!v52)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      id v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
      BOOL v40 = "%{public}s called with null shoes, backtrace limit exceeded";
      goto LABEL_81;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v38 = (os_log_s *)__nwlog_obj();
    id v39 = type;
    char v44 = os_log_type_enabled(v38, type);
    if (backtrace_string)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
        uint64_t v56 = 2082;
        os_log_type_t v57 = backtrace_string;
        BOOL v43 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
        goto LABEL_67;
      }

      goto LABEL_68;
    }

    if (!v44) {
      goto LABEL_82;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
    BOOL v40 = "%{public}s called with null shoes, no backtrace";
    goto LABEL_81;
  }

  uint64_t v9 = *((unsigned __int8 *)handle + 150);
  if (v9 == 6) {
    return (*(uint64_t (**)(void))(*(void *)(handle[4] + 24LL) + 88LL))();
  }
  if (v9 != 2) {
    return 0LL;
  }
  request = (unsigned __int8 *)nw_shoes_create_request((uint64_t)a1->handle);
  if (!request)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v26 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v55 = "nw_shoes_internal_disconnect";
      uint64_t v56 = 2082;
      os_log_type_t v57 = (char *)handle + 151;
      _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s ", buf, 0x16u);
    }

    *((_BYTE *)handle + 150) = 7;
    (*(void (**)(void *, void))(handle[3] + 48LL))(handle, 0LL);
    return 0LL;
  }

  char v11 = request;
  size_t v12 = bswap32(*(unsigned __int16 *)request) >> 16;
  uint64_t v13 = a1->handle;
  if (!v13)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v55 = "nw_protocol_add_buffer_to_output_frames";
    os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v46 = (os_log_s *)__nwlog_obj();
      os_log_type_t v47 = type;
      if (!os_log_type_enabled(v46, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v55 = "nw_protocol_add_buffer_to_output_frames";
      __int16 v48 = "%{public}s called with null shoes";
    }

    else if (v52)
    {
      os_log_type_t v49 = (char *)__nw_create_backtrace_string();
      uint64_t v46 = (os_log_s *)__nwlog_obj();
      os_log_type_t v47 = type;
      BOOL v50 = os_log_type_enabled(v46, type);
      if (v49)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v55 = "nw_protocol_add_buffer_to_output_frames";
          uint64_t v56 = 2082;
          os_log_type_t v57 = v49;
          _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s called with null shoes, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v49);
        goto LABEL_95;
      }

      if (!v50)
      {
LABEL_95:
        if (v45) {
          free(v45);
        }
        goto LABEL_36;
      }

      *(_DWORD *)buf = 136446210;
      os_log_type_t v55 = "nw_protocol_add_buffer_to_output_frames";
      __int16 v48 = "%{public}s called with null shoes, no backtrace";
    }

    else
    {
      uint64_t v46 = (os_log_s *)__nwlog_obj();
      os_log_type_t v47 = type;
      if (!os_log_type_enabled(v46, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v55 = "nw_protocol_add_buffer_to_output_frames";
      __int16 v48 = "%{public}s called with null shoes, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v46, v47, v48, buf, 0xCu);
    goto LABEL_95;
  }

  uint64_t v14 = v12 + 2;
  __int16 v15 = ((uint64_t (*)(void))a1->output_handler->callbacks->get_output_frames)();
  id v16 = v15;
  tqh_first = a6->tqh_first;
  if (!a6->tqh_first || !v15)
  {
    if (v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v55 = "nw_protocol_add_buffer_to_output_frames";
        uint64_t v56 = 2082;
        os_log_type_t v57 = (char *)v13 + 151;
        BOOL v58 = 1024;
        *(_DWORD *)os_log_type_t v59 = v16;
        _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Output handler reported %u frames to write, but array is empty",  buf,  0x1Cu);
      }
    }

        free(v11);
        goto LABEL_69;
      }

      if (v7 == (void *)MEMORY[0x1895F9198])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v35 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v106 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v37 = (os_log_s *)(id)gLogObj;
          uint64_t v38 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
          }
        }

        else if (v106)
        {
          os_log_type_t v54 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v55 = type;
          uint64_t v56 = os_log_type_enabled(v37, type);
          if (v54)
          {
            if (v56)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
              BOOL v110 = 2082;
              *(void *)v111 = v54;
              _os_log_impl( &dword_181A5C000,  v37,  v55,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v54);
            if (!v36) {
              goto LABEL_176;
            }
            goto LABEL_175;
          }

          if (v56)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl( &dword_181A5C000,  v37,  v55,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          BOOL v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v71 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl( &dword_181A5C000,  v37,  v71,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      else
      {
        if (v7 == (void *)MEMORY[0x1895F91A0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v53 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_ERROR,  "%{public}s received XPC_ERROR_CONNECTION_INVALID",  buf,  0xCu);
          }

          goto LABEL_176;
        }

        if (v7 != (void *)MEMORY[0x1895F91C8])
        {
          uint64_t v9 = (void *)MEMORY[0x186E12534](v7);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v27 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
          BOOL v110 = 2082;
          *(void *)v111 = v9;
          char v11 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v106 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v28 = type;
            if (os_log_type_enabled(v12, type))
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
              BOOL v110 = 2082;
              *(void *)v111 = v9;
              _os_log_impl( &dword_181A5C000,  v12,  v28,  "%{public}s received returned unknown XPC error %{public}s",  buf,  0x16u);
            }

            goto LABEL_66;
          }

          if (!v106)
          {
            __nwlog_obj();
            size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v79 = type;
            if (os_log_type_enabled(v12, type))
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
              BOOL v110 = 2082;
              *(void *)v111 = v9;
              _os_log_impl( &dword_181A5C000,  v12,  v79,  "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded",  buf,  0x16u);
            }

            goto LABEL_66;
          }

          os_log_type_t v59 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v60 = type;
          os_log_type_t v61 = os_log_type_enabled(v12, type);
          if (!v59)
          {
            if (v61)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
              BOOL v110 = 2082;
              *(void *)v111 = v9;
              _os_log_impl( &dword_181A5C000,  v12,  v60,  "%{public}s received returned unknown XPC error %{public}s, no backtrace",  buf,  0x16u);
            }

            goto LABEL_66;
          }

          if (v61)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
            BOOL v110 = 2082;
            *(void *)v111 = v9;
            *(_WORD *)&v111[8] = 2082;
            *(void *)&v111[10] = v59;
            _os_log_impl( &dword_181A5C000,  v12,  v60,  "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v59);
          if (!v11) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v57 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v106 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          BOOL v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v58 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl(&dword_181A5C000, v37, v58, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
          }
        }

        else if (v106)
        {
          char v68 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v69 = type;
          os_log_type_t v70 = os_log_type_enabled(v37, type);
          if (v68)
          {
            if (v70)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
              BOOL v110 = 2082;
              *(void *)v111 = v68;
              _os_log_impl( &dword_181A5C000,  v37,  v69,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v68);
LABEL_174:
            if (!v36) {
              goto LABEL_176;
            }
LABEL_175:
            free(v36);
            goto LABEL_176;
          }

          if (v70)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl( &dword_181A5C000,  v37,  v69,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          BOOL v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v80 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
            _os_log_impl( &dword_181A5C000,  v37,  v80,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      goto LABEL_174;
    }

    xpc_dictionary_get_value(v7, (const char *)networkd_privileged_key_result);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v19 = v18;
    if (!v18)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v32 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
      id v21 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v106 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v22 = (os_log_s *)(id)gLogObj;
        uint64_t v33 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_181A5C000, v22, v33, "%{public}s received response without result code", buf, 0xCu);
        }

        goto LABEL_136;
      }

      if (!v106)
      {
        __nwlog_obj();
        char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v67 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl( &dword_181A5C000,  v22,  v67,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_136;
      }

      os_log_type_t v47 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v51 = type;
      os_log_type_t v52 = os_log_type_enabled(v22, type);
      if (!v47)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl( &dword_181A5C000,  v22,  v51,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
        }

        goto LABEL_136;
      }

      if (v52)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
        BOOL v110 = 2082;
        *(void *)v111 = v47;
        _os_log_impl( &dword_181A5C000,  v22,  v51,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_86;
    }

    if (object_getClass(v18) != (Class)MEMORY[0x1895F9280])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v20 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
      id v21 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v106 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v22 = (os_log_s *)(id)gLogObj;
        id v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s received invalid result type", buf, 0xCu);
        }

          free(v11);
          goto LABEL_77;
        }

        if (v7 == (void *)MEMORY[0x1895F9198])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v34 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v101 = "networkd_privileged_teardown_feth_pair";
          uint64_t v9 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v98 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v15 = (os_log_s *)(id)gLogObj;
            char v35 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)buf = 136446210;
              v101 = "networkd_privileged_teardown_feth_pair";
              _os_log_impl( &dword_181A5C000,  v15,  v35,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED",  buf,  0xCu);
            }

            goto LABEL_76;
          }

          if (!v98)
          {
            __nwlog_obj();
            __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            nw_endpoint_t v64 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)buf = 136446210;
              v101 = "networkd_privileged_teardown_feth_pair";
              _os_log_impl( &dword_181A5C000,  v15,  v64,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_76;
          }

          id v23 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v49 = type;
          BOOL v50 = os_log_type_enabled(v15, type);
          if (!v23)
          {
            if (v50)
            {
              *(_DWORD *)buf = 136446210;
              v101 = "networkd_privileged_teardown_feth_pair";
              _os_log_impl( &dword_181A5C000,  v15,  v49,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace",  buf,  0xCu);
            }

            goto LABEL_76;
          }

          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            v101 = "networkd_privileged_teardown_feth_pair";
            os_log_type_t v102 = 2082;
            *(void *)BOOL v103 = v23;
            _os_log_impl( &dword_181A5C000,  v15,  v49,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }

        else
        {
          if (v7 == (void *)MEMORY[0x1895F91A0])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v48 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              v101 = "networkd_privileged_teardown_feth_pair";
              _os_log_impl( &dword_181A5C000,  v48,  OS_LOG_TYPE_ERROR,  "%{public}s received XPC_ERROR_CONNECTION_INVALID",  buf,  0xCu);
            }

            goto LABEL_136;
          }

          if (v7 != (void *)MEMORY[0x1895F91C8])
          {
            uint64_t v9 = (char *)MEMORY[0x186E12534](v7);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v26 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            v101 = "networkd_privileged_teardown_feth_pair";
            os_log_type_t v102 = 2082;
            *(void *)BOOL v103 = v9;
            char v11 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v98 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              id v27 = type;
              if (os_log_type_enabled(v12, type))
              {
                *(_DWORD *)buf = 136446466;
                v101 = "networkd_privileged_teardown_feth_pair";
                os_log_type_t v102 = 2082;
                *(void *)BOOL v103 = v9;
                _os_log_impl( &dword_181A5C000,  v12,  v27,  "%{public}s received returned unknown XPC error %{public}s",  buf,  0x16u);
              }

              goto LABEL_66;
            }

            if (!v98)
            {
              __nwlog_obj();
              size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              __int16 v72 = type;
              if (os_log_type_enabled(v12, type))
              {
                *(_DWORD *)buf = 136446466;
                v101 = "networkd_privileged_teardown_feth_pair";
                os_log_type_t v102 = 2082;
                *(void *)BOOL v103 = v9;
                _os_log_impl( &dword_181A5C000,  v12,  v72,  "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded",  buf,  0x16u);
              }

              goto LABEL_66;
            }

            BOOL v53 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v54 = type;
            os_log_type_t v55 = os_log_type_enabled(v12, type);
            if (!v53)
            {
              if (v55)
              {
                *(_DWORD *)buf = 136446466;
                v101 = "networkd_privileged_teardown_feth_pair";
                os_log_type_t v102 = 2082;
                *(void *)BOOL v103 = v9;
                _os_log_impl( &dword_181A5C000,  v12,  v54,  "%{public}s received returned unknown XPC error %{public}s, no backtrace",  buf,  0x16u);
              }

              goto LABEL_66;
            }

            if (v55)
            {
              *(_DWORD *)buf = 136446722;
              v101 = "networkd_privileged_teardown_feth_pair";
              os_log_type_t v102 = 2082;
              *(void *)BOOL v103 = v9;
              *(_WORD *)&v103[8] = 2082;
              *(void *)&v103[10] = v53;
              _os_log_impl( &dword_181A5C000,  v12,  v54,  "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v53);
            if (!v11) {
              goto LABEL_77;
            }
            goto LABEL_68;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v51 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v101 = "networkd_privileged_teardown_feth_pair";
          uint64_t v9 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v98 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v52 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)buf = 136446210;
              v101 = "networkd_privileged_teardown_feth_pair";
              _os_log_impl(&dword_181A5C000, v15, v52, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
            }

LABEL_69:
              if (!v13) {
                goto LABEL_71;
              }
              goto LABEL_70;
            }

            if (!v102)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v14 = (os_log_s *)(id)gLogObj;
              os_log_type_t v47 = type;
              if (os_log_type_enabled(v14, type))
              {
                *(_DWORD *)buf = 136446466;
                v105 = "networkd_privileged_set_settings";
                v106 = 2082;
                *(void *)os_log_type_t v107 = v11;
                _os_log_impl( &dword_181A5C000,  v14,  v47,  "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded",  buf,  0x16u);
              }

              goto LABEL_68;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v14 = (os_log_s *)(id)gLogObj;
            os_log_type_t v32 = type;
            uint64_t v33 = os_log_type_enabled(v14, type);
            if (!backtrace_string)
            {
              if (v33)
              {
                *(_DWORD *)buf = 136446466;
                v105 = "networkd_privileged_set_settings";
                v106 = 2082;
                *(void *)os_log_type_t v107 = v11;
                _os_log_impl( &dword_181A5C000,  v14,  v32,  "%{public}s received unknown type XPC %{public}s, no backtrace",  buf,  0x16u);
              }

              goto LABEL_68;
            }

            if (v33)
            {
              *(_DWORD *)buf = 136446722;
              v105 = "networkd_privileged_set_settings";
              v106 = 2082;
              *(void *)os_log_type_t v107 = v11;
              *(_WORD *)&v107[8] = 2082;
              *(void *)&v107[10] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v14,  v32,  "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(backtrace_string);
            if (!v13)
            {
LABEL_71:
              if (v11)
              {
                free(v11);
                __int16 v48 = 1;
LABEL_179:
                os_log_type_t v52 = v48 == 0;
                goto LABEL_180;
              }

LABEL_69:
      if (v22) {
        free(v22);
      }
      goto LABEL_6;
    }

    if (!v47)
    {
      __nwlog_obj();
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v39 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl( &dword_181A5C000,  v23,  v39,  "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_68;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v35 = type;
    uint64_t v36 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl( &dword_181A5C000,  v23,  v35,  "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace",  buf,  0xCu);
      }

      goto LABEL_68;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v23,  v35,  "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_69:
            goto LABEL_70;
          }

          v120 = a1[4];
          if (v120) {
            v121 = (const char *)(v120 + 609);
          }
          else {
            v121 = "";
          }
          v122 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8LL) + 40LL));
          v123 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
          *(_DWORD *)buf = 136447234;
          v132 = "nw_framer_write_output_no_copy_block_invoke";
          v133 = 2080;
          v134 = v121;
          v135 = 2048;
          *(void *)v136 = v122;
          *(_WORD *)&v136[8] = 2048;
          *(void *)&v136[10] = v123;
          *(_WORD *)&v136[18] = 1024;
          v137 = HIDWORD(size);
          size_t v51 = "%{public}s %s Setting subrange data as output data, %zu bytes from length %zu offset %u";
        }

        _os_log_impl(&dword_181A5C000, v46, OS_LOG_TYPE_DEBUG, v51, buf, 0x30u);
        goto LABEL_121;
      }

      subrange = dispatch_data_create_subrange(v4, HIDWORD(size), size);
      os_log_type_t v52 = *(void *)(a1[6] + 8LL);
      os_log_type_t v55 = *(dispatch_data_s **)(v52 + 40);
      BOOL v53 = (id *)(v52 + 40);
      os_log_type_t v54 = v55;
      if (v55)
      {
        uint64_t v56 = dispatch_data_create_concat(v54, subrange);
        os_log_type_t v57 = *(void *)(a1[6] + 8LL);
        BOOL v58 = *(void **)(v57 + 40);
        *(void *)(v57 + 40) = v56;

        if (gLogDatapath)
        {
          __nwlog_obj();
          os_log_type_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v60 = a1[4];
            if (v60) {
              os_log_type_t v61 = (const char *)(v60 + 609);
            }
            else {
              os_log_type_t v61 = "";
            }
            BOOL v62 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8LL) + 40LL));
            *(_DWORD *)buf = 136446978;
            v132 = "nw_framer_write_output_no_copy_block_invoke";
            v133 = 2080;
            v134 = v61;
            v135 = 2048;
            *(void *)v136 = v62;
            *(_WORD *)&v136[8] = 1024;
            *(_DWORD *)&v136[10] = HIDWORD(size);
            os_log_type_t v63 = "%{public}s %s Appending subrange data to output data, now %zu bytes from offset %u";
LABEL_127:
            _os_log_impl(&dword_181A5C000, v59, OS_LOG_TYPE_DEBUG, v63, buf, 0x26u);
            goto LABEL_128;
          }

          goto LABEL_128;
        }
      }

      else
      {
        objc_storeStrong(v53, subrange);
        if (gLogDatapath)
        {
          __nwlog_obj();
          os_log_type_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            v124 = a1[4];
            if (v124) {
              __int16 v125 = (const char *)(v124 + 609);
            }
            else {
              __int16 v125 = "";
            }
            v126 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8LL) + 40LL));
            *(_DWORD *)buf = 136446978;
            v132 = "nw_framer_write_output_no_copy_block_invoke";
            v133 = 2080;
            v134 = v125;
            v135 = 2048;
            *(void *)v136 = v126;
            *(_WORD *)&v136[8] = 1024;
            *(_DWORD *)&v136[10] = HIDWORD(size);
            os_log_type_t v63 = "%{public}s %s Setting subrange data as output data, %zu bytes from offset %u";
            goto LABEL_127;
          }

    if (v17) {
      free(v17);
    }
    id v5 = 0LL;
    goto LABEL_27;
  }

  if (!a2)
  {
    __nwlog_obj();
    char v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_resolver_get_scoped_interface_index";
    id v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v29 = 0;
    if (__nwlog_fault(v17, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v21 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_resolver_get_scoped_interface_index";
          _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null service_flags", buf, 0xCu);
        }

          uint64_t v8 = a1[4];
          id v7 = (void *)a1[5];
          goto LABEL_69;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          goto LABEL_68;
        }
        char v35 = a1[5];
        os_log_type_t v52 = 136446722;
        BOOL v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        os_log_type_t v54 = 2112;
        *(void *)os_log_type_t v55 = dns_error;
        *(_WORD *)&v55[8] = 2114;
        *(void *)&v55[10] = v35;
        size_t v12 = "%{public}s Got DNS error %@ for %{public}@";
      }

      else
      {
        if (!v8)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v9 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v52 = 136446466;
            BOOL v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            os_log_type_t v54 = 2112;
            *(void *)os_log_type_t v55 = dns_error;
            size_t v12 = "%{public}s Got DNS error %@";
            uint64_t v13 = v9;
            uint64_t v14 = 22;
            goto LABEL_67;
          }

          goto LABEL_68;
        }

        if ((*(_BYTE *)(v8 + 346) & 0x20) != 0)
        {
          id v7 = 0LL;
LABEL_69:
          uint64_t v46 = v7;
          os_log_type_t v47 = *(_WORD *)(v8 + 88) & 0xFFEF;
          *(_WORD *)(v8 + 88) = v47;
          if ((*(_BYTE *)(v8 + 347) & 2) == 0)
          {
            v47 |= 0x80u;
            *(_WORD *)(v8 + 88) = v47;
          }

          __int16 v48 = *(_DWORD *)(v8 + 80);
          if (v48 == 1)
          {
            os_log_type_t v49 = 2056;
          }

          else
          {
            if (v48 != 2) {
              goto LABEL_76;
            }
            os_log_type_t v49 = 1028;
          }

          v47 |= v49;
          *(_WORD *)(v8 + 88) = v47;
LABEL_76:
          if (a3)
          {
            if (!v46)
            {
              BOOL v50 = v47 | 3;
              *(_WORD *)(v8 + 88) = v50;
              if ((v50 & 0xC) != 0) {
                goto LABEL_80;
              }
              goto LABEL_79;
            }

            v46[18] |= 3u;
            if ((*(_WORD *)(v8 + 88) & 0xC) == 0) {
LABEL_79:
            }
              *(_DWORD *)(v8 + 84) = a3;
          }

  if (v28) {
LABEL_69:
  }
    free(v28);
LABEL_70:
  uint64_t v13 = 0LL;
LABEL_17:

  id v17 = *(void *)(a1 + 32);
  if (v17)
  {
    if ((*(_BYTE *)(v17 + 346) & 0x20) != 0) {
      goto LABEL_30;
    }
    if (*(_BYTE *)(v17 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v18 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
        goto LABEL_29;
      }
      BOOL v19 = *(void *)(a1 + 32) + 256LL;
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_resolver_process_service_result_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2082;
      *(void *)&_BYTE buf[24] = a2;
      *(_WORD *)&_BYTE buf[32] = 2114;
      *(void *)&buf[34] = v13;
      char v20 = "%{public}s [C%{public}s] ALPN: %{public}s maps to %{public}@";
      id v21 = v18;
      char v22 = 42;
      goto LABEL_28;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v23 = *(_DWORD *)(*(void *)(a1 + 32) + 340LL);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_resolver_process_service_result_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v23;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = a2;
      *(_WORD *)&buf[28] = 2114;
      *(void *)&buf[30] = v13;
      char v20 = "%{public}s [R%u] ALPN: %{public}s maps to %{public}@";
      id v21 = v18;
      char v22 = 38;
      goto LABEL_28;
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_resolver_process_service_result_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2114;
      *(void *)&_BYTE buf[24] = v13;
      char v20 = "%{public}s ALPN: %{public}s maps to %{public}@";
      id v21 = v18;
      char v22 = 32;
LABEL_28:
      _os_log_impl(&dword_181A5C000, v21, OS_LOG_TYPE_INFO, v20, buf, v22);
    }
  }

        if (v18) {
          free(v18);
        }
        __int16 v15 = 0LL;
        goto LABEL_20;
      }

      uint64_t v13 = v11;
      uint64_t v14 = *(id *)(v13[13] + 136LL);

      if (!v14) {
        break;
      }
      __int16 v15 = nw_context_copy_workloop(v14);
      if (v15) {
        goto LABEL_19;
      }
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      }
      id v16 = (id)nw_context_copy_implicit_context::implicit_context;
      __int16 v15 = nw_context_copy_workloop(v16);

      if (v15) {
        goto LABEL_19;
      }
      __nwlog_obj();
      id v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v57 = "nw_connection_group_copy_workloop";
      uint64_t v28 = (const char *)_os_log_send_and_compose_impl();

      id v23 = (char *)v28;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v54 = 0;
      if (__nwlog_fault(v28, &type, &v54))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v24 = v28;
          __nwlog_obj();
          id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v29 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v57 = "nw_connection_group_copy_workloop";
            _os_log_impl(&dword_181A5C000, v25, v29, "%{public}s called with null workloop", buf, 0xCu);
          }

      goto LABEL_94;
    }

    goto LABEL_94;
  }

  if (v6 && !nw_parameters_get_logging_disabled(*((void *)v5 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    uint64_t v13 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = v5[42];
      *(_DWORD *)buf = 136446722;
      os_log_type_t v77 = "nw_connection_group_set_state_locked";
      os_log_type_t v78 = 1024;
      *(_DWORD *)v79 = v14;
      *(_WORD *)&v79[4] = 2112;
      *(void *)&v79[6] = v7;
      _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] failed (error %@)", buf, 0x1Cu);
    }
  }

  __int16 v15 = v5[10];
  logging_disabled = nw_parameters_get_logging_disabled(*((void *)v5 + 7));
  if (v15 > a2)
  {
    if (logging_disabled) {
      goto LABEL_94;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    id v17 = (id)gconnection_groupLogObj;
    uint64_t v18 = v5[42];
    BOOL v19 = v5[10];
    else {
      char v20 = off_189BB8B98[v19];
    }
    uint64_t v29 = off_189BB8B98[a2];
    *(_DWORD *)buf = 136447234;
    os_log_type_t v77 = "nw_connection_group_set_state_locked";
    os_log_type_t v78 = 1024;
    *(_DWORD *)v79 = v18;
    *(_WORD *)&v79[4] = 2082;
    *(void *)&v79[6] = v20;
    os_log_type_t v80 = 2082;
    __int16 v81 = v29;
    os_log_type_t v82 = 2114;
    __int16 v83 = v7;
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v74 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      os_log_type_t v31 = (os_log_s *)(id)gconnection_groupLogObj;
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        uint64_t v33 = v5[42];
        id v34 = v5[10];
        else {
          char v35 = off_189BB8B98[v34];
        }
        *(_DWORD *)buf = 136447234;
        os_log_type_t v77 = "nw_connection_group_set_state_locked";
        os_log_type_t v78 = 1024;
        *(_DWORD *)v79 = v33;
        *(_WORD *)&v79[4] = 2082;
        *(void *)&v79[6] = v35;
        os_log_type_t v80 = 2082;
        __int16 v81 = v29;
        os_log_type_t v82 = 2114;
        __int16 v83 = v7;
        _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@)",  buf,  0x30u);
      }
    }

    else if (v74)
    {
      uint64_t v36 = __nw_create_backtrace_string();
      if (v36)
      {
        BOOL v37 = (char *)v36;
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        uint64_t v38 = (os_log_s *)(id)gconnection_groupLogObj;
        id v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          BOOL v40 = v5[42];
          id v41 = v5[10];
          else {
            uint64_t v42 = off_189BB8B98[v41];
          }
          *(_DWORD *)buf = 136447490;
          os_log_type_t v77 = "nw_connection_group_set_state_locked";
          os_log_type_t v78 = 1024;
          *(_DWORD *)v79 = v40;
          *(_WORD *)&v79[4] = 2082;
          *(void *)&v79[6] = v42;
          os_log_type_t v80 = 2082;
          __int16 v81 = v29;
          os_log_type_t v82 = 2114;
          __int16 v83 = v7;
          os_log_type_t v84 = 2082;
          __int16 v85 = v37;
          _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@), dumping backtrace:%{public}s",  buf,  0x3Au);
        }

        free(v37);
        if (!v30) {
          goto LABEL_94;
        }
LABEL_93:
        free(v30);
        goto LABEL_94;
      }

      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      os_log_type_t v31 = (os_log_s *)(id)gconnection_groupLogObj;
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v31, type))
      {
        os_log_type_t v60 = v5[42];
        os_log_type_t v61 = v5[10];
        else {
          BOOL v62 = off_189BB8B98[v61];
        }
        *(_DWORD *)buf = 136447234;
        os_log_type_t v77 = "nw_connection_group_set_state_locked";
        os_log_type_t v78 = 1024;
        *(_DWORD *)v79 = v60;
        *(_WORD *)&v79[4] = 2082;
        *(void *)&v79[6] = v62;
        os_log_type_t v80 = 2082;
        __int16 v81 = v29;
        os_log_type_t v82 = 2114;
        __int16 v83 = v7;
        _os_log_impl( &dword_181A5C000,  v31,  v59,  "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@), no backtrace",  buf,  0x30u);
      }
    }

    else
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      os_log_type_t v31 = (os_log_s *)(id)gconnection_groupLogObj;
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v31, type))
      {
        uint64_t v56 = v5[42];
        os_log_type_t v57 = v5[10];
        else {
          BOOL v58 = off_189BB8B98[v57];
        }
        *(_DWORD *)buf = 136447234;
        os_log_type_t v77 = "nw_connection_group_set_state_locked";
        os_log_type_t v78 = 1024;
        *(_DWORD *)v79 = v56;
        *(_WORD *)&v79[4] = 2082;
        *(void *)&v79[6] = v58;
        os_log_type_t v80 = 2082;
        __int16 v81 = v29;
        os_log_type_t v82 = 2114;
        __int16 v83 = v7;
        _os_log_impl( &dword_181A5C000,  v31,  v55,  "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@), backtrace limit exceeded",  buf,  0x30u);
      }
    }

    goto LABEL_91;
  }

  if (!logging_disabled)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    id v21 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      char v22 = v5[42];
      id v23 = v5[10];
      else {
        uint64_t v24 = off_189BB8B98[v23];
      }
      BOOL v43 = off_189BB8B98[a2];
      *(_DWORD *)buf = 136447234;
      os_log_type_t v77 = "nw_connection_group_set_state_locked";
      os_log_type_t v78 = 1024;
      *(_DWORD *)v79 = v22;
      *(_WORD *)&v79[4] = 2082;
      *(void *)&v79[6] = v24;
      os_log_type_t v80 = 2082;
      __int16 v81 = v43;
      os_log_type_t v82 = 2114;
      __int16 v83 = v7;
      _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEFAULT,  "%{public}s [G%u] state changed: %{public}s -> %{public}s (error %{public}@)",  buf,  0x30u);
    }
  }

  v5[10] = a2;
  objc_storeStrong((id *)v5 + 6, a3);
  char v44 = (const void *)*((void *)v5 + 4);
  if (v44 && *((void *)v5 + 1))
  {
    os_log_type_t v45 = _Block_copy(v44);
    uint64_t v46 = (void *)*((void *)v5 + 1);
    os_log_type_t v47 = v5[4];
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = ___ZL36nw_connection_group_set_state_lockedP30NWConcrete_nw_connection_group27nw_connection_group_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    block[3] = &unk_189BC16F8;
    os_log_type_t v70 = v5;
    uint64_t v73 = a2;
    BOOL v71 = v7;
    __int16 v72 = v45;
    __int16 v48 = v46;
    os_log_type_t v49 = v45;
    BOOL v50 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0LL, v47, 0, block);
    dispatch_async(v48, v50);
  }

  else if (!nw_parameters_get_logging_disabled(*((void *)v5 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    uint64_t v9 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      size_t v51 = v5[42];
      os_log_type_t v52 = off_189BB8B98[a2];
      *(_DWORD *)buf = 136446978;
      os_log_type_t v77 = "nw_connection_group_set_state_locked";
      os_log_type_t v78 = 1024;
      *(_DWORD *)v79 = v51;
      *(_WORD *)&v79[4] = 2080;
      *(void *)&v79[6] = v52;
      os_log_type_t v80 = 2112;
      __int16 v81 = v7;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] not delivering state %s, error %@ since no handler/queue is set",  buf,  0x26u);
    }

    goto LABEL_68;
  }

    free(backtrace_string);
    if (!v42) {
      goto LABEL_105;
    }
    goto LABEL_104;
  }

  if (v9)
  {
    uint64_t v75 = 0LL;
    uint64_t v76 = &v75;
    os_log_type_t v77 = 0x3032000000LL;
    os_log_type_t v78 = __Block_byref_object_copy__8579;
    v79 = __Block_byref_object_dispose__8580;
    os_log_type_t v80 = 0LL;
    BOOL v71 = 0LL;
    __int16 v72 = &v71;
    uint64_t v73 = 0x2020000000LL;
    __int16 v74 = 0;
    *(void *)aBlock = MEMORY[0x1895F87A8];
    *(void *)&aBlock[8] = 3221225472LL;
    *(void *)&aBlock[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke;
    *(void *)&aBlock[24] = &unk_189BB7300;
    char v11 = v7;
    *(void *)&aBlock[32] = v11;
    v90 = &v71;
    id v69 = v10;
    v88 = v69;
    char v68 = v8;
    os_log_type_t v89 = v68;
    __int16 v91 = &v75;
    size_t v12 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v7 + 43);
    v12[2](v12);
    os_unfair_lock_unlock(v7 + 43);

    if (*((_BYTE *)v72 + 24))
    {
      uint64_t v13 = 0LL;
LABEL_36:

      _Block_object_dispose(&v71, 8);
      _Block_object_dispose(&v75, 8);

      goto LABEL_37;
    }

    if (v76[5])
    {
      uint64_t v14 = *(void **)&v11[16]._os_unfair_lock_opaque;
      if (!v14 || (__int16 v15 = v14, v16 = v15[2], v15, v16 != 2))
      {
LABEL_35:
        uint64_t v13 = (id)v76[5];
        goto LABEL_36;
      }
    }

    if (!nw_parameters_get_logging_disabled(*(void *)&v11[14]._os_unfair_lock_opaque) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      os_log_type_t v57 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        uint32_t os_unfair_lock_opaque = v11[42]._os_unfair_lock_opaque;
        *(_DWORD *)v94 = 136446978;
        *(void *)&v94[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = os_unfair_lock_opaque;
        *(_WORD *)&v94[18] = 2112;
        *(void *)&v94[20] = v68;
        *(_WORD *)&v94[28] = 2112;
        *(void *)&v94[30] = v69;
        _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] Did not find connection for (remote: %@, parameters: %@), creating new connection",  v94,  0x26u);
      }
    }

    id v17 = (void *)v76[5];
    id v66 = v11;
    v65 = v17;
    endpoint = (nw_endpoint *)v68;
    uint64_t v18 = v69;
    *(void *)v94 = 0LL;
    *(void *)&v94[8] = v94;
    *(void *)&v94[16] = 0x3032000000LL;
    *(void *)&v94[24] = __Block_byref_object_copy__8579;
    *(void *)&v94[32] = __Block_byref_object_dispose__8580;
    v95 = 0LL;
    nw_endpoint_t v64 = v18;
    BOOL v19 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v64,  0,  0);

    id v21 = v65;
    char v20 = v66;
    nw_parameters_set_reuse_local_address((nw_parameters_t)v19, 1);
    if (!nw_parameters_get_logging_disabled(*(void *)&v11[14]._os_unfair_lock_opaque) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      os_log_type_t v59 = (os_log_s *)(id)gconnection_groupLogObj;
      char v20 = v66;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v60 = v66[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v60;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = endpoint;
        *(_WORD *)&buf[28] = 2112;
        *(void *)&buf[30] = v19;
        _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] Creating connection for endpoint (%@) and parameters (%@)",  buf,  0x26u);
      }

      id v21 = v65;
    }

    char v22 = *(void **)&v20[16]._os_unfair_lock_opaque;
    if (v22 && (id v23 = v22, v24 = v23[2], v23, v24 == 2)) {
      id v25 = nw_connection_create_with_connection(v21, (void *)v19);
    }
    else {
      id v25 = nw_connection_create(endpoint, (nw_parameters_t)v19);
    }
    __int16 v26 = *(void **)(*(void *)&v94[8] + 40LL);
    *(void *)(*(void *)&v94[8] + 40LL) = v25;

    if (*(void *)(*(void *)&v94[8] + 40LL))
    {
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke;
      *(void *)&_BYTE buf[24] = &unk_189BC9210;
      *(void *)&_BYTE buf[32] = v20;
      os_log_type_t v93 = v94;
      id v27 = (void (**)(void))_Block_copy(buf);
      os_unfair_lock_lock(v7 + 43);
      v27[2](v27);
      os_unfair_lock_unlock(v7 + 43);

      uint64_t v28 = *(os_log_s **)&buf[32];
    }

    else
    {
      if (nw_parameters_get_logging_disabled(*(void *)&v11[14]._os_unfair_lock_opaque)) {
        goto LABEL_25;
      }
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      uint64_t v28 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = v20[42]._os_unfair_lock_opaque;
        uint64_t v30 = *(void *)&v11[14]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v29;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v30;
        _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] failed to create connection with parameters %@",  buf,  0x1Cu);
      }
    }

LABEL_25:
    os_log_type_t v31 = *(id *)(*(void *)&v94[8] + 40LL);

    _Block_object_dispose(v94, 8);
    os_log_type_t v32 = (void *)v76[5];
    v76[5] = (uint64_t)v31;

    if (v76[5])
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      _BYTE buf[24] = 0;
      *(void *)v94 = MEMORY[0x1895F87A8];
      *(void *)&v94[8] = 3221225472LL;
      *(void *)&v94[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_154;
      *(void *)&v94[24] = &unk_189BC9210;
      v95 = buf;
      uint64_t v33 = v20;
      *(void *)&v94[32] = v33;
      id v34 = (void (**)(void))_Block_copy(v94);
      os_unfair_lock_lock(v7 + 43);
      v34[2](v34);
      os_unfair_lock_unlock(v7 + 43);

      if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
      {
        nw_connection_start((nw_connection_t)v76[5]);
      }

      else if (!nw_parameters_get_logging_disabled(*(void *)&v11[14]._os_unfair_lock_opaque))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        char v35 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v36 = v33[42]._os_unfair_lock_opaque;
          BOOL v37 = v76[5];
          *(_DWORD *)__int16 v81 = 136446722;
          os_log_type_t v82 = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          __int16 v83 = 1024;
          os_log_type_t v84 = v36;
          __int16 v85 = 2112;
          v86 = v37;
          _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] Deferring start of connection %@ until group start",  v81,  0x1Cu);
        }
      }

      _Block_object_dispose(buf, 8);
    }

    goto LABEL_35;
  }

  __nwlog_obj();
  os_log_type_t v47 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)aBlock = 136446210;
  *(void *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
  uint64_t v42 = (char *)_os_log_send_and_compose_impl();

  v94[0] = 16;
  buf[0] = 0;
  if (__nwlog_fault(v42, v94, buf))
  {
    if (v94[0] == 17)
    {
      __nwlog_obj();
      BOOL v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v48 = v94[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v94[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_181A5C000, v43, v48, "%{public}s called with null parameters", aBlock, 0xCu);
      }

  if (v12) {
    free(v12);
  }
  return 0LL;
}

          if (v22) {
            free(v22);
          }
          __int16 v15 = 0LL;
          goto LABEL_16;
        }

        __nwlog_obj();
        id v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
        char v22 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v54 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v28 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl( &dword_181A5C000,  v23,  v28,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
          }

          goto LABEL_103;
        }

        if (!v54)
        {
          __nwlog_obj();
          id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v46 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl( &dword_181A5C000,  v23,  v46,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_103;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v39 = type;
        BOOL v40 = os_log_type_enabled(v23, type);
        if (!backtrace_string)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl( &dword_181A5C000,  v23,  v39,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
          }

          goto LABEL_103;
        }

        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v23,  v39,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        id v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
        char v22 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v54 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          __int16 v26 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl( &dword_181A5C000,  v23,  v26,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
          }

          goto LABEL_103;
        }

        if (!v54)
        {
          __nwlog_obj();
          id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v45 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl( &dword_181A5C000,  v23,  v45,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_103;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v37 = type;
        uint64_t v38 = os_log_type_enabled(v23, type);
        if (!backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
            _os_log_impl( &dword_181A5C000,  v23,  v37,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_103;
        }

        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v23,  v37,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }
    }

    else
    {
      __nwlog_obj();
      id v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
      char v22 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v54 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_103;
      }

      if (!v54)
      {
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v44 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
          _os_log_impl( &dword_181A5C000,  v23,  v44,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_103;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v35 = type;
      uint64_t v36 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
          _os_log_impl(&dword_181A5C000, v23, v35, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_103;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v23,  v35,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

        goto LABEL_69;
      }

      uint64_t v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v34 = type;
      BOOL v37 = os_log_type_enabled(v33, type);
      if (!v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v50 = "nw_authentication_credential_cache_entry_get_type";
          char v35 = "%{public}s called with null cache_entry, no backtrace";
          goto LABEL_67;
        }

        goto LABEL_68;
      }

      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v50 = "nw_authentication_credential_cache_entry_get_type";
        size_t v51 = 2082;
        os_log_type_t v52 = v36;
        _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s called with null cache_entry, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v36);
    }

    if (v32) {
      free(v32);
    }
    uint64_t v9 = 0LL;
    goto LABEL_9;
  }

  __nwlog_obj();
  char v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
  size_t v12 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v41.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v12, &v41, &type))
  {
    if (LOBYTE(v41.receiver) == 17)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v14 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v13, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null application_service_name", buf, 0xCu);
      }
    }

    else if (type)
    {
      id v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v24 = (os_log_type_t)v41.receiver;
      id v25 = os_log_type_enabled(v13, (os_log_type_t)v41.receiver);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          char v44 = 2082;
          os_log_type_t v45 = v23;
          _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null application_service_name, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v23);
        goto LABEL_44;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
        _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null application_service_name, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v29 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v13, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
        _os_log_impl( &dword_181A5C000,  v13,  v29,  "%{public}s called with null application_service_name, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (a2 == 4)
  {
    nw_array_remove_object(v21[20], *(void *)(a1 + 40));
    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
    id v21 = *(void **)(a1 + 32);
  }

  BOOL v40 = v21[2];
  if (v40 && !nw_path_parameters_get_logging_disabled(*(void *)(v40 + 104)))
  {
    if (v7[59] != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    os_log_type_t v32 = (id)v8[58];
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_INFO))
    {
      id v41 = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446466;
      os_log_type_t v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      os_log_type_t v55 = 2082;
      uint64_t v56 = (char *)v41;
      _os_log_impl( &dword_181A5C000,  (os_log_t)v32,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Tore down inbox for proxy protocol",  buf,  0x16u);
    }

    goto LABEL_76;
  }

  if (v29) {
    free(v29);
  }
  id v16 = 0LL;
LABEL_30:

  return v16;
}

            goto LABEL_170;
          }

          if (!v160)
          {
            __nwlog_obj();
            char v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v99 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)buf = 136446210;
              v163 = "nw_parameters_create_secure_http_messaging";
              _os_log_impl( &dword_181A5C000,  v44,  v99,  "%{public}s nw_quic_create_stream_options failed, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_68;
          }

          uint64_t v75 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v77 = type;
          os_log_type_t v78 = os_log_type_enabled(v76, type);
          if (v75)
          {
            if (v78)
            {
              *(_DWORD *)buf = 136446466;
              v163 = "nw_parameters_create_secure_http_messaging";
              v164 = 2082;
              v165 = v75;
              _os_log_impl( &dword_181A5C000,  v76,  v77,  "%{public}s nw_quic_create_stream_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v75);
            if (!v43) {
              goto LABEL_172;
            }
            goto LABEL_171;
          }

          if (v78)
          {
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            _os_log_impl( &dword_181A5C000,  v76,  v77,  "%{public}s nw_quic_create_stream_options failed, no backtrace",  buf,  0xCu);
          }
        }

    free(v52);
    goto LABEL_93;
  }

  os_log_type_t v45 = (os_log_s *)__nwlog_obj();
  uint64_t v46 = type[0];
  if (os_log_type_enabled(v45, type[0]))
  {
    *(_DWORD *)__s = 136446210;
    os_log_type_t v82 = "nw_http_client_bottom_add_to_messaging";
    os_log_type_t v47 = "%{public}s called with null input_protocol";
LABEL_92:
    _os_log_impl(&dword_181A5C000, v45, v46, v47, (uint8_t *)__s, 0xCu);
  }

        if (v23) {
          free(v23);
        }
        goto LABEL_70;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      os_log_type_t v47 = "nw_endpoint_create_apple_service";
      __int16 v48 = 2082;
      os_log_type_t v49 = "service";
      id v7 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v44 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)(id)gLogObj;
        __int16 v15 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v47 = "nw_endpoint_create_apple_service";
          __int16 v48 = 2082;
          os_log_type_t v49 = "service";
          _os_log_impl(&dword_181A5C000, v8, v15, "%{public}s invalid empty string %{public}s", buf, 0x16u);
        }

        if (v23) {
          free(v23);
        }
        goto LABEL_70;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      os_log_type_t v47 = "nw_endpoint_create_application_service_with_alias";
      __int16 v48 = 2082;
      os_log_type_t v49 = "alias";
      id v7 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v44 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)(id)gLogObj;
        __int16 v15 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v47 = "nw_endpoint_create_application_service_with_alias";
          __int16 v48 = 2082;
          os_log_type_t v49 = "alias";
          _os_log_impl(&dword_181A5C000, v8, v15, "%{public}s invalid empty string %{public}s", buf, 0x16u);
        }

  if (v24) {
LABEL_69:
  }
    free(v24);
LABEL_6:
  size_t v12 = 0LL;
LABEL_61:

  return v12;
}

  if (v27) {
    free(v27);
  }
  return 1LL;
}

    goto LABEL_69;
  }

  if (v8)
  {
    char v11 = *((void *)v7 + 2);
    if (*(unsigned __int8 *)(v11 + 112) != 255)
    {
      *((_BYTE *)v7 + 219) = a3 != 6;
      size_t v12 = a3 != 6 && a3 != 17;
      uint64_t v13 = *(nw_interface **)(v11 + 80);
      if (v13) {
        nw_parameters_require_interface(v9, v13);
      }
      nw_parameters_set_proxy_applied(v10, 1);
      if (*((_BYTE *)v7 + 268)) {
        nw_parameters_prohibit_interface_type(v10, nw_interface_type_wifi);
      }
      if (*((_BYTE *)v7 + 270)) {
        nw_parameters_prohibit_interface_type(v10, nw_interface_type_wired);
      }
      if (*((_BYTE *)v7 + 269)) {
        nw_parameters_prohibit_interface_type(v10, nw_interface_type_cellular);
      }
      if (*((_BYTE *)v7 + 267)) {
        nw_parameters_set_prohibit_expensive(v10, 1);
      }
      if (*((_BYTE *)v7 + 266)) {
        nw_parameters_set_prohibit_constrained(v10, 1);
      }
      uint64_t v14 = *((_DWORD *)v7 + 64);
      if (v14) {
        nw_parameters_set_required_interface_type(v10, v14);
      }
      if (v7[140])
      {
        host_with_numeric_port = nw_endpoint_create_host_with_numeric_port("::", v7[140]);
        nw_parameters_set_local_endpoint(v10, (nw_endpoint_t)host_with_numeric_port);
        nw_parameters_set_reuse_local_address(v10, 1);
      }

      nw_parameters_set_traffic_class(v10, *((_DWORD *)v7 + 63));
      nw_connection_reset_traffic_class(*(void **)(*((void *)v7 + 2) + 48LL), *((_DWORD *)v7 + 63));
      id v16 = (void *)*((void *)v7 + 34);
      if (v16) {
        nw_parameters_set_source_application_by_bundle_id_internal(v10, (const char *)[v16 UTF8String]);
      }
      id v17 = *((_DWORD *)v7 + 65);
      if (v17) {
        nw_parameters_set_multipath_service(v10, v17);
      }
      uint64_t v18 = v7[132];
      if (v18)
      {
        BOOL v19 = v8;
        v19[114] = v18;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v20 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        id v21 = (char *)*((void *)v7 + 2);
        *(_DWORD *)buf = 136446978;
        __int16 v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
        os_log_type_t v49 = 2114;
        BOOL v50 = v21;
        size_t v51 = 2112;
        os_log_type_t v52 = v8;
        BOOL v53 = 2112;
        os_log_type_t v54 = v10;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_INFO,  "%{public}s %{public}@ creating new outer connection to %@ with parameters %@",  buf,  0x2Au);
      }

      char v22 = nw_connection_create((nw_endpoint_t)v8, v10);
      id v23 = (void *)*((void *)v7 + 6);
      *((void *)v7 + 6) = v22;

      nw_connection_set_queue(*((nw_connection_t *)v7 + 6), *(dispatch_queue_t *)(*((void *)v7 + 2) + 32LL));
      uint64_t v24 = (nw_connection *)*((void *)v7 + 6);
      handler[0] = MEMORY[0x1895F87A8];
      handler[1] = 3221225472LL;
      handler[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke;
      handler[3] = &unk_189BBB6D0;
      id v25 = v7;
      id v41 = v25;
      BOOL v43 = a3;
      uint64_t v42 = v8;
      char v44 = v12;
      nw_connection_set_state_changed_handler(v24, handler);
      if (*((_BYTE *)v7 + 219)) {
        nw_masque_connection_pair_read_outer_datagrams(v25);
      }
      else {
        nw_masque_connection_pair_read_outer(v25);
      }
      nw_connection_start(*((nw_connection_t *)v7 + 6));
      nw_masque_connection_pair_read_inner(v25);
    }

    goto LABEL_35;
  }

  __nwlog_obj();
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
  id v27 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v45 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v31 = type;
    if (os_log_type_enabled(v28, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
      _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint", buf, 0xCu);
    }

    goto LABEL_68;
  }

  if (!v45)
  {
    __nwlog_obj();
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v39 = type;
    if (os_log_type_enabled(v28, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
      _os_log_impl( &dword_181A5C000,  v28,  v39,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_68;
  }

  char v35 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v36 = type;
  BOOL v37 = os_log_type_enabled(v28, type);
  if (!v35)
  {
    if (v37)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
      _os_log_impl(&dword_181A5C000, v28, v36, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }

    goto LABEL_68;
  }

  if (v37)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
    os_log_type_t v49 = 2082;
    BOOL v50 = v35;
    _os_log_impl( &dword_181A5C000,  v28,  v36,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v35);
  if (v27) {
    goto LABEL_70;
  }
LABEL_35:
}

    if (v29) {
      free(v29);
    }
    goto LABEL_70;
  }

  if ((*((_BYTE *)v3 + 268) & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v9 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((*((_BYTE *)v4 + 268) & 1) != 0) {
        id v10 = "dry-run ";
      }
      else {
        id v10 = "";
      }
      char v11 = nw_endpoint_handler_copy_endpoint(v4);
      logging_description = nw_endpoint_get_logging_description(v11);
      uint64_t v13 = *((unsigned int *)v4 + 30);
      else {
        uint64_t v14 = off_189BBBBF0[v13];
      }
      uint64_t v18 = v4;
      BOOL v19 = (os_unfair_lock_s *)v18;
      id v41 = v11;
      char v20 = "path";
      switch(*((_DWORD *)v4 + 29))
      {
        case 0:
          break;
        case 1:
          char v20 = "resolver";
          break;
        case 2:
          char v20 = nw_endpoint_flow_mode_string(v18[31]);
          break;
        case 3:
          char v20 = "proxy";
          break;
        case 4:
          char v20 = "fallback";
          break;
        case 5:
          char v20 = "transform";
          break;
        default:
          char v20 = "unknown-mode";
          break;
      }

      id v21 = v19 + 28;
      char v22 = v19;
      os_unfair_lock_lock(v19 + 28);
      id v23 = v22[8];
      os_unfair_lock_unlock(v21);

      *(_DWORD *)buf = 136447746;
      os_log_type_t v45 = "nw_endpoint_handler_get_flow_id";
      uint64_t v46 = 2082;
      os_log_type_t v47 = (char *)(v4 + 21);
      __int16 v48 = 2082;
      os_log_type_t v49 = v10;
      BOOL v50 = 2082;
      size_t v51 = logging_description;
      os_log_type_t v52 = 2082;
      BOOL v53 = v14;
      os_log_type_t v54 = 2082;
      os_log_type_t v55 = v20;
      uint64_t v56 = 2114;
      os_log_type_t v57 = v23;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is not flow",  buf,  0x48u);
    }
  }

  if (*((_DWORD *)handle + 111) == 5)
  {
    if ((handle[548] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v44 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v45 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&buf[22] = 2080;
        v108 = " ";
        LOWORD(v109) = 1024;
        *(_DWORD *)((char *)&v109 + 2) = v45;
        _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Session already terminated, ignoring",  buf,  0x26u);
      }
    }
  }

  else
  {
    if ((handle[548] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v46 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v47 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&buf[22] = 2080;
        v108 = " ";
        LOWORD(v109) = 1024;
        *(_DWORD *)((char *)&v109 + 2) = v47;
        HIWORD(v109) = 1024;
        LODWORD(v110) = 57;
        _os_log_impl( &dword_181A5C000,  v46,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Closing webtransport session with error %{darwin.errno}d",  buf,  0x2Cu);
      }
    }

    *((_DWORD *)handle + 111) = 5;
    __int16 v48 = (char *)*((void *)handle + 23);
    if (v48)
    {
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = ___ZL33nw_webtransport_session_terminateP23nw_webtransport_sessioni_block_invoke;
      v108 = (const char *)&__block_descriptor_tmp_22_33505;
      LODWORD(v109) = 57;
      nw_hash_table_apply(v48, (uint64_t)buf);
    }

    os_log_type_t v49 = *((void *)handle + 53);
    if (v49)
    {
      BOOL v50 = *(void **)(v49 + 48);
      nw_protocol_error(v50, *((void *)handle + 53));
      nw_protocol_disconnected(v50, v49);
    }

    size_t v51 = *((void *)handle + 41);
    if (v51)
    {
      do
      {
        os_log_type_t v52 = *(void *)(v51 + 112);
        BOOL v53 = *(void **)(v51 + 48);
        nw_protocol_error(v53, v51);
        nw_protocol_disconnected(v53, v51);
        size_t v51 = v52;
      }

      while (v52);
    }

    os_log_type_t v54 = *((void *)handle + 52);
    if (v54)
    {
      os_log_type_t v55 = *(void **)(v54 + 48);
      nw_protocol_error(v55, *((void *)handle + 52));
      nw_protocol_disconnected(v55, v54);
    }

    if (*((void *)handle + 4))
    {
      nw_protocol_remove_instance((uint64_t)handle);
      nw_protocol_disconnect(*((void **)handle + 4), (uint64_t)handle);
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v28 = "nw_protocol_http1_stream_get_message_properties";
  BOOL v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  id v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v20 = (os_log_s *)gLogObj;
    id v21 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_82;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_protocol_http1_stream_get_message_properties";
    char v22 = "%{public}s called with null http1";
    goto LABEL_81;
  }

  if (!v25)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v20 = (os_log_s *)gLogObj;
    id v21 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_82;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_protocol_http1_stream_get_message_properties";
    char v22 = "%{public}s called with null http1, backtrace limit exceeded";
    goto LABEL_81;
  }

  id v23 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v20 = (os_log_s *)gLogObj;
  id v21 = type;
  uint64_t v24 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (v23)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "nw_protocol_http1_stream_get_message_properties";
      uint64_t v29 = 2082;
      uint64_t v30 = v23;
      _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v23);
    goto LABEL_82;
  }

  if (v24)
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_protocol_http1_stream_get_message_properties";
    char v22 = "%{public}s called with null http1, no backtrace";
LABEL_81:
    _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
  }

  if (v10) {
    free(v10);
  }
  return 0xFFFFFFFFLL;
}

  if (v26) {
LABEL_69:
  }
    free(v26);
LABEL_88:
  char v20 = 0LL;
LABEL_105:

  return v20;
}

          free(v26);
          goto LABEL_69;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v10;
        __int16 v26 = (char *)_os_log_send_and_compose_impl();
        v61[0] = 16;
        output_buffer[0] = 0;
        if (v61[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v27 = (os_log_s *)gLogObj;
          uint64_t v28 = v61[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v61[0])) {
            goto LABEL_67;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v10;
          uint64_t v29 = "%{public}s Received incorrect remote-endpoint-type: %@";
        }

        else if (output_buffer[0])
        {
          os_log_type_t v32 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v27 = (os_log_s *)gLogObj;
          uint64_t v28 = v61[0];
          uint64_t v33 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v61[0]);
          if (v32)
          {
            if (v33)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v10;
              os_log_type_t v55 = 2082;
              uint64_t v56 = (uint64_t)v32;
              _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s Received incorrect remote-endpoint-type: %@, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v32);
            goto LABEL_67;
          }

          if (!v33) {
            goto LABEL_67;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v10;
          uint64_t v29 = "%{public}s Received incorrect remote-endpoint-type: %@, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v27 = (os_log_s *)gLogObj;
          uint64_t v28 = v61[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v61[0])) {
            goto LABEL_67;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v10;
          uint64_t v29 = "%{public}s Received incorrect remote-endpoint-type: %@, backtrace limit exceeded";
        }

        uint64_t v38 = v27;
        id v39 = v28;
LABEL_66:
        _os_log_impl(&dword_181A5C000, v38, v39, v29, buf, 0x16u);
        goto LABEL_67;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
      char v44 = (char *)_os_log_send_and_compose_impl();
      v61[0] = 16;
      output_buffer[0] = 0;
      if (__nwlog_fault(v44, v61, output_buffer))
      {
        if (v61[0] == 17)
        {
          os_log_type_t v45 = (os_log_s *)__nwlog_obj();
          uint64_t v46 = v61[0];
          if (!os_log_type_enabled(v45, (os_log_type_t)v61[0])) {
            goto LABEL_89;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          os_log_type_t v47 = "%{public}s called with null framer";
          goto LABEL_88;
        }

        if (!output_buffer[0])
        {
          os_log_type_t v45 = (os_log_s *)__nwlog_obj();
          uint64_t v46 = v61[0];
          if (!os_log_type_enabled(v45, (os_log_type_t)v61[0])) {
            goto LABEL_89;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          os_log_type_t v47 = "%{public}s called with null framer, backtrace limit exceeded";
          goto LABEL_88;
        }

        __int16 v48 = (char *)__nw_create_backtrace_string();
        os_log_type_t v45 = (os_log_s *)__nwlog_obj();
        uint64_t v46 = v61[0];
        os_log_type_t v49 = os_log_type_enabled(v45, (os_log_type_t)v61[0]);
        if (v48)
        {
          if (v49)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v48;
            _os_log_impl( &dword_181A5C000,  v45,  v46,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v48);
          goto LABEL_89;
        }

        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          os_log_type_t v47 = "%{public}s called with null framer, no backtrace";
LABEL_88:
          _os_log_impl(&dword_181A5C000, v45, v46, v47, buf, 0xCu);
        }
      }

    free(backtrace_string);
    goto LABEL_69;
  }

  if (!v5[12])
  {
    __nwlog_obj();
    id v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    char v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v24 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl( &dword_181A5C000,  v21,  v24,  "%{public}s called with null serviceConnector->activeOutgoingRequests",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v39 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl( &dword_181A5C000,  v21,  v39,  "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v32 = buf[0];
    uint64_t v33 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    if (v33)
    {
      *(_DWORD *)os_log_type_t v52 = 136446466;
      *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
      *(_WORD *)&v52[12] = 2082;
      *(void *)&v52[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s",  v52,  0x16u);
    }

    goto LABEL_68;
  }

  if (!v6)
  {
    __nwlog_obj();
    id v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    char v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v26 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_181A5C000, v21, v26, "%{public}s called with null endpoint", v52, 0xCu);
      }

      goto LABEL_94;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v40 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl( &dword_181A5C000,  v21,  v40,  "%{public}s called with null endpoint, backtrace limit exceeded",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v34 = buf[0];
    char v35 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_181A5C000, v21, v34, "%{public}s called with null endpoint, no backtrace", v52, 0xCu);
      }

      goto LABEL_94;
    }

    if (v35)
    {
      *(_DWORD *)os_log_type_t v52 = 136446466;
      *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
      *(_WORD *)&v52[12] = 2082;
      *(void *)&v52[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v34,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  v52,  0x16u);
    }

    goto LABEL_68;
  }

  if (!a3)
  {
    __nwlog_obj();
    id v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    char v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v20, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v28 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
          _os_log_impl(&dword_181A5C000, v21, v28, "%{public}s called with null service", v52, 0xCu);
        }

    free(backtrace_string);
    goto LABEL_69;
  }

  if (!v5[11])
  {
    __nwlog_obj();
    id v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
    char v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v24 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl( &dword_181A5C000,  v21,  v24,  "%{public}s called with null serviceConnector->activeConnections",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v39 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl( &dword_181A5C000,  v21,  v39,  "%{public}s called with null serviceConnector->activeConnections, backtrace limit exceeded",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v32 = buf[0];
    uint64_t v33 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null serviceConnector->activeConnections, no backtrace",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    if (v33)
    {
      *(_DWORD *)os_log_type_t v52 = 136446466;
      *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
      *(_WORD *)&v52[12] = 2082;
      *(void *)&v52[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null serviceConnector->activeConnections, dumping backtrace:%{public}s",  v52,  0x16u);
    }

    goto LABEL_68;
  }

  if (!v6)
  {
    __nwlog_obj();
    id v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
    char v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v26 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_181A5C000, v21, v26, "%{public}s called with null endpoint", v52, 0xCu);
      }

      goto LABEL_94;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v40 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl( &dword_181A5C000,  v21,  v40,  "%{public}s called with null endpoint, backtrace limit exceeded",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v34 = buf[0];
    char v35 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_181A5C000, v21, v34, "%{public}s called with null endpoint, no backtrace", v52, 0xCu);
      }

      goto LABEL_94;
    }

    if (v35)
    {
      *(_DWORD *)os_log_type_t v52 = 136446466;
      *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
      *(_WORD *)&v52[12] = 2082;
      *(void *)&v52[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v34,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  v52,  0x16u);
    }

    goto LABEL_68;
  }

  if (!a3)
  {
    __nwlog_obj();
    id v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
    char v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v20, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v28 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          _os_log_impl(&dword_181A5C000, v21, v28, "%{public}s called with null service", v52, 0xCu);
        }

    free(backtrace_string);
    goto LABEL_69;
  }

  if (!v5[10])
  {
    __nwlog_obj();
    id v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
    char v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v24 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl( &dword_181A5C000,  v21,  v24,  "%{public}s called with null serviceConnector->pendingIncomingRequests",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v39 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl( &dword_181A5C000,  v21,  v39,  "%{public}s called with null serviceConnector->pendingIncomingRequests, backtrace limit exceeded",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v32 = buf[0];
    uint64_t v33 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null serviceConnector->pendingIncomingRequests, no backtrace",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    if (v33)
    {
      *(_DWORD *)os_log_type_t v52 = 136446466;
      *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
      *(_WORD *)&v52[12] = 2082;
      *(void *)&v52[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null serviceConnector->pendingIncomingRequests, dumping backtrace:%{public}s",  v52,  0x16u);
    }

    goto LABEL_68;
  }

  if (!v6)
  {
    __nwlog_obj();
    id v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
    char v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v26 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_181A5C000, v21, v26, "%{public}s called with null endpoint", v52, 0xCu);
      }

      goto LABEL_94;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v40 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl( &dword_181A5C000,  v21,  v40,  "%{public}s called with null endpoint, backtrace limit exceeded",  v52,  0xCu);
      }

      goto LABEL_94;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v34 = buf[0];
    char v35 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_181A5C000, v21, v34, "%{public}s called with null endpoint, no backtrace", v52, 0xCu);
      }

      goto LABEL_94;
    }

    if (v35)
    {
      *(_DWORD *)os_log_type_t v52 = 136446466;
      *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
      *(_WORD *)&v52[12] = 2082;
      *(void *)&v52[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v34,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  v52,  0x16u);
    }

    goto LABEL_68;
  }

  if (!a3)
  {
    __nwlog_obj();
    id v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
    char v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v20, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v28 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
          _os_log_impl(&dword_181A5C000, v21, v28, "%{public}s called with null service", v52, 0xCu);
        }

    goto LABEL_84;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  os_log_type_t v70 = "nw_nat64_write_prefix_to_string";
  BOOL v71 = 1024;
  *(_DWORD *)__int16 v72 = a3;
  *(_WORD *)&v72[4] = 1024;
  *(_DWORD *)&v72[6] = 50;
  id v6 = (const char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v68 = OS_LOG_TYPE_DEFAULT;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (os_log_s *)(id)gLogObj;
    uint64_t v8 = type[0];
    if (!os_log_type_enabled(v7, type[0])) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v70 = "nw_nat64_write_prefix_to_string";
    BOOL v71 = 1024;
    *(_DWORD *)__int16 v72 = a3;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&v72[6] = 50;
    uint64_t v9 = "%{public}s dst_length=%u must be >= %d";
LABEL_36:
    os_log_type_t v31 = v7;
    os_log_type_t v32 = v8;
LABEL_37:
    _os_log_impl(&dword_181A5C000, v31, v32, v9, buf, 0x18u);
    goto LABEL_38;
  }

  if (v68 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (os_log_s *)(id)gLogObj;
    uint64_t v8 = type[0];
    if (!os_log_type_enabled(v7, type[0])) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v70 = "nw_nat64_write_prefix_to_string";
    BOOL v71 = 1024;
    *(_DWORD *)__int16 v72 = a3;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&v72[6] = 50;
    uint64_t v9 = "%{public}s dst_length=%u must be >= %d, backtrace limit exceeded";
    goto LABEL_36;
  }

  id v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (os_log_s *)(id)gLogObj;
  id v17 = type[0];
  uint64_t v18 = os_log_type_enabled(v7, type[0]);
  if (v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446978;
      os_log_type_t v70 = "nw_nat64_write_prefix_to_string";
      BOOL v71 = 1024;
      *(_DWORD *)__int16 v72 = a3;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = 50;
      *(_WORD *)&v72[10] = 2082;
      *(void *)&v72[12] = v16;
      _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s dst_length=%u must be >= %d, dumping backtrace:%{public}s",  buf,  0x22u);
    }

    free(v16);
LABEL_24:
    if (!v6) {
      return 0LL;
    }
    goto LABEL_39;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v70 = "nw_nat64_write_prefix_to_string";
    BOOL v71 = 1024;
    *(_DWORD *)__int16 v72 = a3;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&v72[6] = 50;
    uint64_t v9 = "%{public}s dst_length=%u must be >= %d, no backtrace";
    os_log_type_t v31 = v7;
    os_log_type_t v32 = v17;
    goto LABEL_37;
  }

  if (v26) {
    free(v26);
  }
  id v7 = 0LL;
LABEL_51:

  return v7;
}

    if (v11) {
      free(v11);
    }
    goto LABEL_11;
  }

          free(v24);
          if (v8) {
            goto LABEL_84;
          }
          return 0LL;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        id v41 = "nw_socket_register_notification";
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v38 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v30 = (os_log_s *)__nwlog_obj();
          os_log_type_t v31 = type;
          if (!os_log_type_enabled(v30, type)) {
            goto LABEL_83;
          }
          *(_DWORD *)buf = 136446210;
          id v41 = "nw_socket_register_notification";
          char v11 = "%{public}s called with null val";
          goto LABEL_143;
        }

        if (v38)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v30 = (os_log_s *)__nwlog_obj();
          os_log_type_t v31 = type;
          BOOL v37 = os_log_type_enabled(v30, type);
          if (backtrace_string)
          {
            if (v37)
            {
LABEL_130:
              *(_DWORD *)buf = 136446466;
              id v41 = "nw_socket_register_notification";
              uint64_t v42 = 2082;
              BOOL v43 = backtrace_string;
              id v34 = "%{public}s called with null val, dumping backtrace:%{public}s";
              goto LABEL_108;
            }

            goto LABEL_109;
          }

          if (!v37) {
            goto LABEL_83;
          }
          *(_DWORD *)buf = 136446210;
          id v41 = "nw_socket_register_notification";
          char v11 = "%{public}s called with null val, no backtrace";
        }

        else
        {
          uint64_t v30 = (os_log_s *)__nwlog_obj();
          os_log_type_t v31 = type;
          if (!os_log_type_enabled(v30, type)) {
            goto LABEL_83;
          }
          *(_DWORD *)buf = 136446210;
          id v41 = "nw_socket_register_notification";
          char v11 = "%{public}s called with null val, backtrace limit exceeded";
        }

        break;
      case 3:
        return nw_socket_add_socket_events(v6, 1, 256, 0);
      default:
        return 0LL;
    }

    goto LABEL_143;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v41 = "nw_socket_register_notification";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v38 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_83;
    }
    *(_DWORD *)buf = 136446210;
    id v41 = "nw_socket_register_notification";
    char v11 = "%{public}s called with null socket_handler";
    goto LABEL_143;
  }

  if (!v38)
  {
    uint64_t v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_83;
    }
    *(_DWORD *)buf = 136446210;
    id v41 = "nw_socket_register_notification";
    char v11 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_143;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  uint64_t v30 = (os_log_s *)__nwlog_obj();
  os_log_type_t v31 = type;
  char v35 = os_log_type_enabled(v30, type);
  if (backtrace_string)
  {
    if (!v35) {
      goto LABEL_109;
    }
    *(_DWORD *)buf = 136446466;
    id v41 = "nw_socket_register_notification";
    uint64_t v42 = 2082;
    BOOL v43 = backtrace_string;
    id v34 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
    goto LABEL_108;
  }

  if (!v35) {
    goto LABEL_83;
  }
  *(_DWORD *)buf = 136446210;
  id v41 = "nw_socket_register_notification";
  char v11 = "%{public}s called with null socket_handler, no backtrace";
LABEL_143:
  id v27 = v30;
  uint64_t v28 = v31;
  uint64_t v29 = 12;
LABEL_82:
  _os_log_impl(&dword_181A5C000, v27, v28, v11, buf, v29);
LABEL_83:
  if (v8) {
LABEL_84:
  }
    free(v8);
  return 0LL;
}

        goto LABEL_69;
      }

      if (!v44)
      {
        __nwlog_obj();
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v42 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v30,  v42,  "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options)), backtr ace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_68;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v39 = type;
      BOOL v40 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v30,  v39,  "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options)), no backtrace",  buf,  0xCu);
        }

        goto LABEL_68;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v47 = "nw_serializable_tls_deserialize_options";
        __int16 v48 = 2082;
        os_log_type_t v49 = (uint64_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v30,  v39,  "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options)), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_56;
    }

    goto LABEL_69;
  }

  BOOL v43 = v5;
  id v6 = calloc(1uLL, 0x20uLL);
  if (v6) {
    goto LABEL_4;
  }
  __nwlog_obj();
  id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v47 = "strict_calloc";
  __int16 v48 = 2048;
  os_log_type_t v49 = 1LL;
  BOOL v50 = 2048;
  size_t v51 = 32LL;
  char v35 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v35);
  if (!result)
  {
    free(v35);
LABEL_4:
    if ((os_variant_allows_internal_security_policies() & 1) != 0)
    {
      id v7 = v6[24] & 0xFE | *a2 & 1;
      v6[24] = v7;
    }

    else
    {
      id v7 = v6[24];
    }

    uint64_t v8 = v7 & 0xFD | (2 * ((*a2 & 2) != 0));
    v6[24] = v8;
    v6[24] = v8 & 0xFB | *a2 & 4;
    uint64_t v9 = a2 + 2;
    if (!a2[1]) {
      goto LABEL_14;
    }
    id v10 = (unint64_t)&a2[a3];
    char v11 = a2 + 4;
    if (a2 + 4 >= &a2[a3])
    {
      uint64_t v13 = 0LL;
    }

    else
    {
      size_t v12 = *(unsigned __int16 *)v9;
      uint64_t v9 = &v11[v12];
      if ((unint64_t)&v11[v12] > v10)
      {
        uint64_t v13 = 0LL;
        uint64_t v14 = 0LL;
        uint64_t v9 = a2 + 4;
LABEL_13:
        *((void *)v6 + 1) = v13;
        *((void *)v6 + 2) = v14;
LABEL_14:
        __int16 v15 = (unint64_t)&a2[a3];
        id v16 = v9 + 2;
        if (v9 + 2 >= &a2[a3])
        {
          Mutable = 0LL;
        }

        else
        {
          Mutable = 0LL;
          uint64_t v18 = (const __CFAllocator *)*MEMORY[0x189604DB0];
          BOOL v19 = (const CFArrayCallBacks *)MEMORY[0x189605228];
          do
          {
            char v20 = *(unsigned __int16 *)v9;
            uint64_t v9 = &v16[v20];
            if (!Mutable) {
              Mutable = CFArrayCreateMutable(v18, 0LL, v19);
            }
            id v21 = CFDataCreate(v18, v16, v20);
            CFArrayAppendValue(Mutable, v21);
            if (v21) {
              CFRelease(v21);
            }
            id v16 = v9 + 2;
          }

          while ((unint64_t)(v9 + 2) < v15);
        }

        *(void *)id v6 = Mutable;
        id v5 = v43;
LABEL_24:

        return (BOOL)v6;
      }

      id v23 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      uint64_t v13 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], v11, v12);
      uint64_t v24 = v9 + 2;
      if ((unint64_t)(v9 + 2) < v10)
      {
        uint64_t v14 = 0LL;
        id v25 = 1;
        while (v25 < a2[1])
        {
          __int16 v26 = *(unsigned __int16 *)v9;
          uint64_t v9 = &v24[v26];
          if ((unint64_t)&v24[v26] > v10)
          {
            uint64_t v9 = v24;
            goto LABEL_13;
          }

          id v27 = CFDataCreate(v23, v24, v26);
          if (!v14) {
            uint64_t v14 = CFArrayCreateMutable(v23, 0LL, MEMORY[0x189605228]);
          }
          CFArrayAppendValue(v14, v27);
          if (v27) {
            CFRelease(v27);
          }
          ++v25;
          uint64_t v24 = v9 + 2;
        }

        goto LABEL_13;
      }
    }

    uint64_t v14 = 0LL;
    goto LABEL_13;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v57 = (id)gLogObj;
  if (mode > 5) {
    BOOL v58 = "unknown-mode";
  }
  else {
    BOOL v58 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  v79 = "nw_endpoint_flow_reset_expected_progress_target";
  os_log_type_t v80 = 2082;
  __int16 v81 = (void *)v58;
  os_log_type_t v82 = 2082;
  __int16 v83 = "flow";
  os_log_type_t v59 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v76 = 0;
  if (!__nwlog_fault((const char *)v59, &type, &v76))
  {
LABEL_100:
    if (!v59) {
      goto LABEL_102;
    }
LABEL_101:
    free(v59);
    goto LABEL_102;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v60 = (os_log_s *)(id)gLogObj;
    os_log_type_t v61 = type;
    if (os_log_type_enabled(v60, type))
    {
      if (mode > 5) {
        BOOL v62 = "unknown-mode";
      }
      else {
        BOOL v62 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v79 = "nw_endpoint_flow_reset_expected_progress_target";
      os_log_type_t v80 = 2082;
      __int16 v81 = (void *)v62;
      os_log_type_t v82 = 2082;
      __int16 v83 = "flow";
      _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

  if (v48) {
    free(v48);
  }
LABEL_51:
}

    if (!v17) {
      return 1LL;
    }
    BOOL v50 = (char *)v17;
LABEL_70:
    free(v50);
    return 1LL;
  }

  id v5 = object;
  id v6 = *(void *)nw_hash_node_get_extra(a2);
  if (v6)
  {
    id v7 = *(unsigned __int16 *)(v6 + 188);
    uint64_t v8 = v7 | (*(unsigned __int8 *)(v6 + 190) << 16);
    if ((v7 & 0x20) != 0)
    {
      *(_WORD *)(v6 + 188) = v7 & 0xFFDF;
      *(_BYTE *)(v6 + 190) = (v8 & 0xFFFFFFDF) >> 16;
      if ((v8 & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v58 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v60 = *(_DWORD *)(v6 + 176);
          os_log_type_t v59 = *(_DWORD *)(v6 + 180);
          *(_DWORD *)buf = 136447746;
          id v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          os_log_type_t v70 = 2082;
          BOOL v71 = (const char *)(v6 + 191);
          __int16 v72 = 2080;
          uint64_t v73 = " ";
          __int16 v74 = 1024;
          uint64_t v75 = v59;
          uint64_t v76 = 1024;
          *(_DWORD *)os_log_type_t v77 = v60;
          *(_WORD *)&v77[4] = 2048;
          *(void *)&v77[6] = v5;
          *(_WORD *)&v77[14] = 1024;
          *(_DWORD *)&v77[16] = v60;
          _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> delivering output_available to protocol %p for stream %d",  buf,  0x3Cu);
        }
      }

      uint64_t v9 = *(void *)(v5 + 24);
      if (v9)
      {
        id v10 = *(void (**)(uint64_t, void))(v9 + 72);
        if (v10)
        {
          v10(v5, *(void *)(a1 + 32));
          return 1LL;
        }
      }

      __nwlog_obj();
      os_log_type_t v52 = *(const char **)(v5 + 16);
      if (!v52) {
        os_log_type_t v52 = "invalid";
      }
      *(_DWORD *)buf = 136446466;
      id v69 = "nw_http2_deliver_pending_output_available_block_invoke";
      os_log_type_t v70 = 2082;
      BOOL v71 = v52;
      BOOL v53 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v66 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          uint64_t v56 = *(const char **)(v5 + 16);
          if (!v56) {
            uint64_t v56 = "invalid";
          }
          *(_DWORD *)buf = 136446466;
          id v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          os_log_type_t v70 = 2082;
          BOOL v71 = v56;
          os_log_type_t v57 = "%{public}s protocol %{public}s has invalid output_available callback";
LABEL_99:
          _os_log_impl(&dword_181A5C000, v54, v55, v57, buf, 0x16u);
        }
      }

      else if (v66)
      {
        os_log_type_t v61 = (char *)__nw_create_backtrace_string();
        os_log_type_t v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type;
        BOOL v62 = os_log_type_enabled(v54, type);
        if (v61)
        {
          if (v62)
          {
            os_log_type_t v63 = *(const char **)(v5 + 16);
            if (!v63) {
              os_log_type_t v63 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            id v69 = "nw_http2_deliver_pending_output_available_block_invoke";
            os_log_type_t v70 = 2082;
            BOOL v71 = v63;
            __int16 v72 = 2082;
            uint64_t v73 = v61;
            _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v61);
          goto LABEL_100;
        }

        if (v62)
        {
          v65 = *(const char **)(v5 + 16);
          if (!v65) {
            v65 = "invalid";
          }
          *(_DWORD *)buf = 136446466;
          id v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          os_log_type_t v70 = 2082;
          BOOL v71 = v65;
          os_log_type_t v57 = "%{public}s protocol %{public}s has invalid output_available callback, no backtrace";
          goto LABEL_99;
        }
      }

      else
      {
        os_log_type_t v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          nw_endpoint_t v64 = *(const char **)(v5 + 16);
          if (!v64) {
            nw_endpoint_t v64 = "invalid";
          }
          *(_DWORD *)buf = 136446466;
          id v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          os_log_type_t v70 = 2082;
          BOOL v71 = v64;
          os_log_type_t v57 = "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded";
          goto LABEL_99;
        }
      }

    if (v52) {
      free(v52);
    }
    id v16 = 0;
LABEL_17:
    *((_BYTE *)v8 + 1) = v16;
    id v17 = (bswap32(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) >> 3) >> 16) | (32 * (v11 <= v12));
    v8[3] = v17;
    uint64_t v18 = *(unsigned __int16 *)(a1 + 76);
    v8[2] = v18;
    v8[5] = 0;
    BOOL v19 = *(void *)(a1 + 48);
    if ((*(_BYTE *)(v19 + 136) & 0x10) == 0)
    {
      if ((v8 & 3) != 0)
      {
        char v20 = vaddvq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)(v8 + 6))) + v8[1] + *v8 + v18 + v8[4] + v17;
        LODWORD(v21) = HIWORD(v20) + (unsigned __int16)v20 + ((HIWORD(v20) + (unsigned __int16)v20) >> 16);
      }

      else
      {
        id v23 = vaddlvq_u32(*(uint32x4_t *)v8);
        uint64_t v24 = ((v23 + *((unsigned int *)v8 + 4)) >> 32) + (v23 + *((_DWORD *)v8 + 4));
        id v21 = (((v24 >> 16) + (unsigned __int16)v24) >> 16) + (unsigned __int16)(WORD1(v24) + v24);
        LOWORD(v21) = WORD1(v21) + v21;
      }

      v8[5] = ~(_WORD)v21;
      id v25 = *(void *)(v19 + 48);
      if (v25) {
        *(int64x2_t *)(v25 + 312) = vaddq_s64(*(int64x2_t *)(v25 + 312), (int64x2_t)xmmword_18272D830);
      }
LABEL_26:
      ++*(void *)v19;
      if ((*(_BYTE *)(v19 + 136) & 1) == 0)
      {
        if (gLogDatapath)
        {
          BOOL v37 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v38 = *(void *)(a1 + 48);
            id v39 = (const char *)(v38 + 137);
            BOOL v40 = "";
            if (!v38) {
              id v39 = "";
            }
            id v41 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
            if (v38) {
              BOOL v40 = " ";
            }
            uint64_t v42 = *(unsigned __int16 *)(a1 + 76);
            *(_DWORD *)buf = 136447746;
            os_log_type_t v57 = "nw_protocol_ipv4_frame_output_finalizer_block_invoke";
            BOOL v58 = 2082;
            os_log_type_t v59 = (void *)v39;
            os_log_type_t v60 = 2080;
            os_log_type_t v61 = v40;
            BOOL v62 = 2048;
            os_log_type_t v63 = v38;
            nw_endpoint_t v64 = 1024;
            v65 = v13;
            id v66 = 1024;
            v67 = v41;
            char v68 = 1024;
            id v69 = v42;
            _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Writing fragment of length %u at offset %u with ID %u",  buf,  0x3Cu);
          }
        }
      }

      memcpy( v8 + 10,  (const void *)(*(void *)(a1 + 64) + *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)),  v13);
      nw_frame_claim(a2, v26, v13 + 20, 0);
      nw_frame_collapse(a2);
      nw_frame_unclaim(a2, v27, v13 + 20, 0);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v13;
      return 1LL;
    }

    char v22 = *(void *)(a1 + 56);
    if (v22)
    {
      if ((*(_WORD *)(v22 + 204) & 0x100) != 0) {
        *(_BYTE *)(v22 + 203) |= 4u;
      }
      goto LABEL_26;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v57 = "__nw_frame_add_internet_csum_flags";
    BOOL v43 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v54 = 0;
    if (__nwlog_fault(v43, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v44 = (os_log_s *)__nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v57 = "__nw_frame_add_internet_csum_flags";
          uint64_t v46 = "%{public}s called with null frame";
LABEL_75:
          _os_log_impl(&dword_181A5C000, v44, v45, v46, buf, 0xCu);
        }
      }

      else if (v54)
      {
        BOOL v50 = (char *)__nw_create_backtrace_string();
        char v44 = (os_log_s *)__nwlog_obj();
        os_log_type_t v45 = type;
        size_t v51 = os_log_type_enabled(v44, type);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v57 = "__nw_frame_add_internet_csum_flags";
            BOOL v58 = 2082;
            os_log_type_t v59 = v50;
            _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v50);
          goto LABEL_76;
        }

        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v57 = "__nw_frame_add_internet_csum_flags";
          uint64_t v46 = "%{public}s called with null frame, no backtrace";
          goto LABEL_75;
        }
      }

      else
      {
        char v44 = (os_log_s *)__nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v57 = "__nw_frame_add_internet_csum_flags";
          uint64_t v46 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_75;
        }
      }
    }

      if (!v42)
      {
LABEL_70:

        goto LABEL_71;
      }

void sub_181A95A84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_caches_are_shared(void *a1, void *a2)
{
  uint32_t v3 = a1;
  int v4 = a2;
  if (v3 == v4) {
    goto LABEL_12;
  }
  if (nw_context_get_isolate_protocol_cache(v3))
  {
    char v5 = v3[136];
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
  }

  if (!nw_context_get_isolate_protocol_cache(v4) || (v4[136] & 4) != 0)
  {
LABEL_12:
    uint64_t v6 = 1LL;
    goto LABEL_13;
  }

  char v5 = v3[136];
LABEL_7:
  if ((v5 & 0x20) != 0 && *((_BYTE **)v4 + 5) == v3 || (v4[136] & 0x20) != 0 && *((_BYTE **)v3 + 5) == v4) {
    goto LABEL_12;
  }
  uint64_t v6 = 0LL;
LABEL_13:

  return v6;
}

id nw_parameters_copy_path_parameters(void *a1, int a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  uint32_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = v3[19];
    if (v5)
    {
      uint64_t v6 = *(void **)(v5 + 24);
      if (a2)
      {
        if (v6)
        {
          id v7 = nw_protocol_options_copy(*(void **)(v5 + 24));
          uint64_t v8 = *((void *)v4 + 13);
          uint64_t v9 = *(void **)(v8 + 144);
          *(void *)(v8 + 144) = v7;

          uint64_t v5 = *((void *)v4 + 19);
        }

        id v10 = *(void **)(v5 + 48);
        if (!v10) {
          goto LABEL_10;
        }
        char v11 = nw_protocol_options_copy(v10);
        uint64_t v12 = *((void *)v4 + 13);
        uint64_t v13 = *(void **)(v12 + 152);
        *(void *)(v12 + 152) = v11;
      }

      else
      {
        objc_storeStrong((id *)(v3[13] + 144LL), v6);
        uint64_t v14 = *((void *)v4 + 13);
        id v15 = *(id *)(*((void *)v4 + 19) + 48LL);
        uint64_t v13 = *(void **)(v14 + 152);
        *(void *)(v14 + 152) = v15;
      }
    }

LABEL_10:
    id v16 = *((id *)v4 + 13);
    goto LABEL_11;
  }

  __nwlog_obj();
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v29 = "nw_parameters_copy_path_parameters";
  BOOL v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v19, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_parameters_copy_path_parameters";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_parameters_copy_path_parameters";
          __int16 v30 = 2082;
          os_log_type_t v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v23,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_parameters_copy_path_parameters";
        _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_parameters_copy_path_parameters";
        _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  uint64_t v9 = 0LL;
LABEL_13:

  return v9;
}

  *(void *)(*(void *)(a1 + 32) + 304LL) = v13;
  memcpy( *(void **)(*(void *)(a1 + 32) + 304LL),  *(const void **)(*(void *)(a1 + 40) + 304LL),  24LL * *(unsigned int *)(*(void *)(a1 + 40) + 344LL));
  uint64_t v9 = *(void *)(a1 + 40);
LABEL_11:
  *(_DWORD *)(*(void *)(a1 + 32) + 360LL) = *(_DWORD *)(v9 + 360);
  *(_DWORD *)(*(void *)(a1 + 32) + 364LL) = *(_DWORD *)(*(void *)(a1 + 40) + 364LL);
  *(_DWORD *)(*(void *)(a1 + 32) + 368LL) = *(_DWORD *)(*(void *)(a1 + 40) + 368LL);
  *(_DWORD *)(*(void *)(a1 + 32) + 372LL) = *(_DWORD *)(*(void *)(a1 + 40) + 372LL);
  *(_DWORD *)(*(void *)(a1 + 32) + 376LL) = *(_DWORD *)(*(void *)(a1 + 40) + 376LL);
  *(_DWORD *)(*(void *)(a1 + 32) + 380LL) = *(_DWORD *)(*(void *)(a1 + 40) + 380LL);
  *(_WORD *)(*(void *)(a1 + 32) + 384LL) = *(_WORD *)(*(void *)(a1 + 40) + 384LL);
  *(_BYTE *)(*(void *)(a1 + 32) + 386LL) = *(_BYTE *)(*(void *)(a1 + 40) + 386LL);
  *(_WORD *)(*(void *)(a1 + 32) + 387LL) = *(_WORD *)(*(void *)(a1 + 40) + 387LL);
  uint64_t v14 = (_OWORD *)(*(void *)(a1 + 32) + 392LL);
  id v15 = (_OWORD *)(*(void *)(a1 + 40) + 392LL);
  id v16 = *(_OWORD *)(*(void *)(a1 + 40) + 456LL);
  uint64_t v18 = *(_OWORD *)(*(void *)(a1 + 40) + 408LL);
  id v17 = *(_OWORD *)(*(void *)(a1 + 40) + 424LL);
  v14[3] = *(_OWORD *)(*(void *)(a1 + 40) + 440LL);
  v14[4] = v16;
  v14[1] = v18;
  v14[2] = v17;
  *uint64_t v14 = *v15;
  BOOL v19 = *(void *)(a1 + 40);
  char v20 = *(void *)(v19 + 200);
  if (v20)
  {
    os_log_type_t v21 = nw_array_create();
    if (v21 != v20)
    {
      char v22 = v21;
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v21 + 16,  *(void ***)(v20 + 16),  *(void ***)(v20 + 24),  (uint64_t)(*(void *)(v20 + 24) - *(void *)(v20 + 16)) >> 3);
      char v20 = v22;
    }

    os_log_type_t v23 = *(void *)(a1 + 32);
    BOOL v24 = *(void **)(v23 + 200);
    *(void *)(v23 + 200) = v20;

    BOOL v19 = *(void *)(a1 + 40);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 472LL) = *(_BYTE *)(v19 + 472);
  *(_BYTE *)(*(void *)(a1 + 32) + 473LL) = *(_BYTE *)(*(void *)(a1 + 32) + 473LL) & 0xFE | *(_BYTE *)(*(void *)(a1 + 40) + 473LL) & 1;
  *(_BYTE *)(*(void *)(a1 + 32) + 473LL) = *(_BYTE *)(*(void *)(a1 + 32) + 473LL) & 0xFD | *(_BYTE *)(*(void *)(a1 + 40) + 473LL) & 2;
  *(_BYTE *)(*(void *)(a1 + 32) + 473LL) = *(_BYTE *)(*(void *)(a1 + 32) + 473LL) & 0xFB | *(_BYTE *)(*(void *)(a1 + 40) + 473LL) & 4;
  *(_BYTE *)(*(void *)(a1 + 32) + 473LL) = *(_BYTE *)(*(void *)(a1 + 32) + 473LL) & 0xF7 | *(_BYTE *)(*(void *)(a1 + 40) + 473LL) & 8;
  *(_BYTE *)(*(void *)(a1 + 32) + 473LL) = *(_BYTE *)(*(void *)(a1 + 32) + 473LL) & 0xEF | *(_BYTE *)(*(void *)(a1 + 40) + 473LL) & 0x10;
  *(_BYTE *)(*(void *)(a1 + 32) + 473LL) = *(_BYTE *)(*(void *)(a1 + 32) + 473LL) & 0xDF | *(_BYTE *)(*(void *)(a1 + 40) + 473LL) & 0x20;
  *(_BYTE *)(*(void *)(a1 + 32) + 473LL) = *(_BYTE *)(*(void *)(a1 + 32) + 473LL) & 0xBF | *(_BYTE *)(*(void *)(a1 + 40) + 473LL) & 0x40;
  *(_BYTE *)(*(void *)(a1 + 32) + 473LL) = *(_BYTE *)(*(void *)(a1 + 40) + 473LL) & 0x80 | *(_BYTE *)(*(void *)(a1 + 32) + 473LL) & 0x7F;
  *(_BYTE *)(*(void *)(a1 + 32) + 474LL) = *(_BYTE *)(*(void *)(a1 + 32) + 474LL) & 0xFE | *(_BYTE *)(*(void *)(a1 + 40) + 474LL) & 1;
  *(_BYTE *)(*(void *)(a1 + 32) + 474LL) = *(_BYTE *)(*(void *)(a1 + 32) + 474LL) & 0xFD | *(_BYTE *)(*(void *)(a1 + 40) + 474LL) & 2;
  *(_BYTE *)(*(void *)(a1 + 32) + 474LL) = *(_BYTE *)(*(void *)(a1 + 32) + 474LL) & 0xFB | *(_BYTE *)(*(void *)(a1 + 40) + 474LL) & 4;
  *(_BYTE *)(*(void *)(a1 + 32) + 474LL) = *(_BYTE *)(*(void *)(a1 + 32) + 474LL) & 0xF7 | *(_BYTE *)(*(void *)(a1 + 40) + 474LL) & 8;
  *(_BYTE *)(*(void *)(a1 + 32) + 474LL) = *(_BYTE *)(*(void *)(a1 + 32) + 474LL) & 0xEF | *(_BYTE *)(*(void *)(a1 + 40) + 474LL) & 0x10;
  *(_BYTE *)(*(void *)(a1 + 32) + 474LL) = *(_BYTE *)(*(void *)(a1 + 32) + 474LL) & 0xDF | *(_BYTE *)(*(void *)(a1 + 40) + 474LL) & 0x20;
  *(_BYTE *)(*(void *)(a1 + 32) + 474LL) = *(_BYTE *)(*(void *)(a1 + 32) + 474LL) & 0xBF | *(_BYTE *)(*(void *)(a1 + 40) + 474LL) & 0x40;
  *(_BYTE *)(*(void *)(a1 + 32) + 474LL) = *(_BYTE *)(*(void *)(a1 + 40) + 474LL) & 0x80 | *(_BYTE *)(*(void *)(a1 + 32) + 474LL) & 0x7F;
  *(_BYTE *)(*(void *)(a1 + 32) + 475LL) = *(_BYTE *)(*(void *)(a1 + 32) + 475LL) & 0xFE | *(_BYTE *)(*(void *)(a1 + 40) + 475LL) & 1;
  *(_BYTE *)(*(void *)(a1 + 32) + 475LL) = *(_BYTE *)(*(void *)(a1 + 32) + 475LL) & 0xFD | *(_BYTE *)(*(void *)(a1 + 40) + 475LL) & 2;
  *(_BYTE *)(*(void *)(a1 + 32) + 475LL) = *(_BYTE *)(*(void *)(a1 + 32) + 475LL) & 0xFB | *(_BYTE *)(*(void *)(a1 + 40) + 475LL) & 4;
  *(_BYTE *)(*(void *)(a1 + 32) + 475LL) = *(_BYTE *)(*(void *)(a1 + 32) + 475LL) & 0xF7 | *(_BYTE *)(*(void *)(a1 + 40) + 475LL) & 8;
  *(_BYTE *)(*(void *)(a1 + 32) + 475LL) = *(_BYTE *)(*(void *)(a1 + 32) + 475LL) & 0xEF | *(_BYTE *)(*(void *)(a1 + 40) + 475LL) & 0x10;
  *(_BYTE *)(*(void *)(a1 + 32) + 475LL) = *(_BYTE *)(*(void *)(a1 + 32) + 475LL) & 0xDF | *(_BYTE *)(*(void *)(a1 + 40) + 475LL) & 0x20;
  *(_BYTE *)(*(void *)(a1 + 32) + 475LL) = *(_BYTE *)(*(void *)(a1 + 32) + 475LL) & 0xBF | *(_BYTE *)(*(void *)(a1 + 40) + 475LL) & 0x40;
  *(_BYTE *)(*(void *)(a1 + 32) + 475LL) = *(_BYTE *)(*(void *)(a1 + 40) + 475LL) & 0x80 | *(_BYTE *)(*(void *)(a1 + 32) + 475LL) & 0x7F;
  *(_BYTE *)(*(void *)(a1 + 32) + 476LL) = *(_BYTE *)(*(void *)(a1 + 32) + 476LL) & 0xFE | *(_BYTE *)(*(void *)(a1 + 40) + 476LL) & 1;
  *(_BYTE *)(*(void *)(a1 + 32) + 476LL) = *(_BYTE *)(*(void *)(a1 + 32) + 476LL) & 0xFD | *(_BYTE *)(*(void *)(a1 + 40) + 476LL) & 2;
  *(_BYTE *)(*(void *)(a1 + 32) + 476LL) = *(_BYTE *)(*(void *)(a1 + 32) + 476LL) & 0xFB | *(_BYTE *)(*(void *)(a1 + 40) + 476LL) & 4;
  *(_BYTE *)(*(void *)(a1 + 32) + 476LL) = *(_BYTE *)(*(void *)(a1 + 32) + 476LL) & 0xF7 | *(_BYTE *)(*(void *)(a1 + 40) + 476LL) & 8;
  *(_BYTE *)(*(void *)(a1 + 32) + 476LL) = *(_BYTE *)(*(void *)(a1 + 32) + 476LL) & 0xEF | *(_BYTE *)(*(void *)(a1 + 40) + 476LL) & 0x10;
  *(_BYTE *)(*(void *)(a1 + 32) + 476LL) = *(_BYTE *)(*(void *)(a1 + 32) + 476LL) & 0xDF | *(_BYTE *)(*(void *)(a1 + 40) + 476LL) & 0x20;
  *(_BYTE *)(*(void *)(a1 + 32) + 476LL) = *(_BYTE *)(*(void *)(a1 + 32) + 476LL) & 0xBF | *(_BYTE *)(*(void *)(a1 + 40) + 476LL) & 0x40;
}

  return v9;
}

  return effective_mtu;
}

        nw_endpoint_flow_reset_expected_progress_target(v8, 0LL, self->connection_uuid);
        goto LABEL_11;
      }

      uint64_t v46 = v10->handle;
      if (v46 == &nw_protocol_ref_counted_handle)
      {
        __int16 v48 = v10[1].callbacks;
        if (v48) {
          v10[1].callbacks = (nw_protocol_callbacks *)((char *)&v48->add_input_handler + 1);
        }
        *(void *)os_log_type_t type = v10;
        os_log_type_t v47 = v135 | 1;
      }

      else
      {
        *(void *)os_log_type_t type = self->shared_protocol.protocol.output_handler;
        os_log_type_t v47 = v135 & 0xFE;
      }

      v135 = v47;
      os_log_type_t v49 = self->shared_protocol.protocol.handle;
      if (v49 == &nw_protocol_ref_counted_handle)
      {
        size_t v51 = (char *)self->shared_protocol.listen_protocol.handle;
        if (v51) {
          self->shared_protocol.listen_protocol.handle = v51 + 1;
        }
        p_shared_protocol = &self->shared_protocol;
        BOOL v50 = v133 | 1;
      }

      else
      {
        p_shared_protocol = &self->shared_protocol;
        BOOL v50 = v133 & 0xFE;
      }

      v133 = v50;
      os_log_type_t v52 = v10->callbacks;
      if (v52)
      {
        disconnect = (void (*)(nw_protocol *, nw_flow_protocol *))v52->disconnect;
        if (disconnect)
        {
          disconnect(v10, &self->shared_protocol);
          goto LABEL_69;
        }
      }

      __nwlog_obj();
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v97 = v10->identifier->name;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_disconnect";
      if (!v97) {
        os_log_type_t v97 = "invalid";
      }
      v137 = 2082;
      v138 = (void *)v97;
      v139 = 2048;
      v140 = (const char *)v10;
      loga = (char *)_os_log_send_and_compose_impl();

      v131 = OS_LOG_TYPE_ERROR;
      v130 = 0;
      if (__nwlog_fault(loga, &v131, &v130))
      {
        if (v131 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v98 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v119 = v131;
          if (os_log_type_enabled(v98, v131))
          {
            os_log_type_t v99 = v10->identifier->name;
            if (!v99) {
              os_log_type_t v99 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_disconnect";
            v137 = 2082;
            v138 = (void *)v99;
            v139 = 2048;
            v140 = (const char *)v10;
            _os_log_impl( &dword_181A5C000,  v98,  v119,  "%{public}s protocol %{public}s (%p) has invalid disconnect callback",  buf,  0x20u);
          }
        }

        else
        {
          if (v130)
          {
            BOOL v100 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            char v118 = v131;
            v101 = os_log_type_enabled(v120, v131);
            if (v100)
            {
              if (v101)
              {
                os_log_type_t v102 = v10->identifier->name;
                if (!v102) {
                  os_log_type_t v102 = "invalid";
                }
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "__nw_protocol_disconnect";
                v137 = 2082;
                v138 = (void *)v102;
                v139 = 2048;
                v140 = (const char *)v10;
                v141 = 2082;
                v142 = v100;
                _os_log_impl( &dword_181A5C000,  v120,  v118,  "%{public}s protocol %{public}s (%p) has invalid disconnect callback, dumping backtrace:%{public}s",  buf,  0x2Au);
              }

              free(v100);
            }

            else
            {
              if (v101)
              {
                v104 = v10->identifier->name;
                if (!v104) {
                  v104 = "invalid";
                }
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "__nw_protocol_disconnect";
                v137 = 2082;
                v138 = (void *)v104;
                v139 = 2048;
                v140 = (const char *)v10;
                _os_log_impl( &dword_181A5C000,  v120,  v118,  "%{public}s protocol %{public}s (%p) has invalid disconnect callback, no backtrace",  buf,  0x20u);
              }
            }

            goto LABEL_186;
          }

          __nwlog_obj();
          v98 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v121 = v131;
          if (os_log_type_enabled(v98, v131))
          {
            BOOL v103 = v10->identifier->name;
            if (!v103) {
              BOOL v103 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_disconnect";
            v137 = 2082;
            v138 = (void *)v103;
            v139 = 2048;
            v140 = (const char *)v10;
            _os_log_impl( &dword_181A5C000,  v98,  v121,  "%{public}s protocol %{public}s (%p) has invalid disconnect callback, backtrace limit exceeded",  buf,  0x20u);
          }
        }
      }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_18264EB20();
  id v15 = v14;
LABEL_12:
  id v16 = sub_181C02668(v13, v15);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  BOOL v19 = *a3;
  swift_beginAccess();
  char v20 = *(void *)(*(void *)(v19 + 16) + 16LL);
  char v22 = a4;
  os_log_type_t v23 = a5;
  BOOL v24 = a6;
  os_log_type_t v25 = a7;
  char v26 = 0;
  id v27 = v16;
  uint64_t v28 = v18;
  sub_181C216E0(v20, v20, (uint64_t)&v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  id v16 = sub_18264E49C();
  if (v16 >= v9) {
    id v17 = v9;
  }
  else {
    id v17 = v16;
  }
  uint64_t v18 = &v14[v17];
  if (v14) {
    BOOL v19 = v18;
  }
  else {
    BOOL v19 = 0LL;
  }
  char v11 = sub_181BE44F8(v14, v19);
  os_log_type_t v21 = v20;
  swift_release();
  swift_release();
  uint64_t v12 = v21 & 0xFFFFFFFFFFFFFFLL;
LABEL_18:
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v24[1] = v11;
  v24[2] = v12;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25, v26);
  sub_181C0B554();
  sub_18264F4BC();
  sub_181BCD4F0(v11, v12);
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v25);
}

    sub_181C86A84((uint64_t)v21, v22);
    uint64_t v13 = sub_18264EB20();
    id v15 = v14;
LABEL_12:
    id v16 = sub_181C024EC(v13, v15);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    os_log_type_t v21 = (char *)v7;
    char v22 = v6;
    os_log_type_t v23 = v9;
    BOOL v24 = v8;
    os_log_type_t v25 = 0;
    char v26 = v16;
    id v27 = v18;
    BOOL v19 = sub_181C7DE74(v7, v6);
    MEMORY[0x1895F8858](v19);
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(void *)a1 + 80LL))(sub_181C86AB4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }

  BOOL result = sub_18264F324();
  __break(1u);
  return result;
}

    char v11 = sub_18264EB20();
LABEL_12:
    MEMORY[0x1895F8858](v11);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(void *)a1 + 80LL))(sub_181C86ABC);
    swift_release();
    sub_181C7DE74(v7, v6);
    return swift_bridgeObjectRelease();
  }

  BOOL result = sub_18264F324();
  __break(1u);
  return result;
}

      id v7 = sub_18264EB20();
      uint64_t v9 = v8;
      goto LABEL_13;
    }
  }

      id v7 = sub_18264EB20();
      uint64_t v9 = v8;
      goto LABEL_13;
    }
  }

      id v7 = sub_18264EB20();
      uint64_t v9 = v8;
      goto LABEL_13;
    }
  }

      id v7 = sub_18264EB20();
      uint64_t v9 = v8;
      goto LABEL_13;
    }
  }

      BOOL result = sub_18264EB20();
      nw_parameters_t v2 = (char *)result;
      uint64_t v8 = v7;
      goto LABEL_13;
    }
  }

      id v7 = sub_18264EB20();
      uint64_t v9 = v8;
      goto LABEL_13;
    }
  }

  uint32_t v3 = a1->default_input_handler;
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v110 = "__nw_protocol_connected";
    char v26 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v107 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v27 = (os_log_s *)__nwlog_obj();
      uint64_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v110 = "__nw_protocol_connected";
      uint64_t v29 = "%{public}s called with null protocol";
      goto LABEL_206;
    }

    if (!v107)
    {
      id v27 = (os_log_s *)__nwlog_obj();
      uint64_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v110 = "__nw_protocol_connected";
      uint64_t v29 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_206;
    }

    uint64_t v36 = (char *)__nw_create_backtrace_string();
    id v27 = (os_log_s *)__nwlog_obj();
    uint64_t v28 = type;
    __int16 v74 = os_log_type_enabled(v27, type);
    if (!v36)
    {
      if (!v74) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v110 = "__nw_protocol_connected";
      uint64_t v29 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_206;
    }

    if (v74)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v110 = "__nw_protocol_connected";
      v111 = 2082;
      os_log_type_t v112 = (nw_protocol *)v36;
      uint64_t v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_140;
    }

    goto LABEL_141;
  }

  id v4 = v3->handle;
  if (v4 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v5 = v3[1].callbacks;
    if (v5) {
      v3[1].callbacks = (nw_protocol_callbacks *)((char *)&v5->add_input_handler + 1);
    }
  }

  uint64_t v6 = a1->handle;
  if (v6 == &nw_protocol_ref_counted_handle)
  {
    id v7 = a1[1].callbacks;
    if (v7) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v7->add_input_handler + 1);
    }
  }

  uint64_t v8 = v3->callbacks;
  if (v8)
  {
    connected = (void (*)(nw_protocol *, nw_protocol *))v8->connected;
    if (connected)
    {
      connected(v3, a1);
      goto LABEL_20;
    }
  }

  __nwlog_obj();
  char v20 = v3->identifier->name;
  *(_DWORD *)buf = 136446722;
  BOOL v110 = "__nw_protocol_connected";
  if (!v20) {
    char v20 = "invalid";
  }
  v111 = 2082;
  os_log_type_t v112 = (nw_protocol *)v20;
  BOOL v113 = 2048;
  os_log_type_t v114 = v3;
  os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v107 = 0;
  if (__nwlog_fault(v21, &type, &v107))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_179;
      }
      BOOL v24 = v3->identifier->name;
      if (!v24) {
        BOOL v24 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      BOOL v110 = "__nw_protocol_connected";
      v111 = 2082;
      os_log_type_t v112 = (nw_protocol *)v24;
      BOOL v113 = 2048;
      os_log_type_t v114 = v3;
      os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid connected callback";
      goto LABEL_178;
    }

    if (!v107)
    {
      char v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_179;
      }
      v86 = v3->identifier->name;
      if (!v86) {
        v86 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      BOOL v110 = "__nw_protocol_connected";
      v111 = 2082;
      os_log_type_t v112 = (nw_protocol *)v86;
      BOOL v113 = 2048;
      os_log_type_t v114 = v3;
      os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded";
      goto LABEL_178;
    }

    os_log_type_t v31 = (char *)__nw_create_backtrace_string();
    char v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    uint64_t v32 = os_log_type_enabled(v22, type);
    if (v31)
    {
      if (v32)
      {
        uint64_t v33 = v3->identifier->name;
        if (!v33) {
          uint64_t v33 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        BOOL v110 = "__nw_protocol_connected";
        v111 = 2082;
        os_log_type_t v112 = (nw_protocol *)v33;
        BOOL v113 = 2048;
        os_log_type_t v114 = v3;
        os_log_type_t v115 = 2082;
        os_log_type_t v116 = v31;
        _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v31);
      goto LABEL_179;
    }

    if (v32)
    {
      v94 = v3->identifier->name;
      if (!v94) {
        v94 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      BOOL v110 = "__nw_protocol_connected";
      v111 = 2082;
      os_log_type_t v112 = (nw_protocol *)v94;
      BOOL v113 = 2048;
      os_log_type_t v114 = v3;
      os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace";
LABEL_178:
      _os_log_impl(&dword_181A5C000, v22, v23, v25, buf, 0x20u);
    }
  }

      goto LABEL_11;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v36 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      BOOL v37 = *(void *)(a1 + 48);
      if (v37) {
        uint64_t v38 = (const char *)(v37 + 227);
      }
      else {
        uint64_t v38 = "";
      }
      *(_DWORD *)url = 136446466;
      *(void *)&url[4] = "nw_ws_create_state_block_invoke";
      __int16 v48 = 2082;
      os_log_type_t v49 = v38;
      _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s create_client_request failed",  url,  0x16u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 53);
LABEL_37:

    os_log_type_t v21 = 0LL;
    goto LABEL_14;
  }

  *(_DWORD *)(v10 + 180) = 2;
  *(_DWORD *)(v10 + 188) = 2;
  if (!gLogDatapath) {
    goto LABEL_13;
  }
  __nwlog_obj();
  char v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v42 = *(void *)(a1 + 48);
    if (v42) {
      BOOL v43 = (const char *)(v42 + 227);
    }
    else {
      BOOL v43 = "";
    }
    *(_DWORD *)url = 136446466;
    *(void *)&url[4] = "nw_ws_create_state_block_invoke";
    __int16 v48 = 2082;
    os_log_type_t v49 = v43;
    _os_log_impl(&dword_181A5C000, (os_log_t)v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s skip handshake", url, 0x16u);
  }

      *(_OWORD *)(a1 + 120) = nw_uuid_generate_insecure(unsigned char *)::last_used_uuid;
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_uuid_generate_insecure(unsigned char *)::uuid_lock);
      if (v9)
      {
        id v10 = v9;
        char v11 = *(id *)(v10[13] + 136LL);

        LOBYTE(v10) = nw_context_is_inline(v11);
        if ((v10 & 1) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v12 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v154) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v14 = (os_log_s *)(id)gLogObj;
            id v15 = type[0];
            if (os_log_type_enabled(v14, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
              _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s Cannot use nw_connection_group on inline contexts",  buf,  0xCu);
            }

  uint64_t v18 = (nw_connection *)nw_connection_group_copy_connection_for_message(v5, v6);
  BOOL v19 = v18;
  if (v18)
  {
    char v20 = nw_connection_copy_protocol_metadata(v18, v8);
  }

  else
  {
    char v20 = 0LL;
  }

LABEL_11:
      if (!v6) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (os_log_s *)(id)gLogObj;
      char v22 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "-[NWConcrete_nw_socks5_connection dealloc]";
        _os_log_impl( &dword_181A5C000,  v7,  v22,  "%{public}s over-release of nw_socks5_connection. Object should not be internally retained while deallocating, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_10;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (os_log_s *)(id)gLogObj;
    id v16 = type;
    id v17 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "-[NWConcrete_nw_socks5_connection dealloc]";
        _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s over-release of nw_socks5_connection. Object should not be internally retained while deallocating, no backtrace",  buf,  0xCu);
      }

      goto LABEL_10;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v32 = "-[NWConcrete_nw_socks5_connection dealloc]";
      uint64_t v33 = 2082;
      id v34 = (NWConcrete_nw_socks5_connection *)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s over-release of nw_socks5_connection. Object should not be internally retained while deallocating, du mping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
    if (v6) {
LABEL_12:
    }
      free(v6);
  }
}

    xpc_array_set_value(v8, 0xFFFFFFFFFFFFFFFFLL, v6);
LABEL_11:

LABEL_12:
    return;
  }

  __nwlog_obj();
  uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v46 = "strict_calloc";
  os_log_type_t v47 = 2048;
  __int16 v48 = 1LL;
  os_log_type_t v49 = 2048;
  BOOL v50 = 144LL;
  uint64_t v33 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v33))
  {
    free(v33);
    goto LABEL_8;
  }

  __break(1u);
}

  *(_BYTE *)(v5 + 44) = self->_voluntary;
  *(_BYTE *)(v5 + 48) |= 0x10u;
  has = (char)self->_has;
  if ((has & 2) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((has & 4) != 0)
  {
LABEL_6:
    *(_BYTE *)(v5 + 42) = self->_nexusProvider;
    *(_BYTE *)(v5 + 48) |= 4u;
  }

  return 1LL;
}
      }
    }

    else if (a2)
    {
      if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v16 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          id v17 = nw_endpoint_handler_get_id_string(v3);
          uint64_t v18 = nw_endpoint_handler_dry_run_string(v3);
          BOOL v19 = v17;
          uint64_t v33 = nw_endpoint_handler_copy_endpoint(v3);
          char v20 = nw_endpoint_get_logging_description(v33);
          os_log_type_t v21 = nw_endpoint_handler_state_string(v3);
          char v22 = nw_endpoint_handler_mode_string(v3);
          os_log_type_t v23 = nw_endpoint_handler_copy_current_path(v3);
          *(_DWORD *)buf = 136447746;
          char v44 = "nw_endpoint_proxy_has_unresolved_proxies";
          os_log_type_t v45 = 2082;
          uint64_t v46 = v19;
          os_log_type_t v47 = 2082;
          __int16 v48 = v18;
          os_log_type_t v49 = 2082;
          BOOL v50 = v20;
          size_t v51 = 2082;
          os_log_type_t v52 = v21;
          BOOL v53 = 2082;
          os_log_type_t v54 = v22;
          os_log_type_t v55 = 2114;
          uint64_t v56 = v23;
          _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no resolved proxies or miss ing url, recommending direct attempt",  buf,  0x48u);
        }
      }

      *a2 = 1;
    }
  }
    }
  }

    free(v16);
    goto LABEL_11;
  }

  v4[157] = 4;
  uint64_t v6 = nw_parameters_create();
  nw_parameters_set_data_mode(v6, 2u);
  nw_parameters_set_server_mode(v6, a2);
  nw_parameters_set_allow_socket_access(v6, 1);
  id v7 = nw_connection_create_with_connected_socket_and_parameters(a1, v6);
  uint64_t v8 = (void *)*((void *)v5 + 2);
  *((void *)v5 + 2) = v7;

  uint64_t v9 = (void *)*((void *)v5 + 2);
  if (v9)
  {
    id v10 = v9;
    char v11 = v10[112];

    *((void *)v5 + 12) = v11;
    uint64_t v12 = nw_connection_copy_endpoint(*((nw_connection_t *)v5 + 2));
    uint64_t v13 = (void *)*((void *)v5 + 5);
    *((void *)v5 + 5) = v12;

    uint64_t v14 = v5;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

LABEL_14:
  return v14;
}

    free(v7);
    goto LABEL_11;
  }

  os_unfair_lock_lock(v1 + 30);
  uint32_t v3 = *(void **)&v2[8]._os_unfair_lock_opaque;
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = v4[94] == 1;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  os_unfair_lock_unlock(v2 + 30);
LABEL_14:

  return v5;
}

    free(v7);
    goto LABEL_11;
  }

  uint32_t v3 = (void *)*((void *)v1 + 2);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = v4[112];
  }

  else
  {
    uint64_t v5 = *((void *)v1 + 12);
  }

  id v17 = nw_endpoint_handler_copy_context(v1);
  v40[0] = MEMORY[0x1895F87A8];
  v40[1] = 3221225472LL;
  v40[2] = ___ZL42nw_endpoint_fallback_start_usage_cap_timerP30NWConcrete_nw_endpoint_handler_block_invoke;
  v40[3] = &unk_189BC93A0;
  uint64_t v18 = v1;
  id v41 = v18;
  *((void *)v3 + 11) = nw_queue_context_create_source(v17, 2, 3, 0, v40, 0LL);

  BOOL v19 = *((void *)v3 + 11);
  if (v19)
  {
    char v20 = dispatch_time(0x8000000000000000LL, 1000000LL * *((void *)v3 + 2));
    if (*(void *)v19)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    }

    else
    {
      *(void *)(v19 + 32) = v20;
      *(void *)(v19 + 40) = -1LL;
      if (*(_BYTE *)(v19 + 48) && *(_BYTE *)(v19 + 49)) {
        nw_queue_source_run_timer(v19, v20);
      }
    }

    nw_queue_activate_source(*((void *)v3 + 11), v20);
    goto LABEL_36;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v21 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  BOOL v43 = "nw_endpoint_fallback_start_usage_cap_timer";
  char v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v38 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v23 = (os_log_s *)(id)gLogObj;
    BOOL v24 = type;
    if (os_log_type_enabled(v23, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v43 = "nw_endpoint_fallback_start_usage_cap_timer";
      _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s nw_queue_context_create_source(timer) failed", buf, 0xCu);
    }

      output_handler = a1->output_handler;
      if (output_handler)
      {
        callbacks = output_handler->callbacks;
        if (callbacks)
        {
          connect = (void (*)(void))callbacks->connect;
          if (connect)
          {
            connect();
            return 1LL;
          }
        }
      }

      __nwlog_obj();
      uint64_t v32 = a1->output_handler;
      uint64_t v33 = "invalid";
      if (v32)
      {
        identifier = v32->identifier;
        if (identifier) {
          uint64_t v33 = (const char *)identifier;
        }
      }

      *(_DWORD *)buf = 136446466;
      nw_endpoint_t v64 = "nw_protocol_http2_transport_connect";
      v65 = 2082;
      id v66 = (char *)v33;
      char v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v61 = 0;
      if (__nwlog_fault(v35, &type, &v61))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v36 = (os_log_s *)__nwlog_obj();
          BOOL v37 = type;
          if (!os_log_type_enabled(v36, type)) {
            goto LABEL_131;
          }
          uint64_t v38 = a1->output_handler;
          id v39 = "invalid";
          if (v38)
          {
            BOOL v40 = v38->identifier;
            if (v40) {
              id v39 = (const char *)v40;
            }
          }

          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v64 = "nw_protocol_http2_transport_connect";
          v65 = 2082;
          id v66 = (char *)v39;
          id v41 = "%{public}s protocol %{public}s has invalid connect callback";
          goto LABEL_130;
        }

        if (!v61)
        {
          uint64_t v36 = (os_log_s *)__nwlog_obj();
          BOOL v37 = type;
          if (!os_log_type_enabled(v36, type)) {
            goto LABEL_131;
          }
          BOOL v53 = a1->output_handler;
          os_log_type_t v54 = "invalid";
          if (v53)
          {
            os_log_type_t v55 = v53->identifier;
            if (v55) {
              os_log_type_t v54 = (const char *)v55;
            }
          }

          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v64 = "nw_protocol_http2_transport_connect";
          v65 = 2082;
          id v66 = (char *)v54;
          id v41 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
          goto LABEL_130;
        }

        __int16 v48 = (char *)__nw_create_backtrace_string();
        uint64_t v36 = (os_log_s *)__nwlog_obj();
        BOOL v37 = type;
        os_log_type_t v49 = os_log_type_enabled(v36, type);
        if (v48)
        {
          if (v49)
          {
            BOOL v50 = a1->output_handler;
            size_t v51 = "invalid";
            if (v50)
            {
              os_log_type_t v52 = v50->identifier;
              if (v52) {
                size_t v51 = (const char *)v52;
              }
            }

            *(_DWORD *)buf = 136446722;
            nw_endpoint_t v64 = "nw_protocol_http2_transport_connect";
            v65 = 2082;
            id v66 = (char *)v51;
            v67 = 2082;
            *(void *)char v68 = v48;
            _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v48);
          goto LABEL_131;
        }

        if (v49)
        {
          BOOL v58 = a1->output_handler;
          os_log_type_t v59 = "invalid";
          if (v58)
          {
            os_log_type_t v60 = v58->identifier;
            if (v60) {
              os_log_type_t v59 = (const char *)v60;
            }
          }

          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v64 = "nw_protocol_http2_transport_connect";
          v65 = 2082;
          id v66 = (char *)v59;
          id v41 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
LABEL_130:
          _os_log_impl(&dword_181A5C000, v36, v37, v41, buf, 0x16u);
        }
      }

    *(void *)buf = v4;
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
    v140 = (uint64_t)&__block_descriptor_tmp_55_39717;
    *(void *)v141 = v2 + 632;
    v141[8] = 0;
    uint64_t v8 = *(void *)(v2 + 632);
    do
    {
      if (!v8) {
        break;
      }
      uint64_t v9 = *(void *)(v8 + 32);
      id v10 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      uint64_t v8 = v9;
    }

    while ((v10 & 1) != 0);
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v90 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          __int16 v91 = *(void *)(v2 + 488);
          id v92 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
          os_log_type_t v93 = *(_DWORD *)(v2 + 860);
          if (v91) {
            LODWORD(v91) = *(_DWORD *)(v91 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          v140 = (uint64_t)" ";
          *(_WORD *)v141 = 1024;
          *(_DWORD *)&v141[2] = v92;
          *(_WORD *)&v141[6] = 1024;
          *(_DWORD *)&v141[8] = v93;
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = v91;
          _os_log_impl( &dword_181A5C000,  v90,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removing pending_output_frames",  buf,  0x32u);
        }
      }
    }

    *(void *)&os_log_type_t type = v4;
    *((void *)&type + 1) = 0x40000000LL;
    v136 = (uint64_t (*)(__int128 *))___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
    v137 = &__block_descriptor_tmp_54_39769;
    v138 = v2;
    char v11 = *(void *)(v2 + 648);
    do
    {
      if (!v11) {
        break;
      }
      uint64_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = v136(&type);
      char v11 = v12;
    }

    while ((v13 & 1) != 0);
    uint64_t v14 = (uint64_t *)(v2 + 696);
    nw_frame_cache_remove_all((uint64_t *)(v2 + 696));
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v94 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          v95 = *(void *)(v2 + 488);
          v96 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
          os_log_type_t v97 = *(_DWORD *)(v2 + 860);
          if (v95) {
            LODWORD(v95) = *(_DWORD *)(v95 + 424);
          }
          v98 = *(void *)(v2 + 32);
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          v140 = (uint64_t)" ";
          *(_WORD *)v141 = 1024;
          *(_DWORD *)&v141[2] = v96;
          *(_WORD *)&v141[6] = 1024;
          *(_DWORD *)&v141[8] = v97;
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = v95;
          *(_WORD *)&v141[18] = 2048;
          *(void *)&v141[20] = v98;
          _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> calling remove input handler on output handler %p",  buf,  0x3Cu);
        }
      }
    }

    id v15 = *(_DWORD *)(v3 + 336);
    *(_DWORD *)(v3 + 336) = v15 - 1;
    if (v15)
    {
      if ((*(_BYTE *)(v3 + 158) & 1) != 0) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = *(unsigned int *)(v3 + 336);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->connections_count";
    *(_WORD *)&buf[22] = 2048;
    v140 = 1LL;
    *(_WORD *)v141 = 2048;
    *(void *)&v141[2] = v16;
    id v17 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v144) = 16;
    v134 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v17, &v144, &v134))
    {
      if (v144 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)gLogObj;
        BOOL v19 = v144;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144)) {
          goto LABEL_37;
        }
        char v20 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v140 = 1LL;
        *(_WORD *)v141 = 2048;
        *(void *)&v141[2] = v20;
        os_log_type_t v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_36:
        _os_log_impl(&dword_181A5C000, v18, v19, v21, buf, 0x2Au);
        goto LABEL_37;
      }

      if (v134 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)gLogObj;
        BOOL v19 = v144;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144)) {
          goto LABEL_37;
        }
        os_log_type_t v25 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v140 = 1LL;
        *(_WORD *)v141 = 2048;
        *(void *)&v141[2] = v25;
        os_log_type_t v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = (os_log_s *)gLogObj;
      BOOL v19 = v144;
      os_log_type_t v23 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144);
      if (!backtrace_string)
      {
        if (!v23) {
          goto LABEL_37;
        }
        char v26 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v140 = 1LL;
        *(_WORD *)v141 = 2048;
        *(void *)&v141[2] = v26;
        os_log_type_t v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
        goto LABEL_36;
      }

      if (v23)
      {
        BOOL v24 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v140 = 1LL;
        *(_WORD *)v141 = 2048;
        *(void *)&v141[2] = v24;
        *(_WORD *)&v141[10] = 2082;
        *(void *)&v141[12] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
      }

      free(backtrace_string);
    }

  id v15 = (id)v30[5];
  _Block_object_dispose(&v29, 8);

  return v15;
}

  CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)nw_ws_copy_headers_into_ws_request, v5);
  if (v6) {
    CFRelease(v6);
  }
  char v11 = nw_framer_copy_options(v3);
  v18[0] = MEMORY[0x1895F87A8];
  v18[1] = 3221225472LL;
  v18[2] = __nw_ws_present_request_to_user_block_invoke;
  v18[3] = &unk_189BBEC40;
  uint64_t v12 = v5;
  BOOL v19 = v12;
  os_log_type_t v21 = a1;
  uint64_t v13 = v3;
  char v20 = v13;
  nw_protocol_options_access_handle(v11, v18);
}

  uint64_t v13 = *(void *)(a1 + 32);
  if (v13)
  {
    uint64_t v14 = *(double *)(v13 + 328);
    if (v14 > 0.0)
    {
      id v15 = *(void *)(v13 + 336);
      if (v15)
      {
        id v16 = dispatch_time(0x8000000000000000LL, (uint64_t)(v14 * 1000000000.0));
        if (*(void *)v15)
        {
          dispatch_source_set_timer(*(dispatch_source_t *)v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }

        else
        {
          *(void *)(v15 + 32) = v16;
          *(void *)(v15 + 40) = -1LL;
          if (*(_BYTE *)(v15 + 48) && *(_BYTE *)(v15 + 49)) {
            nw_queue_source_run_timer(v15, v16);
          }
        }
      }
    }
  }

  (*(void (**)(void, uint64_t, id, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  a2,  v5,  v10,  v11,  v12);
}

        id v10 = 0;
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v29 = 0LL;
      __int16 v30 = 0LL;
      LODWORD(v31) = 0;
    }

    uint64_t v9 = 0;
    char v26 = 0LL;
    id v27 = 0LL;
    LODWORD(v28) = 0;
    if (!a2) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }

  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    if (*(void *)(v12 + 288) == 2LL)
    {
LABEL_29:
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  v8,  v9,  v10,  v11);
      goto LABEL_30;
    }

    uint64_t v13 = *(double *)(v12 + 328);
    if (v13 > 0.0)
    {
      uint64_t v14 = *(void *)(v12 + 336);
      if (v14)
      {
        id v15 = dispatch_time(0x8000000000000000LL, (uint64_t)(v13 * 1000000000.0));
        if (*(void *)v14)
        {
          dispatch_source_set_timer(*(dispatch_source_t *)v14, v15, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }

        else
        {
          *(void *)(v14 + 32) = v15;
          *(void *)(v14 + 40) = -1LL;
          if (*(_BYTE *)(v14 + 48) && *(_BYTE *)(v14 + 49)) {
            nw_queue_source_run_timer(v14, v15);
          }
        }
      }
    }
  }

  if (!v3) {
    goto LABEL_29;
  }
  id v16 = *(void **)(a1 + 32);
  if (v16) {
    id v16 = (void *)v16[33];
  }
  os_log_type_t v21 = v16;
  char v22 = *(void *)(a1 + 32);
  if (v22)
  {
    os_log_type_t v23 = *(void **)(v22 + 264);
    *(void *)(v22 + 264) = 0LL;
  }

  (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  v17,  v18,  v19,  v20);
  [v21 stop];
  os_log_type_t v25 = *(void **)(a1 + 32);
  if (v25) {
    objc_setProperty_nonatomic_copy(v25, v24, v3, 56LL);
  }
  objc_msgSend(v3, "HTTPMethod", v34, v35, v36, v37, v38, v39);
  char v26 = (void *)objc_claimAutoreleasedReturnValue();
  id v27 = [v26 caseInsensitiveCompare:@"GET"];

  if (!v27
    || ([v3 HTTPMethod],
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(),
        uint64_t v33 = [v32 caseInsensitiveCompare:@"HEAD"],
        v32,
        !v33))
  {
    uint64_t v28 = *(void *)(a1 + 32);
    if (!v28)
    {
LABEL_36:
      os_log_type_t v31 = 0LL;
      goto LABEL_28;
    }

    uint64_t v29 = *(void **)(v28 + 416);
    *(void *)(v28 + 416) = 0LL;
  }

  __int16 v30 = *(void *)(a1 + 32);
  if (!v30) {
    goto LABEL_36;
  }
  os_log_type_t v31 = *(void **)(v30 + 256);
LABEL_28:
  nw_http_client_metadata_create_next_transaction(v31, 1);
  [*(id *)(a1 + 32) startNextLoad:0];

LABEL_30:
}

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    if (*(void *)(v8 + 288) == 2LL) {
      goto LABEL_28;
    }
    uint64_t v9 = *(double *)(v8 + 328);
    if (v9 > 0.0)
    {
      id v10 = *(void *)(v8 + 336);
      if (v10)
      {
        char v11 = dispatch_time(0x8000000000000000LL, (uint64_t)(v9 * 1000000000.0));
        if (*(void *)v10)
        {
          dispatch_source_set_timer(*(dispatch_source_t *)v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }

        else
        {
          *(void *)(v10 + 32) = v11;
          *(void *)(v10 + 40) = -1LL;
          if (*(_BYTE *)(v10 + 48) && *(_BYTE *)(v10 + 49)) {
            nw_queue_source_run_timer(v10, v11);
          }
        }
      }
    }
  }

  if (v3)
  {
    uint64_t v12 = *(void **)(a1 + 32);
    if (v12) {
      uint64_t v12 = (void *)v12[33];
    }
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(a1 + 32);
    if (v14)
    {
      id v15 = *(void **)(v14 + 264);
      *(void *)(v14 + 264) = 0LL;
    }

    objc_msgSend(v13, "stop", v24, v25, v26, v27, v28, v29);
    id v17 = *(void **)(a1 + 32);
    if (v17) {
      objc_setProperty_nonatomic_copy(v17, v16, v3, 56LL);
    }
    [v3 HTTPMethod];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v19 = [v18 caseInsensitiveCompare:@"GET"];

    if (v19)
    {
      [v3 HTTPMethod];
      char v22 = (void *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = [v22 caseInsensitiveCompare:@"HEAD"];

      char v20 = *(void **)(a1 + 32);
      if (v23)
      {
LABEL_27:
        [v20 startNextLoad:0];

        goto LABEL_28;
      }
    }

    else
    {
      char v20 = *(void **)(a1 + 32);
    }

    if (v20)
    {
      os_log_type_t v21 = (void *)v20[52];
      v20[52] = 0LL;

      char v20 = *(void **)(a1 + 32);
    }

    goto LABEL_27;
  }

  v13.receiver = self;
  v13.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_unique_connection;
  -[NWConcrete_nw_unique_connection dealloc](&v13, sel_dealloc, v11, v12);
}

LABEL_11:
    if (!v13) {
      goto LABEL_40;
    }
LABEL_12:
    free(v13);
    goto LABEL_40;
  }

  if (!v44)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = (os_log_s *)(id)gLogObj;
    os_log_type_t v31 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v47 = "nwsc_request_start_path_watcher";
      __int16 v48 = 2114;
      os_log_type_t v49 = v7;
      BOOL v50 = 2114;
      size_t v51 = v8;
      _os_log_impl( &dword_181A5C000,  v14,  v31,  "%{public}s %{public}@ tried to start path watcher on incoming request %{public}@, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_10;
  }

  id v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v14 = (os_log_s *)(id)gLogObj;
  id v17 = type;
  uint64_t v18 = os_log_type_enabled(v14, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v47 = "nwsc_request_start_path_watcher";
      __int16 v48 = 2114;
      os_log_type_t v49 = v7;
      BOOL v50 = 2114;
      size_t v51 = v8;
      _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s %{public}@ tried to start path watcher on incoming request %{public}@, no backtrace",  buf,  0x20u);
    }

    goto LABEL_10;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446978;
    os_log_type_t v47 = "nwsc_request_start_path_watcher";
    __int16 v48 = 2114;
    os_log_type_t v49 = v7;
    BOOL v50 = 2114;
    size_t v51 = v8;
    os_log_type_t v52 = 2082;
    BOOL v53 = v16;
    _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s %{public}@ tried to start path watcher on incoming request %{public}@, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v16);
  if (v13) {
    goto LABEL_12;
  }
LABEL_40:
}

  while (a2)
  {
    id v15 = *(unsigned __int8 *)a1;
    a1 = (int *)((char *)a1 + 1);
    HIDWORD(v16) = v12 + 374761393 * v15;
    LODWORD(v16) = HIDWORD(v16);
    uint64_t v12 = -1640531535 * (v16 >> 21);
    --a2;
  }

    uint64_t v12 = *(void **)(a1 + 16);
    if (v12)
    {
LABEL_11:
      uint64_t v13 = v12;
      id v15 = objc_getProperty((id)a1, v14, 24LL, 1);
      if (v4)
      {
        id v16 = 31LL;
        if (!v4[31]) {
          id v16 = 30LL;
        }
        id v17 = v4[v16];
      }

      else
      {
        id v17 = 0LL;
      }

      v59[0] = MEMORY[0x1895F87A8];
      v59[1] = 3221225472LL;
      v59[2] = __65__NWURLSessionResponseConsumerDownload_deliverCompletionForTask___block_invoke;
      v59[3] = &unk_189BC0948;
      os_log_type_t v63 = v13;
      os_log_type_t v60 = v5;
      os_log_type_t v61 = v15;
      BOOL v62 = v6;
      nw_endpoint_t v64 = v11;
      v65 = v8;
      uint64_t v18 = v15;
      BOOL v19 = v13;
      if (v4)
      {
        char v20 = (id *)v4[51];
        char v22 = v20;
        if (v20) {
          os_log_type_t v23 = [v20[3] _callCompletionHandlerInline];
        }
        else {
          os_log_type_t v23 = 0;
        }
        Property = objc_getProperty(v4, v21, 440LL, 1);
      }

      else
      {
        os_log_type_t v23 = 0;
        char v22 = 0LL;
        Property = 0LL;
      }

      os_log_type_t v25 = Property;
      -[NWURLSessionDelegateWrapper runCompletionHandler:noAsync:task:metrics:cachedResponse:cache:]( (uint64_t)v17,  v59,  v23,  v4,  v25,  0LL,  0LL);

      goto LABEL_46;
    }

    free(v7);
    goto LABEL_11;
  }

  __nwlog_obj();
  id v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)uint64_t v32 = 136446210;
  *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
  id v16 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v16, buf, &type))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v18 = buf[0];
      if (os_log_type_enabled(v17, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v32 = 136446210;
        *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null config", v32, 0xCu);
      }
    }

    else if (type)
    {
      BOOL v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v20 = buf[0];
      os_log_type_t v21 = os_log_type_enabled(v17, (os_log_type_t)buf[0]);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)uint64_t v32 = 136446466;
          *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
          *(_WORD *)&v32[12] = 2082;
          *(void *)&v32[14] = v19;
          _os_log_impl( &dword_181A5C000,  v17,  v20,  "%{public}s called with null config, dumping backtrace:%{public}s",  v32,  0x16u);
        }

        free(v19);
        goto LABEL_44;
      }

      if (v21)
      {
        *(_DWORD *)uint64_t v32 = 136446210;
        *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
        _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null config, no backtrace", v32, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v22 = buf[0];
      if (os_log_type_enabled(v17, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v32 = 136446210;
        *(void *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
        _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s called with null config, backtrace limit exceeded",  v32,  0xCu);
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

  return v5;
}

            uint64_t v9 = *(void *)(v6 + 24);
            if (v9)
            {
              id v10 = *(void (**)(uint64_t, uint64_t))(v9 + 24);
              if (v10)
              {
                v10(v6, a1 + 64);
LABEL_13:
                char v11 = *(void *)(v6 + 24);
                if (v11)
                {
                  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 224);
                  if (v12)
                  {
                    uint64_t v13 = (unsigned __int8 *)v12(v6, 255LL, a1 + 64);
                    v60[0] = MEMORY[0x1895F87A8];
                    v60[1] = 0x40000000LL;
                    v60[2] = ___ZL44nw_protocol_http3_stream_start_datagram_flowP24nw_protocol_http3_stream_block_invoke;
                    v60[3] = &__block_descriptor_tmp_90_60760;
                    v60[4] = a1;
                    nw_array_apply(v13, (uint64_t)v60);
                    if (v13) {
                      os_release(v13);
                    }
                  }
                }

    free(v14);
    goto LABEL_11;
  }

  v9->_ipProtocol = ip_protocol;
  objc_storeStrong((id *)&v9->super._parameters, a3);
  objc_storeStrong((id *)&v9->super._delegate, a4);
  v9->_sockfd_from_client = -1;
  uint64_t v12 = v9;
LABEL_12:

  return v12;
}

    id v7 = 0;
  }

  return v6;
}

      id v17 = (void *)*((void *)v5 + 3);
      *((void *)v5 + 3) = 0LL;

      uint64_t v18 = (void *)*((void *)v5 + 4);
      *((void *)v5 + 4) = 0LL;

      block[0] = v12;
      block[1] = 3221225472LL;
      block[2] = __nw_interface_status_monitor_set_packet_event_handler_block_invoke_4;
      block[3] = &unk_189BC87B8;
      os_log_type_t v45 = v8;
      uint64_t v46 = source;
      dispatch_async(v6, block);

      goto LABEL_11;
    }

    __nwlog_obj();
    *(_DWORD *)BOOL v62 = 136446210;
    os_log_type_t v63 = "nw_channel_create_event_source";
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v57 = OS_LOG_TYPE_ERROR;
    uint64_t v56 = 0;
    if (__nwlog_fault(v38, &v57, &v56))
    {
      if (v57 == OS_LOG_TYPE_FAULT)
      {
        id v39 = (os_log_s *)__nwlog_obj();
        BOOL v40 = v57;
        if (os_log_type_enabled(v39, v57))
        {
          *(_DWORD *)BOOL v62 = 136446210;
          os_log_type_t v63 = "nw_channel_create_event_source";
          id v41 = "%{public}s called with null channel";
LABEL_79:
          _os_log_impl(&dword_181A5C000, v39, v40, v41, v62, 0xCu);
        }
      }

      else if (v56)
      {
        uint64_t v42 = (char *)__nw_create_backtrace_string();
        id v39 = (os_log_s *)__nwlog_obj();
        BOOL v40 = v57;
        BOOL v43 = os_log_type_enabled(v39, v57);
        if (v42)
        {
          if (v43)
          {
            *(_DWORD *)BOOL v62 = 136446466;
            os_log_type_t v63 = "nw_channel_create_event_source";
            nw_endpoint_t v64 = 2082;
            v65 = v42;
            _os_log_impl( &dword_181A5C000,  v39,  v40,  "%{public}s called with null channel, dumping backtrace:%{public}s",  v62,  0x16u);
          }

          free(v42);
          goto LABEL_80;
        }

        if (v43)
        {
          *(_DWORD *)BOOL v62 = 136446210;
          os_log_type_t v63 = "nw_channel_create_event_source";
          id v41 = "%{public}s called with null channel, no backtrace";
          goto LABEL_79;
        }
      }

      else
      {
        id v39 = (os_log_s *)__nwlog_obj();
        BOOL v40 = v57;
        if (os_log_type_enabled(v39, v57))
        {
          *(_DWORD *)BOOL v62 = 136446210;
          os_log_type_t v63 = "nw_channel_create_event_source";
          id v41 = "%{public}s called with null channel, backtrace limit exceeded";
          goto LABEL_79;
        }
      }
    }

        if ((*(_BYTE *)(v11 + 136) & 8) != 0)
        {
LABEL_11:
          *(_WORD *)(v7 + 6) = 0;
          LOWORD(__buf) = 0;
          uint64_t v12 = (BYTE4(a2) ^ BYTE6(a2) ^ BYTE2(a2) ^ a2);
          do
            arc4random_buf(&__buf, 2uLL);
          while (v12 == (unsigned __int16)__buf);
          uint64_t v13 = (unsigned __int16)__buf ^ v12;
          *(_WORD *)(v7 + 4) = v13;
          char v11 = *(void *)(a1 + 32);
LABEL_77:
          *(_WORD *)(v7 + 10) = 0;
          if ((*(_BYTE *)(v11 + 136) & 0x20) != 0)
          {
            if ((*(_BYTE *)(v11 + 136) & 0x40) != 0)
            {
              *(_WORD *)(v7 + 10) = nw_ipv4_checksum((unsigned __int16 *)v7);
              os_log_type_t v45 = *(void *)(v11 + 48);
              if (v45) {
                *(int64x2_t *)(v45 + 312) = vaddq_s64(*(int64x2_t *)(v45 + 312), (int64x2_t)xmmword_18272D830);
              }
              *(_BYTE *)(v11 + 136) &= ~0x40u;
            }

            else
            {
              *(_WORD *)(v7 + 10) = -16657;
              *(_BYTE *)(v11 + 136) |= 0x40u;
            }

            goto LABEL_87;
          }

          if ((*(_BYTE *)(v11 + 136) & 0x10) == 0)
          {
            if ((v7 & 3) != 0)
            {
              v38.i16[0] = *(_WORD *)(v7 + 2);
              v38.i16[1] = *(_WORD *)v7;
              v38.i32[1] = *(_DWORD *)(v7 + 6);
              id v39 = vaddvq_s32((int32x4_t)vaddl_u16(v38, *(uint16x4_t *)(v7 + 12)));
              LODWORD(v40) = ((v39 + v13) >> 16)
            }

            else
            {
              id v41 = vaddlvq_u32(*(uint32x4_t *)v7);
              uint64_t v42 = ((v41 + *(unsigned int *)(v7 + 16)) >> 32) + (v41 + *(_DWORD *)(v7 + 16));
              BOOL v40 = (((v42 >> 16) + (unsigned __int16)v42) >> 16) + (unsigned __int16)(WORD1(v42) + v42);
              LOWORD(v40) = WORD1(v40) + v40;
            }

            *(_WORD *)(v7 + 10) = ~(_WORD)v40;
            BOOL v43 = *(void *)(v11 + 48);
            if (v43) {
              *(int64x2_t *)(v43 + 312) = vaddq_s64(*(int64x2_t *)(v43 + 312), (int64x2_t)xmmword_18272D830);
            }
LABEL_87:
            ++**(void **)(a1 + 32);
            return 1LL;
          }

          if (a2)
          {
            if ((*(_WORD *)(a2 + 204) & 0x100) != 0) {
              *(_BYTE *)(a2 + 203) |= 4u;
            }
            goto LABEL_87;
          }

          __nwlog_obj();
          __buf = 136446210;
          uint64_t v56 = "__nw_frame_add_internet_csum_flags";
          uint64_t v46 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          BOOL v53 = 0;
          if (__nwlog_fault(v46, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v47 = (os_log_s *)__nwlog_obj();
              __int16 v48 = type;
              if (!os_log_type_enabled(v47, type)) {
                goto LABEL_108;
              }
              __buf = 136446210;
              uint64_t v56 = "__nw_frame_add_internet_csum_flags";
              os_log_type_t v49 = "%{public}s called with null frame";
              goto LABEL_107;
            }

            if (!v53)
            {
              os_log_type_t v47 = (os_log_s *)__nwlog_obj();
              __int16 v48 = type;
              if (!os_log_type_enabled(v47, type)) {
                goto LABEL_108;
              }
              __buf = 136446210;
              uint64_t v56 = "__nw_frame_add_internet_csum_flags";
              os_log_type_t v49 = "%{public}s called with null frame, backtrace limit exceeded";
              goto LABEL_107;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            os_log_type_t v47 = (os_log_s *)__nwlog_obj();
            __int16 v48 = type;
            size_t v51 = os_log_type_enabled(v47, type);
            if (backtrace_string)
            {
              if (v51)
              {
                __buf = 136446466;
                uint64_t v56 = "__nw_frame_add_internet_csum_flags";
                os_log_type_t v57 = 2082;
                BOOL v58 = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s called with null frame, dumping backtrace:%{public}s",  (uint8_t *)&__buf,  0x16u);
              }

              free(backtrace_string);
              goto LABEL_108;
            }

            if (v51)
            {
              __buf = 136446210;
              uint64_t v56 = "__nw_frame_add_internet_csum_flags";
              os_log_type_t v49 = "%{public}s called with null frame, no backtrace";
LABEL_107:
              _os_log_impl(&dword_181A5C000, v47, v48, v49, (uint8_t *)&__buf, 0xCu);
            }
          }

  return 0LL;
}

void sub_181A95ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_association_key_hash(void *a1)
{
  return nw_path_parameters_get_hash(a1);
}

uint64_t nw_path_parameters_get_hash(void *a1)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, v1 + 8, 0x40u);
    CC_SHA256_Update(&c, v1 + 72, 0x1Eu);
    CC_SHA256_Update(&c, v1 + 102, 9u);
    if (*((void *)v1 + 17)) {
      CC_SHA256_Update(&c, v1 + 136, 8u);
    }
    nw_parameters_t v2 = (const void *)*((void *)v1 + 14);
    if (v2)
    {
      CC_LONG v3 = strlen(*((const char **)v1 + 14));
      CC_SHA256_Update(&c, v2, v3);
    }

    id v4 = (const void *)*((void *)v1 + 15);
    if (v4)
    {
      CC_LONG v5 = strlen(*((const char **)v1 + 15));
      CC_SHA256_Update(&c, v4, v5);
    }

    uint64_t v6 = (const void *)*((void *)v1 + 16);
    if (v6)
    {
      CC_LONG v7 = strlen(*((const char **)v1 + 16));
      CC_SHA256_Update(&c, v6, v7);
    }

    CC_SHA256_Final(md, &c);
    int8x16_t v32 = *(int8x16_t *)md;
    int8x16_t v33 = v36;
    uint64_t v8 = [*((id *)v1 + 20) getHash];
    uint64_t shallow_hash = nw_interface_get_shallow_hash(*((void **)v1 + 21));
    uint64_t hash = nw_protocol_options_get_hash(*((void **)v1 + 18));
    uint64_t v11 = nw_protocol_options_get_hash(*((void **)v1 + 19));
    int8x16_t v12 = veorq_s8(v32, v33);
    uint64_t v13 = v8 ^ *(void *)&veor_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)) ^ shallow_hash ^ hash ^ v11;
    uint64_t v14 = *((void *)v1 + 22);
    if (v14)
    {
      if (*(void *)v14)
      {
        v13 ^= xpc_hash(*(xpc_object_t *)v14);
        uint64_t v14 = *((void *)v1 + 22);
      }

      id v15 = *(void **)(v14 + 8);
      if (v15)
      {
        v13 ^= xpc_hash(v15);
        uint64_t v14 = *((void *)v1 + 22);
      }

      id v16 = *(void **)(v14 + 16);
      if (v16)
      {
        v13 ^= xpc_hash(v16);
        uint64_t v14 = *((void *)v1 + 22);
      }

      id v17 = *(void **)(v14 + 24);
      if (v17)
      {
        v13 ^= xpc_hash(v17);
        uint64_t v14 = *((void *)v1 + 22);
      }

      uint64_t v18 = *(void **)(v14 + 32);
      if (v18)
      {
        v13 ^= xpc_hash(v18);
        uint64_t v14 = *((void *)v1 + 22);
      }

      BOOL v19 = *(void **)(v14 + 40);
      if (v19)
      {
        v13 ^= xpc_hash(v19);
        uint64_t v14 = *((void *)v1 + 22);
      }

      char v20 = *(void **)(v14 + 48);
      if (v20)
      {
        v13 ^= xpc_hash(v20);
        uint64_t v14 = *((void *)v1 + 22);
      }

      os_log_type_t v21 = *(void **)(v14 + 56);
      if (v21)
      {
        v13 ^= xpc_hash(v21);
        uint64_t v14 = *((void *)v1 + 22);
      }

      char v22 = *(void **)(v14 + 64);
      if (v22)
      {
        v13 ^= xpc_hash(v22);
        uint64_t v14 = *((void *)v1 + 22);
      }

      os_log_type_t v23 = *(void **)(v14 + 72);
      if (v23)
      {
        v13 ^= xpc_hash(v23);
        uint64_t v14 = *((void *)v1 + 22);
      }

      BOOL v24 = *(void **)(v14 + 80);
      if (v24)
      {
        v13 ^= xpc_hash(v24);
        uint64_t v14 = *((void *)v1 + 22);
      }

      os_log_type_t v25 = *(void **)(v14 + 88);
      if (v25)
      {
        v13 ^= xpc_hash(v25);
        uint64_t v14 = *((void *)v1 + 22);
      }

      char v26 = *(void **)(v14 + 96);
      if (v26)
      {
        v13 ^= xpc_hash(v26);
        uint64_t v14 = *((void *)v1 + 22);
      }

      id v27 = *(void **)(v14 + 104);
      if (v27)
      {
        v13 ^= xpc_hash(v27);
        uint64_t v14 = *((void *)v1 + 22);
      }

      uint64_t v28 = *(void **)(v14 + 112);
      if (v28)
      {
        v13 ^= xpc_hash(v28);
        uint64_t v14 = *((void *)v1 + 22);
      }

      uint64_t v29 = *(void **)(v14 + 120);
      if (v29)
      {
        v13 ^= xpc_hash(v29);
        uint64_t v14 = *((void *)v1 + 22);
      }

      __int16 v30 = *(void **)(v14 + 136);
      if (v30)
      {
        v13 ^= xpc_hash(v30);
        uint64_t v14 = *((void *)v1 + 22);
      }

      v13 ^= nw_protocol_options_get_hash(*(void **)(v14 + 128));
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  return v13;
}

void sub_181A961FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_interface_get_shallow_hash(void *a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    memset(&v6, 0, sizeof(v6));
    CC_SHA256_Init(&v6);
    CC_SHA256_Update(&v6, v1 + 96, 4u);
    CC_SHA256_Update(&v6, v1 + 100, 4u);
    CC_SHA256_Update(&v6, v1 + 8, 4u);
    CC_LONG v2 = strlen(v1 + 104);
    CC_SHA256_Update(&v6, v1 + 104, v2);
    CC_SHA256_Final(md, &v6);
    int8x16_t v3 = veorq_s8(*(int8x16_t *)md, v8);
    int8x8_t v4 = veor_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  }

  else
  {
    int8x8_t v4 = 0LL;
  }

  return (uint64_t)v4;
}

void sub_181A9630C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_options_get_hash(void *a1)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    memset(&v7, 0, sizeof(v7));
    CC_SHA256_Init(&v7);
    uint64_t v2 = v1[1];
    if (v2) {
      CC_SHA256_Update(&v7, (const void *)(v2 + 8), 0x28u);
    }
    CC_SHA256_Final(md, &v7);
    int8x16_t v3 = veorq_s8(*(int8x16_t *)md, v9);
    int8x8_t v4 = veor_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
    CC_LONG v5 = (void *)v1[5];
    if (v5) {
      *(void *)&v4 ^= xpc_hash(v5);
    }
  }

  else
  {
    int8x8_t v4 = 0LL;
  }

  return (uint64_t)v4;
}

void sub_181A963F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_association_get_key(void *a1, unsigned int *a2)
{
  id v2 = nw_association_copy_path_parameters(a1);

  return v2;
}

id nw_association_copy_path_parameters(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[2];
    goto LABEL_3;
  }

  __nwlog_obj();
  CC_LONG v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_association_copy_path_parameters";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CC_SHA256_CTX v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_association_copy_path_parameters";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null association", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CC_SHA256_CTX v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_association_copy_path_parameters";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_association_copy_path_parameters";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CC_SHA256_CTX v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_association_copy_path_parameters";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_association_register(void *a1, void *a2, void *a3, int a4, void *a5)
{
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_endpoint(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  evaluator_for_endpoint_no_evaluate = nw_path_create_evaluator_for_endpoint_no_evaluate(a1, a2);
  id v3 = evaluator_for_endpoint_no_evaluate;
  if (evaluator_for_endpoint_no_evaluate
    && (nw_path_evaluator_evaluate(evaluator_for_endpoint_no_evaluate, 0LL) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v16 = "nw_path_create_evaluator_for_endpoint";
    CC_LONG v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        CC_SHA256_CTX v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          id v16 = "nw_path_create_evaluator_for_endpoint";
          _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
        }
      }

      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        CC_SHA256_CTX v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            id v16 = "nw_path_create_evaluator_for_endpoint";
            __int16 v17 = 2082;
            uint64_t v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v10,  "%{public}s nw_path_evaluator_evaluate failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v5) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          id v16 = "nw_path_create_evaluator_for_endpoint";
          _os_log_impl( &dword_181A5C000,  v6,  v10,  "%{public}s nw_path_evaluator_evaluate failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        CC_SHA256_CTX v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          id v16 = "nw_path_create_evaluator_for_endpoint";
          _os_log_impl( &dword_181A5C000,  v6,  v12,  "%{public}s nw_path_evaluator_evaluate failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v5)
    {
LABEL_10:

      return 0LL;
    }

LABEL_9:
    free(v5);
    goto LABEL_10;
  }

  return v3;
}

    free(v5);
    goto LABEL_10;
  }

  id v3 = v1[92];
LABEL_11:

  return v3;
}

    free(v5);
    goto LABEL_10;
  }

  id v3 = v1[93];
LABEL_11:

  return v3;
}

    free(v5);
    goto LABEL_10;
  }

  if (__n == -42LL)
  {
    __nwlog_obj();
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    os_log_type_t v23 = 136446210;
    BOOL v24 = "strict_malloc";
    uint64_t v19 = (void *)_os_log_send_and_compose_impl();

    free(v19);
  }

  os_log_type_t v7 = malloc(v6 + 42);
  if (v7)
  {
LABEL_5:
    os_log_type_t v8 = nw_protocol_options_copy_definition((nw_protocol_options_t)v3);
    identifier = nw_protocol_definition_get_identifier(v8);
    os_log_type_t v10 = *((void *)identifier + 4);
    BOOL v11 = *((_OWORD *)identifier + 1);
    os_log_s *v7 = *(_OWORD *)identifier;
    v7[1] = v11;
    *((void *)v7 + 4) = v10;
    os_log_type_t v12 = __n;
    *((_WORD *)v7 + 20) = __n;
    memcpy((char *)v7 + 42, v5, v12);
    char v13 = xpc_data_create(v7, v6 + 42);
    uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    if (!v14)
    {
      id v15 = xpc_array_create(0LL, 0LL);
      id v16 = *(void *)(*(void *)(a1 + 32) + 8LL);
      __int16 v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    }

    xpc_array_append_value(v14, v13);
    free(v7);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v6 + 47;

    goto LABEL_9;
  }

  __nwlog_obj();
  char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  os_log_type_t v23 = 136446466;
  BOOL v24 = "strict_malloc";
  os_log_type_t v25 = 2048;
  char v26 = v6 + 42;
  os_log_type_t v21 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v21))
  {
    free(v21);
    goto LABEL_5;
  }

    int8x16_t v9 = 0LL;
  }

    v9(a2, a1[33]);
    goto LABEL_10;
  }

  id v15 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  uint64_t v18 = 136446466;
  uint64_t v19 = "nw_segment_freelist_remove";
  char v20 = 2082;
  os_log_type_t v21 = "VERIFY result == 0 failed";
  id v16 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v16);
  if (!result)
  {
    free(v16);
    int8x16_t v9 = (void (*)(uint64_t *, void))a1[35];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

LABEL_46:
  return v7;
}

  if (!self->shared_protocol.read_requests) {
    goto LABEL_17;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  char v35 = "-[NWConcrete_nw_endpoint_flow dealloc]";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int8x16_t v32 = 0;
  if (!__nwlog_fault(v8, &type, &v32))
  {
LABEL_15:
    if (!v8) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int8x16_t v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      char v35 = "-[NWConcrete_nw_endpoint_flow dealloc]";
      _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s read requests not drained", buf, 0xCu);
    }

  if (!nw_parameters_get_logging_disabled((uint64_t)self->parameters))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v7 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      top_id = self->top_id;
      logging_description = nw_endpoint_get_logging_description(self->endpoint);
      parameters = self->parameters;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)os_log_type_t v21 = top_id;
      *(_WORD *)&v21[4] = 2082;
      *(void *)&v21[6] = logging_description;
      *(_WORD *)&v21[14] = 2114;
      *(void *)&v21[16] = parameters;
      _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_INFO, "[C%u %{public}s %{public}@] dealloc", buf, 0x1Cu);
    }
  }

  timestamps = self->timestamps;
  if (timestamps)
  {
    free(timestamps);
    self->timestamps = 0LL;
  }

  stats_report = self->stats_report;
  if (stats_report)
  {
    free(stats_report);
    self->stats_report = 0LL;
  }

  nw_connection_cancel_update_handler(self);
  v17.receiver = self;
  v17.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_connection;
  -[NWConcrete_nw_connection dealloc](&v17, sel_dealloc);
}

    *(_OWORD *)os_log_type_t v8 = *(_OWORD *)v9;
    return a1;
  }

  if (!v10)
  {
    sub_181BD73AC((uint64_t)a1 + v7);
    goto LABEL_9;
  }

  *os_log_type_t v8 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[1] = *((void *)v9 + 1);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

    id v4 = 0;
    goto LABEL_10;
  }

  if ((_DWORD)result == 1001)
  {
    id v4 = 1;
    goto LABEL_10;
  }

  if ((_DWORD)result != 1002) {
    goto LABEL_9;
  }
  id v4 = 2;
LABEL_10:
  *a1 = v4;
  return result;
}

  id v16 = a3[12];
  __int16 v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v10((void *)(a1 + v16), 1LL, v9);
  char v20 = v10(v18, 1LL, v9);
  if (v19)
  {
    if (!v20)
    {
      os_log_type_t v21 = (char *)&loc_181C151AC + 4 * byte_18265F55E[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    goto LABEL_14;
  }

  if (v20)
  {
    sub_181BC920C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
LABEL_14:
    char v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_17;
  }

  if (a1 != a2)
  {
    sub_181BC920C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    os_log_type_t v23 = (char *)&loc_181C15264 + 4 * byte_18265F563[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

        __break(1u);
        return result;
      }
    }

    __break(1u);
    goto LABEL_9;
  }

  return result;
}

  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

    CC_LONG v5 = 0;
    goto LABEL_12;
  }

  if ((_DWORD)value == 1001)
  {
    CC_LONG v5 = 1;
    goto LABEL_12;
  }

  if ((_DWORD)value != 1002) {
    goto LABEL_9;
  }
  CC_LONG v5 = 2;
LABEL_12:
  CC_SHA256_CTX v6 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    CC_SHA256_CTX v6 = sub_181BC59E8(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
    *a3 = v6;
  }

  int8x16_t v9 = *((void *)v6 + 2);
  os_log_type_t v8 = *((void *)v6 + 3);
  if (v9 >= v8 >> 1) {
    CC_SHA256_CTX v6 = sub_181BC59E8((char *)(v8 > 1), v9 + 1, 1, v6);
  }
  *((void *)v6 + 2) = v9 + 1;
  v6[v9 + 32] = v5;
  *a3 = v6;
  return 1LL;
}

  *(void *)uint64_t v14 = MEMORY[0x1895F87A8];
  *(void *)&v14[8] = 0x40000000LL;
  *(void *)&v14[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke;
  id v15 = (const char *)&__block_descriptor_tmp_150;
  id v16 = v7 + 432;
  __int16 v17 = 0;
  os_log_type_t v8 = *(void *)(v7 + 432);
  do
  {
    if (!v8) {
      break;
    }
    int8x16_t v9 = *(void *)(v8 + 32);
    os_log_type_t v10 = (*(uint64_t (**)(_BYTE *))&v14[16])(v14);
    os_log_type_t v8 = v9;
  }

  while ((v10 & 1) != 0);
}

          ++v7;
          BOOL v11 = &a4[4 * v7];
          CC_SHA256_CTX v6 = (_BYTE *)v11[1];
          if (!v6) {
            return result;
          }
        }
      }

      do
      {
        os_log_type_t v23 = a4[4 * v7 + 2];
        if (v5 >= v23)
        {
          if (*v6 == 60)
          {
            if ((v8 & 1) != 0)
            {
              if (!v10 || v9 < v23) {
                goto LABEL_85;
              }
            }

            else
            {
              if (!v5) {
                goto LABEL_84;
              }
              id v27 = 0LL;
              while (1)
              {
                os_log_type_t v10 = a2 + v27;
                if (v5 == ++v27) {
                  goto LABEL_84;
                }
              }

              if (*(_BYTE *)(a2 + v27) != 60)
              {
LABEL_84:
                os_log_type_t v10 = 0LL;
LABEL_85:
                os_log_type_t v8 = 1;
                goto LABEL_58;
              }

              int8x16_t v9 = v5 - v27;
              if (v5 - v27 < v23) {
                goto LABEL_85;
              }
            }

            BOOL v24 = 0LL;
            if (v23)
            {
              while (1)
              {
                os_log_type_t v25 = *(unsigned __int8 *)(v10 + v24);
                char v26 = v6[v24];
                if (v25 != v26)
                {
                  os_log_type_t v8 = 1;
                  if (v23 - 1 != v24 || v26 != 32 || v25 != 62 && v25 != 32) {
                    break;
                  }
                }

                if (v23 == ++v24) {
                  return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
                }
              }
            }

            else
            {
              os_log_type_t v8 = 1;
            }
          }

          else
          {
            BOOL v24 = 0LL;
            if (v23)
            {
              while (*(unsigned __int8 *)(a2 + v24) == v6[v24])
              {
                if (v23 == ++v24) {
                  return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
                }
              }
            }
          }

          if (v24 == v23) {
            return std::string::__assign_external(result, (const std::string::value_type *)a4[4 * v7 + 3]);
          }
        }

  os_log_type_t v7 = handle[9];
  if (v7)
  {
    if (gLogDatapath)
    {
      v90 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
      {
        __int16 v91 = a1->identifier;
        if (!v91) {
          __int16 v91 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446722;
        v129 = "nw_protocol_plugin_metadata_disconnect";
        v130 = 2048;
        v131 = a1;
        v132 = 2080;
        v133 = (nw_protocol *)v91;
        _os_log_impl(&dword_181A5C000, v90, OS_LOG_TYPE_DEBUG, "%{public}s protocol %p:%s disconnect", buf, 0x20u);
      }
    }

    os_log_type_t v8 = *(_BYTE *)(v7 + 142);
    if ((v8 & 1) != 0) {
      *(_BYTE *)(v7 + 140) = 3;
    }
    *(_BYTE *)(v7 + 142) = v8 & 0xFE;
    if ((v8 & 8) != 0)
    {
      if (gLogDatapath)
      {
        v105 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
        {
          v106 = a1->identifier;
          if (!v106) {
            v106 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446722;
          v129 = "nw_protocol_plugin_metadata_disconnect";
          v130 = 2048;
          v131 = a1;
          v132 = 2080;
          v133 = (nw_protocol *)v106;
          _os_log_impl( &dword_181A5C000,  v105,  OS_LOG_TYPE_DEBUG,  "%{public}s protocol %p:%s sending disconnected immediately as it had previously received disconnected",  buf,  0x20u);
        }
      }

      *(_BYTE *)(v7 + 142) &= ~8u;
      output_handler = (uint64_t)a1->output_handler;
      os_log_type_t v10 = a1->handle;
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        BOOL v11 = a1[1].callbacks;
        if (v11) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v11->add_input_handler + 1);
        }
      }

      if (output_handler)
      {
        os_log_type_t v12 = *(void **)(output_handler + 40);
        if (v12 == &nw_protocol_ref_counted_handle)
        {
          char v13 = *(void *)(output_handler + 88);
          if (v13) {
            *(void *)(output_handler + 88) = v13 + 1;
          }
        }

        uint64_t v14 = a1->callbacks;
        if (v14)
        {
          id v15 = (void (*)(nw_protocol *, uint64_t))v14->disconnected;
          if (v15)
          {
            v15(a1, output_handler);
LABEL_25:
            if (v12 != &nw_protocol_ref_counted_handle
              || *(_UNKNOWN **)(output_handler + 40) != &nw_protocol_ref_counted_handle
              || (v67 = *(void *)(output_handler + 88)) == 0
              || (char v68 = v67 - 1, (*(void *)(output_handler + 88) = v68) != 0LL))
            {
LABEL_27:
              if (v10 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
              {
                os_log_type_t v63 = a1[1].callbacks;
                if (v63)
                {
                  nw_endpoint_t v64 = (nw_protocol_callbacks *)((char *)v63 - 1);
                  a1[1].callbacks = v64;
                  if (!v64)
                  {
                    v65 = *(void (***)(void))a1[1].flow_id;
                    if (v65)
                    {
                      *(void *)a1[1].flow_id = 0LL;
                      v65[2](v65);
                      _Block_release(v65);
                    }

                    if ((a1[1].flow_id[8] & 1) != 0)
                    {
                      id v66 = *(const void **)a1[1].flow_id;
                      if (v66) {
                        _Block_release(v66);
                      }
                    }

                    free(a1);
                  }
                }
              }

              goto LABEL_29;
            }

            id v69 = *(void (***)(void))(output_handler + 64);
            if (v69)
            {
              *(void *)(output_handler + 64) = 0LL;
              v69[2](v69);
              _Block_release(v69);
            }

            if ((*(_BYTE *)(output_handler + 72) & 1) != 0)
            {
              os_log_type_t v70 = *(const void **)(output_handler + 64);
              if (v70) {
                _Block_release(v70);
              }
            }

  _Block_object_dispose(&v48, 8);
  return v8;
}

      opcode = v10;
      os_log_type_t v10 = -1;
      goto LABEL_10;
    }

    if (v12 == opcode)
    {
      os_log_type_t v10 = 0;
      if (!a5)
      {
LABEL_11:
        *(_DWORD *)(v11 + 236) = 2;
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 176LL) = 0LL;
        v42[0] = 0LL;
        v42[1] = v42;
        v42[2] = 0x2020000000LL;
        BOOL v43 = a4;
        uint64_t v14 = *(void **)(a1 + 32);
        char v13 = *(void *)(a1 + 40);
        id v15 = MEMORY[0x1895F87A8];
        id v16 = *(void *)(v13 + 8);
        v35[0] = MEMORY[0x1895F87A8];
        v35[1] = 3221225472LL;
        v35[2] = __nw_protocol_copy_ws_definition_block_invoke_27;
        v35[3] = &unk_189BB65E0;
        uint64_t v38 = v13;
        BOOL v40 = v10;
        int8x16_t v36 = v8;
        id v39 = v42;
        id v41 = a5;
        uint64_t v37 = *(id *)(a1 + 32);
        __int16 v17 = v14;
        uint64_t v18 = v36;
        uint64_t v19 = v35;
        char v20 = v19;
        if (v17)
        {
          if (a4)
          {
            *(void *)parse = v15;
            *(void *)&parse[8] = 3221225472LL;
            *(void *)&parse[16] = ___ZL18nw_ws_parse_outputPU23objcproto12OS_nw_framer8NSObjectPU34objcproto23OS_nw_protocol_metadataS_P13nw_ws_state_t14nw_ws_opcode_tbPmPhU13block_pointerFmS8_mbbE_block_invoke;
            *(void *)&os_log_type_t v47 = &unk_189BB66A8;
            BOOL v50 = v16 + 48;
            *((void *)&v47 + 1) = v18;
            os_log_type_t v52 = v10;
            os_log_type_t v21 = v17;
            BOOL v53 = a5;
            __int16 v48 = v21;
            size_t v51 = &v43;
            os_log_type_t v49 = v20;
            nw_framer_parse_output((nw_framer_t)v21, a4, a4, 0LL, parse);
          }

          else
          {
            __nw_protocol_copy_ws_definition_block_invoke_27((uint64_t)v19, 0LL, 0LL, 0);
          }

    free(v18);
    goto LABEL_10;
  }

  objc_storeStrong((id *)&v11->endpoint, a3);
  objc_storeStrong((id *)&v12->parameters, a4);
  char v13 = (OS_nw_context *)nw_parameters_copy_context(v10);
  context = v12->context;
  v12->context = v13;

  objc_storeStrong((id *)&v12->parent_definition, a2);
  p_protocol = &v12->protocol;
  v12->protocol.identifier = a1;
  v12->protocol.callbacks = &v12->callbacks;
  v12->inbound_frames.tqh_first = 0LL;
  v12->inbound_frames.tqh_last = &v12->inbound_frames.tqh_first;
  v12->outbound_frames.tqh_first = 0LL;
  v12->outbound_frames.tqh_last = &v12->outbound_frames.tqh_first;
  v12->pending_input_frames.tqh_first = 0LL;
  v12->pending_input_frames.tqh_last = &v12->pending_input_frames.tqh_first;
  v12->received_input_frames.tqh_first = 0LL;
  v12->received_input_frames.tqh_last = &v12->received_input_frames.tqh_first;
  v12->received_output_frames.tqh_first = 0LL;
  v12->received_output_frames.tqh_last = &v12->received_output_frames.tqh_first;
  v12->callbacks.register_notification = nw_protocol_default_register_notification;
  v12->callbacks.unregister_notification = nw_protocol_default_unregister_notification;
  v12->callbacks.notify = nw_protocol_default_notify;
  v12->callbacks.updated_path = nw_protocol_default_updated_path;
  v12->callbacks.add_input_handler = nw_framer_protocol_add_input_handler;
  v12->callbacks.remove_input_handler = nw_framer_protocol_remove_input_handler;
  v12->callbacks.replace_input_handler = nw_framer_protocol_replace_input_handler;
  v12->callbacks.connect = nw_framer_protocol_connect;
  v12->callbacks.disconnect = nw_framer_protocol_disconnect;
  v12->callbacks.connected = nw_framer_protocol_connected;
  v12->callbacks.disconnected = nw_framer_protocol_disconnected;
  v12->callbacks.error = nw_protocol_default_error;
  v12->callbacks.remove_listen_handler = nw_protocol_default_remove_listen_handler;
  v12->callbacks.get_message_properties = nw_framer_protocol_get_message_properties;
  v12->callbacks.supports_external_data = nw_framer_protocol_supports_external_data;
  v12->callbacks.input_finished = nw_protocol_default_input_finished;
  v12->callbacks.get_output_interface = nw_protocol_default_get_output_interface;
  v12->callbacks.waiting_for_output = nw_framer_protocol_waiting_for_output;
  v12->callbacks.finalize_output_frames = nw_framer_protocol_finalize_output_frames;
  v12->callbacks.link_state = nw_framer_protocol_link_state;
  v12->callbacks.get_input_frames = nw_framer_protocol_get_input_frames;
  v12->callbacks.get_output_frames = nw_framer_protocol_get_output_frames;
  v12->callbacks.reset = nw_protocol_default_reset;
  v12->callbacks.input_flush = nw_framer_protocol_input_flush;
  v12->callbacks.input_available = nw_framer_protocol_input_available;
  v12->callbacks.output_available = nw_framer_protocol_output_available;
  v12->callbacks.output_finished = nw_framer_protocol_output_finished;
  v12->callbacks.get_output_local_endpoint = nw_protocol_default_get_output_local;
  v12->callbacks.copy_info = nw_framer_protocol_copy_info;
  v12->callbacks.add_listen_handler = nw_protocol_default_add_listen_handler;
  v12->callbacks.get_local_endpoint = nw_protocol_default_get_local;
  v12->callbacks.get_remote_endpoint = nw_framer_protocol_get_remote_endpoint;
  v12->callbacks.get_parameters = nw_framer_protocol_get_parameters;
  v12->callbacks.get_path = nw_protocol_default_get_path;
  id v16 = v12;
  v16->protocol.handle = v16;
LABEL_11:

  return p_protocol;
}

        return v7;
      }

      __nwlog_obj();
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      id v34 = "nw_framer_protocol_get_remote_endpoint";
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v31 = 0;
      if (__nwlog_fault(v14, &type, &v31))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v18 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            id v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }

    int8x16_t v9 = 1;
    goto LABEL_15;
  }

  os_log_type_t v7 = *(void *)(a1 + 40);
  if ((*(_BYTE *)(v7 + 346) & 0x40) == 0) {
    goto LABEL_9;
  }
  os_log_type_t v8 = *(_DWORD *)(v7 + 80) == 2;
LABEL_12:
  int8x16_t v9 = v8;
LABEL_15:
  if (!nw_parameters_get_sensitive_redacted(*(void **)(v7 + 16)))
  {
    char v13 = *(void *)(a1 + 40);
    if (v13)
    {
      if ((*(_BYTE *)(v13 + 346) & 0x20) != 0) {
        goto LABEL_66;
      }
      if (*(_BYTE *)(v13 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v14 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          id v15 = *(void *)(a1 + 40) + 256LL;
          id v16 = "";
          id v34 = "nw_resolver_process_service_result_block_invoke";
          int8x16_t v33 = 136447234;
          if (v9) {
            id v16 = " (ignoring)";
          }
          char v35 = 2082;
          *(void *)int8x16_t v36 = v15;
          *(_WORD *)&v36[8] = 1040;
          *(_DWORD *)&v36[10] = __dst;
          *(_WORD *)&v36[14] = 2098;
          *(void *)&v36[16] = &__dst;
          *(_WORD *)&v36[24] = 2082;
          *(void *)&v36[26] = v16;
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s] Address hint: %{public,network:sockaddr}.*P%{public}s",  (uint8_t *)&v33,  0x30u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v23 = *(_DWORD *)(*(void *)(a1 + 40) + 340LL);
          BOOL v24 = "";
          if (v9) {
            BOOL v24 = " (ignoring)";
          }
          int8x16_t v33 = 136447234;
          id v34 = "nw_resolver_process_service_result_block_invoke";
          char v35 = 1024;
          *(_DWORD *)int8x16_t v36 = v23;
          *(_WORD *)&void v36[4] = 1040;
          *(_DWORD *)&v36[6] = __dst;
          *(_WORD *)&v36[10] = 2098;
          *(void *)&v36[12] = &__dst;
          *(_WORD *)&v36[20] = 2082;
          *(void *)&v36[22] = v24;
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s [R%u] Address hint: %{public,network:sockaddr}.*P%{public}s",  (uint8_t *)&v33,  0x2Cu);
        }
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        __int16 v17 = "";
        id v34 = "nw_resolver_process_service_result_block_invoke";
        char v35 = 1040;
        int8x16_t v33 = 136446978;
        if (v9) {
          __int16 v17 = " (ignoring)";
        }
        *(_DWORD *)int8x16_t v36 = __dst;
        *(_WORD *)&void v36[4] = 2098;
        *(void *)&v36[6] = &__dst;
        *(_WORD *)&v36[14] = 2082;
        *(void *)&v36[16] = v17;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s Address hint: %{public,network:sockaddr}.*P%{public}s",  (uint8_t *)&v33,  0x26u);
      }
    }

    goto LABEL_65;
  }

  if (v6 != 30)
  {
    if (v6 != 2)
    {
      os_log_type_t v10 = "<NULL>";
      BOOL v11 = "";
      os_log_type_t v12 = *(void *)(a1 + 40);
      if (!v12) {
        goto LABEL_60;
      }
      goto LABEL_40;
    }

    if (v41)
    {
      os_log_type_t v10 = v37;
      __nwlog_salted_hash(&v41, 4LL, v37);
      BOOL v11 = "IPv4#";
      os_log_type_t v12 = *(void *)(a1 + 40);
      if (!v12) {
        goto LABEL_60;
      }
      goto LABEL_40;
    }

    os_log_type_t v10 = "INADDR_ANY";
LABEL_59:
    BOOL v11 = "";
    os_log_type_t v12 = *(void *)(a1 + 40);
    if (!v12) {
      goto LABEL_60;
    }
    goto LABEL_40;
  }

  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v42[0], v42[0]))) & 1) == 0)
  {
    os_log_type_t v10 = "IN6ADDR_ANY";
    goto LABEL_59;
  }

  os_log_type_t v10 = v37;
  __nwlog_salted_hash(v42, 16LL, v37);
  BOOL v11 = "IPv6#";
  os_log_type_t v12 = *(void *)(a1 + 40);
  if (!v12)
  {
LABEL_60:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v27 = " (ignoring)";
      id v34 = "nw_resolver_process_service_result_block_invoke";
      int8x16_t v33 = 136446978;
      if (!v9) {
        id v27 = "";
      }
      char v35 = 2080;
      *(void *)int8x16_t v36 = v11;
      *(_WORD *)&v36[8] = 2080;
      *(void *)&v36[10] = v10;
      *(_WORD *)&v36[18] = 2082;
      *(void *)&v36[20] = v27;
      char v20 = "%{public}s Address hint: %s%s%{public}s";
      os_log_type_t v21 = v14;
      char v22 = 42;
LABEL_64:
      _os_log_impl(&dword_181A5C000, v21, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v33, v22);
      goto LABEL_65;
    }

    goto LABEL_65;
  }

  return 1LL;
}

  return type == nw_endpoint_type_address;
}

      objc_storeStrong(v5 + 51, a2);
      goto LABEL_10;
    }

    if (*((_DWORD *)v5 + 11) >= 2u)
    {
      uint64_t v14 = 1LL;
      id v15 = 352LL;
      while (!nw_interface_deep_compare(*(void **)((char *)v5[52] + v15), v7))
      {
        ++v14;
        v15 += 360LL;
      }

      id v16 = v5[52];
      if (v16)
      {
        int8x16_t v9 = (uint64_t)v16 + 360 * v14 - 360;
        goto LABEL_10;
      }
    }
  }

    goto LABEL_10;
  }

  if (([v8 isEqualToString:@"path"] & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v12 = 136446722;
      char v13 = "-[NWMonitor observeValueForKeyPath:ofObject:change:context:]";
      uint64_t v14 = 1024;
      id v15 = -[NWMonitor mID](self, "mID");
      id v16 = 2114;
      __int16 v17 = v8;
      BOOL v11 = "%{public}s %u invalid keypath %{public}@";
      goto LABEL_8;
    }

    goto LABEL_9;
  }

  -[NWMonitor evaluateStartingAtIndex:probeUUID:probeWasSuccessful:]( self,  "evaluateStartingAtIndex:probeUUID:probeWasSuccessful:",  0LL,  0LL,  0LL);
LABEL_10:
}

  BOOL v11 = (const void *)(v10 + v9[14]);
  if (!a3) {
    goto LABEL_18;
  }
LABEL_10:
  buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(*((void **)v5 + 15), a3);
  if (buffer_manager_with_context)
  {
    char v13 = buffer_manager_with_context;
    uint64_t v14 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v14) {
      goto LABEL_14;
    }
  }

  id v15 = malloc(a3);
  if (v15)
  {
    uint64_t v14 = (BOOL)v15;
    char v13 = 0LL;
LABEL_14:
    memcpy((void *)v14, v11, a3);
    goto LABEL_19;
  }

  __nwlog_obj();
  os_log_type_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  os_log_type_t v59 = "strict_malloc";
  os_log_type_t v60 = 2048;
  os_log_type_t v61 = a3;
  BOOL v50 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v50);
  if (!result)
  {
    free(v50);
    char v13 = 0LL;
    uint64_t v14 = 0LL;
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

  return v8;
}

  return v7;
}

  if (!*((void *)self + 34)) {
    goto LABEL_17;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  id v27 = "-[NWConcrete_nw_listener dealloc]";
  char v22 = 12;
  os_log_type_t v21 = buf;
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (!__nwlog_fault(v8, &type, &v24))
  {
LABEL_15:
    if (!v8) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int8x16_t v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "-[NWConcrete_nw_listener dealloc]";
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s listener advertisers were not cleaned up prior to dealloc",  buf,  0xCu);
    }

    free(v7);
    goto LABEL_10;
  }

  *((_WORD *)v3 + 120) = v4 - 1;
  if ((v4 - 1) >= 0x10000)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    __int16 v17 = *((unsigned __int16 *)v3 + 120);
    *(_DWORD *)buf = 136446978;
    os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
    BOOL v50 = 2082;
    size_t v51 = "listener->awdl_use_count";
    os_log_type_t v52 = 2048;
    BOOL v53 = 1LL;
    os_log_type_t v54 = 2048;
    os_log_type_t v55 = v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v46 = 0;
    if (__nwlog_fault(v18, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (os_log_s *)(id)gLogObj;
        char v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          os_log_type_t v21 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          BOOL v50 = 2082;
          size_t v51 = "listener->awdl_use_count";
          os_log_type_t v52 = 2048;
          BOOL v53 = 1LL;
          os_log_type_t v54 = 2048;
          os_log_type_t v55 = v21;
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
        }
      }

      else if (v46)
      {
        int8x16_t v36 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (os_log_s *)(id)gLogObj;
        uint64_t v37 = type;
        uint64_t v38 = os_log_type_enabled(v19, type);
        if (v36)
        {
          if (v38)
          {
            id v39 = *((unsigned __int16 *)v3 + 120);
            *(_DWORD *)buf = 136447234;
            os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
            BOOL v50 = 2082;
            size_t v51 = "listener->awdl_use_count";
            os_log_type_t v52 = 2048;
            BOOL v53 = 1LL;
            os_log_type_t v54 = 2048;
            os_log_type_t v55 = v39;
            uint64_t v56 = 2082;
            os_log_type_t v57 = v36;
            _os_log_impl( &dword_181A5C000,  v19,  v37,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v36);
          if (!v18) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }

        if (v38)
        {
          os_log_type_t v45 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          BOOL v50 = 2082;
          size_t v51 = "listener->awdl_use_count";
          os_log_type_t v52 = 2048;
          BOOL v53 = 1LL;
          os_log_type_t v54 = 2048;
          os_log_type_t v55 = v45;
          _os_log_impl( &dword_181A5C000,  v19,  v37,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace",  buf,  0x2Au);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (os_log_s *)(id)gLogObj;
        uint64_t v42 = type;
        if (os_log_type_enabled(v19, type))
        {
          BOOL v43 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          BOOL v50 = 2082;
          size_t v51 = "listener->awdl_use_count";
          os_log_type_t v52 = 2048;
          BOOL v53 = 1LL;
          os_log_type_t v54 = 2048;
          os_log_type_t v55 = v43;
          _os_log_impl( &dword_181A5C000,  v19,  v42,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded",  buf,  0x2Au);
        }
      }
    }

    if (!v18)
    {
LABEL_25:
      *((_WORD *)v3 + 120) = 0;
      goto LABEL_26;
    }

  os_log_type_t v8 = *(void *)(*((void *)v3 + 13) + 176LL);
  if (v8) {
    goto LABEL_12;
  }
  int8x16_t v9 = calloc(1uLL, 0x90uLL);
  if (v9)
  {
LABEL_11:
    *(void *)(*((void *)v3 + 13) + 176LL) = v9;
    os_log_type_t v8 = *(void *)(*((void *)v3 + 13) + 176LL);
LABEL_12:
    objc_storeStrong((id *)(v8 + 128), a2);
    if (!uuid_is_null(v3 + 8))
    {
      os_log_type_t v10 = *(void **)(*(void *)(*((void *)v3 + 13) + 176LL) + 136LL);
      if (!v10)
      {
        BOOL v11 = xpc_array_create(0LL, 0LL);
        os_log_type_t v12 = *(void *)(*((void *)v3 + 13) + 176LL);
        char v13 = *(void **)(v12 + 136);
        *(void *)(v12 + 136) = v11;

        os_log_type_t v10 = *(void **)(*(void *)(*((void *)v3 + 13) + 176LL) + 136LL);
      }

      xpc_array_set_uuid(v10, 0xFFFFFFFFFFFFFFFFLL, v3 + 8);
      uint64_t v14 = (void *)*((void *)v3 + 17);
      if (v14)
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = __nw_parameters_set_channel_demux_options_block_invoke;
        applier[3] = &unk_189BC8CB8;
        char v35 = v3;
        xpc_array_apply(v14, applier);
      }
    }

    goto LABEL_19;
  }

  __nwlog_obj();
  __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  id v39 = "strict_calloc";
  BOOL v40 = 2048;
  id v41 = 1LL;
  uint64_t v42 = 2048;
  BOOL v43 = 144LL;
  os_log_type_t v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    int8x16_t v9 = 0LL;
    goto LABEL_11;
  }

  __break(1u);
}

    os_log_type_t v10 = xpc_array_create(0LL, 0LL);
    BOOL v11 = *(void ***)(v4[13] + 176LL);
    os_log_type_t v12 = *v11;
    NWConcrete_nw_protocol_options *v11 = v10;

    int8x16_t v9 = **(void ***)(v4[13] + 176LL);
    if (v9) {
      goto LABEL_10;
    }
    __nwlog_obj();
    char v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int8x16_t v32 = 0;
    if (__nwlog_fault(v14, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
          _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interface_types",  buf,  0xCu);
        }
      }

      else if (v32)
      {
        os_log_type_t v25 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v26 = type;
        id v27 = os_log_type_enabled(v21, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v25;
            _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interface_types, dum ping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v25);
          if (!v14) {
            goto LABEL_11;
          }
          goto LABEL_48;
        }

        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
          _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interface_types, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v29 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
          _os_log_impl( &dword_181A5C000,  v21,  v29,  "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interface_types, backt race limit exceeded",  buf,  0xCu);
        }
      }
    }

  os_log_type_t v8 = 0LL;
  if ((*(_BYTE *)&self->_has & 2) == 0) {
    goto LABEL_10;
  }
LABEL_5:
  int8x16_t v9 = 2654435761LL * self->_networkProvider;
  if ((*(_BYTE *)&self->_has & 4) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  os_log_type_t v10 = 2654435761LL * self->_nexusProvider;
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ -[NSData hash](self->_agentData, "hash");
}

    CC_LONG v5 = 0LL;
    goto LABEL_10;
  }

  establishment_report = (nw_path *)nw_http_connection_metadata_get_establishment_report(v2);
  if (!establishment_report) {
    goto LABEL_9;
  }
  id v4 = establishment_report;
  int8x16_t v9 = 0LL;
  os_log_type_t v10 = &v9;
  BOOL v11 = 0x3032000000LL;
  os_log_type_t v12 = __Block_byref_object_copy__28306;
  char v13 = __Block_byref_object_dispose__28307;
  uint64_t v14 = 0LL;
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  v8[2] = __52__NWURLSessionTaskTransactionMetrics_remoteEndpoint__block_invoke;
  v8[3] = &unk_189BBACC8;
  v8[4] = &v9;
  nw_establishment_report_enumerate_proxied_next_hop_endpoints(establishment_report, v8);
  CC_LONG v5 = (nw_endpoint_t)(id)v10[5];
  _Block_object_dispose(&v9, 8);

LABEL_8:
LABEL_10:

  return v5;
}

LABEL_10:
    if (!v14) {
      goto LABEL_12;
    }
LABEL_11:
    free(v14);
    goto LABEL_12;
  }

  if (!v21)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (os_log_s *)(id)gLogObj;
    char v20 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_endpoint_resolver_setup_trigger_agent_timer";
      _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_9;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v15 = (os_log_s *)(id)gLogObj;
  uint64_t v18 = type;
  uint64_t v19 = os_log_type_enabled(v15, type);
  if (!backtrace_string)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      id v27 = "nw_endpoint_resolver_setup_trigger_agent_timer";
      _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed, no backtrace",  buf,  0xCu);
    }

    goto LABEL_9;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    id v27 = "nw_endpoint_resolver_setup_trigger_agent_timer";
    uint64_t v28 = 2082;
    uint64_t v29 = backtrace_string;
    _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(backtrace_string);
  if (v14) {
    goto LABEL_11;
  }
LABEL_12:
}

  return v6;
}
  }

  if (a1->output_handler != a2)
  {
    if (gLogDatapath)
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)handle + 205;
        int8x16_t v9 = "%{public}s %{public}s connected protocol is not our output_handler, ignoring";
LABEL_24:
        _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, v9, buf, 0x16u);
        return;
      }
    }

    return;
  }

  if (gLogDatapath)
  {
    int8x16_t v32 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      _os_log_impl(&dword_181A5C000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }

  if ((*((_BYTE *)handle + 204) & 0x10) != 0)
  {
    if (!handle[13])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)handle + 205;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s no listen handler on server, deferring processing of input and connected state until lis ten handler is present",  buf,  0x16u);
      }

      *((_BYTE *)handle + 204) |= 0x40u;
      return;
    }

    if (!gLogDatapath) {
      goto LABEL_20;
    }
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    BOOL v11 = "%{public}s %{public}s listen handler present, processing input without waiting";
    goto LABEL_92;
  }

  if (gLogDatapath)
  {
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      BOOL v11 = "%{public}s %{public}s not server, processing input without waiting";
LABEL_92:
      _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_DEBUG, v11, buf, 0x16u);
    }
  }

        if (gLogDatapath)
        {
          uint64_t v29 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            __int16 v30 = *((void *)v48 + 3);
            *(_DWORD *)buf = 136446978;
            BOOL v53 = "http2_transport_create_input_frame";
            os_log_type_t v54 = 2082;
            os_log_type_t v55 = a1 + 205;
            uint64_t v56 = 2048;
            os_log_type_t v57 = v30;
            BOOL v58 = 1024;
            os_log_type_t v59 = v4;
            _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s input_frame_create returning frame %p for requested length %u",  buf,  0x26u);
          }
        }

        goto LABEL_10;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v53 = "http2_transport_create_input_frame";
        os_log_type_t v54 = 2082;
        os_log_type_t v55 = a1 + 205;
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s input frame has no metadata",  buf,  0x16u);
      }

      buffer = (void *)nw_frame_get_buffer(*((void *)v48 + 3), 0LL);
      if (buffer) {
        free(buffer);
      }
      nw_frame_reset(*((void *)v48 + 3), 0LL, 0, 0LL, 0LL);
      os_log_type_t v21 = (void *)*((void *)v48 + 3);
      if (v21)
      {
        os_release(v21);
        int8x16_t v9 = 0LL;
        *((void *)v48 + 3) = 0LL;
        goto LABEL_11;
      }

  id v15 = (id)v30[5];
  _Block_object_dispose(&v29, 8);

  return v15;
}

  char v13 = (id)v23[5];
  _Block_object_dispose(&v22, 8);

  return v13;
}

  os_log_type_t v21 = (id)v38[5];
  _Block_object_dispose(&v37, 8);

  return v21;
}

  id v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v10;

  __int16 v17 = *(void *)(a1 + 32);
  if (v17) {
    uint64_t v18 = *(void **)(v17 + 104);
  }
  else {
    uint64_t v18 = 0LL;
  }
  [v18 addObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
}

    CC_SHA256_CTX v6 = 0LL;
    CC_LONG v5 = 0LL;
LABEL_8:
    -[NWURLSessionDelegateWrapper readClosedForStreamTask:]((uint64_t)v5, v6);

    -[NWURLSessionStreamTask checkForCompletion](*(void *)(a1 + 32));
  }
}
}
}

  if (*((void *)self + 6))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "-[NWConcrete_nw_nat64_prefixes_resolver dealloc]";
    char v22 = 12;
    os_log_type_t v21 = buf;
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    char v26 = OS_LOG_TYPE_ERROR;
    os_log_type_t v25 = 0;
    if (__nwlog_fault(v8, &v26, &v25))
    {
      if (v26 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int8x16_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = v26;
        if (os_log_type_enabled(v9, v26))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v28 = "-[NWConcrete_nw_nat64_prefixes_resolver dealloc]";
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s over-release of nw_nat64_prefixes_resolver_t! Object should not still have a DNS service",  buf,  0xCu);
        }
      }

      else if (v25)
      {
        id v16 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int8x16_t v9 = (os_log_s *)(id)gLogObj;
        __int16 v17 = v26;
        uint64_t v18 = os_log_type_enabled(v9, v26);
        if (v16)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v28 = "-[NWConcrete_nw_nat64_prefixes_resolver dealloc]";
            uint64_t v29 = 2082;
            __int16 v30 = v16;
            _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s over-release of nw_nat64_prefixes_resolver_t! Object should not still have a DNS service, dumpi ng backtrace:%{public}s",  buf,  0x16u);
          }

          free(v16);
          if (!v8) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }

        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v28 = "-[NWConcrete_nw_nat64_prefixes_resolver dealloc]";
          _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s over-release of nw_nat64_prefixes_resolver_t! Object should not still have a DNS service, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int8x16_t v9 = (os_log_s *)(id)gLogObj;
        char v20 = v26;
        if (os_log_type_enabled(v9, v26))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v28 = "-[NWConcrete_nw_nat64_prefixes_resolver dealloc]";
          _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s over-release of nw_nat64_prefixes_resolver_t! Object should not still have a DNS service, backtra ce limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v8)
    {
LABEL_17:
      BOOL v11 = *((void *)self + 6);
      *((void *)self + 6) = 0LL;
      os_log_type_t v12 = (void *)*((void *)self + 3);
      v24[0] = MEMORY[0x1895F87A8];
      v24[1] = 3221225472LL;
      v24[2] = __48__NWConcrete_nw_nat64_prefixes_resolver_dealloc__block_invoke;
      v24[3] = &__block_descriptor_40_e5_v8__0l;
      v24[4] = v11;
      nw_queue_context_async_if_needed(v12, v24);
      goto LABEL_18;
    }

  __break(1u);
  return result;
}

  return is_equal;
}

      if ((*((_WORD *)handle + 368) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          id v27 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v28 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
            uint64_t v29 = *((void *)handle + 30);
            __int16 v30 = *((void *)handle + 45);
            *(_DWORD *)buf = 136447490;
            char v35 = "nw_http3_stream_get_datagram_parameters";
            int8x16_t v36 = 2082;
            uint64_t v37 = handle + 636;
            uint64_t v38 = 2080;
            id v39 = " ";
            BOOL v40 = 1024;
            id v41 = v28;
            uint64_t v42 = 2048;
            BOOL v43 = v29;
            char v44 = 2048;
            os_log_type_t v45 = v30;
            _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> returning datagram parameters %p",  buf,  0x3Au);
          }
        }
      }

      return *((void *)handle + 45);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    char v35 = "nw_http3_stream_get_datagram_parameters";
    int8x16_t v36 = 2048;
    uint64_t v37 = handle;
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int8x16_t v32 = 0;
    if (__nwlog_fault(v13, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = (os_log_s *)gLogObj;
        id v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446466;
        char v35 = "nw_http3_stream_get_datagram_parameters";
        int8x16_t v36 = 2048;
        uint64_t v37 = handle;
        id v16 = "%{public}s no output handler on http3 stream %p yet, cannot create datagram parameters";
        goto LABEL_38;
      }

      if (!v32)
      {
        uint64_t v14 = (os_log_s *)__nwlog_obj();
        id v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446466;
        char v35 = "nw_http3_stream_get_datagram_parameters";
        int8x16_t v36 = 2048;
        uint64_t v37 = handle;
        id v16 = "%{public}s no output handler on http3 stream %p yet, cannot create datagram parameters, backtrace limit exceeded";
        goto LABEL_38;
      }

      __int16 v17 = (char *)__nw_create_backtrace_string();
      uint64_t v14 = (os_log_s *)__nwlog_obj();
      id v15 = type;
      uint64_t v18 = os_log_type_enabled(v14, type);
      if (v17)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446722;
          char v35 = "nw_http3_stream_get_datagram_parameters";
          int8x16_t v36 = 2048;
          uint64_t v37 = handle;
          uint64_t v38 = 2082;
          id v39 = v17;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s no output handler on http3 stream %p yet, cannot create datagram parameters, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v17);
        goto LABEL_39;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        char v35 = "nw_http3_stream_get_datagram_parameters";
        int8x16_t v36 = 2048;
        uint64_t v37 = handle;
        id v16 = "%{public}s no output handler on http3 stream %p yet, cannot create datagram parameters, no backtrace";
LABEL_38:
        _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0x16u);
      }
    }

  __break(1u);
  return result;
}

  return v6;
}

    goto LABEL_10;
  }

  if (!v106)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    CC_LONG v5 = (os_log_s *)(id)gLogObj;
    os_log_type_t v102 = type[0];
    if (os_log_type_enabled(v5, type[0]))
    {
      *(_DWORD *)buf = 136446978;
      os_log_type_t v109 = "nw_path_get_sysctls_region_block_invoke";
      BOOL v110 = 1024;
      *(_DWORD *)v111 = v1;
      *(_WORD *)&v111[4] = 2048;
      *(void *)&v111[6] = 8LL;
      *(_WORD *)&v111[14] = 1024;
      *(_DWORD *)&v111[16] = v2;
      _os_log_impl( &dword_181A5C000,  v5,  v102,  "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d, back trace limit exceeded",  buf,  0x22u);
    }

    goto LABEL_9;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  CC_LONG v5 = (os_log_s *)(id)gLogObj;
  BOOL v100 = type[0];
  v101 = os_log_type_enabled(v5, type[0]);
  if (!backtrace_string)
  {
    if (v101)
    {
      *(_DWORD *)buf = 136446978;
      os_log_type_t v109 = "nw_path_get_sysctls_region_block_invoke";
      BOOL v110 = 1024;
      *(_DWORD *)v111 = v1;
      *(_WORD *)&v111[4] = 2048;
      *(void *)&v111[6] = 8LL;
      *(_WORD *)&v111[14] = 1024;
      *(_DWORD *)&v111[16] = v2;
      _os_log_impl( &dword_181A5C000,  v5,  v100,  "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d, no backtrace",  buf,  0x22u);
    }

    goto LABEL_9;
  }

  if (v101)
  {
    *(_DWORD *)buf = 136447234;
    os_log_type_t v109 = "nw_path_get_sysctls_region_block_invoke";
    BOOL v110 = 1024;
    *(_DWORD *)v111 = v1;
    *(_WORD *)&v111[4] = 2048;
    *(void *)&v111[6] = 8LL;
    *(_WORD *)&v111[14] = 1024;
    *(_DWORD *)&v111[16] = v2;
    os_log_type_t v112 = 2082;
    BOOL v113 = backtrace_string;
    _os_log_impl( &dword_181A5C000,  v5,  v100,  "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d, dumpin g backtrace:%{public}s",  buf,  0x2Cu);
  }

  free(backtrace_string);
  if (v4) {
LABEL_11:
  }
    free(v4);
LABEL_12:
  if (nw_path_get_sysctls_region::sysctls_region)
  {
    if (*(_DWORD *)nw_path_get_sysctls_region::sysctls_region == 3) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    os_log_type_t v8 = *(_DWORD *)nw_path_get_sysctls_region::sysctls_region;
    *(_DWORD *)buf = 136446722;
    os_log_type_t v109 = "nw_path_get_sysctls_region_block_invoke";
    BOOL v110 = 1024;
    *(_DWORD *)v111 = v8;
    *(_WORD *)&v111[4] = 1024;
    *(_DWORD *)&v111[6] = 3;
    int8x16_t v9 = "%{public}s sysctls_region version: %u, expected: %u, synthesizing from sysctlbyname";
    os_log_type_t v10 = v7;
    BOOL v11 = OS_LOG_TYPE_ERROR;
    os_log_type_t v12 = 24;
    goto LABEL_19;
  }

      goto LABEL_10;
    }

    __nwlog_obj();
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int8x16_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(type) = 16;
    __int16 v30 = 0;
    if (__nwlog_fault(v19, &type, &v30))
    {
      if (type == 17)
      {
        __nwlog_obj();
        char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          int8x16_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v26 = type;
        id v27 = os_log_type_enabled(v20, (os_log_type_t)type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            int8x16_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
            int8x16_t v33 = 2082;
            id v34 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v20,  v26,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_46;
        }

        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          int8x16_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          _os_log_impl(&dword_181A5C000, v20, v26, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v29 = type;
        if (os_log_type_enabled(v20, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          int8x16_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }
}

  os_log_type_t v12 = 0LL;
LABEL_10:
  char v13 = length + v10 + v12;
  uint64_t v14 = v13 + 32;
  *a3 = v13 + 32;
  if (v13 == -32LL)
  {
    __nwlog_obj();
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "strict_calloc";
    char v35 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v35);
    if (result) {
      goto LABEL_68;
    }
    free(v35);
  }

  id v15 = calloc(1uLL, v14);
  if (!v15)
  {
    __nwlog_obj();
    int8x16_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v47 = "strict_calloc";
    __int16 v48 = 2048;
    os_log_type_t v49 = 1LL;
    BOOL v50 = 2048;
    size_t v51 = v14;
    uint64_t v37 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v37);
    if (result) {
      goto LABEL_68;
    }
    free(v37);
  }

  v15[1] = length;
  v15[2] = v10;
  id v16 = v15[3] & 0xFE | *(_BYTE *)(a2 + 32) & 1;
  *((_BYTE *)v15 + 24) = v16;
  *((_BYTE *)v15 + 24) = v16 & 0xF9 | *(_BYTE *)(a2 + 32) & 6;
  *id v15 = *(void *)a2;
  if (v7) {
    xpc_data_get_bytes(v7, (char *)v15 + 25, 0LL, length);
  }
  __int16 v17 = *(unsigned __int8 **)(a2 + 24);
  if (v17)
  {
    uint64_t v18 = (char *)v15 + v15[1] + 25;
    if (v10 < 2)
    {
      uint64_t v19 = v10;
      if (v10)
      {
LABEL_21:
        if (v19) {
          char *v18 = 0;
        }
      }
    }

    else
    {
      uint64_t v19 = 1LL;
      char v20 = v10;
      while (1)
      {
        os_log_type_t v21 = *v17;
        char *v18 = v21;
        if (!v21) {
          break;
        }
        ++v18;
        ++v17;
        if (--v20 <= 1) {
          goto LABEL_21;
        }
      }
    }
  }

  if (!v12) {
    goto LABEL_29;
  }
  char v22 = v15[1];
  os_log_type_t v23 = v15[2];
  BOOL v24 = *(unsigned __int8 **)(a2 + 16);
  if (v24)
  {
LABEL_25:
    os_log_type_t v25 = (char *)v15 + v22 + v23 + 25;
    if (v12 < 2)
    {
LABEL_28:
      *os_log_type_t v25 = 0;
    }

    else
    {
      while (1)
      {
        char v26 = *v24;
        *os_log_type_t v25 = v26;
        if (!v26) {
          break;
        }
        ++v25;
        ++v24;
        if (--v12 <= 1) {
          goto LABEL_28;
        }
      }
    }

  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  BOOL v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_4;
  }

  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  BOOL v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_4;
  }

  __nwlog_obj();
  BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v12))
  {
    free(v12);
    goto LABEL_4;
  }

  __nwlog_obj();
  char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  uint64_t v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_4;
  }

  __nwlog_obj();
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  uint64_t v19 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v19);
  if (!result)
  {
    free(v19);
    goto LABEL_4;
  }

  os_log_type_t v8 = (uint64_t *)a2[5];
  if (v4 != a2[6] - (void)v8) {
    return 0LL;
  }
  if (v6 == v5) {
    return 1LL;
  }
  int8x16_t v9 = v6 + 8;
  do
  {
    os_log_type_t v10 = *v8++;
    BOOL result = *(void *)(v9 - 8) == v10;
    os_log_type_t v12 = *(void *)(v9 - 8) != v10 || v9 == v5;
    v9 += 8LL;
  }

  while (!v12);
  return result;
}

  os_log_type_t v10 = 0LL;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a4;
LABEL_10:

  return v10;
}

  os_log_type_t v12 = 1LL;
LABEL_12:

  return v12;
}

void sub_181A969D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_endpoint_no_evaluate(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = a2;
  CC_SHA256_CTX v6 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path_evaluator);
  os_log_type_t v7 = v6;
  if (v6)
  {
    if (v5)
    {
      objc_storeStrong((id *)v6 + 1, a2);
      os_log_type_t v8 = (id *)v5;
      int8x16_t v9 = (id *)v8[19];

      if (v9)
      {
        int8x16_t v9 = v9;
        id v10 = v9[3];

        if (v10 && nw_protocol_options_is_custom_ip(v10)) {
          *((_BYTE *)v7 + 106) = nw_custom_ip_options_get_protocol(v10);
        }
      }

      if (!v4) {
        goto LABEL_20;
      }
    }

    else
    {
      id v15 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters);
      id v16 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_stack);
      __int16 v17 = -[NWConcrete_nw_parameters initWithStack:]((id *)&v15->super.isa, v16);

      uint64_t v18 = (void *)*((void *)v7 + 1);
      *((void *)v7 + 1) = v17;

      if (!v4) {
        goto LABEL_20;
      }
    }

    id v19 = v4;
    int v20 = [v19 type];

    if (v20 == 4)
    {
      BOOL v21 = nw_endpoint_copy_host_port_endpoint_for_url(v19);
      char v22 = (void *)*((void *)v7 + 2);
      *((void *)v7 + 2) = v21;

      nw_parameters_set_url_endpoint(*((void **)v7 + 1), v19);
LABEL_22:
      *((_BYTE *)v7 + 107) |= 0x40u;
      os_log_type_t v23 = v7;
      goto LABEL_23;
    }

void sub_181A96E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_endpoint_is_always_satisfied(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1) {
    goto LABEL_29;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if (v4 != 1) {
    goto LABEL_29;
  }
  address = nw_endpoint_get_address((nw_endpoint_t)v3);
  if (!address)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_path_endpoint_is_always_satisfied";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v10, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v23 = "nw_path_endpoint_is_always_satisfied";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s nw_endpoint_get_address failed", buf, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          os_log_type_t v14 = (char *)backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v15 = (os_log_s *)(id)gLogObj;
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v23 = "nw_path_endpoint_is_always_satisfied";
            __int16 v24 = 2082;
            os_log_type_t v25 = v14;
            _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s nw_endpoint_get_address failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v14);
          if (!v10) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }

        __nwlog_obj();
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v23 = "nw_path_endpoint_is_always_satisfied";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s nw_endpoint_get_address failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v23 = "nw_path_endpoint_is_always_satisfied";
          _os_log_impl( &dword_181A5C000,  v11,  v17,  "%{public}s nw_endpoint_get_address failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v10)
    {
LABEL_29:
      BOOL v8 = 0LL;
      goto LABEL_30;
    }

void sub_181A97450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "181A97470: too big function (funcsize=0)"
void sub_181ABF830( _Unwind_Exception *a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  void *a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26,  uint64_t a27,  void *a28,  void *a29,  uint64_t a30,  uint64_t a31,  uint64_t a32,  uint64_t a33,  uint64_t a34,  void *a35,  void *a36,  uint64_t a37,  void *a38,  uint64_t a39,  uint64_t a40,  uint64_t a41,  uint64_t a42,  uint64_t a43,  uint64_t a44,  uint64_t a45,  uint64_t a46,  uint64_t a47,  uint64_t a48,  uint64_t a49,
        uint64_t a50,
        uint64_t a51,
        uint64_t a52,
        uint64_t a53,
        uint64_t a54,
        uint64_t a55,
        uint64_t a56,
        uint64_t a57,
        uint64_t a58,
        uint64_t a59,
        uint64_t a60,
        uint64_t a61,
        uint64_t a62,
        uint64_t a63)
{
  void *a71;
  void *a72;
  void *v72;
  void *v74;

  __int16 v74 = (void *)STACK[0x228];
  _Block_object_dispose(&STACK[0x3D8], 8);

  _Block_object_dispose(&STACK[0x408], 8);
  _Block_object_dispose(&STACK[0x428], 8);

  _Unwind_Resume(a1);
}

void nw_parameters_get_e_proc_uuid(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(*((void *)v3 + 13) + 24LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_e_proc_uuid";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_e_proc_uuid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_e_proc_uuid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_e_proc_uuid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_e_proc_uuid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_get_proc_uuid(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(*((void *)v3 + 13) + 8LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_proc_uuid";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_proc_uuid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_proc_uuid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_proc_uuid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_proc_uuid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_parent_id_count(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = uuid_is_null((const unsigned __int8 *)v1 + 8) == 0;
    int v4 = (void *)v2[17];
    if (v4) {
      uint64_t v3 = xpc_array_get_count(v4) + v3;
    }
    goto LABEL_4;
  }

  __nwlog_obj();
  CC_SHA256_CTX v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_get_parent_id_count";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_get_parent_id_count";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_get_parent_id_count";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_get_parent_id_count";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_get_parent_id_count";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC02F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_interface_t nw_parameters_copy_required_interface(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (nw_interface *)*(id *)(*((void *)v1 + 13) + 168LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_copy_required_interface";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_required_interface";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_copy_required_interface";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_required_interface";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_required_interface";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_get_multipath(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *(_DWORD *)(*((void *)v1 + 13) + 103LL) != 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_multipath";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_multipath";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_multipath";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_multipath";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_multipath";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_parameters_copy_prohibited_interfaces(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

nw_interface_type_t nw_parameters_get_required_interface_type(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    nw_interface_type_t v3 = *(_DWORD *)(*((void *)v1 + 13) + 76LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_required_interface_type";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_required_interface_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_required_interface_type";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_required_interface_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_required_interface_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_required_interface_subtype(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 80LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_required_interface_subtype";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_required_interface_subtype";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_required_interface_subtype";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_parameters_copy_prohibited_interface_types(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_prohibited_interface_types";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interface_types";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_prohibited_interface_types";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interface_types";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interface_types";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_parameters_copy_prohibited_interface_subtypes(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_prohibited_interface_subtypes";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interface_subtypes";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_prohibited_interface_subtypes";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interface_subtypes";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interface_subtypes";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_parameters_copy_preferred_interface_subtypes(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_parameters_copy_prohibited_netagent_uuids(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_prohibited_netagent_uuids";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_prohibited_netagent_uuids";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_parameters_copy_prohibited_netagent_domains(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_prohibited_netagent_domains";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_netagent_domains";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_prohibited_netagent_domains";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_netagent_domains";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_netagent_domains";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_parameters_copy_prohibited_netagent_types(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_prohibited_netagent_types";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_netagent_types";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_prohibited_netagent_types";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_netagent_types";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_netagent_types";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_parameters_copy_required_netagent_uuids(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_required_netagent_uuids";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_required_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_required_netagent_uuids";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_required_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_required_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_parameters_copy_required_netagent_domains(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_required_netagent_domains";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_required_netagent_domains";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_required_netagent_domains";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_required_netagent_domains";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_required_netagent_domains";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_parameters_copy_required_netagent_types(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_required_netagent_types";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_required_netagent_types";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_required_netagent_types";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_required_netagent_types";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_required_netagent_types";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_parameters_copy_preferred_netagent_uuids(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

xpc_object_t nw_parameters_copy_preferred_netagent_domains(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v4 = v1;
  if (v1)
  {
    path_parameters = v1->path_parameters;
    required_interface = path_parameters->required_interface;
    if (required_interface)
    {
      xpc_object_t v7 = *((id *)required_interface + 10);
      path_parameters = v4->path_parameters;
    }

    else
    {
      xpc_object_t v7 = 0LL;
    }

    if (path_parameters->path_value.companion_preference == 1)
    {
      int agent_preference = nw_parameters_get_agent_preference(v4, v2, v3);
      if (agent_preference)
      {
        if (agent_preference == 2)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v9 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_domains";
            _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s Parameters companion_preferece is prefer but companion is in avoided array",  buf,  0xCu);
          }
        }
      }

      else
      {
        if (v7)
        {
          xpc_object_t v10 = xpc_copy(*((xpc_object_t *)v4->path_parameters->required_interface + 10));

          xpc_object_t v7 = v10;
        }

        else
        {
          xpc_object_t v7 = xpc_array_create(0LL, 0LL);
        }

        xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, "com.apple.networkrelay");
      }
    }

    goto LABEL_15;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_domains";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_domains";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_domains";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_domains";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_domains";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC2E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t nw_parameters_copy_preferred_netagent_types(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v4 = v1;
  if (v1)
  {
    path_parameters = v1->path_parameters;
    required_interface = path_parameters->required_interface;
    if (required_interface)
    {
      xpc_object_t v7 = *((id *)required_interface + 11);
      path_parameters = v4->path_parameters;
    }

    else
    {
      xpc_object_t v7 = 0LL;
    }

    if (path_parameters->path_value.companion_preference == 1)
    {
      int agent_preference = nw_parameters_get_agent_preference(v4, v2, v3);
      if (agent_preference)
      {
        if (agent_preference == 2)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v9 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_types";
            _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s Parameters companion_preferece is prefer but companion is in avoided array",  buf,  0xCu);
          }
        }
      }

      else
      {
        if (v7)
        {
          xpc_object_t v10 = xpc_copy(*((xpc_object_t *)v4->path_parameters->required_interface + 11));

          xpc_object_t v7 = v10;
        }

        else
        {
          xpc_object_t v7 = xpc_array_create(0LL, 0LL);
        }

        xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, "CompanionProxy");
      }
    }

    goto LABEL_15;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_types";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_types";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_types";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_types";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_preferred_netagent_types";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC31E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_avoided_netagent_uuids(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_parameters_copy_avoided_netagent_uuids";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_parameters_copy_avoided_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v17 = "nw_parameters_copy_avoided_netagent_uuids";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_parameters_copy_avoided_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_parameters_copy_avoided_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

xpc_object_t nw_parameters_copy_avoided_netagent_domains(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v4 = v1;
  if (v1)
  {
    path_parameters = v1->path_parameters;
    required_interface = path_parameters->required_interface;
    if (required_interface)
    {
      xpc_object_t v7 = *((id *)required_interface + 13);
      path_parameters = v4->path_parameters;
    }

    else
    {
      xpc_object_t v7 = 0LL;
    }

    if (path_parameters->path_value.companion_preference == 2)
    {
      int agent_preference = nw_parameters_get_agent_preference(v4, v2, v3);
      if (agent_preference)
      {
        if (agent_preference == 1)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v9 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_domains";
            _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s Parameters companion_preference is avoid but companion is in preferred array",  buf,  0xCu);
          }
        }
      }

      else
      {
        if (v7)
        {
          xpc_object_t v10 = xpc_copy(*((xpc_object_t *)v4->path_parameters->required_interface + 13));

          xpc_object_t v7 = v10;
        }

        else
        {
          xpc_object_t v7 = xpc_array_create(0LL, 0LL);
        }

        xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, "com.apple.networkrelay");
      }
    }

    goto LABEL_15;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_domains";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_domains";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_domains";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_domains";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_domains";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC3834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t nw_parameters_copy_avoided_netagent_types(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v4 = v1;
  if (v1)
  {
    path_parameters = v1->path_parameters;
    required_interface = path_parameters->required_interface;
    if (required_interface)
    {
      xpc_object_t v7 = *((id *)required_interface + 14);
      path_parameters = v4->path_parameters;
    }

    else
    {
      xpc_object_t v7 = 0LL;
    }

    if (path_parameters->path_value.companion_preference == 2)
    {
      int agent_preference = nw_parameters_get_agent_preference(v4, v2, v3);
      if (agent_preference)
      {
        if (agent_preference == 2)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v9 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_types";
            _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s Parameters companion_preference is avoid but companion is in preferred array",  buf,  0xCu);
          }
        }
      }

      else
      {
        if (v7)
        {
          xpc_object_t v10 = xpc_copy(*((xpc_object_t *)v4->path_parameters->required_interface + 14));

          xpc_object_t v7 = v10;
        }

        else
        {
          xpc_object_t v7 = xpc_array_create(0LL, 0LL);
        }

        xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, "CompanionProxy");
      }
    }

    goto LABEL_15;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_types";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_types";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_types";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_types";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_copy_avoided_netagent_types";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC3BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_channel_demux_options(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_parameters_copy_channel_demux_options";
    CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_parameters_copy_channel_demux_options";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v17 = "nw_parameters_copy_channel_demux_options";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_parameters_copy_channel_demux_options";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_parameters_copy_channel_demux_options";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

BOOL nw_endpoint_get_domain_for_policy(void *a1)
{
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    uint64_t domain_for_policy = 0LL;
LABEL_11:

    return domain_for_policy;
  }

  uint64_t v3 = v1;
  uint64_t domain_for_policy = [v3 domainForPolicy];
  if (domain_for_policy)
  {
LABEL_10:

    goto LABEL_11;
  }

  id v5 = (void *)v3[14];
  if (!v5)
  {
    uint64_t domain_for_policy = 0LL;
    goto LABEL_10;
  }

  if (v5 != v3)
  {
LABEL_7:
    uint64_t domain_for_policy = nw_endpoint_get_domain_for_policy(v5);
    goto LABEL_10;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  CC_SHA256_CTX v6 = (os_log_s *)(id)gLogObj;
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  xpc_object_t v7 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    id v5 = (void *)v3[14];
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

void sub_181AC3FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_account_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(*((void *)v1 + 13) + 112LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_account_id";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_account_id";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_account_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_account_id";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_account_id";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_uid(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 68LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_uid";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_uid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_uid";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_uid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_uid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_delegated_unique_pid(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(*((void *)v1 + 13) + 56LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_delegated_unique_pid";
  CC_SHA256_CTX v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_delegated_unique_pid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_delegated_unique_pid";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_delegated_unique_pid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_delegated_unique_pid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_local_address_preference(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_parameters_get_local_address_preference";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_parameters_get_local_address_preference";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_parameters_get_local_address_preference";
            __int16 v21 = 2082;
            char v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_parameters_get_local_address_preference";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_parameters_get_local_address_preference";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181AC4AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_ip_options_get_local_address_preference(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_ip_options_get_local_address_preference_block_invoke;
    v12[3] = &unk_189BC60A8;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_ip_options_get_local_address_preference";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_local_address_preference";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_ip(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_ip_options_get_local_address_preference";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_local_address_preference";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_local_address_preference";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC4E18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_matches_definition(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(v3[1], (uint64_t)v4);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_options_matches_definition";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_options_matches_definition";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null definition", buf, 0xCu);
        }

void sub_181AC52F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_get_local_address_preference_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 4);
  return 1LL;
}

uint64_t nw_parameters_get_ip_protocol(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "nw_parameters_get_ip_protocol";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "nw_parameters_get_ip_protocol";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v20 = "nw_parameters_get_ip_protocol";
            __int16 v21 = 2082;
            char v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "nw_parameters_get_ip_protocol";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "nw_parameters_get_ip_protocol";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181AC5660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_udp(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    BOOL v2 = nw_protocol_options_matches_definition(v1, (void *)g_udp_definition);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_protocol_options_is_udp";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_protocol_options_is_udp";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_protocol_options_is_udp";
          __int16 v16 = 2082;
          char v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_protocol_options_is_udp";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_protocol_options_is_udp";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC5948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_quic(nw_protocol_options_t options)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = options;
  BOOL v2 = v1;
  if (v1)
  {
    BOOL v3 = nw_protocol_options_is_quic_connection(v1) || nw_protocol_options_is_quic_stream(v2);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_is_quic";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_quic";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_is_quic";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_quic";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_is_quic";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC5C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_upper_transport_protocol(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_parameters_get_upper_transport_protocol";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "nw_parameters_get_upper_transport_protocol";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v21 = "nw_parameters_get_upper_transport_protocol";
            __int16 v22 = 2082;
            uint64_t v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "nw_parameters_get_upper_transport_protocol";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "nw_parameters_get_upper_transport_protocol";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181AC5F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_tcp(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    BOOL v2 = nw_protocol_options_matches_definition(v1, (void *)g_tcp_definition);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_protocol_options_is_tcp";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_options_is_tcp";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v15 = "nw_protocol_options_is_tcp";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_options_is_tcp";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_options_is_tcp";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC6234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_custom_ip(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (id *)v1;
    id v4 = v3[1];

    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_custom_ip_definition(void)::definition);
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_protocol_options_is_custom_ip";
  unsigned __int8 v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_options_is_custom_ip";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_protocol_options_is_custom_ip";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_options_is_custom_ip";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_options_is_custom_ip";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AC652C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = parameters;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (nw_protocol_stack *)v1[19];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_parameters_copy_default_protocol_stack";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parameters_copy_default_protocol_stack";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_parameters_copy_default_protocol_stack";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parameters_copy_default_protocol_stack";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parameters_copy_default_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_endpoint_t nw_parameters_copy_local_endpoint(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (nw_endpoint *)*(id *)(*((void *)v1 + 13) + 160LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_parameters_copy_local_endpoint";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parameters_copy_local_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_parameters_copy_local_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parameters_copy_local_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parameters_copy_local_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_parameters_copy_url_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = v1[25];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_parameters_copy_url_endpoint";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parameters_copy_url_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_parameters_copy_url_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parameters_copy_url_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parameters_copy_url_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_endpoint_get_url_scheme(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v38 = "nw_endpoint_get_url_scheme";
    uint64_t v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_url_scheme";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v38 = "nw_endpoint_get_url_scheme";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_url_scheme";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_url_scheme";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181AC72DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_attribution_context(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_get_attribution_context";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_attribution_context";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_get_attribution_context";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_attribution_context";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_attribution_context";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_parameters_get_attributed_bundle_identifier(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(*((void *)v1 + 13) + 128LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_attributed_bundle_identifier";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_attributed_bundle_identifier";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_attributed_bundle_identifier";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_attributed_bundle_identifier";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_attributed_bundle_identifier";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const uint8_t *__cdecl nw_endpoint_get_signature(nw_endpoint_t endpoint, size_t *out_signature_length)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  nw_endpoint_t v3 = endpoint;
  uint64_t v4 = (xpc_object_t *)v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_endpoint_get_signature";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_endpoint_get_signature";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (!v21)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_endpoint_get_signature";
        _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_endpoint_get_signature";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v24 = "nw_endpoint_get_signature";
      __int16 v25 = 2082;
      uint64_t v26 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_24;
  }

  if (!out_signature_length)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_endpoint_get_signature";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_endpoint_get_signature";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null out_signature_length", buf, 0xCu);
      }

void sub_181AC7D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_server_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[97] >> 7;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_server_mode";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_server_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_server_mode";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_server_mode";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_server_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_fallback_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned __int8 *)(*((void *)v1 + 13) + 107LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_fallback_mode";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_fallback_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_fallback_mode";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_fallback_mode";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_fallback_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_data_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_parameters_get_data_mode";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_parameters_get_data_mode";
          _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v16 = "nw_parameters_get_data_mode";
            __int16 v17 = 2082;
            os_log_type_t v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v5) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_parameters_get_data_mode";
          _os_log_impl(&dword_181A5C000, v6, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_parameters_get_data_mode";
          _os_log_impl( &dword_181A5C000,  v6,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v5)
    {
LABEL_10:
      uint64_t v3 = 0LL;
      goto LABEL_11;
    }

uint64_t nw_parameters_get_only_primary_requires_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 100LL) >> 5) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_only_primary_requires_type";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_only_primary_requires_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_only_primary_requires_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_only_primary_requires_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_only_primary_requires_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_get_prohibit_expensive(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    __int16 v3 = *(_WORD *)(*((void *)v1 + 13) + 100LL) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_prohibit_expensive";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_prohibit_expensive";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_prohibit_expensive";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_prohibit_expensive";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_prohibit_expensive";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_get_prohibit_constrained(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 100LL) >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_prohibit_constrained";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_prohibit_constrained";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_prohibit_constrained";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_prohibit_constrained";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_prohibit_constrained";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_dry_run(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 96) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_dry_run";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_dry_run";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_dry_run";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_dry_run";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_dry_run";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_use_awdl(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_use_awdl";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_awdl";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_use_awdl";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_awdl";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_awdl";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_use_p2p(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_use_p2p";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_p2p";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_use_p2p";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_p2p";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_p2p";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_include_ble(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[100] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_include_ble";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_include_ble";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_include_ble";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_include_ble";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_include_ble";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_include_screen_off_devices(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[100] >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_include_screen_off_devices";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_include_screen_off_devices";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_include_screen_off_devices";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_include_screen_off_devices";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_include_screen_off_devices";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_get_reuse_local_address(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((_BYTE *)v1 + 97) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_reuse_local_address";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_reuse_local_address";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_reuse_local_address";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_reuse_local_address";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_reuse_local_address";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_allow_socket_access(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 100LL) >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_allow_socket_access";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_allow_socket_access";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_allow_socket_access";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_allow_socket_access";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_allow_socket_access";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_discretionary(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(_WORD *)(*((void *)v1 + 13) + 108LL) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_discretionary";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_discretionary";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_discretionary";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_discretionary";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_discretionary";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_ecn_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_parameters_get_ecn_mode";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_parameters_get_ecn_mode";
          _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v16 = "nw_parameters_get_ecn_mode";
            __int16 v17 = 2082;
            os_log_type_t v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v5) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_parameters_get_ecn_mode";
          _os_log_impl(&dword_181A5C000, v6, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_parameters_get_ecn_mode";
          _os_log_impl( &dword_181A5C000,  v6,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v5)
    {
LABEL_10:
      uint64_t v3 = 0LL;
      goto LABEL_11;
    }

BOOL nw_parameters_get_tfo(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    id v4 = v3;
    if (v3) {
      BOOL enable_fast_open = nw_tcp_options_get_enable_fast_open(v3);
    }
    else {
      BOOL enable_fast_open = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_tfo";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_tfo";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_tfo";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_tfo";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_tfo";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181ACA7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_is_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 98) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_is_fallback";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_fallback";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_is_fallback";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_fallback";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_fallback";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_is_known_tracker(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 14) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_is_known_tracker";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_is_known_tracker";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_is_known_tracker";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_is_known_tracker";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_is_known_tracker";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_is_third_party_web_content(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 15;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_is_third_party_web_content";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_third_party_web_content";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_is_third_party_web_content";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_third_party_web_content";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_third_party_web_content";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_is_approved_app_domain(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(_BYTE *)(*((void *)v1 + 13) + 110LL) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_is_approved_app_domain";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_approved_app_domain";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_is_approved_app_domain";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_approved_app_domain";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_approved_app_domain";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_no_wake_from_sleep(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 7) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_no_wake_from_sleep";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_wake_from_sleep";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_no_wake_from_sleep";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_wake_from_sleep";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_wake_from_sleep";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_use_enhanced_privacy_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int8 *)(*((void *)v1 + 13) + 110LL) >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_web_search_content(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int8 *)(*((void *)v1 + 13) + 110LL) >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_web_search_content";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_web_search_content";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_web_search_content";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_web_search_content";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_web_search_content";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_required_address_family(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_parameters_get_required_address_family";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_parameters_get_required_address_family";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v22 = "nw_parameters_get_required_address_family";
            __int16 v23 = 2082;
            uint64_t v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_parameters_get_required_address_family";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_parameters_get_required_address_family";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181ACBD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_get_version_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

void nw_protocol_stack_iterate_application_protocols( nw_protocol_stack_t stack, nw_protocol_stack_iterate_protocols_block_t iterate_block)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  nw_protocol_stack_t v3 = stack;
  nw_protocol_stack_iterate_protocols_block_t v4 = iterate_block;
  id v5 = v4;
  if (v3)
  {
    id v6 = (unsigned __int8 *)*((void *)v3 + 1);
    uint64_t v7 = MEMORY[0x1895F87A8];
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 3221225472LL;
    v20[2] = __nw_protocol_stack_iterate_application_protocols_block_invoke;
    v20[3] = &unk_189BC8628;
    id v8 = v4;
    id v21 = v8;
    nw_array_apply(v6, (uint64_t)v20);
    uint64_t v9 = (unsigned __int8 *)*((void *)v3 + 2);
    v18[0] = v7;
    v18[1] = 3221225472LL;
    v18[2] = __nw_protocol_stack_iterate_application_protocols_block_invoke_2;
    v18[3] = &unk_189BC8628;
    id v19 = v8;
    nw_array_apply(v9, (uint64_t)v18);

    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v25 = "nw_protocol_stack_iterate_application_protocols";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v23 = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v11, &v23, &v22))
  {
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v23;
      if (os_log_type_enabled(v12, v23))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_protocol_stack_iterate_application_protocols";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v23;
      BOOL v16 = os_log_type_enabled(v12, v23);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_protocol_stack_iterate_application_protocols";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_protocol_stack_iterate_application_protocols";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v23;
      if (os_log_type_enabled(v12, v23))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_protocol_stack_iterate_application_protocols";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_protocol_stack_iterate_application_protocols_block_invoke_2(uint64_t a1)
{
  return 1LL;
}

void __nw_path_create_necp_parameters_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  size_t __n = 0LL;
  uint64_t v4 = nw_protocol_options_copy_serialized_bytes(v3, (uint64_t)&__n, 1);
  id v5 = (void *)v4;
  if (!v4 || (size_t v6 = __n) == 0)
  {
    if (!v4)
    {
LABEL_10:

      return;
    }

void sub_181ACC354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_options_copy_serialized_bytes(void *a1, uint64_t a2, int a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  size_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    size_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
    xpc_object_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null options", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v14,  v27,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_59;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
      __int16 v35 = 2082;
      int8x16_t v36 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_41;
  }

  if (!a2)
  {
    __nwlog_obj();
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
    xpc_object_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null serialized_length", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s called with null serialized_length, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_59;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null serialized_length, no backtrace",  buf,  0xCu);
      }

      goto LABEL_59;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
      __int16 v35 = 2082;
      int8x16_t v36 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null serialized_length, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_41;
  }

  uint64_t v7 = v5[1];
  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
    xpc_object_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null options->definition", buf, 0xCu);
      }

void sub_181ACCA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_struct_size_for_endpoint_and_metadata(void *a1, unint64_t *a2, char a3)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  nw_endpoint_type_t v6 = nw_endpoint_get_type(v5);
  nw_txt_record_t v7 = nw_endpoint_copy_txt_record(v5);
  switch(v6)
  {
    case 1u:
      address = nw_endpoint_get_address(v5);
      if (a2)
      {
        if (address) {
          unint64_t sa_len = address->sa_len;
        }
        else {
          unint64_t sa_len = 0LL;
        }
        *a2 = sa_len;
      }

      if (address)
      {
        unint64_t v9 = address->sa_len;
        if (!v7) {
          goto LABEL_77;
        }
      }

      else
      {
        unint64_t v9 = 0LL;
        if (!v7)
        {
LABEL_77:
          if (a2) {
            goto LABEL_5;
          }
          goto LABEL_6;
        }
      }

      unint64_t v9 = *((void *)v7 + 2) + 28LL;
      goto LABEL_77;
    case 2u:
    case 5u:
      BOOL domain_for_policy = nw_endpoint_get_domain_for_policy(v5);
      if (domain_for_policy)
      {
        unint64_t v9 = strlen((const char *)domain_for_policy) + 9;
        if (v7) {
          goto LABEL_4;
        }
      }

      else
      {
        unint64_t v9 = 9LL;
        if (v7)
        {
LABEL_4:
          v9 += *((void *)v7 + 2);
          if (!a2) {
            goto LABEL_6;
          }
          goto LABEL_5;
        }
      }

      if (a2) {
        goto LABEL_5;
      }
      goto LABEL_6;
    case 3u:
      bonjour_service_name = nw_endpoint_get_bonjour_service_name(v5);
      bonjour_service_os_log_type_t type = nw_endpoint_get_bonjour_service_type(v5);
      bonjour_service_domain = nw_endpoint_get_bonjour_service_domain(v5);
      if (bonjour_service_name)
      {
        size_t v29 = strlen(bonjour_service_name) + 9;
        if (bonjour_service_type) {
          goto LABEL_40;
        }
      }

      else
      {
        size_t v29 = 9LL;
        if (bonjour_service_type)
        {
LABEL_40:
          size_t v30 = strlen(bonjour_service_type) + 1;
          if (bonjour_service_domain) {
            goto LABEL_41;
          }
          goto LABEL_60;
        }
      }

      size_t v30 = 1LL;
      if (bonjour_service_domain)
      {
LABEL_41:
        size_t v31 = strlen(bonjour_service_domain) + 1;
        if (v7)
        {
LABEL_42:
          uint64_t v32 = *((void *)v7 + 2);
          goto LABEL_62;
        }

LABEL_60:
      size_t v31 = 1LL;
      if (v7) {
        goto LABEL_42;
      }
      goto LABEL_61;
    case 4u:
      url = nw_endpoint_get_url(v5);
      if (url)
      {
        unint64_t v9 = strlen(url) + 9;
        if (a2) {
          goto LABEL_5;
        }
      }

      else
      {
        unint64_t v9 = 9LL;
        if (a2) {
          goto LABEL_5;
        }
      }

      goto LABEL_6;
    case 6u:
      application_service_alias = (const char *)nw_endpoint_get_application_service_alias(v5);
      application_service_name = (const char *)nw_endpoint_get_application_service_name(v5);
      nw_endpoint_get_service_identifier(v5, uu);
      device_name = (const char *)nw_endpoint_get_device_name(v5);
      device_model = (const char *)nw_endpoint_get_device_model(v5);
      contact_id = (const char *)nw_endpoint_get_contact_id(v5);
      if (application_service_alias)
      {
        size_t v38 = strlen(application_service_alias) + 9;
        if (application_service_name) {
          goto LABEL_45;
        }
      }

      else
      {
        size_t v38 = 9LL;
        if (application_service_name)
        {
LABEL_45:
          size_t v39 = strlen(application_service_name) + 1;
          if (device_name) {
            goto LABEL_46;
          }
          goto LABEL_66;
        }
      }

      size_t v39 = 1LL;
      if (device_name)
      {
LABEL_46:
        size_t v40 = strlen(device_name) + 1;
        if (device_model) {
          goto LABEL_47;
        }
        goto LABEL_67;
      }

    if (v18) {
      free(v18);
    }
    return 0LL;
  }

  nw_parameters_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    id v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v3 + 1;
    }
  }

  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    id v5 = *(uint64_t (**)(uint64_t))(v4 + 136);
    if (v5)
    {
      nw_endpoint_type_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }

  __nwlog_obj();
  size_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  uint64_t v32 = "__nw_protocol_get_remote_endpoint";
  if (!v12) {
    size_t v12 = "invalid";
  }
  os_log_type_t v33 = 2082;
  uint64_t v34 = (void *)v12;
  __int16 v35 = 2048;
  int8x16_t v36 = a1;
  size_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  size_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_remote_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v16;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }

  if (!v29)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_remote_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v27;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
    goto LABEL_50;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  id v14 = (os_log_s *)__nwlog_obj();
  uint64_t v15 = type;
  os_log_type_t v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_remote_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v28;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
    goto LABEL_50;
  }

  if (v23)
  {
    BOOL v24 = *(const char **)(a1 + 16);
    if (!v24) {
      BOOL v24 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v32 = "__nw_protocol_get_remote_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v24;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    uint64_t v37 = 2082;
    size_t v38 = v22;
    _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  nw_endpoint_type_t v6 = 0LL;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      nw_protocol_definition_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        unint64_t v9 = v8 - 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0LL;
            v10[2](v10);
            _Block_release(v10);
          }

          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }

          free((void *)a1);
        }
      }
    }
  }

  return v6;
}

    if (v18) {
      free(v18);
    }
    return 0LL;
  }

  nw_parameters_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    id v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v3 + 1;
    }
  }

  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    id v5 = *(uint64_t (**)(uint64_t))(v4 + 112);
    if (v5)
    {
      nw_endpoint_type_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }

  __nwlog_obj();
  size_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  uint64_t v32 = "__nw_protocol_get_parameters";
  if (!v12) {
    size_t v12 = "invalid";
  }
  os_log_type_t v33 = 2082;
  uint64_t v34 = (void *)v12;
  __int16 v35 = 2048;
  int8x16_t v36 = a1;
  size_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  size_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_parameters";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v16;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }

  if (!v29)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_parameters";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v27;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
    goto LABEL_50;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  id v14 = (os_log_s *)__nwlog_obj();
  uint64_t v15 = type;
  os_log_type_t v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_parameters";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v28;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
    goto LABEL_50;
  }

  if (v23)
  {
    BOOL v24 = *(const char **)(a1 + 16);
    if (!v24) {
      BOOL v24 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v32 = "__nw_protocol_get_parameters";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v24;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    uint64_t v37 = 2082;
    size_t v38 = v22;
    _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  nw_endpoint_type_t v6 = 0LL;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      nw_protocol_definition_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        unint64_t v9 = v8 - 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0LL;
            v10[2](v10);
            _Block_release(v10);
          }

          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }

          free((void *)a1);
        }
      }
    }
  }

  return v6;
}

    if (v58) {
      free(v58);
    }
    nw_endpoint_type_t v6 = 0LL;
    goto LABEL_35;
  }

  if (!v4)
  {
    nw_endpoint_type_t v6 = v3;
LABEL_35:

    return (BOOL)v6;
  }

  nw_endpoint_type_t v6 = nw_path_create(*((void **)v3 + 3), *((void **)v3 + 2));
  if (!v6)
  {
LABEL_34:

    goto LABEL_35;
  }

  if (*((void *)v3 + 9))
  {
    nw_txt_record_t v7 = nw_array_create();
    flows = v6->flows;
    v6->flows = (OS_nw_array *)v7;

    unint64_t v9 = (unsigned __int8 *)*((void *)v3 + 9);
    v74[0] = MEMORY[0x1895F87A8];
    v74[1] = 3221225472LL;
    v74[2] = __nw_path_copy_for_flow_registration_block_invoke;
    v74[3] = &unk_189BC5030;
    uint64_t v75 = v5;
    uint64_t v76 = v6;
    nw_array_apply(v9, (uint64_t)v74);
  }

  *(_OWORD *)v6->flow_registration_id = *((_OWORD *)v5 + 2);
  *(_OWORD *)v6->client_id = *(_OWORD *)(v3 + 120);
  *(_OWORD *)v6->fallback_agent = *(_OWORD *)(v3 + 152);
  uint64_t v10 = (const char *)*((void *)v3 + 31);
  if (!v10)
  {
    __nwlog_obj();
    nw_endpoint_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v80 = "strict_strdup";
    uint64_t v73 = buf;
    v65 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v65);
    if (result) {
      goto LABEL_63;
    }
    free(v65);
  }

  uint64_t v11 = strdup(v10);
  if (!v11)
  {
    __nwlog_obj();
    id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v66, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v80 = "strict_strdup";
    uint64_t v73 = buf;
    v67 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v67);
    if (result) {
      goto LABEL_63;
    }
    free(v67);
  }

  v6->reason_description = v11;
  size_t v12 = *(_OWORD *)(v3 + 280);
  *(_OWORD *)&v6->policy_result.routing_BOOL result = *(_OWORD *)(v3 + 264);
  *(_OWORD *)v6->policy_result.service_uuid = v12;
  size_t v13 = *(_OWORD *)(v3 + 296);
  id v14 = *(_OWORD *)(v3 + 312);
  uint64_t v15 = *(_OWORD *)(v3 + 344);
  *(_OWORD *)&v6->policy_result.direct_interface_generation = *(_OWORD *)(v3 + 328);
  *(_OWORD *)&v6->policy_result.num_interface_options = v15;
  *(_OWORD *)&v6->policy_result.netagents = v13;
  *(_OWORD *)&v6->policy_result.service_flags = v14;
  uint64_t v16 = *((unsigned int *)v3 + 87);
  if ((_DWORD)v16 && *((void *)v3 + 37))
  {
    os_log_type_t v17 = 20 * v16;
    os_log_type_t v18 = (necp_client_result_netagent *)malloc(20 * v16);
    if (!v18)
    {
      __nwlog_obj();
      id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "strict_malloc";
      __int16 v81 = 2048;
      os_log_type_t v82 = v17;
      uint64_t v73 = buf;
      os_log_type_t v70 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v70);
      if (result) {
        goto LABEL_63;
      }
      free(v70);
      os_log_type_t v17 = 20LL * *((unsigned int *)v3 + 87);
      os_log_type_t v18 = 0LL;
    }

    v6->policy_result.netagents = v18;
    memcpy(v18, *((const void **)v3 + 37), v17);
  }

  os_log_type_t v19 = *((unsigned int *)v3 + 86);
  if (!(_DWORD)v19 || !*((void *)v3 + 38))
  {
LABEL_16:
    objc_storeStrong((id *)&v6->group_descriptor, *((id *)v3 + 4));
    objc_storeStrong((id *)&v6->browse_descriptor, *((id *)v3 + 5));
    objc_storeStrong((id *)&v6->discovered_endpoints, *((id *)v3 + 7));
    objc_storeStrong((id *)&v6->resolved_endpoints, *((id *)v3 + 8));
    objc_storeStrong((id *)&v6->direct, *((id *)v3 + 12));
    objc_storeStrong((id *)&v6->delegate, *((id *)v3 + 13));
    objc_storeStrong((id *)&v6->fallback_interface, *((id *)v3 + 14));
    objc_storeStrong((id *)&v6->fallback_agent_domains, *((id *)v3 + 21));
    objc_storeStrong((id *)&v6->fallback_agent_types, *((id *)v3 + 22));
    objc_storeStrong((id *)&v6->resolver_configs, *((id *)v3 + 23));
    objc_storeStrong((id *)&v6->network_agent_dictionary, *((id *)v3 + 28));
    objc_storeStrong((id *)&v6->proxy_settings, *((id *)v3 + 30));
    objc_storeStrong((id *)&v6->proxy_configs, *((id *)v3 + 29));
    BOOL v22 = *((_BYTE *)v6 + 476) & 0xFB | (4 * ((v3[476] >> 2) & 1));
    *((_BYTE *)v6 + 476) = v22;
    v6->effective_mtu = *((_DWORD *)v3 + 90);
    v6->effective_traffic_class = *((_DWORD *)v3 + 91);
    *(void *)&v6->status = *((void *)v3 + 47);
    v6->recommended_mss = v3[472];
    os_log_type_t v23 = *((_BYTE *)v6 + 473) & 0xFE | v3[473] & 1;
    *((_BYTE *)v6 + 473) = v23;
    BOOL v24 = v23 & 0xFFFFFFFD | (2 * ((v3[473] >> 1) & 1));
    *((_BYTE *)v6 + 473) = v24;
    os_log_type_t v25 = v24 & 0xFFFFFFEF | (16 * ((v3[473] >> 4) & 1));
    *((_BYTE *)v6 + 473) = v25;
    BOOL v26 = v25 & 0xFFFFFFDF | (32 * ((v3[473] >> 5) & 1));
    *((_BYTE *)v6 + 473) = v26;
    LOBYTE(v26) = v26 & 0xBF | (((v3[473] & 0x40) != 0) << 6);
    *((_BYTE *)v6 + 473) = v26;
    *((_BYTE *)v6 + 473) = v3[473] & 0x80 | v26 & 0x7F;
    os_log_type_t v27 = *((_BYTE *)v6 + 474) & 0xFE | v3[474] & 1;
    *((_BYTE *)v6 + 474) = v27;
    os_log_type_t v28 = v27 & 0xFFFFFFFD | (2 * ((v3[474] >> 1) & 1));
    *((_BYTE *)v6 + 474) = v28;
    size_t v29 = v28 & 0xFFFFFFFB | (4 * ((v3[474] >> 2) & 1));
    *((_BYTE *)v6 + 474) = v29;
    size_t v30 = v29 & 0xFFFFFFF7 | (8 * ((v3[474] >> 3) & 1));
    *((_BYTE *)v6 + 474) = v30;
    size_t v31 = v30 & 0xFFFFFFEF | (16 * ((v3[474] >> 4) & 1));
    *((_BYTE *)v6 + 474) = v31;
    uint64_t v32 = v31 & 0xFFFFFFDF | (32 * ((v3[474] >> 5) & 1));
    *((_BYTE *)v6 + 474) = v32;
    os_log_type_t v33 = v32 & 0xFFFFFFBF | (((v3[474] >> 6) & 1) << 6);
    *((_BYTE *)v6 + 474) = v33;
    *((_BYTE *)v6 + 474) = v3[474] & 0x80 | v33 & 0x7F;
    uint64_t v34 = v22 & 0xFFFFFFF7 | (8 * ((v3[476] >> 3) & 1));
    *((_BYTE *)v6 + 476) = v34;
    __int16 v35 = v34 & 0xFFFFFFEF | (16 * ((v3[476] >> 4) & 1));
    *((_BYTE *)v6 + 476) = v35;
    int8x16_t v36 = v35 & 0xFFFFFFDF | (32 * ((v3[476] >> 5) & 1));
    *((_BYTE *)v6 + 476) = v36;
    *((_BYTE *)v6 + 476) = v36 & 0xBF | v3[476] & 0x40;
    objc_storeStrong((id *)&v6->gateways, *((id *)v3 + 26));
    v6->nat64_prefixes[0].ipv6_prefix = *(in6_addr *)(v3 + 392);
    size_t v42 = *(_OWORD *)(v3 + 408);
    uint64_t v43 = *(in6_addr *)(v3 + 424);
    char v44 = *(in6_addr *)(v3 + 456);
    *(in6_addr *)((char *)&v6->nat64_prefixes[2].ipv6_prefix + _Block_object_dispose(va, 8) = *(in6_addr *)(v3 + 440);
    *(in6_addr *)((char *)&v6->nat64_prefixes[3].ipv6_prefix + 4) = v44;
    *(_OWORD *)&v6->nat64_prefixes[0].prefix_len = v42;
    *(in6_addr *)((char *)&v6->nat64_prefixes[1].ipv6_prefix + 12) = v43;
    char v45 = *((_DWORD *)v5 + 36);
    if (v45 && !*((_DWORD *)v3 + 91))
    {
      v6->effective_traffic_class = v45;
      unsigned __int8 v46 = (OS_nw_array *)*((void *)v5 + 3);
      if (!v46) {
        goto LABEL_22;
      }
    }

    else
    {
      unsigned __int8 v46 = (OS_nw_array *)*((void *)v5 + 3);
      if (!v46) {
        goto LABEL_22;
      }
    }

    os_log_type_t v47 = nw_array_create();
    if ((OS_nw_array *)v47 != v46)
    {
      os_log_type_t v48 = (OS_nw_array *)v47;
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v47 + 16,  (void **)&v46[2].super.super.isa->isa,  (void **)&v46[3].super.super.isa->isa,  v46[3].super.super.isa - v46[2].super.super.isa);
      unsigned __int8 v46 = v48;
    }

    override_extra_interface_options = v6->override_extra_interface_options;
    v6->override_extra_interface_options = v46;

LABEL_22:
    os_log_type_t v50 = *((_BYTE *)v6 + 475) & 0xF7 | (8 * ((v5[148] >> 3) & 1));
    *((_BYTE *)v6 + 475) = v50;
    size_t v51 = v50 & 0xFFFFFFEF | (16 * ((v5[148] >> 4) & 1));
    *((_BYTE *)v6 + 475) = v51;
    LOBYTE(v51) = v51 & 0xBF | (((v5[148] & 0x20) != 0) << 6);
    *((_BYTE *)v6 + 475) = v51;
    *((_BYTE *)v6 + 475) = (2 * v5[148]) & 0x80 | v51 & 0x7F;
    *((_BYTE *)v6 + 476) = *((_BYTE *)v6 + 476) & 0xFD | (v5[148] >> 6) & 2;
    uint64_t v52 = (char)v5[148];
    if (v52 < 0)
    {
      if ((v52 & 0x60) != 0)
      {
        __int128 v53 = "Proxy used prohibited interface type";
        __int128 v54 = 6;
LABEL_32:
        nw_path_set_reason(v6, v54, v53, v37, v38, v39, v40, v41, (char)v73);
        goto LABEL_33;
      }

      if ((v52 & 8) != 0)
      {
        __int128 v53 = "Proxy used prohibited expensive path";
        __int128 v54 = 5;
        goto LABEL_32;
      }

      if ((v52 & 0x10) != 0)
      {
        __int128 v53 = "Proxy used prohibited constrained path";
        __int128 v54 = 26;
        goto LABEL_32;
      }
    }

    goto LABEL_61;
  }

  if (!a3)
  {
    __nwlog_obj();
    size_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    size_t v31 = "nw_path_flow_registration_set_stats_region";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null protocol_identifier", buf, 0xCu);
      }

      goto LABEL_60;
    }

    if (!v28)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl( &dword_181A5C000,  v11,  v26,  "%{public}s called with null protocol_identifier, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    id v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        size_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null protocol_identifier, no backtrace",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      size_t v31 = "nw_path_flow_registration_set_stats_region";
      uint64_t v32 = 2082;
      os_log_type_t v33 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_41;
  }

  if ((a2 & 0xFFFFFFFE) != 2)
  {
    __nwlog_obj();
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    size_t v31 = "nw_path_flow_registration_set_stats_region";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null (level == nw_protocol_level_internet || level == nw_protocol_level_transport)",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    if (!v28)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null (level == nw_protocol_level_internet || level == nw_protocol_level_transport), bac ktrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    id v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        size_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null (level == nw_protocol_level_internet || level == nw_protocol_level_transport), no backtrace",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      size_t v31 = "nw_path_flow_registration_set_stats_region";
      uint64_t v32 = 2082;
      os_log_type_t v33 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null (level == nw_protocol_level_internet || level == nw_protocol_level_transport), dumpi ng backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_20;
  }

  *(void *)uint64_t v37 = 0LL;
  nw_protocol_definition_t v8 = nw_parameters_copy_context(v5[2]);
  unint64_t v9 = nw_path_shared_necp_fd(v8);

  if (v9 < 0) {
    goto LABEL_30;
  }
  *(_WORD *)uint64_t v37 = 257;
  size_t v38 = a3;
  *(_DWORD *)&v37[4] = 1;
  uint64_t v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v11 = (os_log_s *)(id)gLogObj;
  size_t v12 = v11;
  if (v10 != 2)
  {
    *(_DWORD *)buf = 136446466;
    size_t v41 = "nw_path_flow_registration_set_ecn_cache";
    size_t v42 = 1024;
    *(_DWORD *)uint64_t v43 = v10;
    size_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int8x16_t v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)(id)gLogObj;
      uint64_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446466;
        size_t v41 = "nw_path_flow_registration_set_ecn_cache";
        size_t v42 = 1024;
        *(_DWORD *)uint64_t v43 = v10;
        _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s necp update cache failed for ecn %{darwin.errno}d",  buf,  0x12u);
      }

    if (v38) {
      free(v38);
    }
    mode = 0;
LABEL_63:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v45 = (id)gLogObj;
    if (mode > 5) {
      unsigned __int8 v46 = "unknown-mode";
    }
    else {
      unsigned __int8 v46 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    id v66 = "nw_endpoint_flow_add_initial_write_request";
    v67 = 2082;
    char v68 = (void *)v46;
    id v69 = 2082;
    os_log_type_t v70 = "flow";
    os_log_type_t v47 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v63 = 0;
    if (__nwlog_fault((const char *)v47, &type, &v63))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v48 = (os_log_s *)(id)gLogObj;
        BOOL v49 = type;
        if (os_log_type_enabled(v48, type))
        {
          if (mode > 5) {
            os_log_type_t v50 = "unknown-mode";
          }
          else {
            os_log_type_t v50 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          id v66 = "nw_endpoint_flow_add_initial_write_request";
          v67 = 2082;
          char v68 = (void *)v50;
          id v69 = 2082;
          os_log_type_t v70 = "flow";
          _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v63)
      {
        size_t v51 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v48 = (os_log_s *)(id)gLogObj;
        uint64_t v52 = type;
        __int128 v53 = os_log_type_enabled(v48, type);
        if (v51)
        {
          if (v53)
          {
            if (mode > 5) {
              __int128 v54 = "unknown-mode";
            }
            else {
              __int128 v54 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            id v66 = "nw_endpoint_flow_add_initial_write_request";
            v67 = 2082;
            char v68 = (void *)v54;
            id v69 = 2082;
            os_log_type_t v70 = "flow";
            BOOL v71 = 2082;
            __int16 v72 = v51;
            _os_log_impl( &dword_181A5C000,  v48,  v52,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v51);
          if (!v47) {
            goto LABEL_84;
          }
LABEL_83:
          free(v47);
          goto LABEL_84;
        }

        if (v53)
        {
          if (mode > 5) {
            char v57 = "unknown-mode";
          }
          else {
            char v57 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          id v66 = "nw_endpoint_flow_add_initial_write_request";
          v67 = 2082;
          char v68 = (void *)v57;
          id v69 = 2082;
          os_log_type_t v70 = "flow";
          _os_log_impl( &dword_181A5C000,  v48,  v52,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v48 = (os_log_s *)(id)gLogObj;
        __int128 v55 = type;
        if (os_log_type_enabled(v48, type))
        {
          if (mode > 5) {
            __int128 v56 = "unknown-mode";
          }
          else {
            __int128 v56 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          id v66 = "nw_endpoint_flow_add_initial_write_request";
          v67 = 2082;
          char v68 = (void *)v56;
          id v69 = 2082;
          os_log_type_t v70 = "flow";
          _os_log_impl( &dword_181A5C000,  v48,  v55,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v47) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }

  mode = v1->mode;

  if (mode != 2) {
    goto LABEL_63;
  }
  uint64_t v4 = v2;
  state = v4->state;

  if ((state & 0xFFFFFFFE) != 4)
  {
    nw_endpoint_type_t v6 = nw_endpoint_handler_copy_flow(v4);
    if ((*((_BYTE *)v6 + 33) & 0x10) != 0)
    {
LABEL_43:

      goto LABEL_84;
    }

    nw_txt_record_t v7 = v4;
    nw_protocol_definition_t v8 = v7[4];

    if (!nw_parameters_has_initial_data_payload(v8))
    {
LABEL_42:

      goto LABEL_43;
    }

    unint64_t v9 = (dispatch_data_s *)nw_parameters_copy_initial_data_payload(v8);
    size = dispatch_data_get_size(v9);
    __int16 v61 = v9;
    uint64_t v11 = nw_write_request_create_idempotent(v9, &__block_literal_global_41831, 0LL, 1);
    BOOL v62 = v11;
    if (v11)
    {
      size_t v12 = v7;
      size_t v13 = *((_BYTE *)v12 + 268);

      if ((v13 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v14 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v60 = size;
          id_string = nw_endpoint_handler_get_id_string(v12);
          BOOL v58 = nw_endpoint_handler_dry_run_string(v12);
          os_log_type_t v59 = nw_endpoint_handler_copy_endpoint(v12);
          logging_description = nw_endpoint_get_logging_description(v59);
          os_log_type_t v17 = nw_endpoint_handler_state_string(v12);
          os_log_type_t v18 = nw_endpoint_handler_mode_string(v12);
          os_log_type_t v19 = nw_endpoint_handler_copy_current_path(v12);
          *(_DWORD *)buf = 136448002;
          id v66 = "nw_endpoint_flow_add_initial_write_request";
          v67 = 2082;
          char v68 = (void *)id_string;
          id v69 = 2082;
          os_log_type_t v70 = v58;
          BOOL v71 = 2082;
          __int16 v72 = (void *)logging_description;
          uint64_t v73 = 2082;
          __int16 v74 = v17;
          uint64_t v75 = 2082;
          uint64_t v76 = v18;
          os_log_type_t v77 = 2114;
          os_log_type_t v78 = v19;
          v79 = 2048;
          os_log_type_t v80 = v60;
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Writing initial payload of size %zu",  buf,  0x52u);
        }

        uint64_t v11 = v62;
      }

      *((_BYTE *)v6 + 33) |= 0x10u;
      id v20 = nw_write_request_list_append(*((void **)v6 + 71), v11);
      os_log_type_t v21 = (void *)*((void *)v6 + 71);
      *((void *)v6 + 71) = v20;

      os_unfair_lock_lock((os_unfair_lock_t)v6 + 220);
      BOOL v22 = v62;
      data = (dispatch_data_s *)v22->data;
      fd = v22->fd;
      if (data)
      {
        if (!fd)
        {
          num_bytes = dispatch_data_get_size(data);
LABEL_23:
          consumed_bytes = v22->consumed_bytes;
          if (num_bytes <= consumed_bytes) {
            LODWORD(consumed_bytes) = 0;
          }
          size_t v31 = num_bytes - consumed_bytes;
          goto LABEL_26;
        }
      }

      else if (!fd)
      {
        size_t v31 = 0;
LABEL_26:

        *((_DWORD *)v6 + 224) += v31;
        os_unfair_lock_unlock((os_unfair_lock_t)v6 + 220);
LABEL_41:

        goto LABEL_42;
      }

      num_bytes = v22->num_bytes;
      goto LABEL_23;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v26 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v66 = "nw_endpoint_flow_add_initial_write_request";
    os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v63 = 0;
    if (__nwlog_fault(v27, &type, &v63))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          id v66 = "nw_endpoint_flow_add_initial_write_request";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s network_write_request_create failed", buf, 0xCu);
        }
      }

      else
      {
        if (v63)
        {
          uint64_t v32 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v34 = type;
          __int16 v35 = os_log_type_enabled(v33, type);
          if (v32)
          {
            if (v35)
            {
              *(_DWORD *)buf = 136446466;
              id v66 = "nw_endpoint_flow_add_initial_write_request";
              v67 = 2082;
              char v68 = v32;
              _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s network_write_request_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v32);
          }

          else
          {
            if (v35)
            {
              *(_DWORD *)buf = 136446210;
              id v66 = "nw_endpoint_flow_add_initial_write_request";
              _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s network_write_request_create failed, no backtrace",  buf,  0xCu);
            }
          }

          goto LABEL_39;
        }

        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int8x16_t v36 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          id v66 = "nw_endpoint_flow_add_initial_write_request";
          _os_log_impl( &dword_181A5C000,  v28,  v36,  "%{public}s network_write_request_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    free(v24);
    if (!v15) {
      goto LABEL_93;
    }
LABEL_91:
    size_t v51 = (char *)v15;
LABEL_92:
    free(v51);
    goto LABEL_93;
  }

  unint64_t v9 = node;
  uint64_t internal = *((void *)v3 + 6);
  if (!internal)
  {
    uint64_t internal = nw_hash_table_create_internal( 7u,  16,  (const void *(*)(const void *, unsigned int *))nw_association_get_key,  (unsigned int (*)(const void *, unsigned int))nw_association_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_association_matches_key,  (void (*)(void *))nw_association_release);
    *((void *)v3 + 6) = internal;
  }

  if (nw_hash_table_get_node(internal, (uint64_t)v5, 0LL))
  {
    if (!nw_path_parameters_get_logging_disabled(*((void *)v3 + 2)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v11 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        size_t v12 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        BOOL v71 = "nw_association_mark_flow_connected";
        __int16 v72 = 2082;
        uint64_t v73 = (void *)v12;
        __int16 v74 = 2048;
        uint64_t v75 = v5;
        _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s <nw_association %{public}s> already has connected flow %p registered",  buf,  0x20u);
      }
    }

    goto LABEL_93;
  }

  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  os_log_type_t v27 = *((void *)v3 + 6);
  os_log_type_t v28 = v5;
  nw_hash_table_add_object(v27, (uint64_t)v28, (char *)&type);
  if (type || nw_path_parameters_get_logging_disabled(*((void *)v3 + 2))) {
    goto LABEL_93;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  size_t v29 = (id)gconnectionLogObj;
  size_t v30 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
  *(_DWORD *)buf = 136446978;
  BOOL v71 = "nw_association_mark_flow_connected";
  __int16 v72 = 2082;
  uint64_t v73 = (void *)v30;
  __int16 v74 = 2048;
  uint64_t v75 = v28;
  uint64_t v76 = 2048;
  os_log_type_t v77 = (char *)v9;
  size_t v31 = (const char *)_os_log_send_and_compose_impl();

  char v68 = OS_LOG_TYPE_ERROR;
  v67 = 0;
  if (v68 == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v32 = (os_log_s *)(id)gconnectionLogObj;
    os_log_type_t v33 = v68;
    if (os_log_type_enabled(v32, v68))
    {
      uint64_t v34 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446978;
      BOOL v71 = "nw_association_mark_flow_connected";
      __int16 v72 = 2082;
      uint64_t v73 = (void *)v34;
      __int16 v74 = 2048;
      uint64_t v75 = v28;
      uint64_t v76 = 2048;
      os_log_type_t v77 = (char *)v9;
      _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s <nw_association %{public}s> failed to add new connected flow for %p (node %p)",  buf,  0x2Au);
    }

    goto LABEL_61;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(aBlock[0]) = 136446210;
    *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
    id v20 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v33) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        LODWORD(aBlock[0]) = 136446210;
        *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s called with null report", (uint8_t *)aBlock, 0xCu);
      }
    }

    else if ((_BYTE)v33)
    {
      os_log_type_t v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v29 = type[0];
      size_t v30 = os_log_type_enabled(v21, type[0]);
      if (v28)
      {
        if (v30)
        {
          LODWORD(aBlock[0]) = 136446466;
          *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
          WORD6(aBlock[0]) = 2082;
          *(void *)((char *)aBlock + 14) = v28;
          _os_log_impl( &dword_181A5C000,  v21,  v29,  "%{public}s called with null report, dumping backtrace:%{public}s",  (uint8_t *)aBlock,  0x16u);
        }

        free(v28);
        if (!v20) {
          goto LABEL_23;
        }
LABEL_62:
        free(v20);
        goto LABEL_23;
      }

      if (v30)
      {
        LODWORD(aBlock[0]) = 136446210;
        *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v21,  v29,  "%{public}s called with null report, no backtrace",  (uint8_t *)aBlock,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v32 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        LODWORD(aBlock[0]) = 136446210;
        *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null report, backtrace limit exceeded",  (uint8_t *)aBlock,  0xCu);
      }
    }

    goto LABEL_60;
  }

  nw_context_assert_queue(v3[3]);
  if ((*((_BYTE *)v3 + 109) & 0x40) != 0)
  {
    nw_endpoint_type_t v6 = nw_endpoint_handler_copy_connected_flow_handler(v3[18]);
    if (v6)
    {
      nw_txt_record_t v7 = mach_continuous_time();
      if (v7 <= 1) {
        nw_protocol_definition_t v8 = 1LL;
      }
      else {
        nw_protocol_definition_t v8 = v7;
      }
      unint64_t v9 = v5;
      *(void *)&aBlock[0] = MEMORY[0x1895F87A8];
      *((void *)&aBlock[0] + 1) = 3221225472LL;
      *(void *)&aBlock[1] = __nw_data_transfer_set_initial_snapshot_time_block_invoke;
      *((void *)&aBlock[1] + 1) = &unk_189BC66E8;
      uint64_t v10 = v9;
      *(void *)&uint64_t v37 = v10;
      *((void *)&v37 + 1) = v8;
      uint64_t v11 = (void (**)(void))_Block_copy(aBlock);
      v9 += 10;
      os_unfair_lock_lock(v9);
      v11[2](v11);
      os_unfair_lock_unlock(v9);

      __int16 v35 = 0;
      os_log_type_t v33 = 0LL;
      *(void *)os_log_type_t type = 0LL;
      nw_connection_fillout_data_transfer_snapshot_on_nw_queue(v3, (uint64_t *)&v33, type, &v35, 1);
      size_t v12 = v6;
      os_unfair_lock_lock(&v12->lock);
      size_t v13 = v12->current_path;
      os_unfair_lock_unlock(&v12->lock);

      id v14 = nw_path_copy_interface(v13);
      if (v14)
      {
        if (v33 && __ROR8__(0xD37A6F4DE9BD37A7LL * *(void *)type, 3) <= 0x1642C8590B21642uLL)
        {
          if (*(void *)type >= 0xB8uLL)
          {
            os_log_type_t v17 = 0LL;
            os_log_type_t v18 = 0LL;
            do
            {
              nw_data_transfer_add_initial_snapshot(v10, v14, (NWConcrete_nw_interface **)((char *)v33 + v17));
              ++v18;
              v17 += 184LL;
            }

            while (v18 < *(void *)type / 0xB8uLL);
          }
        }

        else
        {
          unsigned __int8 v46 = 0LL;
          char v44 = 0u;
          char v45 = 0u;
          size_t v42 = 0u;
          uint64_t v43 = 0u;
          size_t v40 = 0u;
          size_t v41 = 0u;
          size_t v38 = 0u;
          size_t v39 = 0u;
          uint64_t v37 = 0u;
          memset(aBlock, 0, sizeof(aBlock));
          nw_data_transfer_add_initial_snapshot(v10, v14, (NWConcrete_nw_interface **)aBlock);
        }
      }

      if (v35 && v33)
      {
        free(v33);
        os_log_type_t v33 = 0LL;
      }

LABEL_22:
      goto LABEL_23;
    }
  }

  uint64_t v15 = v3[2];
  if (v15 && !nw_path_parameters_get_logging_disabled(v15[13]))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    size_t v12 = (NWConcrete_nw_endpoint_handler *)(id)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *((_DWORD *)v3 + 112);
      LODWORD(aBlock[0]) = 136446466;
      *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
      WORD6(aBlock[0]) = 1024;
      *(_DWORD *)((char *)aBlock + 14) = v16;
      _os_log_impl( &dword_181A5C000,  (os_log_t)v12,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Cannot snapshot data transfer report without a connected endpoint handler",  (uint8_t *)aBlock,  0x12u);
    }

    goto LABEL_22;
  }
}

    if (v17) {
      free(v17);
    }
    nw_txt_record_t v7 = 0LL;
    goto LABEL_7;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v35 = "nw_framer_connection_state_set_object_value";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v32 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v35 = "nw_framer_connection_state_set_object_value";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null key", buf, 0xCu);
    }

    goto LABEL_54;
  }

  if (!v32)
  {
    __nwlog_obj();
    size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v30 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v35 = "nw_framer_connection_state_set_object_value";
      _os_log_impl(&dword_181A5C000, v12, v30, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_54;
  }

  os_log_type_t v23 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v24 = type;
  os_log_type_t v25 = os_log_type_enabled(v12, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v35 = "nw_framer_connection_state_set_object_value";
      _os_log_impl(&dword_181A5C000, v12, v24, "%{public}s called with null key, no backtrace", buf, 0xCu);
    }

    goto LABEL_54;
  }

  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v35 = "nw_framer_connection_state_set_object_value";
    int8x16_t v36 = 2082;
    uint64_t v37 = v23;
    _os_log_impl( &dword_181A5C000,  v12,  v24,  "%{public}s called with null key, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v23);
  if (v11) {
    goto LABEL_56;
  }
LABEL_8:
}

    goto LABEL_61;
  }

  if (!v4)
  {
    __nwlog_obj();
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "nw_framer_metadata_set_original";
    size_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null original", buf, 0xCu);
      }

      goto LABEL_60;
    }

    if (!v32)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_framer_metadata_set_original";
        _os_log_impl( &dword_181A5C000,  v14,  v29,  "%{public}s called with null original, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    os_log_type_t v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v24 = type;
    os_log_type_t v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_181A5C000, v14, v24, "%{public}s called with null original, no backtrace", buf, 0xCu);
      }

      goto LABEL_60;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v35 = "nw_framer_metadata_set_original";
      int8x16_t v36 = 2082;
      uint64_t v37 = v23;
      _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null original, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_41;
  }

  nw_endpoint_type_t v6 = v3;
  nw_txt_record_t v7 = *((id *)v6 + 1);

  is_framer = nw_protocol_definition_is_framer(v7);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "nw_framer_metadata_set_original";
    size_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_framer_metadata_set_original";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata)",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    if (!v32)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_framer_metadata_set_original";
        _os_log_impl( &dword_181A5C000,  v14,  v30,  "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    os_log_type_t v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v26 = type;
    os_log_type_t v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_framer_metadata_set_original";
        _os_log_impl( &dword_181A5C000,  v14,  v26,  "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata), no backtrace",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v35 = "nw_framer_metadata_set_original";
      int8x16_t v36 = 2082;
      uint64_t v37 = v23;
      _os_log_impl( &dword_181A5C000,  v14,  v26,  "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_61;
  }

  nw_protocol_definition_t v8 = (nw_txt_record *)v5[23];
  if (v8)
  {
    access_value[0] = MEMORY[0x1895F87A8];
    access_value[1] = 3221225472LL;
    access_value[2] = __nw_endpoint_access_custom_metadata_for_key_block_invoke;
    access_value[3] = &unk_189BB6E98;
    os_log_type_t v33 = a2;
    uint64_t v32 = v6;
    unint64_t v9 = nw_txt_record_access_key(v8, a2, access_value);
  }

  else
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s endpoint has no custom metadata, returning NULL",  buf,  0xCu);
      }
    }

    unint64_t v9 = v7[2](v7, 0LL, 0LL);
  }
}
}

    if (v18) {
      free(v18);
    }
    return 0LL;
  }

  nw_parameters_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    id v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v3 + 1;
    }
  }

  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    id v5 = *(uint64_t (**)(uint64_t))(v4 + 120);
    if (v5)
    {
      nw_endpoint_type_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }

  __nwlog_obj();
  size_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  uint64_t v32 = "__nw_protocol_get_path";
  if (!v12) {
    size_t v12 = "invalid";
  }
  os_log_type_t v33 = 2082;
  uint64_t v34 = (void *)v12;
  __int16 v35 = 2048;
  int8x16_t v36 = a1;
  size_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  size_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_path";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v16;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_path callback";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }

  if (!v29)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_path";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v27;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded";
    goto LABEL_50;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  id v14 = (os_log_s *)__nwlog_obj();
  uint64_t v15 = type;
  os_log_type_t v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_path";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v28;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace";
    goto LABEL_50;
  }

  if (v23)
  {
    BOOL v24 = *(const char **)(a1 + 16);
    if (!v24) {
      BOOL v24 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v32 = "__nw_protocol_get_path";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v24;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    uint64_t v37 = 2082;
    size_t v38 = v22;
    _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  nw_endpoint_type_t v6 = 0LL;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      nw_protocol_definition_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        unint64_t v9 = v8 - 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0LL;
            v10[2](v10);
            _Block_release(v10);
          }

          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }

          free((void *)a1);
        }
      }
    }
  }

  return v6;
}

    if (v18) {
      free(v18);
    }
    return 0LL;
  }

  nw_parameters_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    id v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v3 + 1;
    }
  }

  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    id v5 = *(uint64_t (**)(uint64_t))(v4 + 128);
    if (v5)
    {
      nw_endpoint_type_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }

  __nwlog_obj();
  size_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  uint64_t v32 = "__nw_protocol_get_local_endpoint";
  if (!v12) {
    size_t v12 = "invalid";
  }
  os_log_type_t v33 = 2082;
  uint64_t v34 = (void *)v12;
  __int16 v35 = 2048;
  int8x16_t v36 = a1;
  size_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  size_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_local_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v16;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }

  if (!v29)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_local_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v27;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded";
    goto LABEL_50;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  id v14 = (os_log_s *)__nwlog_obj();
  uint64_t v15 = type;
  os_log_type_t v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_local_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v28;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace";
    goto LABEL_50;
  }

  if (v23)
  {
    BOOL v24 = *(const char **)(a1 + 16);
    if (!v24) {
      BOOL v24 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v32 = "__nw_protocol_get_local_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v24;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    uint64_t v37 = 2082;
    size_t v38 = v22;
    _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  nw_endpoint_type_t v6 = 0LL;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      nw_protocol_definition_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        unint64_t v9 = v8 - 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0LL;
            v10[2](v10);
            _Block_release(v10);
          }

          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }

          free((void *)a1);
        }
      }
    }
  }

  return v6;
}

    if (v18) {
      free(v18);
    }
    return 0LL;
  }

  nw_parameters_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    id v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v3 + 1;
    }
  }

  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    id v5 = *(uint64_t (**)(uint64_t))(v4 + 200);
    if (v5)
    {
      nw_endpoint_type_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }

  __nwlog_obj();
  size_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  uint64_t v32 = "__nw_protocol_get_output_local_endpoint";
  if (!v12) {
    size_t v12 = "invalid";
  }
  os_log_type_t v33 = 2082;
  uint64_t v34 = (void *)v12;
  __int16 v35 = 2048;
  int8x16_t v36 = a1;
  size_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  size_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_output_local_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v16;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }

  if (!v29)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_output_local_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v27;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, backtrace limit exceeded";
    goto LABEL_50;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  id v14 = (os_log_s *)__nwlog_obj();
  uint64_t v15 = type;
  os_log_type_t v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_output_local_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v28;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, no backtrace";
    goto LABEL_50;
  }

  if (v23)
  {
    BOOL v24 = *(const char **)(a1 + 16);
    if (!v24) {
      BOOL v24 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v32 = "__nw_protocol_get_output_local_endpoint";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v24;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    uint64_t v37 = 2082;
    size_t v38 = v22;
    _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  nw_endpoint_type_t v6 = 0LL;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      nw_protocol_definition_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        unint64_t v9 = v8 - 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0LL;
            v10[2](v10);
            _Block_release(v10);
          }

          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }

          free((void *)a1);
        }
      }
    }
  }

  return v6;
}

    if (v18) {
      free(v18);
    }
    return 0LL;
  }

  nw_parameters_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    id v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v3 + 1;
    }
  }

  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    id v5 = *(uint64_t (**)(uint64_t))(v4 + 208);
    if (v5)
    {
      nw_endpoint_type_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }

  __nwlog_obj();
  size_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  uint64_t v32 = "__nw_protocol_get_output_interface";
  if (!v12) {
    size_t v12 = "invalid";
  }
  os_log_type_t v33 = 2082;
  uint64_t v34 = (void *)v12;
  __int16 v35 = 2048;
  int8x16_t v36 = a1;
  size_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  size_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_output_interface";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v16;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }

  if (!v29)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_output_interface";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v27;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, backtrace limit exceeded";
    goto LABEL_50;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  id v14 = (os_log_s *)__nwlog_obj();
  uint64_t v15 = type;
  os_log_type_t v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_get_output_interface";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v28;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, no backtrace";
    goto LABEL_50;
  }

  if (v23)
  {
    BOOL v24 = *(const char **)(a1 + 16);
    if (!v24) {
      BOOL v24 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v32 = "__nw_protocol_get_output_interface";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v24;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    uint64_t v37 = 2082;
    size_t v38 = v22;
    _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  nw_endpoint_type_t v6 = 0LL;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      nw_protocol_definition_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        unint64_t v9 = v8 - 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0LL;
            v10[2](v10);
            _Block_release(v10);
          }

          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }

          free((void *)a1);
        }
      }
    }
  }

  return v6;
}

    if (v18) {
      free(v18);
    }
    return 0LL;
  }

  nw_parameters_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    id v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v3 + 1;
    }
  }

  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    id v5 = *(uint64_t (**)(uint64_t))(v4 + 176);
    if (v5)
    {
      nw_endpoint_type_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }

  __nwlog_obj();
  size_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  uint64_t v32 = "__nw_protocol_supports_external_data";
  if (!v12) {
    size_t v12 = "invalid";
  }
  os_log_type_t v33 = 2082;
  uint64_t v34 = (void *)v12;
  __int16 v35 = 2048;
  int8x16_t v36 = a1;
  size_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  size_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_supports_external_data";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v16;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }

  if (!v29)
  {
    id v14 = (os_log_s *)__nwlog_obj();
    uint64_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_supports_external_data";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v27;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback, backtrace limit exceeded";
    goto LABEL_50;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  id v14 = (os_log_s *)__nwlog_obj();
  uint64_t v15 = type;
  os_log_type_t v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v32 = "__nw_protocol_supports_external_data";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v28;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback, no backtrace";
    goto LABEL_50;
  }

  if (v23)
  {
    BOOL v24 = *(const char **)(a1 + 16);
    if (!v24) {
      BOOL v24 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v32 = "__nw_protocol_supports_external_data";
    os_log_type_t v33 = 2082;
    uint64_t v34 = (void *)v24;
    __int16 v35 = 2048;
    int8x16_t v36 = a1;
    uint64_t v37 = 2082;
    size_t v38 = v22;
    _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  nw_endpoint_type_t v6 = 0LL;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      nw_protocol_definition_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        unint64_t v9 = v8 - 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0LL;
            v10[2](v10);
            _Block_release(v10);
          }

          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }

          free((void *)a1);
        }
      }
    }
  }

  return v6;
}

  if (v9) {
    free(v9);
  }
  return 0LL;
}
    }
  }

  return 1LL;
}

    goto LABEL_61;
  }

  if (!a3)
  {
    __nwlog_obj();
    os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_request_outbound_data";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    size_t v41 = OS_LOG_TYPE_ERROR;
    size_t v40 = 0;
    if (v41 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v22 = v41;
      if (os_log_type_enabled(v19, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_request_outbound_data";
        _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null data_size", buf, 0xCu);
      }

      goto LABEL_60;
    }

    if (!v40)
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v34 = v41;
      if (os_log_type_enabled(v19, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_request_outbound_data";
        _os_log_impl( &dword_181A5C000,  v19,  v34,  "%{public}s called with null data_size, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    os_log_type_t v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v29 = v41;
    size_t v30 = os_log_type_enabled(v19, v41);
    if (!v28)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_request_outbound_data";
        _os_log_impl(&dword_181A5C000, v19, v29, "%{public}s called with null data_size, no backtrace", buf, 0xCu);
      }

      goto LABEL_60;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_request_outbound_data";
      char v44 = 2082;
      char v45 = v28;
      _os_log_impl( &dword_181A5C000,  v19,  v29,  "%{public}s called with null data_size, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_41;
  }

  if (!v8)
  {
    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_request_outbound_data";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    size_t v41 = OS_LOG_TYPE_ERROR;
    size_t v40 = 0;
    if (v41 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = v41;
      if (os_log_type_enabled(v19, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_request_outbound_data";
        _os_log_impl(&dword_181A5C000, v19, v24, "%{public}s called with null available_outbound_data", buf, 0xCu);
      }

      goto LABEL_60;
    }

    if (!v40)
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v35 = v41;
      if (os_log_type_enabled(v19, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_request_outbound_data";
        _os_log_impl( &dword_181A5C000,  v19,  v35,  "%{public}s called with null available_outbound_data, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    os_log_type_t v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v31 = v41;
    uint64_t v32 = os_log_type_enabled(v19, v41);
    if (!v28)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_request_outbound_data";
        _os_log_impl( &dword_181A5C000,  v19,  v31,  "%{public}s called with null available_outbound_data, no backtrace",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_request_outbound_data";
      char v44 = 2082;
      char v45 = v28;
      _os_log_impl( &dword_181A5C000,  v19,  v31,  "%{public}s called with null available_outbound_data, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v22) {
      free(v22);
    }
    goto LABEL_62;
  }

  id v3 = v2;
  *(void *)buf = 0LL;
  if (*((char *)v2 + 160) < 0)
  {
    sc_in_udp_associated_tcp_connection = v2->sc_in_udp_associated_tcp_connection;
    if (sc_in_udp_associated_tcp_connection)
    {
      id v5 = sc_in_udp_associated_tcp_connection;
      top_id = v5->top_id;
    }

    else
    {
      top_id = 0LL;
    }

    asprintf((char **)buf, "(udp)/C%llu(tcp)", top_id);
  }

  *(void *)os_log_type_t type = 0LL;
  sc_id = v3->sc_id;
  sc_state = v3->sc_state;
  unint64_t v9 = "invalid";
  switch(v3->sc_state)
  {
    case 0u:
      break;
    case 1u:
      unint64_t v9 = "initial";
      break;
    case 2u:
      unint64_t v9 = "connected";
      break;
    case 3u:
      unint64_t v9 = "got_vers";
      break;
    case 4u:
      unint64_t v9 = "got_methods";
      break;
    case 5u:
      unint64_t v9 = "got_address_type";
      break;
    case 6u:
      unint64_t v9 = "got_address";
      break;
    case 7u:
      unint64_t v9 = "got_request";
      break;
    case 8u:
      unint64_t v9 = "out_connected";
      break;
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
    case 0x52u:
    case 0x53u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
      goto LABEL_12;
    case 0x65u:
      unint64_t v9 = "shoes_initial";
      break;
    case 0x66u:
      unint64_t v9 = "shoes_connected";
      break;
    case 0x67u:
      unint64_t v9 = "shoes_got_length";
      break;
    case 0x68u:
      unint64_t v9 = "shoes_got_request";
      break;
    case 0x69u:
      unint64_t v9 = "shoes_out_connected";
      break;
    default:
      if (sc_state == 200)
      {
        unint64_t v9 = "ready";
      }

      else if (sc_state == 255)
      {
        unint64_t v9 = "cancelled";
      }

      else
      {
LABEL_12:
        unint64_t v9 = "unknown";
      }

      break;
  }

  uint64_t v10 = "";
  if ((*((_BYTE *)v3 + 160) & 0x20) != 0) {
    uint64_t v11 = " udp";
  }
  else {
    uint64_t v11 = "";
  }
  else {
    size_t v12 = "";
  }
  sc_in_connection = v3->sc_in_connection;
  if (sc_in_connection)
  {
    id v14 = sc_in_connection;
    uint64_t v15 = v14->top_id;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  if (*(void *)buf) {
    uint64_t v10 = *(const char **)buf;
  }
  sc_out_connection = v3->sc_out_connection;
  if (sc_out_connection)
  {
    os_log_type_t v17 = sc_out_connection;
    os_log_type_t v18 = v17->top_id;
  }

  else
  {
    os_log_type_t v18 = 0LL;
  }

  asprintf((char **)type, "[SPC%llu %s%s%s in[C%llu%s] out[C%llu]]", sc_id, v9, v11, v12, v15, v10, v18);
  if (*(void *)buf) {
    free(*(void **)buf);
  }
  os_log_type_t v19 = *(const char **)type;

  if (!v19)
  {
LABEL_62:
    id v20 = 0LL;
    return (NSString *)v20;
  }

  id v20 = (__CFString *)CFStringCreateWithCStringNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  v19,  0x8000100u,  (CFAllocatorRef)*MEMORY[0x189604DB8]);
  return (NSString *)v20;
}

    if (v22) {
      free(v22);
    }
LABEL_62:
    uint64_t v11 = _Block_copy(&__block_literal_global_18956);
    goto LABEL_5;
  }

  v37[0] = MEMORY[0x1895F87A8];
  v37[1] = 3221225472LL;
  v37[2] = __nw_connection_create_experimental_probe_configuration_block_for_protocol_block_invoke;
  v37[3] = &unk_189BB9798;
  size_t v41 = &v45;
  size_t v38 = v7;
  size_t v39 = v8;
  size_t v42 = a3;
  size_t v40 = v10;
  os_unfair_lock_lock(v7 + 34);
  __nw_connection_create_experimental_probe_configuration_block_for_protocol_block_invoke((uint64_t)v37);
  os_unfair_lock_unlock(v7 + 34);
  uint64_t v11 = _Block_copy((const void *)v46[5]);

LABEL_5:
  _Block_object_dispose(&v45, 8);

  return v11;
}

    free(backtrace_string);
    goto LABEL_37;
  }

  nw_protocol_definition_t v8 = (unsigned int *)v6;
  unint64_t v9 = v8[29];

  if ((_DWORD)v9 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v12 = (id)gLogObj;
    else {
      size_t v13 = off_189BBBBC0[v9];
    }
    *(_DWORD *)buf = 136446722;
    size_t v42 = "-[NWConcrete_nw_endpoint_proxy applyWithHandler:toChildren:]";
    uint64_t v43 = 2082;
    char v44 = (void *)v13;
    char v45 = 2082;
    unsigned __int8 v46 = "proxy";
    id v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v39 = 0;
    if (__nwlog_fault(v14, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        uint64_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          else {
            os_log_type_t v17 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          size_t v42 = "-[NWConcrete_nw_endpoint_proxy applyWithHandler:toChildren:]";
          uint64_t v43 = 2082;
          char v44 = (void *)v17;
          char v45 = 2082;
          unsigned __int8 v46 = "proxy";
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v39)
      {
        os_log_type_t v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        id v20 = os_log_type_enabled(v15, type);
        if (v18)
        {
          if (v20)
          {
            else {
              os_log_type_t v21 = off_189BBBBC0[v9];
            }
            *(_DWORD *)buf = 136446978;
            size_t v42 = "-[NWConcrete_nw_endpoint_proxy applyWithHandler:toChildren:]";
            uint64_t v43 = 2082;
            char v44 = (void *)v21;
            char v45 = 2082;
            unsigned __int8 v46 = "proxy";
            os_log_type_t v47 = 2082;
            os_log_type_t v48 = v18;
            _os_log_impl( &dword_181A5C000,  v15,  v19,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v18);
          if (!v14) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }

        if (v20)
        {
          else {
            BOOL v24 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          size_t v42 = "-[NWConcrete_nw_endpoint_proxy applyWithHandler:toChildren:]";
          uint64_t v43 = 2082;
          char v44 = (void *)v24;
          char v45 = 2082;
          unsigned __int8 v46 = "proxy";
          _os_log_impl( &dword_181A5C000,  v15,  v19,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        BOOL v22 = type;
        if (os_log_type_enabled(v15, type))
        {
          else {
            os_log_type_t v23 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          size_t v42 = "-[NWConcrete_nw_endpoint_proxy applyWithHandler:toChildren:]";
          uint64_t v43 = 2082;
          char v44 = (void *)v23;
          char v45 = 2082;
          unsigned __int8 v46 = "proxy";
          _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_36;
    }

    goto LABEL_61;
  }

  nw_protocol_definition_t v8 = v7;
  if (CFStringHasSuffix(v6, @"."))
  {
    v92.length = CFStringGetLength(v6) - 1;
    v92.os_log_type_t location = 0LL;
    unint64_t v9 = CFStringCreateWithSubstring(v4, v6, v92);
    uint64_t v10 = v9;
    if (!v9)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v86 = "nw_endpoint_proxy_string_matches_pattern";
      size_t v12 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      __int16 v83 = 0;
      if (!__nwlog_fault((const char *)v12, &type, &v83))
      {
LABEL_109:
        if (v12) {
          free(v12);
        }
        size_t v29 = 0LL;
        os_log_type_t v33 = 0LL;
        uint64_t v10 = 0LL;
        goto LABEL_131;
      }

      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v13 = (os_log_s *)(id)gLogObj;
        id v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_endpoint_proxy_string_matches_pattern";
          uint64_t v15 = "%{public}s CFStringCreateMutableCopy failed";
LABEL_106:
          __int16 v74 = v13;
          uint64_t v75 = v14;
LABEL_107:
          _os_log_impl(&dword_181A5C000, v74, v75, v15, buf, 0xCu);
        }
      }

      else
      {
        if (v83)
        {
          BOOL v49 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v13 = (os_log_s *)(id)gLogObj;
          os_log_type_t v50 = type;
          size_t v51 = os_log_type_enabled(v13, type);
          if (v49)
          {
            if (v51)
            {
              *(_DWORD *)buf = 136446466;
              v86 = "nw_endpoint_proxy_string_matches_pattern";
              __int16 v87 = 2082;
              v88 = v49;
              _os_log_impl( &dword_181A5C000,  v13,  v50,  "%{public}s CFStringCreateMutableCopy failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v49);
            goto LABEL_109;
          }

          if (!v51) {
            goto LABEL_108;
          }
          *(_DWORD *)buf = 136446210;
          v86 = "nw_endpoint_proxy_string_matches_pattern";
          uint64_t v15 = "%{public}s CFStringCreateMutableCopy failed, no backtrace";
          __int16 v74 = v13;
          uint64_t v75 = v50;
          goto LABEL_107;
        }

        __nwlog_obj();
        size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_endpoint_proxy_string_matches_pattern";
          uint64_t v15 = "%{public}s CFStringCreateMutableCopy failed, backtrace limit exceeded";
          goto LABEL_106;
        }
      }

    if (v28) {
      free(v28);
    }
    if (v9) {
      free(v9);
    }
    size_t v39 = 0LL;
    goto LABEL_53;
  }

  __break(1u);
  return result;
}

      goto LABEL_61;
    }

    if (!v37)
    {
      __nwlog_obj();
      size_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v35 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_converted_url_response";
        _os_log_impl( &dword_181A5C000,  v30,  v35,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    uint64_t v32 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = type;
    uint64_t v34 = os_log_type_enabled(v30, type);
    if (!v32)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_converted_url_response";
        _os_log_impl(&dword_181A5C000, v30, v33, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }

      goto LABEL_60;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_converted_url_response";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v32;
      _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v32);
  }

    free(backtrace_string);
    goto LABEL_37;
  }

  nw_protocol_definition_t v8 = (unsigned int *)v6;
  unint64_t v9 = v8[29];

  if ((_DWORD)v9 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v12 = (id)gLogObj;
    else {
      size_t v13 = off_189BBBBC0[v9];
    }
    *(_DWORD *)buf = 136446722;
    size_t v42 = "-[NWConcrete_nw_endpoint_resolver applyWithHandler:toChildren:]";
    uint64_t v43 = 2082;
    char v44 = (void *)v13;
    char v45 = 2082;
    unsigned __int8 v46 = "resolver";
    id v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v39 = 0;
    if (__nwlog_fault(v14, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        uint64_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          else {
            os_log_type_t v17 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          size_t v42 = "-[NWConcrete_nw_endpoint_resolver applyWithHandler:toChildren:]";
          uint64_t v43 = 2082;
          char v44 = (void *)v17;
          char v45 = 2082;
          unsigned __int8 v46 = "resolver";
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v39)
      {
        os_log_type_t v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        id v20 = os_log_type_enabled(v15, type);
        if (v18)
        {
          if (v20)
          {
            else {
              os_log_type_t v21 = off_189BBBBC0[v9];
            }
            *(_DWORD *)buf = 136446978;
            size_t v42 = "-[NWConcrete_nw_endpoint_resolver applyWithHandler:toChildren:]";
            uint64_t v43 = 2082;
            char v44 = (void *)v21;
            char v45 = 2082;
            unsigned __int8 v46 = "resolver";
            os_log_type_t v47 = 2082;
            os_log_type_t v48 = v18;
            _os_log_impl( &dword_181A5C000,  v15,  v19,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v18);
          if (!v14) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }

        if (v20)
        {
          else {
            BOOL v24 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          size_t v42 = "-[NWConcrete_nw_endpoint_resolver applyWithHandler:toChildren:]";
          uint64_t v43 = 2082;
          char v44 = (void *)v24;
          char v45 = 2082;
          unsigned __int8 v46 = "resolver";
          _os_log_impl( &dword_181A5C000,  v15,  v19,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        BOOL v22 = type;
        if (os_log_type_enabled(v15, type))
        {
          else {
            os_log_type_t v23 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          size_t v42 = "-[NWConcrete_nw_endpoint_resolver applyWithHandler:toChildren:]";
          uint64_t v43 = 2082;
          char v44 = (void *)v23;
          char v45 = 2082;
          unsigned __int8 v46 = "resolver";
          _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_36;
    }

    if (v25) {
      free(v25);
    }
    goto LABEL_33;
  }

  if (*((_DWORD *)v3 + 29) == 2)
  {
    id v5 = (os_unfair_lock_s *)v3[31];
    nw_endpoint_type_t v6 = v5;
    if (v5)
    {
      if ((v5[8]._os_unfair_lock_opaque & 2) == 0 && (v5[8]._os_unfair_lock_opaque & 0x100) == 0)
      {
        os_unfair_lock_lock(v5 + 220);
        nw_txt_record_t v7 = *(void *)&v6[234]._os_unfair_lock_opaque;
        if (v7) {
          flow_id = nw_endpoint_handler_get_flow_id(v7, a2);
        }
        else {
          flow_id = 0LL;
        }
        os_unfair_lock_unlock(v6 + 220);
        goto LABEL_71;
      }

      uint64_t v15 = *(void **)&v5[208]._os_unfair_lock_opaque;
      if (v15)
      {
        uint64_t v16 = v15;
        is_null = uuid_is_null(v16 + 32);
        flow_id = is_null == 0;
        if (!is_null) {
          *a2 = *((_OWORD *)v16 + 2);
        }

        goto LABEL_71;
      }

    free(v24);
    goto LABEL_61;
  }

    _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
    goto LABEL_61;
  }

  if (a2)
  {
    uint64_t v4 = *(void **)(a2 + 144);
    id v5 = *(nw_protocol **)(a1 + 32);
    if (v5) {
      nw_endpoint_type_t v6 = v4 == 0LL;
    }
    else {
      nw_endpoint_type_t v6 = 1;
    }
    if (v6)
    {
      if ((*(_BYTE *)(a1 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_txt_record_t v7 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
        {
          nw_protocol_definition_t v8 = *(_DWORD *)(a1 + 460);
          *(_DWORD *)buf = 136446978;
          uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
          os_log_type_t v33 = 2082;
          uint64_t v34 = (char *)(a1 + 464);
          __int16 v35 = 2080;
          int8x16_t v36 = " ";
          uint64_t v37 = 1024;
          size_t v38 = v8;
          _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u> webtransport stream not fully setup, cannot fix parameters",  buf,  0x26u);
        }
      }
    }

    else
    {
      unint64_t v9 = nw_parameters_copy_protocol_options_legacy(v4, v5);
      if (v9)
      {
        uint64_t v10 = v9;
        if ((*(_BYTE *)(a2 + 276) & 4) != 0) {
          uint64_t v11 = 1;
        }
        else {
          uint64_t v11 = 2;
        }
        if ((*(_BYTE *)(a2 + 276) & 8) != 0) {
          size_t v12 = 3;
        }
        else {
          size_t v12 = v11;
        }
        if ((*(_BYTE *)(a2 + 276) & 1) != 0) {
          size_t v13 = v12;
        }
        else {
          size_t v13 = 0LL;
        }
        if ((*(_BYTE *)(a2 + 276) & 0x10) == 0)
        {
          if (gLogDatapath)
          {
            os_log_type_t v23 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              BOOL v24 = *(void *)(a2 + 88);
              if (v24) {
                os_log_type_t v25 = *(_DWORD *)(v24 + 460);
              }
              else {
                os_log_type_t v25 = -1;
              }
              os_log_type_t v28 = *(void *)(a2 + 64);
              *(_DWORD *)buf = 136447746;
              uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
              os_log_type_t v33 = 2082;
              uint64_t v34 = (char *)(a2 + 192);
              __int16 v35 = 2080;
              int8x16_t v36 = " ";
              uint64_t v37 = 1024;
              size_t v38 = v25;
              size_t v39 = 2048;
              size_t v40 = v28;
              size_t v41 = 2048;
              size_t v42 = v10;
              uint64_t v43 = 1024;
              char v44 = v13;
              _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> Adjusting HTTP options for webtransport: %p with mode: %u",  buf,  0x40u);
            }
          }
        }

        nw_http3_set_stream_mode(v10, v13);
        *(_BYTE *)(a2 + 276) |= 0x40u;
        os_release(v10);
      }

      else
      {
        if ((*(_BYTE *)(a1 + 548) & 2) == 0)
        {
          if (gLogDatapath)
          {
            BOOL v26 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v27 = *(_DWORD *)(a1 + 460);
              *(_DWORD *)buf = 136446978;
              uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
              os_log_type_t v33 = 2082;
              uint64_t v34 = (char *)(a1 + 464);
              __int16 v35 = 2080;
              int8x16_t v36 = " ";
              uint64_t v37 = 1024;
              size_t v38 = v27;
              _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Received HTTP options are NULL, failing",  buf,  0x26u);
            }
          }
        }

        id v14 = *(void **)(a2 + 48);
        nw_protocol_error(v14, a2);
        nw_protocol_disconnected(v14, a2);
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  size_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v16 = (os_log_s *)__nwlog_obj();
    os_log_type_t v17 = type;
    if (!os_log_type_enabled(v16, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
    os_log_type_t v18 = "%{public}s called with null webtransport_stream";
    goto LABEL_60;
  }

  if (!v29)
  {
    uint64_t v16 = (os_log_s *)__nwlog_obj();
    os_log_type_t v17 = type;
    if (!os_log_type_enabled(v16, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
    os_log_type_t v18 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_60;
  }

  os_log_type_t v21 = (char *)__nw_create_backtrace_string();
  uint64_t v16 = (os_log_s *)__nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v22 = os_log_type_enabled(v16, type);
  if (!v21)
  {
    if (!v22) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
    os_log_type_t v18 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_60;
  }

  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
    os_log_type_t v33 = 2082;
    uint64_t v34 = v21;
    _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v21);
  if (v15) {
    goto LABEL_62;
  }
}

      if (v16) {
        free(v16);
      }
      id v5 = &qword_18C45F000;
      goto LABEL_79;
    }

    id v20 = *((void *)handle + 14);
    os_log_type_t v21 = (void *)*((void *)handle + 15);
    if (v20)
    {
      *(void *)(v20 + 120) = v21;
      os_log_type_t v21 = (void *)*((void *)handle + 15);
      BOOL v22 = v171;
    }

    else
    {
      BOOL v22 = v171;
      *(void *)(v171 + 336) = v21;
    }

    *os_log_type_t v21 = v20;
    *((void *)handle + 14) = 0LL;
    *((void *)handle + 15) = 0LL;
    os_log_type_t v27 = *(_DWORD *)(v22 + 456);
    *(_DWORD *)(v22 + 456) = v27 - 1;
    if (v27)
    {
LABEL_77:
      os_log_type_t v48 = handle[276];
      handle[276] = v48 & 0xDF;
      if ((v48 & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          v158 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
          {
            v159 = *((void *)handle + 11);
            if (v159) {
              v160 = *(_DWORD *)(v159 + 460);
            }
            else {
              v160 = -1;
            }
            v165 = *((void *)handle + 8);
            v166 = *(_DWORD *)(v171 + 456);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            v186 = 2082;
            v187 = handle + 192;
            v188 = 2080;
            v189 = (uint64_t)" ";
            v190 = 1024;
            *(_DWORD *)v191 = v160;
            *(_WORD *)&v191[4] = 2048;
            *(void *)&v191[6] = v165;
            *(_WORD *)&v191[14] = 2048;
            *(void *)&v191[16] = handle;
            v192 = 1024;
            LODWORD(v193) = v166;
            uint64_t v15 = "%{public}s %{public}s%s<i%u:s%lld> removed pending stream (%p), now have %u pending streams";
            __int16 v35 = v158;
            int8x16_t v36 = OS_LOG_TYPE_DEBUG;
            uint64_t v37 = 64;
            goto LABEL_55;
          }
        }
      }

      goto LABEL_79;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v28 = *(unsigned int *)(v171 + 456);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
    v186 = 2082;
    v187 = "webtransport_session->pending_stream_count";
    v188 = 2048;
    v189 = 1LL;
    v190 = 2048;
    *(void *)v191 = v28;
    size_t v29 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v172[0]) = 0;
    if (__nwlog_fault(v29, type, v172))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        size_t v30 = (os_log_s *)__nwlog_obj();
        size_t v31 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          uint64_t v32 = *(unsigned int *)(v171 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          v186 = 2082;
          v187 = "webtransport_session->pending_stream_count";
          v188 = 2048;
          v189 = 1LL;
          v190 = 2048;
          *(void *)v191 = v32;
          os_log_type_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_72:
          unsigned __int8 v46 = v30;
          os_log_type_t v47 = v31;
LABEL_73:
          _os_log_impl(&dword_181A5C000, v46, v47, v33, buf, 0x2Au);
        }
      }

      else if (LOBYTE(v172[0]))
      {
        size_t v40 = (char *)__nw_create_backtrace_string();
        size_t v41 = (os_log_s *)__nwlog_obj();
        size_t v42 = type[0];
        uint64_t v43 = os_log_type_enabled(v41, type[0]);
        if (v40)
        {
          if (v43)
          {
            char v44 = *(unsigned int *)(v171 + 456);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            v186 = 2082;
            v187 = "webtransport_session->pending_stream_count";
            v188 = 2048;
            v189 = 1LL;
            v190 = 2048;
            *(void *)v191 = v44;
            *(_WORD *)&v191[8] = 2082;
            *(void *)&v191[10] = v40;
            _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v40);
          goto LABEL_74;
        }

        if (v43)
        {
          v135 = *(unsigned int *)(v171 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          v186 = 2082;
          v187 = "webtransport_session->pending_stream_count";
          v188 = 2048;
          v189 = 1LL;
          v190 = 2048;
          *(void *)v191 = v135;
          os_log_type_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          unsigned __int8 v46 = v41;
          os_log_type_t v47 = v42;
          goto LABEL_73;
        }
      }

      else
      {
        size_t v30 = (os_log_s *)__nwlog_obj();
        size_t v31 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          char v45 = *(unsigned int *)(v171 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          v186 = 2082;
          v187 = "webtransport_session->pending_stream_count";
          v188 = 2048;
          v189 = 1LL;
          v190 = 2048;
          *(void *)v191 = v45;
          os_log_type_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_72;
        }
      }
    }

    free((void *)v25);
    return 1LL;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v49 = "nw_webtransport_stream_destroy";
  os_log_type_t v25 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  unsigned __int8 v46 = 0;
  if (!__nwlog_fault((const char *)v25, &type, &v46))
  {
LABEL_77:
    if (!v25) {
      return 1LL;
    }
    goto LABEL_60;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    size_t v41 = (os_log_s *)__nwlog_obj();
    size_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v49 = "nw_webtransport_stream_destroy";
    uint64_t v43 = "%{public}s called with null webtransport_stream";
LABEL_76:
    _os_log_impl(&dword_181A5C000, v41, v42, v43, buf, 0xCu);
    goto LABEL_77;
  }

  if (!v46)
  {
    size_t v41 = (os_log_s *)__nwlog_obj();
    size_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v49 = "nw_webtransport_stream_destroy";
    uint64_t v43 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_76;
  }

  char v44 = (char *)__nw_create_backtrace_string();
  size_t v41 = (os_log_s *)__nwlog_obj();
  size_t v42 = type;
  char v45 = os_log_type_enabled(v41, type);
  if (!v44)
  {
    if (!v45) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v49 = "nw_webtransport_stream_destroy";
    uint64_t v43 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_76;
  }

  if (v45)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v49 = "nw_webtransport_stream_destroy";
    os_log_type_t v50 = 2082;
    size_t v51 = v44;
    _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v44);
  if (v25) {
    goto LABEL_60;
  }
  return 1LL;
}

      if (v16) {
        free(v16);
      }
      id v5 = &qword_18C45F000;
      goto LABEL_79;
    }

    id v20 = *((void *)handle + 14);
    os_log_type_t v21 = (void *)*((void *)handle + 15);
    if (v20)
    {
      *(void *)(v20 + 120) = v21;
      os_log_type_t v21 = (void *)*((void *)handle + 15);
      BOOL v22 = v171;
    }

    else
    {
      BOOL v22 = v171;
      *(void *)(v171 + 336) = v21;
    }

    *os_log_type_t v21 = v20;
    *((void *)handle + 14) = 0LL;
    *((void *)handle + 15) = 0LL;
    os_log_type_t v27 = *(_DWORD *)(v22 + 456);
    *(_DWORD *)(v22 + 456) = v27 - 1;
    if (v27)
    {
LABEL_77:
      os_log_type_t v48 = handle[276];
      handle[276] = v48 & 0xDF;
      if ((v48 & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          v158 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
          {
            v159 = *((void *)handle + 11);
            if (v159) {
              v160 = *(_DWORD *)(v159 + 460);
            }
            else {
              v160 = -1;
            }
            v165 = *((void *)handle + 8);
            v166 = *(_DWORD *)(v171 + 456);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            v186 = 2082;
            v187 = handle + 192;
            v188 = 2080;
            v189 = (uint64_t)" ";
            v190 = 1024;
            *(_DWORD *)v191 = v160;
            *(_WORD *)&v191[4] = 2048;
            *(void *)&v191[6] = v165;
            *(_WORD *)&v191[14] = 2048;
            *(void *)&v191[16] = handle;
            v192 = 1024;
            LODWORD(v193) = v166;
            uint64_t v15 = "%{public}s %{public}s%s<i%u:s%lld> removed pending stream (%p), now have %u pending streams";
            __int16 v35 = v158;
            int8x16_t v36 = OS_LOG_TYPE_DEBUG;
            uint64_t v37 = 64;
            goto LABEL_55;
          }
        }
      }

      goto LABEL_79;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v28 = *(unsigned int *)(v171 + 456);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
    v186 = 2082;
    v187 = "webtransport_session->pending_stream_count";
    v188 = 2048;
    v189 = 1LL;
    v190 = 2048;
    *(void *)v191 = v28;
    size_t v29 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v172[0]) = 0;
    if (__nwlog_fault(v29, type, v172))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        size_t v30 = (os_log_s *)__nwlog_obj();
        size_t v31 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          uint64_t v32 = *(unsigned int *)(v171 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          v186 = 2082;
          v187 = "webtransport_session->pending_stream_count";
          v188 = 2048;
          v189 = 1LL;
          v190 = 2048;
          *(void *)v191 = v32;
          os_log_type_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_72:
          unsigned __int8 v46 = v30;
          os_log_type_t v47 = v31;
LABEL_73:
          _os_log_impl(&dword_181A5C000, v46, v47, v33, buf, 0x2Au);
        }
      }

      else if (LOBYTE(v172[0]))
      {
        size_t v40 = (char *)__nw_create_backtrace_string();
        size_t v41 = (os_log_s *)__nwlog_obj();
        size_t v42 = type[0];
        uint64_t v43 = os_log_type_enabled(v41, type[0]);
        if (v40)
        {
          if (v43)
          {
            char v44 = *(unsigned int *)(v171 + 456);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            v186 = 2082;
            v187 = "webtransport_session->pending_stream_count";
            v188 = 2048;
            v189 = 1LL;
            v190 = 2048;
            *(void *)v191 = v44;
            *(_WORD *)&v191[8] = 2082;
            *(void *)&v191[10] = v40;
            _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v40);
          goto LABEL_74;
        }

        if (v43)
        {
          v135 = *(unsigned int *)(v171 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          v186 = 2082;
          v187 = "webtransport_session->pending_stream_count";
          v188 = 2048;
          v189 = 1LL;
          v190 = 2048;
          *(void *)v191 = v135;
          os_log_type_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          unsigned __int8 v46 = v41;
          os_log_type_t v47 = v42;
          goto LABEL_73;
        }
      }

      else
      {
        size_t v30 = (os_log_s *)__nwlog_obj();
        size_t v31 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          char v45 = *(unsigned int *)(v171 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          v186 = 2082;
          v187 = "webtransport_session->pending_stream_count";
          v188 = 2048;
          v189 = 1LL;
          v190 = 2048;
          *(void *)v191 = v45;
          os_log_type_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_72;
        }
      }
    }

      free(backtrace_string);
      goto LABEL_76;
    }

    if (!v37) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446210;
    size_t v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
    size_t v29 = "%{public}s called with null return_array, no backtrace";
LABEL_75:
    _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
LABEL_76:
    if (v26) {
      free(v26);
    }
    return 0LL;
  }

  if ((handle[276] & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      size_t v30 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        size_t v31 = *((void *)handle + 11);
        if (v31) {
          uint64_t v32 = *(_DWORD *)(v31 + 460);
        }
        else {
          uint64_t v32 = -1;
        }
        size_t v38 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        size_t v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
        uint64_t v52 = 2082;
        __int128 v53 = handle + 192;
        __int128 v54 = 2080;
        __int128 v55 = " ";
        __int128 v56 = 1024;
        *(_DWORD *)char v57 = v32;
        v57[2] = 2048;
        *(void *)&v57[3] = v38;
        _os_log_impl(&dword_181A5C000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }

  if (*((nw_protocol **)handle + 6) != a2 || *((_DWORD *)handle + 47) != 2) {
    return 0LL;
  }
  if ((handle[276] & 8) != 0) {
    return nw_http_capsule_framer_get_output_frames( *((void *)handle + 11) + 96LL,  *((void *)handle + 11),  0LL,  a3,  0xF4240u,  a5,  (uint64_t *)a6);
  }
  size_t v13 = *((void *)handle + 8);
  if (v13 < 0x40)
  {
    id v14 = 0;
    uint64_t v15 = 1;
    goto LABEL_20;
  }

  if (v13 < 0x4000)
  {
    id v14 = 0;
    uint64_t v15 = 2;
    goto LABEL_20;
  }

  if (!(v13 >> 30))
  {
    id v14 = 0;
    uint64_t v15 = 4;
    goto LABEL_20;
  }

  if (!(v13 >> 62))
  {
    id v14 = 0;
    uint64_t v15 = 8;
    goto LABEL_20;
  }

  os_log_type_t v17 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  size_t v51 = "_http_vle_length";
  uint64_t v52 = 2048;
  __int128 v53 = (const char *)v13;
  os_log_type_t v18 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v18);
  if (!result)
  {
    free(v18);
    uint64_t v15 = 0;
    id v14 = 1;
LABEL_20:
    id v20 = __CFADD__(a3, v15);
    os_log_type_t v21 = a3 + v15;
    if (v20)
    {
      if (gLogDatapath)
      {
        size_t v42 = v14;
        size_t v39 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          size_t v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
          uint64_t v52 = 2082;
          __int128 v53 = "minimum_bytes";
          __int128 v54 = 2048;
          __int128 v55 = (const char *)v15;
          __int128 v56 = 2048;
          *(void *)char v57 = v21;
          _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
        }

        LODWORD(v21) = -1;
        id v14 = v42;
        BOOL v22 = a4 + v15;
        if (!__CFADD__(a4, v15)) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }

      LODWORD(v21) = -1;
    }

    BOOL v22 = a4 + v15;
    if (!__CFADD__(a4, v15))
    {
LABEL_27:
      output_frames = nw_http_capsule_framer_get_output_frames( *((void *)handle + 11) + 96LL,  *((void *)handle + 11),  0x190B4D3BuLL,  v21,  0xF4240u,  a5,  (uint64_t *)a6);
      if ((v14 & 1) == 0)
      {
        v43[0] = MEMORY[0x1895F87A8];
        v43[1] = 0x40000000LL;
        char v44 = ___ZL55nw_protocol_webtransport_http2_stream_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
        char v45 = &__block_descriptor_tmp_33_34206;
        unsigned __int8 v46 = a1;
        os_log_type_t v47 = v15;
        tqh_first = a6->tqh_first;
        do
        {
          if (!tqh_first) {
            break;
          }
          BOOL v24 = (nw_frame *)*((void *)tqh_first + 4);
          os_log_type_t v25 = ((uint64_t (*)(void *))v44)(v43);
          tqh_first = v24;
        }

        while ((v25 & 1) != 0);
      }

      return output_frames;
    }

  *(_BYTE *)(v5 + 184) = self->_fastOpen;
  *(_WORD *)(v5 + 196) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_9:
    if ((has & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_62;
  }

LABEL_61:
    if (!v50) {
      goto LABEL_63;
    }
LABEL_62:
    free(v50);
    goto LABEL_63;
  }

  if (type == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v51 = (os_log_s *)(id)gLogObj;
    __int128 v56 = (os_log_type_t)v88.receiver;
    if (os_log_type_enabled(v51, (os_log_type_t)v88.receiver))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
      _os_log_impl( &dword_181A5C000,  v51,  v56,  "%{public}s nw_socks5_connection_create failed, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_60;
  }

  __int128 v53 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  size_t v51 = (os_log_s *)(id)gLogObj;
  __int128 v54 = (os_log_type_t)v88.receiver;
  __int128 v55 = os_log_type_enabled(v51, (os_log_type_t)v88.receiver);
  if (!v53)
  {
    if (v55)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
      _os_log_impl(&dword_181A5C000, v51, v54, "%{public}s nw_socks5_connection_create failed, no backtrace", buf, 0xCu);
    }

    goto LABEL_60;
  }

  if (v55)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v53;
    _os_log_impl( &dword_181A5C000,  v51,  v54,  "%{public}s nw_socks5_connection_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v53);
  if (v50) {
    goto LABEL_62;
  }
LABEL_63:
}

    goto LABEL_61;
  }

  nw_txt_record_t v7 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_proxy_config);
  nw_protocol_definition_t v8 = v7;
  if (v7)
  {
    v7->mode = 1;
    objc_storeStrong((id *)&v7->endpoint, a1);
    unint64_t v9 = (OS_nw_dictionary *)nw_dictionary_create();
    stacks = v8->stacks;
    v8->stacks = v9;

    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_stack);
    nw_protocol_stack_append_application_protocol(v11, v6);
    size_t v12 = (uint64_t)v8->stacks;
    nw_dictionary_set_value(v12, (const char *)nw_proxy_config_default_transport(void)::default_transport_string, v11);
    size_t v13 = v8;

    goto LABEL_26;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v14 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  size_t v40 = "nw_proxy_config_create";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v37 = 0;
  if (__nwlog_fault(v15, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
      }
    }

    else if (v37)
    {
      os_log_type_t v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v19 = type;
      id v20 = os_log_type_enabled(v16, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          size_t v40 = "nw_proxy_config_create";
          size_t v41 = 2082;
          size_t v42 = v18;
          _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v18);
        if (!v15) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        size_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v40 = "nw_proxy_config_create";
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v15) {
LABEL_25:
  }
    free(v15);
LABEL_26:

LABEL_27:
  return v8;
}

  if (v23) {
    free(v23);
  }
  nw_protocol_definition_t v8 = 0LL;
LABEL_27:

  return v8;
}

    if (v18) {
      free(v18);
    }
    goto LABEL_62;
  }

  if (!v1[1])
  {
LABEL_62:
    uint64_t v16 = 0LL;
    goto LABEL_63;
  }

  id v3 = nw_parameters_create();
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v57 = "nw_proxy_config_copy_parameters_to_proxy";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int128 v54 = 0;
    if (__nwlog_fault(v22, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v54)
      {
        int8x16_t v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v37 = type;
        size_t v38 = os_log_type_enabled(v23, type);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            char v57 = "nw_proxy_config_copy_parameters_to_proxy";
            BOOL v58 = 2082;
            os_log_type_t v59 = v36;
            _os_log_impl( &dword_181A5C000,  v23,  v37,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v36);
          goto LABEL_76;
        }

        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          char v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_181A5C000, v23, v37, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl( &dword_181A5C000,  v23,  v47,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        goto LABEL_61;
      }

      __nwlog_obj();
      char v68 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v116 = "nw_necp_append_tlv";
      v65 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v111 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v65, type, &v111))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v69 = type[0];
          if (os_log_type_enabled(v66, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_181A5C000, v66, v69, "%{public}s called with null beyond", buf, 0xCu);
          }

      free(v20);
      if (!v14)
      {
LABEL_77:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        int8x16_t v36 = "nw_protocol_http1_add_listen_handler";
        os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v33 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v28 = (os_log_s *)gLogObj;
          size_t v29 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_91;
          }
          *(_DWORD *)buf = 136446210;
          int8x16_t v36 = "nw_protocol_http1_add_listen_handler";
          size_t v30 = "%{public}s called with null http1";
        }

        else if (v33)
        {
          size_t v31 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v28 = (os_log_s *)gLogObj;
          size_t v29 = type;
          uint64_t v32 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v31)
          {
            if (v32)
            {
              *(_DWORD *)buf = 136446466;
              int8x16_t v36 = "nw_protocol_http1_add_listen_handler";
              uint64_t v37 = 2082;
              size_t v38 = v31;
              _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v31);
            goto LABEL_91;
          }

          if (!v32)
          {
LABEL_91:
            if (v27) {
              free(v27);
            }
            return 0LL;
          }

          *(_DWORD *)buf = 136446210;
          int8x16_t v36 = "nw_protocol_http1_add_listen_handler";
          size_t v30 = "%{public}s called with null http1, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v28 = (os_log_s *)gLogObj;
          size_t v29 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_91;
          }
          *(_DWORD *)buf = 136446210;
          int8x16_t v36 = "nw_protocol_http1_add_listen_handler";
          size_t v30 = "%{public}s called with null http1, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0xCu);
        goto LABEL_91;
      }

        free(v19);
        goto LABEL_61;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v22 = (id)gLogObj;
      *(_DWORD *)aBlock = 136446210;
      *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
      os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      uint64_t v43 = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v20 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null definition", aBlock, 0xCu);
        }

        goto LABEL_58;
      }

      if (!v43)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v20 = (os_log_s *)(id)gLogObj;
        __int16 v35 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl( &dword_181A5C000,  v20,  v35,  "%{public}s called with null definition, backtrace limit exceeded",  aBlock,  0xCu);
        }

        goto LABEL_58;
      }

      BOOL v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v20 = (os_log_s *)(id)gLogObj;
      size_t v29 = type[0];
      size_t v30 = os_log_type_enabled(v20, type[0]);
      if (!v26)
      {
        if (v30)
        {
          *(_DWORD *)aBlock = 136446210;
          *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_181A5C000, v20, v29, "%{public}s called with null definition, no backtrace", aBlock, 0xCu);
        }

        goto LABEL_58;
      }

      if (v30)
      {
        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v26;
        _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s called with null definition, dumping backtrace:%{public}s",  aBlock,  0x16u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (id)gLogObj;
      *(_DWORD *)aBlock = 136446210;
      *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
      os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      uint64_t v43 = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v20 = (os_log_s *)(id)gLogObj;
        os_log_type_t v21 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null protocol", aBlock, 0xCu);
        }

        goto LABEL_58;
      }

      if (!v43)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v20 = (os_log_s *)(id)gLogObj;
        uint64_t v34 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl( &dword_181A5C000,  v20,  v34,  "%{public}s called with null protocol, backtrace limit exceeded",  aBlock,  0xCu);
        }

        goto LABEL_58;
      }

      BOOL v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v20 = (os_log_s *)(id)gLogObj;
      os_log_type_t v27 = type[0];
      os_log_type_t v28 = os_log_type_enabled(v20, type[0]);
      if (!v26)
      {
        if (v28)
        {
          *(_DWORD *)aBlock = 136446210;
          *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
          _os_log_impl(&dword_181A5C000, v20, v27, "%{public}s called with null protocol, no backtrace", aBlock, 0xCu);
        }

        goto LABEL_58;
      }

      if (v28)
      {
        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v26;
        _os_log_impl( &dword_181A5C000,  v20,  v27,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  aBlock,  0x16u);
      }
    }

    free(v26);
    if (!v19) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }

  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0LL;
}

  __break(1u);
}

      free(backtrace_string);
      goto LABEL_75;
    }

    size_t v30 = (os_log_s *)__nwlog_obj();
    size_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
    uint64_t v32 = "%{public}s called with null framer";
LABEL_74:
    _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
LABEL_75:
    if (v29) {
      free(v29);
    }
    return 0LL;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
    size_t v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v30 = (os_log_s *)__nwlog_obj();
      size_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
      uint64_t v32 = "%{public}s called with null protocol";
      goto LABEL_74;
    }

    if (!v45)
    {
      size_t v30 = (os_log_s *)__nwlog_obj();
      size_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
      uint64_t v32 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v30 = (os_log_s *)__nwlog_obj();
    size_t v31 = type;
    int8x16_t v36 = os_log_type_enabled(v30, type);
    if (backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        __int16 v35 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    if (!v36) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
    uint64_t v32 = "%{public}s called with null protocol, no backtrace";
    goto LABEL_74;
  }

  nw_protocol_definition_t v8 = *(void *)(a2 + 32);
  if (!v8 || (unint64_t v9 = *(void *)(v8 + 24)) == 0 || !*(void *)(v9 + 88))
  {
    os_log_type_t v28 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v8;
      _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_ERROR,  "%{public}s Output handler (%p)'s get_output_frames callback is not properly set",  buf,  0x16u);
    }

    return 0LL;
  }

  if (a3 < 0x40)
  {
    uint64_t v15 = 1;
LABEL_16:
    if (a4 >> 30) {
      os_log_type_t v18 = 8;
    }
    else {
      os_log_type_t v18 = 4;
    }
    if (a4 < 0x4000) {
      os_log_type_t v18 = 2;
    }
    if (a4 >= 0x40) {
      os_log_type_t v19 = v18;
    }
    else {
      os_log_type_t v19 = 1;
    }
    id v20 = v19 + v15;
    os_log_type_t v21 = __CFADD__(a4, v20);
    BOOL v22 = a4 + v20;
    if (v21)
    {
      if (gLogDatapath)
      {
        uint64_t v37 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          if (v22 >= 0x40)
          {
            if (v22 >= 0x4000)
            {
              else {
                size_t v38 = 4;
              }
            }

            else
            {
              size_t v38 = 2;
            }
          }

          else
          {
            size_t v38 = 1;
          }

          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "minimum_bytes";
          *(_WORD *)&buf[22] = 2048;
          os_log_type_t v48 = (v38 + v15);
          BOOL v49 = 2048;
          os_log_type_t v50 = v22;
          _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
        }
      }

      BOOL v22 = 0xFFFFFFFFLL;
    }

    if (a5 >= 0x4000) {
      os_log_type_t v23 = 4;
    }
    else {
      os_log_type_t v23 = 2;
    }
    if (a5 < 0x40) {
      os_log_type_t v23 = 1;
    }
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    LODWORD(v4_Block_object_dispose(va, 8) = nw_protocol_get_output_frames(v8, a2, v22, v23 + v15 + a5, a6, (uint64_t)a7);
    if (*(_DWORD *)(*(void *)&buf[8] + 24LL))
    {
      v39[0] = MEMORY[0x1895F87A8];
      v39[1] = 0x40000000LL;
      size_t v40 = (uint64_t (*)(void *))__nw_http_capsule_framer_get_output_frames_block_invoke;
      size_t v41 = &unk_189BBFBC0;
      char v44 = v15;
      size_t v42 = buf;
      uint64_t v43 = a2;
      BOOL v24 = *a7;
      do
      {
        if (!v24) {
          break;
        }
        os_log_type_t v25 = *(void *)(v24 + 32);
        BOOL v26 = v40(v39);
        BOOL v24 = v25;
      }

      while ((v26 & 1) != 0);
      os_log_type_t v27 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    }

    else
    {
      os_log_type_t v27 = 0LL;
    }

    _Block_object_dispose(buf, 8);
    return v27;
  }

  if (a3 < 0x4000)
  {
    uint64_t v15 = 2;
    goto LABEL_16;
  }

  if (!(a3 >> 30))
  {
    uint64_t v15 = 4;
    goto LABEL_16;
  }

  if (!(a3 >> 62))
  {
    uint64_t v15 = 8;
    goto LABEL_16;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  *(void *)&uint8_t buf[4] = "_http_vle_length";
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = a3;
  uint64_t v16 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v16);
  if (!result)
  {
    free(v16);
    uint64_t v15 = 0;
    goto LABEL_16;
  }

  __break(1u);
  return result;
}
}

    goto LABEL_61;
  }

  __nwlog_obj();
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_ip_channel_inbox_input_available";
  size_t v12 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  uint64_t v43 = 0;
  if (__nwlog_fault(v12, type, &v43))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_channel_inbox_input_available";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null to", buf, 0xCu);
      }
    }

    else if (v43)
    {
      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v22 = type[0];
      os_log_type_t v23 = os_log_type_enabled(v13, type[0]);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_ip_channel_inbox_input_available";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v21;
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null to, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
        goto LABEL_53;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_channel_inbox_input_available";
        _os_log_impl(&dword_181A5C000, v13, v22, "%{public}s called with null to, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v30 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_channel_inbox_input_available";
        _os_log_impl(&dword_181A5C000, v13, v30, "%{public}s called with null to, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

        goto LABEL_61;
      }

      if (!(_BYTE)v32)
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v22 = __dst[0];
        if (os_log_type_enabled(v21, __dst[0]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v34 = "nw_nat64_synthesize";
          os_log_type_t v23 = "%{public}s called with null ipv4, backtrace limit exceeded";
          goto LABEL_59;
        }

        goto LABEL_60;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v22 = __dst[0];
      os_log_type_t v28 = os_log_type_enabled(v21, __dst[0]);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v34 = "nw_nat64_synthesize";
          os_log_type_t v23 = "%{public}s called with null ipv4, no backtrace";
          goto LABEL_59;
        }

        goto LABEL_60;
      }

      if (!v28) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v34 = "nw_nat64_synthesize";
      __int16 v35 = 2082;
      *(void *)int8x16_t v36 = backtrace_string;
      size_t v29 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_49;
    }

      if (v17) {
        free(v17);
      }
      goto LABEL_5;
    }

    __nwlog_obj();
    size_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v37 = "nw_quic_connection_set_local_identity";
    size_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v34 = 0;
    if (__nwlog_fault(v13, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v37 = "nw_quic_connection_set_local_identity";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null publicKeyInfo", buf, 0xCu);
        }
      }

      else if (v34)
      {
        os_log_type_t v23 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v24 = type;
        os_log_type_t v25 = os_log_type_enabled(v14, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v37 = "nw_quic_connection_set_local_identity";
            size_t v38 = 2082;
            size_t v39 = v23;
            _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null publicKeyInfo, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v23);
          goto LABEL_55;
        }

        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v37 = "nw_quic_connection_set_local_identity";
          _os_log_impl(&dword_181A5C000, v14, v24, "%{public}s called with null publicKeyInfo, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v30 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v37 = "nw_quic_connection_set_local_identity";
          _os_log_impl( &dword_181A5C000,  v14,  v30,  "%{public}s called with null publicKeyInfo, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

              int8x16_t v36 = *(void *)(a1 + 40);
              uint64_t v37 = *(void **)(v36 + 144);
              *(void *)(v36 + 144) = v33;

              size_t v38 = *(void *)(*(void *)(a1 + 40) + 144LL);
              if (v38) {
                size_t v38 = (uint64_t)(*(void *)(v38 + 24) - *(void *)(v38 + 16)) >> 3;
              }
              if (v32 - 1 == v38)
              {
                if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40LL)))
                {
                  if (__nwlog_browser_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
                  }
                  size_t v39 = (os_log_s *)(id)gbrowserLogObj;
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                  {
                    size_t v40 = *(_DWORD *)(*(void *)(a1 + 40) + 192LL);
                    *(_DWORD *)buf = 136446722;
                    os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    v94 = 1024;
                    *(_DWORD *)v95 = v40;
                    *(_WORD *)&v95[4] = 2112;
                    *(void *)&v95[6] = v13;
                    _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] new: moved %@ from new_results to old_results",  buf,  0x1Cu);
                  }
                }

                goto LABEL_69;
              }

              __nwlog_obj();
              char v57 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
              __int128 v54 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              v90 = 0;
              if (__nwlog_fault(v54, &type, &v90))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  BOOL v58 = type;
                  if (os_log_type_enabled(v55, type))
                  {
                    *(_DWORD *)buf = 136446210;
                    os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    _os_log_impl( &dword_181A5C000,  v55,  v58,  "%{public}s Should have removed from new results",  buf,  0xCu);
                  }

        goto LABEL_61;
      }

      if (!v29)
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl( &dword_181A5C000,  v16,  v28,  "%{public}s txt_record can't have length > 8900, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_60;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s txt_record can't have length > 8900, no backtrace",  buf,  0xCu);
        }

        goto LABEL_60;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
        os_log_type_t v33 = 2082;
        uint64_t v34 = (size_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s txt_record can't have length > 8900, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_48;
    }

    goto LABEL_61;
  }

  nw_parameters_t v2 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_txt_record);
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
    nw_endpoint_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v29 = 0;
    if (__nwlog_fault(v6, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_txt_record_t v7 = (os_log_s *)(id)gLogObj;
        nw_protocol_definition_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s [nw_txt_record init] failed", buf, 0xCu);
        }
      }

      else if (v29)
      {
        unint64_t v9 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_txt_record_t v7 = (os_log_s *)(id)gLogObj;
        uint64_t v10 = type;
        uint64_t v11 = os_log_type_enabled(v7, type);
        if (v9)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
            os_log_type_t v33 = 2082;
            uint64_t v34 = (size_t)v9;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s [nw_txt_record init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v9);
          if (!v6) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s [nw_txt_record init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_txt_record_t v7 = (os_log_s *)(id)gLogObj;
        size_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s [nw_txt_record init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v6) {
      goto LABEL_25;
    }
LABEL_24:
    free(v6);
    goto LABEL_25;
  }

  id v3 = malloc(a1);
  if (v3)
  {
LABEL_5:
    *((void *)v2 + 1) = v3;
    *id v3 = 0;
    *((_BYTE *)v2 + 36) |= 1u;
    *((void *)v2 + 2) = 1LL;
    *((void *)v2 + 3) = a1;
    uint64_t v4 = v2;
LABEL_25:

    return (BOOL)v2;
  }

  __nwlog_obj();
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  uint64_t v32 = "strict_malloc";
  os_log_type_t v33 = 2048;
  uint64_t v34 = a1;
  os_log_type_t v21 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v21);
  if (!result)
  {
    free(v21);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

      __nwlog_obj();
      nw_endpoint_type_t v6 = 0LL;
      os_log_type_t v21 = 1;
      BOOL v22 = "invalid";
      goto LABEL_61;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v64 = "nw_http3_get_default_output_handler";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v61 = 0;
    if (__nwlog_fault(v24, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v25 = (os_log_s *)__nwlog_obj();
        BOOL v26 = type;
        if (!os_log_type_enabled(v25, type)) {
          goto LABEL_58;
        }
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v64 = "nw_http3_get_default_output_handler";
        os_log_type_t v27 = "%{public}s called with null http3";
        goto LABEL_57;
      }

      if (!v61)
      {
        os_log_type_t v25 = (os_log_s *)__nwlog_obj();
        BOOL v26 = type;
        if (!os_log_type_enabled(v25, type)) {
          goto LABEL_58;
        }
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v64 = "nw_http3_get_default_output_handler";
        os_log_type_t v27 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_57;
      }

      uint64_t v34 = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = (os_log_s *)__nwlog_obj();
      BOOL v26 = type;
      __int16 v35 = os_log_type_enabled(v25, type);
      if (v34)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v64 = "nw_http3_get_default_output_handler";
          v65 = 2082;
          id v66 = v34;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v34);
        goto LABEL_58;
      }

      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v64 = "nw_http3_get_default_output_handler";
        os_log_type_t v27 = "%{public}s called with null http3, no backtrace";
LABEL_57:
        _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
      }
    }

                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v55;
                char v57 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_609:
                _os_log_impl(&dword_181A5C000, v52, v53, v57, buf, 0x16u);
                goto LABEL_610;
              }

              if ((_BYTE)v413)
              {
                v296 = (char *)__nw_create_backtrace_string();
                uint64_t v52 = (os_log_s *)__nwlog_obj();
                __int128 v53 = type[0];
                v297 = os_log_type_enabled(v52, (os_log_type_t)type[0]);
                if (v296)
                {
                  if (v297)
                  {
                    v298 = *(void *)(a1 + 48);
                    v299 = "invalid";
                    if (v298)
                    {
                      v300 = *(const char **)(v298 + 16);
                      if (v300) {
                        v299 = v300;
                      }
                    }

                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v299;
                    *(_WORD *)&buf[22] = 2082;
                    v427 = (__n128 (*)(uint64_t, uint64_t))v296;
                    _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
                  }

                  free(v296);
                  goto LABEL_610;
                }

                if (!v297) {
                  goto LABEL_610;
                }
                v339 = *(void *)(a1 + 48);
                v340 = "invalid";
                if (v339)
                {
                  v341 = *(const char **)(v339 + 16);
                  if (v341) {
                    v340 = v341;
                  }
                }

      free(v32);
      if (!v18) {
        return;
      }
LABEL_89:
      size_t v42 = (char *)v18;
      goto LABEL_90;
    }

    os_log_type_t v19 = (os_log_s *)__nwlog_obj();
    id v20 = type;
    if (!os_log_type_enabled(v19, type)) {
      goto LABEL_88;
    }
    *(_DWORD *)buf = 136446210;
    unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
    os_log_type_t v21 = "%{public}s called with null http3_stream";
LABEL_87:
    _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
    goto LABEL_88;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
    os_log_type_t v18 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = (os_log_s *)__nwlog_obj();
      id v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
      os_log_type_t v21 = "%{public}s called with null other_protocol";
      goto LABEL_87;
    }

    if (!v43)
    {
      os_log_type_t v19 = (os_log_s *)__nwlog_obj();
      id v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
      os_log_type_t v21 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_87;
    }

    uint64_t v32 = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = (os_log_s *)__nwlog_obj();
    id v20 = type;
    __int16 v35 = os_log_type_enabled(v19, type);
    if (!v32)
    {
      if (!v35) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
      os_log_type_t v21 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_87;
    }

    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
      os_log_type_t v47 = 2082;
      os_log_type_t v48 = v32;
      uint64_t v34 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_59;
    }

    goto LABEL_60;
  }

  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v22 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v23 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
        BOOL v24 = *((void *)handle + 30);
        *(_DWORD *)buf = 136447234;
        unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
        os_log_type_t v47 = 2082;
        os_log_type_t v48 = handle + 636;
        BOOL v49 = 2080;
        os_log_type_t v50 = " ";
        size_t v51 = 1024;
        uint64_t v52 = v23;
        __int128 v53 = 2048;
        __int128 v54 = v24;
        _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }

  uint64_t v4 = *((_DWORD *)handle + 92);
  if (v4 > 5) {
    return;
  }
  if (((1 << v4) & 0x2B) == 0)
  {
    *((_WORD *)handle + 368) |= 0x200u;
    return;
  }

  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      output_finished = (void (*)(void))callbacks->output_finished;
      if (output_finished)
      {
        output_finished();
        return;
      }
    }
  }

  __nwlog_obj();
  nw_protocol_definition_t v8 = a1->output_handler;
  unint64_t v9 = "invalid";
  if (v8)
  {
    identifier = v8->identifier;
    if (identifier) {
      unint64_t v9 = (const char *)identifier;
    }
  }

  *(_DWORD *)buf = 136446466;
  unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
  os_log_type_t v47 = 2082;
  os_log_type_t v48 = (char *)v9;
  uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v43 = 0;
  if (__nwlog_fault(v11, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v12 = (os_log_s *)__nwlog_obj();
      size_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_73;
      }
      id v14 = a1->output_handler;
      uint64_t v15 = "invalid";
      if (v14)
      {
        uint64_t v16 = v14->identifier;
        if (v16) {
          uint64_t v15 = (const char *)v16;
        }
      }

      *(_DWORD *)buf = 136446466;
      unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
      os_log_type_t v47 = 2082;
      os_log_type_t v48 = (char *)v15;
      os_log_type_t v17 = "%{public}s protocol %{public}s has invalid output_finished callback";
LABEL_72:
      _os_log_impl(&dword_181A5C000, v12, v13, v17, buf, 0x16u);
      goto LABEL_73;
    }

    if (!v43)
    {
      size_t v12 = (os_log_s *)__nwlog_obj();
      size_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_73;
      }
      int8x16_t v36 = a1->output_handler;
      uint64_t v37 = "invalid";
      if (v36)
      {
        size_t v38 = v36->identifier;
        if (v38) {
          uint64_t v37 = (const char *)v38;
        }
      }

      *(_DWORD *)buf = 136446466;
      unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
      os_log_type_t v47 = 2082;
      os_log_type_t v48 = (char *)v37;
      os_log_type_t v17 = "%{public}s protocol %{public}s has invalid output_finished callback, backtrace limit exceeded";
      goto LABEL_72;
    }

    os_log_type_t v25 = (char *)__nw_create_backtrace_string();
    size_t v12 = (os_log_s *)__nwlog_obj();
    size_t v13 = type;
    BOOL v26 = os_log_type_enabled(v12, type);
    if (!v25)
    {
      if (!v26) {
        goto LABEL_73;
      }
      size_t v39 = a1->output_handler;
      size_t v40 = "invalid";
      if (v39)
      {
        size_t v41 = v39->identifier;
        if (v41) {
          size_t v40 = (const char *)v41;
        }
      }

      *(_DWORD *)buf = 136446466;
      unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
      os_log_type_t v47 = 2082;
      os_log_type_t v48 = (char *)v40;
      os_log_type_t v17 = "%{public}s protocol %{public}s has invalid output_finished callback, no backtrace";
      goto LABEL_72;
    }

    if (v26)
    {
      os_log_type_t v27 = a1->output_handler;
      os_log_type_t v28 = "invalid";
      if (v27)
      {
        size_t v29 = v27->identifier;
        if (v29) {
          os_log_type_t v28 = (const char *)v29;
        }
      }

      *(_DWORD *)buf = 136446722;
      unsigned __int8 v46 = "nw_protocol_http3_stream_output_finished";
      os_log_type_t v47 = 2082;
      os_log_type_t v48 = (char *)v28;
      BOOL v49 = 2082;
      os_log_type_t v50 = v25;
      _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s protocol %{public}s has invalid output_finished callback, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    free(v25);
  }

  free(v34);
  if (v17)
  {
LABEL_126:
    os_log_type_t v59 = (char *)v17;
LABEL_127:
    free(v59);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v10 = (id)gLogObj;
  if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v32 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_interpose_handle_path_update_locked_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v32;
    _os_log_impl( &dword_181A5C000,  (os_log_t)v10,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] failed to find flowObj",  buf,  0x16u);
  }

        goto LABEL_61;
      }

      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v57 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          BOOL v71 = 136446210;
          *(void *)__int16 v72 = "nw_path_create_bridged_flow_director_locked";
          _os_log_impl( &dword_181A5C000,  v21,  v57,  "%{public}s called with null globals, backtrace limit exceeded",  (uint8_t *)&v71,  0xCu);
        }

        goto LABEL_60;
      }

      __int128 v53 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int128 v54 = buf[0];
      __int128 v55 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!v53)
      {
        if (v55)
        {
          BOOL v71 = 136446210;
          *(void *)__int16 v72 = "nw_path_create_bridged_flow_director_locked";
          _os_log_impl( &dword_181A5C000,  v21,  v54,  "%{public}s called with null globals, no backtrace",  (uint8_t *)&v71,  0xCu);
        }

        goto LABEL_60;
      }

      if (v55)
      {
        BOOL v71 = 136446466;
        *(void *)__int16 v72 = "nw_path_create_bridged_flow_director_locked";
        *(_WORD *)&v72[8] = 2082;
        *(void *)&v72[10] = v53;
        _os_log_impl( &dword_181A5C000,  v21,  v54,  "%{public}s called with null globals, dumping backtrace:%{public}s",  (uint8_t *)&v71,  0x16u);
      }

      free(v53);
    }

    goto LABEL_20;
  }

  *(void *)uint64_t v37 = 0LL;
  nw_protocol_definition_t v8 = nw_parameters_copy_context(v5[2]);
  unint64_t v9 = nw_path_shared_necp_fd(v8);

  if (v9 < 0) {
    goto LABEL_30;
  }
  *(_WORD *)uint64_t v37 = 258;
  size_t v38 = a3;
  *(_DWORD *)&v37[4] = 18;
  uint64_t v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v11 = (os_log_s *)(id)gLogObj;
  size_t v12 = v11;
  if (v10 != 2)
  {
    *(_DWORD *)buf = 136446466;
    size_t v41 = "nw_path_flow_registration_set_tfo_cache";
    size_t v42 = 1024;
    *(_DWORD *)uint64_t v43 = v10;
    size_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int8x16_t v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (os_log_s *)(id)gLogObj;
      uint64_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446466;
        size_t v41 = "nw_path_flow_registration_set_tfo_cache";
        size_t v42 = 1024;
        *(_DWORD *)uint64_t v43 = v10;
        _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s necp update cache failed for tfo %{darwin.errno}d",  buf,  0x12u);
      }

    if (v18) {
      free(v18);
    }
LABEL_56:

LABEL_68:
    nw_endpoint_type_t v6 = 0LL;
    goto LABEL_6;
  }

  v41.receiver = v6;
  v41.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_endpoint_edge;
  unint64_t v9 = (NWConcrete_nw_endpoint_edge *)objc_msgSendSuper2(&v41, sel_init);
  nw_endpoint_type_t v6 = v9;
  if (!v9)
  {
    __nwlog_obj();
    os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v40 = 0;
    if ((__nwlog_fault(v22, &type, &v40) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v40)
      {
        uint64_t v34 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v35 = type;
        int8x16_t v36 = os_log_type_enabled(v23, type);
        if (v34)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            char v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
            char v45 = 2082;
            unsigned __int8 v46 = v34;
            _os_log_impl( &dword_181A5C000,  v23,  v35,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v34);
          goto LABEL_66;
        }

        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_181A5C000, v23, v35, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v39 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl( &dword_181A5C000,  v23,  v39,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      uint64_t v52 = *(void *)(a1 + 40);
      __int128 v53 = *(id *)(a1 + 32);
      __int128 v54 = v53;
      if (v52)
      {
        __int128 v55 = nw_connection_copy_connected_remote_endpoint(v53);
        __int128 v56 = nw_endpoint_copy_proxy_original_endpoint(v55);
        if (nw_connection_is_unlisted_tracker(v54))
        {
          if (v55 && v55[11])
          {
            objc_msgSend(NSString, "stringWithUTF8String:");
            char v57 = (void *)objc_claimAutoreleasedReturnValue();
          }

          else
          {
            objc_msgSend(*(id *)(v52 + 24), "URL", v158, v159);
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            [v79 host];
            char v57 = (void *)objc_claimAutoreleasedReturnValue();
          }
        }

        else
        {
          char v57 = 0LL;
        }

        if (v56 || nw_connection_get_privacy_stance(v54) == 2)
        {
          os_log_type_t v80 = 0LL;
        }

        else
        {
          os_log_type_t v84 = objc_alloc_init(MEMORY[0x189603FA8]);
          *(void *)buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = __35__NWURLLoaderHTTP_reportConnected___block_invoke;
          *(void *)&_BYTE buf[24] = &unk_189BC5E38;
          __int16 v85 = v84;
          *(void *)&_BYTE buf[32] = v85;
          nw_endpoint_enumerate_cnames(v55, buf);
          if ([v85 count]) {
            os_log_type_t v80 = (void *)[v85 copy];
          }
          else {
            os_log_type_t v80 = 0LL;
          }
        }

        __int16 v81 = *(void *)(v52 + 144);
        os_log_type_t v82 = *(id *)(v52 + 48);
        [v82 loaderConnectedWithHTTPConnectionMetadata:v81 CNAMEChain:v80 unlistedTracker:v57];
      }

      __int16 v83 = *(void *)(a1 + 40);
      if (v83 && *(_BYTE *)(v83 + 16)) {
        -[NWURLLoaderHTTP startResponseStallTimer](v83);
      }

      nw_endpoint_type_t v6 = v160;
      goto LABEL_107;
    case 4u:
      BOOL v58 = *(void *)(a1 + 40);
      if (!v6) {
        goto LABEL_72;
      }
      if (v58 && *(void *)(v58 + 88)) {
        goto LABEL_73;
      }
      os_log_type_t v59 = v6;
      -[NWURLLoaderHTTP errorForNWError:]((id *)v58, v6);
      os_log_type_t v60 = (void *)objc_claimAutoreleasedReturnValue();
      __int16 v61 = *(void *)(a1 + 40);
      if (v61) {
        objc_storeStrong((id *)(v61 + 88), v60);
      }

      BOOL v62 = *(void *)(a1 + 40);
      if (!v62)
      {
        BOOL v58 = 0LL;
LABEL_76:
        if (-[NWURLLoaderHTTP pendingErrorIsRetryable](v58))
        {
          if (gLogDatapath)
          {
            if (__nwlog_url_log::onceToken != -1) {
              dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
            }
            v144 = (os_log_s *)(id)gurlLogObj;
            if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
            {
              v145 = *(void *)(a1 + 40);
              if (v145 && (v146 = *(id *)(v145 + 48)) != 0LL)
              {
                v147 = v146;
                [v146 logDescription];
              }

              else
              {
                v147 = 0LL;
                v167[0] = 0LL;
                v167[1] = 0LL;
                v168 = 0;
              }

              v152 = *(void *)(a1 + 40);
              if (v152 && (v153 = *(id *)(v152 + 48)) != 0LL)
              {
                v154 = v153;
                [v153 logDescription];
                v155 = v166;
              }

              else
              {
                v155 = 0;
                v154 = 0LL;
                v164 = 0LL;
                v165 = 0LL;
                v166 = 0;
              }

              v156 = *(void *)(a1 + 40);
              if (v156)
              {
                v157 = *(char *)(v156 + 19);
                v156 = *(void *)(v156 + 88);
              }

              else
              {
                v157 = 0;
              }

              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "-[NWURLLoaderHTTP configureAndStartConnection:]_block_invoke";
              *(_WORD *)&buf[12] = 1042;
              *(_DWORD *)&buf[14] = 16;
              *(_WORD *)&buf[18] = 2098;
              *(void *)&buf[20] = v167;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v155;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v157;
              *(_WORD *)&buf[40] = 2112;
              *(void *)&buf[42] = v156;
              _os_log_impl( &dword_181A5C000,  v144,  OS_LOG_TYPE_DEBUG,  "%{public}s Task <%{public,uuid_t}.16P>.<%u> retrying pre-connected connection on attempt %u with error: %@",  buf,  0x32u);
            }
          }

          -[NWURLLoaderHTTP setPendingError:](*(void *)(a1 + 40), 0LL);
          uint64_t v63 = *(void *)(a1 + 40);
          if (v63)
          {
            ++*(_BYTE *)(v63 + 19);
            uint64_t v63 = *(void *)(a1 + 40);
            if (v63) {
              uint64_t v63 = *(void *)(v63 + 72);
            }
          }

          nw_endpoint_t v64 = (id)v63;
          -[NWURLLoaderHTTP setConnection:](*(void *)(a1 + 40), 0LL);
          -[NWURLLoaderHTTP stopResponseStallTimer](*(void *)(a1 + 40), v65);
          id v66 = *(void *)(a1 + 40);
          if (v66) {
            v67 = *(void **)(v66 + 64);
          }
          else {
            v67 = 0LL;
          }
          [v67 close];
          id v69 = *(void *)(a1 + 40);
          char v68 = (uint64_t *)(a1 + 40);
          -[NWURLLoaderHTTP setRequestBodyProvider:](v69);
          -[NWURLLoaderHTTP continueLoading](*v68);
          -[NWURLLoaderHTTP needRequestBody](*v68);
          -[NWURLLoaderHTTP readResponse](*v68);
          os_log_type_t v70 = (void *)*v68;
          if (*v68) {
            os_log_type_t v70 = (void *)v70[5];
          }
          BOOL v71 = v70;
          -[NWURLSessionTaskConfiguration activity]((uint64_t)v71);
          __int16 v72 = (void *)objc_claimAutoreleasedReturnValue();
          nw_connection_end_activity(v64, v72);

          nw_connection_cancel((nw_connection_t)v64);
          goto LABEL_116;
        }

      goto LABEL_61;
    }

    if (!v26)
    {
      __nwlog_obj();
      size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_http3_get_initial_remote_settings";
        uint64_t v15 = "%{public}s called with null blocked_streams, backtrace limit exceeded";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v14 = v27;
    BOOL v24 = os_log_type_enabled(v13, v27);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_http3_get_initial_remote_settings";
        uint64_t v15 = "%{public}s called with null blocked_streams, no backtrace";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    if (!v24) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    size_t v29 = "nw_http3_get_initial_remote_settings";
    size_t v30 = 2082;
    size_t v31 = backtrace_string;
    os_log_type_t v21 = "%{public}s called with null blocked_streams, dumping backtrace:%{public}s";
    goto LABEL_41;
  }

  __nwlog_obj();
  os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  size_t v29 = "nw_http3_get_initial_remote_settings";
  size_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v27 = OS_LOG_TYPE_ERROR;
  BOOL v26 = 0;
  if (__nwlog_fault(v12, &v27, &v26))
  {
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v14 = v27;
      if (!os_log_type_enabled(v13, v27)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      size_t v29 = "nw_http3_get_initial_remote_settings";
      uint64_t v15 = "%{public}s called with null max_table_capacity";
      goto LABEL_59;
    }

    if (!v26)
    {
      __nwlog_obj();
      size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_http3_get_initial_remote_settings";
        uint64_t v15 = "%{public}s called with null max_table_capacity, backtrace limit exceeded";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v14 = v27;
    os_log_type_t v23 = os_log_type_enabled(v13, v27);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_http3_get_initial_remote_settings";
        uint64_t v15 = "%{public}s called with null max_table_capacity, no backtrace";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    if (!v23) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    size_t v29 = "nw_http3_get_initial_remote_settings";
    size_t v30 = 2082;
    size_t v31 = backtrace_string;
    os_log_type_t v21 = "%{public}s called with null max_table_capacity, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_181A5C000, v13, v14, v21, buf, 0x16u);
LABEL_42:

    free(backtrace_string);
  }

    free(backtrace_string);
    goto LABEL_37;
  }

  nw_protocol_definition_t v8 = (unsigned int *)v6;
  unint64_t v9 = v8[29];

  if ((_DWORD)v9 != 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v12 = (id)gLogObj;
    else {
      size_t v13 = off_189BBBBC0[v9];
    }
    *(_DWORD *)buf = 136446722;
    size_t v42 = "-[NWConcrete_nw_endpoint_transform applyWithHandler:toChildren:]";
    uint64_t v43 = 2082;
    char v44 = (void *)v13;
    char v45 = 2082;
    unsigned __int8 v46 = "transform";
    id v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v39 = 0;
    if (__nwlog_fault(v14, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        uint64_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          else {
            os_log_type_t v17 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          size_t v42 = "-[NWConcrete_nw_endpoint_transform applyWithHandler:toChildren:]";
          uint64_t v43 = 2082;
          char v44 = (void *)v17;
          char v45 = 2082;
          unsigned __int8 v46 = "transform";
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v39)
      {
        os_log_type_t v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        id v20 = os_log_type_enabled(v15, type);
        if (v18)
        {
          if (v20)
          {
            else {
              os_log_type_t v21 = off_189BBBBC0[v9];
            }
            *(_DWORD *)buf = 136446978;
            size_t v42 = "-[NWConcrete_nw_endpoint_transform applyWithHandler:toChildren:]";
            uint64_t v43 = 2082;
            char v44 = (void *)v21;
            char v45 = 2082;
            unsigned __int8 v46 = "transform";
            os_log_type_t v47 = 2082;
            os_log_type_t v48 = v18;
            _os_log_impl( &dword_181A5C000,  v15,  v19,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v18);
          if (!v14) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }

        if (v20)
        {
          else {
            BOOL v24 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          size_t v42 = "-[NWConcrete_nw_endpoint_transform applyWithHandler:toChildren:]";
          uint64_t v43 = 2082;
          char v44 = (void *)v24;
          char v45 = 2082;
          unsigned __int8 v46 = "transform";
          _os_log_impl( &dword_181A5C000,  v15,  v19,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        BOOL v22 = type;
        if (os_log_type_enabled(v15, type))
        {
          else {
            os_log_type_t v23 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          size_t v42 = "-[NWConcrete_nw_endpoint_transform applyWithHandler:toChildren:]";
          uint64_t v43 = 2082;
          char v44 = (void *)v23;
          char v45 = 2082;
          unsigned __int8 v46 = "transform";
          _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_36;
    }

  _Block_object_dispose(&v118, 8);
  _Block_object_dispose(&v122, 8);

  return 1LL;
}

LABEL_81:
  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = registered_endpoint;
  BOOL v58 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) == 0LL;

  return v58;
}

  if (v8) {
    free(v8);
  }
  return 0LL;
}

            *((_DWORD *)v19 + 6) = 0;
            v68[0] = MEMORY[0x1895F87A8];
            v68[1] = 0x40000000LL;
            id v69 = (uint64_t (*)(void *))___ZL34nw_protocol_test_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_38;
            os_log_type_t v70 = &unk_189BC8500;
            uint64_t v73 = p_output_handler;
            __int16 v74 = v24;
            BOOL v71 = buf;
            __int16 v72 = type;
            a2 = *(nw_protocol **)(*(void *)&buf[8] + 40LL);
            do
            {
              if (!a2) {
                break;
              }
              uint64_t v32 = a2->output_handler;
              os_log_type_t v33 = v69(v68);
              a2 = v32;
            }

            while ((v33 & 1) != 0);
            os_log_type_t v19 = *(_BYTE **)&type[8];
            goto LABEL_64;
          }

          id v66 = v22;
          if (handle == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v27 = v20[1].callbacks;
            if (v27) {
              v20[1].callbacks = (nw_protocol_callbacks *)((char *)&v27->add_input_handler + 1);
            }
          }

          os_log_type_t v28 = a1->handle;
          if (v28 == &nw_protocol_ref_counted_handle)
          {
            size_t v29 = a1[1].callbacks;
            if (v29) {
              a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v29->add_input_handler + 1);
            }
          }

          if (v18)
          {
            size_t v30 = get_output_frames(v20, a1, a3, a4, a5, v18);
            goto LABEL_53;
          }

          __nwlog_obj();
          *(_DWORD *)os_log_type_t v84 = 136446210;
          __int16 v85 = "__nw_protocol_get_output_frames";
          __int128 v56 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v77 = OS_LOG_TYPE_ERROR;
          uint64_t v76 = 0;
          if (__nwlog_fault(v56, &v77, &v76))
          {
            if (v77 == OS_LOG_TYPE_FAULT)
            {
              char v57 = (os_log_s *)__nwlog_obj();
              BOOL v58 = v77;
              if (os_log_type_enabled(v57, v77))
              {
                *(_DWORD *)os_log_type_t v84 = 136446210;
                __int16 v85 = "__nw_protocol_get_output_frames";
                os_log_type_t v59 = "%{public}s called with null return_array";
LABEL_153:
                _os_log_impl(&dword_181A5C000, v57, v58, v59, v84, 0xCu);
              }
            }

            else if (v76)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              char v57 = (os_log_s *)__nwlog_obj();
              BOOL v58 = v77;
              v65 = os_log_type_enabled(v57, v77);
              if (backtrace_string)
              {
                if (v65)
                {
                  *(_DWORD *)os_log_type_t v84 = 136446466;
                  __int16 v85 = "__nw_protocol_get_output_frames";
                  v86 = 2082;
                  __int16 v87 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s called with null return_array, dumping backtrace:%{public}s",  v84,  0x16u);
                }

                free(backtrace_string);
                goto LABEL_154;
              }

              if (v65)
              {
                *(_DWORD *)os_log_type_t v84 = 136446210;
                __int16 v85 = "__nw_protocol_get_output_frames";
                os_log_type_t v59 = "%{public}s called with null return_array, no backtrace";
                goto LABEL_153;
              }
            }

            else
            {
              char v57 = (os_log_s *)__nwlog_obj();
              BOOL v58 = v77;
              if (os_log_type_enabled(v57, v77))
              {
                *(_DWORD *)os_log_type_t v84 = 136446210;
                __int16 v85 = "__nw_protocol_get_output_frames";
                os_log_type_t v59 = "%{public}s called with null return_array, backtrace limit exceeded";
                goto LABEL_153;
              }
            }
          }

      goto LABEL_61;
    }

    if (!v68)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v11 = (os_log_s *)(id)gconnectionLogObj;
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v11, type))
      {
        uint64_t v34 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        BOOL v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        uint64_t v73 = (void *)v34;
        __int16 v74 = 2048;
        uint64_t v75 = v5;
        _os_log_impl( &dword_181A5C000,  v11,  v33,  "%{public}s <nw_association %{public}s> does not have handle %p registered, backtrace limit exceeded",  buf,  0x20u);
      }

      goto LABEL_60;
    }

    BOOL v24 = __nw_create_backtrace_string();
    if (!v24)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v11 = (os_log_s *)(id)gconnectionLogObj;
      __int16 v35 = type;
      if (os_log_type_enabled(v11, type))
      {
        int8x16_t v36 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        BOOL v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        uint64_t v73 = (void *)v36;
        __int16 v74 = 2048;
        uint64_t v75 = v5;
        _os_log_impl( &dword_181A5C000,  v11,  v35,  "%{public}s <nw_association %{public}s> does not have handle %p registered, no backtrace",  buf,  0x20u);
      }

      goto LABEL_60;
    }

    os_log_type_t v25 = (char *)v24;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    BOOL v26 = (os_log_s *)(id)gconnectionLogObj;
    os_log_type_t v27 = type;
    if (os_log_type_enabled(v26, type))
    {
      os_log_type_t v28 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446978;
      BOOL v71 = "nw_association_mark_flow_disconnected";
      __int16 v72 = 2082;
      uint64_t v73 = (void *)v28;
      __int16 v74 = 2048;
      uint64_t v75 = v5;
      uint64_t v76 = 2082;
      os_log_type_t v77 = v25;
      _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s <nw_association %{public}s> does not have handle %p registered, dumping backtrace:%{public}s",  buf,  0x2Au);
    }

    free(v25);
    if (v10) {
LABEL_62:
    }
      free(v10);
  }

LABEL_67:
      size_t v41 = 1LL;
      if (contact_id)
      {
LABEL_48:
        size_t v42 = strlen(contact_id) + 1;
        if (v7)
        {
LABEL_49:
          uint64_t v43 = *((void *)v7 + 2);
          goto LABEL_70;
        }

              snprintf(v204, 0x1FuLL, ", flow divert agg: %x", v64);
LABEL_68:
              os_unfair_lock_opaque_high = HIBYTE(v62[96]._os_unfair_lock_opaque);
              id v66 = 0x8000LL << os_unfair_lock_opaque_high;
              if (os_unfair_lock_opaque_high > 0x30) {
                id v66 = -1LL;
              }
              if (HIBYTE(v62[96]._os_unfair_lock_opaque) && v66) {
                snprintf(applier, 0x31uLL, ", estimated upload: %lluBps", v66);
              }
              else {
                applier[0] = 0;
              }
              os_unfair_lock_opaque_low = LOBYTE(v62[97]._os_unfair_lock_opaque);
              char v68 = 0x8000LL << os_unfair_lock_opaque_low;
              if (os_unfair_lock_opaque_low > 0x30) {
                char v68 = -1LL;
              }
              if (LOBYTE(v62[97]._os_unfair_lock_opaque) && v68) {
                snprintf(out, 0x33uLL, ", estimated download: %lluBps", v68);
              }
              else {
                out[0] = 0;
              }
              v171 = 0LL;
              id v69 = v62[94]._os_unfair_lock_opaque;
              else {
                os_log_type_t v70 = off_189BC5688[v69];
              }
              BOOL v71 = v62;
              __int16 v72 = *(const char **)&v71[62]._os_unfair_lock_opaque;

              uint64_t v73 = "[";
              if (v12)
              {
                __int16 v74 = v12;
              }

              else
              {
                uint64_t v73 = "";
                __int16 v74 = "";
              }

              uint64_t v75 = "]";
              if (!v12) {
                uint64_t v75 = "";
              }
              asprintf( &v171,  "%s (%s)%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",  v70,  v72,  v158,  __str,  v73,  v74,  v75,  v157,  v156,  v155,  v150,  v148,  v154,  v153,  v152,  (const char *)buf,  v200,  v204,  applier,  out,  v151,  v149);
              uint64_t v76 = v171;

              if (v76)
              {
                os_log_type_t v77 = (__CFString *)CFStringCreateWithCStringNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  v76,  0x8000100u,  (CFAllocatorRef)*MEMORY[0x189604DB8]);
LABEL_196:
                v159[0] = v4;
                v159[1] = 3221225472LL;
                v159[2] = __33__NWConcrete_nw_path_description__block_invoke_2;
                v159[3] = &unk_189BC9238;
                v159[4] = v8;
                v146 = v77;
                v159[5] = v146;
                os_unfair_lock_lock(p_description_lock);
                __33__NWConcrete_nw_path_description__block_invoke_2((uint64_t)v159);
                os_unfair_lock_unlock(p_description_lock);
                nw_endpoint_type_t v6 = v146;

                goto LABEL_197;
              }

                if (v51) {
                  free(v51);
                }
LABEL_69:

                v348 = 1;
                uint64_t v10 = v365;
                size_t v41 = a4;
                unsigned __int8 v46 = v345;
                id v14 = v359;
                goto LABEL_70;
              }

              unsigned __int8 v46 = 0LL;
              loga = 0LL;
              v348 = 0;
            }

    os_release(v10);
    if (v43)
    {
LABEL_156:
      uint64_t v10 = 0LL;
      goto LABEL_157;
    }

    if (v21) {
      free(v21);
    }
    goto LABEL_28;
  }

        if (v48) {
          free(v48);
        }
        uint64_t v32 = 0LL;
        goto LABEL_32;
      }

      BOOL v26 = 0LL;
LABEL_78:
      *(_WORD *)buf = 0;
      v65 = nw_connection_get_event_milliseconds(v4, 4, 1, buf, 0LL);
      id v66 = MEMORY[0x1895F87A8];
      if (v65 != -1)
      {
        *((_BYTE *)v7 + 84) |= 1u;
        v67 = nw_parameters_copy_effective_proxy_config(v96);
        char v68 = v67;
        if (v67)
        {
          id v69 = v67;
          os_log_type_t v70 = v69[38];

          if (v70 != 4)
          {
            *((_BYTE *)v7 + 84) |= 2u;
            BOOL v71 = nw_array_create();
            proxy_endpoints = v7->proxy_endpoints;
            v7->proxy_endpoints = (OS_nw_array *)v71;

            v103[0] = v66;
            v103[1] = 3221225472LL;
            v103[2] = __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke;
            v103[3] = &unk_189BB6F78;
            v104 = v7;
            nw_proxy_config_enumerate_endpoints(v69, v103);
          }
        }

        v101[0] = v66;
        v101[1] = 3221225472LL;
        v101[2] = __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_2;
        v101[3] = &unk_189BB9A20;
        os_log_type_t v102 = v7;
        nw_endpoint_handler_access_proxy_handler(v95, v101);
      }

      if (v92)
      {
        v7->privacy_stance = *((_DWORD *)v4 + 126);
        uint64_t v73 = v7;
        __int16 v74 = (NWConcrete_nw_establishment_report *)v4[52];
        v4[52] = v73;
      }

      else
      {
        v98[0] = v66;
        v98[1] = 3221225472LL;
        v98[2] = __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_138;
        v98[3] = &unk_189BC9238;
        os_log_type_t v99 = v7;
        uint64_t v75 = v4;
        BOOL v100 = v75;
        os_unfair_lock_lock((os_unfair_lock_t)v4 + 34);
        __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_138((uint64_t)v98);
        os_unfair_lock_unlock((os_unfair_lock_t)v4 + 34);

        __int16 v74 = v99;
      }

      goto LABEL_87;
    }

    __nwlog_obj();
    __int16 v83 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
    os_log_type_t v84 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v109) = 16;
    LOBYTE(v10_Block_object_dispose(va, 8) = 0;
    if (__nwlog_fault(v84, &v109, &v108))
    {
      if (v109 == 17)
      {
        __nwlog_obj();
        __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v86 = v109;
        if (os_log_type_enabled(v85, (os_log_type_t)v109))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v85, v86, "%{public}s called with null report", buf, 0xCu);
        }
      }

      else if ((_BYTE)v108)
      {
        v88 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v89 = v109;
        v90 = os_log_type_enabled(v85, (os_log_type_t)v109);
        if (v88)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
            v111 = 2082;
            os_log_type_t v112 = v88;
            _os_log_impl( &dword_181A5C000,  v85,  v89,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v88);
          goto LABEL_124;
        }

        if (v90)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v85, v89, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v91 = v109;
        if (os_log_type_enabled(v85, (os_log_type_t)v109))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v85,  v91,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (v18) {
      free(v18);
    }
    goto LABEL_10;
  }

  if (a2) {
    *a2 = *((_WORD *)v9 + 172);
  }
  if (!a3) {
    goto LABEL_10;
  }
  uint64_t v11 = v9[28];
  if (!v11) {
    goto LABEL_10;
  }
  size_t v12 = strdup(v11);
  if (v12)
  {
LABEL_9:
    *a3 = v12;
LABEL_10:

LABEL_48:
    return;
  }

  __nwlog_obj();
  os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  size_t v42 = "strict_strdup";
  os_log_type_t v28 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v28))
  {
    free(v28);
    goto LABEL_9;
  }

  __break(1u);
}

    free(v14);
    if (!v9) {
      return;
    }
LABEL_77:
    BOOL v26 = (char *)v9;
LABEL_78:
    free(v26);
    return;
  }

  os_log_type_t v17 = *(void *)(v4 + 24);
  if (!v17) {
    return;
  }
  os_log_type_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 160);
  if (!v18) {
    return;
  }
  nw_txt_record_t v7 = *(void **)(v4 + 40);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v19 = *(void *)(v4 + 88);
    if (v19) {
      *(void *)(v4 + 8_Block_object_dispose(va, 8) = v19 + 1;
    }
  }

  id v20 = *(void **)(a2 + 40);
  if (v20 == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v21 = *(void *)(a2 + 88);
    if (v21) {
      *(void *)(a2 + 8_Block_object_dispose(va, 8) = v21 + 1;
    }
  }

  v18(v4, a2);
  if (v20 == &nw_protocol_ref_counted_handle)
  {
LABEL_37:
    if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v27 = *(void *)(a2 + 88);
      if (v27)
      {
        os_log_type_t v28 = v27 - 1;
        *(void *)(a2 + 8_Block_object_dispose(va, 8) = v28;
        if (!v28)
        {
          size_t v29 = *(void (***)(void))(a2 + 64);
          if (v29)
          {
            *(void *)(a2 + 64) = 0LL;
            v29[2](v29);
            _Block_release(v29);
          }

          if ((*(_BYTE *)(a2 + 72) & 1) != 0)
          {
            size_t v30 = *(const void **)(a2 + 64);
            if (v30) {
              _Block_release(v30);
            }
          }

          free((void *)a2);
        }
      }
    }
  }

    free(v18);
    goto LABEL_68;
  }

  os_unfair_lock_unlock(v2 + 28);
  if ((v2[67]._os_unfair_lock_opaque & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    nw_txt_record_t v7 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if ((v2[67]._os_unfair_lock_opaque & 1) != 0) {
        nw_protocol_definition_t v8 = "dry-run ";
      }
      else {
        nw_protocol_definition_t v8 = "";
      }
      unint64_t v9 = nw_endpoint_handler_copy_endpoint(v2);
      logging_description = nw_endpoint_get_logging_description(v9);
      uint64_t v11 = v2[30]._os_unfair_lock_opaque;
      size_t v12 = logging_description;
      else {
        size_t v13 = off_189BBBBF0[v11];
      }
      uint64_t v43 = v13;
      BOOL v26 = v2;
      os_log_type_t v27 = v26;
      os_log_type_t v28 = "path";
      switch(v2[29]._os_unfair_lock_opaque)
      {
        case 0u:
          break;
        case 1u:
          os_log_type_t v28 = "resolver";
          break;
        case 2u:
          os_log_type_t v28 = nw_endpoint_flow_mode_string(v26[31]);
          break;
        case 3u:
          os_log_type_t v28 = "proxy";
          break;
        case 4u:
          os_log_type_t v28 = "fallback";
          break;
        case 5u:
          os_log_type_t v28 = "transform";
          break;
        default:
          os_log_type_t v28 = "unknown-mode";
          break;
      }

      size_t v31 = v27;
      os_unfair_lock_lock(v2 + 28);
      uint64_t v32 = v31[8];
      os_unfair_lock_unlock(v2 + 28);

      *(_DWORD *)buf = 136447746;
      os_log_type_t v47 = "nw_endpoint_handler_stack_uses_tls";
      os_log_type_t v48 = 2082;
      BOOL v49 = v2 + 42;
      os_log_type_t v50 = 2082;
      size_t v51 = v8;
      uint64_t v52 = 2082;
      __int128 v53 = (char *)v12;
      __int128 v54 = 2082;
      __int128 v55 = v43;
      __int128 v56 = 2082;
      char v57 = v28;
      BOOL v58 = 2114;
      os_log_type_t v59 = v32;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is not flow",  buf,  0x48u);
    }
  }

  unint64_t v9 = 0;
  uint64_t v10 = -a2;
  if (a2) {
    goto LABEL_68;
  }
LABEL_5:
  if (v10 < a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446978;
    os_log_type_t v50 = "m_sum16";
    size_t v51 = 1024;
    *(_DWORD *)uint64_t v52 = v10;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)&v52[6] = a3;
    __int128 v53 = 1024;
    *(_DWORD *)__int128 v54 = a2;
    os_log_type_t v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446978;
      os_log_type_t v50 = "m_sum16";
      size_t v51 = 1024;
      *(_DWORD *)uint64_t v52 = v10;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&v52[6] = a3;
      __int128 v53 = 1024;
      *(_DWORD *)__int128 v54 = a2;
      BOOL v24 = "%{public}s mlen %u < len %u (off %u) in m_sum16";
    }

    else if (v47)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      BOOL v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      uint64_t v34 = os_log_type_enabled(v22, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136447234;
          os_log_type_t v50 = "m_sum16";
          size_t v51 = 1024;
          *(_DWORD *)uint64_t v52 = v10;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = a3;
          __int128 v53 = 1024;
          *(_DWORD *)__int128 v54 = a2;
          v54[2] = 2082;
          *(void *)&v54[3] = v33;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s mlen %u < len %u (off %u) in m_sum16, dumping backtrace:%{public}s",  buf,  0x28u);
        }

        free(v33);
LABEL_82:
        if (v21)
        {
          uint64_t v43 = (char *)v21;
LABEL_100:
          free(v43);
          goto LABEL_101;
        }

        goto LABEL_101;
      }

      if (!v34) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446978;
      os_log_type_t v50 = "m_sum16";
      size_t v51 = 1024;
      *(_DWORD *)uint64_t v52 = v10;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&v52[6] = a3;
      __int128 v53 = 1024;
      *(_DWORD *)__int128 v54 = a2;
      BOOL v24 = "%{public}s mlen %u < len %u (off %u) in m_sum16, no backtrace";
    }

    else
    {
      BOOL v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446978;
      os_log_type_t v50 = "m_sum16";
      size_t v51 = 1024;
      *(_DWORD *)uint64_t v52 = v10;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&v52[6] = a3;
      __int128 v53 = 1024;
      *(_DWORD *)__int128 v54 = a2;
      BOOL v24 = "%{public}s mlen %u < len %u (off %u) in m_sum16, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0x1Eu);
    goto LABEL_82;
  }

  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v50 = "__nw_frame_unclaimed_bytes";
    os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v50 = "__nw_frame_unclaimed_bytes";
      os_log_type_t v28 = "%{public}s called with null frame";
    }

    else if (v47)
    {
      __int16 v35 = (char *)__nw_create_backtrace_string();
      BOOL v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      int8x16_t v36 = os_log_type_enabled(v26, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v50 = "__nw_frame_unclaimed_bytes";
          size_t v51 = 2082;
          *(void *)uint64_t v52 = v35;
          _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        goto LABEL_87;
      }

      if (!v36)
      {
LABEL_87:
        if (v25) {
          free(v25);
        }
        goto LABEL_89;
      }

      *(_DWORD *)buf = 136446210;
      os_log_type_t v50 = "__nw_frame_unclaimed_bytes";
      os_log_type_t v28 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      BOOL v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v50 = "__nw_frame_unclaimed_bytes";
      os_log_type_t v28 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0xCu);
    goto LABEL_87;
  }

  uint64_t v11 = *(void *)(a1 + 112);
  if (!v11
    || (*(_WORD *)(a1 + 204) & 0x100) != 0
    && g_channel_check_validity
    && (!g_channel_check_validity(a1, *(void *)(a1 + 88)) || (uint64_t v11 = *(void *)(a1 + 112)) == 0))
  {
LABEL_89:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v44 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v50 = "m_sum16";
      _os_log_impl(&dword_181A5C000, v44, OS_LOG_TYPE_INFO, "%{public}s frame is no longer valid", buf, 0xCu);
    }

    char v45 = 6;
    goto LABEL_92;
  }

  return (unsigned __int16)~(unsigned __int16)MEMORY[0x186E115BC](v11 + *(unsigned int *)(a1 + 56) + a2, a3, 0LL);
}

      if (v17) {
        free(v17);
      }
      return 0LL;
    }

    if (!v33)
    {
      os_log_type_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        int8x16_t v36 = "nw_protocol_udp_copy_info";
        id v20 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_66;
      }

      goto LABEL_67;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v26 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        int8x16_t v36 = "nw_protocol_udp_copy_info";
        id v20 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_66;
      }

      goto LABEL_67;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      int8x16_t v36 = "nw_protocol_udp_copy_info";
      uint64_t v37 = 2082;
      size_t v38 = (uint64_t)backtrace_string;
      os_log_type_t v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_181A5C000, v18, v19, v27, buf, 0x16u);
    }

  if (!v2)
  {
    __nwlog_obj();
    os_log_type_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v140 = "_strict_strlcat";
    os_log_type_t v116 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v116);
    if (result) {
      goto LABEL_268;
    }
    free(v116);
  }

  uint64_t v32 = 0LL;
  os_log_type_t v33 = 107LL;
  while (1)
  {
    uint64_t v34 = &v2[v32];
    if (!v2[v32]) {
      break;
    }
    ++v32;
    if (!--v33) {
      goto LABEL_79;
    }
  }

  if (v33 < 2)
  {
LABEL_78:
    *uint64_t v34 = 0;
  }

  else
  {
    __int16 v35 = v33 - 2;
    int8x16_t v36 = 106 - v32;
    uint64_t v37 = 105 - v32;
    if (v37 >= 0xE) {
      uint64_t v37 = 14LL;
    }
    memcpy(v34, "result_removed", v37 + 1);
    uint64_t v34 = v2 + 106;
    while (v35 <= 0xD)
    {
      if (!--v36) {
        goto LABEL_78;
      }
    }
  }

LABEL_68:
              if (!v16) {
                goto LABEL_70;
              }
              goto LABEL_69;
            }

            if (!v106)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v17 = (os_log_s *)(id)gLogObj;
              os_log_type_t v48 = type;
              if (os_log_type_enabled(v17, type))
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                BOOL v110 = 2082;
                *(void *)v111 = v14;
                _os_log_impl( &dword_181A5C000,  v17,  v48,  "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded",  buf,  0x16u);
              }

              goto LABEL_67;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v17 = (os_log_s *)(id)gLogObj;
            __int16 v35 = type;
            int8x16_t v36 = os_log_type_enabled(v17, type);
            if (!backtrace_string)
            {
              if (v36)
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                BOOL v110 = 2082;
                *(void *)v111 = v14;
                _os_log_impl( &dword_181A5C000,  v17,  v35,  "%{public}s received unknown type XPC %{public}s, no backtrace",  buf,  0x16u);
              }

              goto LABEL_67;
            }

            if (v36)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              BOOL v110 = 2082;
              *(void *)v111 = v14;
              *(_WORD *)&v111[8] = 2082;
              *(void *)&v111[10] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v17,  v35,  "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(backtrace_string);
            if (!v16)
            {
LABEL_70:
              if (v14)
              {
                free(v14);
                BOOL v49 = 1;
LABEL_180:
                __int128 v53 = v49 == 0;
                goto LABEL_181;
              }

      if (v19 | v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v22 = (NWConcrete_nw_ws_ping_request *)(id)gLogObj;
        if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
        {
          size_t v38 = *(void *)(*(void *)(a1 + 48) + 8LL) + 275LL;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v38;
          _os_log_impl( &dword_181A5C000,  (os_log_t)v22,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s client queue or pong handler not set",  buf,  0x16u);
        }
      }

      else
      {
        BOOL v22 = nw_ws_ping_request_create(v48, 0LL, 0LL);
        nw_array_append(*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 104LL), v22);
        os_log_type_t v21 = 0LL;
      }

      goto LABEL_71;
    }

    __nwlog_obj();
    size_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
    size_t v30 = (char *)_os_log_send_and_compose_impl();

    __int128 v55 = OS_LOG_TYPE_ERROR;
    __int128 v54 = 0;
    if ((__nwlog_fault(v30, &v55, &v54) & 1) != 0)
    {
      if (v55 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v32 = v55;
        if (os_log_type_enabled(v31, v55))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
          _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null nw_protocol_metadata_is_ws(metadata)",  buf,  0xCu);
        }
      }

      else if (v54)
      {
        __int16 v35 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        unsigned __int8 v46 = v55;
        int8x16_t v36 = os_log_type_enabled(v31, v55);
        if (v35)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v35;
            _os_log_impl( &dword_181A5C000,  v31,  v46,  "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v35);
          goto LABEL_64;
        }

        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
          _os_log_impl( &dword_181A5C000,  v31,  v46,  "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v37 = v55;
        if (os_log_type_enabled(v31, v55))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
          _os_log_impl( &dword_181A5C000,  v31,  v37,  "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        goto LABEL_68;
      }

      if (!v29)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "nw_resolver_get_scoped_interface_index";
          _os_log_impl( &dword_181A5C000,  v18,  v28,  "%{public}s called with null service_flags, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_67;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "nw_resolver_get_scoped_interface_index";
          _os_log_impl(&dword_181A5C000, v18, v25, "%{public}s called with null service_flags, no backtrace", buf, 0xCu);
        }

        goto LABEL_67;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v32 = "nw_resolver_get_scoped_interface_index";
        os_log_type_t v33 = 2082;
        *(void *)uint64_t v34 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v18,  v25,  "%{public}s called with null service_flags, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_55;
    }

    goto LABEL_68;
  }

  if (*((_DWORD *)v3 + 14))
  {
    *a2 |= 0x10000000u;
    id v5 = *((unsigned int *)v3 + 14);
    nw_endpoint_type_t v6 = "ServiceIndex";
    if (!(_DWORD)v5) {
      goto LABEL_27;
    }
  }

  else
  {
    nw_txt_record_t v7 = (char *)*((id *)v3 + 26);
    if (v7
      || (nw_txt_record_t v7 = (char *)nw_parameters_copy_required_interface(*((nw_parameters_t *)v4 + 2))) != 0LL
      || (nw_txt_record_t v7 = (char *)nw_endpoint_copy_interface(*((void **)v4 + 3))) != 0LL)
    {
      nw_endpoint_type_t v6 = v7 + 104;
      nw_protocol_definition_t v8 = v7;
      unint64_t v9 = v8[24];

      if (v9 == 4) {
        id v5 = 0xFFFFFFFFLL;
      }
      else {
        id v5 = v8[2];
      }
    }

    else if ((*((_BYTE *)v4 + 346) & 0x10) != 0)
    {
      nw_protocol_definition_t v8 = 0LL;
      nw_endpoint_type_t v6 = "LocalOnly";
      id v5 = 0xFFFFFFFFLL;
    }

    else
    {
      required_interface_os_log_type_t type = nw_parameters_get_required_interface_type(*((nw_parameters_t *)v4 + 2));
      nw_protocol_definition_t v8 = 0LL;
      else {
        id v5 = 0LL;
      }
      else {
        nw_endpoint_type_t v6 = "<NULL>";
      }
    }

    if (!(_DWORD)v5) {
      goto LABEL_27;
    }
  }

  if ((*((_BYTE *)v4 + 346) & 0x20) == 0)
  {
    if (*((_BYTE *)v4 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v10 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = "unknown";
        *(_DWORD *)buf = 136446978;
        uint64_t v32 = "nw_resolver_get_scoped_interface_index";
        os_log_type_t v33 = 2082;
        if (v6) {
          uint64_t v11 = v6;
        }
        *(void *)uint64_t v34 = (char *)v4 + 256;
        *(_WORD *)&v34[8] = 2082;
        *(void *)&v34[10] = v11;
        *(_WORD *)&v34[18] = 1024;
        __int16 v35 = v5;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s] Scoping resolution to %{public}s [%d]",  buf,  0x26u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        size_t v12 = *((_DWORD *)v4 + 85);
        size_t v13 = "unknown";
        if (v6) {
          size_t v13 = v6;
        }
        *(_DWORD *)buf = 136446978;
        uint64_t v32 = "nw_resolver_get_scoped_interface_index";
        os_log_type_t v33 = 1024;
        *(_DWORD *)uint64_t v34 = v12;
        *(_WORD *)&v34[4] = 2082;
        *(void *)&v34[6] = v13;
        *(_WORD *)&v34[14] = 1024;
        *(_DWORD *)&v34[16] = v5;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_INFO,  "%{public}s [R%u] Scoping resolution to %{public}s [%d]",  buf,  0x22u);
      }
    }
  }

      goto LABEL_68;
    }

    if (!LOBYTE(v41[0]))
    {
      __nwlog_obj();
      size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v40 = applier[0];
      if (os_log_type_enabled(v29, applier[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl( &dword_181A5C000,  v29,  v40,  "%{public}s called with null alpn, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_67;
    }

    int8x16_t v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v37 = applier[0];
    size_t v38 = os_log_type_enabled(v29, applier[0]);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_181A5C000, v29, v37, "%{public}s called with null alpn, no backtrace", buf, 0xCu);
      }

      goto LABEL_67;
    }

    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v36;
      _os_log_impl( &dword_181A5C000,  v29,  v37,  "%{public}s called with null alpn, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v36);
  }

    free(backtrace_string);
    goto LABEL_94;
  }

  if (!v7)
  {
    __nwlog_obj();
    size_t v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int128 v53 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_181A5C000, v29, v32, "%{public}s called with null queue", buf, 0xCu);
      }

      goto LABEL_93;
    }

    if (!v53)
    {
      __nwlog_obj();
      size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl( &dword_181A5C000,  v29,  v50,  "%{public}s called with null queue, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_93;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v42 = type;
    uint64_t v43 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_181A5C000, v29, v42, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }

      goto LABEL_93;
    }

    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v29,  v42,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_67;
  }

  if (v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v9 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = "Unb";
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&buf[12] = 2082;
      if (a2) {
        uint64_t v10 = "B";
      }
      *(void *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 2082;
      __int128 v56 = a1;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}slocking opportunistic traffic on %{public}s",  buf,  0x20u);
    }

    uint64_t v11 = (dispatch_queue_s *)v7;
    size_t v12 = v8;
    size_t v13 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v14 = v13;
    if (v13)
    {
      xpc_dictionary_set_uint64(v13, (const char *)networkd_privileged_key_type, 2uLL);
      xpc_dictionary_set_BOOL(v14, (const char *)networkd_privileged_key_opportunistic_disable, a2);
      uint64_t v15 = xpc_string_create(a1);
      if (v15)
      {
        xpc_dictionary_set_value(v14, (const char *)networkd_privileged_key_opportunistic_ifname, v15);
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __networkd_privileged_set_opportunistic_async_block_invoke_41;
        __int128 v56 = (const char *)&unk_189BB5B70;
        BOOL v58 = v12;
        os_log_type_t v59 = a2;
        uint64_t v16 = v15;
        char v57 = v16;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_opportunistic_async", v14, v11, buf);

LABEL_31:
        os_log_type_t v25 = 1LL;
        goto LABEL_32;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v17 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
      os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      __int128 v53 = 0;
      if ((__nwlog_fault(v18, &type, &v53) & 1) != 0)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v19 = (os_log_s *)(id)gLogObj;
          id v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
            _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s xpc_string_create failed", buf, 0xCu);
          }
        }

        else if (v53)
        {
          os_log_type_t v21 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v19 = (os_log_s *)(id)gLogObj;
          BOOL v22 = type;
          os_log_type_t v23 = os_log_type_enabled(v19, type);
          if (v21)
          {
            if (v23)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v21;
              _os_log_impl( &dword_181A5C000,  v19,  v22,  "%{public}s xpc_string_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v21);
            if (!v18) {
              goto LABEL_30;
            }
            goto LABEL_29;
          }

          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
            _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s xpc_string_create failed, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v19 = (os_log_s *)(id)gLogObj;
          BOOL v24 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
            _os_log_impl( &dword_181A5C000,  v19,  v24,  "%{public}s xpc_string_create failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v18)
      {
LABEL_30:
        uint64_t v16 = 0LL;
        goto LABEL_31;
      }
        }
}

    free(backtrace_string);
    goto LABEL_68;
  }

  __nwlog_obj();
  os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
  os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  __int128 v54 = 0;
  if (__nwlog_fault(v18, &type, &v54))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
        _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v54)
    {
      size_t v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v32 = type;
      os_log_type_t v33 = os_log_type_enabled(v19, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v31;
          _os_log_impl( &dword_181A5C000,  v19,  v32,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v31);
        goto LABEL_89;
      }

      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
        _os_log_impl(&dword_181A5C000, v19, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v43 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_finalize_output_frames";
        _os_log_impl( &dword_181A5C000,  v19,  v43,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

      if (v17) {
        free(v17);
      }
      goto LABEL_16;
    }

    __nwlog_obj();
    os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    size_t v51 = "__nw_protocol_disconnected";
    BOOL v26 = (char *)_os_log_send_and_compose_impl();

    v45[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, v45, &type))
    {
      if (v45[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          size_t v51 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }

      else if (type)
      {
        int8x16_t v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v37 = v45[0];
        size_t v38 = os_log_type_enabled(v27, v45[0]);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            size_t v51 = "__nw_protocol_disconnected";
            uint64_t v52 = 2082;
            __int128 v53 = v36;
            _os_log_impl( &dword_181A5C000,  v27,  v37,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v36);
          goto LABEL_83;
        }

        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          size_t v51 = "__nw_protocol_disconnected";
          _os_log_impl( &dword_181A5C000,  v27,  v37,  "%{public}s called with null other_protocol, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v43 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          size_t v51 = "__nw_protocol_disconnected";
          _os_log_impl( &dword_181A5C000,  v27,  v43,  "%{public}s called with null other_protocol, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      if (v17) {
        free(v17);
      }
      goto LABEL_16;
    }

    __nwlog_obj();
    os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    size_t v51 = "__nw_protocol_connected";
    BOOL v26 = (char *)_os_log_send_and_compose_impl();

    v45[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, v45, &type))
    {
      if (v45[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          size_t v51 = "__nw_protocol_connected";
          _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }

      else if (type)
      {
        int8x16_t v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v37 = v45[0];
        size_t v38 = os_log_type_enabled(v27, v45[0]);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            size_t v51 = "__nw_protocol_connected";
            uint64_t v52 = 2082;
            __int128 v53 = v36;
            _os_log_impl( &dword_181A5C000,  v27,  v37,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v36);
          goto LABEL_83;
        }

        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          size_t v51 = "__nw_protocol_connected";
          _os_log_impl( &dword_181A5C000,  v27,  v37,  "%{public}s called with null other_protocol, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v43 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          size_t v51 = "__nw_protocol_connected";
          _os_log_impl( &dword_181A5C000,  v27,  v43,  "%{public}s called with null other_protocol, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v21) {
    free(v21);
  }
  nw_protocol_definition_t v8 = 0LL;
  unint64_t v9 = 0LL;
LABEL_11:
  nw_protocol_set_flow_id_from_protocol((_OWORD *)v8, v9);
  uint64_t v10 = *(void *)(a1 + 32);
  if ((!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0) && gLogDatapath)
  {
    __nwlog_obj();
    BOOL v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_DEBUG))
    {
LABEL_42:

      return 0LL;
    }

    os_log_type_t v25 = "";
    os_log_type_t v27 = *(void *)(a1 + 32);
    BOOL v26 = *(void *)(a1 + 40);
    os_log_type_t v28 = v27 == 0;
    if (v27) {
      size_t v29 = (const char *)(v27 + 407);
    }
    else {
      size_t v29 = "";
    }
    if (!v28) {
      os_log_type_t v25 = " ";
    }
    if (v26)
    {
      size_t v30 = *(void *)(v26 + 48);
LABEL_41:
      *(_DWORD *)buf = 136446978;
      uint64_t v52 = "nw_protocol_implementation_remove_input_handler_block_invoke";
      __int128 v53 = 2082;
      __int128 v54 = (void *)v29;
      __int128 v55 = 2080;
      __int128 v56 = v25;
      char v57 = 2048;
      BOOL v58 = v30;
      _os_log_impl( &dword_181A5C000,  (os_log_t)v24,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReset default input handler to %p",  buf,  0x2Au);
      goto LABEL_42;
    }

    os_log_type_t v47 = v29;
    os_log_type_t v48 = v25;
    __nwlog_obj();
    size_t v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v52 = "__nw_protocol_get_input_handler";
    size_t v40 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v49 = 0;
    if (__nwlog_fault(v40, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        size_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v42 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v52 = "__nw_protocol_get_input_handler";
          _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s called with null protocol", buf, 0xCu);
        }
      }

      else if (v49)
      {
        uint64_t v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        size_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v44 = type;
        char v45 = os_log_type_enabled(v41, type);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v52 = "__nw_protocol_get_input_handler";
            __int128 v53 = 2082;
            __int128 v54 = v43;
            _os_log_impl( &dword_181A5C000,  v41,  v44,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v43);
          goto LABEL_86;
        }

        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v52 = "__nw_protocol_get_input_handler";
          _os_log_impl(&dword_181A5C000, v41, v44, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        size_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        unsigned __int8 v46 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v52 = "__nw_protocol_get_input_handler";
          _os_log_impl( &dword_181A5C000,  v41,  v46,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        if (v31) {
          free(v31);
        }
        goto LABEL_69;
      }
    }

    __nwlog_obj();
    nw_protocol_definition_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    v64[0] = 0;
    if (__nwlog_fault(v9, type, v64))
    {
      if (type[0] == 17)
      {
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v11 = type[0];
        if (os_log_type_enabled(v10, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v64[0])
      {
        size_t v12 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v13 = type[0];
        id v14 = os_log_type_enabled(v10, (os_log_type_t)type[0]);
        if (v12)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v12);
          if (!v9) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }

        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v15 = type[0];
        if (os_log_type_enabled(v10, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v9)
    {
LABEL_24:
      nw_txt_record_t v7 = 0LL;
      __int128 v54 = 0;
      goto LABEL_25;
    }

      os_log_type_t v21 = *(void **)(a1 + 32);
      goto LABEL_68;
    }

    __nwlog_obj();
    size_t v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int128 v54 = "nw_listener_teardown_protocol_inbox";
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();

    nw_txt_record_t v7 = &nw_protocol_copy_http_transaction_definition_definition;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v51 = 0;
    if (__nwlog_fault(v43, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          __int128 v54 = "nw_listener_teardown_protocol_inbox";
          _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s called with null listener", buf, 0xCu);
        }
      }

      else
      {
        if (v51)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v48 = type;
          BOOL v49 = os_log_type_enabled(v47, type);
          if (backtrace_string)
          {
            if (v49)
            {
              *(_DWORD *)buf = 136446466;
              __int128 v54 = "nw_listener_teardown_protocol_inbox";
              __int128 v55 = 2082;
              __int128 v56 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            nw_protocol_definition_t v8 = &nw_protocol_copy_http_transaction_definition_definition;
            nw_txt_record_t v7 = &nw_protocol_copy_http_transaction_definition_definition;
            free(backtrace_string);
          }

          else
          {
            if (v49)
            {
              *(_DWORD *)buf = 136446210;
              __int128 v54 = "nw_listener_teardown_protocol_inbox";
              _os_log_impl(&dword_181A5C000, v47, v48, "%{public}s called with null listener, no backtrace", buf, 0xCu);
            }

            nw_protocol_definition_t v8 = &nw_protocol_copy_http_transaction_definition_definition;
            nw_txt_record_t v7 = &nw_protocol_copy_http_transaction_definition_definition;
          }

          goto LABEL_94;
        }

        __nwlog_obj();
        char v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          __int128 v54 = "nw_listener_teardown_protocol_inbox";
          _os_log_impl( &dword_181A5C000,  v44,  v50,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      nw_txt_record_t v7 = &nw_protocol_copy_http_transaction_definition_definition;
    }

        free(v26);
        goto LABEL_68;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        char v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_181A5C000, v27, v35, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v38 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        char v44 = "nw_listener_create_with_connection";
        _os_log_impl( &dword_181A5C000,  v27,  v38,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

        goto LABEL_68;
      }

      if (!v62[0])
      {
        __nwlog_obj();
        size_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v41 = v58;
        if (os_log_type_enabled(v30, (os_log_type_t)v58))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl( &dword_181A5C000,  v30,  v41,  "%{public}s called with null join_identifier, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_67;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v38 = v58;
      size_t v39 = os_log_type_enabled(v30, (os_log_type_t)v58);
      if (!backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl( &dword_181A5C000,  v30,  v38,  "%{public}s called with null join_identifier, no backtrace",  buf,  0xCu);
        }

        goto LABEL_67;
      }

      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v30,  v38,  "%{public}s called with null join_identifier, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_42;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
    size_t v29 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v5_Block_object_dispose(va, 8) = 16;
    v62[0] = 0;
    if (__nwlog_fault(v29, &v58, v62))
    {
      if (v58 == 17)
      {
        __nwlog_obj();
        size_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v31 = v58;
        if (os_log_type_enabled(v30, (os_log_type_t)v58))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null join_protocol", buf, 0xCu);
        }

        goto LABEL_67;
      }

      if (!v62[0])
      {
        __nwlog_obj();
        size_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v37 = v58;
        if (os_log_type_enabled(v30, (os_log_type_t)v58))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl( &dword_181A5C000,  v30,  v37,  "%{public}s called with null join_protocol, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_67;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = v58;
      uint64_t v34 = os_log_type_enabled(v30, (os_log_type_t)v58);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl(&dword_181A5C000, v30, v33, "%{public}s called with null join_protocol, no backtrace", buf, 0xCu);
        }

        goto LABEL_67;
      }

      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null join_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_68;
      }
    }

    cancel_group = (dispatch_group_s *)v3->cancel_group;
    if (cancel_group
      || (size_t v29 = dispatch_group_create(),
          size_t v30 = v3->cancel_group,
          v3->cancel_group = (OS_dispatch_group *)v29,
          v30,
          (cancel_group = (dispatch_group_s *)v3->cancel_group) != 0LL))
    {
LABEL_85:
      dispatch_group_enter(cancel_group);
      nw_array_append((uint64_t)v3->probes, v5);
      unsigned __int8 v46 = v3->parameters;
      if (v46 && !nw_path_parameters_get_logging_disabled(*((void *)v46 + 13)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v47 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v48 = (uint64_t)v3->probes;
          if (v48) {
            os_log_type_t v48 = (uint64_t)(*(void *)(v48 + 24) - *(void *)(v48 + 16)) >> 3;
          }
          BOOL v49 = v3->top_id;
          *(_DWORD *)buf = 136446978;
          v67 = "nw_connection_add_probe_locked";
          char v68 = 1024;
          *(_DWORD *)id v69 = v49;
          *(_WORD *)&v69[4] = 2112;
          *(void *)&v69[6] = v5;
          os_log_type_t v70 = 2048;
          BOOL v71 = v48;
          _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Added probe %@ to probe list, now have %zu probes",  buf,  0x26u);
        }
      }

      unint64_t v9 = 1LL;
      goto LABEL_95;
    }

    __nwlog_obj();
    size_t v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v67 = "nw_connection_add_probe_locked";
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    nw_endpoint_t v64 = 0;
    if (__nwlog_fault(v32, &type, &v64))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s dispatch_group_create failed", buf, 0xCu);
        }
      }

      else if (v64)
      {
        size_t v42 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v43 = type;
        char v44 = os_log_type_enabled(v33, type);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            v67 = "nw_connection_add_probe_locked";
            char v68 = 2082;
            *(void *)id v69 = v42;
            _os_log_impl( &dword_181A5C000,  v33,  v43,  "%{public}s dispatch_group_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v42);
          goto LABEL_82;
        }

        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_181A5C000, v33, v43, "%{public}s dispatch_group_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v45 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_connection_add_probe_locked";
          _os_log_impl( &dword_181A5C000,  v33,  v45,  "%{public}s dispatch_group_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }
}

        free(v13);
        goto LABEL_68;
      }

      *(_DWORD *)applier = 136446210;
      *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
      uint64_t v52 = "%{public}s called with null socket_handler, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v50 = (os_log_s *)gLogObj;
      size_t v51 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_66;
      }
      *(_DWORD *)applier = 136446210;
      *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
      uint64_t v52 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v50, v51, v52, applier, 0xCu);
    goto LABEL_66;
  }

  size = dispatch_data_get_size(v4);
  uint64_t v11 = size;
  if (!size)
  {
    uint64_t v15 = nw_frame_create(0, 0LL, 0, (uint64_t)nw_socket_frame_input_finalizer, v9 + 96);
    if (v15) {
      goto LABEL_26;
    }
    size_t v13 = 0LL;
    goto LABEL_36;
  }

  size_t v12 = (char *)malloc(size);
  size_t v13 = v12;
  if (v12)
  {
    *(void *)os_log_type_t type = 0LL;
    uint64_t v73 = type;
    __int16 v74 = 0x2000000000LL;
    uint64_t v75 = 0LL;
    char v68 = 0LL;
    id v69 = &v68;
    os_log_type_t v70 = 0x2000000000LL;
    BOOL v71 = v12;
    *(void *)applier = MEMORY[0x1895F87A8];
    *(void *)&applier[8] = 0x40000000LL;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(void *)os_log_type_t v77 = &unk_189BBF598;
    *(void *)&v77[16] = &v68;
    os_log_type_t v78 = v11;
    *(void *)&v77[8] = type;
    dispatch_data_apply(v4, applier);
    _Block_object_dispose(&v68, 8);
    _Block_object_dispose(type, 8);
    id v14 = (uint64_t)v13;
    goto LABEL_10;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(void *)&applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = v11;
  __int128 v53 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v53))
  {
    free(v53);
    *(void *)os_log_type_t type = 0LL;
    uint64_t v73 = type;
    __int16 v74 = 0x2000000000LL;
    uint64_t v75 = 0LL;
    char v68 = 0LL;
    id v69 = &v68;
    os_log_type_t v70 = 0x2000000000LL;
    BOOL v71 = 0LL;
    *(void *)applier = MEMORY[0x1895F87A8];
    *(void *)&applier[8] = 0x40000000LL;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(void *)os_log_type_t v77 = &unk_189BBF598;
    *(void *)&v77[16] = &v68;
    os_log_type_t v78 = v11;
    *(void *)&v77[8] = type;
    dispatch_data_apply(v4, applier);
    _Block_object_dispose(&v68, 8);
    _Block_object_dispose(type, 8);
    id v14 = 0LL;
LABEL_10:
    uint64_t v15 = nw_frame_create(0, v14, v11, (uint64_t)nw_socket_frame_input_finalizer, v9 + 96);
    if (v15)
    {
      *(_WORD *)(v15 + 204) |= 1u;
LABEL_26:
      *(_BYTE *)(v15 + 186) = *(_BYTE *)(v15 + 186) & 0xFC | v2 & 3;
      *(void *)(v15 + 16) = 0LL;
      BOOL v26 = *(uint64_t **)(v9 + 384);
      *(void *)(v15 + 24) = v26;
      *BOOL v26 = v15;
      *(void *)(v9 + 384) = v15 + 16;
      if ((*(_WORD *)(v9 + 397) & 0x80) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v27 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)applier = 136446978;
          *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v9 + 404;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)os_log_type_t v77 = v11;
          *(_WORD *)&v77[4] = 1024;
          *(_DWORD *)&v77[6] = v2;
          _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Adding initial packet of length %u, ECN %u",  applier,  0x22u);
        }
      }

      goto LABEL_68;
    }

    goto LABEL_68;
  }

  unint64_t v9 = v7;
  uint64_t v10 = [v9 type];

  if ((v10 - 3) <= 0xFFFFFFFD)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s Endpoint type is not an address or host, cannot synthesize URL",  buf,  0xCu);
    }

    goto LABEL_6;
  }

  size_t v13 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL);
  if (Mutable)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v57 = 0;
    if (v8 && a3)
    {
      v50[0] = MEMORY[0x1895F87A8];
      v50[1] = 3221225472LL;
      v50[2] = __nw_endpoint_proxy_copy_synthesized_url_block_invoke;
      v50[3] = &unk_189BBBAF8;
      v50[4] = buf;
      nw_parameters_internal_iterate_protocol_stack(v8, 4, 0, v50);
      if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v52 = 136446210;
          __int128 v53 = "nw_endpoint_proxy_copy_synthesized_url";
          _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s Found TLS protocol, using https://",  v52,  0xCu);
        }

        uint64_t v16 = v9;
        os_log_type_t v17 = [v16 port];

        os_log_type_t v18 = v17 != 47873;
        if (a4 && v17 != 47873) {
          *a4 = 1;
        }
        CFStringAppend(Mutable, @"https://");
        if (v10 != 2)
        {
LABEL_17:
          if (v10 == 1)
          {
            os_log_type_t v19 = nw_endpoint_copy_address_string((nw_endpoint_t)v9);
            if (v19)
            {
              address_family = nw_endpoint_get_address_family(v9);
              BOOL v22 = address_family == 30 || address_family == 18;
              if (v18 && v22) {
                CFStringAppendFormat(Mutable, 0LL, @"[%s]", v19);
              }
              else {
                CFStringAppendFormat(Mutable, 0LL, @"%s", v19);
              }
              free(v19);
            }
          }

  if (v25)
  {
    size_t v42 = (char *)v25;
    goto LABEL_69;
  }

                if (v45) {
                  free(v45);
                }
                goto LABEL_69;
              }
            }
          }

          else if (v17 <= 0xFF)
          {
            id v66 = 0u;
            v67 = 0u;
            nw_endpoint_t v64 = 0u;
            v65 = 0u;
            BOOL v62 = 0u;
            uint64_t v63 = 0u;
            os_log_type_t v60 = 0u;
            __int16 v61 = 0u;
            BOOL v58 = 0u;
            os_log_type_t v59 = 0u;
            __int128 v56 = 0u;
            char v57 = 0u;
            __int128 v54 = 0u;
            __int128 v55 = 0u;
            memset(__s, 0, sizeof(__s));
            memcpy(__s, v13, v16 - v13);
            BOOL v26 = nw_endpoint_get_port(*(nw_endpoint_t *)(v6 + 312));
            host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(__s, v26);
            goto LABEL_39;
          }
        }
      }

    if (v29) {
      free(v29);
    }
    goto LABEL_49;
  }

  *((_DWORD *)v4 + 2_Block_object_dispose(va, 8) = 16;
  if (v3)
  {
    id v5 = v3;
    nw_endpoint_type_t v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v5,  0,  0);

    nw_txt_record_t v7 = (void *)*((void *)a1 + 6);
    *((void *)a1 + 6) = v6;

    nw_protocol_definition_t v8 = (void *)*((void *)a1 + 6);
    if (!v8)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v9 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      int8x16_t v36 = 0;
      if (__nwlog_fault(v10, &type, &v36))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v11 = (os_log_s *)(id)gLogObj;
          size_t v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
            _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s nw_parameters_copy failed", buf, 0xCu);
          }
        }

        else if (v36)
        {
          os_log_type_t v19 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v11 = (os_log_s *)(id)gLogObj;
          id v20 = type;
          os_log_type_t v21 = os_log_type_enabled(v11, type);
          if (v19)
          {
            if (v21)
            {
              *(_DWORD *)buf = 136446466;
              size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
              size_t v41 = 2082;
              size_t v42 = v19;
              _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s nw_parameters_copy failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v19);
            if (!v10) {
              goto LABEL_48;
            }
            goto LABEL_38;
          }

          if (v21)
          {
            *(_DWORD *)buf = 136446210;
            size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
            _os_log_impl(&dword_181A5C000, v11, v20, "%{public}s nw_parameters_copy failed, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v11 = (os_log_s *)(id)gLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
            _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s nw_parameters_copy failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (v10) {
LABEL_38:
      }
        free(v10);
LABEL_48:

LABEL_49:
      a1 = 0LL;
      goto LABEL_50;
    }

    goto LABEL_11;
  }

  secure_tcp = nw_parameters_create_secure_tcp(&__block_literal_global_18956, &__block_literal_global_91);
  id v14 = (void *)*((void *)a1 + 6);
  *((void *)a1 + 6) = secure_tcp;

  nw_protocol_definition_t v8 = (void *)*((void *)a1 + 6);
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int8x16_t v36 = 0;
    if (__nwlog_fault(v16, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
          _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }

      else if (v36)
      {
        BOOL v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v17, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
            size_t v41 = 2082;
            size_t v42 = v22;
            _os_log_impl( &dword_181A5C000,  v17,  v23,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v22);
          if (!v16) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }

        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
          _os_log_impl(&dword_181A5C000, v17, v23, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)(id)gLogObj;
        BOOL v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          size_t v40 = "-[NWConcrete_tcp_connection initWithParameters:]";
          _os_log_impl( &dword_181A5C000,  v17,  v26,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v16) {
      goto LABEL_48;
    }
LABEL_47:
    free(v16);
    goto LABEL_48;
  }

  if (v7) {
    free(v7);
  }
  return 0LL;
}

      free(backtrace_string);
      goto LABEL_79;
    }

    size_t v30 = (os_log_s *)__nwlog_obj();
    size_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
    uint64_t v32 = "%{public}s called with null protocol";
LABEL_78:
    _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
LABEL_79:
    if (v29) {
      free(v29);
    }
    return 0LL;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
    size_t v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v30 = (os_log_s *)__nwlog_obj();
      size_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
      uint64_t v32 = "%{public}s called with null http_connect";
      goto LABEL_78;
    }

    if (!v39)
    {
      size_t v30 = (os_log_s *)__nwlog_obj();
      size_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
      uint64_t v32 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_78;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v30 = (os_log_s *)__nwlog_obj();
    size_t v31 = type;
    int8x16_t v36 = os_log_type_enabled(v30, type);
    if (backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        __int16 v35 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
        goto LABEL_66;
      }

      goto LABEL_67;
    }

    if (!v36) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
    uint64_t v32 = "%{public}s called with null http_connect, no backtrace";
    goto LABEL_78;
  }

  if (*((_DWORD *)handle + 70) != 2)
  {
    if ((handle[184] & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        size_t v42 = 2080;
        uint64_t v43 = " ";
        _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sNot yet connected, returning 0 input frames",  buf,  0x20u);
        return 0LL;
      }
    }

    return 0LL;
  }

  uint64_t v11 = *((void *)handle + 28);
  if (!v11) {
    goto LABEL_34;
  }
  size_t v12 = 0;
  size_t v13 = 0LL;
  while (v11 && nw_frame_unclaimed_length((_DWORD *)v11) + v12 <= a4 && v13 <= a5)
  {
    uint64_t v16 = *(void *)(v11 + 32);
    os_log_type_t v17 = *(void **)(v11 + 40);
    uint64_t v15 = (nw_frame **)(v11 + 32);
    if (v16)
    {
      *(void *)(v16 + 40) = v17;
      os_log_type_t v17 = *(void **)(v11 + 40);
    }

    else
    {
      *((void *)handle + 29) = v17;
    }

    void *v17 = v16;
    *uint64_t v15 = 0LL;
    *(void *)(v11 + 40) = 0LL;
    tqh_last = a6->tqh_last;
    *(void *)(v11 + 40) = tqh_last;
    *tqh_last = (nw_frame *)v11;
    a6->tqh_last = v15;
    v12 += nw_frame_unclaimed_length((_DWORD *)v11);
    size_t v13 = (v13 + 1);
    uint64_t v11 = *((void *)handle + 28);
  }

  if ((handle[184] & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      log = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        size_t v42 = 2080;
        uint64_t v43 = " ";
        char v44 = 1024;
        *(_DWORD *)char v45 = v13;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = v12;
        _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sAdding %u frames (%u bytes) from read_frames",  buf,  0x2Cu);
      }
    }
  }

  if (v11)
  {
    if ((handle[184] & 0x80) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v19 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 142;
          size_t v42 = 2080;
          uint64_t v43 = " ";
          char v44 = 1024;
          *(_DWORD *)char v45 = a4;
          *(_WORD *)&v45[4] = 1024;
          *(_DWORD *)&v45[6] = a5;
          unsigned __int8 v46 = 1024;
          os_log_type_t v47 = v13;
          os_log_type_t v48 = 1024;
          BOOL v49 = v12;
          _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sHit maximum (%u bytes, %u frames), returning %u frames (%u bytes)",  buf,  0x38u);
        }
      }
    }

    return v13;
  }

  if (v12 > a4)
  {
    if ((handle[184] & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v20 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        size_t v42 = 2080;
        uint64_t v43 = " ";
        char v44 = 1024;
        *(_DWORD *)char v45 = v12;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = a4;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sAbout to read from below when above maximum bytes (%u bytes > %u bytes)",  buf,  0x2Cu);
      }
    }

    if ((handle[184] & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 142;
      size_t v42 = 2080;
      uint64_t v43 = " ";
      os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      size_t v39 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v22 = (os_log_s *)gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        size_t v42 = 2080;
        uint64_t v43 = " ";
        BOOL v24 = "%{public}s %{public}s%sAbout to read from below when above maximum bytes";
      }

      else if (v39)
      {
        BOOL v26 = (char *)__nw_create_backtrace_string();
        BOOL v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        os_log_type_t v27 = os_log_type_enabled(v22, type);
        if (v26)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = handle + 142;
            size_t v42 = 2080;
            uint64_t v43 = " ";
            char v44 = 2082;
            *(void *)char v45 = v26;
            _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s %{public}s%sAbout to read from below when above maximum bytes, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v26);
          goto LABEL_46;
        }

        if (!v27)
        {
LABEL_46:
          if (v21) {
            free(v21);
          }
          return v13;
        }

        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        size_t v42 = 2080;
        uint64_t v43 = " ";
        BOOL v24 = "%{public}s %{public}s%sAbout to read from below when above maximum bytes, no backtrace";
      }

      else
      {
        BOOL v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        size_t v42 = 2080;
        uint64_t v43 = " ";
        BOOL v24 = "%{public}s %{public}s%sAbout to read from below when above maximum bytes, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0x20u);
      goto LABEL_46;
    }
  }

  else
  {
LABEL_34:
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    size_t v13 = (*(uint64_t (**)(void))(*(void *)(*((void *)handle + 7) + 24LL) + 80LL))();
    if (*(void *)buf)
    {
      *a6->tqh_last = *(nw_frame **)buf;
      os_log_type_t v25 = *(nw_frame ***)&buf[8];
      *(void *)(*(void *)buf + 40LL) = a6->tqh_last;
      a6->tqh_last = v25;
    }
  }

  return v13;
}

  *(_DWORD *)(v5 + 112) = self->_multipathService;
  *(_WORD *)(v5 + 196) |= 8u;
  if ((*(_WORD *)&self->_has & 0x80) != 0)
  {
LABEL_16:
    *(_BYTE *)(v5 + 185) = self->_keepalive;
    *(_WORD *)(v5 + 196) |= 0x80u;
  }

              id *v33 = 10000LL;
              if (!gLogDatapath) {
                goto LABEL_68;
              }
              uint64_t v34 = (os_log_s *)__nwlog_obj();
              if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_68;
              }
              BOOL v62 = *((void *)handle + 8);
              *(_DWORD *)buf = 136446722;
              char v68 = "nw_protocol_http2_transport_remove_input_handler";
              id v69 = 2082;
              os_log_type_t v70 = (nw_protocol *)(handle + 205);
              BOOL v71 = 2048;
              *(void *)__int16 v72 = v62;
              int8x16_t v36 = "%{public}s %{public}s destroy timeout set to %lld milliseconds by default";
              goto LABEL_138;
            }

            pthread_mutex_unlock(&sSettingsMutex);
          }

          os_log_type_t v33 = (int64_t *)(handle + 64);
          goto LABEL_67;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (nw_protocol *)(handle + 205);
        *(_DWORD *)buf = 136446722;
        char v68 = "nw_protocol_http2_transport_remove_input_handler";
        id v69 = 2082;
        os_log_type_t v70 = (nw_protocol *)(handle + 205);
        BOOL v71 = 2048;
        *(void *)__int16 v72 = a2;
        id v20 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v65 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v21 = (os_log_s *)gLogObj;
          BOOL v22 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            char v68 = "nw_protocol_http2_transport_remove_input_handler";
            id v69 = 2082;
            os_log_type_t v70 = v19;
            BOOL v71 = 2048;
            *(void *)__int16 v72 = a2;
            os_log_type_t v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p";
LABEL_60:
            uint64_t v37 = v21;
            size_t v38 = v22;
            size_t v39 = 32;
LABEL_61:
            _os_log_impl(&dword_181A5C000, v37, v38, v23, buf, v39);
          }
        }

        else if (v65)
        {
          size_t v29 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v21 = (os_log_s *)gLogObj;
          BOOL v22 = type;
          size_t v30 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v29)
          {
            if (v30)
            {
              *(_DWORD *)buf = 136446978;
              char v68 = "nw_protocol_http2_transport_remove_input_handler";
              id v69 = 2082;
              os_log_type_t v70 = v19;
              BOOL v71 = 2048;
              *(void *)__int16 v72 = a2;
              *(_WORD *)&v72[8] = 2082;
              *(void *)&v72[10] = v29;
              _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p, dumping back trace:%{public}s",  buf,  0x2Au);
            }

            free(v29);
            goto LABEL_62;
          }

          if (v30)
          {
            *(_DWORD *)buf = 136446722;
            char v68 = "nw_protocol_http2_transport_remove_input_handler";
            id v69 = 2082;
            os_log_type_t v70 = v19;
            BOOL v71 = 2048;
            *(void *)__int16 v72 = a2;
            os_log_type_t v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p, no backtrace";
            goto LABEL_60;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v21 = (os_log_s *)gLogObj;
          BOOL v22 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            char v68 = "nw_protocol_http2_transport_remove_input_handler";
            id v69 = 2082;
            os_log_type_t v70 = v19;
            BOOL v71 = 2048;
            *(void *)__int16 v72 = a2;
            os_log_type_t v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p, backtrace limit exceeded";
            goto LABEL_60;
          }
        }

    free(v40);
    goto LABEL_81;
  }

  int8x16_t v36 = (os_log_s *)__nwlog_obj();
  uint64_t v37 = buf[0];
  if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
  {
    *(_DWORD *)v79 = 136446210;
    *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
    size_t v38 = "%{public}s called with null protocol";
LABEL_80:
    _os_log_impl(&dword_181A5C000, v36, v37, v38, v79, 0xCu);
  }

        if (v27) {
          free(v27);
        }
        if ((*(_WORD *)(v11 + 204) & 0x100) == 0
          || !g_channel_check_validity
          || g_channel_check_validity(v11, *(void *)(v11 + 88)))
        {
          os_log_type_t v50 = *(void **)(v11 + 112);
          if (v50) {
            free(v50);
          }
        }

        nw_frame_reset(v11, 0LL, 0, 0LL, 0LL);
        os_release((void *)v11);
        return 0LL;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v64 = "nw_protocol_http2_transport_get_input_frames_block_invoke";
      os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      __int16 v61 = 0;
      if (__nwlog_fault(v18, &type, &v61))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v19 = (os_log_s *)gLogObj;
          id v20 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_59;
          }
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v64 = "nw_protocol_http2_transport_get_input_frames_block_invoke";
          os_log_type_t v21 = "%{public}s http2_transport_create_input_frame failed";
          goto LABEL_58;
        }

        if (!v61)
        {
          os_log_type_t v19 = (os_log_s *)__nwlog_obj();
          id v20 = type;
          if (!os_log_type_enabled(v19, type)) {
            goto LABEL_59;
          }
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v64 = "nw_protocol_http2_transport_get_input_frames_block_invoke";
          os_log_type_t v21 = "%{public}s http2_transport_create_input_frame failed, backtrace limit exceeded";
          goto LABEL_58;
        }

        os_log_type_t v33 = (char *)__nw_create_backtrace_string();
        os_log_type_t v19 = (os_log_s *)__nwlog_obj();
        id v20 = type;
        uint64_t v34 = os_log_type_enabled(v19, type);
        if (v33)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v64 = "nw_protocol_http2_transport_get_input_frames_block_invoke";
            v65 = 2082;
            id v66 = v33;
            _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s http2_transport_create_input_frame failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v33);
          goto LABEL_59;
        }

        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v64 = "nw_protocol_http2_transport_get_input_frames_block_invoke";
          os_log_type_t v21 = "%{public}s http2_transport_create_input_frame failed, no backtrace";
LABEL_58:
          _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
        }
      }

      if (v42) {
        free(v42);
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = -1;
      goto LABEL_70;
    }

    if ((v7 & 1) == 0)
    {
      os_log_type_t v117 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
      {
        char v118 = *(void *)(a1 + 72);
        v119 = (const char *)(v118 + 74);
        v120 = *(void *)(v118 + 488);
        v121 = *(_DWORD *)(*(void *)(v118 + 480) + 372LL);
        v122 = *(_DWORD *)(v118 + 860);
        if (v120) {
          LODWORD(v120) = *(_DWORD *)(v120 + 424);
        }
        v123 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
        *(_DWORD *)buf = 136447746;
        v147 = "nw_http1_connection_process_input_frames_block_invoke";
        v148 = 2082;
        v149 = v119;
        v150 = 2080;
        *(void *)v151 = " ";
        *(_WORD *)&v151[8] = 1024;
        *(_DWORD *)&v151[10] = v121;
        *(_WORD *)&v151[14] = 1024;
        *(_DWORD *)&v151[16] = v122;
        LOWORD(v152) = 1024;
        *(_DWORD *)((char *)&v152 + 2) = v120;
        HIWORD(v152) = 2048;
        *(void *)v153 = v123;
        _os_log_impl( &dword_181A5C000,  v117,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> partial frame is body, trimming frame %p",  buf,  0x3Cu);
      }
    }

    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v16 = *(void *)(v15 + 24);
    *(void *)(v15 + 24) = 0LL;
    os_log_type_t v17 = a2 - *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    if ((*(_BYTE *)(*(void *)(a1 + 72) + 158LL) & 1) != 0 || !gLogDatapath) {
      goto LABEL_16;
    }
    v124 = (os_log_s *)__nwlog_obj();
    __int16 v125 = os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG);
    v126 = *(void *)(a1 + 72);
    if (v125)
    {
      uint64_t v127 = (const char *)(v126 + 74);
      v128 = *(void *)(v126 + 488);
      v129 = *(_DWORD *)(*(void *)(v126 + 480) + 372LL);
      v130 = *(_DWORD *)(v126 + 860);
      if (v128) {
        LODWORD(v12_Block_object_dispose(va, 8) = *(_DWORD *)(v128 + 424);
      }
      v131 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
      *(_DWORD *)buf = 136448258;
      v147 = "nw_http1_connection_process_input_frames_block_invoke";
      v148 = 2082;
      v149 = v127;
      v150 = 2080;
      *(void *)v151 = " ";
      *(_WORD *)&v151[8] = 1024;
      *(_DWORD *)&v151[10] = v129;
      *(_WORD *)&v151[14] = 1024;
      *(_DWORD *)&v151[16] = v130;
      LOWORD(v152) = 1024;
      *(_DWORD *)((char *)&v152 + 2) = v128;
      HIWORD(v152) = 1024;
      *(_DWORD *)v153 = v17;
      *(_WORD *)&v153[4] = 2048;
      *(void *)&v153[6] = v131;
      v154 = 2048;
      v155 = a2;
      _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> claiming %u bytes from beginning of frame (%p -> %p)",  buf,  0x4Cu);
      v126 = *(void *)(a1 + 72);
    }

    if (v126)
    {
LABEL_16:
      nw_frame_claim(v16, a2, v17, 0);
      if (nw_frame_unclaimed_length((_DWORD *)v16) == a3)
      {
        if (!(*(_BYTE *)(*(void *)(a1 + 72) + 158LL) & 1 | (gLogDatapath == 0)))
        {
          os_log_type_t v18 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v19 = *(void *)(a1 + 72);
            id v20 = (const char *)(v19 + 74);
            os_log_type_t v21 = *(void *)(v19 + 488);
            BOOL v22 = *(_DWORD *)(*(void *)(v19 + 480) + 372LL);
            os_log_type_t v23 = *(_DWORD *)(v19 + 860);
            if (v21) {
              LODWORD(v21) = *(_DWORD *)(v21 + 424);
            }
            *(_DWORD *)buf = 136447490;
            v147 = "nw_http1_connection_process_input_frames_block_invoke";
            v148 = 2082;
            v149 = v20;
            v150 = 2080;
            *(void *)v151 = " ";
            *(_WORD *)&v151[8] = 1024;
            *(_DWORD *)&v151[10] = v22;
            *(_WORD *)&v151[14] = 1024;
            *(_DWORD *)&v151[16] = v23;
            LOWORD(v152) = 1024;
            *(_DWORD *)((char *)&v152 + 2) = v21;
            _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> body extends to end of frame, continuing",  buf,  0x32u);
          }
        }

  free(v23);
  if (v13) {
LABEL_100:
  }
    free(v13);
}

      free(backtrace_string);
      goto LABEL_77;
    }

    size_t v29 = (os_log_s *)__nwlog_obj();
    size_t v30 = type;
    if (!os_log_type_enabled(v29, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    size_t v41 = "nw_protocol_register_handle";
    size_t v31 = "%{public}s called with null handle";
LABEL_76:
    _os_log_impl(&dword_181A5C000, v29, v30, v31, buf, 0xCu);
LABEL_77:
    if (v28) {
      free(v28);
    }
    return 0LL;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v41 = "nw_protocol_register_handle";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v29 = (os_log_s *)__nwlog_obj();
      size_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      size_t v41 = "nw_protocol_register_handle";
      size_t v31 = "%{public}s called with null create_handle_function";
      goto LABEL_76;
    }

    if (!v38)
    {
      size_t v29 = (os_log_s *)__nwlog_obj();
      size_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      size_t v41 = "nw_protocol_register_handle";
      size_t v31 = "%{public}s called with null create_handle_function, backtrace limit exceeded";
      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v29 = (os_log_s *)__nwlog_obj();
    size_t v30 = type;
    uint64_t v37 = os_log_type_enabled(v29, type);
    if (backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        size_t v41 = "nw_protocol_register_handle";
        size_t v42 = 2082;
        uint64_t v43 = (uint64_t)backtrace_string;
        int8x16_t v36 = "%{public}s called with null create_handle_function, dumping backtrace:%{public}s";
        goto LABEL_66;
      }

      goto LABEL_67;
    }

    if (!v37) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    size_t v41 = "nw_protocol_register_handle";
    size_t v31 = "%{public}s called with null create_handle_function, no backtrace";
    goto LABEL_76;
  }

  if (*(_DWORD *)(a1 + 36) == 2) {
    nw_protocol_definition_t v8 = a4;
  }
  else {
    nw_protocol_definition_t v8 = 0LL;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  unint64_t v9 = &g_registration_list;
  while (1)
  {
    unint64_t v9 = (uint64_t *)*v9;
    uint64_t v10 = v9 == 0LL;
    if (!v9) {
      break;
    }
    if (*(void *)a1 == v9[4]
      && *(void *)(a1 + 8) == v9[5]
      && *(void *)(a1 + 16) == v9[6]
      && *(void *)(a1 + 24) == v9[7]
      && *(void *)(a1 + 32) == v9[8])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      size_t v41 = "nw_protocol_register_handle";
      size_t v42 = 2082;
      uint64_t v43 = a1;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      size_t v38 = 0;
      if (type != OS_LOG_TYPE_FAULT)
      {
        if (v38)
        {
          os_log_type_t v25 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v16 = (os_log_s *)gLogObj;
          os_log_type_t v17 = type;
          BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v25)
          {
            if (v26)
            {
              *(_DWORD *)buf = 136446722;
              size_t v41 = "nw_protocol_register_handle";
              size_t v42 = 2082;
              uint64_t v43 = a1;
              char v44 = 2082;
              char v45 = (uint64_t)v25;
              _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s Protocol identifier %{public}s is already registered, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v25);
            goto LABEL_44;
          }

          if (!v26) {
            goto LABEL_44;
          }
          *(_DWORD *)buf = 136446466;
          size_t v41 = "nw_protocol_register_handle";
          size_t v42 = 2082;
          uint64_t v43 = a1;
          os_log_type_t v18 = "%{public}s Protocol identifier %{public}s is already registered, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v16 = (os_log_s *)gLogObj;
          os_log_type_t v17 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_44;
          }
          *(_DWORD *)buf = 136446466;
          size_t v41 = "nw_protocol_register_handle";
          size_t v42 = 2082;
          uint64_t v43 = a1;
          os_log_type_t v18 = "%{public}s Protocol identifier %{public}s is already registered, backtrace limit exceeded";
        }

    uint64_t v11 = 0;
    size_t v12 = 0;
    os_log_type_t v27 = 0LL;
    goto LABEL_9;
  }

  uint64_t v11 = 0;
  size_t v12 = 1;
LABEL_9:
  if (v8 != 1)
  {
    os_log_type_t v25 = 0LL;
    id v14 = 0;
    size_t v13 = 0;
    uint64_t v15 = v8;
    while (1)
    {
      BOOL v26 = v25 + 1;
      switch(a1[v25 + 1])
      {
        case '.':
          os_log_type_t v27 = 0LL;
          if (!v12 && !v11 && v15 > v26)
          {
            uint64_t v11 = 0;
            size_t v12 = 0;
            ++v13;
            goto LABEL_34;
          }

          return v27;
        case '/':
          if (v15 <= v26 || v13 && a1[v25] == 46) {
            return 0LL;
          }
          if (v26 < 3 || !v11 || a1[v25] != 58)
          {
            uint64_t v15 = v25 + 1;
            goto LABEL_34;
          }

          uint64_t v15 = v25 + 1;
          if (a1[v25 - 1] == 58) {
            goto LABEL_34;
          }
          return 0LL;
        case ':':
          os_log_type_t v27 = 0LL;
          if (v13 || v15 <= v26) {
            return v27;
          }
          ++v11;
          if (a1[v25] == 58)
          {
            if ((v14 & 1) != 0) {
              return 0LL;
            }
            size_t v13 = 0;
            id v14 = 1;
          }

          else
          {
            size_t v13 = 0;
          }

            goto LABEL_68;
          }

          if (!LOBYTE(v80[0]))
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v27 = (os_log_s *)(id)gLogObj;
            size_t v51 = type[0];
            if (os_log_type_enabled(v27, type[0]))
            {
              *(_DWORD *)applier = 136446210;
              *(void *)&applier[4] = "nw_ws_create_client_request";
              _os_log_impl( &dword_181A5C000,  v27,  v51,  "%{public}s CFURLCreateWithString failed, backtrace limit exceeded",  applier,  0xCu);
            }

            goto LABEL_67;
          }

          os_log_type_t v33 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v27 = (os_log_s *)(id)gLogObj;
          uint64_t v34 = type[0];
          __int16 v35 = os_log_type_enabled(v27, type[0]);
          if (!v33)
          {
            if (v35)
            {
              *(_DWORD *)applier = 136446210;
              *(void *)&applier[4] = "nw_ws_create_client_request";
              _os_log_impl( &dword_181A5C000,  v27,  v34,  "%{public}s CFURLCreateWithString failed, no backtrace",  applier,  0xCu);
            }

            goto LABEL_67;
          }

          if (v35)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "nw_ws_create_client_request";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v33;
            _os_log_impl( &dword_181A5C000,  v27,  v34,  "%{public}s CFURLCreateWithString failed, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          if (!v26)
          {
LABEL_69:
            nw_framer_mark_failed_with_error(v5, 22);
            return 2LL;
          }

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_68;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v38 = "nw_http_capsule_framer_write_capsule_header";
    nw_txt_record_t v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    int8x16_t v36 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      nw_protocol_definition_t v8 = (os_log_s *)__nwlog_obj();
      unint64_t v9 = type[0];
      if (!os_log_type_enabled(v8, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      size_t v38 = "nw_http_capsule_framer_write_capsule_header";
      uint64_t v10 = "%{public}s called with null frame";
      goto LABEL_67;
    }

    if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_protocol_definition_t v8 = (os_log_s *)__nwlog_obj();
      unint64_t v9 = type[0];
      uint64_t v34 = os_log_type_enabled(v8, type[0]);
      if (backtrace_string)
      {
        if (!v34) {
          goto LABEL_89;
        }
        *(_DWORD *)buf = 136446466;
        size_t v38 = "nw_http_capsule_framer_write_capsule_header";
        size_t v39 = 2082;
        size_t v40 = (unint64_t)backtrace_string;
        size_t v13 = "%{public}s called with null frame, dumping backtrace:%{public}s";
LABEL_88:
        _os_log_impl(&dword_181A5C000, v8, v9, v13, buf, 0x16u);
LABEL_89:
        free(backtrace_string);
        if (!v7) {
          return 1LL;
        }
        goto LABEL_69;
      }

      if (!v34) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      size_t v38 = "nw_http_capsule_framer_write_capsule_header";
      uint64_t v10 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      nw_protocol_definition_t v8 = (os_log_s *)__nwlog_obj();
      unint64_t v9 = type[0];
      if (!os_log_type_enabled(v8, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      size_t v38 = "nw_http_capsule_framer_write_capsule_header";
      uint64_t v10 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    goto LABEL_67;
  }

  if ((*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
  {
    id v5 = 0;
    if (v4 < 0x40) {
      goto LABEL_10;
    }
LABEL_24:
    if (v4 >= 0x4000)
    {
      if (v4 >> 30)
      {
        if (v4 >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          size_t v38 = "_http_vle_length";
          size_t v39 = 2048;
          size_t v40 = v4;
          id v14 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v14);
          if (result) {
            goto LABEL_99;
          }
          free(v14);
          nw_endpoint_type_t v6 = 0;
        }

        else
        {
          nw_endpoint_type_t v6 = 8;
        }
      }

      else
      {
        nw_endpoint_type_t v6 = 4;
      }
    }

    else
    {
      nw_endpoint_type_t v6 = 2;
    }

    goto LABEL_32;
  }

  id v5 = *(_DWORD *)(a2 + 48);
  if (v4 >= 0x40) {
    goto LABEL_24;
  }
LABEL_10:
  nw_endpoint_type_t v6 = 1;
LABEL_32:
  if (v5 >> 30) {
    uint64_t v16 = 8;
  }
  else {
    uint64_t v16 = 4;
  }
  if (v5 >= 0x4000) {
    os_log_type_t v17 = v16;
  }
  else {
    os_log_type_t v17 = 2;
  }
  if (v5 >= 0x40) {
    os_log_type_t v18 = v17;
  }
  else {
    os_log_type_t v18 = 1;
  }
  os_log_type_t v19 = v18 + v6;
  nw_frame_unclaim(a2, a2, v18 + v6, 0);
  if (!*(void *)(a2 + 112)
    || (*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
  {
    goto LABEL_50;
  }

  id v20 = *(_DWORD *)(a2 + 52);
  os_log_type_t v21 = *(unsigned int *)(a2 + 56);
  if (!v20)
  {
    BOOL v22 = 0;
    os_log_type_t v23 = *(void *)(a2 + 112);
    if (v23) {
      goto LABEL_47;
    }
    goto LABEL_50;
  }

  BOOL v22 = v20 - (v21 + *(_DWORD *)(a2 + 60));
  os_log_type_t v23 = *(void *)(a2 + 112);
  if (!v23)
  {
LABEL_50:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    size_t v38 = "nw_http_capsule_framer_write_capsule_header";
    nw_txt_record_t v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    int8x16_t v36 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_protocol_definition_t v8 = (os_log_s *)gLogObj;
      unint64_t v9 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      size_t v38 = "nw_http_capsule_framer_write_capsule_header";
      uint64_t v10 = "%{public}s Unable to fillout capsule header because nw_frame_unclaimed_bytes() returned NULL";
      goto LABEL_67;
    }

    if (!v36)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_protocol_definition_t v8 = (os_log_s *)gLogObj;
      unint64_t v9 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      size_t v38 = "nw_http_capsule_framer_write_capsule_header";
      uint64_t v10 = "%{public}s Unable to fillout capsule header because nw_frame_unclaimed_bytes() returned NULL, backtrace limit exceeded";
      goto LABEL_67;
    }

    os_log_type_t v25 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_protocol_definition_t v8 = (os_log_s *)gLogObj;
    unint64_t v9 = type[0];
    BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!v25)
    {
      if (!v26) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      size_t v38 = "nw_http_capsule_framer_write_capsule_header";
      uint64_t v10 = "%{public}s Unable to fillout capsule header because nw_frame_unclaimed_bytes() returned NULL, no backtrace";
      goto LABEL_67;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      size_t v38 = "nw_http_capsule_framer_write_capsule_header";
      size_t v39 = 2082;
      size_t v40 = (unint64_t)v25;
      _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Unable to fillout capsule header because nw_frame_unclaimed_bytes() returned NULL, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v25);
LABEL_68:
    if (!v7) {
      return 1LL;
    }
LABEL_69:
    free(v7);
    return 1LL;
  }

    free(v35);
    goto LABEL_68;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v16 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  os_log_type_t v78 = "nw_service_connector_start_request";
  v79 = 2082;
  os_log_type_t v80 = (size_t)a3;
  __int16 v81 = 1024;
  LODWORD(v82[0]) = 256;
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v75 = 0;
  if (__nwlog_fault(v17, &type, &v75))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)(id)gLogObj;
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v78 = "nw_service_connector_start_request";
        v79 = 2082;
        os_log_type_t v80 = (size_t)a3;
        __int16 v81 = 1024;
        LODWORD(v82[0]) = 256;
        _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s Service name %{public}s too long. Max allowed length is %d",  buf,  0x1Cu);
      }
    }

    else if (v75)
    {
      size_t v31 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)(id)gLogObj;
      uint64_t v32 = type;
      os_log_type_t v33 = os_log_type_enabled(v18, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v78 = "nw_service_connector_start_request";
          v79 = 2082;
          os_log_type_t v80 = (size_t)a3;
          __int16 v81 = 1024;
          LODWORD(v82[0]) = 256;
          WORD2(v82[0]) = 2082;
          *(void *)((char *)v82 + 6) = v31;
          _os_log_impl( &dword_181A5C000,  v18,  v32,  "%{public}s Service name %{public}s too long. Max allowed length is %d, dumping backtrace:%{public}s",  buf,  0x26u);
        }

        free(v31);
        if (!v17) {
          goto LABEL_44;
        }
        goto LABEL_58;
      }

      if (v33)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v78 = "nw_service_connector_start_request";
        v79 = 2082;
        os_log_type_t v80 = (size_t)a3;
        __int16 v81 = 1024;
        LODWORD(v82[0]) = 256;
        _os_log_impl( &dword_181A5C000,  v18,  v32,  "%{public}s Service name %{public}s too long. Max allowed length is %d, no backtrace",  buf,  0x1Cu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)(id)gLogObj;
      size_t v39 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v78 = "nw_service_connector_start_request";
        v79 = 2082;
        os_log_type_t v80 = (size_t)a3;
        __int16 v81 = 1024;
        LODWORD(v82[0]) = 256;
        _os_log_impl( &dword_181A5C000,  v18,  v39,  "%{public}s Service name %{public}s too long. Max allowed length is %d, backtrace limit exceeded",  buf,  0x1Cu);
      }
    }
  }

  if (v17) {
LABEL_58:
  }
    free(v17);
LABEL_44:
  nw_service_connector_trigger_request_complete_block_inner(v9, 0LL, v12, 0LL, 22);
LABEL_70:
}

      free(v20);
      goto LABEL_68;
    }

    BOOL v24 = cached_content_for_protocol[7] + 1LL;
    os_log_type_t v25 = v24 << 31 >> 31;
    cached_content_for_protocol[7] = v24;
    if (v25 == v24 && (v25 & 0x8000000000000000LL) == 0) {
      goto LABEL_75;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v26 = (id)gLogObj;
    os_log_type_t v27 = cached_content_for_protocol[7];
    *(_DWORD *)buf = 136446978;
    v86 = "nw_quic_report_race_result_on_queue";
    __int16 v87 = 2082;
    v88 = "association_cache->failure_count";
    os_log_type_t v89 = 2048;
    v90 = 1LL;
    __int16 v91 = 2048;
    id v92 = v27;
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v83 = 0;
    if (__nwlog_fault(v28, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v29 = (os_log_s *)(id)gLogObj;
        size_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          size_t v31 = cached_content_for_protocol[7];
          *(_DWORD *)buf = 136446978;
          v86 = "nw_quic_report_race_result_on_queue";
          __int16 v87 = 2082;
          v88 = "association_cache->failure_count";
          os_log_type_t v89 = 2048;
          v90 = 1LL;
          __int16 v91 = 2048;
          id v92 = v31;
          _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
        }
      }

      else if (v83)
      {
        size_t v41 = __nw_create_backtrace_string();
        if (v41)
        {
          size_t v42 = (char *)v41;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v43 = (os_log_s *)(id)gLogObj;
          char v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            char v45 = cached_content_for_protocol[7];
            *(_DWORD *)buf = 136447234;
            v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            v88 = "association_cache->failure_count";
            os_log_type_t v89 = 2048;
            v90 = 1LL;
            __int16 v91 = 2048;
            id v92 = v45;
            os_log_type_t v93 = 2082;
            v94 = v42;
            _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v42);
          if (!v28) {
            goto LABEL_74;
          }
          goto LABEL_73;
        }

        __nwlog_obj();
        size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int128 v55 = type;
        if (os_log_type_enabled(v29, type))
        {
          __int128 v56 = cached_content_for_protocol[7];
          *(_DWORD *)buf = 136446978;
          v86 = "nw_quic_report_race_result_on_queue";
          __int16 v87 = 2082;
          v88 = "association_cache->failure_count";
          os_log_type_t v89 = 2048;
          v90 = 1LL;
          __int16 v91 = 2048;
          id v92 = v56;
          _os_log_impl( &dword_181A5C000,  v29,  v55,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace",  buf,  0x2Au);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v29 = (os_log_s *)(id)gLogObj;
        size_t v51 = type;
        if (os_log_type_enabled(v29, type))
        {
          uint64_t v52 = cached_content_for_protocol[7];
          *(_DWORD *)buf = 136446978;
          v86 = "nw_quic_report_race_result_on_queue";
          __int16 v87 = 2082;
          v88 = "association_cache->failure_count";
          os_log_type_t v89 = 2048;
          v90 = 1LL;
          __int16 v91 = 2048;
          id v92 = v52;
          _os_log_impl( &dword_181A5C000,  v29,  v51,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded",  buf,  0x2Au);
        }
      }
    }

    if (!v28)
    {
LABEL_74:
      cached_content_for_protocol[7] = -1;
      goto LABEL_75;
    }

  __break(1u);
  return result;
}

LABEL_16:
    if (!v13)
    {
LABEL_18:
      os_log_type_t v19 = 0LL;
      goto LABEL_19;
    }

        if (!v6) {
          return 0LL;
        }
        os_log_type_t v47 = (char *)v6;
        goto LABEL_76;
      case 2:
        if (a2->tqh_first == (nw_frame *)*((void *)handle + 48))
        {
          is_metadata_complete = nw_frame_is_metadata_complete((uint64_t)a2->tqh_first);
          nw_http3_stream_send_fields((uint64_t)handle, is_metadata_complete);
          return 1LL;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
        uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        BYTE4(v69) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v12 = (os_log_s *)gLogObj;
          size_t v13 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_74;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
          id v14 = "%{public}s Expected frame array first to be the same as http3_stream->output_fields_frame";
          goto LABEL_73;
        }

        if (BYTE4(v69))
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v12 = (os_log_s *)gLogObj;
          size_t v13 = type[0];
          char v44 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (backtrace_string)
          {
            if (!v44) {
              goto LABEL_63;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            char v45 = "%{public}s Expected frame array first to be the same as http3_stream->output_fields_frame, dumping bac"
                  "ktrace:%{public}s";
            goto LABEL_62;
          }

          if (!v44) {
            goto LABEL_74;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
          id v14 = "%{public}s Expected frame array first to be the same as http3_stream->output_fields_frame, no backtrace";
        }

        else
        {
          size_t v12 = (os_log_s *)__nwlog_obj();
          size_t v13 = type[0];
          if (!os_log_type_enabled(v12, type[0])) {
            goto LABEL_74;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
          id v14 = "%{public}s Expected frame array first to be the same as http3_stream->output_fields_frame, backtrace limit exceeded";
        }

        goto LABEL_73;
      case 3:
        uint64_t v15 = handle + 736;
        uint64_t v16 = **((void **)a2->tqh_last + 1);
        *(void *)os_log_type_t type = 0LL;
        __int16 v72 = type;
        uint64_t v73 = 0x2000000000LL;
        __int16 v74 = 0;
        if (v16)
        {
          os_log_type_t v17 = *(char *)(v16 + 186);
          os_log_type_t v18 = *(_BYTE *)(v16 + 186);
          os_log_type_t v19 = (v17 >> 7) & 1;
          __int16 v74 = (v17 & 0x80) != 0;
          if ((v17 & 0x80000000) == 0)
          {
            id v20 = *(void *)(v16 + 64);
            if (v20)
            {
              if ((*(_BYTE *)(v20 + 66) & 0x40) != 0)
              {
                v70[0] = MEMORY[0x1895F87A8];
                v70[1] = 0x40000000LL;
                v70[2] = ___ZL47nw_protocol_http3_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
                v70[3] = &unk_189BC4810;
                v70[4] = type;
                nw_frame_foreach_protocol_metadata(v16, 0, (uint64_t)v70);
                os_log_type_t v19 = *((unsigned __int8 *)v72 + 24);
                os_log_type_t v18 = *(_BYTE *)(v16 + 186);
              }
            }
          }

          *(_BYTE *)(v16 + 186) = v18 & 0x7F | ((v19 != 0) << 7);
        }

        if ((*v15 & 0x800) == 0)
        {
          if (gLogDatapath)
          {
            __int128 v56 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
            {
              char v57 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
              BOOL v58 = *((void *)handle + 30);
              *(_DWORD *)buf = 0;
              nw_frame_array_get_frame_count((uint64_t *)a2, 1, buf);
              os_log_type_t v59 = *(_DWORD *)buf;
              if (*((_BYTE *)v72 + 24)) {
                os_log_type_t v60 = ", complete";
              }
              else {
                os_log_type_t v60 = "";
              }
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = handle + 636;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&_BYTE buf[24] = " ";
              LOWORD(v76) = 1024;
              *(_DWORD *)((char *)&v76 + 2) = v57;
              WORD3(v76) = 2048;
              *((void *)&v76 + 1) = v58;
              *(_WORD *)os_log_type_t v77 = 1024;
              *(_DWORD *)&v77[2] = v59;
              *(_WORD *)&v77[6] = 2080;
              *(void *)&v77[8] = v60;
              _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> sending %u bytes of body data%s",  buf,  0x40u);
            }
          }
        }

        id v69 = 0LL;
        uint64_t v4 = *((void *)handle + 20);
        if (v4)
        {
          os_log_type_t v21 = *(void *)(v4 + 24);
          if (v21 && *(void *)(v21 + 96))
          {
            *(void *)buf = MEMORY[0x1895F87A8];
            *(void *)&buf[8] = 0x40000000LL;
            *(void *)&buf[16] = ___ZL64nw_http3_framer_finalize_output_frames_for_multiple_http3_framesP15nw_http3_frameryP16nw_frame_array_sPjS3__block_invoke;
            *(void *)&_BYTE buf[24] = &__block_descriptor_tmp_161_61730;
            *(void *)&uint64_t v76 = 0LL;
            *((void *)&v76 + 1) = handle + 128;
            *(void *)os_log_type_t v77 = (char *)&v69 + 4;
            *(void *)&v77[8] = &v69;
            tqh_first = a2->tqh_first;
            do
            {
              if (!tqh_first) {
                break;
              }
              os_log_type_t v23 = (nw_frame *)*((void *)tqh_first + 4);
              BOOL v24 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
              tqh_first = v23;
            }

            while ((v24 & 1) != 0);
            uint64_t v4 = (*(uint64_t (**)(uint64_t, nw_frame_array_s *))(*(void *)(v4 + 24) + 96LL))(v4, a2);
            os_log_type_t v25 = v69;
          }

          else
          {
            os_log_type_t v25 = 0LL;
            uint64_t v4 = 0LL;
          }
        }

        else
        {
          os_log_type_t v25 = 0LL;
        }

        nw_http_transaction_metadata_increment_outbound_body_transfer_size(*((void **)handle + 49), v25);
        BOOL v26 = HIDWORD(v69);
        os_log_type_t v27 = *((void *)handle + 36);
        os_log_type_t v28 = __CFADD__(v27, HIDWORD(v69));
        *((void *)handle + 36) = v27 + HIDWORD(v69);
        if (v28)
        {
          if (gLogDatapath)
          {
            __int16 v61 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              BOOL v62 = *((void *)handle + 36);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "increment_outbound_body_size";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "outbound_body_size";
              *(_WORD *)&buf[22] = 2048;
              *(void *)&_BYTE buf[24] = v26;
              LOWORD(v76) = 2048;
              *(void *)((char *)&v76 + 2) = v62;
              _os_log_impl( &dword_181A5C000,  v61,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
            }
          }

          *((void *)handle + 36) = -1LL;
        }

        if (*((_BYTE *)v72 + 24))
        {
          nw_http_transaction_metadata_mark_outbound_message_end(*((void **)handle + 49));
          if (handle[280])
          {
            if (*((void *)handle + 34) != *((void *)handle + 36))
            {
              if ((*v15 & 0x800) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                size_t v29 = (os_log_s *)gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  size_t v30 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
                  size_t v31 = *((void *)handle + 30);
                  if (handle[280]) {
                    uint64_t v32 = *((void *)handle + 34);
                  }
                  else {
                    uint64_t v32 = -1LL;
                  }
                  os_log_type_t v48 = *((void *)handle + 36);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = handle + 636;
                  *(_WORD *)&buf[22] = 2080;
                  *(void *)&_BYTE buf[24] = " ";
                  LOWORD(v76) = 1024;
                  *(_DWORD *)((char *)&v76 + 2) = v30;
                  WORD3(v76) = 2048;
                  *((void *)&v76 + 1) = v31;
                  *(_WORD *)os_log_type_t v77 = 2048;
                  *(void *)&v77[2] = v32;
                  *(_WORD *)&v77[10] = 2048;
                  *(void *)&v77[12] = v48;
                  _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%llu> Content length header %llu does not equal body size %llu",  buf,  0x44u);
                }
              }

              *((void *)handle + 33) = 270LL;
              nw_protocol_http3_stream_error((nw_protocol *)handle, (nw_protocol *)handle, 22);
              nw_protocol_http3_stream_disconnect((nw_protocol *)handle, (nw_protocol *)handle);
              uint64_t v4 = 0LL;
            }
          }
        }

        _Block_object_dispose(type, 8);
        return v4;
      case 5:
        if (nw_protocol_copy_http_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
        }
        os_log_type_t v33 = (id)nw_protocol_copy_http_definition_http_definition;
        v63[0] = MEMORY[0x1895F87A8];
        v63[1] = 0x40000000LL;
        nw_endpoint_t v64 = ___ZL47nw_protocol_http3_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_159;
        v65 = &__block_descriptor_tmp_160;
        id v66 = v33;
        v67 = handle;
        char v68 = a2;
        uint64_t v34 = a2->tqh_first;
        do
        {
          if (!v34) {
            break;
          }
          __int16 v35 = (nw_frame *)*((void *)v34 + 4);
          int8x16_t v36 = ((uint64_t (*)(void *))v64)(v63);
          uint64_t v34 = v35;
        }

        while ((v36 & 1) != 0);
        if (v33) {
          os_release(v33);
        }
        nw_http3_stream_send_pending_capsules((uint64_t)handle);
        uint64_t v37 = *((void *)handle + 12);
        if (!v37) {
          return 0LL;
        }
        return (*(uint64_t (**)(void))(*(void *)(v37 + 24) + 96LL))();
      default:
        return v4;
    }
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
  uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  BYTE4(v69) = 0;
  if (__nwlog_fault(v11, type, (_BYTE *)&v69 + 4))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      size_t v12 = (os_log_s *)__nwlog_obj();
      size_t v13 = type[0];
      if (!os_log_type_enabled(v12, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      id v14 = "%{public}s called with null http3_stream";
      goto LABEL_73;
    }

    if (BYTE4(v69))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v12 = (os_log_s *)__nwlog_obj();
      size_t v13 = type[0];
      __int128 v55 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (!v55) {
          goto LABEL_63;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        char v45 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
        goto LABEL_62;
      }

      if (!v55) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      id v14 = "%{public}s called with null http3_stream, no backtrace";
    }

    else
    {
      size_t v12 = (os_log_s *)__nwlog_obj();
      size_t v13 = type[0];
      if (!os_log_type_enabled(v12, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      id v14 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }

    goto LABEL_73;
  }

  *((void *)v30 + 10) = v8[2];
  size_t v31 = v8[3];
  *((void *)v30 + 11) = v31;
  uint64_t v32 = v8[4];
  *((void *)v30 + 31) = v32 * v31;
  *((void *)v30 + 37) = v8[3] / v8[7];
  *((void *)v30 + 12) = v32;
  *((void *)v30 + 41) = 32LL;
  *((void *)v30 + 42) = 4096LL;
  os_log_type_t v33 = calloc(1uLL, 0x200uLL);
  if (!v33)
  {
    BOOL v110 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v110, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v156 = "strict_calloc";
    v157 = 2048;
    *(void *)v158 = 1LL;
    *(_WORD *)&v158[8] = 2048;
    *(void *)v159 = 512LL;
    v111 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v111);
    if (result) {
      goto LABEL_216;
    }
    free(v111);
  }

  *((void *)v30 + 44) = *((void *)v30 + 41) - 1LL;
  *((void *)v30 + 45) = v33;
  *((void *)v30 + 43) = flsll(v8[3]) - 1;
  uint64_t v34 = *((void *)v30 + 44);
  __int16 v35 = v34 + 1;
  if (v34 != -1LL)
  {
    int8x16_t v36 = *((void *)v30 + 45);
    if (v35 < 8)
    {
      uint64_t v37 = 0LL;
      size_t v38 = 0;
LABEL_71:
      size_t v39 = v38 + 1;
      do
      {
        size_t v40 = (void *)(v36 + 16 * v37);
        char *v40 = 0LL;
        v40[1] = v40;
        uint64_t v37 = v39++;
      }

      while (v35 > v37);
      goto LABEL_73;
    }

    size_t v38 = 0;
    uint64_t v37 = 0LL;
    if ((_DWORD)v34 == -1) {
      goto LABEL_71;
    }
    if (HIDWORD(v34)) {
      goto LABEL_71;
    }
    uint64_t v37 = v35 & 0xFFFFFFFFFFFFFFFCLL;
    os_log_type_t v70 = (double *)(v36 + 32);
    BOOL v71 = 0uLL;
    __int16 v72 = v35 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      *(void *)&v166.val[1].f64[0] = v70 - 4;
      *(void *)&v166.val[1].f64[1] = v70 - 2;
      uint64_t v73 = v70;
      __int16 v74 = v70 + 2;
      v166.val[0] = 0uLL;
      vst2q_f64(*(double **)&v166.val[1].f64[0], v166);
      vst2q_f64(v70, *(float64x2x2_t *)&v71);
      v70 += 8;
      v72 -= 4LL;
    }

    while (v72);
    size_t v38 = v35 & 0xFFFFFFFC;
    if (v35 != v37) {
      goto LABEL_71;
    }
  }

          if (v21) {
            free(v21);
          }
          goto LABEL_69;
        }

      free(backtrace_string);
    }

      if (v20) {
        free(v20);
      }
      uint64_t v34 = (unsigned __int8 *)v9;
      goto LABEL_76;
    }
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v93 = "nw_protocol_test_access_options";
  uint64_t v16 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v90 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v93 = "nw_protocol_test_access_options";
    os_log_type_t v19 = "%{public}s called with null definition";
    goto LABEL_57;
  }

  if (!v90)
  {
    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v93 = "nw_protocol_test_access_options";
    os_log_type_t v19 = "%{public}s called with null definition, backtrace limit exceeded";
    goto LABEL_57;
  }

  os_log_type_t v28 = (char *)__nw_create_backtrace_string();
  os_log_type_t v17 = (os_log_s *)__nwlog_obj();
  os_log_type_t v18 = type;
  size_t v29 = os_log_type_enabled(v17, type);
  if (!v28)
  {
    if (!v29) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v93 = "nw_protocol_test_access_options";
    os_log_type_t v19 = "%{public}s called with null definition, no backtrace";
    goto LABEL_57;
  }

  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v93 = "nw_protocol_test_access_options";
    v94 = 2082;
    v95 = (nw_protocol_identifier *)v28;
    _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v28);
  if (v16) {
LABEL_59:
  }
    free(v16);
LABEL_77:
  output_handler = a1->output_handler;
  if (output_handler)
  {
    handle = output_handler->handle;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v37 = output_handler[1].callbacks;
      if (v37) {
        output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v37->add_input_handler + 1);
      }
    }

    if (a2)
    {
      size_t v38 = output_handler->callbacks;
      if (v38)
      {
        finalize_output_frames = (uint64_t (*)(nw_protocol *, nw_frame_array_s *))v38->finalize_output_frames;
        if (finalize_output_frames)
        {
          size_t v40 = finalize_output_frames(output_handler, a2);
          if (handle != &nw_protocol_ref_counted_handle) {
            return v40;
          }
          goto LABEL_85;
        }
      }

      __nwlog_obj();
      name = output_handler->identifier->name;
      *(_DWORD *)buf = 136446722;
      os_log_type_t v93 = "__nw_protocol_finalize_output_frames";
      if (!name) {
        name = "invalid";
      }
      v94 = 2082;
      v95 = (nw_protocol_identifier *)name;
      v96 = 2048;
      os_log_type_t v97 = output_handler;
      __int128 v53 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v90 = 0;
      if (__nwlog_fault(v53, &type, &v90))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int128 v54 = (os_log_s *)__nwlog_obj();
          __int128 v55 = type;
          if (!os_log_type_enabled(v54, type)) {
            goto LABEL_217;
          }
          __int128 v56 = output_handler->identifier->name;
          if (!v56) {
            __int128 v56 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v93 = "__nw_protocol_finalize_output_frames";
          v94 = 2082;
          v95 = (nw_protocol_identifier *)v56;
          v96 = 2048;
          os_log_type_t v97 = output_handler;
          char v57 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback";
LABEL_190:
          __int16 v83 = v54;
          os_log_type_t v84 = v55;
          __int16 v85 = 32;
LABEL_216:
          _os_log_impl(&dword_181A5C000, v83, v84, v57, buf, v85);
          goto LABEL_217;
        }

        if (!v90)
        {
          __int128 v54 = (os_log_s *)__nwlog_obj();
          __int128 v55 = type;
          if (!os_log_type_enabled(v54, type)) {
            goto LABEL_217;
          }
          os_log_type_t v80 = output_handler->identifier->name;
          if (!v80) {
            os_log_type_t v80 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v93 = "__nw_protocol_finalize_output_frames";
          v94 = 2082;
          v95 = (nw_protocol_identifier *)v80;
          v96 = 2048;
          os_log_type_t v97 = output_handler;
          char v57 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded";
          goto LABEL_190;
        }

        v67 = (char *)__nw_create_backtrace_string();
        __int128 v54 = (os_log_s *)__nwlog_obj();
        __int128 v55 = type;
        char v68 = os_log_type_enabled(v54, type);
        if (!v67)
        {
          if (!v68) {
            goto LABEL_217;
          }
          os_log_type_t v82 = output_handler->identifier->name;
          if (!v82) {
            os_log_type_t v82 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v93 = "__nw_protocol_finalize_output_frames";
          v94 = 2082;
          v95 = (nw_protocol_identifier *)v82;
          v96 = 2048;
          os_log_type_t v97 = output_handler;
          char v57 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace";
          goto LABEL_190;
        }

        if (v68)
        {
          id v69 = output_handler->identifier->name;
          if (!v69) {
            id v69 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          os_log_type_t v93 = "__nw_protocol_finalize_output_frames";
          v94 = 2082;
          v95 = (nw_protocol_identifier *)v69;
          v96 = 2048;
          os_log_type_t v97 = output_handler;
          v98 = 2082;
          os_log_type_t v99 = v67;
          _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v67);
      }

    goto LABEL_68;
  }

  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
    id v20 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v62[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s called with null handler", buf, 0xCu);
      }

      goto LABEL_67;
    }

    if (!v62[0])
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int8x16_t v36 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl( &dword_181A5C000,  v21,  v36,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_67;
    }

    size_t v30 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v31 = type[0];
    uint64_t v32 = os_log_type_enabled(v21, type[0]);
    if (!v30)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_181A5C000, v21, v31, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }

      goto LABEL_67;
    }

    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v30;
      _os_log_impl( &dword_181A5C000,  v21,  v31,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_43;
  }

  if (!v6)
  {
    __nwlog_obj();
    os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
    id v20 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v62[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v26 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_181A5C000, v21, v26, "%{public}s called with null queue", buf, 0xCu);
      }

      goto LABEL_67;
    }

    if (!v62[0])
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v37 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl( &dword_181A5C000,  v21,  v37,  "%{public}s called with null queue, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_67;
    }

    size_t v30 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = type[0];
    uint64_t v34 = os_log_type_enabled(v21, type[0]);
    if (!v30)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_181A5C000, v21, v33, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }

      goto LABEL_67;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v30;
      _os_log_impl( &dword_181A5C000,  v21,  v33,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_69:
        uint64_t v43 = 0LL;
LABEL_70:
        unint64_t v9 = v38 + v39 + v40 + v41 + v42 + v43 + 24;
        if (!a2) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }

    goto LABEL_70;
  }

  nw_endpoint_type_t v6 = (unsigned int *)v4;
  nw_txt_record_t v7 = v6[29];

  if ((_DWORD)v7 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v23 = (id)gLogObj;
    else {
      BOOL v24 = off_189BBBBC0[v7];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_resolver startWithHandler:]";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v24;
    os_log_type_t v102 = 2082;
    BOOL v103 = "resolver";
    os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    BOOL v100 = 0;
    if (__nwlog_fault(v25, type, &v100))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v26 = (os_log_s *)(id)gLogObj;
        os_log_type_t v27 = type[0];
        if (os_log_type_enabled(v26, type[0]))
        {
          else {
            os_log_type_t v28 = off_189BBBBC0[v7];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_resolver startWithHandler:]";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v28;
          os_log_type_t v102 = 2082;
          BOOL v103 = "resolver";
          _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v100)
      {
        size_t v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v26 = (os_log_s *)(id)gLogObj;
        size_t v30 = type[0];
        size_t v31 = os_log_type_enabled(v26, type[0]);
        if (v29)
        {
          if (v31)
          {
            else {
              uint64_t v32 = off_189BBBBC0[v7];
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_resolver startWithHandler:]";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v32;
            os_log_type_t v102 = 2082;
            BOOL v103 = "resolver";
            v104 = 2082;
            v105 = v29;
            _os_log_impl( &dword_181A5C000,  v26,  v30,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v29);
          if (!v25) {
            goto LABEL_72;
          }
LABEL_71:
          free(v25);
          goto LABEL_72;
        }

        if (v31)
        {
          else {
            size_t v39 = off_189BBBBC0[v7];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_resolver startWithHandler:]";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v39;
          os_log_type_t v102 = 2082;
          BOOL v103 = "resolver";
          _os_log_impl( &dword_181A5C000,  v26,  v30,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v26 = (os_log_s *)(id)gLogObj;
        os_log_type_t v33 = type[0];
        if (os_log_type_enabled(v26, type[0]))
        {
          else {
            uint64_t v34 = off_189BBBBC0[v7];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_resolver startWithHandler:]";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v34;
          os_log_type_t v102 = 2082;
          BOOL v103 = "resolver";
          _os_log_impl( &dword_181A5C000,  v26,  v33,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_69;
    }

    if (v50) {
      free(v50);
    }
    id v14 = 22;
    nw_protocol_definition_t v8 = a6;
    goto LABEL_72;
  }

  id v14 = 45;
  if ((*(_WORD *)(a1 + 204) & 0x100) == 0 || !g_channel_get_internet_checksum_handler)
  {
LABEL_72:
    uint64_t v16 = 0;
    v90 = v14;
    goto LABEL_73;
  }

  internet_checksum_handler = g_channel_get_internet_checksum_handler(a1, &v93, &v92, &v91);
  v90 = internet_checksum_handler;
  if (internet_checksum_handler)
  {
    id v14 = internet_checksum_handler;
    uint64_t v16 = 0;
    goto LABEL_73;
  }

  os_log_type_t v17 = *(unsigned __int16 *)(a1 + 204);
  os_log_type_t v18 = v17 | (*(unsigned __int8 *)(a1 + 206) << 16);
  if ((v17 & 0x800) != 0)
  {
    if ((v17 & 0x1000) != 0)
    {
      size_t v31 = v8;
      uint64_t v32 = v91 == 0xFFFF;
      if (v91 != 0xFFFF)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v33 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v34 = a7 == 0;
          if (a7) {
            __int16 v35 = 30;
          }
          else {
            __int16 v35 = 2;
          }
          if (v34) {
            int8x16_t v36 = "IPv4";
          }
          else {
            int8x16_t v36 = "IPv6";
          }
          uint64_t v37 = inet_ntop(v35, a3, v109, 0x2Eu);
          size_t v38 = __rev16(a5);
          size_t v39 = __rev16(v31);
          size_t v40 = inet_ntop(v35, a4, v108, 0x2Eu);
          size_t v41 = "partial";
          if (!v93) {
            size_t v41 = "";
          }
          *(_DWORD *)buf = 136448515;
          v95 = "validate_tcp_cksum";
          v96 = 2085;
          *(void *)os_log_type_t v97 = v37;
          *(_WORD *)&v97[8] = 1024;
          *(_DWORD *)v98 = v38;
          *(_WORD *)&v98[4] = 2085;
          os_log_type_t v99 = v40;
          *(_WORD *)BOOL v100 = 1024;
          *(_DWORD *)&v100[2] = v39;
          *(_WORD *)v101 = 2082;
          *(void *)&v101[2] = v36;
          os_log_type_t v102 = 2082;
          BOOL v103 = (void *)v41;
          v104 = 1024;
          *(_DWORD *)v105 = v92;
          *(_WORD *)&v105[4] = 1024;
          *(_DWORD *)&v105[6] = v91;
          *(_WORD *)v106 = 1024;
          *(_DWORD *)&v106[2] = a2;
          _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_DEBUG,  "%{public}s TCP %{sensitive}s:%d -> %{sensitive}s:%d invalid %{public}s-TCP offload %{public}s start %u check sum 0x%x tlen %u",  buf,  0x52u);
        }
      }

      return v32;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v19 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      id v20 = v8;
      if (a7) {
        os_log_type_t v21 = 30;
      }
      else {
        os_log_type_t v21 = 2;
      }
      BOOL v22 = "IPv4";
      if (a7) {
        BOOL v22 = "IPv6";
      }
      __int16 v87 = v22;
      os_log_type_t v84 = inet_ntop(v21, a3, v109, 0x2Eu);
      __int16 v85 = __rev16(a5);
      v86 = __rev16(v20);
      os_log_type_t v23 = v21;
      nw_protocol_definition_t v8 = v20;
      BOOL v24 = inet_ntop(v23, a4, v108, 0x2Eu);
      os_log_type_t v25 = "partial";
      if (!v93) {
        os_log_type_t v25 = "";
      }
      *(_DWORD *)buf = 136448515;
      v95 = "validate_tcp_cksum";
      v96 = 2085;
      *(void *)os_log_type_t v97 = v84;
      *(_WORD *)&v97[8] = 1024;
      *(_DWORD *)v98 = v85;
      *(_WORD *)&v98[4] = 2085;
      os_log_type_t v99 = v24;
      *(_WORD *)BOOL v100 = 1024;
      *(_DWORD *)&v100[2] = v86;
      *(_WORD *)v101 = 2082;
      *(void *)&v101[2] = v87;
      os_log_type_t v102 = 2082;
      BOOL v103 = (void *)v25;
      v104 = 1024;
      *(_DWORD *)v105 = v92;
      *(_WORD *)&v105[4] = 1024;
      *(_DWORD *)&v105[6] = v91;
      *(_WORD *)v106 = 1024;
      *(_DWORD *)&v106[2] = a2;
      _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s TCP %{sensitive}s:%d -> %{sensitive}s:%d not final %{public}s-TCP offload %{public}s start %u checksum 0x%x tlen %u",  buf,  0x52u);
    }
  }

  uint64_t v16 = (v18 >> 11) & 1;
  if (v93)
  {
    v88 = v8;
    if (((*(_WORD *)(a1 + 204) & 0x100) == 0
       || !g_channel_check_validity
       || g_channel_check_validity(a1, *(void *)(a1 + 88)))
      && (BOOL v26 = *(void *)(a1 + 112)) != 0
      && (os_log_type_t v27 = *(_DWORD *)(a1 + 48)) != 0)
    {
      os_log_type_t v28 = *(void *)(a1 + 112);
      if ((*(_WORD *)(a1 + 204) & 0x100) == 0
        || (os_log_type_t v28 = *(void *)(a1 + 112), !g_channel_check_validity)
        || g_channel_check_validity(a1, *(void *)(a1 + 88)) && (os_log_type_t v28 = *(void *)(a1 + 112)) != 0)
      {
        size_t v29 = (unsigned __int16)(v28 + *(_WORD *)(a1 + 56) - v26);
        if ((a7 & 1) != 0 || !v92 || v92 == v29)
        {
          os_log_type_t v47 = v29 + a2;
          if (a7)
          {
            size_t v30 = v91;
            if (v92 == v29 && v27 == v47)
            {
              nw_protocol_definition_t v8 = v88;
              goto LABEL_84;
            }
          }

          else
          {
            size_t v30 = v91;
            if (v27 == v47)
            {
              nw_protocol_definition_t v8 = v88;
              goto LABEL_53;
            }
          }
        }

        else
        {
          size_t v30 = v91;
        }

        LOWORD(v30) = in_adjust_cksum(v26, v27, v92, v29, a2, v30);
        nw_protocol_definition_t v8 = v88;
        if (!a7) {
          goto LABEL_53;
        }
LABEL_84:
        BOOL v49 = in6_pseudo((unsigned __int16 *)a3, (unsigned __int16 *)a4, bswap32(a2 + 6) + (unsigned __int16)v30);
        goto LABEL_85;
      }

      size_t v42 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO)) {
        return 0LL;
      }
      *(_DWORD *)buf = 136446210;
      v95 = "validate_tcp_cksum";
      uint64_t v43 = "%{public}s Frame buffer no longer valid for TCP";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v42 = (os_log_s *)gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
        return 0LL;
      }
      *(_DWORD *)buf = 136446210;
      v95 = "validate_tcp_cksum";
      uint64_t v43 = "%{public}s Frame buffer no longer valid";
    }

    char v44 = v42;
    char v45 = OS_LOG_TYPE_INFO;
    unsigned __int8 v46 = 12;
LABEL_100:
    _os_log_impl(&dword_181A5C000, v44, v45, v43, buf, v46);
    return 0LL;
  }

  id v14 = 0;
LABEL_73:
  if (!*(void *)(a1 + 32))
  {
    v90 = 0;
    id v66 = inet_cksum(a1, 0, a2, &v90);
    if (!v90)
    {
      LOWORD(v30) = ~v66;
      if (a7) {
        goto LABEL_84;
      }
LABEL_53:
      os_log_type_t v48 = *a4 + (unint64_t)*a3 + bswap32(a2 + 6) + (unsigned __int16)v30;
      BOOL v49 = (unsigned __int16)(((WORD1(v48) + (unsigned __int16)v48) >> 16)
                             + WORD1(v48)
                             + v48
LABEL_85:
      __int16 v91 = ~(_WORD)v49;
      if (v49 == 0xFFFF) {
        return 1LL;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v67 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
        return 0LL;
      }
      char v68 = a7 == 0;
      if (a7) {
        id v69 = 30;
      }
      else {
        id v69 = 2;
      }
      if (v68) {
        os_log_type_t v70 = "IPv4";
      }
      else {
        os_log_type_t v70 = "IPv6";
      }
      BOOL v71 = inet_ntop(v69, a3, v109, 0x2Eu);
      __int16 v72 = __rev16(a5);
      uint64_t v73 = __rev16(v8);
      __int16 v74 = inet_ntop(v69, a4, v108, 0x2Eu);
      uint64_t v75 = "";
      v95 = "validate_tcp_cksum";
      uint64_t v76 = "-fallback";
      *(_DWORD *)buf = 136448515;
      if (!v16) {
        uint64_t v76 = "";
      }
      v96 = 2085;
      *(void *)os_log_type_t v97 = v71;
      if (v93) {
        uint64_t v75 = "partial";
      }
      *(_WORD *)&v97[8] = 1024;
      *(_DWORD *)v98 = v72;
      *(_WORD *)&v98[4] = 2085;
      os_log_type_t v99 = v74;
      *(_WORD *)BOOL v100 = 1024;
      *(_DWORD *)&v100[2] = v73;
      *(_WORD *)v101 = 2082;
      *(void *)&v101[2] = v70;
      os_log_type_t v102 = 2082;
      BOOL v103 = (void *)v76;
      v104 = 2082;
      *(void *)v105 = v75;
      *(_WORD *)&v105[8] = 1024;
      *(_DWORD *)v106 = v91;
      *(_WORD *)&v106[4] = 1024;
      os_log_type_t v107 = a2;
      uint64_t v43 = "%{public}s TCP %{sensitive}s:%d -> %{sensitive}s:%d incorrect %{public}s-TCP manual%{public}s %{public}s che"
            "cksum 0x%x tlen %u";
      char v44 = (os_log_s *)v67;
      char v45 = OS_LOG_TYPE_INFO;
      unsigned __int8 v46 = 86;
      goto LABEL_100;
    }

    return 0LL;
  }

  BOOL v58 = 1;
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0 && g_channel_check_validity) {
    BOOL v58 = g_channel_check_validity(a1, *(void *)(a1 + 88));
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v59 = gLogObj;
  if ((v58 & 1) != 0)
  {
    os_log_type_t v60 = *(unsigned __int16 *)(a1 + 204);
    *(_DWORD *)buf = 136448002;
    v95 = "validate_tcp_cksum";
    v96 = 1024;
    *(_DWORD *)os_log_type_t v97 = (v60 >> 8) & 1;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)&v97[6] = (v60 >> 6) & 1;
    *(_WORD *)v98 = 1024;
    *(_DWORD *)&v98[2] = (v60 >> 11) & 1;
    LOWORD(v99) = 1024;
    *(_DWORD *)((char *)&v99 + 2) = (v60 >> 12) & 1;
    HIWORD(v99) = 1024;
    *(_DWORD *)BOOL v100 = v93;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)v101 = v91;
    *(_WORD *)&v101[4] = 1024;
    *(_DWORD *)&v101[6] = v14;
    __int16 v61 = (char *)_os_log_send_and_compose_impl();
    v109[0] = 16;
    v108[0] = 0;
    if (v109[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v62 = (os_log_s *)gLogObj;
      uint64_t v63 = v109[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v109[0])) {
        goto LABEL_112;
      }
      nw_endpoint_t v64 = *(unsigned __int16 *)(a1 + 204);
      *(_DWORD *)buf = 136448002;
      v95 = "validate_tcp_cksum";
      v96 = 1024;
      *(_DWORD *)os_log_type_t v97 = (v64 >> 8) & 1;
      *(_WORD *)&v97[4] = 1024;
      *(_DWORD *)&v97[6] = (v64 >> 6) & 1;
      *(_WORD *)v98 = 1024;
      *(_DWORD *)&v98[2] = (v64 >> 11) & 1;
      LOWORD(v99) = 1024;
      *(_DWORD *)((char *)&v99 + 2) = (v64 >> 12) & 1;
      HIWORD(v99) = 1024;
      *(_DWORD *)BOOL v100 = v93;
      *(_WORD *)&v100[4] = 1024;
      *(_DWORD *)v101 = v91;
      *(_WORD *)&v101[4] = 1024;
      *(_DWORD *)&v101[6] = v14;
      v65 = "%{public}s super packet checksum not validated or offloaded: channel_frame: %d packet_chain_member: %d csum_"
            "data_valid: %d csum_pseudo_hdr %d partial %u tcp_sum %x error: %d";
    }

    else if (v108[0])
    {
      os_log_type_t v78 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v62 = (os_log_s *)gLogObj;
      uint64_t v63 = v109[0];
      v79 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v109[0]);
      if (v78)
      {
        if (v79)
        {
          os_log_type_t v80 = *(unsigned __int16 *)(a1 + 204);
          *(_DWORD *)buf = 136448258;
          v95 = "validate_tcp_cksum";
          v96 = 1024;
          *(_DWORD *)os_log_type_t v97 = (v80 >> 8) & 1;
          *(_WORD *)&v97[4] = 1024;
          *(_DWORD *)&v97[6] = (v80 >> 6) & 1;
          *(_WORD *)v98 = 1024;
          *(_DWORD *)&v98[2] = (v80 >> 11) & 1;
          LOWORD(v99) = 1024;
          *(_DWORD *)((char *)&v99 + 2) = (v80 >> 12) & 1;
          HIWORD(v99) = 1024;
          *(_DWORD *)BOOL v100 = v93;
          *(_WORD *)&v100[4] = 1024;
          *(_DWORD *)v101 = v91;
          *(_WORD *)&v101[4] = 1024;
          *(_DWORD *)&v101[6] = v14;
          os_log_type_t v102 = 2082;
          BOOL v103 = v78;
          _os_log_impl( &dword_181A5C000,  v62,  v63,  "%{public}s super packet checksum not validated or offloaded: channel_frame: %d packet_chain_member: %d csum_ data_valid: %d csum_pseudo_hdr %d partial %u tcp_sum %x error: %d, dumping backtrace:%{public}s",  buf,  0x40u);
        }

        free(v78);
        goto LABEL_112;
      }

      if (!v79)
      {
LABEL_112:
        if (v61) {
          free(v61);
        }
        return 1LL;
      }

      os_log_type_t v82 = *(unsigned __int16 *)(a1 + 204);
      *(_DWORD *)buf = 136448002;
      v95 = "validate_tcp_cksum";
      v96 = 1024;
      *(_DWORD *)os_log_type_t v97 = (v82 >> 8) & 1;
      *(_WORD *)&v97[4] = 1024;
      *(_DWORD *)&v97[6] = (v82 >> 6) & 1;
      *(_WORD *)v98 = 1024;
      *(_DWORD *)&v98[2] = (v82 >> 11) & 1;
      LOWORD(v99) = 1024;
      *(_DWORD *)((char *)&v99 + 2) = (v82 >> 12) & 1;
      HIWORD(v99) = 1024;
      *(_DWORD *)BOOL v100 = v93;
      *(_WORD *)&v100[4] = 1024;
      *(_DWORD *)v101 = v91;
      *(_WORD *)&v101[4] = 1024;
      *(_DWORD *)&v101[6] = v14;
      v65 = "%{public}s super packet checksum not validated or offloaded: channel_frame: %d packet_chain_member: %d csum_"
            "data_valid: %d csum_pseudo_hdr %d partial %u tcp_sum %x error: %d, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v62 = (os_log_s *)gLogObj;
      uint64_t v63 = v109[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v109[0])) {
        goto LABEL_112;
      }
      __int16 v81 = *(unsigned __int16 *)(a1 + 204);
      *(_DWORD *)buf = 136448002;
      v95 = "validate_tcp_cksum";
      v96 = 1024;
      *(_DWORD *)os_log_type_t v97 = (v81 >> 8) & 1;
      *(_WORD *)&v97[4] = 1024;
      *(_DWORD *)&v97[6] = (v81 >> 6) & 1;
      *(_WORD *)v98 = 1024;
      *(_DWORD *)&v98[2] = (v81 >> 11) & 1;
      LOWORD(v99) = 1024;
      *(_DWORD *)((char *)&v99 + 2) = (v81 >> 12) & 1;
      HIWORD(v99) = 1024;
      *(_DWORD *)BOOL v100 = v93;
      *(_WORD *)&v100[4] = 1024;
      *(_DWORD *)v101 = v91;
      *(_WORD *)&v101[4] = 1024;
      *(_DWORD *)&v101[6] = v14;
      v65 = "%{public}s super packet checksum not validated or offloaded: channel_frame: %d packet_chain_member: %d csum_"
            "data_valid: %d csum_pseudo_hdr %d partial %u tcp_sum %x error: %d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v62, v63, v65, buf, 0x36u);
    goto LABEL_112;
  }

  uint64_t v32 = 0LL;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v77 = *(unsigned __int16 *)(a1 + 204);
    *(_DWORD *)buf = 136448002;
    v95 = "validate_tcp_cksum";
    v96 = 1024;
    *(_DWORD *)os_log_type_t v97 = (v77 >> 8) & 1;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)&v97[6] = (v77 >> 6) & 1;
    *(_WORD *)v98 = 1024;
    *(_DWORD *)&v98[2] = (v77 >> 11) & 1;
    LOWORD(v99) = 1024;
    *(_DWORD *)((char *)&v99 + 2) = (v77 >> 12) & 1;
    HIWORD(v99) = 1024;
    *(_DWORD *)BOOL v100 = v93;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)v101 = v91;
    *(_WORD *)&v101[4] = 1024;
    *(_DWORD *)&v101[6] = v14;
    uint64_t v43 = "%{public}s super packet invalid, channel_frame: %d packet_chain_member: %u csum_data_valid: %u csum_pseudo_hdr"
          " %u partial %u tcp_sum %x error: %d";
    char v44 = (os_log_s *)v59;
    char v45 = OS_LOG_TYPE_DEFAULT;
    unsigned __int8 v46 = 54;
    goto LABEL_100;
  }

  return v32;
}

            nw::release_if_needed<nw_protocol *>((uint64_t *)v6 + 90);
            os_log_type_t v48 = *((_BYTE *)v6 + 728);
            goto LABEL_70;
          }

          free(v7);
          goto LABEL_141;
        }

            free(v16);
            goto LABEL_70;
          }

          if (v12 == (void *)MEMORY[0x1895F9198])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            size_t v40 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            size_t v41 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v106 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              size_t v42 = (os_log_s *)(id)gLogObj;
              uint64_t v43 = type;
              if (os_log_type_enabled(v42, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED",  buf,  0xCu);
              }
            }

            else if (v106)
            {
              char v57 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              size_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v58 = type;
              os_log_type_t v59 = os_log_type_enabled(v42, type);
              if (v57)
              {
                if (v59)
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  BOOL v110 = 2082;
                  *(void *)v111 = v57;
                  _os_log_impl( &dword_181A5C000,  v42,  v58,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v57);
                if (!v41) {
                  goto LABEL_179;
                }
                goto LABEL_178;
              }

              if (v59)
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl( &dword_181A5C000,  v42,  v58,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              size_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              uint64_t v75 = type;
              if (os_log_type_enabled(v42, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl( &dword_181A5C000,  v42,  v75,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

          else
          {
            if (v12 == (void *)MEMORY[0x1895F91A0])
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int128 v56 = (os_log_s *)(id)gLogObj;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_ERROR,  "%{public}s received XPC_ERROR_CONNECTION_INVALID",  buf,  0xCu);
              }

              goto LABEL_179;
            }

            if (v12 != (void *)MEMORY[0x1895F91C8])
            {
              id v14 = (void *)MEMORY[0x186E12534](v12);
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v32 = (id)gLogObj;
              *(_DWORD *)buf = 136446466;
              os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              BOOL v110 = 2082;
              *(void *)v111 = v14;
              uint64_t v16 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              v106 = 0;
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v33 = type;
                if (os_log_type_enabled(v17, type))
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  BOOL v110 = 2082;
                  *(void *)v111 = v14;
                  _os_log_impl( &dword_181A5C000,  v17,  v33,  "%{public}s received returned unknown XPC error %{public}s",  buf,  0x16u);
                }

                goto LABEL_67;
              }

              if (!v106)
              {
                __nwlog_obj();
                os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v82 = type;
                if (os_log_type_enabled(v17, type))
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  BOOL v110 = 2082;
                  *(void *)v111 = v14;
                  _os_log_impl( &dword_181A5C000,  v17,  v82,  "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded",  buf,  0x16u);
                }

                goto LABEL_67;
              }

              BOOL v62 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              uint64_t v63 = type;
              nw_endpoint_t v64 = os_log_type_enabled(v17, type);
              if (!v62)
              {
                if (v64)
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  BOOL v110 = 2082;
                  *(void *)v111 = v14;
                  _os_log_impl( &dword_181A5C000,  v17,  v63,  "%{public}s received returned unknown XPC error %{public}s, no backtrace",  buf,  0x16u);
                }

                goto LABEL_67;
              }

              if (v64)
              {
                *(_DWORD *)buf = 136446722;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                BOOL v110 = 2082;
                *(void *)v111 = v14;
                *(_WORD *)&v111[8] = 2082;
                *(void *)&v111[10] = v62;
                _os_log_impl( &dword_181A5C000,  v17,  v63,  "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(v62);
              if (!v16) {
                goto LABEL_70;
              }
              goto LABEL_69;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v60 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            size_t v41 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v106 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              size_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              __int16 v61 = type;
              if (os_log_type_enabled(v42, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl( &dword_181A5C000,  v42,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT",  buf,  0xCu);
              }
            }

            else if (v106)
            {
              __int16 v72 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              size_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              uint64_t v73 = type;
              __int16 v74 = os_log_type_enabled(v42, type);
              if (v72)
              {
                if (v74)
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                  BOOL v110 = 2082;
                  *(void *)v111 = v72;
                  _os_log_impl( &dword_181A5C000,  v42,  v73,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v72);
LABEL_177:
                if (!v41) {
                  goto LABEL_179;
                }
LABEL_178:
                free(v41);
                goto LABEL_179;
              }

              if (v74)
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl( &dword_181A5C000,  v42,  v73,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              size_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v86 = type;
              if (os_log_type_enabled(v42, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                _os_log_impl( &dword_181A5C000,  v42,  v86,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

          goto LABEL_177;
        }

        xpc_dictionary_get_value(v12, (const char *)networkd_privileged_key_result);
        os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
        BOOL v24 = v23;
        if (!v23)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v37 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
          BOOL v26 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v106 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v27 = (os_log_s *)(id)gLogObj;
            size_t v38 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl(&dword_181A5C000, v27, v38, "%{public}s received response without result code", buf, 0xCu);
            }

            goto LABEL_137;
          }

          if (!v106)
          {
            __nwlog_obj();
            os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v71 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl( &dword_181A5C000,  v27,  v71,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_137;
          }

          os_log_type_t v50 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          __int128 v54 = type;
          __int128 v55 = os_log_type_enabled(v27, type);
          if (!v50)
          {
            if (v55)
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl( &dword_181A5C000,  v27,  v54,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
            }

            goto LABEL_137;
          }

          if (v55)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            BOOL v110 = 2082;
            *(void *)v111 = v50;
            _os_log_impl( &dword_181A5C000,  v27,  v54,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          goto LABEL_87;
        }

        if (object_getClass(v23) != (Class)MEMORY[0x1895F9280])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v25 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
          BOOL v26 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v106 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v27 = (os_log_s *)(id)gLogObj;
            os_log_type_t v28 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s received invalid result type", buf, 0xCu);
            }

    free(v31);
    if (!v25) {
      return;
    }
LABEL_89:
    free(v25);
    return;
  }

  if ((*(_BYTE *)(a1 + 198) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v9 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(_DWORD *)(a1 + 688);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 114;
      *(_WORD *)&buf[22] = 2080;
      __int128 v55 = (uint64_t (*)(uint64_t, uint64_t))" ";
      LOWORD(v56) = 1024;
      *(_DWORD *)((char *)&v56 + 2) = v10;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%staking redirect, remaining limit %u",  buf,  0x26u);
    }
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000LL;
  __int128 v55 = __Block_byref_object_copy__14_943;
  __int128 v56 = __Block_byref_object_dispose__15_944;
  parameters = (void *)nw_protocol_get_parameters(a1);
  if (parameters) {
    parameters = os_retain(parameters);
  }
  char v57 = parameters;
  v58 |= 1u;
  nw_http_messaging_options_create_transaction_in_parameters(*(void **)(*(void *)&buf[8] + 40LL), a1, 1);
  nw_protocol_plugin_metadata_prepare_for_reissue(a1 + 200);
  v41[0] = 0LL;
  v41[1] = v41;
  v41[2] = 0x3802000000LL;
  v41[3] = __Block_byref_object_copy__12;
  v41[4] = __Block_byref_object_dispose__13;
  size_t v42 = os_retain(a5);
  v43 |= 1u;
  size_t v12 = *(void **)(a1 + 672);
  v39[6] = a1;
  v40[0] = MEMORY[0x1895F87A8];
  v40[1] = 0x40000000LL;
  v40[2] = ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke;
  v40[3] = &unk_189BB5E78;
  v40[4] = v41;
  void v40[5] = a1;
  void v38[4] = a1;
  v39[0] = MEMORY[0x1895F87A8];
  v39[1] = 0x40000000LL;
  v39[2] = ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_2;
  v39[3] = &unk_189BB5EC8;
  void v39[4] = buf;
  v39[5] = v41;
  v38[0] = MEMORY[0x1895F87A8];
  v38[1] = 0x40000000LL;
  v38[2] = ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_4;
  v38[3] = &__block_descriptor_tmp_47;
  nw_protocol_plugin_retry_reissue_output_frames(a1 + 344, a1, v12, a2, a3, 2, 1, v40, v39, (uint64_t)v38);
  size_t v13 = *(_DWORD *)(a1 + 688);
  *(_DWORD *)(a1 + 68_Block_object_dispose(va, 8) = v13 - 1;
  if (v13) {
    goto LABEL_28;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v14 = *(unsigned int *)(a1 + 688);
  char v44 = 136446978;
  char v45 = "nw_http_redirect_reissue";
  unsigned __int8 v46 = 2082;
  os_log_type_t v47 = "http_redirect->limit";
  os_log_type_t v48 = 2048;
  BOOL v49 = 1LL;
  os_log_type_t v50 = 2048;
  size_t v51 = v14;
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int8x16_t v36 = 0;
  if (__nwlog_fault(v15, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (os_log_s *)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        os_log_type_t v18 = *(unsigned int *)(a1 + 688);
        char v44 = 136446978;
        char v45 = "nw_http_redirect_reissue";
        unsigned __int8 v46 = 2082;
        os_log_type_t v47 = "http_redirect->limit";
        os_log_type_t v48 = 2048;
        BOOL v49 = 1LL;
        os_log_type_t v50 = 2048;
        size_t v51 = v18;
        os_log_type_t v19 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_24:
        _os_log_impl(&dword_181A5C000, v16, v17, v19, (uint8_t *)&v44, 0x2Au);
      }
    }

    else if (v36)
    {
      id v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (os_log_s *)gLogObj;
      os_log_type_t v17 = type;
      os_log_type_t v21 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v20)
      {
        if (v21)
        {
          BOOL v22 = *(unsigned int *)(a1 + 688);
          char v44 = 136447234;
          char v45 = "nw_http_redirect_reissue";
          unsigned __int8 v46 = 2082;
          os_log_type_t v47 = "http_redirect->limit";
          os_log_type_t v48 = 2048;
          BOOL v49 = 1LL;
          os_log_type_t v50 = 2048;
          size_t v51 = v22;
          uint64_t v52 = 2082;
          __int128 v53 = v20;
          _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  (uint8_t *)&v44,  0x34u);
        }

        free(v20);
        goto LABEL_25;
      }

      if (v21)
      {
        BOOL v24 = *(unsigned int *)(a1 + 688);
        char v44 = 136446978;
        char v45 = "nw_http_redirect_reissue";
        unsigned __int8 v46 = 2082;
        os_log_type_t v47 = "http_redirect->limit";
        os_log_type_t v48 = 2048;
        BOOL v49 = 1LL;
        os_log_type_t v50 = 2048;
        size_t v51 = v24;
        os_log_type_t v19 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
        goto LABEL_24;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (os_log_s *)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        os_log_type_t v23 = *(unsigned int *)(a1 + 688);
        char v44 = 136446978;
        char v45 = "nw_http_redirect_reissue";
        unsigned __int8 v46 = 2082;
        os_log_type_t v47 = "http_redirect->limit";
        os_log_type_t v48 = 2048;
        BOOL v49 = 1LL;
        os_log_type_t v50 = 2048;
        size_t v51 = v23;
        os_log_type_t v19 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
        goto LABEL_24;
      }
    }
  }

    if (v46) {
      free(v46);
    }
    goto LABEL_32;
  }

  id v20 = *((void *)v11 + 19);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v21 = (os_log_s *)(id)gLogObj;
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (v20)
  {
    if (v22)
    {
      os_log_type_t v23 = (char *)*((void *)v11 + 3);
      BOOL v24 = *((_DWORD *)v11 + 42);
      *(_DWORD *)buf = 136447234;
      BOOL v58 = "-[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]";
      os_log_type_t v59 = 2080;
      os_log_type_t v60 = v23;
      __int16 v61 = 1042;
      BOOL v62 = 16;
      uint64_t v63 = 2098;
      nw_endpoint_t v64 = (char *)v11 + 115;
      v65 = 1024;
      id v66 = v24;
      _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] initWithEtherType: must specify ethertype and interface",  buf,  0x2Cu);
    }
  }

  else if (v22)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v58 = "-[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]";
    os_log_type_t v59 = 2114;
    os_log_type_t v60 = (char *)v11;
    _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] initWithEtherType: must specify ethertype and interface",  buf,  0x16u);
  }

LABEL_17:
  os_log_type_t v25 = 0LL;
LABEL_34:

  return v25;
}

    goto LABEL_70;
  }

  if (!v1->service)
  {
    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
    id v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v40 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s called with null manager->service", buf, 0xCu);
      }

      goto LABEL_69;
    }

    if (!v40)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int8x16_t v36 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl( &dword_181A5C000,  v21,  v36,  "%{public}s called with null manager->service, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_69;
    }

    size_t v30 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v31 = type;
    uint64_t v32 = os_log_type_enabled(v21, type);
    if (!v30)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl( &dword_181A5C000,  v21,  v31,  "%{public}s called with null manager->service, no backtrace",  buf,  0xCu);
      }

      goto LABEL_69;
    }

    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
      char v44 = 2082;
      char v45 = v30;
      _os_log_impl( &dword_181A5C000,  v21,  v31,  "%{public}s called with null manager->service, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_50;
  }

  if (!nw_parameters_get_include_peer_to_peer(v1->parameters))
  {
    __nwlog_obj();
    os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
    id v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v40 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s called with null nw_parameters_get_include_peer_to_peer(manager->parameters)",  buf,  0xCu);
      }

      goto LABEL_69;
    }

    if (!v40)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v37 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl( &dword_181A5C000,  v21,  v37,  "%{public}s called with null nw_parameters_get_include_peer_to_peer(manager->parameters), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_69;
    }

    size_t v30 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = type;
    uint64_t v34 = os_log_type_enabled(v21, type);
    if (!v30)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl( &dword_181A5C000,  v21,  v33,  "%{public}s called with null nw_parameters_get_include_peer_to_peer(manager->parameters), no backtrace",  buf,  0xCu);
      }

      goto LABEL_69;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
      char v44 = 2082;
      char v45 = v30;
      _os_log_impl( &dword_181A5C000,  v21,  v33,  "%{public}s called with null nw_parameters_get_include_peer_to_peer(manager->parameters), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
    return 1LL;
  }

  __nwlog_obj();
  uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v67 = "strict_malloc";
  char v68 = 2048;
  id v69 = v20;
  nw_endpoint_t v64 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v64);
  if (!result)
  {
    free(v64);
    goto LABEL_27;
  }

    goto LABEL_70;
  }

  if (v4)
  {
    nw_endpoint_type_t v6 = v3[13];
    if (v6)
    {
      nw_array_remove_object(v6, (uint64_t)v5);
      if (!nw_parameters_get_logging_disabled(v3[7]))
      {
        if (gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          os_log_type_t v21 = (os_log_s *)(id)gconnection_groupLogObj;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            BOOL v22 = *((_DWORD *)v3 + 42);
            *(_DWORD *)buf = 136446722;
            size_t v39 = "nw_connection_group_remove_connection_locked";
            size_t v40 = 1024;
            *(_DWORD *)size_t v41 = v22;
            *(_WORD *)&v41[4] = 2112;
            *(void *)&v41[6] = v5;
            _os_log_impl(&dword_181A5C000, v21, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] removed connection %@", buf, 0x1Cu);
          }
        }
      }
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  size_t v39 = "nw_connection_group_remove_connection_locked";
  size_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int8x16_t v36 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      size_t v39 = "nw_connection_group_remove_connection_locked";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null connection", buf, 0xCu);
    }

    goto LABEL_69;
  }

  if (!v36)
  {
    __nwlog_obj();
    size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      size_t v39 = "nw_connection_group_remove_connection_locked";
      _os_log_impl( &dword_181A5C000,  v13,  v33,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_69;
  }

  BOOL v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v27 = type;
  os_log_type_t v28 = os_log_type_enabled(v13, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      size_t v39 = "nw_connection_group_remove_connection_locked";
      _os_log_impl(&dword_181A5C000, v13, v27, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_69;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    size_t v39 = "nw_connection_group_remove_connection_locked";
    size_t v40 = 2082;
    *(void *)size_t v41 = v26;
    _os_log_impl( &dword_181A5C000,  v13,  v27,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v26);
  if (v12) {
    goto LABEL_71;
  }
LABEL_6:

  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56LL)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    os_log_type_t v17 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v18 = *(void *)(a1 + 32);
      os_log_type_t v19 = *(void *)(v18 + 104);
      if (v19) {
        id v20 = (uint64_t)(*(void *)(v19 + 24) - *(void *)(v19 + 16)) >> 3;
      }
      else {
        id v20 = 0LL;
      }
      size_t v31 = *(_DWORD *)(v18 + 168);
      *(_DWORD *)buf = 136446978;
      size_t v39 = "nw_connection_group_handle_connection_state_changed_block_invoke";
      size_t v40 = 1024;
      *(_DWORD *)size_t v41 = v31;
      *(_WORD *)&v41[4] = 2048;
      *(void *)&v41[6] = v20;
      size_t v42 = 2112;
      uint64_t v43 = v19;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] now has %zu active connections: %@",  buf,  0x26u);
    }
  }

  if (nw_array_is_empty(*(void *)(*(void *)(a1 + 32) + 104LL)))
  {
    nw_txt_record_t v7 = *(void *)(a1 + 32);
    if (*(char *)(v7 + 190) < 0)
    {
      if (!nw_parameters_get_logging_disabled(*(void *)(v7 + 56)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        size_t v29 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          size_t v30 = *(_DWORD *)(*(void *)(a1 + 32) + 168LL);
          *(_DWORD *)buf = 136446466;
          size_t v39 = "nw_connection_group_handle_connection_state_changed_block_invoke";
          size_t v40 = 1024;
          *(_DWORD *)size_t v41 = v30;
          _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] now has no active connections, cancelling group",  buf,  0x12u);
        }
      }

      nw_connection_group_final_cleanup_locked(*(NWConcrete_nw_connection_group **)(a1 + 32));
    }

    else
    {
      nw_protocol_definition_t v8 = *(void **)(v7 + 64);
      if (v8)
      {
        unint64_t v9 = v8;
        uint64_t v10 = v9[2] == 2;

        if (v10)
        {
          if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56LL)) && gLogDatapath)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            uint64_t v34 = (os_log_s *)(id)gconnection_groupLogObj;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              __int16 v35 = *(_DWORD *)(*(void *)(a1 + 32) + 168LL);
              *(_DWORD *)buf = 136446466;
              size_t v39 = "nw_connection_group_handle_connection_state_changed_block_invoke";
              size_t v40 = 1024;
              *(_DWORD *)size_t v41 = v35;
              _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] now has no active connections, going into failed state",  buf,  0x12u);
            }
          }

          nw_connection_group_set_state_locked(*(void **)(a1 + 32), 3, 0LL);
        }
      }
    }
  }

    goto LABEL_70;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v4_Block_object_dispose(va, 8) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_181A5C000, v25, v28, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if ((_BYTE)v48)
    {
      uint64_t v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v35 = type[0];
      int8x16_t v36 = os_log_type_enabled(v25, type[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v34;
          _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v34);
        if (!v24) {
          goto LABEL_72;
        }
        goto LABEL_71;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_181A5C000, v25, v35, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v38 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl( &dword_181A5C000,  v25,  v38,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_69;
  }

  if (*((char *)v3 + 190) < 0 || *((int *)v3 + 10) >= 3)
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      size_t v29 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        size_t v30 = *((_DWORD *)v3 + 42);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v30;
        _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] Cannot extract a connection from a failed or cancelled group",  buf,  0x12u);
      }
    }

    goto LABEL_72;
  }

  *(void *)os_log_type_t type = 0LL;
  uint64_t v43 = type;
  char v44 = 0x3032000000LL;
  char v45 = __Block_byref_object_copy__8579;
  unsigned __int8 v46 = __Block_byref_object_dispose__8580;
  os_log_type_t v47 = (id)nw_content_context_copy_connection(v4);
  nw_endpoint_type_t v6 = MEMORY[0x1895F87A8];
  if (*((void *)v43 + 5))
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_connection_group_extract_connection_for_message_block_invoke;
    aBlock[3] = &unk_189BC9210;
    size_t v40 = v3;
    size_t v41 = type;
    nw_txt_record_t v7 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
    v7[2](v7);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

    nw_protocol_definition_t v8 = v40;
LABEL_12:

    goto LABEL_13;
  }

  if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    nw_protocol_definition_t v8 = (nw_connection_group *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v9 = *((_DWORD *)v3 + 42);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v5;
      _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] context %@ does not have connection, returning nil",  buf,  0x1Cu);
    }

    goto LABEL_12;
  }

  if (v19) {
    free(v19);
  }
  return 0LL;
}

  if (v19) {
    free(v19);
  }
  return 0LL;
}

  if (v19) {
    free(v19);
  }
  return 0LL;
}

  if (v19) {
    free(v19);
  }
  return 0LL;
}

    if (v28) {
      free(v28);
    }
    nw_txt_record_t v7 = 0LL;
    goto LABEL_15;
  }

  id v5 = (void *)*((void *)v4 + 5);
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    nw_protocol_definition_t v8 = *((void *)v4 + 11);
    if (v8) {
      *((void *)v4 + 11) = v8 + 1;
    }
    nw_endpoint_type_t v6 = -1;
  }

  else
  {
    nw_endpoint_type_t v6 = 0;
  }

  *(void *)size_t v38 = v4;
  size_t v39 = v6;
  unint64_t v9 = *((void *)v4 + 3);
  if (v9)
  {
    uint64_t v10 = *(uint64_t (**)(const char *, char *))(v9 + 96);
    if (v10)
    {
      nw_txt_record_t v7 = v10(v4, v3);
      if (v5 != &nw_protocol_ref_counted_handle) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }

  __nwlog_obj();
  size_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  id v14 = (const char *)*((void *)v4 + 2);
  *(_DWORD *)buf = 136446722;
  size_t v42 = "__nw_protocol_finalize_output_frames";
  if (!v14) {
    id v14 = "invalid";
  }
  uint64_t v43 = 2082;
  char v44 = (char *)v14;
  char v45 = 2048;
  unsigned __int8 v46 = v4;
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v37 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v16, type))
    {
      os_log_type_t v18 = (const char *)*((void *)v4 + 2);
      if (!v18) {
        os_log_type_t v18 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      size_t v42 = "__nw_protocol_finalize_output_frames";
      uint64_t v43 = 2082;
      char v44 = (char *)v18;
      char v45 = 2048;
      unsigned __int8 v46 = v4;
      _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback",  buf,  0x20u);
    }

    if (v32) {
      free(v32);
    }
    __nwlog_obj();
    size_t v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v50 = "nw_authentication_credential_cache_entry_get_credential";
    size_t v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v50 = "nw_authentication_credential_cache_entry_get_credential";
        size_t v42 = "%{public}s called with null cache_entry";
LABEL_84:
        _os_log_impl(&dword_181A5C000, v40, v41, v42, buf, 0xCu);
      }
    }

    else if (v47)
    {
      uint64_t v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v41 = type;
      char v44 = os_log_type_enabled(v40, type);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v50 = "nw_authentication_credential_cache_entry_get_credential";
          size_t v51 = 2082;
          uint64_t v52 = v43;
          _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s called with null cache_entry, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v43);
        goto LABEL_86;
      }

      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v50 = "nw_authentication_credential_cache_entry_get_credential";
        size_t v42 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_84;
      }
    }

    else
    {
      __nwlog_obj();
      size_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v50 = "nw_authentication_credential_cache_entry_get_credential";
        size_t v42 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_84;
      }
    }

LABEL_86:
    if (v39) {
      free(v39);
    }
    nw_protocol_definition_t v8 = 0;
    unint64_t v9 = 0;
    nw_endpoint_type_t v6 = 0;
    uint64_t v10 = 0LL;
    goto LABEL_8;
  }

          pat_timestamps_array = 0LL;
LABEL_70:
          size_t v39 = dispatch_queue_create("protocol_http_authentication", 0LL);
          nw_queue_context_target_dispatch_queue(*(void **)(v2 + 832), v39);
          *(void *)os_log_type_t type = 0LL;
          *(void *)&type[8] = type;
          *(void *)&type[16] = 0x2000000000LL;
          BOOL v58 = 0;
          nw_protocol_plugin_retry_begin_async(v2 + 344);
          size_t v40 = v7;
          if (v40) {
            goto LABEL_71;
          }
          __nwlog_obj();
          size_t v42 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)nw_endpoint_t v64 = 136446210;
          v65 = "nw_parameters_get_using_ephemeral_configuration";
          os_log_type_t v50 = (char *)_os_log_send_and_compose_impl();

          __int128 v56 = OS_LOG_TYPE_ERROR;
          __int128 v55 = 0;
          if (__nwlog_fault(v50, &v56, &v55))
          {
            if (v56 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v47 = v56;
              if (os_log_type_enabled(v43, v56))
              {
                *(_DWORD *)nw_endpoint_t v64 = 136446210;
                v65 = "nw_parameters_get_using_ephemeral_configuration";
                _os_log_impl(&dword_181A5C000, v43, v47, "%{public}s called with null parameters", v64, 0xCu);
              }
            }

            else
            {
              if (v55)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                os_log_type_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                unsigned __int8 v46 = v56;
                char v45 = os_log_type_enabled(v48, v56);
                if (backtrace_string)
                {
                  if (v45)
                  {
                    *(_DWORD *)nw_endpoint_t v64 = 136446466;
                    v65 = "nw_parameters_get_using_ephemeral_configuration";
                    id v66 = 2082;
                    v67 = backtrace_string;
                    _os_log_impl( &dword_181A5C000,  v48,  v46,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  v64,  0x16u);
                  }

                  free(backtrace_string);
                }

                else
                {
                  if (v45)
                  {
                    *(_DWORD *)nw_endpoint_t v64 = 136446210;
                    v65 = "nw_parameters_get_using_ephemeral_configuration";
                    _os_log_impl( &dword_181A5C000,  v48,  v46,  "%{public}s called with null parameters, no backtrace",  v64,  0xCu);
                  }
                }

                goto LABEL_105;
              }

              __nwlog_obj();
              uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v49 = v56;
              if (os_log_type_enabled(v43, v56))
              {
                *(_DWORD *)nw_endpoint_t v64 = 136446210;
                v65 = "nw_parameters_get_using_ephemeral_configuration";
                _os_log_impl( &dword_181A5C000,  v43,  v49,  "%{public}s called with null parameters, backtrace limit exceeded",  v64,  0xCu);
              }
            }
          }

    goto LABEL_70;
  }

  if (!v37)
  {
    __nwlog_obj();
    size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      size_t v40 = "nw_flow_replay_send_initial_data_to_candidates";
      _os_log_impl( &dword_181A5C000,  v13,  v33,  "%{public}s called with null flow_protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_69;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v19 = type;
  id v20 = os_log_type_enabled(v13, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      size_t v40 = "nw_flow_replay_send_initial_data_to_candidates";
      _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_69;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    size_t v40 = "nw_flow_replay_send_initial_data_to_candidates";
    size_t v41 = 2082;
    size_t v42 = v18;
    _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null flow_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v12) {
    goto LABEL_71;
  }
LABEL_72:
}

    free(v19);
    goto LABEL_70;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  BOOL v62 = "nw_parameters_create_secure_udp";
  size_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v59 = 0;
  if (__nwlog_fault(v12, &type, &v59))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v13 = (os_log_s *)(id)gLogObj;
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }

    else if (v59)
    {
      uint64_t v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v13 = (os_log_s *)(id)gLogObj;
      uint64_t v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v13, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v62 = "nw_parameters_create_secure_udp";
          uint64_t v63 = 2082;
          nw_endpoint_t v64 = v15;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        if (!v12) {
          goto LABEL_71;
        }
        goto LABEL_58;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v13 = (os_log_s *)(id)gLogObj;
      size_t v30 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v62 = "nw_parameters_create_secure_udp";
        _os_log_impl( &dword_181A5C000,  v13,  v30,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v12) {
LABEL_58:
  }
    free(v12);
LABEL_71:
  uint64_t v10 = 0LL;
LABEL_79:

LABEL_80:
  return v10;
}

          free(v20);
          goto LABEL_70;
        }

        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v21 = (os_log_s *)(id)gLogObj;
          BOOL v22 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_connection_add_probe_locked";
            _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s Cannot add probe to connection because the probe list already contains this probe",  buf,  0xCu);
          }
        }

        else if (v64)
        {
          __int16 v35 = __nw_create_backtrace_string();
          if (v35)
          {
            int8x16_t v36 = (char *)v35;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v37 = (os_log_s *)(id)gLogObj;
            size_t v38 = type;
            if (os_log_type_enabled(v37, type))
            {
              *(_DWORD *)buf = 136446466;
              v67 = "nw_connection_add_probe_locked";
              char v68 = 2082;
              *(void *)id v69 = v36;
              _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s Cannot add probe to connection because the probe list already contains this probe, dumping ba cktrace:%{public}s",  buf,  0x16u);
            }

            free(v36);
            if (!v20) {
              goto LABEL_70;
            }
            goto LABEL_69;
          }

          __nwlog_obj();
          os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          size_t v41 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_connection_add_probe_locked";
            _os_log_impl( &dword_181A5C000,  v21,  v41,  "%{public}s Cannot add probe to connection because the probe list already contains this probe, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v21 = (os_log_s *)(id)gLogObj;
          size_t v40 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_connection_add_probe_locked";
            _os_log_impl( &dword_181A5C000,  v21,  v40,  "%{public}s Cannot add probe to connection because the probe list already contains this probe, backtrace limit exceeded",  buf,  0xCu);
          }
        }

      free(backtrace_string);
      goto LABEL_86;
    }

    uint64_t v37 = (os_log_s *)__nwlog_obj();
    size_t v38 = type[0];
    if (!os_log_type_enabled(v37, type[0])) {
      goto LABEL_86;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v70 = "nw_protocol_masque_get_input_frames";
    size_t v39 = "%{public}s called with null protocol";
LABEL_85:
    _os_log_impl(&dword_181A5C000, v37, v38, v39, buf, 0xCu);
LABEL_86:
    if (v36) {
      free(v36);
    }
    return 0LL;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v70 = "nw_protocol_masque_get_input_frames";
    int8x16_t v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v56) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v37 = (os_log_s *)__nwlog_obj();
      size_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v70 = "nw_protocol_masque_get_input_frames";
      size_t v39 = "%{public}s called with null masque";
      goto LABEL_85;
    }

    if (!(_BYTE)v56)
    {
      uint64_t v37 = (os_log_s *)__nwlog_obj();
      size_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v70 = "nw_protocol_masque_get_input_frames";
      size_t v39 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_85;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v37 = (os_log_s *)__nwlog_obj();
    size_t v38 = type[0];
    uint64_t v43 = os_log_type_enabled(v37, type[0]);
    if (backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v70 = "nw_protocol_masque_get_input_frames";
        BOOL v71 = 2082;
        __int16 v72 = backtrace_string;
        size_t v42 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_68;
      }

      goto LABEL_69;
    }

    if (!v43) {
      goto LABEL_86;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v70 = "nw_protocol_masque_get_input_frames";
    size_t v39 = "%{public}s called with null masque, no backtrace";
    goto LABEL_85;
  }

  if (*((_DWORD *)handle + 127) != 4) {
    return 0LL;
  }
  output_handler = a1->output_handler;
  *(void *)os_log_type_t type = 0LL;
  id v66 = type;
  v67 = 0x2000000000LL;
  char v68 = ((uint64_t (*)(void))output_handler->callbacks->get_input_frames)();
  if (*((_DWORD *)v66 + 6))
  {
    if ((*(_DWORD *)((_BYTE *)handle + 527) & 0x9000) == 0x1000 || (*(_DWORD *)((_BYTE *)handle + 527) & 0x28) != 0)
    {
      if (nw_protocol_copy_http_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
      }
      uint64_t v11 = (id)nw_protocol_copy_http_definition_http_definition;
      v58[0] = MEMORY[0x1895F87A8];
      v58[1] = 0x40000000LL;
      os_log_type_t v59 = (uint64_t (*)(void *))___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      os_log_type_t v60 = &unk_189BBA880;
      uint64_t v63 = handle;
      nw_endpoint_t v64 = a6;
      __int16 v61 = type;
      BOOL v62 = v11;
      tqh_first = a6->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        size_t v13 = (nw_frame *)*((void *)tqh_first + 4);
        id v14 = v59(v58);
        tqh_first = v13;
      }

      while ((v14 & 1) != 0);
      if (v11) {
        os_release(v11);
      }
    }
  }

  uint64_t v15 = *((unsigned int *)v66 + 6);
  if ((_DWORD)v15)
  {
    uint64_t v16 = (int *)((char *)handle + 527);
    if ((~*(_DWORD *)((char *)handle + 527) & 0x100008) == 0 && *((void *)handle + 54) && !*((void *)handle + 49))
    {
      os_log_type_t v17 = a6->tqh_first;
      LODWORD(v56) = 0;
      os_log_type_t v18 = (unsigned __int8 *)nw_frame_unclaimed_bytes((uint64_t)v17, &v56);
      if (v56 >= 7)
      {
        os_log_type_t v19 = *v18;
        if (v19 >= 0xC0 && (v19 & 0x30) == 0)
        {
          os_log_type_t v21 = v18[5];
          if (v21 <= 0x14)
          {
            BOOL v22 = v21 + 7;
            if (v21 + 7 < v56)
            {
              os_log_type_t v23 = &v18[v21];
              BOOL v24 = v23[6];
              os_log_type_t v25 = v22 + v24;
              if ((v24 - 1) <= 0x13 && v25 < v56)
              {
                *((void *)handle + 49) = dispatch_data_create(v23 + 7, v23[6], 0LL, 0LL);
                if ((*((_BYTE *)handle + 529) & 1) == 0 && gLogDatapath)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
                  }
                  size_t v51 = (os_log_s *)gprivacy_proxyLogObj;
                  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446978;
                    os_log_type_t v70 = "nw_protocol_masque_get_input_frames";
                    BOOL v71 = 2082;
                    __int16 v72 = (char *)handle + 531;
                    uint64_t v73 = 2080;
                    __int16 v74 = " ";
                    uint64_t v75 = 1024;
                    uint64_t v76 = v24;
                    _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sDetected a server CID of length %u",  buf,  0x26u);
                  }
                }

                if (nw_masque_setup_demux((uint64_t)handle, 0))
                {
                  __int16 v35 = *((_DWORD *)handle + 126);
                  if (v35 == 2)
                  {
                    connection_id_capsule = nw_masque_create_connection_id_capsule( *((dispatch_data_s **)handle + 49),  v33,  v34);
                    char v45 = nw_masque_send_metadata((uint64_t)handle, connection_id_capsule, *((void *)handle + 4));
                    unsigned __int8 v46 = *v16;
                    if ((v45 & 1) != 0)
                    {
                      if ((v46 & 0x10000) == 0)
                      {
                        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
                        }
                        os_log_type_t v47 = (os_log_s *)gprivacy_proxyLogObj;
                        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136446722;
                          os_log_type_t v70 = "nw_protocol_masque_get_input_frames";
                          BOOL v71 = 2082;
                          __int16 v72 = (char *)handle + 531;
                          uint64_t v73 = 2080;
                          __int16 v74 = " ";
                          _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sSent REGISTER_TARGET_CID capsule",  buf,  0x20u);
                        }
                      }

                      *v16 |= 0x4000000u;
                      *((_DWORD *)handle + 127) = 3;
                    }

                    else if ((v46 & 0x10000) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
                      }
                      os_log_type_t v50 = (os_log_s *)gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136446466;
                        os_log_type_t v70 = (char *)handle + 531;
                        BOOL v71 = 2080;
                        __int16 v72 = " ";
                        _os_log_impl( &dword_181A5C000,  v50,  OS_LOG_TYPE_ERROR,  "%{public}s%sFailed to send REGISTER_TARGET_CID capsule",  buf,  0x16u);
                      }
                    }

                    if (connection_id_capsule) {
                      os_release((void *)connection_id_capsule);
                    }
                  }

                  else if (v35 == 1)
                  {
                    nw_masque_setup_server_connect((uint64_t)handle);
                  }
                }
              }
            }
          }
        }
      }

      uint64_t v15 = *((unsigned int *)v66 + 6);
    }
  }

  if (a5 > v15)
  {
    os_log_type_t v27 = *((void *)handle + 20);
    if (v27)
    {
      __int128 v56 = 0LL;
      char v57 = (nw_frame **)&v56;
      os_log_type_t v28 = (*(uint64_t (**)(void))(*(void *)(v27 + 24) + 80LL))();
      if (v28 && (*((_BYTE *)handle + 529) & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        BOOL v49 = (os_log_s *)gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v70 = "nw_protocol_masque_get_input_frames";
          BOOL v71 = 2082;
          __int16 v72 = (char *)handle + 531;
          uint64_t v73 = 2080;
          __int16 v74 = " ";
          uint64_t v75 = 1024;
          uint64_t v76 = v28;
          _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReceived %u frames directly from demux",  buf,  0x26u);
        }
      }

      v52[0] = MEMORY[0x1895F87A8];
      v52[1] = 0x40000000LL;
      __int128 v53 = ___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_142;
      __int128 v54 = &__block_descriptor_tmp_143;
      __int128 v55 = handle;
      size_t v29 = v56;
      do
      {
        if (!v29) {
          break;
        }
        size_t v30 = *(void *)(v29 + 32);
        size_t v31 = ((uint64_t (*)(void *))v53)(v52);
        size_t v29 = v30;
      }

      while ((v31 & 1) != 0);
      if (v56)
      {
        *a6->tqh_last = (nw_frame *)v56;
        uint64_t v32 = v57;
        *(void *)(v56 + 40) = a6->tqh_last;
        a6->tqh_last = v32;
      }

      uint64_t v15 = (*((_DWORD *)v66 + 6) + v28);
      *((_DWORD *)v66 + 6) = v15;
    }
  }

  _Block_object_dispose(type, 8);
  return v15;
}

                  size_t v38 = 0LL;
LABEL_70:
                  *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = v38;
                  return;
                }

                __nwlog_obj();
                *(_DWORD *)__s = 136446210;
                *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                char v45 = (char *)_os_log_send_and_compose_impl();
                os_log_type_t type = OS_LOG_TYPE_ERROR;
                size_t v51 = 0;
                if (__nwlog_fault(v45, &type, &v51))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    unsigned __int8 v46 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v47 = type;
                    if (!os_log_type_enabled(v46, type)) {
                      goto LABEL_67;
                    }
                    *(_DWORD *)__s = 136446210;
                    *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                    os_log_type_t v48 = "%{public}s called with null masque";
                    goto LABEL_66;
                  }

                  if (!v51)
                  {
                    unsigned __int8 v46 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v47 = type;
                    if (!os_log_type_enabled(v46, type)) {
                      goto LABEL_67;
                    }
                    *(_DWORD *)__s = 136446210;
                    *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                    os_log_type_t v48 = "%{public}s called with null masque, backtrace limit exceeded";
                    goto LABEL_66;
                  }

                  backtrace_string = (char *)__nw_create_backtrace_string();
                  unsigned __int8 v46 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v47 = type;
                  os_log_type_t v50 = os_log_type_enabled(v46, type);
                  if (backtrace_string)
                  {
                    if (v50)
                    {
                      *(_DWORD *)__s = 136446466;
                      *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                      *(_WORD *)&__s[12] = 2082;
                      *(void *)&__s[14] = backtrace_string;
                      _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s called with null masque, dumping backtrace:%{public}s",  (uint8_t *)__s,  0x16u);
                    }

                    free(backtrace_string);
                    goto LABEL_67;
                  }

                  if (v50)
                  {
                    *(_DWORD *)__s = 136446210;
                    *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                    os_log_type_t v48 = "%{public}s called with null masque, no backtrace";
LABEL_66:
                    _os_log_impl(&dword_181A5C000, v46, v47, v48, (uint8_t *)__s, 0xCu);
                  }
                }

    if (!v10) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  size_t v40 = "nw_http_connect_send_auth_request";
  os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
  v34[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v27, v34, &type))
  {
    if (v34[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      size_t v29 = v34[0];
      if (!os_log_type_enabled(v28, v34[0])) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      size_t v40 = "nw_http_connect_send_auth_request";
      size_t v30 = "%{public}s called with null http_connect";
      goto LABEL_86;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      size_t v29 = v34[0];
      if (!os_log_type_enabled(v28, v34[0])) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      size_t v40 = "nw_http_connect_send_auth_request";
      size_t v30 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_86;
    }

    size_t v31 = (char *)__nw_create_backtrace_string();
    os_log_type_t v28 = (os_log_s *)__nwlog_obj();
    size_t v29 = v34[0];
    uint64_t v32 = os_log_type_enabled(v28, v34[0]);
    if (v31)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        size_t v40 = "nw_http_connect_send_auth_request";
        size_t v41 = 2082;
        size_t v42 = v31;
        _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s called with null http_connect, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v31);
      goto LABEL_87;
    }

    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      size_t v40 = "nw_http_connect_send_auth_request";
      size_t v30 = "%{public}s called with null http_connect, no backtrace";
LABEL_86:
      _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0xCu);
    }
  }

      free(v28);
      if (!v19) {
        return;
      }
LABEL_99:
      free(v19);
      return;
    }

    id v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_98;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    BOOL v22 = "%{public}s called with null http2_transport";
LABEL_97:
    _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
    goto LABEL_98;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      BOOL v22 = "%{public}s called with null other_protocol";
      goto LABEL_97;
    }

    if (!v35)
    {
      id v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      BOOL v22 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_97;
    }

    os_log_type_t v28 = (char *)__nw_create_backtrace_string();
    id v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    size_t v31 = os_log_type_enabled(v20, type);
    if (!v28)
    {
      if (!v31) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      BOOL v22 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_97;
    }

    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v28;
      size_t v30 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_68;
    }

    goto LABEL_69;
  }

  if (gLogDatapath)
  {
    os_log_type_t v23 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      _os_log_impl(&dword_181A5C000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }

  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      connected = (void (*)(void))callbacks->connected;
      if (connected)
      {
        connected();
        goto LABEL_9;
      }
    }
  }

  if (nw_hash_table_count(handle[14], (uint64_t)a2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      os_log_type_t v18 = "%{public}s %{public}s Have remaining input handlers, but no connected callback on the default input handler";
    }

    else if (v35)
    {
      BOOL v24 = (char *)__nw_create_backtrace_string();
      uint64_t v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      os_log_type_t v25 = os_log_type_enabled(v16, type);
      if (v24)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = (char *)handle + 205;
          *(_WORD *)&buf[22] = 2082;
          size_t v38 = v24;
          _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s %{public}s Have remaining input handlers, but no connected callback on the default input handler, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v24);
        goto LABEL_78;
      }

      if (!v25)
      {
LABEL_78:
        if (v15) {
          free(v15);
        }
        goto LABEL_80;
      }

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      os_log_type_t v18 = "%{public}s %{public}s Have remaining input handlers, but no connected callback on the default input handler, no backtrace";
    }

    else
    {
      uint64_t v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      os_log_type_t v18 = "%{public}s %{public}s Have remaining input handlers, but no connected callback on the default input handler,"
            " backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0x16u);
    goto LABEL_78;
  }

        if (v20) {
          free(v20);
        }
        goto LABEL_12;
      }

      __nwlog_obj();
      size_t v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v50 = "nw_proxy_hop_set_fallback_endpoint";
      size_t v30 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v47 = 0;
      if (__nwlog_fault(v30, &type, &v47))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v32 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v50 = "nw_proxy_hop_set_fallback_endpoint";
            _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null hop", buf, 0xCu);
          }
        }

        else if (v47)
        {
          uint64_t v37 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          size_t v38 = type;
          size_t v39 = os_log_type_enabled(v31, type);
          if (v37)
          {
            if (v39)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v50 = "nw_proxy_hop_set_fallback_endpoint";
              size_t v51 = 2082;
              uint64_t v52 = v37;
              _os_log_impl( &dword_181A5C000,  v31,  v38,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v37);
            goto LABEL_80;
          }

          if (v39)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v50 = "nw_proxy_hop_set_fallback_endpoint";
            _os_log_impl(&dword_181A5C000, v31, v38, "%{public}s called with null hop, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v45 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v50 = "nw_proxy_hop_set_fallback_endpoint";
            _os_log_impl( &dword_181A5C000,  v31,  v45,  "%{public}s called with null hop, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

    *(void *)buf = v47;
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
    v209 = (uint64_t)&__block_descriptor_tmp_55_39717;
    *(void *)v210 = v46 + 632;
    v210[8] = 0;
    size_t v51 = *(void *)(v46 + 632);
    do
    {
      if (!v51) {
        break;
      }
      uint64_t v52 = *(void *)(v51 + 32);
      __int128 v53 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      size_t v51 = v52;
    }

    while ((v53 & 1) != 0);
    if ((*(_BYTE *)(v46 + 158) & 1) == 0)
    {
      if (*((_BYTE *)v12 + 1537))
      {
        v131 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
        {
          v132 = *(void *)(v46 + 488);
          v133 = *(_DWORD *)(*(void *)(v46 + 480) + 372LL);
          v134 = *(_DWORD *)(v46 + 860);
          if (v132) {
            LODWORD(v132) = *(_DWORD *)(v132 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v46 + 74;
          *(_WORD *)&buf[22] = 2080;
          v209 = (uint64_t)" ";
          *(_WORD *)v210 = 1024;
          *(_DWORD *)&v210[2] = v133;
          *(_WORD *)&v210[6] = 1024;
          *(_DWORD *)&v210[8] = v134;
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = v132;
          _os_log_impl( &dword_181A5C000,  v131,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removing pending_output_frames",  buf,  0x32u);
        }
      }
    }

    *(void *)&os_log_type_t type = v47;
    *((void *)&type + 1) = 0x40000000LL;
    v205 = (uint64_t (*)(__int128 *))___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
    v206 = &__block_descriptor_tmp_54_39769;
    v207 = v46;
    __int128 v54 = *(void *)(v46 + 648);
    do
    {
      if (!v54) {
        break;
      }
      __int128 v55 = *(void *)(v54 + 32);
      __int128 v56 = v205(&type);
      __int128 v54 = v55;
    }

    while ((v56 & 1) != 0);
    nw_frame_cache_remove_all((uint64_t *)(v46 + 696));
    if ((*(_BYTE *)(v46 + 158) & 1) == 0)
    {
      if (*((_BYTE *)v12 + 1537))
      {
        v135 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
        {
          v136 = *(void *)(v46 + 488);
          v137 = *(_DWORD *)(*(void *)(v46 + 480) + 372LL);
          v138 = *(_DWORD *)(v46 + 860);
          if (v136) {
            LODWORD(v136) = *(_DWORD *)(v136 + 424);
          }
          v139 = *(void *)(v46 + 32);
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v46 + 74;
          *(_WORD *)&buf[22] = 2080;
          v209 = (uint64_t)" ";
          *(_WORD *)v210 = 1024;
          *(_DWORD *)&v210[2] = v137;
          *(_WORD *)&v210[6] = 1024;
          *(_DWORD *)&v210[8] = v138;
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = v136;
          *(_WORD *)&v210[18] = 2048;
          *(void *)&v210[20] = v139;
          _os_log_impl( &dword_181A5C000,  v135,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> calling remove input handler on output handler %p",  buf,  0x3Cu);
        }
      }
    }

    char v57 = *(_DWORD *)(v45 + 336);
    *(_DWORD *)(v45 + 336) = v57 - 1;
    if (v57)
    {
      if ((*(_BYTE *)(v45 + 158) & 1) != 0) {
        goto LABEL_100;
      }
      goto LABEL_99;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v58 = *(unsigned int *)(v45 + 336);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->connections_count";
    *(_WORD *)&buf[22] = 2048;
    v209 = 1LL;
    *(_WORD *)v210 = 2048;
    *(void *)&v210[2] = v58;
    os_log_type_t v59 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v213) = 16;
    v203 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v59, &v213, &v203))
    {
      if (v213 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v60 = (os_log_s *)gLogObj;
        __int16 v61 = v213;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v213)) {
          goto LABEL_96;
        }
        BOOL v62 = *(unsigned int *)(v45 + 336);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v209 = 1LL;
        *(_WORD *)v210 = 2048;
        *(void *)&v210[2] = v62;
        uint64_t v63 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_95:
        _os_log_impl(&dword_181A5C000, v60, v61, v63, buf, 0x2Au);
        goto LABEL_96;
      }

      if (v203 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v60 = (os_log_s *)gLogObj;
        __int16 v61 = v213;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v213)) {
          goto LABEL_96;
        }
        v67 = *(unsigned int *)(v45 + 336);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v209 = 1LL;
        *(_WORD *)v210 = 2048;
        *(void *)&v210[2] = v67;
        uint64_t v63 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
        goto LABEL_95;
      }

      nw_endpoint_t v64 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v60 = (os_log_s *)gLogObj;
      __int16 v61 = v213;
      v65 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v213);
      if (!v64)
      {
        if (!v65) {
          goto LABEL_96;
        }
        char v68 = *(unsigned int *)(v45 + 336);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v209 = 1LL;
        *(_WORD *)v210 = 2048;
        *(void *)&v210[2] = v68;
        uint64_t v63 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
        goto LABEL_95;
      }

      if (v65)
      {
        id v66 = *(unsigned int *)(v45 + 336);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v209 = 1LL;
        *(_WORD *)v210 = 2048;
        *(void *)&v210[2] = v66;
        *(_WORD *)&v210[10] = 2082;
        *(void *)&v210[12] = v64;
        _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
      }

      free(v64);
    }

    if (!v20) {
      goto LABEL_27;
    }
    os_log_type_t v17 = (char *)v20;
    goto LABEL_26;
  }

  os_log_type_t v78 = 0;
  uint64_t v76 = 0u;
  os_log_type_t v77 = 0u;
  __int16 v74 = 0u;
  uint64_t v75 = 0u;
  __int16 v72 = 0u;
  uint64_t v73 = 0u;
  os_log_type_t v70 = 0u;
  BOOL v71 = 0u;
  char v68 = 0u;
  id v69 = 0u;
  id v66 = 0u;
  v67 = 0u;
  nw_endpoint_t v64 = 0u;
  v65 = 0u;
  BOOL v62 = 0u;
  uint64_t v63 = 0u;
  os_log_type_t v60 = 0u;
  __int16 v61 = 0u;
  BOOL v58 = 0u;
  os_log_type_t v59 = 0u;
  __int128 v56 = 0u;
  char v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v53 = 0u;
  memset(v52, 0, sizeof(v52));
  if (!nwsc_get_identifier(v6, a3, v52))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    char v45 = "nw_service_connector_copy_active_outgoing_request";
    unsigned __int8 v46 = 2114;
    os_log_type_t v47 = v7;
    os_log_type_t v48 = 2082;
    BOOL v49 = a3;
    uint64_t v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v42 = 0;
    if (__nwlog_fault(v10, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        size_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          char v45 = "nw_service_connector_copy_active_outgoing_request";
          unsigned __int8 v46 = 2114;
          os_log_type_t v47 = v7;
          os_log_type_t v48 = 2082;
          BOOL v49 = a3;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s",  buf,  0x20u);
        }
      }

      else if (v42)
      {
        size_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        id v14 = type;
        uint64_t v15 = os_log_type_enabled(v11, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446978;
            char v45 = "nw_service_connector_copy_active_outgoing_request";
            unsigned __int8 v46 = 2114;
            os_log_type_t v47 = v7;
            os_log_type_t v48 = 2082;
            BOOL v49 = a3;
            os_log_type_t v50 = 2082;
            size_t v51 = v13;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v13);
          if (!v10) {
            goto LABEL_27;
          }
LABEL_25:
          os_log_type_t v17 = (char *)v10;
LABEL_26:
          free(v17);
          goto LABEL_27;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          char v45 = "nw_service_connector_copy_active_outgoing_request";
          unsigned __int8 v46 = 2114;
          os_log_type_t v47 = v7;
          os_log_type_t v48 = 2082;
          BOOL v49 = a3;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        uint64_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          char v45 = "nw_service_connector_copy_active_outgoing_request";
          unsigned __int8 v46 = 2114;
          os_log_type_t v47 = v7;
          os_log_type_t v48 = 2082;
          BOOL v49 = a3;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v10)
    {
LABEL_27:
      nw_protocol_definition_t v8 = 0LL;
      goto LABEL_28;
    }

    goto LABEL_25;
  }

  nw_protocol_definition_t v8 = nw_dictionary_copy_value(v5[12], (uint64_t)v52);
LABEL_28:

  return v8;
}

    if (!v20) {
      goto LABEL_27;
    }
    os_log_type_t v17 = (char *)v20;
    goto LABEL_26;
  }

  os_log_type_t v78 = 0;
  uint64_t v76 = 0u;
  os_log_type_t v77 = 0u;
  __int16 v74 = 0u;
  uint64_t v75 = 0u;
  __int16 v72 = 0u;
  uint64_t v73 = 0u;
  os_log_type_t v70 = 0u;
  BOOL v71 = 0u;
  char v68 = 0u;
  id v69 = 0u;
  id v66 = 0u;
  v67 = 0u;
  nw_endpoint_t v64 = 0u;
  v65 = 0u;
  BOOL v62 = 0u;
  uint64_t v63 = 0u;
  os_log_type_t v60 = 0u;
  __int16 v61 = 0u;
  BOOL v58 = 0u;
  os_log_type_t v59 = 0u;
  __int128 v56 = 0u;
  char v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v53 = 0u;
  memset(v52, 0, sizeof(v52));
  if (!nwsc_get_identifier(v6, a3, v52))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    char v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
    unsigned __int8 v46 = 2114;
    os_log_type_t v47 = v7;
    os_log_type_t v48 = 2082;
    BOOL v49 = a3;
    uint64_t v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v42 = 0;
    if (__nwlog_fault(v10, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        size_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          char v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          unsigned __int8 v46 = 2114;
          os_log_type_t v47 = v7;
          os_log_type_t v48 = 2082;
          BOOL v49 = a3;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s",  buf,  0x20u);
        }
      }

      else if (v42)
      {
        size_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        id v14 = type;
        uint64_t v15 = os_log_type_enabled(v11, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446978;
            char v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
            unsigned __int8 v46 = 2114;
            os_log_type_t v47 = v7;
            os_log_type_t v48 = 2082;
            BOOL v49 = a3;
            os_log_type_t v50 = 2082;
            size_t v51 = v13;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v13);
          if (!v10) {
            goto LABEL_27;
          }
LABEL_25:
          os_log_type_t v17 = (char *)v10;
LABEL_26:
          free(v17);
          goto LABEL_27;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          char v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          unsigned __int8 v46 = 2114;
          os_log_type_t v47 = v7;
          os_log_type_t v48 = 2082;
          BOOL v49 = a3;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        uint64_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          char v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          unsigned __int8 v46 = 2114;
          os_log_type_t v47 = v7;
          os_log_type_t v48 = 2082;
          BOOL v49 = a3;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v10)
    {
LABEL_27:
      nw_protocol_definition_t v8 = 0LL;
      goto LABEL_28;
    }

    goto LABEL_25;
  }

  nw_protocol_definition_t v8 = nw_dictionary_copy_value(v5[11], (uint64_t)v52);
LABEL_28:

  return v8;
}

        goto LABEL_70;
      }

      if (!v88)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v28 = (os_log_s *)(id)gLogObj;
        unsigned __int8 v46 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v91 = "nw_service_connector_verify_read_succeeded";
          id v92 = 2082;
          os_log_type_t v93 = (void *)v26;
          v94 = 2082;
          *(void *)v95 = a8;
          _os_log_impl( &dword_181A5C000,  v28,  v46,  "%{public}s %{public}s %{public}s read got no error no data but not complete failed, backtrace limit exceeded",  buf,  0x20u);
        }

        goto LABEL_69;
      }

      os_log_type_t v33 = __nw_create_backtrace_string();
      if (!v33)
      {
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v91 = "nw_service_connector_verify_read_succeeded";
          id v92 = 2082;
          os_log_type_t v93 = (void *)v26;
          v94 = 2082;
          *(void *)v95 = a8;
          _os_log_impl( &dword_181A5C000,  v28,  v47,  "%{public}s %{public}s %{public}s read got no error no data but not complete failed, no backtrace",  buf,  0x20u);
        }

        goto LABEL_69;
      }

      uint64_t v34 = (char *)v33;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v35 = (os_log_s *)(id)gLogObj;
      int8x16_t v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446978;
        __int16 v91 = "nw_service_connector_verify_read_succeeded";
        id v92 = 2082;
        os_log_type_t v93 = (void *)v26;
        v94 = 2082;
        *(void *)v95 = a8;
        *(_WORD *)&v95[8] = 2082;
        *(void *)&v95[10] = v34;
        _os_log_impl( &dword_181A5C000,  v35,  v36,  "%{public}s %{public}s %{public}s read got no error no data but not complete failed, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v34);
      if (v27) {
LABEL_71:
      }
        free(v27);
    }

    if (!v20) {
      goto LABEL_27;
    }
    os_log_type_t v17 = (char *)v20;
    goto LABEL_26;
  }

  os_log_type_t v78 = 0;
  uint64_t v76 = 0u;
  os_log_type_t v77 = 0u;
  __int16 v74 = 0u;
  uint64_t v75 = 0u;
  __int16 v72 = 0u;
  uint64_t v73 = 0u;
  os_log_type_t v70 = 0u;
  BOOL v71 = 0u;
  char v68 = 0u;
  id v69 = 0u;
  id v66 = 0u;
  v67 = 0u;
  nw_endpoint_t v64 = 0u;
  v65 = 0u;
  BOOL v62 = 0u;
  uint64_t v63 = 0u;
  os_log_type_t v60 = 0u;
  __int16 v61 = 0u;
  BOOL v58 = 0u;
  os_log_type_t v59 = 0u;
  __int128 v56 = 0u;
  char v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v53 = 0u;
  memset(v52, 0, sizeof(v52));
  if (!nwsc_get_identifier(v6, a3, v52))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    char v45 = "nw_service_connector_copy_pending_incoming_request";
    unsigned __int8 v46 = 2114;
    os_log_type_t v47 = v7;
    os_log_type_t v48 = 2082;
    BOOL v49 = a3;
    uint64_t v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v42 = 0;
    if (__nwlog_fault(v10, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        size_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          char v45 = "nw_service_connector_copy_pending_incoming_request";
          unsigned __int8 v46 = 2114;
          os_log_type_t v47 = v7;
          os_log_type_t v48 = 2082;
          BOOL v49 = a3;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s",  buf,  0x20u);
        }
      }

      else if (v42)
      {
        size_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        id v14 = type;
        uint64_t v15 = os_log_type_enabled(v11, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446978;
            char v45 = "nw_service_connector_copy_pending_incoming_request";
            unsigned __int8 v46 = 2114;
            os_log_type_t v47 = v7;
            os_log_type_t v48 = 2082;
            BOOL v49 = a3;
            os_log_type_t v50 = 2082;
            size_t v51 = v13;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v13);
          if (!v10) {
            goto LABEL_27;
          }
LABEL_25:
          os_log_type_t v17 = (char *)v10;
LABEL_26:
          free(v17);
          goto LABEL_27;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          char v45 = "nw_service_connector_copy_pending_incoming_request";
          unsigned __int8 v46 = 2114;
          os_log_type_t v47 = v7;
          os_log_type_t v48 = 2082;
          BOOL v49 = a3;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        uint64_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          char v45 = "nw_service_connector_copy_pending_incoming_request";
          unsigned __int8 v46 = 2114;
          os_log_type_t v47 = v7;
          os_log_type_t v48 = 2082;
          BOOL v49 = a3;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v10)
    {
LABEL_27:
      nw_protocol_definition_t v8 = 0LL;
      goto LABEL_28;
    }

    goto LABEL_25;
  }

  nw_protocol_definition_t v8 = nw_dictionary_copy_value(v5[10], (uint64_t)v52);
LABEL_28:

  return v8;
}

    check_certs_and_store_entry(v74, v12, v73);

    uint64_t v11 = v68;
  }

LABEL_72:
}

        goto LABEL_70;
      }

      if (!v41)
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl( &dword_181A5C000,  v16,  v33,  "%{public}s called with null application, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_69;
      }

      BOOL v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      os_log_type_t v28 = os_log_type_enabled(v16, type);
      if (!v24)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_181A5C000, v16, v27, "%{public}s called with null application, no backtrace", buf, 0xCu);
        }

        goto LABEL_69;
      }

      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        char v44 = "nw_quic_is_above_failure_threshold";
        char v45 = 2082;
        *(void *)unsigned __int8 v46 = v24;
        _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null application, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_46;
    }
  }

  else
  {
    __nwlog_obj();
    id v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_quic_is_above_failure_threshold";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v41 = 0;
    if (__nwlog_fault(v15, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null association", buf, 0xCu);
        }

        goto LABEL_69;
      }

      if (!v41)
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v32 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl( &dword_181A5C000,  v16,  v32,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_69;
      }

      BOOL v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (!v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_181A5C000, v16, v25, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }

        goto LABEL_69;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        char v44 = "nw_quic_is_above_failure_threshold";
        char v45 = 2082;
        *(void *)unsigned __int8 v46 = v24;
        _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    BOOL v24 = (uint8_t *)v40;
    os_log_type_t v25 = v28;
    BOOL v26 = v29;
    os_log_type_t v27 = 12;
    goto LABEL_40;
  }

  handle = (unsigned __int8 *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    LODWORD(v40[0]) = 136446210;
    *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    __str[0] = 16;
    out[0] = 0;
    if (__str[0] == 17)
    {
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      size_t v29 = __str[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)__str[0])) {
        goto LABEL_41;
      }
      LODWORD(v40[0]) = 136446210;
      *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      id v14 = "%{public}s called with null recorder";
      goto LABEL_69;
    }

    if (out[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      size_t v29 = __str[0];
      size_t v31 = os_log_type_enabled(v28, (os_log_type_t)__str[0]);
      if (backtrace_string)
      {
        if (!v31) {
          goto LABEL_24;
        }
        LODWORD(v40[0]) = 136446466;
        *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
        WORD6(v40[0]) = 2082;
        *(void *)((char *)v40 + 14) = backtrace_string;
        os_log_type_t v17 = "%{public}s called with null recorder, dumping backtrace:%{public}s";
LABEL_60:
        os_log_type_t v18 = (uint8_t *)v40;
        os_log_type_t v19 = v28;
        id v20 = v29;
        os_log_type_t v21 = 22;
        goto LABEL_23;
      }

      if (!v31) {
        goto LABEL_41;
      }
      LODWORD(v40[0]) = 136446210;
      *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      id v14 = "%{public}s called with null recorder, no backtrace";
    }

    else
    {
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      size_t v29 = __str[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)__str[0])) {
        goto LABEL_41;
      }
      LODWORD(v40[0]) = 136446210;
      *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      id v14 = "%{public}s called with null recorder, backtrace limit exceeded";
    }

    goto LABEL_69;
  }

  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
  *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
  if (!a2->output_handler) {
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
  }
  uint64_t v4 = mach_continuous_time();
  if (v4 <= 1) {
    id v5 = 1LL;
  }
  else {
    id v5 = v4;
  }
  *((void *)handle + _Block_object_dispose(va, 8) = v5;
  uuid_unparse_upper(handle, out);
  snprintf(__str, 0x80uLL, "/var/tmp/nw-%s-%s.pcap", a2->identifier->name, out);
  __str[127] = 0;
  memset(v40, 0, sizeof(v40));
  delayInitStub = pcap_create_delayInitStub(0.0);
  *((void *)handle + 9) = delayInitStub;
  if (!delayInitStub)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    __int16 v35 = "nw_protocol_recorder_add_input_handler";
    int8x16_t v36 = 2082;
    uint64_t v37 = (char *)v40;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v12 = (os_log_s *)gLogObj;
      size_t v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v35 = "nw_protocol_recorder_add_input_handler";
      int8x16_t v36 = 2082;
      uint64_t v37 = (char *)v40;
      id v14 = "%{public}s pcap_create: %{public}s failed";
LABEL_39:
      BOOL v24 = buf;
      os_log_type_t v25 = v12;
      BOOL v26 = v13;
      os_log_type_t v27 = 22;
LABEL_40:
      _os_log_impl(&dword_181A5C000, v25, v26, v14, v24, v27);
      goto LABEL_41;
    }

    if (!v32)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v12 = (os_log_s *)gLogObj;
      size_t v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v35 = "nw_protocol_recorder_add_input_handler";
      int8x16_t v36 = 2082;
      uint64_t v37 = (char *)v40;
      id v14 = "%{public}s pcap_create: %{public}s failed, backtrace limit exceeded";
      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v12 = (os_log_s *)gLogObj;
    size_t v13 = type;
    uint64_t v16 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v16) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v35 = "nw_protocol_recorder_add_input_handler";
      int8x16_t v36 = 2082;
      uint64_t v37 = (char *)v40;
      id v14 = "%{public}s pcap_create: %{public}s failed, no backtrace";
      goto LABEL_39;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446722;
      __int16 v35 = "nw_protocol_recorder_add_input_handler";
      int8x16_t v36 = 2082;
      uint64_t v37 = (char *)v40;
      size_t v38 = 2082;
      size_t v39 = backtrace_string;
      os_log_type_t v17 = "%{public}s pcap_create: %{public}s failed, dumping backtrace:%{public}s";
      os_log_type_t v18 = buf;
      os_log_type_t v19 = v12;
      id v20 = v13;
      os_log_type_t v21 = 32;
LABEL_23:
      _os_log_impl(&dword_181A5C000, v19, v20, v17, v18, v21);
    }

    if (v29) {
      free(v29);
    }
    nw_endpoint_type_t v6 = 0LL;
    goto LABEL_24;
  }

  if (a3 <= 3)
  {
    __nwlog_obj();
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "nw_serializable_tls_deserialize_options";
    size_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        size_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options))",  buf,  0xCu);
        }

    return;
  }

  if ((v7 & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v16 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v28 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      size_t v29 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      size_t v30 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      size_t v31 = nw_endpoint_get_logging_description(v30);
      uint64_t v32 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      os_log_type_t v33 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      uint64_t v34 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136447746;
      v67 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]_block_invoke";
      char v68 = 2082;
      id v69 = (void *)v28;
      os_log_type_t v70 = 2082;
      BOOL v71 = v29;
      __int16 v72 = 2082;
      uint64_t v73 = v31;
      __int16 v74 = 2082;
      uint64_t v75 = v32;
      uint64_t v76 = 2082;
      os_log_type_t v77 = v33;
      os_log_type_t v78 = 2114;
      v79 = v34;
      _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent does not have better pat h, not resetting",  buf,  0x48u);
    }

    if (!v24) {
      return 0LL;
    }
    os_log_type_t v23 = (char *)v24;
    goto LABEL_52;
  }

  id v3 = *(void *)(a2 + 56);
  if (v3)
  {
    BOOL result = *(void *)(v3 + 32);
    if (result) {
      return result;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v5 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)buf = 136446978;
    os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
    uint64_t v34 = 2082;
    __int16 v35 = (char *)(a1 + 390);
    int8x16_t v36 = 2080;
    uint64_t v37 = " ";
    size_t v38 = 1024;
    size_t v39 = v5;
    nw_endpoint_type_t v6 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v30 = 0;
    if (__nwlog_fault(v6, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        nw_txt_record_t v7 = (os_log_s *)gconnectionLogObj;
        nw_protocol_definition_t v8 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          unint64_t v9 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
          uint64_t v34 = 2082;
          __int16 v35 = (char *)(a1 + 390);
          int8x16_t v36 = 2080;
          uint64_t v37 = " ";
          size_t v38 = 1024;
          size_t v39 = v9;
          uint64_t v10 = "%{public}s %{public}s%s<i%u> stream not found";
LABEL_49:
          _os_log_impl(&dword_181A5C000, v7, v8, v10, buf, 0x26u);
        }
      }

      else if (v30)
      {
        uint64_t v16 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        nw_txt_record_t v7 = (os_log_s *)gconnectionLogObj;
        nw_protocol_definition_t v8 = type;
        os_log_type_t v17 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (!v16)
        {
          if (!v17) {
            goto LABEL_50;
          }
          BOOL v22 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
          uint64_t v34 = 2082;
          __int16 v35 = (char *)(a1 + 390);
          int8x16_t v36 = 2080;
          uint64_t v37 = " ";
          size_t v38 = 1024;
          size_t v39 = v22;
          uint64_t v10 = "%{public}s %{public}s%s<i%u> stream not found, no backtrace";
          goto LABEL_49;
        }

        if (v17)
        {
          os_log_type_t v18 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136447234;
          os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
          uint64_t v34 = 2082;
          __int16 v35 = (char *)(a1 + 390);
          int8x16_t v36 = 2080;
          uint64_t v37 = " ";
          size_t v38 = 1024;
          size_t v39 = v18;
          size_t v40 = 2082;
          size_t v41 = v16;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s %{public}s%s<i%u> stream not found, dumping backtrace:%{public}s",  buf,  0x30u);
        }

        free(v16);
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        nw_txt_record_t v7 = (os_log_s *)gconnectionLogObj;
        nw_protocol_definition_t v8 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          os_log_type_t v21 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
          uint64_t v34 = 2082;
          __int16 v35 = (char *)(a1 + 390);
          int8x16_t v36 = 2080;
          uint64_t v37 = " ";
          size_t v38 = 1024;
          size_t v39 = v21;
          uint64_t v10 = "%{public}s %{public}s%s<i%u> stream not found, backtrace limit exceeded";
          goto LABEL_49;
        }
      }
    }
  }

  else
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v11 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)buf = 136446978;
    os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
    uint64_t v34 = 2082;
    __int16 v35 = (char *)(a1 + 390);
    int8x16_t v36 = 2080;
    uint64_t v37 = " ";
    size_t v38 = 1024;
    size_t v39 = v11;
    nw_endpoint_type_t v6 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    size_t v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      nw_txt_record_t v7 = (os_log_s *)gconnectionLogObj;
      nw_protocol_definition_t v8 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        size_t v12 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
        uint64_t v34 = 2082;
        __int16 v35 = (char *)(a1 + 390);
        int8x16_t v36 = 2080;
        uint64_t v37 = " ";
        size_t v38 = 1024;
        size_t v39 = v12;
        uint64_t v10 = "%{public}s %{public}s%s<i%u> node not found";
        goto LABEL_49;
      }
    }

    else
    {
      if (v30)
      {
        size_t v13 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        nw_txt_record_t v7 = (os_log_s *)gconnectionLogObj;
        nw_protocol_definition_t v8 = type;
        id v14 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v13)
        {
          if (v14)
          {
            uint64_t v15 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136447234;
            os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
            uint64_t v34 = 2082;
            __int16 v35 = (char *)(a1 + 390);
            int8x16_t v36 = 2080;
            uint64_t v37 = " ";
            size_t v38 = 1024;
            size_t v39 = v15;
            size_t v40 = 2082;
            size_t v41 = v13;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s %{public}s%s<i%u> node not found, dumping backtrace:%{public}s",  buf,  0x30u);
          }

          free(v13);
          if (!v6) {
            return 0LL;
          }
          goto LABEL_51;
        }

        if (!v14) {
          goto LABEL_50;
        }
        id v20 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
        uint64_t v34 = 2082;
        __int16 v35 = (char *)(a1 + 390);
        int8x16_t v36 = 2080;
        uint64_t v37 = " ";
        size_t v38 = 1024;
        size_t v39 = v20;
        uint64_t v10 = "%{public}s %{public}s%s<i%u> node not found, no backtrace";
        goto LABEL_49;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      nw_txt_record_t v7 = (os_log_s *)gconnectionLogObj;
      nw_protocol_definition_t v8 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        os_log_type_t v19 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v33 = "nw_http2_get_stream_from_protocol";
        uint64_t v34 = 2082;
        __int16 v35 = (char *)(a1 + 390);
        int8x16_t v36 = 2080;
        uint64_t v37 = " ";
        size_t v38 = 1024;
        size_t v39 = v19;
        uint64_t v10 = "%{public}s %{public}s%s<i%u> node not found, backtrace limit exceeded";
        goto LABEL_49;
      }
    }
  }

    goto LABEL_70;
  }

  if (!v7)
  {
    __nwlog_obj();
    BOOL v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v63[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type[0];
      if (os_log_type_enabled(v22, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_181A5C000, v22, v25, "%{public}s called with null handler", buf, 0xCu);
      }

      goto LABEL_69;
    }

    if (!v63[0])
    {
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v37 = type[0];
      if (os_log_type_enabled(v22, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl( &dword_181A5C000,  v22,  v37,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_69;
    }

    size_t v31 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v32 = type[0];
    os_log_type_t v33 = os_log_type_enabled(v22, type[0]);
    if (!v31)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_181A5C000, v22, v32, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }

      goto LABEL_69;
    }

    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v31;
      _os_log_impl( &dword_181A5C000,  v22,  v32,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_44;
  }

  if (!v6)
  {
    __nwlog_obj();
    BOOL v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v63[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type[0];
      if (os_log_type_enabled(v22, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_181A5C000, v22, v27, "%{public}s called with null queue", buf, 0xCu);
      }

      goto LABEL_69;
    }

    if (!v63[0])
    {
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v38 = type[0];
      if (os_log_type_enabled(v22, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl( &dword_181A5C000,  v22,  v38,  "%{public}s called with null queue, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_69;
    }

    size_t v31 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v34 = type[0];
    __int16 v35 = os_log_type_enabled(v22, type[0]);
    if (!v31)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_181A5C000, v22, v34, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }

      goto LABEL_69;
    }

    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v31;
      _os_log_impl( &dword_181A5C000,  v22,  v34,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      free(v42);
      goto LABEL_70;
    }

    v73.receiver = v6;
    v73.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_masque_server;
    uint64_t v10 = objc_msgSendSuper2(&v73, sel_init);
    uint64_t v11 = v10;
    if (v10)
    {
      do
        size_t v12 = __ldaxr(&s_last_server_id);
      while (__stlxr(v12 + 1, &s_last_server_id));
      v10[1] = v12;
      size_t v13 = nw_array_create();
      id v14 = (void *)*((void *)v11 + 9);
      *((void *)v11 + 9) = v13;

      objc_storeStrong((id *)v11 + 5, a3);
      objc_storeStrong((id *)v11 + 16, a2);
      strcpy(label, "com.apple.networking.nw_masque_server");
      dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      uint64_t v15 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = dispatch_queue_create(label, v15);
      os_log_type_t v17 = (void *)*((void *)v11 + 3);
      *((void *)v11 + 3) = v16;

      if (*((void *)v11 + 3))
      {
        if (!v7
          || (os_log_type_t v18 = v7,
              os_log_type_t v19 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v18,  0,  0),  v18,  v20 = (void *)*((void *)v11 + 4),  *((void *)v11 + 4) = v19,  v20,  *((void *)v11 + 4)))
        {
          os_log_type_t v21 = v11;
LABEL_46:

          goto LABEL_47;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v30 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        uint64_t v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
        os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        BOOL v71 = 0;
        if (__nwlog_fault(v23, &type, &v71))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v24 = (os_log_s *)(id)gLogObj;
            size_t v31 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              _os_log_impl(&dword_181A5C000, v24, v31, "%{public}s nw_parameters_copy failed", buf, 0xCu);
            }
          }

          else if (v71)
          {
            uint64_t v32 = __nw_create_backtrace_string();
            if (v32)
            {
              os_log_type_t v33 = (char *)v32;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v34 = (os_log_s *)(id)gLogObj;
              __int16 v35 = type;
              if (os_log_type_enabled(v34, type))
              {
                *(_DWORD *)buf = 136446466;
                uint64_t v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
                uint64_t v76 = 2082;
                os_log_type_t v77 = v33;
                _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s nw_parameters_copy failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v33);
              if (!v23) {
                goto LABEL_45;
              }
              goto LABEL_44;
            }

            __nwlog_obj();
            BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            size_t v38 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              _os_log_impl(&dword_181A5C000, v24, v38, "%{public}s nw_parameters_copy failed, no backtrace", buf, 0xCu);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v24 = (os_log_s *)(id)gLogObj;
            uint64_t v37 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              _os_log_impl( &dword_181A5C000,  v24,  v37,  "%{public}s nw_parameters_copy failed, backtrace limit exceeded",  buf,  0xCu);
            }
          }

          goto LABEL_42;
        }

    if (!v36) {
      return 0LL;
    }
LABEL_70:
    free(v36);
    return 0LL;
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)char v68 = 136446466;
    id v69 = "nw_interface_create_from_necp";
    os_log_type_t v70 = 1024;
    LODWORD(v71[0]) = 2;
    _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s NECP_CLIENT_ACTION_COPY_INTERFACE %{darwin.errno}d",  v68,  0x12u);
  }

void sub_181ACD12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_txt_record_t nw_endpoint_copy_txt_record(nw_endpoint_t endpoint)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = endpoint;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = (nw_txt_record *)v1[23];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_endpoint_copy_txt_record";
  nw_endpoint_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_txt_record_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_endpoint_copy_txt_record";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_txt_record_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_endpoint_copy_txt_record";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_endpoint_copy_txt_record";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_txt_record_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_endpoint_copy_txt_record";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_endpoint_get_device_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 13);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_endpoint_get_device_id";
  nw_endpoint_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_txt_record_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_endpoint_get_device_id";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_txt_record_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_endpoint_get_device_id";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_endpoint_get_device_id";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_txt_record_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_endpoint_get_device_id";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_iterate_parent_ids(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = (uint64_t (**)(void, void))v4;
  if (!v3)
  {
    __nwlog_obj();
    nw_txt_record_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v26 = "nw_parameters_iterate_parent_ids";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_parameters_iterate_parent_ids";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v26 = "nw_parameters_iterate_parent_ids";
          __int16 v27 = 2082;
          os_log_type_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_42:
        free(v8);
        goto LABEL_7;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_parameters_iterate_parent_ids";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_parameters_iterate_parent_ids";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181ACDBF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_evaluator_add_endpoint_to_necp_message( void *a1, int a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v321 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v7 = a1;
  os_log_type_t v8 = v7;
  if (!a3)
  {
    v215 = v7;
    __nwlog_obj();
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
    v236 = (char *)_os_log_send_and_compose_impl();

    v304[0] = OS_LOG_TYPE_ERROR;
    v312[0] = 0;
    if (v304[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v238 = v304[0];
      if (os_log_type_enabled(v237, v304[0]))
      {
        *(_DWORD *)buf = 136446210;
        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
        _os_log_impl(&dword_181A5C000, v237, v238, "%{public}s called with null cursor", buf, 0xCu);
      }

      goto LABEL_545;
    }

    if (!v312[0])
    {
      __nwlog_obj();
      v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v259 = v304[0];
      if (os_log_type_enabled(v237, v304[0]))
      {
        *(_DWORD *)buf = 136446210;
        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
        _os_log_impl( &dword_181A5C000,  v237,  v259,  "%{public}s called with null cursor, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_545;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v244 = v304[0];
    BOOL v245 = os_log_type_enabled(v237, v304[0]);
    if (!backtrace_string)
    {
      if (v245)
      {
        *(_DWORD *)buf = 136446210;
        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
        _os_log_impl(&dword_181A5C000, v237, v244, "%{public}s called with null cursor, no backtrace", buf, 0xCu);
      }

      goto LABEL_545;
    }

    if (v245)
    {
      *(_DWORD *)buf = 136446466;
      v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
      __int16 v315 = 2082;
      *(void *)v316 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v237,  v244,  "%{public}s called with null cursor, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_489;
  }

  if (!a4)
  {
    v215 = v7;
    __nwlog_obj();
    v239 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
    v236 = (char *)_os_log_send_and_compose_impl();

    v304[0] = OS_LOG_TYPE_ERROR;
    v312[0] = 0;
    if (v304[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v240 = v304[0];
      if (os_log_type_enabled(v237, v304[0]))
      {
        *(_DWORD *)buf = 136446210;
        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
        _os_log_impl(&dword_181A5C000, v237, v240, "%{public}s called with null beyond", buf, 0xCu);
      }

      goto LABEL_545;
    }

    if (!v312[0])
    {
      __nwlog_obj();
      v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v260 = v304[0];
      if (os_log_type_enabled(v237, v304[0]))
      {
        *(_DWORD *)buf = 136446210;
        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
        _os_log_impl( &dword_181A5C000,  v237,  v260,  "%{public}s called with null beyond, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_545;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v246 = v304[0];
    BOOL v247 = os_log_type_enabled(v237, v304[0]);
    if (!backtrace_string)
    {
      if (v247)
      {
        *(_DWORD *)buf = 136446210;
        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
        _os_log_impl(&dword_181A5C000, v237, v246, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
      }

      goto LABEL_545;
    }

    if (v247)
    {
      *(_DWORD *)buf = 136446466;
      v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
      __int16 v315 = 2082;
      *(void *)v316 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v237,  v246,  "%{public}s called with null beyond, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_489:
    free(backtrace_string);
    if (!v236) {
      goto LABEL_548;
    }
    goto LABEL_547;
  }

  unint64_t v297 = a4;
  if (a3 >= a4)
  {
    v215 = v7;
    __nwlog_obj();
    v241 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
    __int16 v315 = 2048;
    *(void *)v316 = a3;
    *(_WORD *)&v316[8] = 2048;
    *(void *)&v316[10] = a4;
    v236 = (char *)_os_log_send_and_compose_impl();

    v304[0] = OS_LOG_TYPE_ERROR;
    v312[0] = 0;
    if (v304[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v242 = v304[0];
      if (os_log_type_enabled(v237, v304[0]))
      {
        *(_DWORD *)buf = 136446722;
        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
        __int16 v315 = 2048;
        *(void *)v316 = a3;
        *(_WORD *)&v316[8] = 2048;
        *(void *)&v316[10] = v297;
        _os_log_impl(&dword_181A5C000, v237, v242, "%{public}s Invalid cursor %p >= beyond %p", buf, 0x20u);
      }
    }

    else if (v312[0])
    {
      v248 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v249 = v304[0];
      BOOL v250 = os_log_type_enabled(v237, v304[0]);
      if (v248)
      {
        if (v250)
        {
          *(_DWORD *)buf = 136446978;
          v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
          __int16 v315 = 2048;
          *(void *)v316 = a3;
          *(_WORD *)&v316[8] = 2048;
          *(void *)&v316[10] = v297;
          *(_WORD *)&v316[18] = 2082;
          *(void *)v317 = v248;
          _os_log_impl( &dword_181A5C000,  v237,  v249,  "%{public}s Invalid cursor %p >= beyond %p, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v248);
LABEL_546:
        if (!v236)
        {
LABEL_548:
          a3 = 0LL;
LABEL_418:

          return a3;
        }

LABEL_547:
        free(v236);
        goto LABEL_548;
      }

      if (v250)
      {
        *(_DWORD *)buf = 136446722;
        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
        __int16 v315 = 2048;
        *(void *)v316 = a3;
        *(_WORD *)&v316[8] = 2048;
        *(void *)&v316[10] = v297;
        _os_log_impl( &dword_181A5C000,  v237,  v249,  "%{public}s Invalid cursor %p >= beyond %p, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      __nwlog_obj();
      v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v261 = v304[0];
      if (os_log_type_enabled(v237, v304[0]))
      {
        *(_DWORD *)buf = 136446722;
        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
        __int16 v315 = 2048;
        *(void *)v316 = a3;
        *(_WORD *)&v316[8] = 2048;
        *(void *)&v316[10] = v297;
        _os_log_impl( &dword_181A5C000,  v237,  v261,  "%{public}s Invalid cursor %p >= beyond %p, backtrace limit exceeded",  buf,  0x20u);
      }
    }

                    if (v260) {
                      free(v260);
                    }
                    size_t v122 = v274;
                    if (!a1->default_input_handler) {
                      goto LABEL_261;
                    }
                    goto LABEL_262;
                  }

                  *(void *)os_log_type_t type = 0LL;
                  *(void *)&type[8] = 0LL;
                  nw_protocol_get_flow_id(a2, type);
                  if (v119[405] < 0) {
                    goto LABEL_330;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  BOOL v134 = (id)gLogObj;
                  os_log_type_t v135 = v119 + 407;
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v119 + 407;
                  os_log_type_t v281 = 2080;
                  os_log_type_t v282 = (nw_protocol *)" ";
                  v283 = 1042;
                  *(_DWORD *)os_log_type_t v284 = 16;
                  *(_WORD *)&v284[4] = 2098;
                  *(void *)&v284[6] = type;
                  BOOL v130 = (char *)_os_log_send_and_compose_impl();

                  LOBYTE(v279) = 16;
                  v276 = 0;
                  if (!__nwlog_fault(v130, &v279, &v276))
                  {
LABEL_328:
                    if (v130) {
LABEL_329:
                    }
                      free(v130);
LABEL_330:
                    BOOL v24 = 0LL;
LABEL_474:

                    goto LABEL_475;
                  }

                  if (v279 == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v131 = (os_log_s *)(id)gLogObj;
                    BOOL v136 = v279;
                    if (os_log_type_enabled(v131, (os_log_type_t)v279))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v135;
                      os_log_type_t v281 = 2080;
                      os_log_type_t v282 = (nw_protocol *)" ";
                      v283 = 1042;
                      *(_DWORD *)os_log_type_t v284 = 16;
                      *(_WORD *)&v284[4] = 2098;
                      *(void *)&v284[6] = type;
                      _os_log_impl( &dword_181A5C000,  v131,  v136,  "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P",  buf,  0x30u);
                    }
                  }

                  else if (v276)
                  {
                    os_log_type_t v159 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    os_log_type_t v131 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    BOOL v160 = v279;
                    os_log_type_t v161 = os_log_type_enabled(v131, (os_log_type_t)v279);
                    if (v159)
                    {
                      if (v161)
                      {
                        *(_DWORD *)buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v135;
                        os_log_type_t v281 = 2080;
                        os_log_type_t v282 = (nw_protocol *)" ";
                        v283 = 1042;
                        *(_DWORD *)os_log_type_t v284 = 16;
                        *(_WORD *)&v284[4] = 2098;
                        *(void *)&v284[6] = type;
                        *(_WORD *)&v284[14] = 2082;
                        *(void *)&v284[16] = v159;
                        _os_log_impl( &dword_181A5C000,  v131,  v160,  "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public ,uuid_t}.16P, dumping backtrace:%{public}s",  buf,  0x3Au);
                      }

                      free(v159);
                      if (!v130) {
                        goto LABEL_330;
                      }
                      goto LABEL_329;
                    }

                    if (v161)
                    {
                      *(_DWORD *)buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v135;
                      os_log_type_t v281 = 2080;
                      os_log_type_t v282 = (nw_protocol *)" ";
                      v283 = 1042;
                      *(_DWORD *)os_log_type_t v284 = 16;
                      *(_WORD *)&v284[4] = 2098;
                      *(void *)&v284[6] = type;
                      _os_log_impl( &dword_181A5C000,  v131,  v160,  "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,u uid_t}.16P, no backtrace",  buf,  0x30u);
                    }
                  }

                  else
                  {
                    __nwlog_obj();
                    os_log_type_t v131 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    unint64_t v179 = v279;
                    if (os_log_type_enabled(v131, (os_log_type_t)v279))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v135;
                      os_log_type_t v281 = 2080;
                      os_log_type_t v282 = (nw_protocol *)" ";
                      v283 = 1042;
                      *(_DWORD *)os_log_type_t v284 = 16;
                      *(_WORD *)&v284[4] = 2098;
                      *(void *)&v284[6] = type;
                      _os_log_impl( &dword_181A5C000,  v131,  v179,  "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,u uid_t}.16P, backtrace limit exceeded",  buf,  0x30u);
                    }
                  }

                    v325 = *(unsigned int *)(v11 + 336) + 1LL;
                    v326 = v325 << 31 >> 31;
                    *(_DWORD *)(v11 + 336) = v325;
                    if (v326 == v325 && (v326 & 0x8000000000000000LL) == 0) {
                      goto LABEL_768;
                    }
                    __nwlog_obj();
                    v327 = *(unsigned int *)(v11 + 336);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v1051 = 1LL;
                    *(_WORD *)v1052 = 2048;
                    *(void *)&v1052[2] = v327;
                    v328 = (char *)_os_log_send_and_compose_impl();
                    v1065[0] = 16;
                    aBlock[0] = 0;
                    if (__nwlog_fault(v328, v1065, aBlock))
                    {
                      if (v1065[0] == 17)
                      {
                        v329 = (os_log_s *)__nwlog_obj();
                        v330 = v1065[0];
                        if (os_log_type_enabled(v329, (os_log_type_t)v1065[0]))
                        {
                          v331 = *(unsigned int *)(v1042 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v331;
                          v332 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_764:
                          _os_log_impl(&dword_181A5C000, v329, v330, v332, buf, 0x2Au);
                        }
                      }

                      else if (aBlock[0])
                      {
                        v374 = (char *)__nw_create_backtrace_string();
                        v329 = (os_log_s *)__nwlog_obj();
                        v330 = v1065[0];
                        v375 = os_log_type_enabled(v329, (os_log_type_t)v1065[0]);
                        if (v374)
                        {
                          if (v375)
                          {
                            v376 = *(unsigned int *)(v1042 + 336);
                            *(_DWORD *)buf = 136447234;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = "http1->connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            v1051 = 1LL;
                            *(_WORD *)v1052 = 2048;
                            *(void *)&v1052[2] = v376;
                            *(_WORD *)&v1052[10] = 2082;
                            *(void *)&v1052[12] = v374;
                            _os_log_impl( &dword_181A5C000,  v329,  v330,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                          }

                          free(v374);
                          v304 = v1041;
                          goto LABEL_765;
                        }

                        v304 = v1041;
                        if (v375)
                        {
                          v454 = *(unsigned int *)(v1042 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v454;
                          v332 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_764;
                        }
                      }

                      else
                      {
                        v329 = (os_log_s *)__nwlog_obj();
                        v330 = v1065[0];
                        if (os_log_type_enabled(v329, (os_log_type_t)v1065[0]))
                        {
                          v433 = *(unsigned int *)(v1042 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v433;
                          v332 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_764;
                        }
                      }
                    }

    if (v268) {
      free(v268);
    }
    os_log_type_t v94 = 0LL;
    os_log_type_t v89 = 0LL;
    goto LABEL_108;
  }

        if (v268) {
          free(v268);
        }
        goto LABEL_549;
      }

      __nwlog_obj();
      v228 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v413 = 136446210;
      v414 = "nw_agent_read_message_on_queue";
      v229 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v405 = 0;
      if (__nwlog_fault(v229, &type, &v405))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v230 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v231 = type;
          if (os_log_type_enabled(v230, type))
          {
            *(_DWORD *)v413 = 136446210;
            v414 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_181A5C000, v230, v231, "%{public}s No handler for CLIENT_ASSERT", v413, 0xCu);
          }
        }

        else if (v405)
        {
          os_log_type_t v256 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v230 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v257 = type;
          os_log_type_t v258 = os_log_type_enabled(v230, type);
          if (v256)
          {
            if (v258)
            {
              *(_DWORD *)v413 = 136446466;
              v414 = "nw_agent_read_message_on_queue";
              v415 = 2082;
              v416 = v256;
              _os_log_impl( &dword_181A5C000,  v230,  v257,  "%{public}s No handler for CLIENT_ASSERT, dumping backtrace:%{public}s",  v413,  0x16u);
            }

            free(v256);
            goto LABEL_525;
          }

          if (v258)
          {
            *(_DWORD *)v413 = 136446210;
            v414 = "nw_agent_read_message_on_queue";
            _os_log_impl( &dword_181A5C000,  v230,  v257,  "%{public}s No handler for CLIENT_ASSERT, no backtrace",  v413,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v230 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v263 = type;
          if (os_log_type_enabled(v230, type))
          {
            *(_DWORD *)v413 = 136446210;
            v414 = "nw_agent_read_message_on_queue";
            _os_log_impl( &dword_181A5C000,  v230,  v263,  "%{public}s No handler for CLIENT_ASSERT, backtrace limit exceeded",  v413,  0xCu);
          }
        }
      }

LABEL_545:
    goto LABEL_546;
  }

  *(void *)v304 = 0LL;
  uint64_t v305 = 0LL;
  int v307 = 0;
  uint64_t v306 = 0LL;
  v290 = v7;
  nw_txt_record_t v291 = nw_endpoint_copy_txt_record(v7);
  nw_endpoint_type_t v9 = nw_endpoint_get_type(v8);
  os_log_type_t v10 = v8;
  nw_endpoint_type_t v11 = nw_endpoint_get_type(v10);
  nw_txt_record_t v12 = nw_endpoint_copy_txt_record(v10);
  switch(v11)
  {
    case 1u:
      address = nw_endpoint_get_address(v10);
      if (address)
      {
        unint64_t sa_len = address->sa_len;
        if (!v12) {
          goto LABEL_50;
        }
      }

      else
      {
        unint64_t sa_len = 0LL;
        if (!v12) {
          goto LABEL_50;
        }
      }

      unint64_t sa_len = *((void *)v12 + 2) + 28LL;
      goto LABEL_50;
    case 2u:
    case 5u:
      BOOL domain_for_policy = nw_endpoint_get_domain_for_policy(v10);
      if (domain_for_policy)
      {
        size_t v14 = strlen((const char *)domain_for_policy) + 9;
        if (v12)
        {
LABEL_7:
          unint64_t sa_len = *((void *)v12 + 2) + v14;
          goto LABEL_50;
        }
      }

      else
      {
        size_t v14 = 9LL;
        if (v12) {
          goto LABEL_7;
        }
      }

      unint64_t sa_len = v14;
      goto LABEL_50;
    case 3u:
      bonjour_service_name = nw_endpoint_get_bonjour_service_name(v10);
      bonjour_service_os_log_type_t type = nw_endpoint_get_bonjour_service_type(v10);
      bonjour_service_domain = nw_endpoint_get_bonjour_service_domain(v10);
      if (bonjour_service_name)
      {
        size_t v19 = strlen(bonjour_service_name) + 9;
        if (bonjour_service_type) {
          goto LABEL_10;
        }
      }

      else
      {
        size_t v19 = 9LL;
        if (bonjour_service_type)
        {
LABEL_10:
          size_t v20 = strlen(bonjour_service_type) + 1;
          if (bonjour_service_domain)
          {
LABEL_11:
            size_t v21 = strlen(bonjour_service_domain) + 1;
            if (v12)
            {
LABEL_12:
              uint64_t v22 = *((void *)v12 + 2);
              goto LABEL_42;
            }

        _os_log_impl(&dword_181A5C000, v170, v171, v172, buf, 0xCu);
        goto LABEL_546;
      }

      os_log_type_t v89 = *(unsigned __int8 *)v25;
      if (v89 >> 6 == 2)
      {
        if (v75 < 4) {
          goto LABEL_548;
        }
        os_log_type_t v89 = bswap32(*(_DWORD *)v25 & 0xFFFFFF7F);
        os_log_type_t v90 = 4LL;
        goto LABEL_252;
      }

      if (v89 >> 6 == 1)
      {
        if (v75 < 2) {
          goto LABEL_548;
        }
        os_log_type_t v89 = bswap32(*(_WORD *)v25 & 0xFFBF) >> 16;
        os_log_type_t v90 = 2LL;
        goto LABEL_252;
      }

      if (v75 < 8) {
        goto LABEL_548;
      }
      v98 = *(void *)v25;
      os_log_type_t v97 = v25 + 8;
      os_log_type_t v89 = bswap64(v98 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v89))
      {
        size_t v114 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
          goto LABEL_552;
        }
        goto LABEL_391;
      }

      os_log_type_t v90 = 8LL;
      id v91 = (unint64_t)v97;
      if (!v89) {
        goto LABEL_444;
      }
LABEL_253:
      os_log_type_t v92 = v75 - v90;
      size_t v33 = v75 - v90 >= v89;
      id v93 = v75 - v90 - v89;
      if (!v33)
      {
        size_t v114 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
          id v205 = 2048;
          os_log_type_t v206 = (const char *)v89;
          os_log_type_t v207 = 2048;
          os_log_type_t v208 = v92;
          size_t v109 = "%{public}s _length %llu > remaining %zu";
          goto LABEL_310;
        }

        goto LABEL_552;
      }

      if (!v93) {
        goto LABEL_296;
      }
      os_log_type_t v94 = (_DWORD *)(v91 + v89);
      size_t v95 = *(unsigned __int8 *)(v91 + v89);
      if (v95 <= 0x3F)
      {
        id v96 = 1LL;
LABEL_268:
        os_log_type_t v99 = (char *)v94 + v96;
        goto LABEL_269;
      }

      if (v95 >> 6 == 2)
      {
        if (v93 < 4) {
          goto LABEL_296;
        }
        size_t v95 = bswap32(*v94 & 0xFFFFFF7F);
        id v96 = 4LL;
        goto LABEL_268;
      }

      if (v95 >> 6 == 1)
      {
        if (v93 < 2) {
          goto LABEL_296;
        }
        size_t v95 = bswap32(*(_WORD *)v94 & 0xFFBF) >> 16;
        id v96 = 2LL;
        goto LABEL_268;
      }

      if (v93 < 8)
      {
LABEL_296:
        v108 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR)) {
          goto LABEL_552;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        size_t v109 = "%{public}s Failed to decode integer";
        goto LABEL_550;
      }

      v101 = *(void *)v94;
      os_log_type_t v99 = (const char *)(v94 + 2);
      size_t v95 = bswap64(v101 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v95))
      {
        os_log_type_t v117 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
          goto LABEL_552;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        id v205 = 2048;
        os_log_type_t v206 = (const char *)v95;
        os_log_type_t v207 = 2048;
        os_log_type_t v208 = 0xFFFFFFFFLL;
        size_t v109 = "%{public}s _output %llu > _max %llu";
        goto LABEL_313;
      }

      id v96 = 8LL;
LABEL_269:
      size_t v100 = v93 - v96;
      os_log_type_t v75 = v93 - v96 - v95;
      if (v93 - v96 < v95)
      {
        os_log_type_t v117 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
          goto LABEL_552;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        id v205 = 2048;
        os_log_type_t v206 = (const char *)v95;
        os_log_type_t v207 = 2048;
        os_log_type_t v208 = v100;
        size_t v109 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_313;
      }

      if (!v88) {
        v88 = (void *)_nw_http_parsed_fields_create();
      }
      os_log_type_t v25 = &v99[v95];
      if (!nw_http_parsed_fields_add(v88, v91, v89, v99, v95, 0)) {
        goto LABEL_552;
      }
    }

    os_log_type_t v90 = 1LL;
LABEL_252:
    id v91 = (unint64_t)&v25[v90];
    if (!v89) {
      goto LABEL_444;
    }
    goto LABEL_253;
  }

  while (2)
  {
    size_t v54 = *(unsigned __int8 *)v42;
    if (v54 <= 0x3F)
    {
      size_t v82 = 1LL;
LABEL_200:
      v42 += v82;
      os_log_type_t v75 = v43 - v82;
      if (!v54) {
        goto LABEL_237;
      }
LABEL_201:
      if (v75 < v54)
      {
        size_t v30 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        id v205 = 2048;
        os_log_type_t v206 = (const char *)v54;
        os_log_type_t v207 = 2048;
        os_log_type_t v208 = v75;
        size_t v19 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_172;
      }

      v74 += v54;
      v42 += v54;
      uint64_t v43 = v75 - v54;
      if (v75 == v54) {
        goto LABEL_236;
      }
      continue;
    }

    break;
  }

  if (v54 >> 6 == 2)
  {
    if (v43 < 4) {
      goto LABEL_352;
    }
    size_t v54 = bswap32(*(_DWORD *)v42 & 0xFFFFFF7F);
    size_t v82 = 4LL;
    goto LABEL_200;
  }

  if (v54 >> 6 == 1)
  {
    if (v43 < 2) {
      goto LABEL_352;
    }
    size_t v54 = bswap32(*(_WORD *)v42 & 0xFFBF) >> 16;
    size_t v82 = 2LL;
    goto LABEL_200;
  }

  if (v43 < 8)
  {
LABEL_352:
    BOOL v18 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    size_t v19 = "%{public}s Failed to decode integer";
    goto LABEL_25;
  }

  size_t v83 = *(void *)v42;
  v42 += 8;
  size_t v54 = bswap64(v83 & 0xFFFFFFFFFFFFFF3FLL);
  if (!HIDWORD(v54))
  {
    os_log_type_t v75 = v43 - 8;
    if (!v54) {
      goto LABEL_237;
    }
    goto LABEL_201;
  }

  size_t v30 = (os_log_s *)__nwlog_obj();
  if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
    goto LABEL_27;
  }
LABEL_481:
  *(_DWORD *)buf = 136446722;
  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
  id v205 = 2048;
  os_log_type_t v206 = (const char *)v54;
  os_log_type_t v207 = 2048;
  os_log_type_t v208 = 0xFFFFFFFFLL;
  size_t v19 = "%{public}s _output %llu > _max %llu";
LABEL_172:
  uint64_t v22 = v30;
  char v23 = 32;
LABEL_26:
  _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_ERROR, v19, buf, v23);
LABEL_27:
  metadata_with_parsed_fields = 0LL;
LABEL_28:
  if (v17) {
    os_release(v17);
  }
  return metadata_with_parsed_fields;
}

LABEL_141:
            size_t v69 = 1LL;
            if (!v64) {
              goto LABEL_144;
            }
LABEL_142:
            if (v67) {
              memcpy(v43 + 8, v64, v67);
            }
LABEL_144:
            if (v65 && v68) {
              memcpy(&v43[v67 + 8], v65, v68);
            }
            if (v66 && v69) {
              memcpy(&v43[v67 + 8 + v68], v66, v69);
            }
            if (v291)
            {
              memcpy(&v43[v67 + 8 + v68 + v69], *((const void **)v291 + 1), *((void *)v291 + 2));
              size_t v95 = obj;
            }

            else
            {
              size_t v95 = obj;
              v43[obj - 1] = OS_LOG_TYPE_DEFAULT;
            }

            unint64_t v55 = v95 + 5;
            if (v297 - a3 >= v95 + 5)
            {
              *(_BYTE *)a3 = a2;
              *(_DWORD *)(a3 + 1) = v95;
              v98 = (void *)(a3 + 5);
              os_log_type_t v99 = v43;
              size_t v100 = v95;
              goto LABEL_197;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v96 = (id)gLogObj;
            *(_DWORD *)buf = 136447490;
            v314 = "nw_necp_append_tlv";
            __int16 v315 = 2048;
            *(void *)v316 = a3;
            *(_WORD *)&v316[8] = 2048;
            *(void *)&v316[10] = v95 + 5;
            *(_WORD *)&v316[18] = 2048;
            *(void *)v317 = v297;
            *(_WORD *)&v317[8] = 1024;
            *(_DWORD *)v318 = a2;
            *(_WORD *)&v318[4] = 1024;
            *(_DWORD *)&v318[6] = v95;
            LODWORD(v28_Block_object_dispose(va, 8) = 54;
            v287 = buf;
            char v57 = (char *)_os_log_send_and_compose_impl();

            v312[0] = 16;
            uu[0] = 0;
            if (v312[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v74 = (os_log_s *)(id)gLogObj;
              os_log_type_t v97 = v312[0];
              if (os_log_type_enabled(v74, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v95 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = obj;
                _os_log_impl( &dword_181A5C000,  v74,  v97,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
              }

              goto LABEL_269;
            }

            if (uu[0])
            {
              v126 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v133 = v312[0];
              BOOL v134 = os_log_type_enabled(v74, (os_log_type_t)v312[0]);
              if (v126)
              {
                if (v134)
                {
                  *(_DWORD *)buf = 136447746;
                  v314 = "nw_necp_append_tlv";
                  __int16 v315 = 2048;
                  *(void *)v316 = a3;
                  *(_WORD *)&v316[8] = 2048;
                  *(void *)&v316[10] = v55;
                  *(_WORD *)&v316[18] = 2048;
                  *(void *)v317 = v297;
                  *(_WORD *)&v317[8] = 1024;
                  *(_DWORD *)v318 = a2;
                  *(_WORD *)&v318[4] = 1024;
                  *(_DWORD *)&v318[6] = obj;
                  __int16 v319 = 2082;
                  v320 = v126;
                  _os_log_impl( &dword_181A5C000,  v74,  v133,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
                }

                goto LABEL_217;
              }

              if (v134)
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v55;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = obj;
                _os_log_impl( &dword_181A5C000,  v74,  v133,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
              }
            }

            else
            {
              __nwlog_obj();
              __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v145 = v312[0];
              if (os_log_type_enabled(v74, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v95 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = obj;
                _os_log_impl( &dword_181A5C000,  v74,  v145,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
              }
            }

            goto LABEL_269;
          case 4u:
            *((_BYTE *)v43 + 1) = 0;
            *uint64_t v43 = v51;
            *((_WORD *)v43 + 1) = __rev16(nw_endpoint_get_port(v10));
            *((_DWORD *)v43 + 1) = 4;
            os_log_type_t v70 = nw_endpoint_get_url(v10);
            BOOL v71 = v70;
            if (v70)
            {
              size_t v72 = strlen(v70);
              memcpy(v43 + 8, v71, v72 + 1);
            }

            v43[v52 - 1] = OS_LOG_TYPE_DEFAULT;
            unint64_t v55 = v52 + 5;
            if (v297 - a3 >= v52 + 5) {
              goto LABEL_195;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v73 = (id)gLogObj;
            *(_DWORD *)buf = 136447490;
            v314 = "nw_necp_append_tlv";
            __int16 v315 = 2048;
            *(void *)v316 = a3;
            *(_WORD *)&v316[8] = 2048;
            *(void *)&v316[10] = v52 + 5;
            *(_WORD *)&v316[18] = 2048;
            *(void *)v317 = v297;
            *(_WORD *)&v317[8] = 1024;
            *(_DWORD *)v318 = a2;
            *(_WORD *)&v318[4] = 1024;
            *(_DWORD *)&v318[6] = v52;
            LODWORD(v28_Block_object_dispose(va, 8) = 54;
            v287 = buf;
            char v57 = (char *)_os_log_send_and_compose_impl();

            v312[0] = 16;
            uu[0] = 0;
            if (v312[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v74 = (os_log_s *)(id)gLogObj;
              os_log_type_t v75 = v312[0];
              if (os_log_type_enabled(v74, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                _os_log_impl( &dword_181A5C000,  v74,  v75,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
              }

              goto LABEL_269;
            }

            if (uu[0])
            {
              v126 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v129 = v312[0];
              BOOL v130 = os_log_type_enabled(v74, (os_log_type_t)v312[0]);
              if (v126)
              {
                if (v130)
                {
                  *(_DWORD *)buf = 136447746;
                  v314 = "nw_necp_append_tlv";
                  __int16 v315 = 2048;
                  *(void *)v316 = a3;
                  *(_WORD *)&v316[8] = 2048;
                  *(void *)&v316[10] = v52 + 5;
                  *(_WORD *)&v316[18] = 2048;
                  *(void *)v317 = v297;
                  *(_WORD *)&v317[8] = 1024;
                  *(_DWORD *)v318 = a2;
                  *(_WORD *)&v318[4] = 1024;
                  *(_DWORD *)&v318[6] = v52;
                  __int16 v319 = 2082;
                  v320 = v126;
                  _os_log_impl( &dword_181A5C000,  v74,  v129,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
                }

                goto LABEL_217;
              }

              if (v130)
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                _os_log_impl( &dword_181A5C000,  v74,  v129,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
              }
            }

            else
            {
              __nwlog_obj();
              __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v143 = v312[0];
              if (os_log_type_enabled(v74, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                _os_log_impl( &dword_181A5C000,  v74,  v143,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
              }
            }

            goto LABEL_269;
          case 5u:
            *((_BYTE *)v43 + 1) = 0;
            *uint64_t v43 = v51;
            *((_WORD *)v43 + 1) = 0;
            *((_DWORD *)v43 + 1) = 5;
            BOOL v60 = nw_endpoint_get_domain_for_policy(v10);
            __int16 v61 = (const void *)v60;
            if (v60)
            {
              size_t v62 = strlen((const char *)v60) + 1;
              memcpy(v43 + 8, v61, v62);
              nw_txt_record_t v63 = v291;
              if (v291)
              {
LABEL_94:
                memcpy(&v43[v62 + 8], *((const void **)v63 + 1), *((void *)v63 + 2));
                goto LABEL_124;
              }
            }

            else
            {
              size_t v62 = 1LL;
              nw_txt_record_t v63 = v291;
              if (v291) {
                goto LABEL_94;
              }
            }

            v43[v52 - 1] = OS_LOG_TYPE_DEFAULT;
LABEL_124:
            unint64_t v55 = v52 + 5;
            if (v297 - a3 >= v52 + 5)
            {
LABEL_195:
              *(_BYTE *)a3 = a2;
              *(_DWORD *)(a3 + 1) = v52;
LABEL_196:
              v98 = (void *)(a3 + 5);
              os_log_type_t v99 = v43;
              size_t v100 = v52;
LABEL_197:
              memcpy(v98, v99, v100);
              a3 += v55;
              goto LABEL_279;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v91 = (id)gLogObj;
            *(_DWORD *)buf = 136447490;
            v314 = "nw_necp_append_tlv";
            __int16 v315 = 2048;
            *(void *)v316 = a3;
            *(_WORD *)&v316[8] = 2048;
            *(void *)&v316[10] = v52 + 5;
            *(_WORD *)&v316[18] = 2048;
            *(void *)v317 = v297;
            *(_WORD *)&v317[8] = 1024;
            *(_DWORD *)v318 = a2;
            *(_WORD *)&v318[4] = 1024;
            *(_DWORD *)&v318[6] = v52;
            LODWORD(v28_Block_object_dispose(va, 8) = 54;
            v287 = buf;
            char v57 = (char *)_os_log_send_and_compose_impl();

            v312[0] = 16;
            uu[0] = 0;
            if (v312[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v74 = (os_log_s *)(id)gLogObj;
              os_log_type_t v92 = v312[0];
              if (os_log_type_enabled(v74, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                _os_log_impl( &dword_181A5C000,  v74,  v92,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
              }
            }

            else if (uu[0])
            {
              v126 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v127 = v312[0];
              BOOL v128 = os_log_type_enabled(v74, (os_log_type_t)v312[0]);
              if (v126)
              {
                if (v128)
                {
                  *(_DWORD *)buf = 136447746;
                  v314 = "nw_necp_append_tlv";
                  __int16 v315 = 2048;
                  *(void *)v316 = a3;
                  *(_WORD *)&v316[8] = 2048;
                  *(void *)&v316[10] = v52 + 5;
                  *(_WORD *)&v316[18] = 2048;
                  *(void *)v317 = v297;
                  *(_WORD *)&v317[8] = 1024;
                  *(_DWORD *)v318 = a2;
                  *(_WORD *)&v318[4] = 1024;
                  *(_DWORD *)&v318[6] = v52;
                  __int16 v319 = 2082;
                  v320 = v126;
                  _os_log_impl( &dword_181A5C000,  v74,  v127,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
                }

    if (v70) {
      free(v70);
    }

    goto LABEL_123;
  }

  os_log_type_t type = nw_endpoint_get_type(*(nw_endpoint_t *)(v2 + 24));
  os_log_type_t v10 = *(void *)(a1 + 32);
  if (type != nw_endpoint_type_host)
  {
    if ((nw_resolver_create_dns_service_locked((NWConcrete_nw_resolver *)v10) & 1) != 0) {
      goto LABEL_124;
    }
    goto LABEL_123;
  }

  required_address_family = nw_parameters_get_required_address_family(*(void **)(v10 + 16));
  if (required_address_family == 2
    || (nw_parameters_get_desperate_ivan(*(void **)(*(void *)(a1 + 32) + 16LL)) & 1) != 0)
  {
    nw_txt_record_t v12 = 1;
LABEL_18:
    char v13 = *(void *)(a1 + 32);
LABEL_19:
    *(_DWORD *)(v13 + 80) = v12;
    goto LABEL_20;
  }

  char v13 = *(void *)(a1 + 32);
  if (required_address_family == 30)
  {
    nw_txt_record_t v12 = 2;
    goto LABEL_19;
  }

  if (nw_parameters_get_allow_unusable_addresses(*(void **)(v13 + 16)))
  {
    nw_txt_record_t v12 = 3;
    goto LABEL_18;
  }

  if (v47) {
    free(v47);
  }
  return 0LL;
}

      free(v36);
      if (!v26) {
        return;
      }
LABEL_208:
      size_t v14 = (nw_protocol *)v26;
LABEL_32:
      free(v14);
      return;
    }

    __int16 v27 = (os_log_s *)__nwlog_obj();
    os_log_type_t v28 = type;
    if (!os_log_type_enabled(v27, type)) {
      goto LABEL_207;
    }
    *(_DWORD *)buf = 136446210;
    size_t v110 = "nw_protocol_udp_connected";
    size_t v29 = "%{public}s called with null udp";
LABEL_206:
    _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
    goto LABEL_207;
  }

  if (gLogDatapath)
  {
    size_t v30 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      size_t v110 = "nw_protocol_udp_connected";
      size_t v111 = 2082;
      os_log_type_t v112 = a1 + 3;
      _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Got a connected event from the lower layer",  buf,  0x16u);
    }
  }

  if (!a1->default_input_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v15 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      size_t v110 = "nw_protocol_udp_connected";
      size_t v111 = 2082;
      os_log_type_t v112 = a1 + 3;
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s No input handler found, ignoring connected call",  buf,  0x16u);
    }

    return;
  }

  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_13);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled())
  {
    kdebug_trace();
    if (a1[1].default_input_handler) {
      goto LABEL_10;
    }
  }

  else if (a1[1].default_input_handler)
  {
    goto LABEL_10;
  }

  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v110 = "__nw_protocol_get_path";
    size_t v82 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v107 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v83 = (os_log_s *)__nwlog_obj();
      os_log_type_t v84 = type;
      if (!os_log_type_enabled(v83, type)) {
        goto LABEL_241;
      }
      *(_DWORD *)buf = 136446210;
      size_t v110 = "__nw_protocol_get_path";
      __int16 v85 = "%{public}s called with null protocol";
    }

    else if (v107)
    {
      v98 = (char *)__nw_create_backtrace_string();
      size_t v83 = (os_log_s *)__nwlog_obj();
      os_log_type_t v84 = type;
      os_log_type_t v99 = os_log_type_enabled(v83, type);
      if (v98)
      {
        if (v99)
        {
          *(_DWORD *)buf = 136446466;
          size_t v110 = "__nw_protocol_get_path";
          size_t v111 = 2082;
          os_log_type_t v112 = (nw_protocol *)v98;
          _os_log_impl( &dword_181A5C000,  v83,  v84,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v98);
        goto LABEL_241;
      }

      if (!v99)
      {
LABEL_241:
        if (v82) {
          free(v82);
        }
        goto LABEL_243;
      }

      *(_DWORD *)buf = 136446210;
      size_t v110 = "__nw_protocol_get_path";
      __int16 v85 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      size_t v83 = (os_log_s *)__nwlog_obj();
      os_log_type_t v84 = type;
      if (!os_log_type_enabled(v83, type)) {
        goto LABEL_241;
      }
      *(_DWORD *)buf = 136446210;
      size_t v110 = "__nw_protocol_get_path";
      __int16 v85 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v83, v84, v85, buf, 0xCu);
    goto LABEL_241;
  }

  handle = default_input_handler->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = default_input_handler[1].callbacks;
    if (callbacks) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }

  size_t v42 = default_input_handler->callbacks;
  if (v42)
  {
    get_path = (uint64_t (*)(nw_protocol *))v42->get_path;
    if (get_path)
    {
      char v44 = (void *)get_path(default_input_handler);
      if (handle != &nw_protocol_ref_counted_handle) {
        goto LABEL_91;
      }
      goto LABEL_90;
    }
  }

  __nwlog_obj();
  name = default_input_handler->identifier->name;
  *(_DWORD *)buf = 136446722;
  size_t v110 = "__nw_protocol_get_path";
  if (!name) {
    name = "invalid";
  }
  size_t v111 = 2082;
  os_log_type_t v112 = (nw_protocol *)name;
  BOOL v113 = 2048;
  size_t v114 = default_input_handler;
  size_t v69 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v107 = 0;
  if (__nwlog_fault(v69, &type, &v107))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v70 = (os_log_s *)__nwlog_obj();
      BOOL v71 = type;
      if (!os_log_type_enabled(v70, type)) {
        goto LABEL_219;
      }
      size_t v72 = default_input_handler->identifier->name;
      if (!v72) {
        size_t v72 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      size_t v110 = "__nw_protocol_get_path";
      size_t v111 = 2082;
      os_log_type_t v112 = (nw_protocol *)v72;
      BOOL v113 = 2048;
      size_t v114 = default_input_handler;
      id v73 = "%{public}s protocol %{public}s (%p) has invalid get_path callback";
LABEL_218:
      _os_log_impl(&dword_181A5C000, v70, v71, v73, buf, 0x20u);
      goto LABEL_219;
    }

    if (!v107)
    {
      os_log_type_t v70 = (os_log_s *)__nwlog_obj();
      BOOL v71 = type;
      if (!os_log_type_enabled(v70, type)) {
        goto LABEL_219;
      }
      size_t v100 = default_input_handler->identifier->name;
      if (!v100) {
        size_t v100 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      size_t v110 = "__nw_protocol_get_path";
      size_t v111 = 2082;
      os_log_type_t v112 = (nw_protocol *)v100;
      BOOL v113 = 2048;
      size_t v114 = default_input_handler;
      id v73 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded";
      goto LABEL_218;
    }

    id v87 = (char *)__nw_create_backtrace_string();
    os_log_type_t v70 = (os_log_s *)__nwlog_obj();
    BOOL v71 = type;
    v88 = os_log_type_enabled(v70, type);
    if (!v87)
    {
      if (!v88) {
        goto LABEL_219;
      }
      BOOL v103 = default_input_handler->identifier->name;
      if (!v103) {
        BOOL v103 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      size_t v110 = "__nw_protocol_get_path";
      size_t v111 = 2082;
      os_log_type_t v112 = (nw_protocol *)v103;
      BOOL v113 = 2048;
      size_t v114 = default_input_handler;
      id v73 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace";
      goto LABEL_218;
    }

    if (v88)
    {
      os_log_type_t v89 = default_input_handler->identifier->name;
      if (!v89) {
        os_log_type_t v89 = "invalid";
      }
      *(_DWORD *)buf = 136446978;
      size_t v110 = "__nw_protocol_get_path";
      size_t v111 = 2082;
      os_log_type_t v112 = (nw_protocol *)v89;
      BOOL v113 = 2048;
      size_t v114 = default_input_handler;
      size_t v115 = 2082;
      size_t v116 = v87;
      _os_log_impl( &dword_181A5C000,  v70,  v71,  "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s",  buf,  0x2Au);
    }

    free(v87);
  }

  if (!*(void *)v14)
  {
    nw_protocol_plugin_metadata_get_and_process_frames( v14,  a1,  a2,  a3,  &v233,  &v232,  &v231,  &v230,  &v229,  *(void *)(v14 + 96),  a6);
    BOOL v15 = v230;
    goto LABEL_148;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  LODWORD(buf[0]) = 136446210;
  *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
  size_t v69 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v258[0]) = 0;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v70 = (os_log_s *)gLogObj;
    BOOL v71 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
      goto LABEL_250;
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    size_t v72 = "%{public}s Getting new input from below, but we still have saved input frames that we didn't use";
LABEL_248:
    size_t v121 = v70;
    size_t v122 = v71;
LABEL_249:
    _os_log_impl(&dword_181A5C000, v121, v122, v72, (uint8_t *)buf, 0xCu);
    goto LABEL_250;
  }

  if (!LOBYTE(v258[0]))
  {
    os_log_type_t v70 = (os_log_s *)__nwlog_obj();
    BOOL v71 = type[0];
    if (!os_log_type_enabled(v70, type[0])) {
      goto LABEL_250;
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    size_t v72 = "%{public}s Getting new input from below, but we still have saved input frames that we didn't use, backtrace limit exceeded";
    goto LABEL_248;
  }

  v108 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  size_t v109 = (os_log_s *)gLogObj;
  size_t v110 = type[0];
  size_t v111 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
  if (v108)
  {
    if (v111)
    {
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v108;
      _os_log_impl( &dword_181A5C000,  v109,  v110,  "%{public}s Getting new input from below, but we still have saved input frames that we didn't use, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
    }

    free(v108);
    goto LABEL_250;
  }

  if (v111)
  {
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    size_t v72 = "%{public}s Getting new input from below, but we still have saved input frames that we didn't use, no backtrace";
    size_t v121 = v109;
    size_t v122 = v110;
    goto LABEL_249;
  }

        if (v74) {
          free(v74);
        }
        goto LABEL_15;
      }

      goto LABEL_17;
    }

    *(_DWORD *)is_complete = a5;
    if (*(void *)(v12 + 136))
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        size_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          size_t v21 = *(void *)(v12 + 160);
          uint64_t v22 = *(void *)(v12 + 136);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_ws_process_pong_frame";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 275;
          *(_WORD *)&buf[22] = 1040;
          *(_DWORD *)v108 = v21;
          *(_WORD *)&v108[4] = 2096;
          *(void *)&v108[6] = v22;
          char v23 = "%{public}s %{public}s got pong frame '%{network:data}.*P'";
          BOOL v24 = v20;
          os_log_type_t v25 = 38;
LABEL_130:
          _os_log_impl(&dword_181A5C000, v24, OS_LOG_TYPE_DEBUG, v23, buf, v25);
          goto LABEL_131;
        }

        goto LABEL_131;
      }
    }

    else if (gLogDatapath)
    {
      __nwlog_obj();
      size_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_ws_process_pong_frame";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v12 + 275;
        char v23 = "%{public}s %{public}s got empty pong frame, looking for first empty pong handler";
        BOOL v24 = v20;
        os_log_type_t v25 = 22;
        goto LABEL_130;
      }

        if (v51) {
          free(v51);
        }
        uint64_t v22 = 0LL;
LABEL_32:

        char v23 = (void *)v5[49];
        v5[49] = v22;

        if (!v5[49])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v31 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            size_t v69 = "nw_framer_protocol_add_input_handler";
            os_log_type_t v70 = 2080;
            BOOL v71 = (char *)v5 + 609;
            _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s %s Failed to find start block on framer",  buf,  0x16u);
          }

          goto LABEL_52;
        }

        if (v15)
        {
          BOOL v24 = v15;
          *((_BYTE *)v5 + 609) = 0;
          os_log_type_t v25 = 84LL;
          BOOL v26 = 609LL;
          while (1)
          {
            __int16 v27 = v24[v26 - 561];
            *((_BYTE *)v5 + v26) = v27;
            if (!v27) {
              break;
            }
            --v25;
            ++v26;
            if (v25 <= 1)
            {
              *((_BYTE *)v5 + v26) = 0;
              break;
            }
          }
        }

        if (a2) {
          goto LABEL_40;
        }
LABEL_43:
        size_t v30 = 1LL;
LABEL_53:

        return v30;
      }

      __nwlog_obj();
      os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      size_t v69 = "nw_framer_protocol_add_input_handler";
      nw_txt_record_t v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v66 = 0;
      if (!__nwlog_fault(v7, &type, &v66))
      {
LABEL_50:
        if (!v7)
        {
LABEL_52:
          size_t v30 = 0LL;
          goto LABEL_53;
        }

        if (v48) {
          free(v48);
        }
        nw_txt_record_t v7 = 0LL;
        if (v16 != &nw_protocol_ref_counted_handle) {
          goto LABEL_9;
        }
        goto LABEL_31;
      }

      __nwlog_obj();
      unint64_t v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      size_t v72 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v28, type, &v72))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v56 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
            _os_log_impl(&dword_181A5C000, v29, v56, "%{public}s called with null protocol", buf, 0xCu);
          }

        if (v48) {
          free(v48);
        }
        nw_txt_record_t v7 = 0LL;
        if (v16 != &nw_protocol_ref_counted_handle) {
          goto LABEL_9;
        }
        goto LABEL_31;
      }

      __nwlog_obj();
      unint64_t v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      size_t v72 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v28, type, &v72))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v56 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            _os_log_impl(&dword_181A5C000, v29, v56, "%{public}s called with null protocol", buf, 0xCu);
          }

        if (v49) {
          free(v49);
        }
        os_log_type_t v8 = 0LL;
        if (v17 != &nw_protocol_ref_counted_handle) {
          goto LABEL_9;
        }
        goto LABEL_31;
      }

      __nwlog_obj();
      id v56 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
      size_t v29 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      id v73 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v29, type, &v73))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          size_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v57 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
            _os_log_impl(&dword_181A5C000, v30, v57, "%{public}s called with null protocol", buf, 0xCu);
          }

    _os_log_impl(&dword_181A5C000, v59, v60, v61, buf, 0xCu);
    goto LABEL_142;
  }

  handle = (unsigned __int8 *)a1->handle;
  if (handle)
  {
    id v4 = (handle[276] >> 4) & 1;
    if (!gLogDatapath) {
      LOBYTE(v4) = 1;
    }
    if (!*((void *)handle + 11))
    {
      if ((v4 & 1) != 0) {
        return;
      }
      nw_endpoint_type_t v11 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      nw_txt_record_t v12 = *((void *)handle + 11);
      if (v12) {
        char v13 = *(_DWORD *)(v12 + 460);
      }
      else {
        char v13 = -1;
      }
      __int16 v85 = *((void *)handle + 8);
      *(_DWORD *)buf = 136447234;
      os_log_type_t v92 = "nw_protocol_webtransport_http2_stream_connected";
      id v93 = 2082;
      p_identifier = (char *)(handle + 192);
      size_t v95 = 2080;
      id v96 = " ";
      os_log_type_t v97 = 1024;
      v98 = v13;
      os_log_type_t v99 = 2048;
      size_t v100 = v85;
      os_log_type_t v50 = "%{public}s %{public}s%s<i%u:s%lld> Stream is not fully setup. Ignoring connected.";
      char v51 = v11;
      unint64_t v52 = OS_LOG_TYPE_DEBUG;
      goto LABEL_81;
    }

    if ((v4 & 1) == 0)
    {
      size_t v62 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        nw_txt_record_t v63 = *((void *)handle + 11);
        if (v63) {
          nw_endpoint_t v64 = *(_DWORD *)(v63 + 460);
        }
        else {
          nw_endpoint_t v64 = -1;
        }
        __int16 v81 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        os_log_type_t v92 = "nw_protocol_webtransport_http2_stream_connected";
        id v93 = 2082;
        p_identifier = (char *)(handle + 192);
        size_t v95 = 2080;
        id v96 = " ";
        os_log_type_t v97 = 1024;
        v98 = v64;
        os_log_type_t v99 = 2048;
        size_t v100 = v81;
        _os_log_impl( &dword_181A5C000,  v62,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> Got a connected event from the lower layer",  buf,  0x30u);
      }
    }

    nw_protocol_connected(a1->default_input_handler->flow_id, (uint64_t)a2);
    nw_endpoint_type_t v6 = (nw_protocol *)*((void *)handle + 11);
    nw_txt_record_t v7 = handle[276];
    if (v6 != a2)
    {
      if ((handle[276] & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          os_log_type_t v8 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            nw_endpoint_type_t v9 = *((void *)handle + 11);
            if (v9) {
              os_log_type_t v10 = *(_DWORD *)(v9 + 460);
            }
            else {
              os_log_type_t v10 = -1;
            }
            os_log_type_t v84 = *((void *)handle + 8);
            *(_DWORD *)buf = 136447490;
            os_log_type_t v92 = "nw_protocol_webtransport_http2_stream_connected";
            id v93 = 2082;
            p_identifier = (char *)(handle + 192);
            size_t v95 = 2080;
            id v96 = " ";
            os_log_type_t v97 = 1024;
            v98 = v10;
            os_log_type_t v99 = 2048;
            size_t v100 = v84;
            v101 = 2048;
            *(void *)os_log_type_t v102 = v6;
            _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> connected protocol is not our WebTransport session (%p), ignoring",  buf,  0x3Au);
          }
        }
      }

      return;
    }

    if ((handle[276] & 4) == 0)
    {
      size_t v14 = *((_DWORD *)handle + 47);
      if (v14) {
        goto LABEL_19;
      }
LABEL_33:
      size_t v14 = 2;
      *((_DWORD *)handle + 47) = 2;
      BOOL v15 = *((_DWORD *)handle + 46);
      if (v15)
      {
LABEL_20:
        if (a2) {
          goto LABEL_21;
        }
        goto LABEL_35;
      }

              if ((nw_endpoint_handler_get_logging_disabled(locka) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v117 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
                {
                  char v118 = nw_endpoint_handler_get_id_string(locka);
                  size_t v119 = nw_endpoint_handler_dry_run_string(locka);
                  size_t v120 = nw_endpoint_handler_copy_endpoint(locka);
                  size_t v121 = v116;
                  size_t v122 = nw_endpoint_get_logging_description(v120);
                  v123 = nw_endpoint_handler_state_string(locka);
                  id v124 = nw_endpoint_handler_mode_string(locka);
                  os_log_type_t v125 = nw_endpoint_handler_copy_current_path(locka);
                  v126 = v125;
                  os_log_type_t v127 = *((_BYTE *)v234 + 108);
                  BOOL v128 = ", weak";
                  *(_DWORD *)buf = 136448258;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_fallback_get_timeout_nanos";
                  *(_WORD *)&buf[12] = 2082;
                  if ((v127 & 2) == 0) {
                    BOOL v128 = ", strong";
                  }
                  *(void *)&buf[14] = v118;
                  *(_WORD *)&buf[22] = 2082;
                  *(void *)&_BYTE buf[24] = v119;
                  *(_WORD *)&_BYTE buf[32] = 2082;
                  *(void *)&buf[34] = v122;
                  *(_WORD *)&buf[42] = 2082;
                  *(void *)&buf[44] = v123;
                  *(_WORD *)&buf[52] = 2082;
                  *(void *)&buf[54] = v124;
                  *(_WORD *)&buf[62] = 2114;
                  *(void *)os_log_type_t v277 = v125;
                  *(_WORD *)&v277[8] = 2048;
                  size_t v116 = v121;
                  *(void *)&v277[10] = v121;
                  *(_WORD *)&v277[18] = 2082;
                  *(void *)&v277[20] = v128;
                  _os_log_impl( &dword_181A5C000,  v117,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Setting %llums fall back timer%{public}s",  buf,  0x5Cu);

                  size_t v109 = v233;
                }
              }

              os_log_type_t v129 = v235;
              v235[3] = 1000000 * v116;
              minimize_logging = nw_endpoint_handler_get_minimize_logging(locka);
              logging_disabled = nw_endpoint_handler_get_logging_disabled(locka);
              if (minimize_logging)
              {
                if ((logging_disabled & 1) != 0)
                {
LABEL_156:
                  BOOL v141 = nw_endpoint_handler_copy_context(locka);
                  *(void *)buf = MEMORY[0x1895F87A8];
                  *(void *)&buf[8] = 3221225472LL;
                  *(void *)&buf[16] = ___ZL32nw_endpoint_fallback_start_timerP30NWConcrete_nw_endpoint_handler_block_invoke;
                  *(void *)&_BYTE buf[24] = &unk_189BC93A0;
                  *(void *)&_BYTE buf[32] = locka;
                  v129[9] = nw_queue_context_create_source(v141, 2, 3, 0, buf, 0LL);

                  if (v129[9])
                  {
                    os_log_type_t v142 = mach_continuous_time();
                    if (v142 <= 1) {
                      os_log_type_t v143 = 1LL;
                    }
                    else {
                      os_log_type_t v143 = v142;
                    }
                    v235[12] = v143;
                    os_log_type_t v144 = v235[9];
                    os_log_type_t v145 = dispatch_time(0x8000000000000000LL, v235[3]);
                    nw_queue_set_timer_values(v144, v145, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
                    nw_queue_activate_source(v235[9], v146);
LABEL_203:

                    size_t v111 = (NWConcrete_nw_endpoint_mode_handler *)v235;
LABEL_204:

                    goto LABEL_205;
                  }

                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v151 = (id)gLogObj;
                  *(_DWORD *)os_log_type_t type = 136446210;
                  os_log_type_t v259 = "nw_endpoint_fallback_start_timer";
                  v152 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t v256 = OS_LOG_TYPE_ERROR;
                  v255 = 0;
                  if ((__nwlog_fault(v152, &v256, &v255) & 1) != 0)
                  {
                    if (v256 == OS_LOG_TYPE_FAULT)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      id v153 = (os_log_s *)(id)gLogObj;
                      v154 = v256;
                      if (os_log_type_enabled(v153, v256))
                      {
                        *(_DWORD *)os_log_type_t type = 136446210;
                        os_log_type_t v259 = "nw_endpoint_fallback_start_timer";
                        _os_log_impl( &dword_181A5C000,  v153,  v154,  "%{public}s nw_queue_context_create_source(timer) failed",  (uint8_t *)type,  0xCu);
                      }
                    }

                    else
                    {
                      if (v255)
                      {
                        BOOL v160 = (char *)__nw_create_backtrace_string();
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        os_log_type_t v161 = (os_log_s *)(id)gLogObj;
                        os_log_type_t v162 = v256;
                        v163 = os_log_type_enabled(v161, v256);
                        if (v160)
                        {
                          if (v163)
                          {
                            *(_DWORD *)os_log_type_t type = 136446466;
                            os_log_type_t v259 = "nw_endpoint_fallback_start_timer";
                            os_log_type_t v260 = 2082;
                            os_log_type_t v261 = v160;
                            _os_log_impl( &dword_181A5C000,  v161,  v162,  "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
                          }

                          free(v160);
                        }

                        else
                        {
                          if (v163)
                          {
                            *(_DWORD *)os_log_type_t type = 136446210;
                            os_log_type_t v259 = "nw_endpoint_fallback_start_timer";
                            _os_log_impl( &dword_181A5C000,  v161,  v162,  "%{public}s nw_queue_context_create_source(timer) failed, no backtrace",  (uint8_t *)type,  0xCu);
                          }
                        }

                        goto LABEL_201;
                      }

                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      id v153 = (os_log_s *)(id)gLogObj;
                      v170 = v256;
                      if (os_log_type_enabled(v153, v256))
                      {
                        *(_DWORD *)os_log_type_t type = 136446210;
                        os_log_type_t v259 = "nw_endpoint_fallback_start_timer";
                        _os_log_impl( &dword_181A5C000,  v153,  v170,  "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded",  (uint8_t *)type,  0xCu);
                      }
                    }
                  }

                        unint64_t v52 = *(void *)(a1 + 88);
                        if (v52)
                        {
                          __int128 v53 = *(uint64_t (**)(uint64_t))(v52 + 120);
                          if (v53)
                          {
                            size_t v54 = v53(a1);
                            if (v54)
                            {
                              if (v54 == 21)
                              {
                                BOOL result = 0LL;
                                *(_DWORD *)(a1 + 24) = 21;
                                *(void *)(a1 + 32) = "on_version_complete pause";
                                *(void *)(a1 + 40) = a2;
                                *(void *)(a1 + 56) = 217LL;
                                return result;
                              }

                              goto LABEL_1428;
                            }
                          }
                        }

      void *v67 = v19;
      goto LABEL_142;
    }

      goto LABEL_142;
    }

    if (!v59)
    {
      __nwlog_obj();
      size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v58 = v61;
      if (os_log_type_enabled(v31, v61))
      {
        *(_DWORD *)buf = 136446210;
        nw_txt_record_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl( &dword_181A5C000,  v31,  v58,  "%{public}s called with null value, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_141;
    }

    id v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v49 = v61;
    os_log_type_t v50 = os_log_type_enabled(v31, v61);
    if (!v36)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        nw_txt_record_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v31, v49, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }

      goto LABEL_141;
    }

    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      nw_txt_record_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      nw_endpoint_t v64 = 2082;
      v65 = v36;
      _os_log_impl( &dword_181A5C000,  v31,  v49,  "%{public}s called with null value, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_92:
    free(v36);
    if (!v15) {
      goto LABEL_11;
    }
LABEL_143:
    char v13 = (char *)v15;
    goto LABEL_10;
  }

  nw_masque_options_add_extra_header(v12[5], a2, (uint64_t)v60);
  char v13 = v60;
  if (v60) {
LABEL_10:
  }
    free(v13);
LABEL_11:
}

LABEL_142:
          if (!v30) {
            goto LABEL_144;
          }
          goto LABEL_143;
        }

        if (v20 != 6 && setsockopt(v26, 0xFFFF, 512, &v282, 4u))
        {
          posix_error = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                            + 8));
          os_log_type_t v39 = nw_error_get_error_code(posix_error);
          __nwlog_obj();
          size_t v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)address = 136446466;
          *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 1024;
          *(_DWORD *)&address[7] = v39;
          size_t v30 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v280) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            size_t v41 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v39;
              _os_log_impl( &dword_181A5C000,  v31,  v41,  "%{public}s SO_REUSEPORT failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
            }

            goto LABEL_132;
          }

          if (!(_BYTE)v280)
          {
            __nwlog_obj();
            size_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v71 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v39;
              _os_log_impl( &dword_181A5C000,  v31,  v71,  "%{public}s SO_REUSEPORT failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
            }

            goto LABEL_132;
          }

          size_t v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          nw_endpoint_t v64 = type[0];
          v65 = os_log_type_enabled(v43, type[0]);
          if (!v42)
          {
            if (v65)
            {
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v39;
              _os_log_impl( &dword_181A5C000,  v43,  v64,  "%{public}s SO_REUSEPORT failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
            }

            goto LABEL_141;
          }

          if (v65)
          {
            *(_DWORD *)address = 136446722;
            *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v39;
            address[9] = 2082;
            *(void *)&address[10] = v42;
            _os_log_impl( &dword_181A5C000,  v43,  v64,  "%{public}s SO_REUSEPORT failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
          }

    if (v77) {
      free(v77);
    }
    goto LABEL_7;
  }

  routing_BOOL result = v3->policy_result.routing_result;
  if (routing_result == 4) {
    goto LABEL_12;
  }
  if (routing_result != 3)
  {
    if (!nw_path_uses_nexus_internal(v3, 1)
      && (*((_BYTE *)v9 + 474) & 4) == 0
      && !v9->policy_result.routed_interface_index
      && (nw_path_may_span_multiple_interfaces(v9) & 1) == 0)
    {
      if (!a2) {
        goto LABEL_124;
      }
      nw_endpoint_type_t v11 = "No network route";
      nw_txt_record_t v12 = 3;
      goto LABEL_6;
    }

        os_log_type_t v10 = v21;
        if (v21) {
          continue;
        }
        if ((v11 & 1) != 0)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v185 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v186 = nw_endpoint_handler_get_id_string(v362);
              BOOL v187 = nw_endpoint_handler_dry_run_string(v362);
              os_log_type_t v188 = nw_endpoint_handler_copy_endpoint(v362);
              id v189 = nw_endpoint_get_logging_description(v188);
              v190 = nw_endpoint_handler_state_string(v362);
              v191 = nw_endpoint_handler_mode_string(v362);
              os_log_type_t v192 = nw_endpoint_handler_copy_current_path(v362);
              *(_DWORD *)buf = 136447746;
              v378 = "nw_endpoint_handler_modify_protocol_stack";
              v379 = 2082;
              v380 = (char *)v186;
              v381 = 2082;
              v382 = v187;
              v383 = 2082;
              v384 = (void *)v189;
              v385 = 2082;
              v386 = v190;
              v387 = 2082;
              v388 = v191;
              v389 = 2114;
              v390 = v192;
              _os_log_impl( &dword_181A5C000,  v185,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Modified protocol stack",  buf,  0x48u);
            }
          }

          id v193 = v362;
          v357->state = 2;

          *((_DWORD *)v193 + 20) = 262147;
          nw_endpoint_handler_report(v193, 0LL, (_WORD *)v193 + 40, 0LL);
          if ((*((_BYTE *)v358 + 33) & 4) != 0)
          {
            v194 = nw_endpoint_handler_copy_association(v193, 0);
            v195 = v194;
            if (v194) {
              nw_association_mark_flow_disconnected(v194, v193);
            }
            *((_BYTE *)v358 + 33) &= ~4u;
          }

          os_log_type_t v196 = nw_endpoint_flow_connect(v193);
          goto LABEL_602;
        }

          os_log_type_t v127 = 1;
          if (((*(unsigned __int16 *)(v14 + 188) | (*(unsigned __int8 *)(v14 + 190) << 16)) & 0x80000) != 0
            || !gLogDatapath)
          {
            goto LABEL_175;
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v128 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            BOOL v130 = *(_DWORD *)(v14 + 176);
            os_log_type_t v129 = *(_DWORD *)(v14 + 180);
            os_log_type_t v131 = v290[3];
            *(_DWORD *)buf = 136447490;
            v317 = "nw_protocol_http2_get_input_frames";
            v318 = 2082;
            __int16 v319 = (const char *)(v14 + 191);
            v320 = 2080;
            uint64_t v321 = (uint64_t)" ";
            v322 = 1024;
            *(_DWORD *)v323 = v129;
            *(_WORD *)&v323[4] = 1024;
            *(_DWORD *)&v323[6] = v130;
            *(_WORD *)&v323[10] = 2048;
            *(void *)&v323[12] = v131;
            _os_log_impl( &dword_181A5C000,  v128,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> Receiving capsule type 0x%llx",  buf,  0x36u);
          }

  if (v79) {
LABEL_142:
  }
    free(v79);
LABEL_143:
  nw_frame_finalize(v13);
  return 0LL;
}

    goto LABEL_151;
  }

  if (v99 == OS_LOG_TYPE_DEFAULT)
  {
    __nwlog_obj();
    id v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v93 = type;
    if (os_log_type_enabled(v73, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v102 = "nw_association_register_internal";
      _os_log_impl( &dword_181A5C000,  v73,  v93,  "%{public}s called with null handle, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_141;
  }

  __int16 v85 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  size_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v86 = type;
  id v87 = os_log_type_enabled(v82, type);
  if (!v85)
  {
    if (v87)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v102 = "nw_association_register_internal";
      _os_log_impl(&dword_181A5C000, v82, v86, "%{public}s called with null handle, no backtrace", buf, 0xCu);
    }

    goto LABEL_150;
  }

  if (v87)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v102 = "nw_association_register_internal";
    BOOL v103 = 2082;
    v104 = v85;
    _os_log_impl( &dword_181A5C000,  v82,  v86,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v85);
  if (v72) {
    goto LABEL_152;
  }
LABEL_104:
}

  if (v47) {
    free(v47);
  }
  return 0LL;
}

LABEL_217:
                goto LABEL_223;
              }

              if (v128)
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                _os_log_impl( &dword_181A5C000,  v74,  v127,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
              }
            }

            else
            {
              __nwlog_obj();
              __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v142 = v312[0];
              if (os_log_type_enabled(v74, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                _os_log_impl( &dword_181A5C000,  v74,  v142,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
              }
            }

      nw_socks5_connection_cancel_on_queue(v9, 0LL);
      goto LABEL_102;
    default:
      if (v14 == 200)
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          os_log_type_t v135 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
          {
            BOOL v136 = "not";
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&buf[12] = 2114;
            *(_DWORD *)buf = 136446978;
            *(void *)&buf[14] = v9;
            if (a3) {
              BOOL v136 = "is";
            }
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = size;
            *(_WORD *)&_BYTE buf[32] = 2082;
            *(void *)&buf[34] = v136;
            _os_log_impl( &dword_181A5C000,  v135,  OS_LOG_TYPE_DEBUG,  "%{public}s READY STATE %{public}@ read %zu bytes %{public}s_complete from inner connection",  buf,  0x2Au);
          }
        }

        *((void *)v9 + 25) += size;
        BOOL v58 = (nw_content_context *)&__block_literal_global_41831;
        os_log_type_t v59 = &__block_literal_global_41831;
        if (!a3 || (v9[160] & 0x20) != 0)
        {
          __int16 v61 = 0;
        }

        else
        {
          BOOL v60 = &__block_literal_global_3_41839;

          __int16 v61 = 1;
          BOOL v58 = (nw_content_context *)&__block_literal_global_3_41839;
        }

        nw_socks5_connection_increment_busy_on_queue(v9, WeakRetained);
        size_t v67 = (nw_connection *)*((void *)v9 + 18);
        v149[0] = MEMORY[0x1895F87A8];
        v149[1] = 3221225472LL;
        v149[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_155;
        v149[3] = &unk_189BB8260;
        BOOL v150 = v9;
        id v153 = v61;
        os_log_type_t v151 = WeakRetained;
        v152 = size;
        nw_connection_send(v67, v11, v58, 1, v149);

        goto LABEL_102;
      }

      if (v14 != 255) {
        goto LABEL_102;
      }
LABEL_12:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v15 = (id)gLogObj;
      uint64_t v16 = v9[56];
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = size;
      *(_WORD *)&_BYTE buf[32] = 1024;
      *(_DWORD *)&buf[34] = v16;
      os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

      type[0].unint64_t sa_len = 16;
      __str[0] = 0;
      if (type[0].sa_len == 17)
      {
        __nwlog_obj();
        BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v19 = type[0].sa_len;
        if (os_log_type_enabled(v18, (os_log_type_t)type[0].sa_len))
        {
          size_t v20 = v9[56];
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = size;
          *(_WORD *)&_BYTE buf[32] = 1024;
          *(_DWORD *)&buf[34] = v20;
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u",  buf,  0x26u);
        }
      }

      else if (__str[0])
      {
        __int16 v27 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type[0].sa_len;
        size_t v29 = os_log_type_enabled(v18, (os_log_type_t)type[0].sa_len);
        if (v27)
        {
          if (v29)
          {
            size_t v30 = v9[56];
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v9;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = size;
            *(_WORD *)&_BYTE buf[32] = 1024;
            *(_DWORD *)&buf[34] = v30;
            *(_WORD *)&buf[38] = 2082;
            *(void *)&buf[40] = v27;
            _os_log_impl( &dword_181A5C000,  v18,  v28,  "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u, dumping backtrace:%{public}s",  buf,  0x30u);
          }

          free(v27);
          goto LABEL_99;
        }

        if (v29)
        {
          char v57 = v9[56];
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = size;
          *(_WORD *)&_BYTE buf[32] = 1024;
          *(_DWORD *)&buf[34] = v57;
          _os_log_impl( &dword_181A5C000,  v18,  v28,  "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u, no backtrace",  buf,  0x26u);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v31 = type[0].sa_len;
        if (os_log_type_enabled(v18, (os_log_type_t)type[0].sa_len))
        {
          size_t v32 = v9[56];
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = size;
          *(_WORD *)&_BYTE buf[32] = 1024;
          *(_DWORD *)&buf[34] = v32;
          _os_log_impl( &dword_181A5C000,  v18,  v31,  "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u, backtrace limit exceeded",  buf,  0x26u);
        }
      }

LABEL_99:
      if (v17) {
        free(v17);
      }
      goto LABEL_101;
  }

                if (v127) {
                  free(v127);
                }
                *(_DWORD *)(v8 + 344) = -1;
                goto LABEL_220;
              }

              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
              v289 = (char *)_os_log_send_and_compose_impl();
              aBlock[0] = 16;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v289, aBlock, &type))
              {
                if (aBlock[0] == 17)
                {
                  v290 = (os_log_s *)__nwlog_obj();
                  nw_txt_record_t v291 = aBlock[0];
                  if (!os_log_type_enabled(v290, (os_log_type_t)aBlock[0])) {
                    goto LABEL_595;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
                  v292 = "%{public}s called with null http1_stream->parameters";
                  goto LABEL_594;
                }

                if (type == OS_LOG_TYPE_DEFAULT)
                {
                  v290 = (os_log_s *)__nwlog_obj();
                  nw_txt_record_t v291 = aBlock[0];
                  if (!os_log_type_enabled(v290, (os_log_type_t)aBlock[0])) {
                    goto LABEL_595;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
                  v292 = "%{public}s called with null http1_stream->parameters, backtrace limit exceeded";
                  goto LABEL_594;
                }

                v330 = (char *)__nw_create_backtrace_string();
                v290 = (os_log_s *)__nwlog_obj();
                nw_txt_record_t v291 = aBlock[0];
                v331 = os_log_type_enabled(v290, (os_log_type_t)aBlock[0]);
                if (v330)
                {
                  if (v331)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v330;
                    _os_log_impl( &dword_181A5C000,  v290,  v291,  "%{public}s called with null http1_stream->parameters, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v330);
                  goto LABEL_595;
                }

                if (v331)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
                  v292 = "%{public}s called with null http1_stream->parameters, no backtrace";
LABEL_594:
                  _os_log_impl(&dword_181A5C000, v290, v291, v292, buf, 0xCu);
                }
              }

          _os_log_impl(&dword_181A5C000, v67, v68, v70, buf, 0x2Au);
          goto LABEL_218;
        }

        size_t v67 = (os_log_s *)__nwlog_obj();
        size_t v68 = v265[0];
        if (os_log_type_enabled(v67, (os_log_type_t)v265[0]))
        {
          size_t v69 = *(unsigned int *)(v60 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&_BYTE buf[32] = 2048;
          *(void *)&buf[34] = v69;
          os_log_type_t v70 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
          goto LABEL_217;
        }

            if (*(void *)(v5 + 248))
            {
              if (!*(void *)(v8 + 488))
              {
                *(void *)(v5 + 256) = v8;
                *(void *)(v8 + 48_Block_object_dispose(va, 8) = v5;
                nw_protocol_set_output_handler(v5, *(void *)(v8 + 32));
                nw_protocol_set_input_handler(v8, *(void *)(v5 + 48));
                *(_OWORD *)id v5 = *(_OWORD *)v8;
                os_log_type_t v159 = v577[5];
                os_log_type_t v161 = v577[2];
                BOOL v160 = v577[3];
                *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = v577[4];
                *(_OWORD *)(v8 + 144) = v159;
                *(_OWORD *)(v8 + 96) = v161;
                *(_OWORD *)(v8 + 112) = v160;
                os_log_type_t v162 = v577[1];
                *(_OWORD *)(v8 + 64) = *v577;
                *(_OWORD *)(v8 + 80) = v162;
                nw_http_transaction_metadata_set_connection_metadata(*(void **)(v5 + 352), *(void **)(v8 + 768));
                *v13 &= 0xFFD7u;
                *(_DWORD *)(v8 + 864) = 1;
                if ((*(_BYTE *)(v8 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v163 = (os_log_s *)gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    v164 = *(void *)(v8 + 488);
                    unsigned int v165 = *(_DWORD *)(*(void *)(v8 + 480) + 372LL);
                    unsigned int v166 = *(_DWORD *)(v8 + 860);
                    if (v164) {
                      LODWORD(v164) = *(_DWORD *)(v164 + 424);
                    }
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v8 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v608 = (uint64_t)" ";
                    *(_WORD *)v609 = 1024;
                    *(_DWORD *)&v609[2] = v165;
                    *(_WORD *)&v609[6] = 1024;
                    *(_DWORD *)&v609[8] = v166;
                    *(_WORD *)&v609[12] = 1024;
                    *(_DWORD *)&v609[14] = v164;
                    _os_log_impl( &dword_181A5C000,  v163,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                  }
                }

                if ((*(_BYTE *)(v5 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  unint64_t v167 = (os_log_s *)gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                  {
                    id v168 = *(void *)(v5 + 256);
                    v169 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
                    if (v168) {
                      LODWORD(v16_Block_object_dispose(va, 8) = *(_DWORD *)(v168 + 860);
                    }
                    v170 = *(_DWORD *)(v5 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v5 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v608 = (uint64_t)" ";
                    *(_WORD *)v609 = 1024;
                    *(_DWORD *)&v609[2] = v169;
                    *(_WORD *)&v609[6] = 1024;
                    *(_DWORD *)&v609[8] = v168;
                    *(_WORD *)&v609[12] = 1024;
                    *(_DWORD *)&v609[14] = v170;
                    *(_WORD *)&v609[18] = 2048;
                    *(void *)&v609[20] = v5;
                    *(_WORD *)&v609[28] = 2048;
                    *(void *)&v609[30] = v8;
                    _os_log_impl( &dword_181A5C000,  v167,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                  }
                }

                goto LABEL_245;
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v153 = *(void *)(v8 + 488);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v8;
              *(_WORD *)&buf[22] = 2048;
              v608 = v153;
              v154 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v154, type, &aBlock))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v155 = (os_log_s *)gLogObj;
                  os_log_type_t v156 = type[0];
                  if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                    goto LABEL_243;
                  }
                  v157 = *(void *)(v8 + 488);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v8;
                  *(_WORD *)&buf[22] = 2048;
                  v608 = v157;
                  v158 = "%{public}s Connection %p already has a stream (%p)";
                  goto LABEL_242;
                }

                if (!(_BYTE)aBlock)
                {
                  v155 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v156 = type[0];
                  if (!os_log_type_enabled(v155, type[0])) {
                    goto LABEL_243;
                  }
                  v174 = *(void *)(v8 + 488);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v8;
                  *(_WORD *)&buf[22] = 2048;
                  v608 = v174;
                  v158 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                  goto LABEL_242;
                }

                os_log_type_t v171 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v155 = (os_log_s *)gLogObj;
                os_log_type_t v156 = type[0];
                id v172 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
                if (v171)
                {
                  if (v172)
                  {
                    uint64_t v173 = *(void *)(v8 + 488);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v8;
                    *(_WORD *)&buf[22] = 2048;
                    v608 = v173;
                    *(_WORD *)v609 = 2082;
                    *(void *)&v609[2] = v171;
                    _os_log_impl( &dword_181A5C000,  v155,  v156,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                  }

                  free(v171);
                  goto LABEL_243;
                }

                if (v172)
                {
                  v175 = *(void *)(v8 + 488);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v8;
                  *(_WORD *)&buf[22] = 2048;
                  v608 = v175;
                  v158 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_242:
                  _os_log_impl(&dword_181A5C000, v155, v156, v158, buf, 0x20u);
                }
              }

        if (v47) {
          free(v47);
        }
        os_log_type_t v25 = 0LL;
LABEL_45:
        *(void *)(*(void *)(*(void *)v11 + 8LL) + 24LL) = v25;
        if (*(void *)(*(void *)(*(void *)v11 + 8LL) + 24LL)) {
          return;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
        size_t v31 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v31, &__src, &type))
        {
          if (__src == 17)
          {
            size_t v32 = (os_log_s *)__nwlog_obj();
            size_t v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src)) {
              goto LABEL_184;
            }
            *(_DWORD *)buf = 136446210;
            size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            uint64_t v34 = "%{public}s called with null cursor";
            goto LABEL_183;
          }

          if (type == OS_LOG_TYPE_DEFAULT)
          {
            size_t v32 = (os_log_s *)__nwlog_obj();
            size_t v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src)) {
              goto LABEL_184;
            }
            *(_DWORD *)buf = 136446210;
            size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            uint64_t v34 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_183;
          }

          unint64_t v55 = (char *)__nw_create_backtrace_string();
          size_t v32 = (os_log_s *)__nwlog_obj();
          size_t v33 = __src;
          id v56 = os_log_type_enabled(v32, (os_log_type_t)__src);
          if (!v55)
          {
            if (!v56) {
              goto LABEL_184;
            }
            *(_DWORD *)buf = 136446210;
            size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            uint64_t v34 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_183;
          }

          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            os_log_type_t v84 = 2082;
            __int16 v85 = v55;
            _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null cursor, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v55);
        }

        if (v47) {
          free(v47);
        }
        os_log_type_t v25 = 0LL;
LABEL_45:
        *(void *)(*(void *)(*(void *)v11 + 8LL) + 24LL) = v25;
        if (*(void *)(*(void *)(*(void *)v11 + 8LL) + 24LL)) {
          return;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
        size_t v31 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v31, &__src, &type))
        {
          if (__src == 17)
          {
            size_t v32 = (os_log_s *)__nwlog_obj();
            size_t v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src)) {
              goto LABEL_184;
            }
            *(_DWORD *)buf = 136446210;
            size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            uint64_t v34 = "%{public}s called with null cursor";
            goto LABEL_183;
          }

          if (type == OS_LOG_TYPE_DEFAULT)
          {
            size_t v32 = (os_log_s *)__nwlog_obj();
            size_t v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src)) {
              goto LABEL_184;
            }
            *(_DWORD *)buf = 136446210;
            size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            uint64_t v34 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_183;
          }

          unint64_t v55 = (char *)__nw_create_backtrace_string();
          size_t v32 = (os_log_s *)__nwlog_obj();
          size_t v33 = __src;
          id v56 = os_log_type_enabled(v32, (os_log_type_t)__src);
          if (!v55)
          {
            if (!v56) {
              goto LABEL_184;
            }
            *(_DWORD *)buf = 136446210;
            size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            uint64_t v34 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_183;
          }

          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            size_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            os_log_type_t v84 = 2082;
            __int16 v85 = v55;
            _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null cursor, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v55);
        }

        if (v47) {
          free(v47);
        }
        os_log_type_t v25 = 0LL;
LABEL_45:
        *(void *)(*(void *)(*(void *)v11 + 8LL) + 24LL) = v25;
        if (*(void *)(*(void *)(*(void *)v11 + 8LL) + 24LL)) {
          return;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        size_t v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
        size_t v31 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v31, &__src, &type))
        {
          if (__src == 17)
          {
            size_t v32 = (os_log_s *)__nwlog_obj();
            size_t v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src)) {
              goto LABEL_184;
            }
            *(_DWORD *)buf = 136446210;
            size_t v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
            uint64_t v34 = "%{public}s called with null cursor";
            goto LABEL_183;
          }

          if (type == OS_LOG_TYPE_DEFAULT)
          {
            size_t v32 = (os_log_s *)__nwlog_obj();
            size_t v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src)) {
              goto LABEL_184;
            }
            *(_DWORD *)buf = 136446210;
            size_t v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
            uint64_t v34 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_183;
          }

          unint64_t v55 = (char *)__nw_create_backtrace_string();
          size_t v32 = (os_log_s *)__nwlog_obj();
          size_t v33 = __src;
          id v56 = os_log_type_enabled(v32, (os_log_type_t)__src);
          if (!v55)
          {
            if (!v56) {
              goto LABEL_184;
            }
            *(_DWORD *)buf = 136446210;
            size_t v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
            uint64_t v34 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_183;
          }

          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            size_t v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
            os_log_type_t v84 = 2082;
            __int16 v85 = v55;
            _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null cursor, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v55);
        }

LABEL_218:
            if (!v64) {
              goto LABEL_21;
            }
LABEL_219:
            free(v64);
            goto LABEL_21;
          }

          os_log_type_t v84 = v4;
          __int16 v85 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v87 = v178[0];
          v88 = os_log_type_enabled(v86, (os_log_type_t)v178[0]);
          if (v85)
          {
            if (v88)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v18;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v85;
              _os_log_impl( &dword_181A5C000,  v86,  v87,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            id v4 = v84;
            free(v85);
            if (v64) {
              goto LABEL_219;
            }
          }

          else
          {
            if (v88)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v18;
              _os_log_impl( &dword_181A5C000,  v86,  v87,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, no backtrace",  buf,  0x12u);
            }

            id v4 = v84;
            if (v64) {
              goto LABEL_219;
            }
          }
        }

        else
        {
          size_t v67 = *((unsigned __int16 *)v29 + 20);
          if (v67 + 42 == v18)
          {
            size_t v68 = *((_OWORD *)v29 + 1);
            *(_OWORD *)buf = *(_OWORD *)v29;
            *(_OWORD *)&buf[16] = v68;
            *(void *)&_BYTE buf[32] = *((void *)v29 + 4);
            size_t v69 = nw_protocol_copy_definition_for_identifier(buf);
            os_log_type_t v70 = v69;
            if (v69)
            {
              if (*((_WORD *)v29 + 20)) {
                deserialized_options = nw_protocol_create_deserialized_options( v69,  (uint64_t)(v29 + 42),  *((unsigned __int16 *)v29 + 20));
              }
              else {
                deserialized_options = nw_protocol_create_options(v69);
              }
              size_t v95 = (os_log_s *)deserialized_options;
              if (deserialized_options)
              {
                os_log_type_t v97 = deserialized_options;
                v98 = v10->assigned_protocol;
                v10->assigned_uint64_t protocol = (OS_nw_protocol_options *)v97;
              }

              else
              {
                __nwlog_obj();
                v98 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v178 = 136446466;
                  unint64_t v179 = "nw_path_create_flow_result_from_tlv";
                  id v180 = 2112;
                  v181 = v70;
                  _os_log_impl( &dword_181A5C000,  v98,  OS_LOG_TYPE_DEFAULT,  "%{public}s Failed to deserialize options for %@",  v178,  0x16u);
                }
              }
            }

            else
            {
              __nwlog_obj();
              size_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v178 = 136446466;
                unint64_t v179 = "nw_path_create_flow_result_from_tlv";
                id v180 = 2080;
                v181 = buf;
                _os_log_impl( &dword_181A5C000,  v95,  OS_LOG_TYPE_DEFAULT,  "%{public}s No protocol definition registered for %s",  v178,  0x16u);
              }
            }
          }

          else
          {
            __nwlog_obj();
            size_t v82 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v67;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v18;
            nw_endpoint_t v64 = (char *)_os_log_send_and_compose_impl();

            v178[0] = 16;
            unsigned int v177 = 0;
            if (v178[0] == 17)
            {
              __nwlog_obj();
              v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              size_t v83 = v178[0];
              if (os_log_type_enabled(v65, (os_log_type_t)v178[0]))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v67;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v18;
                _os_log_impl( &dword_181A5C000,  v65,  v83,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u)",  buf,  0x18u);
              }

              goto LABEL_217;
            }

            if (!v177)
            {
              __nwlog_obj();
              v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v99 = v178[0];
              if (os_log_type_enabled(v65, (os_log_type_t)v178[0]))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v67;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v18;
                _os_log_impl( &dword_181A5C000,  v65,  v99,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), backtra ce limit exceeded",  buf,  0x18u);
              }

              goto LABEL_217;
            }

            os_log_type_t v90 = v4;
            id v91 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            id v93 = v178[0];
            os_log_type_t v94 = os_log_type_enabled(v92, (os_log_type_t)v178[0]);
            if (v91)
            {
              if (v94)
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v67;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v18;
                *(_WORD *)&_BYTE buf[24] = 2082;
                *(void *)&buf[26] = v91;
                _os_log_impl( &dword_181A5C000,  v92,  v93,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), dumping backtrace:%{public}s",  buf,  0x22u);
              }

              id v4 = v90;
              free(v91);
              if (v64) {
                goto LABEL_219;
              }
            }

            else
            {
              if (v94)
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v67;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v18;
                _os_log_impl( &dword_181A5C000,  v92,  v93,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), no backtrace",  buf,  0x18u);
              }

              id v4 = v90;
              if (v64) {
                goto LABEL_219;
              }
            }
          }
        }

        goto LABEL_21;
      default:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v32 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v17;
          _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_ERROR,  "%{public}s Received unknown flow result TLV (type %d)",  buf,  0x12u);
        }

        goto LABEL_20;
    }
  }

          nw_http2_remove_from_protocol_table((uint64_t)handle, (uint64_t)a2);
          return 0LL;
        }

        *(void *)(stream_node_from_id + 32) = a2;
        v53[4] = v56;
        while (1)
        {
          id v91 = v204[v57];
          *(_BYTE *)(v56 + 191 + v57) = v91;
          if (!v91) {
            break;
          }
          if (++v57 == 83)
          {
            *(_BYTE *)(v56 + 274) = 0;
            break;
          }
        }

        if (((*(unsigned __int16 *)(v56 + 188) | (*(unsigned __int8 *)(v56 + 190) << 16)) & 0x80000) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v92 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v94 = *(_DWORD *)(v56 + 176);
            id v93 = *(_DWORD *)(v56 + 180);
            *(_DWORD *)buf = 136448258;
            v191 = "nw_protocol_http2_add_input_handler";
            os_log_type_t v192 = 2082;
            id v193 = v56 + 191;
            v194 = 2080;
            v195 = (uint64_t)" ";
            os_log_type_t v196 = 1024;
            v197 = v93;
            v198 = 1024;
            *(_DWORD *)v199 = v94;
            *(_WORD *)&v199[4] = 1024;
            *(_DWORD *)&v199[6] = v5;
            *(_WORD *)&v199[10] = 2080;
            *(void *)&v199[12] = v204;
            *(_WORD *)&v199[20] = 1024;
            *(_DWORD *)&v199[22] = v94;
            *(_WORD *)os_log_type_t v200 = 2048;
            *(void *)&v200[2] = v56;
            _os_log_impl( &dword_181A5C000,  v92,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%d> connected incoming stream id %d for %s to existing stream %d (%p)",  buf,  0x4Cu);
          }
        }

      if (!v53) {
        goto LABEL_219;
      }
      goto LABEL_218;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v93 = "__nw_protocol_finalize_output_frames";
    __int128 v53 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v90 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v62 = (os_log_s *)__nwlog_obj();
      nw_txt_record_t v63 = type;
      if (!os_log_type_enabled(v62, type)) {
        goto LABEL_217;
      }
      *(_DWORD *)buf = 136446210;
      id v93 = "__nw_protocol_finalize_output_frames";
      char v57 = "%{public}s called with null frames";
    }

    else if (v90)
    {
      os_log_type_t v77 = (char *)__nw_create_backtrace_string();
      size_t v62 = (os_log_s *)__nwlog_obj();
      nw_txt_record_t v63 = type;
      size_t v78 = os_log_type_enabled(v62, type);
      if (v77)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446466;
          id v93 = "__nw_protocol_finalize_output_frames";
          os_log_type_t v94 = 2082;
          size_t v95 = (nw_protocol_identifier *)v77;
          _os_log_impl( &dword_181A5C000,  v62,  v63,  "%{public}s called with null frames, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v77);
        if (!v53)
        {
LABEL_219:
          size_t v40 = 0LL;
          if (handle != &nw_protocol_ref_counted_handle) {
            return v40;
          }
LABEL_85:
          if (output_handler->handle == &nw_protocol_ref_counted_handle)
          {
            size_t v42 = output_handler[1].callbacks;
            if (v42)
            {
              uint64_t v43 = (nw_protocol_callbacks *)((char *)v42 - 1);
              output_handler[1].callbacks = v43;
              if (!v43)
              {
                char v44 = *(void (***)(void))output_handler[1].flow_id;
                if (v44)
                {
                  *(void *)output_handler[1].flow_id = 0LL;
                  v44[2](v44);
                  _Block_release(v44);
                }

                if ((output_handler[1].flow_id[8] & 1) != 0)
                {
                  unsigned __int8 v45 = *(const void **)output_handler[1].flow_id;
                  if (v45) {
                    _Block_release(v45);
                  }
                }

                free(output_handler);
              }
            }
          }

          return v40;
        }

  if (v120) {
    free(v120);
  }
  v65 = v243;
  uint64_t node = v28;
LABEL_98:
  nw_txt_record_t v63 = v245;
LABEL_99:
  if ((*(_WORD *)(v65 + 204) & 0x80) == 0) {
    goto LABEL_143;
  }
  *(_WORD *)os_log_type_t type = 1;
  size_t v67 = nw_hash_node_get_extra(node);
  size_t v68 = 0;
  while (2)
  {
    os_log_type_t v70 = (void *)v65;
    BOOL v71 = (void *)(v65 + 16);
    v65 = *(void *)(v65 + 16);
    if (!v65 && !v70[3]) {
      v65 = 0LL;
    }
    --*(_DWORD *)(v63 + 416);
    size_t v72 = v70[4];
    id v73 = (void *)v70[5];
    if (v72)
    {
      *(void *)(v72 + 40) = v73;
      id v73 = (void *)v70[5];
    }

    else
    {
      *(void *)(v67 + _Block_object_dispose(va, 8) = v73;
    }

    *id v73 = v72;
    v70[4] = 0LL;
    v70[5] = 0LL;
    __int16 v74 = v70[2];
    os_log_type_t v75 = (void *)v70[3];
    if (v74)
    {
      *(void *)(v74 + 24) = v75;
      os_log_type_t v75 = (void *)v70[3];
    }

    else
    {
      *(void *)(v63 + 32_Block_object_dispose(va, 8) = v75;
    }

    const char *v75 = v74;
    *BOOL v71 = 0LL;
    v71[1] = 0LL;
    if ((v68 & 1) != 0) {
      goto LABEL_101;
    }
    BOOL v76 = os_packet_decrement_use_count();
    if (!v76)
    {
      size_t v68 = 0;
      goto LABEL_102;
    }

    os_log_type_t v77 = v76;
    if ((nw_channel_check_defunct(v63) & 1) != 0)
    {
LABEL_101:
      size_t v68 = 1;
      goto LABEL_102;
    }

    os_log_type_t v244 = v65;
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v254 = "nw_channel_add_input_frames";
    v255 = 1024;
    LODWORD(v256[0]) = v77;
    size_t v78 = (char *)_os_log_send_and_compose_impl();
    v252 = OS_LOG_TYPE_ERROR;
    os_log_type_t v246 = 0;
    if (v252 == OS_LOG_TYPE_FAULT)
    {
      nw_txt_record_t v79 = (os_log_s *)__nwlog_obj();
      os_log_type_t v80 = v252;
      if (os_log_type_enabled(v79, v252))
      {
        *(_DWORD *)buf = 136446466;
        v254 = "nw_channel_add_input_frames";
        v255 = 1024;
        LODWORD(v256[0]) = v77;
        __int16 v81 = v79;
        size_t v82 = v80;
        size_t v83 = "%{public}s os_packet_decrement_use_count() %{darwin.errno}d";
        goto LABEL_129;
      }

      goto LABEL_130;
    }

    if (!v246)
    {
      v88 = (os_log_s *)__nwlog_obj();
      os_log_type_t v89 = v252;
      if (!os_log_type_enabled(v88, v252)) {
        goto LABEL_130;
      }
      *(_DWORD *)buf = 136446466;
      v254 = "nw_channel_add_input_frames";
      v255 = 1024;
      LODWORD(v256[0]) = v77;
      __int16 v81 = v88;
      size_t v82 = v89;
      size_t v83 = "%{public}s os_packet_decrement_use_count() %{darwin.errno}d, backtrace limit exceeded";
LABEL_129:
      _os_log_impl(&dword_181A5C000, v81, v82, v83, buf, 0x12u);
      goto LABEL_130;
    }

    os_log_type_t v84 = (char *)__nw_create_backtrace_string();
    __int16 v85 = (os_log_s *)__nwlog_obj();
    v86 = v252;
    id v87 = os_log_type_enabled(v85, v252);
    if (v84)
    {
      if (v87)
      {
        *(_DWORD *)buf = 136446722;
        v254 = "nw_channel_add_input_frames";
        v255 = 1024;
        LODWORD(v256[0]) = v77;
        WORD2(v256[0]) = 2082;
        *(void *)((char *)v256 + 6) = v84;
        _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s os_packet_decrement_use_count() %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(v84);
      goto LABEL_130;
    }

    if (v87)
    {
      *(_DWORD *)buf = 136446466;
      v254 = "nw_channel_add_input_frames";
      v255 = 1024;
      LODWORD(v256[0]) = v77;
      __int16 v81 = v85;
      size_t v82 = v86;
      size_t v83 = "%{public}s os_packet_decrement_use_count() %{darwin.errno}d, no backtrace";
      goto LABEL_129;
    }

LABEL_269:
LABEL_276:
            if (!v57) {
              goto LABEL_278;
            }
            goto LABEL_277;
          case 6u:
            *((_BYTE *)v43 + 1) = 0;
            *uint64_t v43 = v51;
            *((_WORD *)v43 + 1) = 0;
            *((_DWORD *)v43 + 1) = 6;
            os_log_type_t v80 = (const char *)nw_endpoint_get_application_service_alias(v10);
            __int16 v81 = v80;
            if (v80)
            {
              size_t v82 = strlen(v80);
              size_t v83 = v82 + 1;
              if (v82 == -1LL) {
                size_t v83 = 0LL;
              }
              else {
                memcpy(v43 + 8, v81, v83);
              }
            }

            else
            {
              size_t v83 = 1LL;
            }

            BOOL v103 = (const char *)nw_endpoint_get_application_service_name(v10);
            v104 = v103;
            if (v103)
            {
              size_t v105 = strlen(v103);
              size_t v106 = v105 + 1;
              if (v105 == -1LL) {
                size_t v106 = 0LL;
              }
              else {
                memcpy(&v43[v83 + 8], v104, v106);
              }
            }

            else
            {
              size_t v106 = 1LL;
            }

            os_log_type_t v107 = (const char *)nw_endpoint_get_device_name(v10);
            v108 = v107;
            size_t v109 = v106 + v83;
            if (v107)
            {
              size_t v110 = strlen(v107);
              size_t v111 = v110 + 1;
              if (v110 == -1LL) {
                size_t v111 = 0LL;
              }
              else {
                memcpy(&v43[v109 + 8], v108, v111);
              }
            }

            else
            {
              size_t v111 = 1LL;
            }

            os_log_type_t v112 = (const char *)nw_endpoint_get_device_model(v10);
            BOOL v113 = v112;
            size_t v114 = v111 + v109;
            if (v112)
            {
              size_t v115 = strlen(v112);
              size_t v116 = v115 + 1;
              if (v115 == -1LL) {
                size_t v116 = 0LL;
              }
              else {
                memcpy(&v43[v114 + 8], v113, v116);
              }
            }

            else
            {
              size_t v116 = 1LL;
            }

            os_log_type_t v117 = (const char *)nw_endpoint_get_contact_id(v10);
            char v118 = v117;
            size_t v119 = v116 + v114;
            if (v117)
            {
              size_t v120 = strlen(v117);
              size_t v121 = v120 + 1;
              if (v120 == -1LL) {
                size_t v121 = 0LL;
              }
              else {
                memcpy(&v43[v119 + 8], v118, v121);
              }
            }

            else
            {
              size_t v121 = 1LL;
            }

            size_t v122 = v121 + v119;
            v123 = v43 + 8;
            *(_DWORD *)&v43[v122 + 8] = nw_endpoint_get_device_color(v10);
            *(_DWORD *)&v123[v122 + 4] = nw_endpoint_get_advertised_route(v10);
            memset(v312, 0, sizeof(v312));
            nw_endpoint_get_service_identifier(v10, v312);
            *(_OWORD *)&v123[v122 + 8] = *(_OWORD *)v312;
            if (v291) {
              memcpy(&v123[v122 + 24], *((const void **)v291 + 1), *((void *)v291 + 2));
            }
            unint64_t v55 = v52 + 5;
            if (v297 - a3 >= v52 + 5) {
              goto LABEL_195;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v124 = (id)gLogObj;
            *(_DWORD *)buf = 136447490;
            v314 = "nw_necp_append_tlv";
            __int16 v315 = 2048;
            *(void *)v316 = a3;
            *(_WORD *)&v316[8] = 2048;
            *(void *)&v316[10] = v52 + 5;
            *(_WORD *)&v316[18] = 2048;
            *(void *)v317 = v297;
            *(_WORD *)&v317[8] = 1024;
            *(_DWORD *)v318 = a2;
            *(_WORD *)&v318[4] = 1024;
            *(_DWORD *)&v318[6] = v52;
            LODWORD(v28_Block_object_dispose(va, 8) = 54;
            v287 = buf;
            char v57 = (char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            if (uu[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v58 = (os_log_s *)(id)gLogObj;
              os_log_type_t v125 = uu[0];
              if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                _os_log_impl( &dword_181A5C000,  v58,  v125,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
              }

            LOBYTE(v64) = 1;
LABEL_310:

            goto LABEL_271;
          }
        }
      }

      LOBYTE(v64) = 1;
      goto LABEL_271;
    }

              goto LABEL_149;
            }

            if (type == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              char v138 = v154;
              if (os_log_type_enabled(v103, (os_log_type_t)v154))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl( &dword_181A5C000,  v103,  v138,  "%{public}s called with null new_input_handler, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_269;
            }

            size_t v116 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v125 = v154;
            v126 = os_log_type_enabled(v103, (os_log_type_t)v154);
            if (!v116)
            {
              if (v126)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl( &dword_181A5C000,  v103,  v125,  "%{public}s called with null new_input_handler, no backtrace",  buf,  0xCu);
              }

              goto LABEL_269;
            }

            if (v126)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
              v148 = 2082;
              os_log_type_t v149 = v116;
              _os_log_impl( &dword_181A5C000,  v103,  v125,  "%{public}s called with null new_input_handler, dumping backtrace:%{public}s",  buf,  0x16u);
            }
          }

          else
          {
            __nwlog_obj();
            size_t v109 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
            __int128 v53 = (const char *)_os_log_send_and_compose_impl();

            LOBYTE(v154) = 16;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            if (v154 == 17)
            {
              __nwlog_obj();
              BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              size_t v110 = v154;
              if (os_log_type_enabled(v103, (os_log_type_t)v154))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl(&dword_181A5C000, v103, v110, "%{public}s called with null old_input_handler", buf, 0xCu);
              }

              goto LABEL_269;
            }

            if (type == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              char v137 = v154;
              if (os_log_type_enabled(v103, (os_log_type_t)v154))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl( &dword_181A5C000,  v103,  v137,  "%{public}s called with null old_input_handler, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_269;
            }

            size_t v116 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v123 = v154;
            id v124 = os_log_type_enabled(v103, (os_log_type_t)v154);
            if (!v116)
            {
              if (v124)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
                _os_log_impl( &dword_181A5C000,  v103,  v123,  "%{public}s called with null old_input_handler, no backtrace",  buf,  0xCu);
              }

              goto LABEL_269;
            }

            if (v124)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
              v148 = 2082;
              os_log_type_t v149 = v116;
              _os_log_impl( &dword_181A5C000,  v103,  v123,  "%{public}s called with null old_input_handler, dumping backtrace:%{public}s",  buf,  0x16u);
            }
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v107 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
          __int128 v53 = (const char *)_os_log_send_and_compose_impl();

          LOBYTE(v154) = 16;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          if (v154 == 17)
          {
            __nwlog_obj();
            BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v108 = v154;
            if (os_log_type_enabled(v103, (os_log_type_t)v154))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
              _os_log_impl( &dword_181A5C000,  v103,  v108,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
            }

            goto LABEL_269;
          }

          if (type == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v136 = v154;
            if (os_log_type_enabled(v103, (os_log_type_t)v154))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
              _os_log_impl( &dword_181A5C000,  v103,  v136,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_269;
          }

          size_t v116 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          size_t v121 = v154;
          size_t v122 = os_log_type_enabled(v103, (os_log_type_t)v154);
          if (!v116)
          {
            if (v122)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
              _os_log_impl( &dword_181A5C000,  v103,  v121,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
            }

            goto LABEL_269;
          }

          if (v122)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
            v148 = 2082;
            os_log_type_t v149 = v116;
            _os_log_impl( &dword_181A5C000,  v103,  v121,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }
      }

      else
      {
        __nwlog_obj();
        size_t v105 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
        __int128 v53 = (const char *)_os_log_send_and_compose_impl();

        LOBYTE(v154) = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (v154 == 17)
        {
          __nwlog_obj();
          BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          size_t v106 = v154;
          if (os_log_type_enabled(v103, (os_log_type_t)v154))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
            _os_log_impl( &dword_181A5C000,  v103,  v106,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
          }

          goto LABEL_269;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v135 = v154;
          if (os_log_type_enabled(v103, (os_log_type_t)v154))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
            _os_log_impl( &dword_181A5C000,  v103,  v135,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_269;
        }

        size_t v116 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v119 = v154;
        size_t v120 = os_log_type_enabled(v103, (os_log_type_t)v154);
        if (!v116)
        {
          if (v120)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
            _os_log_impl( &dword_181A5C000,  v103,  v119,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_269;
        }

        if (v120)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
          v148 = 2082;
          os_log_type_t v149 = v116;
          _os_log_impl( &dword_181A5C000,  v103,  v119,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v102 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
      __int128 v53 = (const char *)_os_log_send_and_compose_impl();

      LOBYTE(v154) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (v154 == 17)
      {
        __nwlog_obj();
        BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v104 = v154;
        if (os_log_type_enabled(v103, (os_log_type_t)v154))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
          _os_log_impl(&dword_181A5C000, v103, v104, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_269;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v134 = v154;
        if (os_log_type_enabled(v103, (os_log_type_t)v154))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
          _os_log_impl( &dword_181A5C000,  v103,  v134,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_269;
      }

      size_t v116 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v117 = v154;
      char v118 = os_log_type_enabled(v103, (os_log_type_t)v154);
      if (!v116)
      {
        if (v118)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
          _os_log_impl(&dword_181A5C000, v103, v117, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_269;
      }

      if (v118)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
        v148 = 2082;
        os_log_type_t v149 = v116;
        _os_log_impl( &dword_181A5C000,  v103,  v117,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(v116);
    goto LABEL_149;
  }

  __nwlog_obj();
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
  os_log_type_t v99 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v154) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v99, &v154, &type))
  {
    if (v154 == 17)
    {
      __nwlog_obj();
      size_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v101 = v154;
      if (os_log_type_enabled(v100, (os_log_type_t)v154))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
        _os_log_impl(&dword_181A5C000, v100, v101, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (type)
    {
      BOOL v113 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v114 = v154;
      size_t v115 = os_log_type_enabled(v100, (os_log_type_t)v154);
      if (v113)
      {
        if (v115)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
          v148 = 2082;
          os_log_type_t v149 = v113;
          _os_log_impl( &dword_181A5C000,  v100,  v114,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v113);
        goto LABEL_252;
      }

      if (v115)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
        _os_log_impl(&dword_181A5C000, v100, v114, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      size_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v133 = v154;
      if (os_log_type_enabled(v100, (os_log_type_t)v154))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_replace_input_handler";
        _os_log_impl( &dword_181A5C000,  v100,  v133,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

                      goto LABEL_270;
                    }

                    if (!(_BYTE)v131)
                    {
                      __nwlog_obj();
                      v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v123 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl( &dword_181A5C000,  v101,  v123,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
                      }

                      goto LABEL_269;
                    }

                    size_t v111 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    size_t v116 = type[0];
                    os_log_type_t v117 = os_log_type_enabled(v101, type[0]);
                    if (!v111)
                    {
                      if (v117)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl( &dword_181A5C000,  v101,  v116,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
                      }

                      goto LABEL_269;
                    }

                    if (v117)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      BOOL v136 = 2082;
                      char v137 = v111;
                      _os_log_impl( &dword_181A5C000,  v101,  v116,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
                    }
                  }

                  else
                  {
                    __nwlog_obj();
                    BOOL v103 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                    os_log_type_t v125 = (void *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v131) = 0;
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v104 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl( &dword_181A5C000,  v101,  v104,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
                      }

                      goto LABEL_269;
                    }

                    if (!(_BYTE)v131)
                    {
                      __nwlog_obj();
                      v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      size_t v122 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl( &dword_181A5C000,  v101,  v122,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
                      }

                      goto LABEL_269;
                    }

                    size_t v111 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    size_t v114 = type[0];
                    size_t v115 = os_log_type_enabled(v101, type[0]);
                    if (!v111)
                    {
                      if (v115)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl( &dword_181A5C000,  v101,  v114,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
                      }

                      goto LABEL_269;
                    }

                    if (v115)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      BOOL v136 = 2082;
                      char v137 = v111;
                      _os_log_impl( &dword_181A5C000,  v101,  v114,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
                    }
                  }
                }

                else
                {
                  __nwlog_obj();
                  size_t v100 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                  os_log_type_t v125 = (void *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(v131) = 0;
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v102 = type[0];
                    if (os_log_type_enabled(v101, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      _os_log_impl(&dword_181A5C000, v101, v102, "%{public}s called with null instance", buf, 0xCu);
                    }

                    goto LABEL_269;
                  }

                  if (!(_BYTE)v131)
                  {
                    __nwlog_obj();
                    v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    size_t v121 = type[0];
                    if (os_log_type_enabled(v101, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      _os_log_impl( &dword_181A5C000,  v101,  v121,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
                    }

                    goto LABEL_269;
                  }

                  size_t v111 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v112 = type[0];
                  BOOL v113 = os_log_type_enabled(v101, type[0]);
                  if (!v111)
                  {
                    if (v113)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      _os_log_impl( &dword_181A5C000,  v101,  v112,  "%{public}s called with null instance, no backtrace",  buf,  0xCu);
                    }

                    goto LABEL_269;
                  }

                  if (v113)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                    BOOL v136 = 2082;
                    char v137 = v111;
                    _os_log_impl( &dword_181A5C000,  v101,  v112,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
                  }
                }

                free(v111);
                goto LABEL_270;
            }
          }

          __nwlog_obj();
          os_log_type_t v80 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          id v73 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v131) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __int16 v81 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_181A5C000, v74, v81, "%{public}s called with null other_protocol", buf, 0xCu);
            }

            goto LABEL_206;
          }

          if (!(_BYTE)v131)
          {
            __nwlog_obj();
            __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v99 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl( &dword_181A5C000,  v74,  v99,  "%{public}s called with null other_protocol, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_206;
          }

          v88 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v93 = type[0];
          os_log_type_t v94 = os_log_type_enabled(v74, type[0]);
          if (!v88)
          {
            if (v94)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl( &dword_181A5C000,  v74,  v93,  "%{public}s called with null other_protocol, no backtrace",  buf,  0xCu);
            }

            goto LABEL_206;
          }

          if (v94)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            BOOL v136 = 2082;
            char v137 = v88;
            _os_log_impl( &dword_181A5C000,  v74,  v93,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }

        else
        {
          __nwlog_obj();
          size_t v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          id v73 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v131) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            nw_txt_record_t v79 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl( &dword_181A5C000,  v74,  v79,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
            }

            goto LABEL_206;
          }

          if (!(_BYTE)v131)
          {
            __nwlog_obj();
            __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v98 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl( &dword_181A5C000,  v74,  v98,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_206;
          }

          v88 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v91 = type[0];
          os_log_type_t v92 = os_log_type_enabled(v74, type[0]);
          if (!v88)
          {
            if (v92)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl( &dword_181A5C000,  v74,  v91,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
            }

            goto LABEL_206;
          }

          if (v92)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            BOOL v136 = 2082;
            char v137 = v88;
            _os_log_impl( &dword_181A5C000,  v74,  v91,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v76 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        id v73 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v131) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v77 = type[0];
          if (os_log_type_enabled(v74, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            _os_log_impl( &dword_181A5C000,  v74,  v77,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
          }

          goto LABEL_206;
        }

        if (!(_BYTE)v131)
        {
          __nwlog_obj();
          __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v97 = type[0];
          if (os_log_type_enabled(v74, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            _os_log_impl( &dword_181A5C000,  v74,  v97,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_206;
        }

        v88 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v89 = type[0];
        os_log_type_t v90 = os_log_type_enabled(v74, type[0]);
        if (!v88)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            _os_log_impl( &dword_181A5C000,  v74,  v89,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_206;
        }

        if (v90)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          BOOL v136 = 2082;
          char v137 = v88;
          _os_log_impl( &dword_181A5C000,  v74,  v89,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      free(v88);
      if (!v73) {
        goto LABEL_122;
      }
      goto LABEL_208;
    }

    __nwlog_obj();
    size_t v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
    id v73 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v131) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v75 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_181A5C000, v74, v75, "%{public}s called with null instance", buf, 0xCu);
      }
    }

    else if ((_BYTE)v131)
    {
      __int16 v85 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v86 = type[0];
      id v87 = os_log_type_enabled(v74, type[0]);
      if (v85)
      {
        if (v87)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          BOOL v136 = 2082;
          char v137 = v85;
          _os_log_impl( &dword_181A5C000,  v74,  v86,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v85);
LABEL_207:
        if (!v73) {
          goto LABEL_122;
        }
LABEL_208:
        free(v73);
        goto LABEL_122;
      }

      if (v87)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_181A5C000, v74, v86, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v96 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl( &dword_181A5C000,  v74,  v96,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    os_log_type_t v94 = v139;
    if (v123)
    {
      size_t v95 = (char *)v123;
      goto LABEL_199;
    }

          *(_DWORD *)os_log_type_t type = 0;
          BOOL v130 = (const void *)nw_frame_unclaimed_bytes(*(void *)(a1 + 176), type);
          if (v130)
          {
            else {
              __int16 v85 = v21;
            }
            memcpy(&v6[v8], v130, v85);
            BOOL v132 = *(void *)(a1 + 104);
            if ((!v132 || (*(__int16 *)(v132 + 388) & 0x80000000) == 0) && gLogDatapath)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v209 = (os_log_s *)gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
              {
                os_log_type_t v210 = *(void *)(a1 + 104);
                BOOL v211 = "";
                os_log_type_t v212 = v210 == 0;
                os_log_type_t v213 = *(_DWORD *)(v210 + 368);
                os_log_type_t v214 = (const char *)(v210 + 390);
                os_log_type_t v256 = "send_data_callback_block_invoke";
                v257 = 2082;
                if (v212) {
                  os_log_type_t v214 = "";
                }
                *(_DWORD *)buf = 136447234;
                if (!v212) {
                  BOOL v211 = " ";
                }
                os_log_type_t v258 = v214;
                os_log_type_t v259 = 2080;
                os_log_type_t v260 = (size_t)v211;
                os_log_type_t v261 = 1024;
                *(_DWORD *)v262 = v213;
                *(_WORD *)&v262[4] = 1024;
                *(_DWORD *)&v262[6] = v85;
                _os_log_impl( &dword_181A5C000,  v209,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> wrote %u bytes of body data (no padding)",  buf,  0x2Cu);
              }
            }

            nw_frame_claim(*(void *)(a1 + 176), v131, v85, 0);
            LODWORD(v_Block_object_dispose(va, 8) = v85 + v8;
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v85;
            id v87 = *(void *)(a1 + 40);
LABEL_277:
            *(_DWORD *)(*(void *)(v87 + 8) + 24LL) += v85;
            goto LABEL_278;
          }

          if (*(void *)(a1 + 128)) {
            goto LABEL_278;
          }
          BOOL v141 = *(void *)(a1 + 104);
          if (!v141 || (*(__int16 *)(v141 + 388) & 0x80000000) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v142 = *(void *)(a1 + 104);
            os_log_type_t v143 = (const char *)(v142 + 390);
            os_log_type_t v144 = v142 == 0;
            os_log_type_t v145 = *(_DWORD *)(v142 + 368);
            *(_DWORD *)buf = 136446978;
            if (v144) {
              os_log_type_t v143 = "";
            }
            os_log_type_t v256 = "send_data_callback_block_invoke";
            if (v144) {
              os_log_type_t v146 = "";
            }
            else {
              os_log_type_t v146 = " ";
            }
            v257 = 2082;
            os_log_type_t v258 = v143;
            os_log_type_t v259 = 2080;
            os_log_type_t v260 = (size_t)v146;
            os_log_type_t v261 = 1024;
            *(_DWORD *)v262 = v145;
            os_log_type_t v94 = (char *)_os_log_send_and_compose_impl();
            v253 = OS_LOG_TYPE_ERROR;
            v251 = 0;
            if (v253 == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              size_t v95 = (os_log_s *)gconnectionLogObj;
              id v96 = v253;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v253)) {
                goto LABEL_343;
              }
              v147 = *(void *)(a1 + 104);
              v98 = (const char *)(v147 + 390);
              v148 = v147 == 0;
              if (!v147) {
                v98 = "";
              }
              size_t v100 = *(_DWORD *)(v147 + 368);
              if (v148) {
                v101 = "";
              }
              else {
                v101 = " ";
              }
LABEL_219:
              *(_DWORD *)buf = 136446978;
              os_log_type_t v256 = "send_data_callback_block_invoke";
              v257 = 2082;
              os_log_type_t v258 = v98;
              os_log_type_t v259 = 2080;
              os_log_type_t v260 = (size_t)v101;
              os_log_type_t v261 = 1024;
              *(_DWORD *)v262 = v100;
              os_log_type_t v102 = "%{public}s %{public}s%s<i%u> unexpected NULL in source frame";
LABEL_342:
              _os_log_impl(&dword_181A5C000, v95, v96, v102, buf, 0x26u);
LABEL_343:
              if (v94) {
                free(v94);
              }
              return 0LL;
            }

            if (v251)
            {
              size_t v111 = (char *)__nw_create_backtrace_string();
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              size_t v95 = (os_log_s *)gconnectionLogObj;
              id v96 = v253;
              v157 = os_log_type_enabled((os_log_t)gconnectionLogObj, v253);
              if (v111)
              {
                if (v157)
                {
                  BOOL v113 = *(void *)(a1 + 104);
                  size_t v114 = (const char *)(v113 + 390);
                  if (v113)
                  {
                    size_t v115 = " ";
                  }

                  else
                  {
                    size_t v114 = "";
                    size_t v115 = "";
                  }

                  goto LABEL_325;
                }

LABEL_275:
              goto LABEL_276;
            }

            if (type == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              BOOL v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v146 = uu[0];
              if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                _os_log_impl( &dword_181A5C000,  v58,  v146,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
              }

              goto LABEL_275;
            }

            v126 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v135 = uu[0];
            BOOL v136 = os_log_type_enabled(v58, (os_log_type_t)uu[0]);
            if (!v126)
            {
              if (v136)
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                _os_log_impl( &dword_181A5C000,  v58,  v135,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
              }

              goto LABEL_275;
            }

            if (v136)
            {
              *(_DWORD *)buf = 136447746;
              v314 = "nw_necp_append_tlv";
              __int16 v315 = 2048;
              *(void *)v316 = a3;
              *(_WORD *)&v316[8] = 2048;
              *(void *)&v316[10] = v52 + 5;
              *(_WORD *)&v316[18] = 2048;
              *(void *)v317 = v297;
              *(_WORD *)&v317[8] = 1024;
              *(_DWORD *)v318 = a2;
              *(_WORD *)&v318[4] = 1024;
              *(_DWORD *)&v318[6] = v52;
              __int16 v319 = 2082;
              v320 = v126;
              _os_log_impl( &dword_181A5C000,  v58,  v135,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
            }

LABEL_223:
            free(v126);
            if (v57) {
LABEL_277:
            }
              free(v57);
LABEL_278:
            a3 = 0LL;
            goto LABEL_279;
          default:
            os_log_type_t v84 = (dispatch_data_s *)nw_endpoint_copy_custom_data(v10);
            __int16 v85 = v84;
            if (!v84)
            {
              *(_DWORD *)uint64_t v43 = 8;
              *((_DWORD *)v43 + 1) = v9;
              goto LABEL_443;
            }

            size_t size = dispatch_data_get_size(v84);
            if (size > 0x400)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v87 = (id)gLogObj;
              *(_DWORD *)buf = 136446466;
              v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
              __int16 v315 = 1024;
              *(_DWORD *)v316 = 1024;
              LODWORD(v28_Block_object_dispose(va, 8) = 18;
              v287 = buf;
              v88 = (char *)_os_log_send_and_compose_impl();

              v312[0] = 16;
              uu[0] = 0;
              if (__nwlog_fault(v88, v312, uu))
              {
                if (v312[0] == 17)
                {
                  __nwlog_obj();
                  os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v90 = v312[0];
                  if (os_log_type_enabled(v89, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
                    __int16 v315 = 1024;
                    *(_DWORD *)v316 = 1024;
                    _os_log_impl( &dword_181A5C000,  v89,  v90,  "%{public}s Custom data size must be no larger than %d",  buf,  0x12u);
                  }
                }

                else
                {
                  if (uu[0])
                  {
                    v147 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v148 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v149 = v312[0];
                    BOOL v150 = os_log_type_enabled(v148, (os_log_type_t)v312[0]);
                    if (v147)
                    {
                      if (v150)
                      {
                        *(_DWORD *)buf = 136446722;
                        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
                        __int16 v315 = 1024;
                        *(_DWORD *)v316 = 1024;
                        *(_WORD *)&v316[4] = 2082;
                        *(void *)&v316[6] = v147;
                        _os_log_impl( &dword_181A5C000,  v148,  v149,  "%{public}s Custom data size must be no larger than %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                      }

                      free(v147);
                    }

                    else
                    {
                      if (v150)
                      {
                        *(_DWORD *)buf = 136446466;
                        v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
                        __int16 v315 = 1024;
                        *(_DWORD *)v316 = 1024;
                        _os_log_impl( &dword_181A5C000,  v148,  v149,  "%{public}s Custom data size must be no larger than %d, no backtrace",  buf,  0x12u);
                      }
                    }

                    goto LABEL_439;
                  }

                  __nwlog_obj();
                  os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v162 = v312[0];
                  if (os_log_type_enabled(v89, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    v314 = "nw_path_evaluator_add_endpoint_to_necp_message";
                    __int16 v315 = 1024;
                    *(_DWORD *)v316 = 1024;
                    _os_log_impl( &dword_181A5C000,  v89,  v162,  "%{public}s Custom data size must be no larger than %d, backtrace limit exceeded",  buf,  0x12u);
                  }
                }
              }

                      if (v108) {
                        free(v108);
                      }
                      goto LABEL_94;
                    }

                    __nwlog_obj();
                    size_t v105 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                    os_log_type_t v125 = (void *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v131) = 0;
                    if (!__nwlog_fault((const char *)v125, type, &v131))
                    {
LABEL_270:
                      if (v125) {
                        free(v125);
                      }
                      goto LABEL_76;
                    }

                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      size_t v106 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl( &dword_181A5C000,  v101,  v106,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
                      }

            free(v118);
            goto LABEL_276;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v119 = (os_log_s *)(id)gLogObj;
          os_log_type_t v125 = v245[0];
          if (os_log_type_enabled(v119, (os_log_type_t)v245[0]))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "result_length";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 1LL;
            *(_WORD *)&_BYTE buf[32] = 2048;
            *(void *)&buf[34] = v108;
            _os_log_impl( &dword_181A5C000,  v119,  v125,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded",  buf,  0x2Au);
          }
        }

        BOOL v113 = v221;
        goto LABEL_274;
      }

            if (v181) {
              free(v181);
            }
            LODWORD(v17_Block_object_dispose(va, 8) = -1;
            *(_DWORD *)(v9 + 360) = -1;
LABEL_278:
            *((_DWORD *)v34 + 215) = v178;
            if ((*((_BYTE *)v34 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v549 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v549, OS_LOG_TYPE_DEBUG))
                {
                  v550 = *((void *)v34 + 61);
                  v551 = *(_DWORD *)(*((void *)v34 + 60) + 372LL);
                  v552 = *((_DWORD *)v34 + 215);
                  if (v550) {
                    LODWORD(v550) = *(_DWORD *)(v550 + 424);
                  }
                  v553 = *(_DWORD *)(v9 + 336);
                  *(_DWORD *)buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v34 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v783 = (uint64_t)" ";
                  *(_WORD *)v784 = 1024;
                  *(_DWORD *)&v784[2] = v551;
                  *(_WORD *)&v784[6] = 1024;
                  *(_DWORD *)&v784[8] = v552;
                  *(_WORD *)&v784[12] = 1024;
                  *(_DWORD *)&v784[14] = v550;
                  *(_WORD *)&v784[18] = 2048;
                  *(void *)&v784[20] = v34;
                  *(_WORD *)&v784[28] = 1024;
                  *(_DWORD *)&v784[30] = v553;
                  _os_log_impl( &dword_181A5C000,  v549,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections",  buf,  0x42u);
                }
              }
            }

            if (*(void *)(v15 + 248))
            {
              if (*((void *)v34 + 61))
              {
                __nwlog_obj();
                os_log_type_t v192 = *((void *)v34 + 61);
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v34;
                *(_WORD *)&buf[22] = 2048;
                v783 = v192;
                id v193 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v194 = (os_log_s *)__nwlog_obj();
                  v195 = type[0];
                  if (!os_log_type_enabled(v194, type[0])) {
                    goto LABEL_307;
                  }
                  os_log_type_t v196 = *((void *)v34 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v34;
                  *(_WORD *)&buf[22] = 2048;
                  v783 = v196;
                  v197 = "%{public}s Connection %p already has a stream (%p)";
                }

                else if ((_BYTE)aBlock)
                {
                  os_log_type_t v210 = v31;
                  BOOL v211 = (char *)__nw_create_backtrace_string();
                  v194 = (os_log_s *)__nwlog_obj();
                  v195 = type[0];
                  os_log_type_t v212 = os_log_type_enabled(v194, type[0]);
                  if (v211)
                  {
                    if (v212)
                    {
                      os_log_type_t v213 = *((void *)v34 + 61);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v34;
                      *(_WORD *)&buf[22] = 2048;
                      v783 = v213;
                      *(_WORD *)v784 = 2082;
                      *(void *)&v784[2] = v211;
                      _os_log_impl( &dword_181A5C000,  v194,  v195,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                    }

                    free(v211);
                    size_t v31 = v210;
                    goto LABEL_307;
                  }

                  size_t v31 = v210;
                  if (!v212)
                  {
LABEL_307:
                    if (v193) {
                      free(v193);
                    }
                    goto LABEL_309;
                  }

                  v215 = *((void *)v34 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v34;
                  *(_WORD *)&buf[22] = 2048;
                  v783 = v215;
                  v197 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                }

                else
                {
                  v194 = (os_log_s *)__nwlog_obj();
                  v195 = type[0];
                  if (!os_log_type_enabled(v194, type[0])) {
                    goto LABEL_307;
                  }
                  os_log_type_t v214 = *((void *)v34 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v34;
                  *(_WORD *)&buf[22] = 2048;
                  v783 = v214;
                  v197 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                }

                _os_log_impl(&dword_181A5C000, v194, v195, v197, buf, 0x20u);
                goto LABEL_307;
              }

              *(void *)(v15 + 256) = v34;
              *((void *)v34 + 61) = v15;
              nw_protocol_set_output_handler(v15, *((void *)v34 + 4));
              nw_protocol_set_input_handler((uint64_t)v34, *(void *)(v15 + 48));
              *(_OWORD *)BOOL v15 = *v34;
              v198 = *(_OWORD *)(v15 + 144);
              os_log_type_t v200 = *(_OWORD *)(v15 + 96);
              v199 = *(_OWORD *)(v15 + 112);
              v34[8] = *(_OWORD *)(v15 + 128);
              v34[9] = v198;
              v34[6] = v200;
              v34[7] = v199;
              v201 = *(_OWORD *)(v15 + 80);
              v34[4] = *(_OWORD *)(v15 + 64);
              v34[5] = v201;
              nw_http_transaction_metadata_set_connection_metadata(*(void **)(v15 + 352), *((void **)v34 + 96));
              *((_WORD *)v34 + 436) &= 0xFFD7u;
              *((_DWORD *)v34 + 216) = 1;
              if ((*((_BYTE *)v34 + 158) & 1) == 0)
              {
                v202 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v202, OS_LOG_TYPE_DEBUG))
                {
                  v203 = *((void *)v34 + 61);
                  os_log_type_t v204 = *(_DWORD *)(*((void *)v34 + 60) + 372LL);
                  id v205 = *((_DWORD *)v34 + 215);
                  if (v203) {
                    LODWORD(v203) = *(_DWORD *)(v203 + 424);
                  }
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v34 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v783 = (uint64_t)" ";
                  *(_WORD *)v784 = 1024;
                  *(_DWORD *)&v784[2] = v204;
                  *(_WORD *)&v784[6] = 1024;
                  *(_DWORD *)&v784[8] = v205;
                  *(_WORD *)&v784[12] = 1024;
                  *(_DWORD *)&v784[14] = v203;
                  _os_log_impl( &dword_181A5C000,  v202,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                }
              }

              if ((*(_BYTE *)(v15 + 158) & 1) != 0
                || (os_log_type_t v206 = (os_log_s *)__nwlog_obj(), !os_log_type_enabled(v206, OS_LOG_TYPE_INFO)))
              {
LABEL_309:
                if ((*(_BYTE *)(v15 + 158) & 1) != 0) {
                  goto LABEL_314;
                }
                goto LABEL_310;
              }

              os_log_type_t v207 = *(void *)(v15 + 256);
              os_log_type_t v208 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
              if (v207) {
                LODWORD(v207) = *(_DWORD *)(v207 + 860);
              }
              v209 = *(_DWORD *)(v15 + 424);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v15 + 74;
              *(_WORD *)&buf[22] = 2080;
              v783 = (uint64_t)" ";
              *(_WORD *)v784 = 1024;
              *(_DWORD *)&v784[2] = v208;
              *(_WORD *)&v784[6] = 1024;
              *(_DWORD *)&v784[8] = v207;
              *(_WORD *)&v784[12] = 1024;
              *(_DWORD *)&v784[14] = v209;
              *(_WORD *)&v784[18] = 2048;
              *(void *)&v784[20] = v15;
              *(_WORD *)&v784[28] = 2048;
              *(void *)&v784[30] = v34;
              _os_log_impl( &dword_181A5C000,  v206,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
              if ((*(_BYTE *)(v15 + 158) & 1) != 0)
              {
LABEL_314:
                nw_http_transaction_metadata_set_first_on_connection(*(void **)(v15 + 352));
                os_log_type_t v220 = nw_protocol_copy_info((uint64_t)v31, 255);
                os_log_type_t v221 = (void *)v220;
                if (v220
                  && (os_log_type_t v222 = *(void *)(v220 + 24), *(void *)(v220 + 16) != v222)
                  && (v223 = *(void **)(v222 - 8)) != 0LL)
                {
                  size_t v224 = (nw_protocol_metadata *)os_retain(v223);
                  unint64_t v225 = v224;
                  if (v224 && nw_protocol_metadata_is_tls(v224))
                  {
                    unint64_t v225 = v225;
                    nw_http_connection_metadata_set_sec_metadata(*((void **)v34 + 96), v225);
                    os_release(v225);
                    nw_protocol_connect((uint64_t)v31, (uint64_t)v34);
                    goto LABEL_323;
                  }
                }

                else
                {
                  unint64_t v225 = 0LL;
                }

                if (v34)
                {
                  nw_protocol_connect((uint64_t)v31, (uint64_t)v34);
                  if (!v225) {
                    goto LABEL_324;
                  }
                  goto LABEL_323;
                }

                v403 = (uint64_t)v31;
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                v404 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v404, type, &aBlock))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    v405 = (os_log_s *)__nwlog_obj();
                    v406 = type[0];
                    if (!os_log_type_enabled(v405, type[0])) {
                      goto LABEL_992;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v407 = "%{public}s called with null connection";
LABEL_991:
                    _os_log_impl(&dword_181A5C000, v405, v406, v407, buf, 0xCu);
                    goto LABEL_992;
                  }

                  if (!(_BYTE)aBlock)
                  {
                    v405 = (os_log_s *)__nwlog_obj();
                    v406 = type[0];
                    if (!os_log_type_enabled(v405, type[0])) {
                      goto LABEL_992;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v407 = "%{public}s called with null connection, backtrace limit exceeded";
                    goto LABEL_991;
                  }

                  v554 = (char *)__nw_create_backtrace_string();
                  v405 = (os_log_s *)__nwlog_obj();
                  v406 = type[0];
                  v555 = os_log_type_enabled(v405, type[0]);
                  if (!v554)
                  {
                    if (!v555) {
                      goto LABEL_992;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v407 = "%{public}s called with null connection, no backtrace";
                    goto LABEL_991;
                  }

                  if (v555)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v554;
                    _os_log_impl( &dword_181A5C000,  v405,  v406,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v554);
                }

    if (v219) {
      free(v219);
    }
    mode = 0;
LABEL_278:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v234 = (id)gLogObj;
    if (mode > 5) {
      v235 = "unknown-mode";
    }
    else {
      v235 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    v292 = "nw_endpoint_flow_setup_protocols";
    v293 = 2082;
    v294 = (char *)v235;
    v295 = 2082;
    uint64_t v296 = (nw_protocol *)"flow";
    v236 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v307) = 16;
    LOBYTE(v289) = 0;
    if (__nwlog_fault(v236, &v307, &v289))
    {
      if (v307 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v237 = (os_log_s *)(id)gLogObj;
        os_log_type_t v238 = v307;
        if (os_log_type_enabled(v237, (os_log_type_t)v307))
        {
          if (mode > 5) {
            v239 = "unknown-mode";
          }
          else {
            v239 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v292 = "nw_endpoint_flow_setup_protocols";
          v293 = 2082;
          v294 = (char *)v239;
          v295 = 2082;
          uint64_t v296 = (nw_protocol *)"flow";
          _os_log_impl( &dword_181A5C000,  v237,  v238,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if ((_BYTE)v289)
      {
        os_log_type_t v240 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v237 = (os_log_s *)(id)gLogObj;
        v241 = v307;
        os_log_type_t v242 = os_log_type_enabled(v237, (os_log_type_t)v307);
        if (v240)
        {
          if (v242)
          {
            if (mode > 5) {
              v243 = "unknown-mode";
            }
            else {
              v243 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            v292 = "nw_endpoint_flow_setup_protocols";
            v293 = 2082;
            v294 = (char *)v243;
            v295 = 2082;
            uint64_t v296 = (nw_protocol *)"flow";
            unint64_t v297 = 2082;
            __int128 v298 = v240;
            _os_log_impl( &dword_181A5C000,  v237,  v241,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v240);
          if (!v236) {
            goto LABEL_312;
          }
          goto LABEL_311;
        }

        if (v242)
        {
          if (mode > 5) {
            os_log_type_t v246 = "unknown-mode";
          }
          else {
            os_log_type_t v246 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v292 = "nw_endpoint_flow_setup_protocols";
          v293 = 2082;
          v294 = (char *)v246;
          v295 = 2082;
          uint64_t v296 = (nw_protocol *)"flow";
          _os_log_impl( &dword_181A5C000,  v237,  v241,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v237 = (os_log_s *)(id)gLogObj;
        os_log_type_t v244 = v307;
        if (os_log_type_enabled(v237, (os_log_type_t)v307))
        {
          if (mode > 5) {
            BOOL v245 = "unknown-mode";
          }
          else {
            BOOL v245 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v292 = "nw_endpoint_flow_setup_protocols";
          v293 = 2082;
          v294 = (char *)v245;
          v295 = 2082;
          uint64_t v296 = (nw_protocol *)"flow";
          _os_log_impl( &dword_181A5C000,  v237,  v244,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v236)
    {
LABEL_312:
      BOOL v60 = 0LL;
      goto LABEL_313;
    }

    os_log_type_t v171 = v245;
LABEL_276:
    ++v174;
    if (--v176) {
      continue;
    }
    break;
  }

  id v205 = v258;
  unsigned int v166 = v239;
  do
  {
    os_log_type_t v206 = *v205;
    if (*v205)
    {
      os_log_type_t v207 = *(void *)(v206 + 24);
      if (v207)
      {
        os_log_type_t v208 = *(void (**)(uint64_t, void *))(v207 + 264);
        if (v208)
        {
          v209 = *(void **)(v206 + 40);
          if (v209 == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v210 = *(void *)(v206 + 88);
            if (v210) {
              *(void *)(v206 + 8_Block_object_dispose(va, 8) = v210 + 1;
            }
          }

          if (*(_UNKNOWN **)(v171 + 64) == &nw_protocol_ref_counted_handle)
          {
            BOOL v211 = *(void *)(v171 + 112);
            if (v211) {
              *(void *)(v171 + 112) = v211 + 1;
            }
            v208(v206, v173);
            if (*(_UNKNOWN **)(v171 + 64) == &nw_protocol_ref_counted_handle)
            {
              v216 = *(void *)(v171 + 112);
              if (v216)
              {
                v217 = v216 - 1;
                *(void *)(v171 + 112) = v217;
                if (!v217)
                {
                  v218 = *(void (***)(void))(v171 + 88);
                  if (v218)
                  {
                    *(void *)(v171 + 8_Block_object_dispose(va, 8) = 0LL;
                    v218[2](v218);
                    _Block_release(v218);
                  }

                  if ((*(_BYTE *)(v171 + 96) & 1) != 0)
                  {
                    v219 = *(const void **)(v171 + 88);
                    if (v219) {
                      _Block_release(v219);
                    }
                  }

                  free(v173);
                }
              }
            }
          }

          else
          {
            v208(v206, v173);
          }

          if (v209 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v206 + 40) == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v212 = *(void *)(v206 + 88);
            if (v212)
            {
              os_log_type_t v213 = v212 - 1;
              *(void *)(v206 + 8_Block_object_dispose(va, 8) = v213;
              if (!v213)
              {
                os_log_type_t v214 = *(void (***)(void))(v206 + 64);
                if (v214)
                {
                  *(void *)(v206 + 64) = 0LL;
                  v214[2](v214);
                  _Block_release(v214);
                }

                if ((*(_BYTE *)(v206 + 72) & 1) != 0)
                {
                  v215 = *(const void **)(v206 + 64);
                  if (v215) {
                    _Block_release(v215);
                  }
                }

                free((void *)v206);
                os_log_type_t v171 = v245;
              }
            }
          }
        }
      }
    }

    ++v205;
    --v175;
  }

  while (v175);
  v170 = 0;
  id v5 = v238;
  v169 = *v238 | (*((unsigned __int8 *)v238 + 2) << 16);
LABEL_357:
  *id v5 = v169 & 0x7FFF;
  *((_BYTE *)v5 + 2) = (v169 & 0xFFFF7FFF) >> 16;
  if ((v169 & 0x10000) != 0)
  {
    os_log_type_t v220 = v169 & 0xFFFE7FFF;
    *id v5 = v220;
    *((_BYTE *)v5 + 2) = BYTE2(v220);
    if (*(void *)(v245 + 136))
    {
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
      }
    }
  }

  if ((v168 & v170) == 1)
  {
    os_log_type_t v221 = v245;
    if (!*(void *)(v245 + 320))
    {
      if (*(void *)(v245 + 224))
      {
        *(_DWORD *)(v245 + 416) = 0;
        os_log_type_t v222 = os_channel_advance_slot();
        if (v222)
        {
          size_t v224 = v222;
          if ((nw_channel_check_defunct(v245) & 1) == 0)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446466;
            v254 = "nw_channel_add_input_frames";
            v255 = 1024;
            LODWORD(v256[0]) = v224;
            unint64_t v225 = (char *)_os_log_send_and_compose_impl();
            v257[0] = OS_LOG_TYPE_ERROR;
            type[0] = OS_LOG_TYPE_DEFAULT;
            if (v257[0] != OS_LOG_TYPE_FAULT)
            {
              if (type[0])
              {
                v229 = (char *)__nw_create_backtrace_string();
                id v226 = (os_log_s *)__nwlog_obj();
                int v227 = v257[0];
                os_log_type_t v230 = os_log_type_enabled(v226, v257[0]);
                if (v229)
                {
                  if (v230)
                  {
                    *(_DWORD *)buf = 136446722;
                    v254 = "nw_channel_add_input_frames";
                    v255 = 1024;
                    LODWORD(v256[0]) = v224;
                    WORD2(v256[0]) = 2082;
                    *(void *)((char *)v256 + 6) = v229;
                    _os_log_impl( &dword_181A5C000,  v226,  v227,  "%{public}s os_channel_advance_slot(rx) %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                  }

                  free(v229);
                  goto LABEL_397;
                }

                if (!v230) {
                  goto LABEL_397;
                }
                *(_DWORD *)buf = 136446466;
                v254 = "nw_channel_add_input_frames";
                v255 = 1024;
                LODWORD(v256[0]) = v224;
                v228 = "%{public}s os_channel_advance_slot(rx) %{darwin.errno}d, no backtrace";
              }

              else
              {
                id v226 = (os_log_s *)__nwlog_obj();
                int v227 = v257[0];
                if (!os_log_type_enabled(v226, v257[0])) {
                  goto LABEL_397;
                }
                *(_DWORD *)buf = 136446466;
                v254 = "nw_channel_add_input_frames";
                v255 = 1024;
                LODWORD(v256[0]) = v224;
                v228 = "%{public}s os_channel_advance_slot(rx) %{darwin.errno}d, backtrace limit exceeded";
              }

LABEL_439:
              if (v88) {
                free(v88);
              }
              char v138 = 8;
              goto LABEL_442;
            }

            char v137 = -9;
            if (size < 0xF7) {
              char v137 = size;
            }
            char v138 = v137 + 8;
LABEL_442:
            *((_BYTE *)v43 + 1) = 0;
            *uint64_t v43 = v138;
            *((_WORD *)v43 + 1) = 0;
            *((_DWORD *)v43 + 1) = v9;
            applier[0] = MEMORY[0x1895F87A8];
            applier[1] = 3221225472LL;
            applier[2] = __nw_path_evaluator_add_endpoint_to_necp_message_block_invoke;
            applier[3] = &__block_descriptor_41_e47_B40__0__NSObject_OS_dispatch_data__8Q16r_v24Q32l;
            char v303 = v138;
            void applier[4] = v43;
            dispatch_data_apply(v85, applier);
LABEL_443:
            size_t v224 = v52;
            unint64_t v225 = v52 + 5;
            if (v297 - a3 >= v225)
            {
              *(_BYTE *)a3 = a2;
              *(_DWORD *)(a3 + 1) = v224;
              memcpy((void *)(a3 + 5), v43, v224);
              a3 += v225;
              goto LABEL_464;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v226 = (id)gLogObj;
            *(_DWORD *)buf = 136447490;
            v314 = "nw_necp_append_tlv";
            __int16 v315 = 2048;
            *(void *)v316 = a3;
            *(_WORD *)&v316[8] = 2048;
            *(void *)&v316[10] = v225;
            *(_WORD *)&v316[18] = 2048;
            *(void *)v317 = v297;
            *(_WORD *)&v317[8] = 1024;
            *(_DWORD *)v318 = a2;
            *(_WORD *)&v318[4] = 1024;
            int v227 = v224;
            *(_DWORD *)&v318[6] = v224;
            LODWORD(v28_Block_object_dispose(va, 8) = 54;
            v287 = buf;
            v228 = (char *)_os_log_send_and_compose_impl();

            v312[0] = 16;
            uu[0] = 0;
            if (v312[0] == 17)
            {
              __nwlog_obj();
              v229 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v230 = v312[0];
              if (os_log_type_enabled(v229, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v225;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v227;
                _os_log_impl( &dword_181A5C000,  v229,  v230,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
              }

                      free(v305);
                      if (!v292) {
                        goto LABEL_472;
                      }
                      goto LABEL_471;
                    }

                _Block_object_dispose(v537, 8);
                _Block_object_dispose(aBlock, 8);

                goto LABEL_440;
              }

              if (!v257 || nw_path_parameters_get_logging_disabled(v257[13])) {
                goto LABEL_440;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v259 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
              {
                os_log_type_t v263 = *((_DWORD *)v253 + 112);
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v263;
                _os_log_impl( &dword_181A5C000,  v259,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Establishment report is not ready, cannot start candidate manager",  buf,  0x12u);
              }
            }

            else
            {
              os_log_type_t v261 = *((void *)v253 + 2);
              if (!v261 || nw_path_parameters_get_logging_disabled(*(void *)(v261 + 104))) {
                goto LABEL_440;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v259 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v259, OS_LOG_TYPE_DEBUG))
              {
                v262 = *((_DWORD *)v253 + 112);
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_connection_start_candidate_manager_if_needed_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v262;
                _os_log_impl( &dword_181A5C000,  v259,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Connection does not support multipath, not starting candidate manager",  buf,  0x12u);
              }
            }

    _os_log_impl(&dword_181A5C000, v150, v151, v152, buf, 0xCu);
    goto LABEL_440;
  }

  if (v5 == 2)
  {
    nw_endpoint_type_t v11 = *((void *)handle + 1);
    if (!v11) {
      goto LABEL_193;
    }
    goto LABEL_18;
  }

  if (v5 != 3) {
    goto LABEL_193;
  }
  os_log_type_t v10 = *((void *)handle + 2);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
    unsigned int v166 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unint64_t v167 = (os_log_s *)__nwlog_obj();
      id v168 = type[0];
      if (!os_log_type_enabled(v167, type[0])) {
        goto LABEL_417;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
      v169 = "%{public}s called with null handle->http1_connection";
    }

    else if (LOBYTE(aBlock[0]))
    {
      v184 = (char *)__nw_create_backtrace_string();
      unint64_t v167 = (os_log_s *)__nwlog_obj();
      id v168 = type[0];
      v185 = os_log_type_enabled(v167, type[0]);
      if (v184)
      {
        if (v185)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v184;
          _os_log_impl( &dword_181A5C000,  v167,  v168,  "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v184);
        goto LABEL_417;
      }

      if (!v185)
      {
LABEL_417:
        if (v166) {
          free(v166);
        }
        goto LABEL_193;
      }

      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
      v169 = "%{public}s called with null handle->http1_connection, no backtrace";
    }

    else
    {
      unint64_t v167 = (os_log_s *)__nwlog_obj();
      id v168 = type[0];
      if (!os_log_type_enabled(v167, type[0])) {
        goto LABEL_417;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
      v169 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v167, v168, v169, buf, 0xCu);
    goto LABEL_417;
  }

  nw_endpoint_type_t v11 = *(void *)(v10 + 488);
  if (!v11) {
    goto LABEL_193;
  }
LABEL_18:
  if (v5 != 2)
  {
    if (*((void *)handle + 2)) {
      goto LABEL_193;
    }
    goto LABEL_23;
  }

  nw_txt_record_t v12 = *((void *)handle + 1);
  if (!v12)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    os_log_type_t v222 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (__nwlog_fault(v222, type, aBlock))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v223 = (os_log_s *)__nwlog_obj();
        size_t v224 = type[0];
        if (os_log_type_enabled(v223, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
          unint64_t v225 = "%{public}s called with null handle->http1_stream";
LABEL_525:
          _os_log_impl(&dword_181A5C000, v223, v224, v225, buf, 0xCu);
        }
      }

      else if (LOBYTE(aBlock[0]))
      {
        os_log_type_t v238 = (char *)__nw_create_backtrace_string();
        v223 = (os_log_s *)__nwlog_obj();
        size_t v224 = type[0];
        v239 = os_log_type_enabled(v223, type[0]);
        if (v238)
        {
          if (v239)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v238;
            _os_log_impl( &dword_181A5C000,  v223,  v224,  "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v238);
          goto LABEL_526;
        }

        if (v239)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
          unint64_t v225 = "%{public}s called with null handle->http1_stream, no backtrace";
          goto LABEL_525;
        }
      }

      else
      {
        v223 = (os_log_s *)__nwlog_obj();
        size_t v224 = type[0];
        if (os_log_type_enabled(v223, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
          unint64_t v225 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
          goto LABEL_525;
        }
      }
    }

          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          id v205 = "nw_http_fillout_binary_message_inner";
          os_log_type_t v159 = (char *)_os_log_send_and_compose_impl();
          v178[0] = OS_LOG_TYPE_ERROR;
          v203 = OS_LOG_TYPE_DEFAULT;
          if (v178[0] == OS_LOG_TYPE_FAULT)
          {
            BOOL v160 = (os_log_s *)__nwlog_obj();
            os_log_type_t v161 = v178[0];
            if (!os_log_type_enabled(v160, v178[0])) {
              goto LABEL_525;
            }
            *(_DWORD *)buf = 136446210;
            id v205 = "nw_http_fillout_binary_message_inner";
            os_log_type_t v162 = "%{public}s called with null cursor";
            goto LABEL_524;
          }

          if (v203 == OS_LOG_TYPE_DEFAULT)
          {
            BOOL v160 = (os_log_s *)__nwlog_obj();
            os_log_type_t v161 = v178[0];
            if (!os_log_type_enabled(v160, v178[0])) {
              goto LABEL_525;
            }
            *(_DWORD *)buf = 136446210;
            id v205 = "nw_http_fillout_binary_message_inner";
            os_log_type_t v162 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_524;
          }

          v163 = (char *)__nw_create_backtrace_string();
          BOOL v160 = (os_log_s *)__nwlog_obj();
          os_log_type_t v161 = v178[0];
          unint64_t v167 = os_log_type_enabled(v160, v178[0]);
          if (!v163)
          {
            if (!v167) {
              goto LABEL_525;
            }
            *(_DWORD *)buf = 136446210;
            id v205 = "nw_http_fillout_binary_message_inner";
            os_log_type_t v162 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_524;
          }

          if (!v167) {
            goto LABEL_518;
          }
          goto LABEL_517;
        }

        *(void *)os_log_type_t type = bswap64(a4 | 0xC000000000000000LL);
        size_t v42 = 8LL;
      }

      else
      {
        *(void *)os_log_type_t type = bswap32(a4 | 0x80000000);
        size_t v42 = 4LL;
      }
    }

    else
    {
      *(void *)os_log_type_t type = bswap32(a4 | 0x4000) >> 16;
      size_t v42 = 2LL;
    }
  }

  else
  {
    *(void *)os_log_type_t type = a4;
    size_t v42 = 1LL;
  }

  uint64_t v43 = (char *)v199[3];
  if (!v43)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v205 = "_http_safe_append";
    os_log_type_t v92 = (char *)_os_log_send_and_compose_impl();
    v178[0] = OS_LOG_TYPE_ERROR;
    v203 = OS_LOG_TYPE_DEFAULT;
    if (v178[0] == OS_LOG_TYPE_FAULT)
    {
      id v93 = (os_log_s *)__nwlog_obj();
      os_log_type_t v94 = v178[0];
      if (!os_log_type_enabled(v93, v178[0])) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      id v205 = "_http_safe_append";
      size_t v95 = "%{public}s called with null buffer";
      goto LABEL_435;
    }

    if (v203 == OS_LOG_TYPE_DEFAULT)
    {
      id v93 = (os_log_s *)__nwlog_obj();
      os_log_type_t v94 = v178[0];
      if (!os_log_type_enabled(v93, v178[0])) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      id v205 = "_http_safe_append";
      size_t v95 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_435;
    }

    size_t v122 = (char *)__nw_create_backtrace_string();
    id v93 = (os_log_s *)__nwlog_obj();
    os_log_type_t v94 = v178[0];
    v123 = os_log_type_enabled(v93, v178[0]);
    if (!v122)
    {
      if (!v123) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      id v205 = "_http_safe_append";
      size_t v95 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_435;
    }

    if (v123)
    {
      *(_DWORD *)buf = 136446466;
      id v205 = "_http_safe_append";
      os_log_type_t v206 = 2082;
      os_log_type_t v207 = v122;
      _os_log_impl( &dword_181A5C000,  v93,  v94,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v122);
LABEL_436:
    if (!v92)
    {
LABEL_438:
      v199[3] = 0LL;
      goto LABEL_439;
    }

LABEL_460:
              goto LABEL_461;
            }

            if (!uu[0])
            {
              __nwlog_obj();
              v229 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v234 = v312[0];
              if (os_log_type_enabled(v229, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v225;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v227;
                _os_log_impl( &dword_181A5C000,  v229,  v234,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
              }

              goto LABEL_460;
            }

            v231 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v229 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v232 = v312[0];
            BOOL v233 = os_log_type_enabled(v229, (os_log_type_t)v312[0]);
            if (!v231)
            {
              if (v233)
              {
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v225;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v224;
                _os_log_impl( &dword_181A5C000,  v229,  v232,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
              }

              goto LABEL_460;
            }

            if (v233)
            {
              *(_DWORD *)buf = 136447746;
              v314 = "nw_necp_append_tlv";
              __int16 v315 = 2048;
              *(void *)v316 = a3;
              *(_WORD *)&v316[8] = 2048;
              *(void *)&v316[10] = v225;
              *(_WORD *)&v316[18] = 2048;
              *(void *)v317 = v297;
              *(_WORD *)&v317[8] = 1024;
              *(_DWORD *)v318 = a2;
              *(_WORD *)&v318[4] = 1024;
              *(_DWORD *)&v318[6] = v224;
              __int16 v319 = 2082;
              v320 = v231;
              _os_log_impl( &dword_181A5C000,  v229,  v232,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
            }

            free(v231);
LABEL_461:
            if (v228) {
              free(v228);
            }
            a3 = 0LL;
LABEL_464:

LABEL_279:
            if ((a5 & 1) == 0) {
              goto LABEL_310;
            }
            uuid_clear(uu);
            nw_endpoint_get_agent_identifier(v10, uu);
            if (uuid_is_null(uu)) {
              goto LABEL_310;
            }
            v152 = v10;
            if (a3)
            {
              if (a3 >= v297)
              {
                __nwlog_obj();
                v264 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136446722;
                v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v297;
                LODWORD(v28_Block_object_dispose(va, 8) = 32;
                v287 = buf;
                v154 = (char *)_os_log_send_and_compose_impl();

                v312[0] = 16;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                if (v312[0] == 17)
                {
                  __nwlog_obj();
                  v155 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v265 = v312[0];
                  if (os_log_type_enabled(v155, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)buf = 136446722;
                    v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
                    __int16 v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = v297;
                    _os_log_impl(&dword_181A5C000, v155, v265, "%{public}s Invalid cursor %p >= beyond %p", buf, 0x20u);
                  }

                  goto LABEL_579;
                }

                if (type == OS_LOG_TYPE_DEFAULT)
                {
                  __nwlog_obj();
                  v155 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v282 = v312[0];
                  if (os_log_type_enabled(v155, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)buf = 136446722;
                    v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
                    __int16 v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = v297;
                    _os_log_impl( &dword_181A5C000,  v155,  v282,  "%{public}s Invalid cursor %p >= beyond %p, backtrace limit exceeded",  buf,  0x20u);
                  }

                  goto LABEL_579;
                }

                v276 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v158 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v277 = v312[0];
                BOOL v278 = os_log_type_enabled(v158, (os_log_type_t)v312[0]);
                if (!v276)
                {
                  if (v278)
                  {
                    *(_DWORD *)buf = 136446722;
                    v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
                    __int16 v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = v297;
                    _os_log_impl( &dword_181A5C000,  v158,  v277,  "%{public}s Invalid cursor %p >= beyond %p, no backtrace",  buf,  0x20u);
                  }

                  goto LABEL_305;
                }

                if (v278)
                {
                  *(_DWORD *)buf = 136446978;
                  v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
                  __int16 v315 = 2048;
                  *(void *)v316 = a3;
                  *(_WORD *)&v316[8] = 2048;
                  *(void *)&v316[10] = v297;
                  *(_WORD *)&v316[18] = 2082;
                  *(void *)v317 = v276;
                  _os_log_impl( &dword_181A5C000,  v158,  v277,  "%{public}s Invalid cursor %p >= beyond %p, dumping backtrace:%{public}s",  buf,  0x2Au);
                }

                free(v276);
              }

              else
              {
                uuid_clear(v312);
                nw_endpoint_get_agent_identifier(v152, v312);
                if (uuid_is_null(v312)) {
                  goto LABEL_309;
                }
                if (v297 - a3 > 0x14)
                {
                  *(_BYTE *)a3 = -100;
                  *(_DWORD *)(a3 + 1) = 16;
                  *(_OWORD *)(a3 + 5) = *(_OWORD *)v312;
                  a3 += 21LL;
                  goto LABEL_309;
                }

                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v153 = (id)gLogObj;
                *(_DWORD *)buf = 136447490;
                v314 = "nw_necp_append_tlv";
                __int16 v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = 21LL;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = 156;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = 16;
                LODWORD(v28_Block_object_dispose(va, 8) = 54;
                v287 = buf;
                v154 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t type = OS_LOG_TYPE_ERROR;
                char v308 = 0;
                if (__nwlog_fault(v154, &type, &v308))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v155 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v156 = type;
                    if (os_log_type_enabled(v155, type))
                    {
                      *(_DWORD *)buf = 136447490;
                      v314 = "nw_necp_append_tlv";
                      __int16 v315 = 2048;
                      *(void *)v316 = a3;
                      *(_WORD *)&v316[8] = 2048;
                      *(void *)&v316[10] = 21LL;
                      *(_WORD *)&v316[18] = 2048;
                      *(void *)v317 = v297;
                      *(_WORD *)&v317[8] = 1024;
                      *(_DWORD *)v318 = 156;
                      *(_WORD *)&v318[4] = 1024;
                      *(_DWORD *)&v318[6] = 16;
                      _os_log_impl( &dword_181A5C000,  v155,  v156,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
                    }

  if (v189) {
    free(v189);
  }
  nw_protocol_connect((uint64_t)v257, 0LL);
  id v4 = v188;
  if (v116) {
    goto LABEL_171;
  }
LABEL_172:
  if (v112) {
    os_release(v112);
  }
  os_log_type_t v117 = *(_WORD *)(v11 + 428);
  if ((v117 & 8) != 0)
  {
    *(_WORD *)(v11 + 42_Block_object_dispose(va, 8) = v117 & 0xFFF7;
    char v118 = *(_DWORD *)(v9 + 352);
    *(_DWORD *)(v9 + 352) = v118 - 1;
    if (!v118)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v119 = *(unsigned int *)(v9 + 352);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "http1->pending_output_handler_count";
      *(_WORD *)&buf[22] = 2048;
      BOOL v268 = 1LL;
      v269 = 2048;
      *(void *)v270 = v119;
      size_t v120 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(aBlock[0]) = 0;
      if (__nwlog_fault(v120, type, aBlock))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          size_t v121 = (os_log_s *)__nwlog_obj();
          size_t v122 = type[0];
          if (os_log_type_enabled(v121, type[0]))
          {
            v123 = *(unsigned int *)(v9 + 352);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_output_handler_count";
            *(_WORD *)&buf[22] = 2048;
            BOOL v268 = 1LL;
            v269 = 2048;
            *(void *)v270 = v123;
            id v124 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_189:
            _os_log_impl(&dword_181A5C000, v121, v122, v124, buf, 0x2Au);
          }
        }

        else if (LOBYTE(aBlock[0]))
        {
          os_log_type_t v125 = (char *)__nw_create_backtrace_string();
          size_t v121 = (os_log_s *)__nwlog_obj();
          size_t v122 = type[0];
          v126 = os_log_type_enabled(v121, type[0]);
          if (v125)
          {
            if (v126)
            {
              os_log_type_t v127 = *(unsigned int *)(v9 + 352);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->pending_output_handler_count";
              *(_WORD *)&buf[22] = 2048;
              BOOL v268 = 1LL;
              v269 = 2048;
              *(void *)v270 = v127;
              *(_WORD *)&v270[8] = 2082;
              os_log_type_t v271 = v125;
              _os_log_impl( &dword_181A5C000,  v121,  v122,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(v125);
            goto LABEL_190;
          }

          if (v126)
          {
            os_log_type_t v129 = *(unsigned int *)(v9 + 352);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_output_handler_count";
            *(_WORD *)&buf[22] = 2048;
            BOOL v268 = 1LL;
            v269 = 2048;
            *(void *)v270 = v129;
            id v124 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_189;
          }
        }

        else
        {
          size_t v121 = (os_log_s *)__nwlog_obj();
          size_t v122 = type[0];
          if (os_log_type_enabled(v121, type[0]))
          {
            BOOL v128 = *(unsigned int *)(v9 + 352);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_output_handler_count";
            *(_WORD *)&buf[22] = 2048;
            BOOL v268 = 1LL;
            v269 = 2048;
            *(void *)v270 = v128;
            id v124 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_189;
          }
        }
      }

                    if (v296) {
                      free(v296);
                    }
                    os_log_type_t v274 = v580;
                    *(_DWORD *)(v580 + 336) = -1;
                    v293 = v579;
                    BOOL v275 = &qword_18C45F000;
LABEL_463:
                    v325 = *(unsigned int *)(v274 + 360) + 1LL;
                    v326 = v325 << 31 >> 31;
                    *(_DWORD *)(v274 + 360) = v325;
                    if (v326 == v325 && (v326 & 0x8000000000000000LL) == 0) {
                      goto LABEL_482;
                    }
                    v327 = v274;
                    __nwlog_obj();
                    v328 = *(unsigned int *)(v327 + 360);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    v608 = 1LL;
                    *(_WORD *)v609 = 2048;
                    *(void *)&v609[2] = v328;
                    v329 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v329, type, &aBlock))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v330 = (os_log_s *)__nwlog_obj();
                        v331 = type[0];
                        if (os_log_type_enabled(v330, type[0]))
                        {
                          v332 = *(unsigned int *)(v580 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v608 = 1LL;
                          *(_WORD *)v609 = 2048;
                          *(void *)&v609[2] = v332;
                          v333 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_478:
                          _os_log_impl(&dword_181A5C000, v330, v331, v333, buf, 0x2Au);
                        }
                      }

                      else if ((_BYTE)aBlock)
                      {
                        v334 = (char *)__nw_create_backtrace_string();
                        v330 = (os_log_s *)__nwlog_obj();
                        v331 = type[0];
                        v335 = os_log_type_enabled(v330, type[0]);
                        if (v334)
                        {
                          if (v335)
                          {
                            v336 = *(unsigned int *)(v580 + 360);
                            *(_DWORD *)buf = 136447234;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = "http1->next_connection_log_num";
                            *(_WORD *)&buf[22] = 2048;
                            v608 = 1LL;
                            *(_WORD *)v609 = 2048;
                            *(void *)&v609[2] = v336;
                            *(_WORD *)&v609[10] = 2082;
                            *(void *)&v609[12] = v334;
                            _os_log_impl( &dword_181A5C000,  v330,  v331,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                          }

                          free(v334);
                          goto LABEL_479;
                        }

                        if (v335)
                        {
                          v338 = *(unsigned int *)(v580 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v608 = 1LL;
                          *(_WORD *)v609 = 2048;
                          *(void *)&v609[2] = v338;
                          v333 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_478;
                        }
                      }

                      else
                      {
                        v330 = (os_log_s *)__nwlog_obj();
                        v331 = type[0];
                        if (os_log_type_enabled(v330, type[0]))
                        {
                          v337 = *(unsigned int *)(v580 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v608 = 1LL;
                          *(_WORD *)v609 = 2048;
                          *(void *)&v609[2] = v337;
                          v333 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_478;
                        }
                      }
                    }

            if (!v98) {
              goto LABEL_462;
            }
            goto LABEL_461;
          }

                  BOOL v18 = (os_log_s *)__nwlog_obj();
                  if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_27;
                  }
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  size_t v19 = "%{public}s Failed to decode integer";
                  goto LABEL_25;
                }

                if (v86 < 8) {
                  goto LABEL_460;
                }
                unsigned int v166 = *(void *)v121;
                v123 = v121 + 8;
                size_t v54 = bswap64(v166 & 0xFFFFFFFFFFFFFF3FLL);
                if (HIDWORD(v54))
                {
                  size_t v30 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_481;
                  }
                  goto LABEL_27;
                }

                size_t v122 = 8LL;
              }

              id v124 = v86 - v122;
              if (v54 > v86 - v122)
              {
                size_t v30 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  id v205 = 2048;
                  os_log_type_t v206 = (const char *)v54;
                  os_log_type_t v207 = 2048;
                  os_log_type_t v208 = v124;
                  size_t v19 = "%{public}s _length %llu > remaining %zu";
                  goto LABEL_172;
                }

                goto LABEL_27;
              }

              if (!v54) {
                goto LABEL_167;
              }
              v88 = 0LL;
              char v138 = &v123[v54];
              while (2)
              {
                if (v123 >= v138)
                {
LABEL_444:
                  metadata_with_parsed_fields = nw_http_create_metadata_with_parsed_fields(v17, v15 == 0);
                  if (!v88) {
                    goto LABEL_28;
                  }
                  os_log_type_t v151 = nw_http_parsed_fields_copy_trailer_fields(v88);
                  if (v151)
                  {
                    v152 = (void *)v151;
                    nw_http_metadata_set_trailer_fields(metadata_with_parsed_fields, (void *)v151);
                    os_release(v152);
                    goto LABEL_553;
                  }

                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  v185 = (char *)_os_log_send_and_compose_impl();
                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  v201 = 0;
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    os_log_type_t v186 = (os_log_s *)__nwlog_obj();
                    BOOL v187 = type;
                    if (os_log_type_enabled(v186, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                      os_log_type_t v188 = "%{public}s called with null extracted_trailer_fields";
                      goto LABEL_600;
                    }

                    goto LABEL_601;
                  }

                  if (v201)
                  {
                    v191 = (char *)__nw_create_backtrace_string();
                    os_log_type_t v186 = (os_log_s *)__nwlog_obj();
                    BOOL v187 = type;
                    os_log_type_t v192 = os_log_type_enabled(v186, type);
                    if (v191)
                    {
                      if (v192)
                      {
                        *(_DWORD *)buf = 136446466;
                        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                        id v205 = 2082;
                        os_log_type_t v206 = v191;
                        _os_log_impl( &dword_181A5C000,  v186,  v187,  "%{public}s called with null extracted_trailer_fields, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v191);
                      goto LABEL_601;
                    }

                    if (!v192)
                    {
LABEL_601:
                      if (v185) {
                        free(v185);
                      }
                      metadata_with_parsed_fields = 0LL;
                      goto LABEL_553;
                    }

                    *(_DWORD *)buf = 136446210;
                    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                    os_log_type_t v188 = "%{public}s called with null extracted_trailer_fields, no backtrace";
                  }

                  else
                  {
                    os_log_type_t v186 = (os_log_s *)__nwlog_obj();
                    BOOL v187 = type;
                    if (!os_log_type_enabled(v186, type)) {
                      goto LABEL_601;
                    }
                    *(_DWORD *)buf = 136446210;
                    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                    os_log_type_t v188 = "%{public}s called with null extracted_trailer_fields, backtrace limit exceeded";
                  }

LABEL_579:
                    goto LABEL_306;
                  }

                  if (!v308)
                  {
                    __nwlog_obj();
                    v155 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v161 = type;
                    if (os_log_type_enabled(v155, type))
                    {
                      *(_DWORD *)buf = 136447490;
                      v314 = "nw_necp_append_tlv";
                      __int16 v315 = 2048;
                      *(void *)v316 = a3;
                      *(_WORD *)&v316[8] = 2048;
                      *(void *)&v316[10] = 21LL;
                      *(_WORD *)&v316[18] = 2048;
                      *(void *)v317 = v297;
                      *(_WORD *)&v317[8] = 1024;
                      *(_DWORD *)v318 = 156;
                      *(_WORD *)&v318[4] = 1024;
                      *(_DWORD *)&v318[6] = 16;
                      _os_log_impl( &dword_181A5C000,  v155,  v161,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
                    }

                    goto LABEL_579;
                  }

                  v157 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v158 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v159 = type;
                  BOOL v160 = os_log_type_enabled(v158, type);
                  if (v157)
                  {
                    if (v160)
                    {
                      *(_DWORD *)buf = 136447746;
                      v314 = "nw_necp_append_tlv";
                      __int16 v315 = 2048;
                      *(void *)v316 = a3;
                      *(_WORD *)&v316[8] = 2048;
                      *(void *)&v316[10] = 21LL;
                      *(_WORD *)&v316[18] = 2048;
                      *(void *)v317 = v297;
                      *(_WORD *)&v317[8] = 1024;
                      *(_DWORD *)v318 = 156;
                      *(_WORD *)&v318[4] = 1024;
                      *(_DWORD *)&v318[6] = 16;
                      __int16 v319 = 2082;
                      v320 = v157;
                      _os_log_impl( &dword_181A5C000,  v158,  v159,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping b acktrace:%{public}s",  buf,  0x40u);
                    }

                    free(v157);
                    if (!v154)
                    {
LABEL_308:
                      a3 = 0LL;
LABEL_309:

LABEL_310:
                      if ((a5 & 2) == 0) {
                        goto LABEL_323;
                      }
                      device_id = (const char *)nw_endpoint_get_device_id(v10);
                      if (!device_id) {
                        goto LABEL_323;
                      }
                      v164 = device_id;
                      unsigned int v165 = strlen(device_id);
                      if (a3)
                      {
                        unsigned int v166 = v165;
                        if (a3 < v297)
                        {
                          unint64_t v167 = v165 + 5LL;
                          if (v297 - a3 < v167)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            id v168 = (id)gLogObj;
                            *(_DWORD *)buf = 136447490;
                            v314 = "nw_necp_append_tlv";
                            __int16 v315 = 2048;
                            *(void *)v316 = a3;
                            *(_WORD *)&v316[8] = 2048;
                            *(void *)&v316[10] = v167;
                            *(_WORD *)&v316[18] = 2048;
                            *(void *)v317 = v297;
                            *(_WORD *)&v317[8] = 1024;
                            *(_DWORD *)v318 = 158;
                            *(_WORD *)&v318[4] = 1024;
                            *(_DWORD *)&v318[6] = v166;
                            LODWORD(v28_Block_object_dispose(va, 8) = 54;
                            v287 = buf;
                            v169 = (const char *)_os_log_send_and_compose_impl();

                            v312[0] = 16;
                            uu[0] = 0;
                            if (v312[0] == 17)
                            {
                              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                              networkd_settings_init();
                              v170 = (os_log_s *)(id)gLogObj;
                              os_log_type_t v171 = v312[0];
                              if (os_log_type_enabled(v170, (os_log_type_t)v312[0]))
                              {
                                *(_DWORD *)buf = 136447490;
                                v314 = "nw_necp_append_tlv";
                                __int16 v315 = 2048;
                                *(void *)v316 = a3;
                                *(_WORD *)&v316[8] = 2048;
                                *(void *)&v316[10] = v167;
                                *(_WORD *)&v316[18] = 2048;
                                *(void *)v317 = v297;
                                *(_WORD *)&v317[8] = 1024;
                                *(_DWORD *)v318 = 158;
                                *(_WORD *)&v318[4] = 1024;
                                *(_DWORD *)&v318[6] = v166;
                                _os_log_impl( &dword_181A5C000,  v170,  v171,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
                              }
                            }

                            else if (uu[0])
                            {
                              v217 = __nw_create_backtrace_string();
                              if (v217)
                              {
                                v218 = (char *)v217;
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                v219 = (os_log_s *)(id)gLogObj;
                                os_log_type_t v220 = v312[0];
                                if (os_log_type_enabled(v219, (os_log_type_t)v312[0]))
                                {
                                  *(_DWORD *)buf = 136447746;
                                  v314 = "nw_necp_append_tlv";
                                  __int16 v315 = 2048;
                                  *(void *)v316 = a3;
                                  *(_WORD *)&v316[8] = 2048;
                                  *(void *)&v316[10] = v167;
                                  *(_WORD *)&v316[18] = 2048;
                                  *(void *)v317 = v297;
                                  *(_WORD *)&v317[8] = 1024;
                                  *(_DWORD *)v318 = 158;
                                  *(_WORD *)&v318[4] = 1024;
                                  *(_DWORD *)&v318[6] = v166;
                                  __int16 v319 = 2082;
                                  v320 = v218;
                                  _os_log_impl( &dword_181A5C000,  v219,  v220,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=% u, dumping backtrace:%{public}s",  buf,  0x40u);
                                }

                                free(v218);
                                if (!v169) {
                                  goto LABEL_434;
                                }
LABEL_432:
                                v223 = (char *)v169;
LABEL_433:
                                free(v223);
                                goto LABEL_434;
                              }

                              __nwlog_obj();
                              v170 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                              os_log_type_t v222 = v312[0];
                              if (os_log_type_enabled(v170, (os_log_type_t)v312[0]))
                              {
                                *(_DWORD *)buf = 136447490;
                                v314 = "nw_necp_append_tlv";
                                __int16 v315 = 2048;
                                *(void *)v316 = a3;
                                *(_WORD *)&v316[8] = 2048;
                                *(void *)&v316[10] = v167;
                                *(_WORD *)&v316[18] = 2048;
                                *(void *)v317 = v297;
                                *(_WORD *)&v317[8] = 1024;
                                *(_DWORD *)v318 = 158;
                                *(_WORD *)&v318[4] = 1024;
                                *(_DWORD *)&v318[6] = v166;
                                _os_log_impl( &dword_181A5C000,  v170,  v222,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
                              }
                            }

                            else
                            {
                              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                              networkd_settings_init();
                              v170 = (os_log_s *)(id)gLogObj;
                              os_log_type_t v221 = v312[0];
                              if (os_log_type_enabled(v170, (os_log_type_t)v312[0]))
                              {
                                *(_DWORD *)buf = 136447490;
                                v314 = "nw_necp_append_tlv";
                                __int16 v315 = 2048;
                                *(void *)v316 = a3;
                                *(_WORD *)&v316[8] = 2048;
                                *(void *)&v316[10] = v167;
                                *(_WORD *)&v316[18] = 2048;
                                *(void *)v317 = v297;
                                *(_WORD *)&v317[8] = 1024;
                                *(_DWORD *)v318 = 158;
                                *(_WORD *)&v318[4] = 1024;
                                *(_DWORD *)&v318[6] = v166;
                                _os_log_impl( &dword_181A5C000,  v170,  v221,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
                              }
                            }

                            goto LABEL_430;
                          }

                          *(_BYTE *)a3 = -98;
                          *(_DWORD *)(a3 + 1) = v165;
                          if (v165) {
                            memcpy((void *)(a3 + 5), v164, v165);
                          }
                          a3 += v167;
LABEL_323:
                          if ((a5 & 4) == 0) {
                            goto LABEL_415;
                          }
                          goto LABEL_324;
                        }

                        __nwlog_obj();
                        v257 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 136447234;
                        v314 = "nw_necp_append_tlv";
                        __int16 v315 = 2048;
                        *(void *)v316 = a3;
                        *(_WORD *)&v316[8] = 2048;
                        *(void *)&v316[10] = v297;
                        *(_WORD *)&v316[18] = 1024;
                        *(_DWORD *)v317 = 158;
                        *(_WORD *)&v317[4] = 1024;
                        *(_DWORD *)&v317[6] = v166;
                        LODWORD(v28_Block_object_dispose(va, 8) = 44;
                        v287 = buf;
                        v169 = (const char *)_os_log_send_and_compose_impl();

                        v312[0] = 16;
                        uu[0] = 0;
                        if (__nwlog_fault(v169, v312, uu))
                        {
                          if (v312[0] == 17)
                          {
                            __nwlog_obj();
                            v170 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            os_log_type_t v258 = v312[0];
                            if (os_log_type_enabled(v170, (os_log_type_t)v312[0]))
                            {
                              *(_DWORD *)buf = 136447234;
                              v314 = "nw_necp_append_tlv";
                              __int16 v315 = 2048;
                              *(void *)v316 = a3;
                              *(_WORD *)&v316[8] = 2048;
                              *(void *)&v316[10] = v297;
                              *(_WORD *)&v316[18] = 1024;
                              *(_DWORD *)v317 = 158;
                              *(_WORD *)&v317[4] = 1024;
                              *(_DWORD *)&v317[6] = v166;
                              _os_log_impl( &dword_181A5C000,  v170,  v258,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  buf,  0x2Cu);
                            }

                  free(v304);
                  if (!v268)
                  {
LABEL_342:
                    if (!*(void *)(v11 + 488))
                    {
                      v178 = *(void *)(v11 + 784);
                      if (v178)
                      {
                        nw_queue_set_timer_values(v178, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                      }

                      else
                      {
                        if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                        {
                          unint64_t v179 = (os_log_s *)__nwlog_obj();
                          if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
                          {
                            id v180 = *(void *)(v11 + 488);
                            v181 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
                            v182 = *(_DWORD *)(v11 + 860);
                            if (v180) {
                              LODWORD(v180) = *(_DWORD *)(v180 + 424);
                            }
                            *(_DWORD *)buf = 136447490;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v11 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            *(void *)&_BYTE buf[24] = " ";
                            *(_WORD *)&_BYTE buf[32] = 1024;
                            *(_DWORD *)&buf[34] = v181;
                            *(_WORD *)&buf[38] = 1024;
                            *(_DWORD *)&buf[40] = v182;
                            *(_WORD *)&buf[44] = 1024;
                            *(_DWORD *)&buf[46] = v180;
                            _os_log_impl( &dword_181A5C000,  v179,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
                          }
                        }

                        os_log_type_t v183 = *(void *)(v11 + 608);
                        v184 = *(void **)(v11 + 496);
                        *(void *)buf = MEMORY[0x1895F87A8];
                        *(void *)&buf[8] = 0x40000000LL;
                        *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                        *(void *)&_BYTE buf[24] = &unk_189BBD518;
                        *(void *)&_BYTE buf[32] = v183;
                        nw_queue_context_async(v184, buf);
                      }
                    }

          if (v255) {
            free(v255);
          }
          goto LABEL_264;
        }
      }
    }

LABEL_146:
    id v96 = socket(v23->sa_family, 2, 0);
    os_log_type_t v97 = v96;
    if ((v96 & 0x80000000) == 0)
    {
      *(_DWORD *)os_log_type_t type = 1;
      if (setsockopt(v96, 0xFFFF, 4, type, 4u))
      {
        v98 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        __nwlog_obj();
        os_log_type_t v99 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v98;
        size_t v100 = (char *)_os_log_send_and_compose_impl();

        v283.unint64_t sa_len = 16;
        LOBYTE(v286) = 0;
        if (v283.sa_len == 17)
        {
          __nwlog_obj();
          v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v102 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v98;
            _os_log_impl(&dword_181A5C000, v101, v102, "%{public}s SO_REUSEADDR failed %{darwin.errno}d", buf, 0x12u);
          }

          goto LABEL_525;
        }

        if (!(_BYTE)v286)
        {
          __nwlog_obj();
          v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          size_t v121 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v98;
            _os_log_impl( &dword_181A5C000,  v101,  v121,  "%{public}s SO_REUSEADDR failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
          }

          goto LABEL_525;
        }

        size_t v111 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v112 = v283.sa_len;
        BOOL v113 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
        if (!v111)
        {
          if (v113)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v98;
            _os_log_impl( &dword_181A5C000,  v101,  v112,  "%{public}s SO_REUSEADDR failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
          }

          goto LABEL_525;
        }

        if (v113)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v98;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v111;
          _os_log_impl( &dword_181A5C000,  v101,  v112,  "%{public}s SO_REUSEADDR failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

LABEL_430:
                            goto LABEL_431;
                          }

                          if (!uu[0])
                          {
                            __nwlog_obj();
                            v170 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            os_log_type_t v280 = v312[0];
                            if (os_log_type_enabled(v170, (os_log_type_t)v312[0]))
                            {
                              *(_DWORD *)buf = 136447234;
                              v314 = "nw_necp_append_tlv";
                              __int16 v315 = 2048;
                              *(void *)v316 = a3;
                              *(_WORD *)&v316[8] = 2048;
                              *(void *)&v316[10] = v297;
                              *(_WORD *)&v316[18] = 1024;
                              *(_DWORD *)v317 = 158;
                              *(_WORD *)&v317[4] = 1024;
                              *(_DWORD *)&v317[6] = v166;
                              _os_log_impl( &dword_181A5C000,  v170,  v280,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  buf,  0x2Cu);
                            }

                            goto LABEL_430;
                          }

                          v269 = (char *)__nw_create_backtrace_string();
                          __nwlog_obj();
                          v270 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          os_log_type_t v271 = v312[0];
                          BOOL v272 = os_log_type_enabled(v270, (os_log_type_t)v312[0]);
                          if (v269)
                          {
                            if (v272)
                            {
                              *(_DWORD *)buf = 136447490;
                              v314 = "nw_necp_append_tlv";
                              __int16 v315 = 2048;
                              *(void *)v316 = a3;
                              *(_WORD *)&v316[8] = 2048;
                              *(void *)&v316[10] = v297;
                              *(_WORD *)&v316[18] = 1024;
                              *(_DWORD *)v317 = 158;
                              *(_WORD *)&v317[4] = 1024;
                              *(_DWORD *)&v317[6] = v166;
                              *(_WORD *)v318 = 2082;
                              *(void *)&v318[2] = v269;
                              _os_log_impl( &dword_181A5C000,  v270,  v271,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
                            }

                            free(v269);
                          }

                          else
                          {
                            if (v272)
                            {
                              *(_DWORD *)buf = 136447234;
                              v314 = "nw_necp_append_tlv";
                              __int16 v315 = 2048;
                              *(void *)v316 = a3;
                              *(_WORD *)&v316[8] = 2048;
                              *(void *)&v316[10] = v297;
                              *(_WORD *)&v316[18] = 1024;
                              *(_DWORD *)v317 = 158;
                              *(_WORD *)&v317[4] = 1024;
                              *(_DWORD *)&v317[6] = v166;
                              _os_log_impl( &dword_181A5C000,  v270,  v271,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  buf,  0x2Cu);
                            }
                          }
                        }

              free(v83);
              goto LABEL_431;
            }

            if (v280 && setsockopt(v274, 41, 125, &v280, 4u))
            {
              v270 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              os_log_type_t v90 = nw_error_get_error_code(v270);
              __nwlog_obj();
              id v91 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446722;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v280;
              address[9] = 1024;
              *(_DWORD *)&address[10] = v90;
              size_t v83 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v279 = OS_LOG_TYPE_ERROR;
              BOOL v278 = 0;
              if (v279 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v92 = v279;
                if (os_log_type_enabled(v84, v279))
                {
                  *(_DWORD *)address = 136446722;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v280;
                  address[9] = 1024;
                  *(_DWORD *)&address[10] = v90;
                  _os_log_impl( &dword_181A5C000,  v84,  v92,  "%{public}s IPV6_BOUND_IF %d failed %{darwin.errno}d",  (uint8_t *)address,  0x18u);
                }

                goto LABEL_400;
              }

              if (!v278)
              {
                __nwlog_obj();
                os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                size_t v120 = v279;
                if (os_log_type_enabled(v84, v279))
                {
                  *(_DWORD *)address = 136446722;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v280;
                  address[9] = 1024;
                  *(_DWORD *)&address[10] = v90;
                  _os_log_impl( &dword_181A5C000,  v84,  v120,  "%{public}s IPV6_BOUND_IF %d failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x18u);
                }

                goto LABEL_400;
              }

              size_t v95 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              id v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              size_t v106 = v279;
              os_log_type_t v107 = os_log_type_enabled(v96, v279);
              if (v95)
              {
                if (v107)
                {
                  *(_DWORD *)address = 136446978;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v280;
                  address[9] = 1024;
                  *(_DWORD *)&address[10] = v90;
                  address[12] = 2082;
                  *(void *)&address[13] = v95;
                  _os_log_impl( &dword_181A5C000,  v96,  v106,  "%{public}s IPV6_BOUND_IF %d failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x22u);
                }

                goto LABEL_195;
              }

              if (v107)
              {
                *(_DWORD *)address = 136446722;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v280;
                address[9] = 1024;
                *(_DWORD *)&address[10] = v90;
                _os_log_impl( &dword_181A5C000,  v96,  v106,  "%{public}s IPV6_BOUND_IF %d failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x18u);
              }

              goto LABEL_428;
            }
          }

          else if (v79 == 2 && v77 && setsockopt(v274, 0, 25, &v280, 4u))
          {
            v270 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
            id v87 = nw_error_get_error_code(v270);
            __nwlog_obj();
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)address = 136446722;
            *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v280;
            address[9] = 1024;
            *(_DWORD *)&address[10] = v87;
            size_t v83 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            os_log_type_t v279 = OS_LOG_TYPE_DEFAULT;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v89 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)address = 136446722;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v280;
                address[9] = 1024;
                *(_DWORD *)&address[10] = v87;
                _os_log_impl( &dword_181A5C000,  v84,  v89,  "%{public}s IP_BOUND_IF %d failed %{darwin.errno}d",  (uint8_t *)address,  0x18u);
              }

              goto LABEL_400;
            }

            if (v279 == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v108 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)address = 136446722;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v280;
                address[9] = 1024;
                *(_DWORD *)&address[10] = v87;
                _os_log_impl( &dword_181A5C000,  v84,  v108,  "%{public}s IP_BOUND_IF %d failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x18u);
              }

              goto LABEL_400;
            }

            size_t v100 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            id v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v101 = type[0];
            os_log_type_t v102 = os_log_type_enabled(v96, type[0]);
            if (v100)
            {
              if (v102)
              {
                *(_DWORD *)address = 136446978;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v280;
                address[9] = 1024;
                *(_DWORD *)&address[10] = v87;
                address[12] = 2082;
                *(void *)&address[13] = v100;
                _os_log_impl( &dword_181A5C000,  v96,  v101,  "%{public}s IP_BOUND_IF %d failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x22u);
              }

              free(v100);
              goto LABEL_429;
            }

            if (v102)
            {
              *(_DWORD *)address = 136446722;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v280;
              address[9] = 1024;
              *(_DWORD *)&address[10] = v87;
              _os_log_impl( &dword_181A5C000,  v96,  v101,  "%{public}s IP_BOUND_IF %d failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x18u);
            }

            goto LABEL_428;
          }

          if (uuid_is_null(a2) || !setsockopt(v274, 0xFFFF, 4384, a2, 0x10u))
          {
LABEL_276:
            if (bind(v78, v18, v18->sa_len))
            {
              os_log_type_t v133 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              BOOL v134 = nw_error_get_error_code(v133);
              os_log_type_t v135 = v134;
              v270 = v133;
              if (v134 <= 0x31 && ((1LL << v134) & 0x3000000002006LL) != 0)
              {
                __nwlog_obj();
                BOOL v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)address = 136447235;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v78;
                  address[9] = 2113;
                  *(void *)&address[10] = v8;
                  address[14] = 2114;
                  *(void *)&address[15] = v75;
                  os_log_type_t v284 = 1024;
                  BOOL v285 = v135;
                  _os_log_impl( &dword_181A5C000,  v136,  OS_LOG_TYPE_ERROR,  "%{public}s bind(%d, %{private}@) %{public}@ failed %{darwin.errno}d",  (uint8_t *)address,  0x2Cu);
                }

                goto LABEL_431;
              }

              __nwlog_obj();
              os_log_type_t v146 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136447235;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v78;
              address[9] = 2113;
              *(void *)&address[10] = v8;
              address[14] = 2114;
              *(void *)&address[15] = v75;
              os_log_type_t v284 = 1024;
              BOOL v285 = v135;
              size_t v83 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v279 = OS_LOG_TYPE_DEFAULT;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v147 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136447235;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v274;
                  address[9] = 2113;
                  *(void *)&address[10] = v8;
                  address[14] = 2114;
                  *(void *)&address[15] = v75;
                  os_log_type_t v284 = 1024;
                  BOOL v285 = v135;
                  _os_log_impl( &dword_181A5C000,  v84,  v147,  "%{public}s bind(%d, %{private}@) %{public}@ failed %{darwin.errno}d",  (uint8_t *)address,  0x2Cu);
                }

                goto LABEL_400;
              }

              if (v279 == OS_LOG_TYPE_DEFAULT)
              {
                __nwlog_obj();
                os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                unsigned int v165 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136447235;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v274;
                  address[9] = 2113;
                  *(void *)&address[10] = v8;
                  address[14] = 2114;
                  *(void *)&address[15] = v75;
                  os_log_type_t v284 = 1024;
                  BOOL v285 = v135;
                  _os_log_impl( &dword_181A5C000,  v84,  v165,  "%{public}s bind(%d, %{private}@) %{public}@ failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x2Cu);
                }

                goto LABEL_400;
              }

              size_t v95 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              id v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v156 = type[0];
              v157 = os_log_type_enabled(v96, type[0]);
              if (v95)
              {
                if (v157)
                {
                  *(_DWORD *)address = 136447491;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v274;
                  address[9] = 2113;
                  *(void *)&address[10] = v8;
                  address[14] = 2114;
                  *(void *)&address[15] = v75;
                  os_log_type_t v284 = 1024;
                  BOOL v285 = v135;
                  os_log_type_t v286 = 2082;
                  v287 = v95;
                  _os_log_impl( &dword_181A5C000,  v96,  v156,  "%{public}s bind(%d, %{private}@) %{public}@ failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x36u);
                }

LABEL_431:
                        if (!v169)
                        {
LABEL_434:
                          a3 = 0LL;
                          if ((a5 & 4) != 0)
                          {
LABEL_324:
                            __int128 v300 = 0u;
                            __int128 v301 = 0u;
                            __int128 v298 = 0u;
                            __int128 v299 = 0u;
                            id v172 = nw_endpoint_copy_public_keys(v10);
                            obja = v172;
                            uint64_t v173 = [v172 countByEnumeratingWithState:&v298 objects:v310 count:16];
                            if (!v173) {
                              goto LABEL_414;
                            }
                            uint64_t v296 = *(void *)v299;
                            while (1)
                            {
                              for (uint64_t i = 0LL; i != v173; ++i)
                              {
                                if (*(void *)v299 != v296) {
                                  objc_enumerationMutation(obja);
                                }
                                v176 = *(void **)(*((void *)&v298 + 1) + 8 * i);
                                unsigned int v177 = objc_msgSend(v176, "length", v287, v288);
                                v178 = (const void *)[v176 bytes];
                                if (!a3)
                                {
                                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                  networkd_settings_init();
                                  id v189 = (id)gLogObj;
                                  *(_DWORD *)buf = 136446210;
                                  v314 = "nw_necp_append_tlv";
                                  LODWORD(v28_Block_object_dispose(va, 8) = 12;
                                  v287 = buf;
                                  v190 = (const char *)_os_log_send_and_compose_impl();

                                  v312[0] = 16;
                                  uu[0] = 0;
                                  if (__nwlog_fault(v190, v312, uu))
                                  {
                                    if (v312[0] == 17)
                                    {
                                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                      networkd_settings_init();
                                      v191 = (os_log_s *)(id)gLogObj;
                                      os_log_type_t v192 = v312[0];
                                      if (os_log_type_enabled(v191, (os_log_type_t)v312[0]))
                                      {
                                        *(_DWORD *)buf = 136446210;
                                        v314 = "nw_necp_append_tlv";
                                        _os_log_impl( &dword_181A5C000,  v191,  v192,  "%{public}s called with null tlv_start",  buf,  0xCu);
                                      }

                                      goto LABEL_399;
                                    }

                                    if (uu[0])
                                    {
                                      v197 = __nw_create_backtrace_string();
                                      if (v197)
                                      {
                                        v198 = (char *)v197;
                                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                        networkd_settings_init();
                                        v199 = (os_log_s *)(id)gLogObj;
                                        os_log_type_t v200 = v312[0];
                                        if (os_log_type_enabled(v199, (os_log_type_t)v312[0]))
                                        {
                                          *(_DWORD *)buf = 136446466;
                                          v314 = "nw_necp_append_tlv";
                                          __int16 v315 = 2082;
                                          *(void *)v316 = v198;
                                          _os_log_impl( &dword_181A5C000,  v199,  v200,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
                                        }

                                        free(v198);
                                        if (!v190) {
                                          goto LABEL_329;
                                        }
LABEL_401:
                                        v175 = (char *)v190;
LABEL_328:
                                        free(v175);
LABEL_329:
                                        a3 = 0LL;
                                        continue;
                                      }

                                      __nwlog_obj();
                                      v191 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                                      os_log_type_t v212 = v312[0];
                                      if (os_log_type_enabled(v191, (os_log_type_t)v312[0]))
                                      {
                                        *(_DWORD *)buf = 136446210;
                                        v314 = "nw_necp_append_tlv";
                                        _os_log_impl( &dword_181A5C000,  v191,  v212,  "%{public}s called with null tlv_start, no backtrace",  buf,  0xCu);
                                      }
                                    }

                                    else
                                    {
                                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                      networkd_settings_init();
                                      v191 = (os_log_s *)(id)gLogObj;
                                      os_log_type_t v207 = v312[0];
                                      if (os_log_type_enabled(v191, (os_log_type_t)v312[0]))
                                      {
                                        *(_DWORD *)buf = 136446210;
                                        v314 = "nw_necp_append_tlv";
                                        _os_log_impl( &dword_181A5C000,  v191,  v207,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
                                      }
                                    }

  if (v229) {
    free(v229);
  }
LABEL_291:
  v169 = 0;
  v170 = *(void *)(v8 + 224);
  if (!v170) {
    return 1LL;
  }
LABEL_292:
  if ((*(_BYTE *)(v170 + 158) & 1) == 0)
  {
    if (*((_BYTE *)v9 + 1537))
    {
      os_log_type_t v242 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG))
      {
        v243 = *(void *)(v170 + 488);
        os_log_type_t v244 = *(_DWORD *)(*(void *)(v170 + 480) + 372LL);
        BOOL v245 = *(_DWORD *)(v170 + 860);
        if (v243) {
          LODWORD(v243) = *(_DWORD *)(v243 + 424);
        }
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v170 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&_BYTE buf[32] = 1024;
        *(_DWORD *)&buf[34] = v244;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v245;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v243;
        *(_WORD *)&buf[50] = 2048;
        *(void *)&buf[52] = v170;
        _os_log_impl( &dword_181A5C000,  v242,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p",  buf,  0x3Cu);
      }
    }
  }

  os_log_type_t v171 = (_WORD *)(v170 + 872);
  if (((*(unsigned __int16 *)(v170 + 872) | (*(unsigned __int8 *)(v170 + 874) << 16)) & 0x80000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v170;
    id v172 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v173 = (os_log_s *)gLogObj;
      v174 = aBlock[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
        goto LABEL_322;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v170;
      v175 = "%{public}s connection %p not in idle list, cannot remove";
    }

    else if (type)
    {
      v178 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v173 = (os_log_s *)gLogObj;
      v174 = aBlock[0];
      unint64_t v179 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
      if (v178)
      {
        if (v179)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v170;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&_BYTE buf[24] = v178;
          _os_log_impl( &dword_181A5C000,  v173,  v174,  "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v178);
        goto LABEL_322;
      }

      if (!v179)
      {
LABEL_322:
        if (v172) {
          free(v172);
        }
        goto LABEL_338;
      }

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v170;
      v175 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v173 = (os_log_s *)gLogObj;
      v174 = aBlock[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
        goto LABEL_322;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v170;
      v175 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v173, v174, v175, buf, 0x16u);
    goto LABEL_322;
  }

  v176 = *(void *)(v170 + 592);
  unsigned int v177 = *(void **)(v170 + 600);
  if (v176)
  {
    *(void *)(v176 + 600) = v177;
    unsigned int v177 = *(void **)(v170 + 600);
  }

  else
  {
    *(void *)(v8 + 216) = v177;
  }

  *unsigned int v177 = v176;
  *(void *)(v170 + 592) = 0LL;
  *(void *)(v170 + 600) = 0LL;
  id v180 = *(_DWORD *)(v8 + 340);
  *(_DWORD *)(v8 + 340) = v180 - 1;
  if (!v180)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v181 = *(unsigned int *)(v8 + 340);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->idle_connections_count";
    *(_WORD *)&buf[22] = 2048;
    *(void *)&_BYTE buf[24] = 1LL;
    *(_WORD *)&_BYTE buf[32] = 2048;
    *(void *)&buf[34] = v181;
    v182 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v182, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v183 = (os_log_s *)gLogObj;
        v184 = aBlock[0];
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
        {
          v185 = *(unsigned int *)(v8 + 340);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->idle_connections_count";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&_BYTE buf[32] = 2048;
          *(void *)&buf[34] = v185;
          os_log_type_t v186 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_328:
          _os_log_impl(&dword_181A5C000, v183, v184, v186, buf, 0x2Au);
        }
      }

      else if (type)
      {
        BOOL v187 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v183 = (os_log_s *)gLogObj;
        v184 = aBlock[0];
        os_log_type_t v188 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
        if (v187)
        {
          if (v188)
          {
            id v189 = *(unsigned int *)(v8 + 340);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->idle_connections_count";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 1LL;
            *(_WORD *)&_BYTE buf[32] = 2048;
            *(void *)&buf[34] = v189;
            *(_WORD *)&buf[42] = 2082;
            *(void *)&buf[44] = v187;
            _os_log_impl( &dword_181A5C000,  v183,  v184,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v187);
          goto LABEL_329;
        }

        if (v188)
        {
          v191 = *(unsigned int *)(v8 + 340);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->idle_connections_count";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&_BYTE buf[32] = 2048;
          *(void *)&buf[34] = v191;
          os_log_type_t v186 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_328;
        }
      }

      else
      {
        os_log_type_t v183 = (os_log_s *)__nwlog_obj();
        v184 = aBlock[0];
        if (os_log_type_enabled(v183, (os_log_type_t)aBlock[0]))
        {
          v190 = *(unsigned int *)(v8 + 340);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->idle_connections_count";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&_BYTE buf[32] = 2048;
          *(void *)&buf[34] = v190;
          os_log_type_t v186 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_328;
        }
      }
    }

    _os_log_impl(&dword_181A5C000, v159, v160, v161, buf, 0xCu);
    goto LABEL_432;
  }

  if (v3 == 2)
  {
    os_log_type_t v8 = *((void *)handle + 1);
    if (v8)
    {
      nw_txt_record_t v7 = (uint64_t *)(v8 + 256);
      goto LABEL_17;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    BOOL v187 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v187, v265, v257))
    {
      if (v265[0] == 17)
      {
        os_log_type_t v188 = (os_log_s *)__nwlog_obj();
        id v189 = v265[0];
        if (!os_log_type_enabled(v188, (os_log_type_t)v265[0])) {
          goto LABEL_414;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        v190 = "%{public}s called with null handle->http1_stream";
        goto LABEL_413;
      }

      if (v257[0] == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v188 = (os_log_s *)__nwlog_obj();
        id v189 = v265[0];
        if (!os_log_type_enabled(v188, (os_log_type_t)v265[0])) {
          goto LABEL_414;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        v190 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        goto LABEL_413;
      }

      v198 = (char *)__nw_create_backtrace_string();
      os_log_type_t v188 = (os_log_s *)__nwlog_obj();
      id v189 = v265[0];
      v199 = os_log_type_enabled(v188, (os_log_type_t)v265[0]);
      if (v198)
      {
        if (v199)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v198;
          _os_log_impl( &dword_181A5C000,  v188,  v189,  "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v198);
        goto LABEL_414;
      }

      if (v199)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        v190 = "%{public}s called with null handle->http1_stream, no backtrace";
LABEL_413:
        _os_log_impl(&dword_181A5C000, v188, v189, v190, buf, 0xCu);
      }
    }

        free(v221);
        if (!v200)
        {
LABEL_309:
          if (!*(void *)(v12 + 488))
          {
            os_log_type_t v183 = *(void *)(v12 + 784);
            if (v183)
            {
              nw_queue_set_timer_values(v183, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
            }

            else
            {
              if ((*(_BYTE *)(v12 + 158) & 1) == 0)
              {
                v184 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
                {
                  v185 = *(void *)(v12 + 488);
                  os_log_type_t v186 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                  BOOL v187 = *(_DWORD *)(v12 + 860);
                  if (v185) {
                    LODWORD(v185) = *(_DWORD *)(v185 + 424);
                  }
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v12 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  *(void *)&_BYTE buf[24] = " ";
                  *(_WORD *)&_BYTE buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v186;
                  *(_WORD *)&buf[38] = 1024;
                  *(_DWORD *)&buf[40] = v187;
                  *(_WORD *)v236 = 1024;
                  *(_DWORD *)&v236[2] = v185;
                  _os_log_impl( &dword_181A5C000,  v184,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
                }
              }

              os_log_type_t v188 = *(void *)(v12 + 608);
              id v189 = *(void **)(v12 + 496);
              *(void *)buf = v81;
              *(void *)&buf[8] = 0x40000000LL;
              *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
              *(void *)&_BYTE buf[24] = &unk_189BBD518;
              *(void *)&_BYTE buf[32] = v188;
              nw_queue_context_async(v189, buf);
            }
          }

          goto LABEL_131;
        }

                if (v207) {
                  free(v207);
                }
                id v36 = v205;
                BOOL v49 = MEMORY[0x1895F87A8];
                goto LABEL_136;
              }

              int v227 = v36;
              __nwlog_obj();
              *(_DWORD *)v323 = 136446210;
              *(void *)&v323[4] = "__nw_protocol_disconnect";
              v228 = (char *)_os_log_send_and_compose_impl();
              v330[0] = 16;
              v321[0] = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v228, v330, v321))
              {
                if (v330[0] == 17)
                {
                  v229 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v230 = v330[0];
                  if (!os_log_type_enabled(v229, (os_log_type_t)v330[0])) {
                    goto LABEL_469;
                  }
                  *(_DWORD *)v323 = 136446210;
                  *(void *)&v323[4] = "__nw_protocol_disconnect";
                  v231 = "%{public}s called with null protocol";
LABEL_468:
                  _os_log_impl(&dword_181A5C000, v229, v230, v231, v323, 0xCu);
                  goto LABEL_469;
                }

                if (v321[0] == OS_LOG_TYPE_DEFAULT)
                {
                  v229 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v230 = v330[0];
                  if (!os_log_type_enabled(v229, (os_log_type_t)v330[0])) {
                    goto LABEL_469;
                  }
                  *(_DWORD *)v323 = 136446210;
                  *(void *)&v323[4] = "__nw_protocol_disconnect";
                  v231 = "%{public}s called with null protocol, backtrace limit exceeded";
                  goto LABEL_468;
                }

                os_log_type_t v249 = (char *)__nw_create_backtrace_string();
                v229 = (os_log_s *)__nwlog_obj();
                os_log_type_t v230 = v330[0];
                BOOL v250 = os_log_type_enabled(v229, (os_log_type_t)v330[0]);
                if (!v249)
                {
                  if (!v250) {
                    goto LABEL_469;
                  }
                  *(_DWORD *)v323 = 136446210;
                  *(void *)&v323[4] = "__nw_protocol_disconnect";
                  v231 = "%{public}s called with null protocol, no backtrace";
                  goto LABEL_468;
                }

                if (v250)
                {
                  *(_DWORD *)v323 = 136446466;
                  *(void *)&v323[4] = "__nw_protocol_disconnect";
                  *(_WORD *)&v323[12] = 2082;
                  *(void *)&v323[14] = v249;
                  _os_log_impl( &dword_181A5C000,  v229,  v230,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  v323,  0x16u);
                }

                free(v249);
              }

LABEL_399:
                                  }

                                  if (v190) {
                                    goto LABEL_401;
                                  }
                                  goto LABEL_329;
                                }

                                if (a3 >= v297)
                                {
                                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                  networkd_settings_init();
                                  id v193 = (id)gLogObj;
                                  *(_DWORD *)buf = 136447234;
                                  v314 = "nw_necp_append_tlv";
                                  __int16 v315 = 2048;
                                  *(void *)v316 = a3;
                                  *(_WORD *)&v316[8] = 2048;
                                  *(void *)&v316[10] = v297;
                                  *(_WORD *)&v316[18] = 1024;
                                  *(_DWORD *)v317 = 159;
                                  *(_WORD *)&v317[4] = 1024;
                                  *(_DWORD *)&v317[6] = v177;
                                  LODWORD(v28_Block_object_dispose(va, 8) = 44;
                                  v287 = buf;
                                  v194 = (const char *)_os_log_send_and_compose_impl();

                                  v312[0] = 16;
                                  uu[0] = 0;
                                  if (__nwlog_fault(v194, v312, uu))
                                  {
                                    if (v312[0] == 17)
                                    {
                                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                      networkd_settings_init();
                                      v195 = (os_log_s *)(id)gLogObj;
                                      os_log_type_t v196 = v312[0];
                                      if (os_log_type_enabled(v195, (os_log_type_t)v312[0]))
                                      {
                                        *(_DWORD *)buf = 136447234;
                                        v314 = "nw_necp_append_tlv";
                                        __int16 v315 = 2048;
                                        *(void *)v316 = a3;
                                        *(_WORD *)&v316[8] = 2048;
                                        *(void *)&v316[10] = v297;
                                        *(_WORD *)&v316[18] = 1024;
                                        *(_DWORD *)v317 = 159;
                                        *(_WORD *)&v317[4] = 1024;
                                        *(_DWORD *)&v317[6] = v177;
                                        _os_log_impl( &dword_181A5C000,  v195,  v196,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  buf,  0x2Cu);
                                      }

                                      goto LABEL_404;
                                    }

                                    if (uu[0])
                                    {
                                      v201 = __nw_create_backtrace_string();
                                      if (v201)
                                      {
                                        v202 = (char *)v201;
                                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                        networkd_settings_init();
                                        v203 = (os_log_s *)(id)gLogObj;
                                        os_log_type_t v204 = v312[0];
                                        if (os_log_type_enabled(v203, (os_log_type_t)v312[0]))
                                        {
                                          *(_DWORD *)buf = 136447490;
                                          v314 = "nw_necp_append_tlv";
                                          __int16 v315 = 2048;
                                          *(void *)v316 = a3;
                                          *(_WORD *)&v316[8] = 2048;
                                          *(void *)&v316[10] = v297;
                                          *(_WORD *)&v316[18] = 1024;
                                          *(_DWORD *)v317 = 159;
                                          *(_WORD *)&v317[4] = 1024;
                                          *(_DWORD *)&v317[6] = v177;
                                          *(_WORD *)v318 = 2082;
                                          *(void *)&v318[2] = v202;
                                          _os_log_impl( &dword_181A5C000,  v203,  v204,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping back trace:%{public}s",  buf,  0x36u);
                                        }

                                        free(v202);
                                        if (!v194) {
                                          goto LABEL_329;
                                        }
                                        goto LABEL_406;
                                      }

                                      __nwlog_obj();
                                      v195 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                                      os_log_type_t v213 = v312[0];
                                      if (os_log_type_enabled(v195, (os_log_type_t)v312[0]))
                                      {
                                        *(_DWORD *)buf = 136447234;
                                        v314 = "nw_necp_append_tlv";
                                        __int16 v315 = 2048;
                                        *(void *)v316 = a3;
                                        *(_WORD *)&v316[8] = 2048;
                                        *(void *)&v316[10] = v297;
                                        *(_WORD *)&v316[18] = 1024;
                                        *(_DWORD *)v317 = 159;
                                        *(_WORD *)&v317[4] = 1024;
                                        *(_DWORD *)&v317[6] = v177;
                                        _os_log_impl( &dword_181A5C000,  v195,  v213,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  buf,  0x2Cu);
                                      }
                                    }

                                    else
                                    {
                                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                      networkd_settings_init();
                                      v195 = (os_log_s *)(id)gLogObj;
                                      os_log_type_t v208 = v312[0];
                                      if (os_log_type_enabled(v195, (os_log_type_t)v312[0]))
                                      {
                                        *(_DWORD *)buf = 136447234;
                                        v314 = "nw_necp_append_tlv";
                                        __int16 v315 = 2048;
                                        *(void *)v316 = a3;
                                        *(_WORD *)&v316[8] = 2048;
                                        *(void *)&v316[10] = v297;
                                        *(_WORD *)&v316[18] = 1024;
                                        *(_DWORD *)v317 = 159;
                                        *(_WORD *)&v317[4] = 1024;
                                        *(_DWORD *)&v317[6] = v177;
                                        _os_log_impl( &dword_181A5C000,  v195,  v208,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  buf,  0x2Cu);
                                      }
                                    }

      if (v216) {
        free(v216);
      }
      goto LABEL_419;
    }

    BOOL v103 = (const sockaddr *)dnssd_getaddrinfo_result_get_address();
    v104 = dnssd_getaddrinfo_result_get_interface_index();
    if (!v103) {
      goto LABEL_325;
    }
    if (v103->sa_len > 0x80u) {
      goto LABEL_325;
    }
    size_t v105 = v104;
    int sa_family = v103->sa_family;
    if (sa_family != 30 && sa_family != 2) {
      goto LABEL_325;
    }
    memset(buf, 0, sizeof(buf));
    memcpy(buf, v103, v103->sa_len);
    extended_dns_error_code = dnssd_getaddrinfo_result_get_extended_dns_error_code();
    extended_dns_error_text = (const char *)dnssd_getaddrinfo_result_get_extended_dns_error_text();
    size_t v109 = *(void *)(v278 + 32);
    if (!v109)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v110 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 v299 = 136446722;
        *(void *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v299[12] = 1024;
        *(_DWORD *)&v299[14] = extended_dns_error_code;
        *(_WORD *)&v299[18] = 2082;
        *(void *)&v299[20] = extended_dns_error_text;
        os_log_type_t v112 = v110;
        BOOL v113 = "%{public}s Got Extended DNS Error: %u %{public}s";
        size_t v114 = 28;
LABEL_231:
        _os_log_impl(&dword_181A5C000, v112, OS_LOG_TYPE_INFO, v113, v299, v114);
      }

        free(v181);
        goto LABEL_422;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
      os_log_type_t v171 = (void *)_os_log_send_and_compose_impl();
      LOBYTE(__dst[0]) = 16;
      LOBYTE(v196) = 0;
      if (LOBYTE(__dst[0]) == 17)
      {
        id v172 = (os_log_s *)__nwlog_obj();
        uint64_t v173 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
          goto LABEL_422;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        v174 = "%{public}s called with null masque->context";
        goto LABEL_421;
      }

      if (!(_BYTE)v196)
      {
        id v172 = (os_log_s *)__nwlog_obj();
        uint64_t v173 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
          goto LABEL_422;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        v174 = "%{public}s called with null masque->context, backtrace limit exceeded";
        goto LABEL_421;
      }

      v181 = (char *)__nw_create_backtrace_string();
      id v172 = (os_log_s *)__nwlog_obj();
      uint64_t v173 = (os_log_type_t)__dst[0];
      v184 = os_log_type_enabled(v172, (os_log_type_t)__dst[0]);
      if (!v181)
      {
        if (!v184) {
          goto LABEL_422;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        v174 = "%{public}s called with null masque->context, no backtrace";
        goto LABEL_421;
      }

      if (!v184) {
        goto LABEL_399;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v181;
      os_log_type_t v183 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
      os_log_type_t v171 = (void *)_os_log_send_and_compose_impl();
      LOBYTE(__dst[0]) = 16;
      LOBYTE(v196) = 0;
      if (LOBYTE(__dst[0]) == 17)
      {
        id v172 = (os_log_s *)__nwlog_obj();
        uint64_t v173 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
          goto LABEL_422;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        v174 = "%{public}s called with null masque";
LABEL_421:
        _os_log_impl(&dword_181A5C000, v172, v173, v174, buf, 0xCu);
        goto LABEL_422;
      }

      if (!(_BYTE)v196)
      {
        id v172 = (os_log_s *)__nwlog_obj();
        uint64_t v173 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
          goto LABEL_422;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        v174 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_421;
      }

      v181 = (char *)__nw_create_backtrace_string();
      id v172 = (os_log_s *)__nwlog_obj();
      uint64_t v173 = (os_log_type_t)__dst[0];
      v182 = os_log_type_enabled(v172, (os_log_type_t)__dst[0]);
      if (!v181)
      {
        if (!v182) {
          goto LABEL_422;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        v174 = "%{public}s called with null masque, no backtrace";
        goto LABEL_421;
      }

      if (!v182) {
        goto LABEL_399;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v181;
      os_log_type_t v183 = "%{public}s called with null masque, dumping backtrace:%{public}s";
    }

    if (!v145) {
      goto LABEL_401;
    }
    goto LABEL_400;
  }

  os_log_type_t v8 = *((void *)handle + 1);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    os_log_type_t v145 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v146 = (os_log_s *)__nwlog_obj();
      v147 = type[0];
      if (!os_log_type_enabled(v146, type[0])) {
        goto LABEL_399;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v148 = "%{public}s called with null handle->http1_stream";
      goto LABEL_398;
    }

    if (!LOBYTE(aBlock[0]))
    {
      os_log_type_t v146 = (os_log_s *)__nwlog_obj();
      v147 = type[0];
      if (!os_log_type_enabled(v146, type[0])) {
        goto LABEL_399;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v148 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_398;
    }

    id v180 = (char *)__nw_create_backtrace_string();
    os_log_type_t v146 = (os_log_s *)__nwlog_obj();
    v147 = type[0];
    os_log_type_t v183 = os_log_type_enabled(v146, type[0]);
    if (!v180)
    {
      if (!v183) {
        goto LABEL_399;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v148 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_398;
    }

    if (v183)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v180;
      v182 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_290;
    }

      goto LABEL_119;
    }

    if (v298 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      BOOL v233 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v270 = type[0];
      if (os_log_type_enabled(v233, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v233,  v270,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_399;
    }

    BOOL v247 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v264 = type[0];
    os_log_type_t v265 = os_log_type_enabled(v72, type[0]);
    if (v247)
    {
      if (v265)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int128 v300 = 2082;
        __int128 v301 = (uint64_t)v247;
        _os_log_impl( &dword_181A5C000,  v72,  v264,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_369;
    }

    if (v265)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_181A5C000, v72, v264, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }

LABEL_404:
                                  }

                                  if (!v194) {
                                    goto LABEL_329;
                                  }
LABEL_406:
                                  v175 = (char *)v194;
                                  goto LABEL_328;
                                }

                                unint64_t v179 = v177 + 5LL;
                                if (v297 - a3 < v179)
                                {
                                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                  networkd_settings_init();
                                  id v180 = (id)gLogObj;
                                  *(_DWORD *)buf = 136447490;
                                  v314 = "nw_necp_append_tlv";
                                  __int16 v315 = 2048;
                                  *(void *)v316 = a3;
                                  *(_WORD *)&v316[8] = 2048;
                                  *(void *)&v316[10] = v177 + 5LL;
                                  *(_WORD *)&v316[18] = 2048;
                                  *(void *)v317 = v297;
                                  *(_WORD *)&v317[8] = 1024;
                                  *(_DWORD *)v318 = 159;
                                  *(_WORD *)&v318[4] = 1024;
                                  *(_DWORD *)&v318[6] = v177;
                                  LODWORD(v28_Block_object_dispose(va, 8) = 54;
                                  v287 = buf;
                                  v181 = (const char *)_os_log_send_and_compose_impl();

                                  v312[0] = 16;
                                  uu[0] = 0;
                                  if (v312[0] == 17)
                                  {
                                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                    networkd_settings_init();
                                    v182 = (os_log_s *)(id)gLogObj;
                                    os_log_type_t v183 = v312[0];
                                    if (os_log_type_enabled(v182, (os_log_type_t)v312[0]))
                                    {
                                      *(_DWORD *)buf = 136447490;
                                      v314 = "nw_necp_append_tlv";
                                      __int16 v315 = 2048;
                                      *(void *)v316 = a3;
                                      *(_WORD *)&v316[8] = 2048;
                                      *(void *)&v316[10] = v177 + 5LL;
                                      *(_WORD *)&v316[18] = 2048;
                                      *(void *)v317 = v297;
                                      *(_WORD *)&v317[8] = 1024;
                                      *(_DWORD *)v318 = 159;
                                      *(_WORD *)&v318[4] = 1024;
                                      *(_DWORD *)&v318[6] = v177;
                                      _os_log_impl( &dword_181A5C000,  v182,  v183,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
                                    }

                                    goto LABEL_409;
                                  }

                                  if (uu[0])
                                  {
                                    v184 = (char *)__nw_create_backtrace_string();
                                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                    networkd_settings_init();
                                    v185 = (os_log_s *)(id)gLogObj;
                                    os_log_type_t v186 = v312[0];
                                    BOOL v187 = os_log_type_enabled(v185, (os_log_type_t)v312[0]);
                                    if (v184)
                                    {
                                      if (v187)
                                      {
                                        *(_DWORD *)buf = 136447746;
                                        v314 = "nw_necp_append_tlv";
                                        __int16 v315 = 2048;
                                        *(void *)v316 = a3;
                                        *(_WORD *)&v316[8] = 2048;
                                        *(void *)&v316[10] = v177 + 5LL;
                                        *(_WORD *)&v316[18] = 2048;
                                        *(void *)v317 = v297;
                                        *(_WORD *)&v317[8] = 1024;
                                        *(_DWORD *)v318 = 159;
                                        *(_WORD *)&v318[4] = 1024;
                                        *(_DWORD *)&v318[6] = v177;
                                        __int16 v319 = 2082;
                                        v320 = v184;
                                        _os_log_impl( &dword_181A5C000,  v185,  v186,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u le ngth=%u, dumping backtrace:%{public}s",  buf,  0x40u);
                                      }

                                      free(v184);
                                      if (!v181) {
                                        goto LABEL_329;
                                      }
                                      goto LABEL_327;
                                    }

                                    if (v187)
                                    {
                                      *(_DWORD *)buf = 136447490;
                                      v314 = "nw_necp_append_tlv";
                                      __int16 v315 = 2048;
                                      *(void *)v316 = a3;
                                      *(_WORD *)&v316[8] = 2048;
                                      *(void *)&v316[10] = v177 + 5LL;
                                      *(_WORD *)&v316[18] = 2048;
                                      *(void *)v317 = v297;
                                      *(_WORD *)&v317[8] = 1024;
                                      *(_DWORD *)v318 = 159;
                                      *(_WORD *)&v318[4] = 1024;
                                      *(_DWORD *)&v318[6] = v177;
                                      _os_log_impl( &dword_181A5C000,  v185,  v186,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u leng th=%u, no backtrace",  buf,  0x36u);
                                    }

    free(backtrace_string);
    goto LABEL_424;
  }

  size_t v100 = (os_log_s *)__nwlog_obj();
  v101 = type[0];
  if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
  {
    *(_DWORD *)BOOL v128 = 136446210;
    *(void *)&v128[4] = "sa_dst_compare_internal";
    os_log_type_t v102 = "%{public}s called with null dst1";
LABEL_423:
    _os_log_impl(&dword_181A5C000, v100, v101, v102, v128, 0xCu);
  }

        v251 = object;
        if (v220) {
          free(v220);
        }
        goto LABEL_418;
      }

      __nwlog_obj();
      v215 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)&buf[0].unint64_t sa_len = 136446210;
      *(void *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfi"
                                      "g:echConfigLength:sensitiveRedacted:]";
      v216 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v298[0] = 0;
      if ((__nwlog_fault(v216, type, v298) & 1) != 0)
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v217 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v218 = type[0];
          if (os_log_type_enabled(v217, type[0]))
          {
            *(_DWORD *)&buf[0].unint64_t sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:ec"
                                            "hConfig:echConfigLength:sensitiveRedacted:]";
            _os_log_impl(&dword_181A5C000, v217, v218, "%{public}s [super init] failed", &buf[0].sa_len, 0xCu);
          }
        }

        else if (v298[0])
        {
          v231 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v217 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v232 = type[0];
          BOOL v233 = os_log_type_enabled(v217, type[0]);
          if (v231)
          {
            if (v233)
            {
              *(_DWORD *)&buf[0].unint64_t sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:"
                                              "echConfig:echConfigLength:sensitiveRedacted:]";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(void *)&buf[0].sa_data[12] = v231;
              _os_log_impl( &dword_181A5C000,  v217,  v232,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  &buf[0].sa_len,  0x16u);
            }

            free(v231);
            goto LABEL_399;
          }

          if (v233)
          {
            *(_DWORD *)&buf[0].unint64_t sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:ec"
                                            "hConfig:echConfigLength:sensitiveRedacted:]";
            _os_log_impl( &dword_181A5C000,  v217,  v232,  "%{public}s [super init] failed, no backtrace",  &buf[0].sa_len,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          v217 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v247 = type[0];
          if (os_log_type_enabled(v217, type[0]))
          {
            *(_DWORD *)&buf[0].unint64_t sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:ec"
                                            "hConfig:echConfigLength:sensitiveRedacted:]";
            _os_log_impl( &dword_181A5C000,  v217,  v247,  "%{public}s [super init] failed, backtrace limit exceeded",  &buf[0].sa_len,  0xCu);
          }
        }
      }

              if (v143) {
                free(v143);
              }
              BOOL v76 = v272;
LABEL_407:
              __nwlog_obj();
              v184 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)address = 136446466;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 2112;
                *(void *)&address[7] = endpoint;
                _os_log_impl( &dword_181A5C000,  v184,  OS_LOG_TYPE_DEBUG,  "%{public}s Joining multicast group %@",  (uint8_t *)address,  0x16u);
              }

              memset(type, 0, sizeof(type));
              os_log_type_t v277 = 0;
              *(sockaddr *)os_log_type_t type = *(sockaddr *)&nw_endpoint_get_address(endpoint)->sa_data[6];
              v185 = nw_parameters_copy_required_interface((nw_parameters_t)v75);
              os_log_type_t v186 = v185;
              if (!v185)
              {
LABEL_413:
                if ((setsockopt(v274, 41, 13, type, 0x14u) & 0x80000000) == 0) {
                  goto LABEL_488;
                }
                BOOL v187 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                __nwlog_obj();
                os_log_type_t v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                id v189 = v188;
                if (v187 == 49)
                {
                  if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)address = 136446722;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(void *)&address[7] = endpoint;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = 49;
                    _os_log_impl( &dword_181A5C000,  v189,  OS_LOG_TYPE_ERROR,  "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d",  (uint8_t *)address,  0x1Cu);
                  }

                  goto LABEL_488;
                }

                *(_DWORD *)address = 136446722;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 2112;
                *(void *)&address[7] = endpoint;
                address[11] = 1024;
                *(_DWORD *)&address[12] = v187;
                v191 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t v279 = OS_LOG_TYPE_ERROR;
                BOOL v278 = 0;
                if (__nwlog_fault(v191, &v279, &v278))
                {
                  if (v279 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    os_log_type_t v192 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    id v193 = v279;
                    if (os_log_type_enabled(v192, v279))
                    {
                      *(_DWORD *)address = 136446722;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 2112;
                      *(void *)&address[7] = endpoint;
                      address[11] = 1024;
                      *(_DWORD *)&address[12] = v187;
                      _os_log_impl( &dword_181A5C000,  v192,  v193,  "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d",  (uint8_t *)address,  0x1Cu);
                    }
                  }

                  else if (v278)
                  {
                    v195 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    os_log_type_t v192 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v265 = v279;
                    os_log_type_t v196 = os_log_type_enabled(v192, v279);
                    if (v195)
                    {
                      if (v196)
                      {
                        *(_DWORD *)address = 136446978;
                        *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                        address[6] = 2112;
                        *(void *)&address[7] = endpoint;
                        address[11] = 1024;
                        *(_DWORD *)&address[12] = v187;
                        address[14] = 2082;
                        *(void *)&address[15] = v195;
                        _os_log_impl( &dword_181A5C000,  v192,  v265,  "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x26u);
                      }

                      free(v195);
                      goto LABEL_486;
                    }

                    if (v196)
                    {
                      *(_DWORD *)address = 136446722;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 2112;
                      *(void *)&address[7] = endpoint;
                      address[11] = 1024;
                      *(_DWORD *)&address[12] = v187;
                      _os_log_impl( &dword_181A5C000,  v192,  v265,  "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x1Cu);
                    }
                  }

                  else
                  {
                    __nwlog_obj();
                    os_log_type_t v192 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    BOOL v211 = v279;
                    if (os_log_type_enabled(v192, v279))
                    {
                      *(_DWORD *)address = 136446722;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 2112;
                      *(void *)&address[7] = endpoint;
                      address[11] = 1024;
                      *(_DWORD *)&address[12] = v187;
                      _os_log_impl( &dword_181A5C000,  v192,  v211,  "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x1Cu);
                    }
                  }
                }

        if (v190) {
          free(v190);
        }
LABEL_219:
        BOOL result = 0LL;
        if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          size_t v119 = gconnectionLogObj;
          BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)result)
          {
            size_t v120 = *(_DWORD *)(a3 + 368);
            size_t v121 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            os_log_type_t v240 = 2082;
            v241 = (void *)(a3 + 390);
            os_log_type_t v242 = 2080;
            v243 = " ";
            os_log_type_t v244 = 1024;
            BOOL v245 = v120;
            os_log_type_t v246 = 1024;
            *(_DWORD *)BOOL v247 = v121;
            os_log_type_t v17 = "%{public}s %{public}s%s<i%u> received incoming HEADERS frame for stream %d";
            BOOL v18 = (os_log_s *)v119;
            goto LABEL_225;
          }
        }

        return result;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      __int128 v53 = *(_DWORD *)(a3 + 368);
      size_t v54 = *((_DWORD *)a2 + 2);
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
      os_log_type_t v240 = 2082;
      v241 = (void *)(a3 + 390);
      os_log_type_t v242 = 2080;
      v243 = " ";
      os_log_type_t v244 = 1024;
      BOOL v245 = v53;
      os_log_type_t v246 = 1024;
      *(_DWORD *)BOOL v247 = v54;
      unint64_t v55 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v236 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v56 = (os_log_s *)gconnectionLogObj;
        char v57 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_195;
        }
        BOOL v58 = *(_DWORD *)(a3 + 368);
        os_log_type_t v59 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
        os_log_type_t v240 = 2082;
        v241 = (void *)(a3 + 390);
        os_log_type_t v242 = 2080;
        v243 = " ";
        os_log_type_t v244 = 1024;
        BOOL v245 = v58;
        os_log_type_t v246 = 1024;
        *(_DWORD *)BOOL v247 = v59;
        BOOL v60 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
      }

      else if (v236)
      {
        size_t v83 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v56 = (os_log_s *)gconnectionLogObj;
        char v57 = type;
        os_log_type_t v84 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v83)
        {
          if (v84)
          {
            __int16 v85 = *(_DWORD *)(a3 + 368);
            v86 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            os_log_type_t v240 = 2082;
            v241 = (void *)(a3 + 390);
            os_log_type_t v242 = 2080;
            v243 = " ";
            os_log_type_t v244 = 1024;
            BOOL v245 = v85;
            os_log_type_t v246 = 1024;
            *(_DWORD *)BOOL v247 = v86;
            *(_WORD *)&v247[4] = 2082;
            *(void *)&v247[6] = v83;
            _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s %{public}s%s<i%u> failed to find stream %d, dumping backtrace:%{public}s",  buf,  0x36u);
          }

          free(v83);
          goto LABEL_195;
        }

        if (!v84)
        {
LABEL_195:
          if (!v55) {
            return 4294966775LL;
          }
          os_log_type_t v112 = (char *)v55;
          goto LABEL_197;
        }

        size_t v110 = *(_DWORD *)(a3 + 368);
        size_t v111 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
        os_log_type_t v240 = 2082;
        v241 = (void *)(a3 + 390);
        os_log_type_t v242 = 2080;
        v243 = " ";
        os_log_type_t v244 = 1024;
        BOOL v245 = v110;
        os_log_type_t v246 = 1024;
        *(_DWORD *)BOOL v247 = v111;
        BOOL v60 = "%{public}s %{public}s%s<i%u> failed to find stream %d, no backtrace";
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v56 = (os_log_s *)gconnectionLogObj;
        char v57 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_195;
        }
        os_log_type_t v99 = *(_DWORD *)(a3 + 368);
        size_t v100 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
        os_log_type_t v240 = 2082;
        v241 = (void *)(a3 + 390);
        os_log_type_t v242 = 2080;
        v243 = " ";
        os_log_type_t v244 = 1024;
        BOOL v245 = v99;
        os_log_type_t v246 = 1024;
        *(_DWORD *)BOOL v247 = v100;
        BOOL v60 = "%{public}s %{public}s%s<i%u> failed to find stream %d, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v56, v57, v60, buf, 0x2Cu);
      goto LABEL_195;
    case 2:
      BOOL result = 0LL;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v15 = gconnectionLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v16 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
      os_log_type_t v240 = 2082;
      v241 = (void *)(a3 + 390);
      os_log_type_t v242 = 2080;
      v243 = " ";
      os_log_type_t v244 = 1024;
      BOOL v245 = v16;
      os_log_type_t v17 = "%{public}s %{public}s%s<i%u> received complete PRIORITY frame, ignoring";
      BOOL v18 = (os_log_s *)v15;
      size_t v19 = OS_LOG_TYPE_DEBUG;
      size_t v20 = 38;
      goto LABEL_133;
    case 3:
      if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v148 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v149 = *(_DWORD *)(a3 + 368);
          BOOL v150 = *((_DWORD *)a2 + 2);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
          os_log_type_t v240 = 2082;
          v241 = (void *)(a3 + 390);
          os_log_type_t v242 = 2080;
          v243 = " ";
          os_log_type_t v244 = 1024;
          BOOL v245 = v149;
          os_log_type_t v246 = 1024;
          *(_DWORD *)BOOL v247 = v150;
          _os_log_impl( &dword_181A5C000,  v148,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> stream %d received RST_STREAM frame, setting error to ECONNRESET",  buf,  0x2Cu);
        }
      }

      size_t v21 = *((_DWORD *)a2 + 2);
      if (v21 <= 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        size_t v42 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_127;
        }
        uint64_t v43 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_http2_get_protocol_from_stream_id";
        os_log_type_t v240 = 2082;
        v241 = (void *)(a3 + 390);
        os_log_type_t v242 = 2080;
        v243 = " ";
        os_log_type_t v244 = 1024;
        BOOL v245 = v43;
        os_log_type_t v246 = 1024;
        *(_DWORD *)BOOL v247 = v21;
        char v44 = "%{public}s %{public}s%s<i%u> requested stream id (%d) is not valid, returning NULL protocol";
        unsigned __int8 v45 = (os_log_s *)v42;
        unsigned __int8 v46 = OS_LOG_TYPE_ERROR;
        os_log_type_t v47 = 44;
      }

      else
      {
        *(void *)os_log_type_t v238 = 0LL;
        uint64_t v22 = nw_http2_get_stream_from_id(a3, v21, v238);
        if (v22)
        {
          char v23 = *(void *)v238;
          if (*(void *)v238)
          {
            BOOL v24 = *(void *)(*(void *)v238 + 24LL);
            if (v24)
            {
              os_log_type_t v25 = *(void (**)(void, uint64_t, uint64_t))(v24 + 56);
              if (v25)
              {
                BOOL v26 = *((_DWORD *)a2 + 4);
                if (v26 == 7)
                {
                  v25(*(void *)v238, a3, 35LL);
                }

                else if (v26 == 13)
                {
                  v25(*(void *)v238, a3, 43LL);
                }

                else
                {
                  v25(*(void *)v238, a3, 54LL);
                }

                return 0LL;
              }
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v176 = *(_DWORD *)(a3 + 368);
            unsigned int v177 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            os_log_type_t v240 = 2082;
            v241 = (void *)(a3 + 390);
            os_log_type_t v242 = 2080;
            v243 = " ";
            os_log_type_t v244 = 1024;
            BOOL v245 = v176;
            os_log_type_t v246 = 2048;
            *(void *)BOOL v247 = v23;
            *(_WORD *)&v247[8] = 1024;
            *(_DWORD *)&v247[10] = v177;
            v178 = (const char *)_os_log_send_and_compose_impl();
            v238[0] = OS_LOG_TYPE_ERROR;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            if (v238[0] == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              unint64_t v179 = (os_log_s *)gconnectionLogObj;
              id v180 = v238[0];
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v238[0])) {
                goto LABEL_392;
              }
              v181 = *(_DWORD *)(a3 + 368);
              v182 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
              os_log_type_t v240 = 2082;
              v241 = (void *)(a3 + 390);
              os_log_type_t v242 = 2080;
              v243 = " ";
              os_log_type_t v244 = 1024;
              BOOL v245 = v181;
              os_log_type_t v246 = 2048;
              *(void *)BOOL v247 = v23;
              *(_WORD *)&v247[8] = 1024;
              *(_DWORD *)&v247[10] = v182;
              os_log_type_t v183 = "%{public}s %{public}s%s<i%u> no error callback for protocol %p attached to stream %d";
            }

            else if (type)
            {
              v195 = (char *)__nw_create_backtrace_string();
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              unint64_t v179 = (os_log_s *)gconnectionLogObj;
              id v180 = v238[0];
              os_log_type_t v196 = os_log_type_enabled((os_log_t)gconnectionLogObj, v238[0]);
              if (v195)
              {
                if (v196)
                {
                  v197 = *(_DWORD *)(a3 + 368);
                  v198 = *((_DWORD *)a2 + 2);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
                  os_log_type_t v240 = 2082;
                  v241 = (void *)(a3 + 390);
                  os_log_type_t v242 = 2080;
                  v243 = " ";
                  os_log_type_t v244 = 1024;
                  BOOL v245 = v197;
                  os_log_type_t v246 = 2048;
                  *(void *)BOOL v247 = v23;
                  *(_WORD *)&v247[8] = 1024;
                  *(_DWORD *)&v247[10] = v198;
                  *(_WORD *)&v247[14] = 2082;
                  *(void *)&v247[16] = v195;
                  _os_log_impl( &dword_181A5C000,  v179,  v180,  "%{public}s %{public}s%s<i%u> no error callback for protocol %p attached to stream %d, dumping backtrace:%{public}s",  buf,  0x40u);
                }

                free(v195);
                goto LABEL_392;
              }

              if (!v196)
              {
LABEL_392:
                if (!v178) {
                  return 4294966775LL;
                }
                os_log_type_t v112 = (char *)v178;
                goto LABEL_197;
              }

              size_t v224 = *(_DWORD *)(a3 + 368);
              unint64_t v225 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
              os_log_type_t v240 = 2082;
              v241 = (void *)(a3 + 390);
              os_log_type_t v242 = 2080;
              v243 = " ";
              os_log_type_t v244 = 1024;
              BOOL v245 = v224;
              os_log_type_t v246 = 2048;
              *(void *)BOOL v247 = v23;
              *(_WORD *)&v247[8] = 1024;
              *(_DWORD *)&v247[10] = v225;
              os_log_type_t v183 = "%{public}s %{public}s%s<i%u> no error callback for protocol %p attached to stream %d, no backtrace";
            }

            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              unint64_t v179 = (os_log_s *)gconnectionLogObj;
              id v180 = v238[0];
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v238[0])) {
                goto LABEL_392;
              }
              v218 = *(_DWORD *)(a3 + 368);
              v219 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
              os_log_type_t v240 = 2082;
              v241 = (void *)(a3 + 390);
              os_log_type_t v242 = 2080;
              v243 = " ";
              os_log_type_t v244 = 1024;
              BOOL v245 = v218;
              os_log_type_t v246 = 2048;
              *(void *)BOOL v247 = v23;
              *(_WORD *)&v247[8] = 1024;
              *(_DWORD *)&v247[10] = v219;
              os_log_type_t v183 = "%{public}s %{public}s%s<i%u> no error callback for protocol %p attached to stream %d, backtrace limit exceeded";
            }

            _os_log_impl(&dword_181A5C000, v179, v180, v183, buf, 0x36u);
            goto LABEL_392;
          }

          size_t v72 = v22;
          if (((*(unsigned __int16 *)(v22 + 188) | (*(unsigned __int8 *)(v22 + 190) << 16)) & 0x80000) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v73 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v75 = *(_DWORD *)(v72 + 176);
              __int16 v74 = *(_DWORD *)(v72 + 180);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http2_get_protocol_from_stream_id";
              os_log_type_t v240 = 2082;
              v241 = (void *)(v72 + 191);
              os_log_type_t v242 = 2080;
              v243 = " ";
              os_log_type_t v244 = 1024;
              BOOL v245 = v74;
              os_log_type_t v246 = 1024;
              *(_DWORD *)BOOL v247 = v75;
              *(_WORD *)&v247[4] = 1024;
              *(_DWORD *)&v247[6] = v75;
              char v44 = "%{public}s %{public}s%s<i%u:s%d> no input handler attached to stream %d";
              unsigned __int8 v45 = (os_log_s *)v73;
              unsigned __int8 v46 = OS_LOG_TYPE_INFO;
              os_log_type_t v47 = 50;
              goto LABEL_126;
            }
          }

LABEL_356:
                                    goto LABEL_357;
                                  }

                                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                  networkd_settings_init();
                                  v182 = (os_log_s *)(id)gLogObj;
                                  os_log_type_t v188 = v312[0];
                                  if (os_log_type_enabled(v182, (os_log_type_t)v312[0]))
                                  {
                                    *(_DWORD *)buf = 136447490;
                                    v314 = "nw_necp_append_tlv";
                                    __int16 v315 = 2048;
                                    *(void *)v316 = a3;
                                    *(_WORD *)&v316[8] = 2048;
                                    *(void *)&v316[10] = v177 + 5LL;
                                    *(_WORD *)&v316[18] = 2048;
                                    *(void *)v317 = v297;
                                    *(_WORD *)&v317[8] = 1024;
                                    *(_DWORD *)v318 = 159;
                                    *(_WORD *)&v318[4] = 1024;
                                    *(_DWORD *)&v318[6] = v177;
                                    _os_log_impl( &dword_181A5C000,  v182,  v188,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length =%u, backtrace limit exceeded",  buf,  0x36u);
                                  }

                                  goto LABEL_409;
                                }

                                *(_BYTE *)a3 = -97;
                                *(_DWORD *)(a3 + 1) = v177;
                                if (v177)
                                {
                                  if (!v178)
                                  {
                                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                    networkd_settings_init();
                                    id v205 = (id)gLogObj;
                                    *(_DWORD *)buf = 136446722;
                                    v314 = "nw_necp_append_tlv";
                                    __int16 v315 = 1024;
                                    *(_DWORD *)v316 = 159;
                                    *(_WORD *)&v316[4] = 1024;
                                    *(_DWORD *)&v316[6] = v177;
                                    LODWORD(v28_Block_object_dispose(va, 8) = 24;
                                    v287 = buf;
                                    v181 = (const char *)_os_log_send_and_compose_impl();

                                    v312[0] = 16;
                                    uu[0] = 0;
                                    if (v312[0] == 17)
                                    {
                                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                      networkd_settings_init();
                                      v182 = (os_log_s *)(id)gLogObj;
                                      os_log_type_t v206 = v312[0];
                                      if (os_log_type_enabled(v182, (os_log_type_t)v312[0]))
                                      {
                                        *(_DWORD *)buf = 136446722;
                                        v314 = "nw_necp_append_tlv";
                                        __int16 v315 = 1024;
                                        *(_DWORD *)v316 = 159;
                                        *(_WORD *)&v316[4] = 1024;
                                        *(_DWORD *)&v316[6] = v177;
                                        _os_log_impl( &dword_181A5C000,  v182,  v206,  "%{public}s type=%u length=%u but value is NULL",  buf,  0x18u);
                                      }
                                    }

                                    else
                                    {
                                      if (uu[0])
                                      {
                                        v209 = (char *)__nw_create_backtrace_string();
                                        __nwlog_obj();
                                        v185 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                                        os_log_type_t v210 = v312[0];
                                        BOOL v211 = os_log_type_enabled(v185, (os_log_type_t)v312[0]);
                                        if (!v209)
                                        {
                                          if (v211)
                                          {
                                            *(_DWORD *)buf = 136446722;
                                            v314 = "nw_necp_append_tlv";
                                            __int16 v315 = 1024;
                                            *(_DWORD *)v316 = 159;
                                            *(_WORD *)&v316[4] = 1024;
                                            *(_DWORD *)&v316[6] = v177;
                                            _os_log_impl( &dword_181A5C000,  v185,  v210,  "%{public}s type=%u length=%u but value is NULL, no backtrace",  buf,  0x18u);
                                          }

                                          goto LABEL_356;
                                        }

                                        if (v211)
                                        {
                                          *(_DWORD *)buf = 136446978;
                                          v314 = "nw_necp_append_tlv";
                                          __int16 v315 = 1024;
                                          *(_DWORD *)v316 = 159;
                                          *(_WORD *)&v316[4] = 1024;
                                          *(_DWORD *)&v316[6] = v177;
                                          *(_WORD *)&v316[10] = 2082;
                                          *(void *)&v316[12] = v209;
                                          _os_log_impl( &dword_181A5C000,  v185,  v210,  "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s",  buf,  0x22u);
                                        }

                                        free(v209);
LABEL_357:
                                        if (!v181) {
                                          goto LABEL_329;
                                        }
LABEL_327:
                                        v175 = (char *)v181;
                                        goto LABEL_328;
                                      }

                                      __nwlog_obj();
                                      v182 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                                      os_log_type_t v214 = v312[0];
                                      if (os_log_type_enabled(v182, (os_log_type_t)v312[0]))
                                      {
                                        *(_DWORD *)buf = 136446722;
                                        v314 = "nw_necp_append_tlv";
                                        __int16 v315 = 1024;
                                        *(_DWORD *)v316 = 159;
                                        *(_WORD *)&v316[4] = 1024;
                                        *(_DWORD *)&v316[6] = v177;
                                        _os_log_impl( &dword_181A5C000,  v182,  v214,  "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded",  buf,  0x18u);
                                      }
                                    }

            free(v143);
            if (!v99) {
              goto LABEL_385;
            }
            goto LABEL_383;
          }
        }

        else if (v54 == 2)
        {
          __int16 v74 = v56;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v75 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
            _os_log_impl( &dword_181A5C000,  v75,  OS_LOG_TYPE_ERROR,  "%{public}s Unsupported credential type identity",  buf,  0xCu);
          }

          BOOL v76 = 0LL;
          os_log_type_t v77 = v55;
          unint64_t v55 = 0LL;
          id v56 = v74;
        }

        else
        {
          BOOL v76 = 0LL;
          os_log_type_t v77 = v55;
          unint64_t v55 = 0LL;
        }

        size_t v110 = *(_DWORD *)v77;
        size_t v109 = (unsigned __int8 *)(v77 + 4);
        LODWORD(v10_Block_object_dispose(va, 8) = v110;
        size_t v111 = v57 - 4;
        if (v57 - 4 != v110)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v130 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v57 - 4;
          size_t v42 = (const char *)_os_log_send_and_compose_impl();

          v245[0] = 16;
          os_log_type_t v244 = 0;
          if (__nwlog_fault(v42, v245, &v244))
          {
            if (v245[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v43 = (os_log_s *)(id)gLogObj;
              os_log_type_t v131 = v245[0];
              if (os_log_type_enabled(v43, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v111;
                _os_log_impl(&dword_181A5C000, v43, v131, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
              }

              goto LABEL_349;
            }

            if (v244)
            {
              BOOL v132 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v43 = (os_log_s *)(id)gLogObj;
              os_log_type_t v133 = v245[0];
              BOOL v134 = os_log_type_enabled(v43, (os_log_type_t)v245[0]);
              if (v132)
              {
                if (v134)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v111;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = v132;
                  _os_log_impl( &dword_181A5C000,  v43,  v133,  "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
                }

                free(v132);
                if (!v42) {
                  goto LABEL_385;
                }
                goto LABEL_351;
              }

              if (v134)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v111;
                _os_log_impl( &dword_181A5C000,  v43,  v133,  "%{public}s invalid buffer, underflow %u, no backtrace",  buf,  0x12u);
              }
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v43 = (os_log_s *)(id)gLogObj;
              BOOL v150 = v245[0];
              if (os_log_type_enabled(v43, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v111;
                _os_log_impl( &dword_181A5C000,  v43,  v150,  "%{public}s invalid buffer, underflow %u, backtrace limit exceeded",  buf,  0x12u);
              }
            }

LABEL_409:
                                    goto LABEL_357;
                                  }

                                  memcpy((void *)(a3 + 5), v178, v177);
                                }

                                a3 += v179;
                              }

                              id v172 = obja;
                              uint64_t v173 = [obja countByEnumeratingWithState:&v298 objects:v310 count:16];
                              if (!v173)
                              {
LABEL_414:

                                break;
                              }
                            }
                          }

LABEL_415:
                          if (v289) {
                            free(v289);
                          }

                          v215 = v290;
                          goto LABEL_418;
                        }

                        goto LABEL_432;
                      }

                      __nwlog_obj();
                      v253 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 136446210;
                      v314 = "nw_necp_append_tlv";
                      LODWORD(v28_Block_object_dispose(va, 8) = 12;
                      v287 = buf;
                      v254 = (const char *)_os_log_send_and_compose_impl();

                      v312[0] = 16;
                      uu[0] = 0;
                      if (__nwlog_fault(v254, v312, uu))
                      {
                        if (v312[0] == 17)
                        {
                          __nwlog_obj();
                          v255 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          os_log_type_t v256 = v312[0];
                          if (os_log_type_enabled(v255, (os_log_type_t)v312[0]))
                          {
                            *(_DWORD *)buf = 136446210;
                            v314 = "nw_necp_append_tlv";
                            _os_log_impl( &dword_181A5C000,  v255,  v256,  "%{public}s called with null tlv_start",  buf,  0xCu);
                          }
                        }

                        else if (uu[0])
                        {
                          v266 = (char *)__nw_create_backtrace_string();
                          __nwlog_obj();
                          v255 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          os_log_type_t v267 = v312[0];
                          BOOL v268 = os_log_type_enabled(v255, (os_log_type_t)v312[0]);
                          if (v266)
                          {
                            if (v268)
                            {
                              *(_DWORD *)buf = 136446466;
                              v314 = "nw_necp_append_tlv";
                              __int16 v315 = 2082;
                              *(void *)v316 = v266;
                              _os_log_impl( &dword_181A5C000,  v255,  v267,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
                            }

                            free(v266);
                            goto LABEL_569;
                          }

                          if (v268)
                          {
                            *(_DWORD *)buf = 136446210;
                            v314 = "nw_necp_append_tlv";
                            _os_log_impl( &dword_181A5C000,  v255,  v267,  "%{public}s called with null tlv_start, no backtrace",  buf,  0xCu);
                          }
                        }

                        else
                        {
                          __nwlog_obj();
                          v255 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          os_log_type_t v279 = v312[0];
                          if (os_log_type_enabled(v255, (os_log_type_t)v312[0]))
                          {
                            *(_DWORD *)buf = 136446210;
                            v314 = "nw_necp_append_tlv";
                            _os_log_impl( &dword_181A5C000,  v255,  v279,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
                          }
                        }
                      }

                        goto LABEL_511;
                      }

                      if (!(_BYTE)v279)
                      {
                        __nwlog_obj();
                        v198 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        BOOL v247 = type[0];
                        if (os_log_type_enabled(v198, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler_context";
                          _os_log_impl( &dword_181A5C000,  v198,  v247,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                        }

                        goto LABEL_415;
                      }

                      v237 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      os_log_type_t v238 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v270 = type[0];
                      v239 = os_log_type_enabled(v238, (os_log_type_t)type[0]);
                      if (v237)
                      {
                        if (v239)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler_context";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v237;
                          _os_log_impl( &dword_181A5C000,  v238,  v270,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                        }

                        free(v237);
                      }

                      else
                      {
                        if (v239)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler_context";
                          _os_log_impl( &dword_181A5C000,  v238,  v270,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                        }
                      }
                    }

LABEL_569:
                      if (!v254) {
                        goto LABEL_434;
                      }
                      v223 = (char *)v254;
                      goto LABEL_433;
                    }

LABEL_307:
                    free(v154);
                    goto LABEL_308;
                  }

                  if (v160)
                  {
                    *(_DWORD *)buf = 136447490;
                    v314 = "nw_necp_append_tlv";
                    __int16 v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = 21LL;
                    *(_WORD *)&v316[18] = 2048;
                    *(void *)v317 = v297;
                    *(_WORD *)&v317[8] = 1024;
                    *(_DWORD *)v318 = 156;
                    *(_WORD *)&v318[4] = 1024;
                    *(_DWORD *)&v318[6] = 16;
                    _os_log_impl( &dword_181A5C000,  v158,  v159,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
                  }

                  goto LABEL_305;
                }
              }

            nw_txt_record_t v63 = v240;
            goto LABEL_308;
          }

          if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v139 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
            {
              v170 = nw_endpoint_handler_get_id_string(v73);
              os_log_type_t v171 = nw_endpoint_handler_dry_run_string(v73);
              v243 = v63;
              BOOL v268 = nw_endpoint_handler_copy_endpoint(v73);
              id v172 = nw_endpoint_get_logging_description(v268);
              uint64_t v173 = nw_endpoint_handler_state_string(v73);
              v174 = nw_endpoint_handler_mode_string(v73);
              v175 = nw_endpoint_handler_copy_current_path(v73);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v170;
              *(_WORD *)&buf[22] = 2082;
              v367 = v171;
              *(_WORD *)v368 = 2082;
              *(void *)&v368[2] = v172;
              v369 = 2082;
              v370 = v173;
              v371 = 2082;
              v372 = v174;
              v373 = 2114;
              v374 = v175;
              _os_log_impl( &dword_181A5C000,  v139,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Custom protocols only i s set, do not add a bottom level protocol",  buf,  0x48u);

              nw_txt_record_t v63 = v243;
            }

                    BOOL v128 = (NWConcrete_nw_resolver_service *)object;
                    goto LABEL_308;
                  }

                  goto LABEL_308;
                }

                if (!object[16])
                {
                  if ((v274[346] & 0x20) == 0)
                  {
                    if (v274[256])
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                      }
                      os_log_type_t v129 = (os_log_s *)(id)gconnectionLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)&buf[0].unint64_t sa_len = 136446978;
                        *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                        *(_WORD *)&buf[0].sa_data[10] = 2082;
                        *(void *)&buf[0].sa_data[12] = v274 + 256;
                        *(_WORD *)&buf[1].sa_data[4] = 2114;
                        *(void *)&buf[1].sa_data[6] = object;
                        *(_WORD *)&buf[2].unint64_t sa_len = 2114;
                        *(void *)buf[2].sa_data = v270;
                        _os_log_impl( &dword_181A5C000,  v129,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s] Ignoring service %{public}@ with parent %{public}@, only one alias will be followed",  &buf[0].sa_len,  0x2Au);
                      }
                    }

                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      os_log_type_t v129 = (os_log_s *)(id)gLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        os_log_type_t v204 = *((_DWORD *)v274 + 85);
                        *(_DWORD *)&buf[0].unint64_t sa_len = 136446978;
                        *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                        *(_WORD *)&buf[0].sa_data[10] = 1024;
                        *(_DWORD *)&buf[0].sa_data[12] = v204;
                        *(_WORD *)buf[1].sa_data = 2114;
                        *(void *)&buf[1].sa_data[2] = object;
                        *(_WORD *)&buf[1].sa_data[10] = 2114;
                        *(void *)&buf[1].sa_data[12] = v270;
                        _os_log_impl( &dword_181A5C000,  v129,  OS_LOG_TYPE_ERROR,  "%{public}s [R%u] Ignoring service %{public}@ with parent %{public}@, only one alias will be followed",  &buf[0].sa_len,  0x26u);
                      }
                    }

                    goto LABEL_307;
                  }

              if (v175) {
                free(v175);
              }
              v101 = 0;
              goto LABEL_163;
            }

            if ((v4[405] & 0x80000000) == 0)
            {
              __nwlog_obj();
              size_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_instance_attach_socket_protocol";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v89 + 407;
                *(_WORD *)&buf[22] = 2080;
                os_log_type_t v208 = " ";
                v209 = 2048;
                os_log_type_t v210 = a2;
                _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sPath %lx could not create socket protocol",  buf,  0x2Au);
              }

              v101 = 0;
LABEL_182:

              *(_OWORD *)__int128 v53 = v226;
              size_t v110 = v4[405];
              if ((v101 & 1) != 0)
              {
                if ((v110 & 0x80000000) == 0)
                {
                  __nwlog_obj();
                  size_t v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
                  {
                    os_log_type_t v112 = *(void *)(v7 + 48);
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v89 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    os_log_type_t v208 = " ";
                    v209 = 2048;
                    os_log_type_t v210 = a2;
                    BOOL v211 = 2112;
                    *(void *)os_log_type_t v212 = v112;
                    _os_log_impl( &dword_181A5C000,  v111,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sPath %lx opened socket over %@",  buf,  0x34u);
                  }
                }

                BOOL v113 = *(const char **)(v7 + 64);
                if (v113)
                {
                  size_t v114 = (void *)*((void *)v113 + 5);
                  if (v114 == &nw_protocol_ref_counted_handle)
                  {
                    size_t v121 = *((void *)v113 + 11);
                    if (v121) {
                      *((void *)v113 + 11) = v121 + 1;
                    }
                    *(void *)os_log_type_t v214 = v113;
                    size_t v115 = v214[8] | 1;
                  }

                  else
                  {
                    *(void *)os_log_type_t v214 = *(void *)(v7 + 64);
                    size_t v115 = v214[8] & 0xFE;
                  }

                  v214[8] = v115;
                  size_t v122 = (void *)*((void *)v89 - 7);
                  if (v122 == &nw_protocol_ref_counted_handle)
                  {
                    id v124 = *((void *)v89 - 1);
                    if (v124) {
                      *((void *)v89 - 1) = v124 + 1;
                    }
                    id v205 = v4 - 96;
                    v123 = v206 | 1;
                  }

                  else
                  {
                    id v205 = v4 - 96;
                    v123 = v206 & 0xFE;
                  }

                  os_log_type_t v206 = v123;
                  os_log_type_t v125 = *((void *)v113 + 3);
                  if (v125)
                  {
                    v126 = *(void (**)(const char *, char *))(v125 + 24);
                    if (v126)
                    {
                      v126(v113, v4 - 96);
                      if (v122 != &nw_protocol_ref_counted_handle) {
                        goto LABEL_211;
                      }
                      goto LABEL_210;
                    }
                  }

                  __nwlog_obj();
                  os_log_type_t v146 = (void *)objc_claimAutoreleasedReturnValue();
                  v147 = (const char *)*((void *)v113 + 2);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                  if (!v147) {
                    v147 = "invalid";
                  }
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v147;
                  *(_WORD *)&buf[22] = 2048;
                  os_log_type_t v208 = v113;
                  v148 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  v203 = 0;
                  if (__nwlog_fault(v148, &type, &v203))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      os_log_type_t v149 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      BOOL v150 = type;
                      if (os_log_type_enabled(v149, type))
                      {
                        os_log_type_t v151 = (const char *)*((void *)v113 + 2);
                        if (!v151) {
                          os_log_type_t v151 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v151;
                        *(_WORD *)&buf[22] = 2048;
                        os_log_type_t v208 = v113;
                        _os_log_impl( &dword_181A5C000,  v149,  v150,  "%{public}s protocol %{public}s (%p) has invalid connect callback",  buf,  0x20u);
                      }

                      goto LABEL_308;
                    }

                    if (!v144)
                    {
                      __nwlog_obj();
                      os_log_type_t v107 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      os_log_type_t v133 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        BOOL v134 = v141->identifier->name;
                        if (!v134) {
                          BOOL v134 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        os_log_type_t v151 = "__nw_protocol_error";
                        v152 = 2082;
                        id v153 = (nw_protocol_identifier *)v134;
                        v154 = 2048;
                        v155 = v141;
                        _os_log_impl( &dword_181A5C000,  v107,  v133,  "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded",  buf,  0x20u);
                      }

                      goto LABEL_307;
                    }

                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    os_log_type_t v107 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    BOOL v128 = v145;
                    os_log_type_t v129 = os_log_type_enabled(v107, v145);
                    if (!backtrace_string)
                    {
                      if (v129)
                      {
                        char v138 = v141->identifier->name;
                        if (!v138) {
                          char v138 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        os_log_type_t v151 = "__nw_protocol_error";
                        v152 = 2082;
                        id v153 = (nw_protocol_identifier *)v138;
                        v154 = 2048;
                        v155 = v141;
                        _os_log_impl( &dword_181A5C000,  v107,  v128,  "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace",  buf,  0x20u);
                      }

                      goto LABEL_307;
                    }

                    if (v129)
                    {
                      BOOL v130 = v141->identifier->name;
                      if (!v130) {
                        BOOL v130 = "invalid";
                      }
                      *(_DWORD *)buf = 136446978;
                      os_log_type_t v151 = "__nw_protocol_error";
                      v152 = 2082;
                      id v153 = (nw_protocol_identifier *)v130;
                      v154 = 2048;
                      v155 = v141;
                      os_log_type_t v156 = 2082;
                      *(void *)v157 = backtrace_string;
                      _os_log_impl( &dword_181A5C000,  v107,  v128,  "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                    }

            free(v51);
            goto LABEL_308;
          }

          if (v245[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v52 = (os_log_s *)(id)gLogObj;
            v65 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v12;
              _os_log_impl( &dword_181A5C000,  v52,  v65,  "%{public}s Protocol has bad options length %u (total %u)",  buf,  0x18u);
            }
          }

          else if (v244)
          {
            __int16 v81 = __nw_create_backtrace_string();
            if (v81)
            {
              size_t v82 = (char *)v81;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              size_t v83 = (os_log_s *)(id)gLogObj;
              os_log_type_t v84 = v245[0];
              if (os_log_type_enabled(v83, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v25;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v12;
                *(_WORD *)&_BYTE buf[24] = 2082;
                *(void *)&buf[26] = v82;
                _os_log_impl( &dword_181A5C000,  v83,  v84,  "%{public}s Protocol has bad options length %u (total %u), dumping backtrace:%{public}s",  buf,  0x22u);
              }

              free(v82);
              if (!v51) {
                goto LABEL_308;
              }
              goto LABEL_307;
            }

            __nwlog_obj();
            unint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            char v138 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v12;
              _os_log_impl( &dword_181A5C000,  v52,  v138,  "%{public}s Protocol has bad options length %u (total %u), no backtrace",  buf,  0x18u);
            }
          }

          else
          {
            __nwlog_obj();
            unint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            size_t v105 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v12;
              _os_log_impl( &dword_181A5C000,  v52,  v105,  "%{public}s Protocol has bad options length %u (total %u), backtrace limit exceeded",  buf,  0x18u);
            }
          }
        }

        goto LABEL_306;
      case 6:
      case 7:
        if (!v237) {
          goto LABEL_83;
        }
        os_log_type_t v238 = v9;
        uint64_t v34 = nw_path_copy_endpoint_from_tlv(v11, v12, v22);
        __int16 v35 = v237;
        id v36 = v34;
        *((_BYTE *)v35 + 152) = v11 == 7;
        v237 = (os_log_s *)v35;
        objc_storeStrong(v35 + 3, v34);

        goto LABEL_330;
      case 8:
        if (!v9) {
          nw_endpoint_type_t v9 = xpc_array_create(0LL, 0LL);
        }
        xpc_array_set_string(v9, 0xFFFFFFFFFFFFFFFFLL, v22);
        continue;
      case 9:
        size_t v40 = v233;
        if (!v233) {
          size_t v40 = xpc_array_create(0LL, 0LL);
        }
        BOOL v233 = v40;
        xpc_array_set_string(v40, 0xFFFFFFFFFFFFFFFFLL, v22);
        continue;
      case 11:
        os_log_type_t v48 = nw_path_copy_endpoint_from_tlv(11, v12, v22);
        if (v48)
        {
          BOOL v49 = (BOOL)obj;
          if (!obj) {
            BOOL v49 = nw_array_create();
          }
          unint64_t obj = (id)v49;
          nw_array_append(v49, v48);
        }

        continue;
      case 12:
        if (v237)
        {
          os_log_type_t v238 = v9;
          size_t v38 = nw_path_copy_endpoint_from_tlv(12, v12, v22);
          nw_protocol_options_add_proxy_next_hop(v237, v38);

LABEL_330:
          nw_endpoint_type_t v9 = v238;
        }

        else
        {
LABEL_83:
          v237 = 0LL;
        }

        continue;
      case 13:
        if (!v22[(v12 - 1)])
        {
          os_log_type_t v39 = v226;
          if (!v226) {
            os_log_type_t v39 = xpc_array_create(0LL, 0LL);
          }
          id v226 = v39;
          xpc_array_set_string(v39, 0xFFFFFFFFFFFFFFFFLL, v22);
        }

        continue;
      case 14:
        if (!v22[(v12 - 1)])
        {
          os_log_type_t v47 = v227;
          if (!v227) {
            os_log_type_t v47 = xpc_array_create(0LL, 0LL);
          }
          int v227 = v47;
          xpc_array_set_string(v47, 0xFFFFFFFFFFFFFFFFLL, v22);
        }

        continue;
      case 15:
        if ((_DWORD)v12 == 16) {
          *(_OWORD *)uuid_t uu = *(_OWORD *)v22;
        }
        continue;
      case 16:
        v239 = v9;
        if (v12 <= 5)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v41 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v12;
          size_t v42 = (const char *)_os_log_send_and_compose_impl();

          v245[0] = 16;
          os_log_type_t v244 = 0;
          if (v245[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v43 = (os_log_s *)(id)gLogObj;
            char v44 = v245[0];
            if (os_log_type_enabled(v43, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
            }

            goto LABEL_349;
          }

          if (!v244)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v43 = (os_log_s *)(id)gLogObj;
            v104 = v245[0];
            if (os_log_type_enabled(v43, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl( &dword_181A5C000,  v43,  v104,  "%{public}s invalid buffer, underflow %u, backtrace limit exceeded",  buf,  0x12u);
            }

            goto LABEL_349;
          }

          size_t v78 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v43 = (os_log_s *)(id)gLogObj;
          nw_txt_record_t v79 = v245[0];
          os_log_type_t v80 = os_log_type_enabled(v43, (os_log_type_t)v245[0]);
          if (!v78)
          {
            if (v80)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl( &dword_181A5C000,  v43,  v79,  "%{public}s invalid buffer, underflow %u, no backtrace",  buf,  0x12u);
            }

            goto LABEL_349;
          }

          if (v80)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v12;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v78;
            _os_log_impl( &dword_181A5C000,  v43,  v79,  "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v78);
          if (!v42) {
            goto LABEL_385;
          }
          goto LABEL_351;
        }

        size_t v54 = *v22;
        unint64_t v55 = v22 + 2;
        id v56 = v22[1];
        char v57 = v12 - 2;
        if (v54 == 1)
        {
          if (*v55)
          {
            BOOL v58 = 2 - v12;
            os_log_type_t v59 = v55;
            do
            {
              __int16 v61 = *(unsigned __int8 *)++v59;
              BOOL v60 = v61;
              size_t v62 = v61 != 0;
              nw_txt_record_t v63 = v58 + 1;
              if (v58 == -1) {
                break;
              }
              ++v58;
            }

            while (v60);
            char v57 = -v63;
            if (!v63)
            {
LABEL_232:
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v102 = (id)gLogObj;
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v57;
              os_log_type_t v99 = (const char *)_os_log_send_and_compose_impl();

              v245[0] = 16;
              os_log_type_t v244 = 0;
              if (__nwlog_fault(v99, v245, &v244))
              {
                if (v245[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  size_t v100 = (os_log_s *)(id)gLogObj;
                  BOOL v103 = v245[0];
                  if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl(&dword_181A5C000, v100, v103, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
                  }

                  goto LABEL_381;
                }

                if (!v244)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  size_t v100 = (os_log_s *)(id)gLogObj;
                  os_log_type_t v151 = v245[0];
                  if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl( &dword_181A5C000,  v100,  v151,  "%{public}s invalid buffer, underflow %u, backtrace limit exceeded",  buf,  0x12u);
                  }

                  goto LABEL_381;
                }

                os_log_type_t v135 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                size_t v100 = (os_log_s *)(id)gLogObj;
                BOOL v136 = v245[0];
                char v137 = os_log_type_enabled(v100, (os_log_type_t)v245[0]);
                if (!v135)
                {
                  if (v137)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl( &dword_181A5C000,  v100,  v136,  "%{public}s invalid buffer, underflow %u, no backtrace",  buf,  0x12u);
                  }

                  goto LABEL_381;
                }

                if (v137)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = v135;
                  _os_log_impl( &dword_181A5C000,  v100,  v136,  "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
                }

                free(v135);
              }

              goto LABEL_382;
            }
          }

          else
          {
            size_t v62 = 0;
            os_log_type_t v59 = v55;
          }

          if (v62) {
            goto LABEL_232;
          }
          BOOL v76 = v59 + 1;
          os_log_type_t v77 = v59 + 1;
          do
          {
            id v93 = v57--;
            size_t v95 = *(unsigned __int8 *)v77++;
            os_log_type_t v94 = v95;
            if (v95) {
              id v96 = v93 == 1;
            }
            else {
              id v96 = 1;
            }
          }

          while (!v96);
          if (v94) {
            os_log_type_t v97 = 1;
          }
          else {
            os_log_type_t v97 = v57 == 0;
          }
          if (v97)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v98 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v57;
            os_log_type_t v99 = (const char *)_os_log_send_and_compose_impl();

            v245[0] = 16;
            os_log_type_t v244 = 0;
            if (__nwlog_fault(v99, v245, &v244))
            {
              if (v245[0] == 17)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                size_t v100 = (os_log_s *)(id)gLogObj;
                v101 = v245[0];
                if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl(&dword_181A5C000, v100, v101, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
                }

                goto LABEL_381;
              }

              if (v244)
              {
                os_log_type_t v143 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                size_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v144 = v245[0];
                os_log_type_t v145 = os_log_type_enabled(v100, (os_log_type_t)v245[0]);
                if (v143)
                {
                  if (v145)
                  {
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    *(_WORD *)&buf[18] = 2082;
                    *(void *)&buf[20] = v143;
                    _os_log_impl( &dword_181A5C000,  v100,  v144,  "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
                  }

                  goto LABEL_356;
                }

                if (v145)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl( &dword_181A5C000,  v100,  v144,  "%{public}s invalid buffer, underflow %u, no backtrace",  buf,  0x12u);
                }
              }

              else
              {
                __nwlog_obj();
                size_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v155 = v245[0];
                if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl( &dword_181A5C000,  v100,  v155,  "%{public}s invalid buffer, underflow %u, backtrace limit exceeded",  buf,  0x12u);
                }
              }

      free(backtrace_string);
      goto LABEL_368;
    }

    BOOL v103 = (os_log_s *)__nwlog_obj();
    v104 = type;
    if (!os_log_type_enabled(v103, type)) {
      goto LABEL_368;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    size_t v105 = "%{public}s called with null buffer";
LABEL_367:
    _os_log_impl(&dword_181A5C000, v103, v104, v105, buf, 0xCu);
LABEL_368:
    if (v102) {
      free(v102);
    }
    return 0LL;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    os_log_type_t v102 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v201 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v103 = (os_log_s *)__nwlog_obj();
      v104 = type;
      if (!os_log_type_enabled(v103, type)) {
        goto LABEL_368;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      size_t v105 = "%{public}s called with null buffer_length";
      goto LABEL_367;
    }

    if (!v201)
    {
      BOOL v103 = (os_log_s *)__nwlog_obj();
      v104 = type;
      if (!os_log_type_enabled(v103, type)) {
        goto LABEL_368;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      size_t v105 = "%{public}s called with null buffer_length, backtrace limit exceeded";
      goto LABEL_367;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v103 = (os_log_s *)__nwlog_obj();
    v104 = type;
    BOOL v113 = os_log_type_enabled(v103, type);
    if (backtrace_string)
    {
      if (v113)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        id v205 = 2082;
        os_log_type_t v206 = backtrace_string;
        os_log_type_t v112 = "%{public}s called with null buffer_length, dumping backtrace:%{public}s";
        goto LABEL_306;
      }

      goto LABEL_307;
    }

    if (!v113) {
      goto LABEL_368;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    size_t v105 = "%{public}s called with null buffer_length, no backtrace";
    goto LABEL_367;
  }

  nw_txt_record_t v7 = *(unsigned __int8 *)a1;
  if (v7 <= 0x3F)
  {
    os_log_type_t v8 = 1LL;
    goto LABEL_5;
  }

  if (v7 >> 6 == 2)
  {
    if (a2 < 4) {
      goto LABEL_19;
    }
    nw_txt_record_t v7 = bswap32(*a1 & 0xFFFFFF7F);
    os_log_type_t v8 = 4LL;
  }

  else
  {
    if (v7 >> 6 == 1)
    {
      if (a2 >= 2)
      {
        nw_txt_record_t v7 = bswap32(*(_WORD *)a1 & 0xFFBF) >> 16;
        os_log_type_t v8 = 2LL;
        goto LABEL_5;
      }

  if (v52) {
    free(v52);
  }
  size_t v19 = 0LL;
  BOOL v18 = v174;
  id v36 = v175;
  if ((v12 & 1) != 0) {
    goto LABEL_139;
  }
LABEL_115:
  id v66 = strlen(v11);
  if (!v19)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v179 = "nw_necp_append_tlv";
    BOOL v134 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v176 = 0;
    if (__nwlog_fault(v134, &type, &v176))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v135 = (os_log_s *)__nwlog_obj();
        BOOL v136 = type;
        if (os_log_type_enabled(v135, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v179 = "nw_necp_append_tlv";
          char v137 = "%{public}s called with null tlv_start";
LABEL_324:
          _os_log_impl(&dword_181A5C000, v135, v136, v137, buf, 0xCu);
        }
      }

      else if (v176)
      {
        v152 = (char *)__nw_create_backtrace_string();
        os_log_type_t v135 = (os_log_s *)__nwlog_obj();
        BOOL v136 = type;
        id v153 = os_log_type_enabled(v135, type);
        if (v152)
        {
          if (v153)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v179 = "nw_necp_append_tlv";
            id v180 = 2082;
            *(void *)v181 = v152;
            _os_log_impl( &dword_181A5C000,  v135,  v136,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v152);
          BOOL v15 = v172;
          goto LABEL_325;
        }

        BOOL v15 = v172;
        if (v153)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v179 = "nw_necp_append_tlv";
          char v137 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_324;
        }
      }

      else
      {
        os_log_type_t v135 = (os_log_s *)__nwlog_obj();
        BOOL v136 = type;
        BOOL v15 = v172;
        if (os_log_type_enabled(v135, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v179 = "nw_necp_append_tlv";
          char v137 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_324;
        }
      }
    }

LABEL_306:
              if (!v154) {
                goto LABEL_308;
              }
              goto LABEL_307;
            }

            __nwlog_obj();
            v262 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
            LODWORD(v28_Block_object_dispose(va, 8) = 12;
            v287 = buf;
            v154 = (char *)_os_log_send_and_compose_impl();

            v312[0] = 16;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            if (v312[0] == 17)
            {
              __nwlog_obj();
              v155 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v263 = v312[0];
              if (os_log_type_enabled(v155, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136446210;
                v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
                _os_log_impl(&dword_181A5C000, v155, v263, "%{public}s called with null cursor", buf, 0xCu);
              }

              goto LABEL_579;
            }

            if (type == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              v155 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v281 = v312[0];
              if (os_log_type_enabled(v155, (os_log_type_t)v312[0]))
              {
                *(_DWORD *)buf = 136446210;
                v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
                _os_log_impl( &dword_181A5C000,  v155,  v281,  "%{public}s called with null cursor, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_579;
            }

            v273 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v158 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v274 = v312[0];
            BOOL v275 = os_log_type_enabled(v158, (os_log_type_t)v312[0]);
            if (v273)
            {
              if (v275)
              {
                *(_DWORD *)buf = 136446466;
                v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
                __int16 v315 = 2082;
                *(void *)v316 = v273;
                _os_log_impl( &dword_181A5C000,  v158,  v274,  "%{public}s called with null cursor, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v273);
              if (!v154) {
                goto LABEL_308;
              }
              goto LABEL_307;
            }

            if (v275)
            {
              *(_DWORD *)buf = 136446210;
              v314 = "nw_path_add_endpoint_agent_uuid_to_necp_message";
              _os_log_impl(&dword_181A5C000, v158, v274, "%{public}s called with null cursor, no backtrace", buf, 0xCu);
            }

        if (v93) {
          free(v93);
        }
        goto LABEL_25;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v129 = "__nw_protocol_disconnected";
      output_handler = _os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v126 = 0;
      if (__nwlog_fault((const char *)output_handler, &type, &v126))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v107 = (os_log_s *)__nwlog_obj();
          v108 = type;
          if (!os_log_type_enabled(v107, type)) {
            goto LABEL_313;
          }
          *(_DWORD *)buf = 136446210;
          os_log_type_t v129 = "__nw_protocol_disconnected";
          size_t v109 = "%{public}s called with null other_protocol";
          goto LABEL_312;
        }

        if (!v126)
        {
          os_log_type_t v107 = (os_log_s *)__nwlog_obj();
          v108 = type;
          if (!os_log_type_enabled(v107, type)) {
            goto LABEL_313;
          }
          *(_DWORD *)buf = 136446210;
          os_log_type_t v129 = "__nw_protocol_disconnected";
          size_t v109 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_312;
        }

        size_t v119 = (char *)__nw_create_backtrace_string();
        os_log_type_t v107 = (os_log_s *)__nwlog_obj();
        v108 = type;
        size_t v120 = os_log_type_enabled(v107, type);
        if (v119)
        {
          if (v120)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v129 = "__nw_protocol_disconnected";
            BOOL v130 = 2082;
            os_log_type_t v131 = (nw_protocol *)v119;
            _os_log_impl( &dword_181A5C000,  v107,  v108,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v119);
          if (!output_handler) {
            goto LABEL_27;
          }
          goto LABEL_145;
        }

        if (v120)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v129 = "__nw_protocol_disconnected";
          size_t v109 = "%{public}s called with null other_protocol, no backtrace";
LABEL_312:
          _os_log_impl(&dword_181A5C000, v107, v108, v109, buf, 0xCu);
        }
      }

      goto LABEL_307;
    }

    nw_txt_record_t v7 = (void *)*((void *)v5 + 1);
    if (!v7)
    {
      __nwlog_obj();
      nw_txt_record_t v79 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      BOOL v141 = "nw_protocol_implementation_disconnect";
      BOOL v76 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v136) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v80 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl(&dword_181A5C000, v77, v80, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }

        goto LABEL_306;
      }

      if (!(_BYTE)v136)
      {
        __nwlog_obj();
        os_log_type_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v116 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl( &dword_181A5C000,  v77,  v116,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_306;
      }

      id v96 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v97 = type[0];
      v98 = os_log_type_enabled(v77, type[0]);
      if (!v96)
      {
        if (v98)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl( &dword_181A5C000,  v77,  v97,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
        }

        goto LABEL_306;
      }

      if (v98)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v141 = "nw_protocol_implementation_disconnect";
        os_log_type_t v142 = 2082;
        os_log_type_t v143 = (nw_protocol *)v96;
        _os_log_impl( &dword_181A5C000,  v77,  v97,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_274;
    }

    if (!v7[10])
    {
      __nwlog_obj();
      __int16 v81 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      BOOL v141 = "nw_protocol_implementation_disconnect";
      BOOL v76 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v136) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v82 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl( &dword_181A5C000,  v77,  v82,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
        }

        goto LABEL_306;
      }

      if (!(_BYTE)v136)
      {
        __nwlog_obj();
        os_log_type_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v117 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl( &dword_181A5C000,  v77,  v117,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_306;
      }

      id v96 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v99 = type[0];
      size_t v100 = os_log_type_enabled(v77, type[0]);
      if (!v96)
      {
        if (v100)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v141 = "nw_protocol_implementation_disconnect";
          _os_log_impl( &dword_181A5C000,  v77,  v99,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
        }

        goto LABEL_306;
      }

      if (v100)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v141 = "nw_protocol_implementation_disconnect";
        os_log_type_t v142 = 2082;
        os_log_type_t v143 = (nw_protocol *)v96;
        _os_log_impl( &dword_181A5C000,  v77,  v99,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_274;
    }

    if ((v5[405] & 0x80000000) == 0 && gLogDatapath)
    {
      __nwlog_obj();
      size_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v141 = "nw_protocol_implementation_disconnect";
        os_log_type_t v142 = 2082;
        os_log_type_t v143 = (nw_protocol *)((char *)v6 + 407);
        os_log_type_t v144 = 2080;
        os_log_type_t v145 = (nw_protocol *)" ";
        _os_log_impl( &dword_181A5C000,  v83,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sDisconnect from input handler",  buf,  0x20u);
      }

      nw_txt_record_t v7 = v6[1];
    }

    os_log_type_t v8 = *((_DWORD *)v7 + 16);
    if (v8 != 2)
    {
      if (v8 == 3)
      {
        nw_endpoint_type_t v9 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v7[10] + 128LL);
        if (v9)
        {
          os_log_type_t v10 = v6;
          else {
            nw_endpoint_type_t v11 = (uint64_t)a2;
          }

          if ((v9(v10, v11, 3LL) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            nw_txt_record_t v12 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              char v13 = v10;
              else {
                size_t v14 = (uint64_t)a2;
              }

              *(_DWORD *)buf = 136446466;
              BOOL v141 = "nw_protocol_implementation_disconnect";
              os_log_type_t v142 = 2048;
              os_log_type_t v143 = (nw_protocol *)v14;
              _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s Flow %llx deferred stop, holding disconnected",  buf,  0x16u);
            }

            if (a2)
            {
              if (a2->output_handler_context) {
                goto LABEL_129;
              }
LABEL_23:
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v15 = (id)gLogObj;
              *(_DWORD *)buf = 136446466;
              BOOL v141 = "nw_protocol_implementation_disconnect";
              os_log_type_t v142 = 2048;
              os_log_type_t v143 = a2;
              uint64_t v16 = (const char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v136) = 0;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v18 = type[0];
                if (os_log_type_enabled(v17, type[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  BOOL v141 = "nw_protocol_implementation_disconnect";
                  os_log_type_t v142 = 2048;
                  os_log_type_t v143 = a2;
                  _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s Output handler context doesn't exist on protocol %p",  buf,  0x16u);
                }
              }

              else if ((_BYTE)v136)
              {
                size_t v42 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                uint64_t v43 = type[0];
                char v44 = os_log_type_enabled(v17, type[0]);
                if (v42)
                {
                  if (v44)
                  {
                    *(_DWORD *)buf = 136446722;
                    BOOL v141 = "nw_protocol_implementation_disconnect";
                    os_log_type_t v142 = 2048;
                    os_log_type_t v143 = a2;
                    os_log_type_t v144 = 2082;
                    os_log_type_t v145 = (nw_protocol *)v42;
                    _os_log_impl( &dword_181A5C000,  v17,  v43,  "%{public}s Output handler context doesn't exist on protocol %p, dumping backtrace:%{public}s",  buf,  0x20u);
                  }

                  free(v42);
LABEL_138:
                  if (v16)
                  {
                    nw_endpoint_t v64 = (char *)v16;
LABEL_140:
                    free(v64);
                  }

      __break(1u);
      return;
    case 6u:
      *(_WORD *)&type[0].unint64_t sa_len = 0;
      if (size != 2)
      {
        __nwlog_obj();
        BOOL v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = size;
          _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ connection received unexpected number of bytes %zu",  buf,  0x20u);
        }

        nw_socks5_connection_cancel_on_queue(v9, 0LL);
        goto LABEL_102;
      }

      nw_dispatch_data_copyout(v11, (uint64_t)type, 2LL);
      __nwlog_obj();
      os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&_BYTE buf[24] = bswap32(*(unsigned __int16 *)&type[0].sa_len) >> 16;
        _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ client request for port %u",  buf,  0x1Cu);
      }

      os_log_type_t v48 = v9[57];
      switch(v48)
      {
        case 4:
          *(_WORD *)buf = 7708;
          *(_WORD *)&buf[2] = *(_WORD *)&type[0].sa_len;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_OWORD *)&buf[8] = *(_OWORD *)*((void *)v9 + 12);
          *(_DWORD *)&_BYTE buf[24] = 0;
          address = nw_endpoint_create_address((const sockaddr *)buf);
          break;
        case 3:
          *(_WORD *)&uint8_t buf[4] = 0;
          *(_DWORD *)buf = 0;
          snprintf(buf, 6uLL, "%u", bswap32(*(unsigned __int16 *)&type[0].sa_len) >> 16);
          address = nw_endpoint_create_host(*((const char **)v9 + 12), buf);
          break;
        case 1:
          *(_WORD *)buf = 528;
          *(_WORD *)&buf[2] = *(_WORD *)&type[0].sa_len;
          *(_DWORD *)&uint8_t buf[4] = **((_DWORD **)v9 + 12);
          *(void *)&buf[8] = 0LL;
          address = nw_endpoint_create_address((const sockaddr *)buf);
          break;
        default:
          os_log_type_t v89 = 0LL;
          goto LABEL_188;
      }

      os_log_type_t v89 = address;
LABEL_188:
      os_log_type_t v90 = (void *)*((void *)v9 + 12);
      if (v90)
      {
        free(v90);
        *((void *)v9 + 12) = 0LL;
      }

      __nwlog_obj();
      id v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v92 = v91;
      if (v89)
      {
        if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description(v89);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&_BYTE buf[24] = logging_description;
          _os_log_impl( &dword_181A5C000,  v92,  OS_LOG_TYPE_INFO,  "%{public}s %{public}@ instantiated endpoint: %{public}s",  buf,  0x20u);
        }

        v9[56] = 7;
        nw_socks5_connection_connect_outer_on_queue(v9, v89, 0LL);
      }

      else
      {
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v9;
          _os_log_impl( &dword_181A5C000,  v92,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ failed to instantiate endpoint",  buf,  0x16u);
        }

        nw_socks5_connection_cancel_on_queue(v9, 0LL);
      }

      goto LABEL_102;
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
    case 0x52u:
    case 0x53u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
      goto LABEL_102;
    case 0x66u:
      if (size == 2)
      {
        nw_dispatch_data_copyout(v11, (uint64_t)type, 2LL);
        os_log_type_t v50 = bswap32(*(unsigned __int16 *)&type[0].sa_len);
        char v51 = HIWORD(v50);
        *((_WORD *)v9 + 52) = HIWORD(v50);
        __nwlog_obj();
        unint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        size_t v38 = v52;
        if (v51 > 3)
        {
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
          {
            id v87 = *((unsigned __int16 *)v9 + 52);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v9;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&_BYTE buf[24] = v87;
            _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ shoes client request with length %u",  buf,  0x1Cu);
          }

          v9[56] = 103;
          nw_socks5_connection_inner_connection_read_range_on_queue( (NWConcrete_nw_socks5_connection *)v9,  *((unsigned __int16 *)v9 + 52),  *((unsigned __int16 *)v9 + 52));
          goto LABEL_102;
        }

        if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
          goto LABEL_217;
        }
        __int128 v53 = *((unsigned __int16 *)v9 + 52);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&_BYTE buf[24] = v53;
        size_t v54 = "%{public}s %{public}@ connection received invalid shoes request length %u";
        unint64_t v55 = v38;
        id v56 = 28;
      }

      else
      {
        __nwlog_obj();
        size_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          goto LABEL_217;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = size;
        size_t v54 = "%{public}s %{public}@ shoes_connected connection received unexpected number of bytes %zu";
        unint64_t v55 = v38;
        id v56 = 32;
      }

      _os_log_impl(&dword_181A5C000, v55, OS_LOG_TYPE_ERROR, v54, buf, v56);
      goto LABEL_217;
    case 0x67u:
      if (size != *((unsigned __int16 *)v9 + 52))
      {
        __nwlog_obj();
        id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          size_t v72 = *((unsigned __int16 *)v9 + 52);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = size;
          *(_WORD *)&_BYTE buf[32] = 1024;
          *(_DWORD *)&buf[34] = v72;
          _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ shoes_got_length connection received unexpected number of bytes %zu (expected %u)",  buf,  0x26u);
        }

        goto LABEL_175;
      }

      memset(&buf[32], 0, 229);
      if (size >= 0x103) {
        uint64_t v37 = 259LL;
      }
      else {
        uint64_t v37 = size;
      }
      memset(buf, 0, 32);
      nw_dispatch_data_copyout(v11, (uint64_t)&buf[2], v37);
      switch(buf[2])
      {
        case 1:
        case 4:
          if (size >= (unint64_t)buf[5] + 4)
          {
            LOWORD(v176) = 0;
            *(_DWORD *)__str = 0;
            snprintf(__str, 6uLL, "%u", bswap32(*(unsigned __int16 *)&buf[3]) >> 16);
            memset(type, 0, sizeof(type));
            LODWORD(v94) = buf[5];
            if (buf[5])
            {
              size_t v100 = &buf[6];
              v101 = type;
              os_log_type_t v102 = buf[5];
              while (1)
              {
                BOOL v103 = *v100;
                v101->unint64_t sa_len = v103;
                if (!v103) {
                  break;
                }
                v101 = (sockaddr *)((char *)v101 + 1);
                ++v100;
                if (!--v102) {
                  goto LABEL_250;
                }
              }
            }

            else
            {
              v101 = type;
LABEL_250:
              v101->unint64_t sa_len = 0;
            }

            host = nw_endpoint_create_host((const char *)type, __str);
            goto LABEL_252;
          }

          __nwlog_obj();
          size_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            break;
          }
          *(_DWORD *)&type[0].unint64_t sa_len = 136446722;
          *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(void *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(void *)&type[1].sa_data[6] = size;
          os_log_type_t v39 = "%{public}s %{public}@ shoes_got_length connection received hostname request too short %zu";
          goto LABEL_207;
        case 2:
        case 5:
          if (size > 0x12)
          {
            *(void *)&type[0].unint64_t sa_len = 7708LL;
            *(_DWORD *)&type[1].sa_data[6] = unk_182667208;
            *(_WORD *)type[0].sa_data = *(_WORD *)&buf[3];
            *(sockaddr *)&type[0].sa_data[6] = *(sockaddr *)&buf[5];
            v98 = nw_endpoint_create_address(type);
            os_log_type_t v99 = 19;
            goto LABEL_253;
          }

          __nwlog_obj();
          size_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            break;
          }
          *(_DWORD *)&type[0].unint64_t sa_len = 136446722;
          *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(void *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(void *)&type[1].sa_data[6] = size;
          os_log_type_t v39 = "%{public}s %{public}@ shoes_got_length connection received IPv6 request too short %zu";
          goto LABEL_207;
        case 3:
        case 6:
          if (size > 6)
          {
            type[0] = (sockaddr)xmmword_18272D6E8;
            *(_WORD *)type[0].sa_data = *(_WORD *)&buf[3];
            *(_DWORD *)&type[0].sa_data[2] = *(_DWORD *)&buf[5];
            v98 = nw_endpoint_create_address(type);
            os_log_type_t v99 = 7;
            goto LABEL_253;
          }

          __nwlog_obj();
          size_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            break;
          }
          *(_DWORD *)&type[0].unint64_t sa_len = 136446722;
          *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(void *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(void *)&type[1].sa_data[6] = size;
          os_log_type_t v39 = "%{public}s %{public}@ shoes_got_length connection received IPv4 request too short %zu";
          goto LABEL_207;
        case 7:
        case 8:
          os_log_type_t v94 = buf[5];
          if (size >= (unint64_t)buf[5] + 4)
          {
            v104 = strnlen(&buf[6], buf[5]);
            if (v104 >= v94)
            {
              __nwlog_obj();
              uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
                goto LABEL_125;
              }
              *(_DWORD *)&type[0].unint64_t sa_len = 136446466;
              *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&type[0].sa_data[10] = 2114;
              *(void *)&type[0].sa_data[12] = v9;
              v108 = "%{public}s %{public}@ failed to parse bonjour name";
            }

            else
            {
              size_t v105 = &buf[v104 + 7];
              size_t v106 = strnlen(v105, v94 - (v104 + 1)) + v104 + 1;
              if (v106 >= v94)
              {
                __nwlog_obj();
                uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_125;
                }
                *(_DWORD *)&type[0].unint64_t sa_len = 136446466;
                *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                *(_WORD *)&type[0].sa_data[10] = 2114;
                *(void *)&type[0].sa_data[12] = v9;
                v108 = "%{public}s %{public}@ failed to parse bonjour type";
              }

              else
              {
                domain = &buf[v106 + 7];
                if (strnlen(domain, v94 - (v106 + 1)) + v106 + 1 < v94)
                {
                  host = nw_endpoint_create_bonjour_service(&buf[6], v105, domain);
LABEL_252:
                  v98 = host;
                  os_log_type_t v99 = v94 + 4;
LABEL_253:
                  if (v98)
                  {
                    *(void *)&type[0].unint64_t sa_len = 0LL;
                    *(void *)&type[0].sa_data[6] = type;
                    *(void *)&type[1].unint64_t sa_len = 0x3032000000LL;
                    *(void *)&type[1].sa_data[6] = __Block_byref_object_copy__16053;
                    *(void *)&type[2].unint64_t sa_len = __Block_byref_object_dispose__16054;
                    *(void *)&type[2].sa_data[6] = 0LL;
                    id v168 = 0LL;
                    v169 = &v168;
                    v170 = 0x2020000000LL;
                    os_log_type_t v171 = 0;
                    if (buf[2] <= 8u && ((1 << buf[2]) & 0x170) != 0 || (char)v9[160] < 0)
                    {
                      secure_udp = nw_parameters_create_secure_udp( &__block_literal_global_18956,  &__block_literal_global_91);
                      os_log_type_t v112 = *(void **)(*(void *)&type[0].sa_data[6] + 40LL);
                      *(void *)(*(void *)&type[0].sa_data[6] + 40LL) = secure_udp;

                      v9[160] |= 0x20u;
                    }

                    else
                    {
                      secure_tcp = nw_parameters_create_secure_tcp( &__block_literal_global_18956,  &__block_literal_global_91);
                      BOOL v132 = *(void **)(*(void *)&type[0].sa_data[6] + 40LL);
                      *(void *)(*(void *)&type[0].sa_data[6] + 40LL) = secure_tcp;
                    }

                    BOOL v113 = nw_connection_copy_current_path(*((nw_connection_t *)v9 + 4));
                    domaina = v113;
                    if (v113)
                    {
                      size_t v114 = (void *)*((void *)v113 + 28);
                      if (v114)
                      {
                        size_t v115 = v114;
                        applier[0] = MEMORY[0x1895F87A8];
                        applier[1] = 3221225472LL;
                        applier[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_145;
                        applier[3] = &unk_189BC71C0;
                        void applier[4] = type;
                        xpc_dictionary_apply(v115, applier);
                      }

                      else
                      {
                        size_t v115 = 0LL;
                      }
                    }

                    os_log_type_t v117 = *((unsigned __int16 *)v9 + 52);
                    if (v99 < v117)
                    {
                      char v118 = v117 - v99;
                      __nwlog_obj();
                      size_t v119 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__str = 136446722;
                        v176 = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                        unsigned int v177 = 2114;
                        v178 = v9;
                        unint64_t v179 = 1024;
                        id v180 = v118;
                        _os_log_impl( &dword_181A5C000,  v119,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ received shoes tlv(s) with total tlv buffer length %u",  (uint8_t *)__str,  0x1Cu);
                      }

                      v162[0] = MEMORY[0x1895F87A8];
                      v162[1] = 3221225472LL;
                      v162[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_150;
                      v162[3] = &unk_189BB8210;
                      v163 = v9;
                      unsigned int v165 = type;
                      v164 = v98;
                      unsigned int v166 = &v168;
                      nw_shoes_tlv_parser(&buf[v99 + 2], v118, v162);
                    }

                    nw_socks5_server_call_outer_connection_handler( WeakRetained,  v98,  *(void **)(*(void *)&type[0].sa_data[6] + 40LL));
                    if (((char)v9[160] & 0x80000000) == 0 || (v9[161] & 1) != 0)
                    {
                      __nwlog_obj();
                      os_log_type_t v129 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__str = 136447234;
                        v176 = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                        unsigned int v177 = 2114;
                        v178 = v9;
                        unint64_t v179 = 1024;
                        id v180 = buf[2];
                        v181 = 2048;
                        v182 = size;
                        os_log_type_t v183 = 2112;
                        v184 = v98;
                        _os_log_impl( &dword_181A5C000,  v129,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ got shoes request type %u inner length %zu to %@",  (uint8_t *)__str,  0x30u);
                      }

                      v9[56] = 104;
                      BOOL v130 = domaina;
                      nw_socks5_connection_connect_outer_on_queue( v9,  v98,  *(void **)(*(void *)&type[0].sa_data[6] + 40LL));
                    }

                    else
                    {
                      v9[161] |= 1u;
                      __nwlog_obj();
                      size_t v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__str = 136446466;
                        v176 = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                        unsigned int v177 = 2114;
                        v178 = v9;
                        _os_log_impl( &dword_181A5C000,  v120,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ creating udp associated connection",  (uint8_t *)__str,  0x16u);
                      }

                      if (*((_WORD *)v169 + 12))
                      {
                        size_t v121 = (void **)(v9 + 168);
                        objc_storeStrong((id *)v9 + 21, *((id *)v9 + 4));
                        posix_error = (nw_endpoint *)nw_connection_copy_connected_remote_endpoint(*((void **)v9 + 21));
                        hostname = nw_endpoint_get_hostname(posix_error);
                        host_with_numeric_port = nw_endpoint_create_host_with_numeric_port( hostname,  *((unsigned __int16 *)v169 + 12));
                        if (host_with_numeric_port)
                        {
                          local_endpoint = (nw_endpoint *)nw_connection_copy_connected_local_endpoint(*v121);
                          os_log_type_t v142 = nw_connection_copy_connected_path(*v121);
                          interface = (nw_interface *)nw_path_copy_interface(v142);
                          v123 = nw_interface_get_type(interface);
                          id v124 = nw_parameters_create();
                          os_log_type_t v125 = nw_parameters_copy_default_protocol_stack(v124);
                          options = nw_udp_create_options();
                          nw_protocol_stack_set_transport_protocol(v125, options);

                          nw_parameters_set_reuse_local_address(v124, 1);
                          nw_parameters_set_required_interface_type(v124, v123);
                          nw_parameters_set_local_endpoint(v124, local_endpoint);
                          os_log_type_t v127 = (void *)*((void *)v9 + 5);
                          v157[0] = MEMORY[0x1895F87A8];
                          v157[1] = 3221225472LL;
                          v157[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_152;
                          v157[3] = &unk_189BB8238;
                          v158 = v9;
                          os_log_type_t v159 = (id)host_with_numeric_port;
                          BOOL v128 = v124;
                          BOOL v160 = v128;
                          os_log_type_t v161 = v11;
                          nw_socks5_server_register_udp_associate_request(WeakRetained, v158, v159, v127, v157);
                        }

                        else
                        {
                          local_endpoint = (nw_endpoint *)nw_error_create_posix_error(14);
                          nw_socks5_connection_cancel_on_queue(v9, local_endpoint);
                        }
                      }

                      else
                      {
                        posix_error = (nw_endpoint *)nw_error_create_posix_error(22);
                        nw_socks5_connection_cancel_on_queue(v9, posix_error);
                      }

                      BOOL v130 = domaina;
                    }

                    _Block_object_dispose(&v168, 8);
                    _Block_object_dispose(type, 8);
                  }

                  else
                  {
LABEL_260:
                    __nwlog_obj();
                    size_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)&type[0].unint64_t sa_len = 136446978;
                      *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                      *(_WORD *)&type[0].sa_data[10] = 2114;
                      *(void *)&type[0].sa_data[12] = v9;
                      *(_WORD *)&type[1].sa_data[4] = 1024;
                      *(_DWORD *)&type[1].sa_data[6] = buf[2];
                      *(_WORD *)&type[1].sa_data[10] = 2048;
                      *(void *)&type[1].sa_data[12] = size;
                      _os_log_impl( &dword_181A5C000,  v116,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ shoes_got_length connection received invalid request type %u length %zu",  &type[0].sa_len,  0x26u);
                    }

                    nw_socks5_connection_cancel_on_queue(v9, 0LL);
                  }

                  goto LABEL_102;
                }

                __nwlog_obj();
                uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_125;
                }
                *(_DWORD *)&type[0].unint64_t sa_len = 136446466;
                *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                *(_WORD *)&type[0].sa_data[10] = 2114;
                *(void *)&type[0].sa_data[12] = v9;
                v108 = "%{public}s %{public}@ failed to parse bonjour domain";
              }
            }

            _os_log_impl(&dword_181A5C000, v43, OS_LOG_TYPE_ERROR, v108, &type[0].sa_len, 0x16u);
            goto LABEL_125;
          }

          __nwlog_obj();
          size_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            break;
          }
          *(_DWORD *)&type[0].unint64_t sa_len = 136446722;
          *(void *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(void *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(void *)&type[1].sa_data[6] = size;
          os_log_type_t v39 = "%{public}s %{public}@ shoes_got_length connection received bonjour request too short %zu";
LABEL_207:
          _os_log_impl(&dword_181A5C000, v38, OS_LOG_TYPE_ERROR, v39, &type[0].sa_len, 0x20u);
          break;
        default:
          goto LABEL_260;
      }

          if (v113) {
            free(v113);
          }
          id v4 = v110;
          goto LABEL_21;
        }

        __break(1u);
        return result;
      case 103:
        v10->nexus_port = 0;
        if ((_DWORD)v18 == 4) {
          goto LABEL_66;
        }
        if (v18 >= 5)
        {
          __nwlog_obj();
          os_log_type_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 103;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v18;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 4;
            _os_log_impl( &dword_181A5C000,  v102,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_66:
          v10->nexus_port = *(_DWORD *)v29;
        }

        goto LABEL_21;
      case 104:
        goto LABEL_21;
      case 156:
        if (object)
        {
          if ((_DWORD)v18 == 16) {
            goto LABEL_89;
          }
          if (v18 >= 0x11)
          {
            __nwlog_obj();
            size_t v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 156;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v18;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl( &dword_181A5C000,  v120,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_89:
            id v36 = object;
            *(_OWORD *)(v36 + 2_Block_object_dispose(va, 8) = *(_OWORD *)v29;
            object = (nw_endpoint_t)v36;

            goto LABEL_21;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v72 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            _os_log_impl( &dword_181A5C000,  v72,  OS_LOG_TYPE_ERROR,  "%{public}s No previous endpoint to apply endpoint agent to",  buf,  0xCu);
          }

  nw_http3_fail_all_streams(a1, 265LL);
  os_log_type_t v186 = buf;
LABEL_333:
  _Block_object_dispose(v186, 8);
LABEL_334:
  _Block_object_dispose(v271, 8);
}

                if (v121) {
                  free(v121);
                }
                nw_endpoint_type_t v6 = (unsigned __int16 *)(a1 + 736);
LABEL_309:
                os_log_type_t v17 = v369;
                goto LABEL_310;
              }

              *(_DWORD *)(a1 + 624) = v93 + 1;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http3_stream_serialize_fields";
              os_log_type_t v99 = (char *)_os_log_send_and_compose_impl();
              __src[0] = OS_LOG_TYPE_ERROR;
              v421[0] = 0;
              if ((__nwlog_fault(v99, __src, v421) & 1) != 0)
              {
                if (__src[0] == OS_LOG_TYPE_FAULT)
                {
                  size_t v100 = (os_log_s *)__nwlog_obj();
                  v101 = __src[0];
                  if (!os_log_type_enabled(v100, __src[0])) {
                    goto LABEL_185;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http3_stream_serialize_fields";
                  os_log_type_t v102 = "%{public}s lsqpack header already started";
                  goto LABEL_184;
                }

                if (!v421[0])
                {
                  size_t v100 = (os_log_s *)__nwlog_obj();
                  v101 = __src[0];
                  if (!os_log_type_enabled(v100, __src[0])) {
                    goto LABEL_185;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http3_stream_serialize_fields";
                  os_log_type_t v102 = "%{public}s lsqpack header already started, backtrace limit exceeded";
                  goto LABEL_184;
                }

                v108 = (char *)__nw_create_backtrace_string();
                size_t v100 = (os_log_s *)__nwlog_obj();
                v101 = __src[0];
                size_t v109 = os_log_type_enabled(v100, __src[0]);
                if (v108)
                {
                  if (v109)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http3_stream_serialize_fields";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v108;
                    _os_log_impl( &dword_181A5C000,  v100,  v101,  "%{public}s lsqpack header already started, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v108);
                  goto LABEL_185;
                }

                if (v109)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http3_stream_serialize_fields";
                  os_log_type_t v102 = "%{public}s lsqpack header already started, no backtrace";
LABEL_184:
                  _os_log_impl(&dword_181A5C000, v100, v101, v102, buf, 0xCu);
                }
              }

  nw_socket_internal_error(a1, v72);
  return 0LL;
}

LABEL_305:
            goto LABEL_306;
        }
      }

      __break(1u);
      return result;
  }

  os_log_type_t v214 = 0LL;
LABEL_338:

  return v214;
}

            __break(1u);
            return;
          }

LABEL_306:
      size_t v30 = protocol;
      if (v130) {
        free(v130);
      }
      goto LABEL_21;
    }

    if (!v426)
    {
      __nwlog_obj();
      os_log_type_t v131 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v201 = v427;
      if (os_log_type_enabled(v131, v427))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_set_assumes_http3_capable";
        _os_log_impl( &dword_181A5C000,  v131,  v201,  "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_305;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v131 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v138 = v427;
    v139 = os_log_type_enabled(v131, v427);
    if (!backtrace_string)
    {
      if (v139)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_set_assumes_http3_capable";
        _os_log_impl( &dword_181A5C000,  v131,  v138,  "%{public}s protocol options are not http_alt_svc, no backtrace",  buf,  0xCu);
      }

      goto LABEL_305;
    }

    if (v139)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_set_assumes_http3_capable";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v131,  v138,  "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_181AD2C84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24)
{
}

BOOL nw_context_get_globals_for_path(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = &__block_literal_global_389;
  if (!v1)
  {
    __nwlog_obj(v2, v3);
    nw_endpoint_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_context_get_globals_for_path";
    nw_txt_record_t v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    uint64_t v13 = __nwlog_fault(v12, &type, &v24);
    if ((_DWORD)v13)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj(v13, v14);
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v27 = "nw_context_get_globals_for_path";
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj(backtrace_string, v18);
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v27 = "nw_context_get_globals_for_path";
            __int16 v28 = 2082;
            uint64_t v29 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v19,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v27 = "nw_context_get_globals_for_path";
          _os_log_impl(&dword_181A5C000, v15, v19, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj(v13, v14);
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v27 = "nw_context_get_globals_for_path";
          _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181AD33E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_parse_necp_result(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v166 = *MEMORY[0x1895F89C0];
  BOOL v160 = a1;
  if (!v160)
  {
    __nwlog_obj();
    size_t v122 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
    v123 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    char v161 = 0;
    if (v162 == 17)
    {
      __nwlog_obj();
      id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v125 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_181A5C000, v124, v125, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v161)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v131 = v162;
      BOOL v132 = os_log_type_enabled(v124, (os_log_type_t)v162);
      if (backtrace_string)
      {
        if (v132)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v164 = 2082;
          *(void *)unsigned int v165 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v124,  v131,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_364:
        if (!v123) {
          goto LABEL_272;
        }
        goto LABEL_365;
      }

      if (v132)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_181A5C000, v124, v131, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v149 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl( &dword_181A5C000,  v124,  v149,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_363:
    goto LABEL_364;
  }

  if (!a2)
  {
    __nwlog_obj();
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
    v123 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    char v161 = 0;
    if (v162 == 17)
    {
      __nwlog_obj();
      id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v127 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_181A5C000, v124, v127, "%{public}s called with null result", buf, 0xCu);
      }

      goto LABEL_363;
    }

    if (!v161)
    {
      __nwlog_obj();
      id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v150 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl( &dword_181A5C000,  v124,  v150,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_363;
    }

    os_log_type_t v133 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v134 = v162;
    BOOL v135 = os_log_type_enabled(v124, (os_log_type_t)v162);
    if (!v133)
    {
      if (v135)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_181A5C000, v124, v134, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }

      goto LABEL_363;
    }

    if (v135)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      __int16 v164 = 2082;
      *(void *)unsigned int v165 = v133;
      _os_log_impl( &dword_181A5C000,  v124,  v134,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_334;
  }

  if (!a3)
  {
    __nwlog_obj();
    BOOL v128 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
    v123 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    char v161 = 0;
    if (v162 == 17)
    {
      __nwlog_obj();
      id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v129 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_181A5C000, v124, v129, "%{public}s called with null result_length", buf, 0xCu);
      }

      goto LABEL_363;
    }

    if (!v161)
    {
      __nwlog_obj();
      id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v151 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl( &dword_181A5C000,  v124,  v151,  "%{public}s called with null result_length, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_363;
    }

    os_log_type_t v133 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v138 = v162;
    BOOL v139 = os_log_type_enabled(v124, (os_log_type_t)v162);
    if (!v133)
    {
      if (v139)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_181A5C000, v124, v138, "%{public}s called with null result_length, no backtrace", buf, 0xCu);
      }

      goto LABEL_363;
    }

    if (v139)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      __int16 v164 = 2082;
      *(void *)unsigned int v165 = v133;
      _os_log_impl( &dword_181A5C000,  v124,  v138,  "%{public}s called with null result_length, dumping backtrace:%{public}s",  buf,  0x16u);
    }

        if (v188) {
          free(v188);
        }
        uint64_t v12 = &qword_18C45F000;
        unsigned int v47 = v187;
        goto LABEL_143;
      }

              if (v157) {
                free(v157);
              }
              goto LABEL_335;
            }

      if (v68) {
        free(v68);
      }
      return 0LL;
    }

    if (v154 == OS_LOG_TYPE_DEFAULT)
    {
      size_t v69 = (os_log_s *)__nwlog_obj();
      os_log_type_t v70 = type[0];
      if (os_log_type_enabled(v69, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v157 = "nw_protocol_ipv6_add_input_handler";
        BOOL v71 = "%{public}s Attempt to add quic to ip, backtrace limit exceeded";
        goto LABEL_362;
      }

      goto LABEL_363;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v69 = (os_log_s *)__nwlog_obj();
    os_log_type_t v70 = type[0];
    size_t v83 = os_log_type_enabled(v69, type[0]);
    if (!backtrace_string)
    {
      if (v83)
      {
        *(_DWORD *)buf = 136446210;
        v157 = "nw_protocol_ipv6_add_input_handler";
        BOOL v71 = "%{public}s Attempt to add quic to ip, no backtrace";
        goto LABEL_362;
      }

      goto LABEL_363;
    }

    if (v83)
    {
      *(_DWORD *)buf = 136446466;
      v157 = "nw_protocol_ipv6_add_input_handler";
      uint64_t v158 = 2082;
      os_log_type_t v159 = (nw_protocol_identifier *)backtrace_string;
      os_log_type_t v80 = "%{public}s Attempt to add quic to ip, dumping backtrace:%{public}s";
      goto LABEL_186;
    }

LABEL_334:
    free(v133);
    if (!v123) {
      goto LABEL_272;
    }
LABEL_365:
    size_t v110 = (char *)v123;
    goto LABEL_271;
  }

  if (a3 <= 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
    __int16 v164 = 2048;
    *(void *)unsigned int v165 = a3;
    uint64_t v6 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    char v161 = 0;
    if (__nwlog_fault(v6, &v162, &v161))
    {
      if (v162 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v8 = v162;
        if (os_log_type_enabled(v7, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v164 = 2048;
          *(void *)unsigned int v165 = a3;
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s NECP buffer too short %zu", buf, 0x16u);
        }
      }

      else if (v161)
      {
        os_log_type_t v16 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = v162;
        BOOL v18 = os_log_type_enabled(v7, (os_log_type_t)v162);
        if (v16)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
            __int16 v164 = 2048;
            *(void *)unsigned int v165 = a3;
            *(_WORD *)&v165[8] = 2082;
            *(void *)&v165[10] = v16;
            _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v16);
          if (!v6) {
            goto LABEL_272;
          }
LABEL_270:
          size_t v110 = (char *)v6;
LABEL_271:
          free(v110);
          goto LABEL_272;
        }

        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v164 = 2048;
          *(void *)unsigned int v165 = a3;
          _os_log_impl(&dword_181A5C000, v7, v17, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v105 = v162;
        if (os_log_type_enabled(v7, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v164 = 2048;
          *(void *)unsigned int v165 = a3;
          _os_log_impl( &dword_181A5C000,  v7,  v105,  "%{public}s NECP buffer too short %zu, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    if (!v6)
    {
LABEL_272:
      uint64_t v111 = 0LL;
      goto LABEL_302;
    }

    goto LABEL_270;
  }

  uint64_t v14 = (necp_client_result_netagent *)malloc(0xA0uLL);
  if (!v14)
  {
    __nwlog_obj();
    BOOL v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v136, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "strict_malloc";
    __int16 v164 = 2048;
    *(void *)unsigned int v165 = 160LL;
    id v153 = buf;
    char v137 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v137);
    if (result)
    {
LABEL_375:
      __break(1u);
      return result;
    }

    free(v137);
  }

  if (a3 == 5)
  {
    __ptr = 0LL;
    uint64_t v158 = 0LL;
    os_log_type_t v159 = 0LL;
    unint64_t v15 = 0LL;
    goto LABEL_282;
  }

  uint64_t v158 = 0LL;
  os_log_type_t v159 = 0LL;
  unint64_t v15 = 0LL;
  __ptr = 0LL;
  uuid_t uu = v160->client_id;
  unsigned int v154 = 0;
  unsigned int v155 = 8;
  while (1)
  {
    int v19 = *(unsigned __int8 *)(a2 + v15);
    unint64_t v20 = *(unsigned int *)(a2 + 1 + v15);
    if (!(_DWORD)v20)
    {
      unint64_t v27 = 0LL;
      goto LABEL_50;
    }

    if (v20 <= 0xFFFFFFF9 && a3 >= v20 + 5 && a3 - (v20 + 5) >= v15)
    {
      unint64_t v27 = a2 + 5 + v15;
      goto LABEL_50;
    }

    uint64_t v22 = v14;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
    __int16 v164 = 2048;
    *(void *)unsigned int v165 = v15;
    *(_WORD *)&v165[8] = 2048;
    *(void *)&v165[10] = a3;
    *(_WORD *)&v165[18] = 1024;
    *(_DWORD *)&v165[20] = v20;
    id v153 = buf;
    char v24 = (void *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    char v161 = 0;
    if (__nwlog_fault((const char *)v24, &v162, &v161))
    {
      if (v162 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v26 = v162;
        if (os_log_type_enabled(v25, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          __int16 v164 = 2048;
          *(void *)unsigned int v165 = v15;
          *(_WORD *)&v165[8] = 2048;
          *(void *)&v165[10] = a3;
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v20;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u",  buf,  0x26u);
        }
      }

      else if (v161)
      {
        __int16 v28 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = v162;
        BOOL v30 = os_log_type_enabled(v25, (os_log_type_t)v162);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            __int16 v164 = 2048;
            *(void *)unsigned int v165 = v15;
            *(_WORD *)&v165[8] = 2048;
            *(void *)&v165[10] = a3;
            *(_WORD *)&v165[18] = 1024;
            *(_DWORD *)&v165[20] = v20;
            *(_WORD *)&v165[24] = 2082;
            *(void *)&v165[26] = v28;
            _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s",  buf,  0x30u);
          }

          free(v28);
          if (!v24) {
            goto LABEL_49;
          }
LABEL_48:
          free(v24);
          goto LABEL_49;
        }

        if (v30)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          __int16 v164 = 2048;
          *(void *)unsigned int v165 = v15;
          *(_WORD *)&v165[8] = 2048;
          *(void *)&v165[10] = a3;
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v20;
          _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace",  buf,  0x26u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v31 = v162;
        if (os_log_type_enabled(v25, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          __int16 v164 = 2048;
          *(void *)unsigned int v165 = v15;
          *(_WORD *)&v165[8] = 2048;
          *(void *)&v165[10] = a3;
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v20;
          _os_log_impl( &dword_181A5C000,  v25,  v31,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded",  buf,  0x26u);
        }
      }
    }

    if (v24) {
      goto LABEL_48;
    }
LABEL_49:
    unint64_t v27 = 0LL;
    uint64_t v14 = v22;
LABEL_50:
    v15 += v20 + 5;
    if (v15 > a3) {
      break;
    }
    if ((_DWORD)v20) {
      BOOL v32 = v27 == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32)
    {
      switch(v19)
      {
        case 1:
          __int128 v162 = 0uLL;
          if ((_DWORD)v20 == 16) {
            goto LABEL_57;
          }
          __nwlog_obj();
          size_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            __int16 v164 = 1024;
            *(_DWORD *)unsigned int v165 = 1;
            *(_WORD *)&v165[4] = 1024;
            *(_DWORD *)&v165[6] = v20;
            *(_WORD *)&v165[10] = 1024;
            *(_DWORD *)&v165[12] = 16;
            _os_log_impl( &dword_181A5C000,  v68,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_57:
          __int128 v162 = *(_OWORD *)v27;
          if (uuid_is_null(uu))
          {
            *(_OWORD *)uuid_t uu = v162;
          }

          else if (*(_OWORD *)v160->client_id != v162)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            flow_result_from_tlv = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(flow_result_from_tlv, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
              __int16 v164 = 1042;
              *(_DWORD *)unsigned int v165 = 16;
              *(_WORD *)&v165[4] = 2098;
              *(void *)&v165[6] = &v162;
              *(_WORD *)&v165[14] = 1042;
              *(_DWORD *)&v165[16] = 16;
              *(_WORD *)&v165[20] = 2098;
              *(void *)&v165[22] = v160->client_id;
              _os_log_impl( &dword_181A5C000,  flow_result_from_tlv,  OS_LOG_TYPE_INFO,  "%{public}s Client ID from NECP (%{public,uuid_t}.16P) does not match path (%{public,uuid_t}.16P)",  buf,  0x2Cu);
            }

                            __int16 v28 = 0LL;
LABEL_350:

                            goto LABEL_351;
                          }

                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          v169 = (id)gLogObj;
                          *(_DWORD *)buf = 136446466;
                          v379 = "nw_protocol_utilities_add_input_handler";
                          v380 = 2048;
                          v381 = v166;
                          v170 = (char *)_os_log_send_and_compose_impl();

                          type[0] = OS_LOG_TYPE_ERROR;
                          v373[0] = OS_LOG_TYPE_DEFAULT;
                          if (type[0] == OS_LOG_TYPE_FAULT)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            os_log_type_t v171 = (os_log_s *)(id)gLogObj;
                            id v172 = type[0];
                            if (os_log_type_enabled(v171, type[0]))
                            {
                              *(_DWORD *)buf = 136446466;
                              v379 = "nw_protocol_utilities_add_input_handler";
                              v380 = 2048;
                              v381 = v166;
                              _os_log_impl( &dword_181A5C000,  v171,  v172,  "%{public}s Cannot add input handler %p to itself",  buf,  0x16u);
                            }
                          }

                          else if (v373[0])
                          {
                            v174 = (char *)__nw_create_backtrace_string();
                            __nwlog_obj();
                            os_log_type_t v171 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            v175 = type[0];
                            v176 = os_log_type_enabled(v171, type[0]);
                            if (v174)
                            {
                              if (v176)
                              {
                                *(_DWORD *)buf = 136446722;
                                v379 = "nw_protocol_utilities_add_input_handler";
                                v380 = 2048;
                                v381 = v166;
                                v382 = 2082;
                                v383 = v174;
                                _os_log_impl( &dword_181A5C000,  v171,  v175,  "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s",  buf,  0x20u);
                              }

                              free(v174);
                              if (!v170) {
                                goto LABEL_274;
                              }
LABEL_273:
                              free(v170);
                              goto LABEL_274;
                            }

                            if (v176)
                            {
                              *(_DWORD *)buf = 136446466;
                              v379 = "nw_protocol_utilities_add_input_handler";
                              v380 = 2048;
                              v381 = v166;
                              _os_log_impl( &dword_181A5C000,  v171,  v175,  "%{public}s Cannot add input handler %p to itself, no backtrace",  buf,  0x16u);
                            }
                          }

                          else
                          {
                            __nwlog_obj();
                            os_log_type_t v171 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            unsigned int v177 = type[0];
                            if (os_log_type_enabled(v171, type[0]))
                            {
                              *(_DWORD *)buf = 136446466;
                              v379 = "nw_protocol_utilities_add_input_handler";
                              v380 = 2048;
                              v381 = v166;
                              _os_log_impl( &dword_181A5C000,  v171,  v177,  "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded",  buf,  0x16u);
                            }
                          }

                          goto LABEL_271;
                        }

                        __nwlog_obj();
                        __int128 v298 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 136446210;
                        v379 = "nw_protocol_utilities_add_input_handler";
                        v170 = (char *)_os_log_send_and_compose_impl();

                        type[0] = OS_LOG_TYPE_ERROR;
                        v373[0] = OS_LOG_TYPE_DEFAULT;
                        if (__nwlog_fault(v170, type, v373))
                        {
                          if (type[0] == OS_LOG_TYPE_FAULT)
                          {
                            __nwlog_obj();
                            os_log_type_t v171 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            __int128 v299 = type[0];
                            if (os_log_type_enabled(v171, type[0]))
                            {
                              *(_DWORD *)buf = 136446210;
                              v379 = "nw_protocol_utilities_add_input_handler";
                              _os_log_impl( &dword_181A5C000,  v171,  v299,  "%{public}s called with null input_protocol",  buf,  0xCu);
                            }

              if (v142) {
                free(v142);
              }
              *(_DWORD *)(v136 + 36_Block_object_dispose(va, 8) = -1;
              goto LABEL_337;
            }

            if ((*(_BYTE *)(v8 + 158) & 1) == 0)
            {
              os_log_type_t v150 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
              {
                os_log_type_t v151 = *(_DWORD *)(v8 + 372);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v8 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(void *)&_BYTE buf[24] = " ";
                *(_WORD *)&_BYTE buf[32] = 1024;
                *(_DWORD *)&buf[34] = v151;
                _os_log_impl( &dword_181A5C000,  v150,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> http1->parameters is NULL when opening responder stream",  buf,  0x26u);
              }
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
            size_t v116 = (char *)_os_log_send_and_compose_impl();
            v398[0] = 16;
            v394[0] = OS_LOG_TYPE_DEFAULT;
            if (v398[0] == 17)
            {
              os_log_type_t v117 = (os_log_s *)__nwlog_obj();
              unsigned int v118 = v398[0];
              if (!os_log_type_enabled(v117, (os_log_type_t)v398[0])) {
                goto LABEL_487;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
              unsigned int v119 = "%{public}s http1->parameters is NULL when opening responder stream";
              goto LABEL_486;
            }

            if (v394[0] == OS_LOG_TYPE_DEFAULT)
            {
              os_log_type_t v117 = (os_log_s *)__nwlog_obj();
              unsigned int v118 = v398[0];
              if (!os_log_type_enabled(v117, (os_log_type_t)v398[0])) {
                goto LABEL_487;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
              unsigned int v119 = "%{public}s http1->parameters is NULL when opening responder stream, backtrace limit exceeded";
              goto LABEL_486;
            }

            os_log_type_t v156 = (char *)__nw_create_backtrace_string();
            os_log_type_t v117 = (os_log_s *)__nwlog_obj();
            unsigned int v118 = v398[0];
            v157 = os_log_type_enabled(v117, (os_log_type_t)v398[0]);
            if (!v156)
            {
              if (!v157) {
                goto LABEL_487;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
              unsigned int v119 = "%{public}s http1->parameters is NULL when opening responder stream, no backtrace";
              goto LABEL_486;
            }

            if (v157)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v156;
              uint64_t v158 = "%{public}s http1->parameters is NULL when opening responder stream, dumping backtrace:%{public}s";
LABEL_479:
              _os_log_impl(&dword_181A5C000, v117, v118, v158, buf, 0x16u);
              goto LABEL_480;
            }

            goto LABEL_480;
          }

          if ((*(_BYTE *)(v8 + 158) & 1) == 0)
          {
            os_log_type_t v230 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
            {
              v231 = *(_DWORD *)(v8 + 372);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v8 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&_BYTE buf[24] = " ";
              *(_WORD *)&_BYTE buf[32] = 1024;
              *(_DWORD *)&buf[34] = v231;
              _os_log_impl( &dword_181A5C000,  v230,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow",  buf,  0x26u);
            }
          }

          os_log_type_t v232 = *v128;
          BOOL v233 = v232 | (*(unsigned __int8 *)(v11 + 874) << 16);
          if ((v232 & 0x100) != 0) {
            goto LABEL_454;
          }
          *(_BYTE *)(v11 + 874) = BYTE2(v233);
          *BOOL v128 = v233 | 0x100;
          if ((*(_BYTE *)(v11 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v351 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v351, OS_LOG_TYPE_DEBUG))
              {
                v352 = *(void *)(v11 + 488);
                v353 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
                v354 = *(_DWORD *)(v11 + 860);
                if (v352) {
                  LODWORD(v352) = *(_DWORD *)(v352 + 424);
                }
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v11 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(void *)&_BYTE buf[24] = " ";
                *(_WORD *)&_BYTE buf[32] = 1024;
                *(_DWORD *)&buf[34] = v353;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v354;
                *(_WORD *)&buf[44] = 1024;
                *(_DWORD *)&buf[46] = v352;
                _os_log_impl( &dword_181A5C000,  v351,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
              }
            }
          }

          os_log_type_t v234 = *(void *)(v11 + 480);
          if (!v234)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v333 = (char *)_os_log_send_and_compose_impl();
            v398[0] = 16;
            v394[0] = OS_LOG_TYPE_DEFAULT;
            if (v398[0] != 17)
            {
              if (v394[0])
              {
                v367 = (char *)__nw_create_backtrace_string();
                v334 = (os_log_s *)__nwlog_obj();
                v335 = v398[0];
                v350 = os_log_type_enabled(v334, (os_log_type_t)v398[0]);
                if (v367)
                {
                  if (!v350) {
                    goto LABEL_724;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = v367;
                  v369 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                  v371 = buf;
                  goto LABEL_723;
                }

                goto LABEL_741;
              }

              goto LABEL_737;
            }

    if (v61) {
      free(v61);
    }
    return 0LL;
  }

  if (!(a4 | a3) && (*(_WORD *)(v19 + 428) & 0x100) != 0)
  {
    __int16 v35 = nw_frame_cache_create_frame(v20 + 87, 0LL);
    if (v35)
    {
      id v36 = v35;
      if ((*(_WORD *)(v35 + 204) & 4) != 0)
      {
        size_t v67 = *(_BYTE *)(v35 + 216);
        *(void *)(v35 + 20_Block_object_dispose(va, 8) = v20;
        *(_BYTE *)(v35 + 216) = v67 & 0xFC | 2;
LABEL_126:
        *(void *)(v36 + 16) = 0LL;
        os_log_type_t v84 = (void *)v20[86];
        *(void *)(v36 + 24) = v84;
        os_log_s *v84 = v36;
        v20[86] = v36 + 16;
        *(void *)(v36 + 80) = nw_http1_connection_output_frame_finalizer;
        *(void *)(v36 + 8_Block_object_dispose(va, 8) = v16;
        if ((*(_BYTE *)(v19 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            os_log_type_t v145 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v146 = *(void *)(v19 + 256);
              os_log_type_t v147 = *(_DWORD *)(*(void *)(v19 + 248) + 372LL);
              if (v146) {
                LODWORD(v146) = *(_DWORD *)(v146 + 860);
              }
              BOOL v148 = *(_DWORD *)(v19 + 424);
              *(_DWORD *)buf = 136447490;
              v178 = "nw_protocol_http1_get_output_frames";
              unint64_t v179 = 2082;
              *(void *)id v180 = v19 + 74;
              *(_WORD *)&v180[8] = 2080;
              *(void *)&v180[10] = " ";
              v181 = 1024;
              *(_DWORD *)v182 = v147;
              *(_WORD *)&v182[4] = 1024;
              *(_DWORD *)&v182[6] = v146;
              LOWORD(v183) = 1024;
              *(_DWORD *)((char *)&v183 + 2) = v148;
              _os_log_impl( &dword_181A5C000,  v145,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> returning 1 frame of 0 bytes for potential complete context",  buf,  0x32u);
            }
          }
        }

        *(void *)(v36 + 32) = 0LL;
        __int16 v85 = a6->tqh_last;
        *(void *)(v36 + 40) = v85;
        *__int16 v85 = (nw_frame *)v36;
        a6->tqh_last = (nw_frame **)(v36 + 32);
        return 1LL;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      v178 = "nw_http1_frame_metadata_reset";
      unint64_t v179 = 2048;
      *(void *)id v180 = v36;
      BOOL v37 = (char *)_os_log_send_and_compose_impl();
      v176 = OS_LOG_TYPE_ERROR;
      v175 = 0;
      if (__nwlog_fault(v37, &v176, &v175))
      {
        if (v176 == OS_LOG_TYPE_FAULT)
        {
          size_t v38 = (os_log_s *)__nwlog_obj();
          os_log_type_t v39 = v176;
          if (!os_log_type_enabled(v38, v176)) {
            goto LABEL_124;
          }
          *(_DWORD *)buf = 136446466;
          v178 = "nw_http1_frame_metadata_reset";
          unint64_t v179 = 2048;
          *(void *)id v180 = v36;
          size_t v40 = "%{public}s frame %p has no metadata";
LABEL_122:
          size_t v83 = v38;
LABEL_123:
          _os_log_impl(&dword_181A5C000, v83, v39, v40, buf, 0x16u);
          goto LABEL_124;
        }

        if (!v175)
        {
          size_t v38 = (os_log_s *)__nwlog_obj();
          os_log_type_t v39 = v176;
          if (!os_log_type_enabled(v38, v176)) {
            goto LABEL_124;
          }
          *(_DWORD *)buf = 136446466;
          v178 = "nw_http1_frame_metadata_reset";
          unint64_t v179 = 2048;
          *(void *)id v180 = v36;
          size_t v40 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
          goto LABEL_122;
        }

        os_log_type_t v75 = (char *)__nw_create_backtrace_string();
        BOOL v76 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = v176;
        logb = v76;
        os_log_type_t v77 = os_log_type_enabled(v76, v176);
        if (v75)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446722;
            v178 = "nw_http1_frame_metadata_reset";
            unint64_t v179 = 2048;
            *(void *)id v180 = v36;
            *(_WORD *)&v180[8] = 2082;
            *(void *)&v180[10] = v75;
            _os_log_impl( &dword_181A5C000,  logb,  v39,  "%{public}s frame %p has no metadata, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v75);
          goto LABEL_124;
        }

        if (v77)
        {
          *(_DWORD *)buf = 136446466;
          v178 = "nw_http1_frame_metadata_reset";
          unint64_t v179 = 2048;
          *(void *)id v180 = v36;
          size_t v40 = "%{public}s frame %p has no metadata, no backtrace";
          size_t v83 = logb;
          goto LABEL_123;
        }
      }

      free(v144);
      goto LABEL_335;
    }

    if (v123) {
      free(v123);
    }
    size_t v95 = 0LL;
    if (v91 != &nw_protocol_ref_counted_handle) {
      goto LABEL_239;
    }
    goto LABEL_238;
  }

  size_t v95 = (void *)get_path(default_input_handler);
  if (v91 == &nw_protocol_ref_counted_handle)
  {
LABEL_238:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      size_t v110 = default_input_handler[1].callbacks;
      if (v110)
      {
        uint64_t v111 = (nw_protocol_callbacks *)((char *)v110 - 1);
        default_input_handler[1].callbacks = v111;
        if (!v111)
        {
          os_log_type_t v112 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v112)
          {
            *(void *)default_input_handler[1].flow_id = 0LL;
            v112[2](v112);
            _Block_release(v112);
          }

          if ((default_input_handler[1].flow_id[8] & 1) != 0)
          {
            os_log_type_t v113 = *(const void **)default_input_handler[1].flow_id;
            if (v113) {
              _Block_release(v113);
            }
          }

          free(default_input_handler);
        }
      }
    }
  }

LABEL_143:
          *((_BYTE *)v160 + 473) |= 0x40u;
          if ((v53 & 8) == 0)
          {
LABEL_99:
            if ((v53 & 0x2000) == 0) {
              goto LABEL_100;
            }
            goto LABEL_145;
          }

      if (!v60)
      {
LABEL_145:

        goto LABEL_146;
      }

        if (v38) {
          free(v38);
        }
        goto LABEL_96;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
      __int16 v28 = _os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v56) = 0;
      if (__nwlog_fault((const char *)v28, type, &v56))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          in6_addr v44 = (os_log_s *)__nwlog_obj();
          in6_addr v45 = type[0];
          if (!os_log_type_enabled(v44, type[0])) {
            goto LABEL_150;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
          unsigned __int8 v46 = "%{public}s called with null protocol";
          goto LABEL_149;
        }

        if (!(_BYTE)v56)
        {
          in6_addr v44 = (os_log_s *)__nwlog_obj();
          in6_addr v45 = type[0];
          if (!os_log_type_enabled(v44, type[0])) {
            goto LABEL_150;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
          unsigned __int8 v46 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_149;
        }

        __int128 v50 = (char *)__nw_create_backtrace_string();
        in6_addr v44 = (os_log_s *)__nwlog_obj();
        in6_addr v45 = type[0];
        char v51 = os_log_type_enabled(v44, type[0]);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v50;
            _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v50);
          if (!v28) {
            goto LABEL_98;
          }
LABEL_106:
          free((void *)v28);
          goto LABEL_98;
        }

        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
          unsigned __int8 v46 = "%{public}s called with null protocol, no backtrace";
LABEL_149:
          _os_log_impl(&dword_181A5C000, v44, v45, v46, buf, 0xCu);
        }
      }

      free(backtrace_string);
LABEL_152:
      if (!v52) {
        goto LABEL_78;
      }
      size_t v38 = (char *)v52;
      goto LABEL_77;
    }

    if (v6[405] < 0) {
      goto LABEL_78;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    v169 = "nw_protocol_implementation_connect";
    v170 = 2082;
    os_log_type_t v171 = v7 + 407;
    id v172 = 2080;
    uint64_t v173 = (nw_protocol *)" ";
    v174 = 2048;
    v175 = a1;
    unint64_t v15 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v163[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v15, type, v163))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          os_log_type_t v171 = v7 + 407;
          id v172 = 2080;
          uint64_t v173 = (nw_protocol *)" ";
          v174 = 2048;
          v175 = a1;
          _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s %{public}s%sProtocol %p output_handler is pointing to itself",  buf,  0x2Au);
        }
      }

      else if (v163[0])
      {
        char v24 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v25 = type[0];
        os_log_type_t v26 = os_log_type_enabled(v16, type[0]);
        if (v24)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136447234;
            v169 = "nw_protocol_implementation_connect";
            v170 = 2082;
            os_log_type_t v171 = v7 + 407;
            id v172 = 2080;
            uint64_t v173 = (nw_protocol *)" ";
            v174 = 2048;
            v175 = a1;
            v176 = 2082;
            unsigned int v177 = v24;
            _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s %{public}s%sProtocol %p output_handler is pointing to itself, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v24);
          if (!v15) {
            goto LABEL_78;
          }
LABEL_76:
          size_t v38 = (char *)v15;
LABEL_77:
          free(v38);
          goto LABEL_78;
        }

        if (v26)
        {
          *(_DWORD *)buf = 136446978;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          os_log_type_t v171 = v7 + 407;
          id v172 = 2080;
          uint64_t v173 = (nw_protocol *)" ";
          v174 = 2048;
          v175 = a1;
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s %{public}s%sProtocol %p output_handler is pointing to itself, no backtrace",  buf,  0x2Au);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        BOOL v30 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          os_log_type_t v171 = v7 + 407;
          id v172 = 2080;
          uint64_t v173 = (nw_protocol *)" ";
          v174 = 2048;
          v175 = a1;
          _os_log_impl( &dword_181A5C000,  v16,  v30,  "%{public}s %{public}s%sProtocol %p output_handler is pointing to itself, backtrace limit exceeded",  buf,  0x2Au);
        }
      }
    }

    if (!v15) {
      goto LABEL_78;
    }
    goto LABEL_76;
  }

  __nwlog_obj();
  size_t v72 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v169 = "nw_protocol_implementation_connect";
  id v73 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v163[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v73, type, v163))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v75 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v169 = "nw_protocol_implementation_connect";
        _os_log_impl(&dword_181A5C000, v74, v75, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v163[0])
    {
      os_log_type_t v84 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v85 = type[0];
      v86 = os_log_type_enabled(v74, type[0]);
      if (v84)
      {
        if (v86)
        {
          *(_DWORD *)buf = 136446466;
          v169 = "nw_protocol_implementation_connect";
          v170 = 2082;
          os_log_type_t v171 = v84;
          _os_log_impl( &dword_181A5C000,  v74,  v85,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v84);
        goto LABEL_255;
      }

      if (v86)
      {
        *(_DWORD *)buf = 136446210;
        v169 = "nw_protocol_implementation_connect";
        _os_log_impl(&dword_181A5C000, v74, v85, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v106 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v169 = "nw_protocol_implementation_connect";
        _os_log_impl( &dword_181A5C000,  v74,  v106,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

          goto LABEL_144;
        }

        if (!v79)
        {
          __nwlog_obj();
          unsigned int v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v71 = v80;
          if (os_log_type_enabled(v54, v80))
          {
            size_t v72 = (const char *)*((void *)v17 + 2);
            if (!v72) {
              size_t v72 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
            v86 = 2082;
            id v87 = (char *)v72;
            v88 = 2048;
            os_log_type_t v89 = v17;
            _os_log_impl( &dword_181A5C000,  v54,  v71,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded",  buf,  0x20u);
          }

          goto LABEL_143;
        }

        nw_endpoint_t v64 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v65 = v80;
        id v66 = os_log_type_enabled(v54, v80);
        if (!v64)
        {
          if (v66)
          {
            id v73 = (const char *)*((void *)v17 + 2);
            if (!v73) {
              id v73 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
            v86 = 2082;
            id v87 = (char *)v73;
            v88 = 2048;
            os_log_type_t v89 = v17;
            _os_log_impl( &dword_181A5C000,  v54,  v65,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace",  buf,  0x20u);
          }

          goto LABEL_143;
        }

        if (v66)
        {
          size_t v67 = (const char *)*((void *)v17 + 2);
          if (!v67) {
            size_t v67 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
          v86 = 2082;
          id v87 = (char *)v67;
          v88 = 2048;
          os_log_type_t v89 = v17;
          os_log_type_t v90 = 2082;
          id v91 = (unint64_t)v64;
          _os_log_impl( &dword_181A5C000,  v54,  v65,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v64);
      }
}

  if (v30) {
LABEL_144:
  }
    free(v30);
LABEL_38:
  id v23 = nw_http_metadata_copy_request(object);
  else {
    char v24 = 0;
  }
  if (a4) {
    os_log_type_t v25 = 0;
  }
  else {
    os_log_type_t v25 = 8;
  }
  *(_WORD *)(v6 + 1062) = v24 | v25 | *(_WORD *)(v6 + 1062) & 0xFFF3;
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1LL, object);
  if (v23) {
    os_release(v23);
  }
}

                  buf[0] = 0;
LABEL_144:
                  unsigned int v119 = v11->path_parameters;
                  if (v119->path_value.traffic_class)
                  {
                    snprintf(v211, 0x18uLL, ", traffic class: %u", v119->path_value.traffic_class);
                    unsigned int v119 = v11->path_parameters;
                  }

                  else
                  {
                    v211[0] = 0;
                  }

                  memset(out, 0, sizeof(out));
                  if (!uuid_is_null(v119->process_path_value.persona_id)) {
                    uuid_unparse(v11->path_parameters->process_path_value.persona_id, out);
                  }
                  if (uuid_is_null(v11->path_parameters->process_path_value.persona_id)
                    || uuid_is_null(v11->path_parameters->process_path_value.persona_id)
                    || !out[0])
                  {
                    v209[0] = 0;
                  }

                  else
                  {
                    is_null = uuid_is_null(v11->path_parameters->process_path_value.persona_id);
                    BOOL v132 = out;
                    if (is_null) {
                      BOOL v132 = 0LL;
                    }
                    snprintf(v209, 0x2EuLL, ", persona: %s", v132);
                  }

                  size_t v120 = v11->path_parameters;
                  local_address = v120->local_address;
                  if (local_address
                    && (v123 = *((unsigned __int8 *)local_address + 104), size_t v122 = (char *)local_address + 104, v123))
                  {
                    snprintf(v208, 0x28uLL, ", interface: %s", v122);
                    internet_options = v11->path_parameters->internet_options;
                  }

                  else
                  {
                    v208[0] = 0;
                    internet_options = v120->internet_options;
                  }

                  os_log_type_t v125 = v95;
                  v126 = internet_options;
                  *(void *)unint64_t v225 = 0LL;
                  id v226 = v225;
                  int v227 = 0x2020000000LL;
                  v228 = 0LL;
                  os_log_type_t v127 = v126 + 45;
                  *(void *)v202 = MEMORY[0x1895F87A8];
                  v203 = 3221225472LL;
                  os_log_type_t v204 = __nw_endpoint_get_description_block_invoke;
                  id v205 = &unk_189BC9210;
                  BOOL v128 = v126;
                  os_log_type_t v206 = v128;
                  os_log_type_t v207 = v225;
                  os_unfair_lock_lock(v127);
                  __nw_endpoint_get_description_block_invoke((uint64_t)v202);
                  os_unfair_lock_unlock(v127);
                  os_log_type_t v129 = (const char *)*((void *)v226 + 3);

                  _Block_object_dispose(v225, 8);
                  size_t v95 = v125;
                  if (v129)
                  {
                    snprintf(v202, 0x8CuLL, ", local: %s", v129);
LABEL_159:
                    BOOL v130 = v11->path_parameters;
                    if (*(_DWORD *)((char *)&v130->path_value + 31))
                    {
                      snprintf(v225, 0x19uLL, ", multipath service: %u", *(_DWORD *)((char *)&v130->path_value + 31));
                      BOOL v130 = v11->path_parameters;
                    }

                    else
                    {
                      v225[0] = 0;
                    }

                    os_log_type_t v133 = *((_WORD *)&v130->path_value + 14);
                    if ((v133 & 0x10) != 0) {
                      os_log_type_t v134 = ", legacy-socket";
                    }
                    else {
                      os_log_type_t v134 = "";
                    }
                    BOOL v135 = ", no expensive";
                    if ((v133 & 1) == 0) {
                      BOOL v135 = "";
                    }
                    v178 = v135;
                    id v180 = v134;
                    if ((v133 & 2) != 0) {
                      BOOL v136 = ", no constrained";
                    }
                    else {
                      BOOL v136 = "";
                    }
                    char v137 = ", allow ultra constrained";
                    if ((v133 & 4) == 0) {
                      char v137 = "";
                    }
                    v174 = v137;
                    v176 = v136;
                    if ((v133 & 8) != 0) {
                      os_log_type_t v138 = ", no roaming";
                    }
                    else {
                      os_log_type_t v138 = "";
                    }
                    id v172 = v138;
                    prohibit_cellular = nw_parameters_get_prohibit_cellular(v95);
                    BOOL v139 = v95;
                    os_log_type_t v140 = v11->path_parameters->joinable_path_value.multipath_service;

                    BOOL v141 = v139;
                    os_log_type_t v142 = v11->path_parameters->joinable_path_value.multipath_service;

                    os_log_type_t v143 = v141;
                    os_log_type_t v144 = *((_WORD *)&v11->path_parameters->path_value + 14);

                    os_log_type_t v145 = v143;
                    os_log_type_t v146 = v11->path_parameters->joinable_path_value.multipath_service;

                    prohibit_privacy_proxy = nw_parameters_get_prohibit_privacy_proxy(v145);
                    if ((v146 & 0x400) != 0) {
                      BOOL v148 = ", proxy fail closed for unreachable";
                    }
                    else {
                      BOOL v148 = "";
                    }
                    os_log_type_t v171 = v148;
                    os_log_type_t v149 = ", proxy fail closed";
                    if ((v144 & 0x40) == 0) {
                      os_log_type_t v149 = "";
                    }
                    v170 = v149;
                    if ((v142 & 0x200) != 0) {
                      os_log_type_t v150 = ", no proxy path selection";
                    }
                    else {
                      os_log_type_t v150 = "";
                    }
                    if ((v140 & 0x100) != 0) {
                      os_log_type_t v151 = ", prefer no proxy";
                    }
                    else {
                      os_log_type_t v151 = "";
                    }
                    if (prohibit_cellular) {
                      os_log_type_t v152 = ", no cellular";
                    }
                    else {
                      os_log_type_t v152 = "";
                    }
                    if (prohibit_privacy_proxy) {
                      id v153 = ", prohibit privacy proxy";
                    }
                    else {
                      id v153 = "";
                    }
                    unsigned int v154 = v145;
                    p_path_parameters = &v11->path_parameters;
                    os_log_type_t v156 = (v11->path_parameters->joinable_path_value.multipath_service & 0x4000) == 0;

                    if (v156) {
                      v157 = "";
                    }
                    else {
                      v157 = ", known tracker";
                    }
                    uint64_t v158 = v154;
                    os_log_type_t v159 = ((*p_path_parameters)->joinable_path_value.multipath_service & 0x8000) == 0;

                    BOOL v160 = v158;
                    if (((LOWORD((*p_path_parameters)->joinable_path_value.multipath_service) | (BYTE2((*p_path_parameters)->joinable_path_value.multipath_service) << 16)) & 0x10000) != 0) {
                      char v161 = ", approved app domain";
                    }
                    else {
                      char v161 = "";
                    }

                    __int128 v162 = ", third party web content";
                    if (v159) {
                      __int128 v162 = "";
                    }
                    v163 = ", prefer companion";
                    companion_preference = (*p_path_parameters)->path_value.companion_preference;
                    companion_link_upgrade_preference = (*p_path_parameters)->path_value.companion_link_upgrade_preference;
                    if (companion_preference != 1) {
                      v163 = "";
                    }
                    if (companion_preference == 2) {
                      uint64_t v166 = ", avoid companion";
                    }
                    else {
                      uint64_t v166 = "";
                    }
                    unint64_t v167 = ", bluetooth upgrade";
                    if (companion_link_upgrade_preference != 1) {
                      unint64_t v167 = "";
                    }
                    if (companion_link_upgrade_preference == 2) {
                      id v168 = ", wi-fi upgrade";
                    }
                    else {
                      id v168 = "";
                    }
                    asprintf( &v201,  "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",  v196,  __str,  (const char *)type,  v219,  v213,  (const char *)buf,  v209,  v220,  v211,  v222,  v221,  v208,  v202,  v225,  v180,  v197,  v195,  v194,  v178,  v176,  v174,  v172,  v152,  v151,  v150,  v170,  v171,  v153,  v157,  v218,  v162,  v161,  v163,  v166,  v193,  v192,  v191,  v190,  v189,  v167,  v168,  v188,  v187,  v186,  v185,  v184,  v183,
                      v182,
                      v181);
                    goto LABEL_216;
                  }

      free(v82);
    }
  }

    goto LABEL_144;
  }

  unsigned int v55 = v54;
  if (CFArrayGetCount(v54) < 1
    || CFArrayGetCount(v31) < 1
    || (Count = CFArrayGetCount(v31), char v57 = CFArrayGetCount(v55), v58 = Count < 1, v59 = Count - 1, v58)
    || (__int128 v60 = v57 - 1, v57 < 1))
  {
LABEL_156:
    CFRelease(v6);
    os_log_type_t v29 = 0LL;
    goto LABEL_157;
  }

  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v55, v60);
    size_t v62 = (const __CFString *)CFArrayGetValueAtIndex(v31, v59);
    if (!v60 && (!ValueAtIndex || !CFStringGetLength(ValueAtIndex))) {
      ValueAtIndex = @"*";
    }
    if (CFStringCompare(ValueAtIndex, v62, 1uLL)) {
      break;
    }
    os_log_type_t v29 = 1LL;
    if (!v59 || !v60) {
      goto LABEL_148;
    }
    --v59;
    --v60;
LABEL_90:
    os_log_type_t v29 = 0LL;
    if (v59 < 0 || v60 < 0) {
      goto LABEL_148;
    }
  }

  if (CFStringCompare(ValueAtIndex, @"*", 1uLL) == kCFCompareEqualTo)
  {
    while (1)
    {
      nw_endpoint_t v63 = (const __CFString *)CFArrayGetValueAtIndex(v55, v60);
      nw_endpoint_t v64 = v63;
      if (!v60 && (!v63 || !CFStringGetLength(v63))) {
        nw_endpoint_t v64 = @"*";
      }
      if (CFStringCompare(v64, @"*", 1uLL)) {
        break;
      }
      BOOL v58 = v60-- <= 0;
      if (v58)
      {
        os_log_type_t v29 = 1LL;
        goto LABEL_148;
      }
    }

    do
    {
      BOOL v65 = (const __CFString *)CFArrayGetValueAtIndex(v31, v59);
      if (CFStringCompare(v64, v65, 1uLL) == kCFCompareEqualTo) {
        goto LABEL_90;
      }
      BOOL v58 = v59-- <= 0;
    }

    while (!v58);
  }

  os_log_type_t v29 = 0LL;
LABEL_148:
  CFRelease(v6);
LABEL_157:
  CFRelease(v31);
  CFRelease(v8);
  if (v55) {
    CFRelease(v55);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v33) {
    CFRelease(v33);
  }
  return v29;
}

          nw_txt_record_t v79 = 0;
LABEL_144:
          v346 = (void *)(v11 + 32);
          v88 = __len[0];
          if (__len[0])
          {
            os_log_type_t v89 = v11;
            os_log_type_t v90 = -1;
            id v91 = __len[0];
            do
            {
              os_log_type_t v92 = v90++;
              id v93 = v91 >= 0x10;
              v91 >>= 4;
            }

            while (v93);
            if (v77)
            {
              os_log_type_t v94 = (_BYTE *)(v77 + v90);
              *(_WORD *)(v94 + 1) = 2573;
              do
              {
                if ((v88 & 0xF) >= 0xA) {
                  size_t v95 = (v88 & 0xF) + 55;
                }
                else {
                  size_t v95 = v88 & 0xF | 0x30;
                }
                *v94-- = v95;
                id v96 = v88 > 0xF;
                v88 >>= 4;
              }

              while (v96);
              goto LABEL_153;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v364 = "nw_http1_connection_write_chunk_header";
            os_log_type_t v200 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__len[1]) = 16;
            type[0] = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v200, &__len[1], type))
            {
              if (LOBYTE(__len[1]) == 17)
              {
                v201 = (os_log_s *)__nwlog_obj();
                v202 = __len[1];
                if (os_log_type_enabled(v201, __len[1]))
                {
                  *(_DWORD *)buf = 136446210;
                  v364 = "nw_http1_connection_write_chunk_header";
                  v203 = v201;
                  os_log_type_t v204 = v202;
                  id v205 = "%{public}s called with null buffer";
LABEL_335:
                  _os_log_impl(&dword_181A5C000, v203, v204, v205, buf, 0xCu);
                }
              }

              else if (type[0])
              {
                os_log_type_t v210 = (char *)__nw_create_backtrace_string();
                BOOL v211 = (os_log_s *)__nwlog_obj();
                os_log_type_t v212 = __len[1];
                os_log_type_t v213 = os_log_type_enabled(v211, __len[1]);
                if (v210)
                {
                  if (v213)
                  {
                    *(_DWORD *)buf = 136446466;
                    v364 = "nw_http1_connection_write_chunk_header";
                    v365 = 2082;
                    *(void *)v366 = v210;
                    _os_log_impl( &dword_181A5C000,  v211,  v212,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v210);
                  goto LABEL_336;
                }

                if (v213)
                {
                  *(_DWORD *)buf = 136446210;
                  v364 = "nw_http1_connection_write_chunk_header";
                  v203 = v211;
                  os_log_type_t v204 = v212;
                  id v205 = "%{public}s called with null buffer, no backtrace";
                  goto LABEL_335;
                }
              }

              else
              {
                os_log_type_t v220 = (os_log_s *)__nwlog_obj();
                os_log_type_t v221 = __len[1];
                if (os_log_type_enabled(v220, __len[1]))
                {
                  *(_DWORD *)buf = 136446210;
                  v364 = "nw_http1_connection_write_chunk_header";
                  v203 = v220;
                  os_log_type_t v204 = v221;
                  id v205 = "%{public}s called with null buffer, backtrace limit exceeded";
                  goto LABEL_335;
                }
              }
            }

        if (v43) {
          free(v43);
        }
        os_log_type_t v29 = 0LL;
        goto LABEL_48;
      }

      if (!v79)
      {
        in6_addr v44 = (os_log_s *)__nwlog_obj();
        in6_addr v45 = v80;
        if (os_log_type_enabled(v44, v80))
        {
          *(_DWORD *)buf = 136446210;
          size_t v82 = "nw_protocol_http1_finalize_output_frames";
          unsigned __int8 v46 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_142;
        }

        goto LABEL_143;
      }

      unsigned int v54 = (char *)__nw_create_backtrace_string();
      in6_addr v44 = (os_log_s *)__nwlog_obj();
      in6_addr v45 = v80;
      unsigned int v55 = os_log_type_enabled(v44, v80);
      if (!v54)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          size_t v82 = "nw_protocol_http1_finalize_output_frames";
          unsigned __int8 v46 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_142;
        }

        goto LABEL_143;
      }

      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        size_t v82 = "nw_protocol_http1_finalize_output_frames";
        size_t v83 = 2082;
        os_log_type_t v84 = v54;
        id v56 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_102:
        _os_log_impl(&dword_181A5C000, v44, v45, v56, buf, 0x16u);
      }
    }

    free(v54);
    goto LABEL_143;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  size_t v82 = "nw_protocol_http1_finalize_output_frames";
  nw_endpoint_t v34 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v71) = 0;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __int16 v35 = (os_log_s *)__nwlog_obj();
    id v36 = type[0];
    if (os_log_type_enabled(v35, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      size_t v82 = "nw_protocol_http1_finalize_output_frames";
      BOOL v37 = "%{public}s called with null frames";
LABEL_177:
      _os_log_impl(&dword_181A5C000, v35, v36, v37, buf, 0xCu);
      goto LABEL_178;
    }

    goto LABEL_178;
  }

  if ((_BYTE)v71)
  {
    char v51 = (char *)__nw_create_backtrace_string();
    __int16 v35 = (os_log_s *)__nwlog_obj();
    id v36 = type[0];
    unint64_t v52 = os_log_type_enabled(v35, type[0]);
    if (!v51)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        size_t v82 = "nw_protocol_http1_finalize_output_frames";
        BOOL v37 = "%{public}s called with null frames, no backtrace";
        goto LABEL_177;
      }

      goto LABEL_178;
    }

    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      size_t v82 = "nw_protocol_http1_finalize_output_frames";
      size_t v83 = 2082;
      os_log_type_t v84 = v51;
      unsigned int v53 = "%{public}s called with null frames, dumping backtrace:%{public}s";
LABEL_171:
      _os_log_impl(&dword_181A5C000, v35, v36, v53, buf, 0x16u);
      goto LABEL_172;
    }

    goto LABEL_172;
  }

  __int16 v35 = (os_log_s *)__nwlog_obj();
  id v36 = type[0];
  if (os_log_type_enabled(v35, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    size_t v82 = "nw_protocol_http1_finalize_output_frames";
    BOOL v37 = "%{public}s called with null frames, backtrace limit exceeded";
    goto LABEL_177;
  }

            if (v16) {
LABEL_144:
            }
              free(v16);
LABEL_145:
            sqlite3_reset(*(sqlite3_stmt **)(*(void *)(a1 + 32) + 40LL));
            free(v13);
            goto LABEL_146;
          }

          __nwlog_obj();
          id v36 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          unsigned int v53 = "nw_storage_flush_block_invoke";
          os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          BOOL v49 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              unsigned int v53 = "nw_storage_flush_block_invoke";
              int v19 = "%{public}s Failed to bind variable";
              goto LABEL_141;
            }

            goto LABEL_142;
          }

          if (!v49)
          {
            __nwlog_obj();
            os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              unsigned int v53 = "nw_storage_flush_block_invoke";
              int v19 = "%{public}s Failed to bind variable, backtrace limit exceeded";
              goto LABEL_141;
            }

            goto LABEL_142;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v18 = type;
          __int128 v43 = os_log_type_enabled(v17, type);
          if (!backtrace_string)
          {
            if (v43)
            {
              *(_DWORD *)buf = 136446210;
              unsigned int v53 = "nw_storage_flush_block_invoke";
              int v19 = "%{public}s Failed to bind variable, no backtrace";
              goto LABEL_141;
            }

            goto LABEL_142;
          }

          if (!v43) {
            goto LABEL_98;
          }
        }

    goto LABEL_144;
  }

          free(v30);
          goto LABEL_144;
        }

        if (v54)
        {
          *(_DWORD *)buf = 136446210;
          id v91 = "_http_safe_append";
          unsigned int v33 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_141:
          _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0xCu);
          goto LABEL_142;
        }
      }

      goto LABEL_142;
    }

  if (v68) {
    free(v68);
  }
LABEL_102:

  _Block_object_dispose(&v106, 8);
}

          free(v30);
          goto LABEL_144;
        }

        BOOL v49 = v7;
        __int128 v50 = (*(_WORD *)(v7[13] + 108LL) & 8) == 0;

        if (!v50 && setsockopt(v274, 0xFFFF, 4356, &v282, 4u))
        {
          posix_error = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                            + 8));
          char v51 = nw_error_get_error_code(posix_error);
          __nwlog_obj();
          unint64_t v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)address = 136446466;
          *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 1024;
          *(_DWORD *)&address[7] = v51;
          BOOL v30 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v280) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unsigned int v53 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v51;
              _os_log_impl( &dword_181A5C000,  v31,  v53,  "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
            }

            goto LABEL_132;
          }

          if (!(_BYTE)v280)
          {
            __nwlog_obj();
            os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            size_t v72 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v51;
              _os_log_impl( &dword_181A5C000,  v31,  v72,  "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
            }

            goto LABEL_132;
          }

          size_t v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int128 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v66 = type[0];
          size_t v67 = os_log_type_enabled(v43, type[0]);
          if (!v42)
          {
            if (v67)
            {
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v51;
              _os_log_impl( &dword_181A5C000,  v43,  v66,  "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
            }

            goto LABEL_141;
          }

          if (v67)
          {
            *(_DWORD *)address = 136446722;
            *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v51;
            address[9] = 2082;
            *(void *)&address[10] = v42;
            _os_log_impl( &dword_181A5C000,  v43,  v66,  "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
          }

          goto LABEL_71;
        }

        unsigned int v54 = v49;
        unsigned int v55 = (*(_WORD *)(v7[13] + 108LL) & 0x80) == 0;

        if (v55 || !setsockopt(v274, 0xFFFF, 0x10000, &v282, 4u))
        {
LABEL_152:
          os_log_type_t v75 = v54;
          BOOL v272 = *(id *)(v7[13] + 168LL);

          BOOL v76 = v272;
          if (v272) {
            os_log_type_t v77 = *((_DWORD *)v272 + 2);
          }
          else {
            os_log_type_t v77 = 0;
          }
          size_t v78 = v274;
          os_log_type_t v280 = v77;
          nw_txt_record_t v79 = v18->sa_family;
          if (v79 == 30)
          {
            *(_DWORD *)os_log_type_t type = required_address_family == 30;
            if (setsockopt(v274, 41, 27, type, 4u))
            {
              v270 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              os_log_type_t v80 = nw_error_get_error_code(v270);
              __nwlog_obj();
              __int16 v81 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446722;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              if (*(_DWORD *)type) {
                size_t v82 = "on";
              }
              else {
                size_t v82 = "off";
              }
              address[6] = 2082;
              *(void *)&address[7] = v82;
              address[11] = 1024;
              *(_DWORD *)&address[12] = v80;
              size_t v83 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v279 = OS_LOG_TYPE_ERROR;
              BOOL v278 = 0;
              if (__nwlog_fault(v83, &v279, &v278))
              {
                if (v279 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  __int16 v85 = v279;
                  if (os_log_type_enabled(v84, v279))
                  {
                    v86 = "on";
                    if (!*(_DWORD *)type) {
                      v86 = "off";
                    }
                    *(_DWORD *)address = 136446722;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2082;
                    *(void *)&address[7] = v86;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v80;
                    _os_log_impl( &dword_181A5C000,  v84,  v85,  "%{public}s IPV6_V6ONLY %{public}s failed %{darwin.errno}d",  (uint8_t *)address,  0x1Cu);
                  }

    if (!v50) {
      goto LABEL_42;
    }
    goto LABEL_144;
  }

  __nwlog_obj();
  id v73 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(buf[0]) = 136446210;
  *(void *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
  __int128 v43 = (const char *)_os_log_send_and_compose_impl();

  LOBYTE(v93) = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (v93 == 17)
  {
    __nwlog_obj();
    __int16 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v75 = v93;
    if (os_log_type_enabled(v74, (os_log_type_t)v93))
    {
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
      _os_log_impl(&dword_181A5C000, v74, v75, "%{public}s called with null client->channel", (uint8_t *)buf, 0xCu);
    }

    free(backtrace_string);
    goto LABEL_157;
  }

  if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v23 = gconnectionLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      char v24 = *(_DWORD *)(a3 + 368);
      os_log_type_t v25 = *((_DWORD *)a2 + 2);
      *(_DWORD *)buf = 136447234;
      id v87 = "on_frame_send_callback";
      v88 = 2082;
      *(void *)os_log_type_t v89 = a3 + 390;
      *(_WORD *)&v89[8] = 2080;
      *(void *)os_log_type_t v90 = " ";
      *(_WORD *)&v90[8] = 1024;
      *(_DWORD *)id v91 = v24;
      *(_WORD *)&v91[4] = 1024;
      *(_DWORD *)&v91[6] = v25;
      os_log_type_t v26 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
      unint64_t v27 = (os_log_s *)v23;
      __int16 v28 = OS_LOG_TYPE_DEBUG;
      os_log_type_t v29 = 44;
LABEL_103:
      _os_log_impl(&dword_181A5C000, v27, v28, v26, buf, v29);
      return 0LL;
    }
  }

  return result;
}

      if (v49) {
        free(v49);
      }
      LODWORD(v21) = 0;
      goto LABEL_146;
    }

    memcpy(&v6[v8], (const void *)(a1 + v22 + 136), v24);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v24;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v24;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) += v24;
    os_log_type_t v16 = v21 >= v24;
    size_t v21 = (v21 - v24);
    if (v16)
    {
LABEL_95:
      LODWORD(v_Block_object_dispose(va, 8) = v24 + v8;
      in6_addr v44 = *(void *)(a1 + 104);
      if ((!v44 || (*(__int16 *)(v44 + 388) & 0x80000000) == 0) && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v203 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v204 = *(void *)(a1 + 104);
          id v205 = "";
          os_log_type_t v206 = v204 == 0;
          os_log_type_t v207 = *(_DWORD *)(v204 + 368);
          os_log_type_t v208 = (const char *)(v204 + 390);
          os_log_type_t v256 = "send_data_callback_block_invoke";
          v257 = 2082;
          if (v206) {
            os_log_type_t v208 = "";
          }
          *(_DWORD *)buf = 136447234;
          if (!v206) {
            id v205 = " ";
          }
          os_log_type_t v258 = v208;
          os_log_type_t v259 = 2080;
          os_log_type_t v260 = (size_t)v205;
          os_log_type_t v261 = 1024;
          *(_DWORD *)v262 = v207;
          *(_WORD *)&v262[4] = 1024;
          *(_DWORD *)&v262[6] = v24;
          _os_log_impl( &dword_181A5C000,  v203,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> wrote %u bytes of capsule type",  buf,  0x2Cu);
        }
      }

      goto LABEL_99;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446978;
    os_log_type_t v256 = "send_data_callback_block_invoke";
    v257 = 2082;
    os_log_type_t v258 = "bodyCopySize";
    os_log_type_t v259 = 2048;
    os_log_type_t v260 = v24;
    os_log_type_t v261 = 2048;
    *(void *)v262 = v21;
    os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v253 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v25, type, &v253))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v26 = (os_log_s *)__nwlog_obj();
        unint64_t v27 = type[0];
        if (os_log_type_enabled(v26, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v256 = "send_data_callback_block_invoke";
          v257 = 2082;
          os_log_type_t v258 = "bodyCopySize";
          os_log_type_t v259 = 2048;
          os_log_type_t v260 = v24;
          os_log_type_t v261 = 2048;
          *(void *)v262 = v21;
          __int16 v28 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_91:
          _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0x2Au);
        }
      }

      else if (v253)
      {
        os_log_type_t v31 = (char *)__nw_create_backtrace_string();
        os_log_type_t v26 = (os_log_s *)__nwlog_obj();
        unint64_t v27 = type[0];
        BOOL v32 = os_log_type_enabled(v26, type[0]);
        if (v31)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136447234;
            os_log_type_t v256 = "send_data_callback_block_invoke";
            v257 = 2082;
            os_log_type_t v258 = "bodyCopySize";
            os_log_type_t v259 = 2048;
            os_log_type_t v260 = v24;
            os_log_type_t v261 = 2048;
            *(void *)v262 = v21;
            *(_WORD *)&v262[8] = 2082;
            *(void *)&v262[10] = v31;
            _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v31);
          goto LABEL_92;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v256 = "send_data_callback_block_invoke";
          v257 = 2082;
          os_log_type_t v258 = "bodyCopySize";
          os_log_type_t v259 = 2048;
          os_log_type_t v260 = v24;
          os_log_type_t v261 = 2048;
          *(void *)v262 = v21;
          __int16 v28 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_91;
        }
      }

      else
      {
        os_log_type_t v26 = (os_log_s *)__nwlog_obj();
        unint64_t v27 = type[0];
        if (os_log_type_enabled(v26, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v256 = "send_data_callback_block_invoke";
          v257 = 2082;
          os_log_type_t v258 = "bodyCopySize";
          os_log_type_t v259 = 2048;
          os_log_type_t v260 = v24;
          os_log_type_t v261 = 2048;
          *(void *)v262 = v21;
          __int16 v28 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_91;
        }
      }
    }

  if (v48) {
    free(v48);
  }
  return 0LL;
}

    if (!v47) {
      return 0LL;
    }
    goto LABEL_144;
  }

  size_t v38 = *(void *)(a1 + 40);
  if (!v38 || (*(_BYTE *)(v38 + 136) & 1) == 0)
  {
    os_log_type_t v39 = (os_log_s *)__nwlog_obj();
    size_t v40 = os_log_type_enabled(v39, OS_LOG_TYPE_INFO);
    size_t v38 = *(void *)(a1 + 40);
    if (v40)
    {
      BOOL v41 = (const char *)(v38 + 137);
      if (!v38) {
        BOOL v41 = "";
      }
      *(_DWORD *)buf = 136446978;
      size_t v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
      size_t v121 = 2082;
      size_t v122 = v41;
      size_t v42 = " ";
      if (!v38) {
        size_t v42 = "";
      }
      v123 = 2080;
      id v124 = v42;
      os_log_type_t v125 = 2048;
      v126 = v38;
      _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p Frame is no longer valid",  buf,  0x2Au);
      size_t v38 = *(void *)(a1 + 40);
    }
  }

  BOOL result = 0LL;
  *(void *)(v38 + 4_Block_object_dispose(va, 8) = 0LL;
  return result;
}

LABEL_144:
          *((_BYTE *)v160 + 473) |= 0x80u;
          if ((v53 & 0x2000) == 0)
          {
LABEL_100:
            if ((v53 & 0x10000) == 0) {
              goto LABEL_101;
            }
            goto LABEL_146;
          }

    BOOL v18 = (NWConcrete_nw_endpoint_mode_handler *)v93;
    if (!v95) {
      goto LABEL_72;
    }
    __int16 v85 = (char *)v95;
    goto LABEL_71;
  }

      free(v60);
      goto LABEL_145;
    }

    __nwlog_obj();
    unsigned int v59 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v87 = "nw_protocol_definition_allocate_globals";
    __int128 v60 = (char *)_os_log_send_and_compose_impl();

    __int16 v85 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v85 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v62 = v85;
      if (os_log_type_enabled(v61, v85))
      {
        *(_DWORD *)buf = 136446210;
        id v87 = "nw_protocol_definition_allocate_globals";
        _os_log_impl(&dword_181A5C000, v61, v62, "%{public}s called with null definition->common_state", buf, 0xCu);
      }
    }

    else if (type)
    {
      id v66 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v67 = v85;
      size_t v68 = os_log_type_enabled(v61, v85);
      if (v66)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446466;
          id v87 = "nw_protocol_definition_allocate_globals";
          v88 = 2082;
          os_log_type_t v89 = v66;
          _os_log_impl( &dword_181A5C000,  v61,  v67,  "%{public}s called with null definition->common_state, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v66);
        goto LABEL_143;
      }

      if (v68)
      {
        *(_DWORD *)buf = 136446210;
        id v87 = "nw_protocol_definition_allocate_globals";
        _os_log_impl( &dword_181A5C000,  v61,  v67,  "%{public}s called with null definition->common_state, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v71 = v85;
      if (os_log_type_enabled(v61, v85))
      {
        *(_DWORD *)buf = 136446210;
        id v87 = "nw_protocol_definition_allocate_globals";
        _os_log_impl( &dword_181A5C000,  v61,  v71,  "%{public}s called with null definition->common_state, backtrace limit exceeded",  buf,  0xCu);
      }
    }

  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v134 = "__nw_protocol_get_path";
    os_log_type_t v112 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v131 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v113 = (os_log_s *)__nwlog_obj();
      size_t v114 = type;
      if (!os_log_type_enabled(v113, type)) {
        goto LABEL_305;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v134 = "__nw_protocol_get_path";
      size_t v115 = "%{public}s called with null protocol";
    }

    else if (v131)
    {
      v123 = (char *)__nw_create_backtrace_string();
      os_log_type_t v113 = (os_log_s *)__nwlog_obj();
      size_t v114 = type;
      id v124 = os_log_type_enabled(v113, type);
      if (v123)
      {
        if (v124)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v134 = "__nw_protocol_get_path";
          BOOL v135 = 2082;
          BOOL v136 = (nw_protocol_identifier *)v123;
          _os_log_impl( &dword_181A5C000,  v113,  v114,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v123);
        goto LABEL_305;
      }

      if (!v124)
      {
LABEL_305:
        if (v112) {
          free(v112);
        }
        goto LABEL_165;
      }

      *(_DWORD *)buf = 136446210;
      os_log_type_t v134 = "__nw_protocol_get_path";
      size_t v115 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v113 = (os_log_s *)__nwlog_obj();
      size_t v114 = type;
      if (!os_log_type_enabled(v113, type)) {
        goto LABEL_305;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v134 = "__nw_protocol_get_path";
      size_t v115 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v113, v114, v115, buf, 0xCu);
    goto LABEL_305;
  }

  size_t v62 = default_input_handler->handle;
  if (v62 == &nw_protocol_ref_counted_handle)
  {
    nw_endpoint_t v63 = default_input_handler[1].callbacks;
    if (v63) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v63->add_input_handler + 1);
    }
  }

  nw_endpoint_t v64 = default_input_handler->callbacks;
  if (!v64 || (get_path = (uint64_t (*)(nw_protocol *))v64->get_path) == 0LL)
  {
    __nwlog_obj();
    name = default_input_handler->identifier->name;
    if (!name) {
      name = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v134 = "__nw_protocol_get_path";
    BOOL v135 = 2082;
    BOOL v136 = (nw_protocol_identifier *)name;
    char v137 = 2048;
    os_log_type_t v138 = default_input_handler;
    os_log_type_t v107 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v131 = 0;
    if (__nwlog_fault(v107, &type, &v131))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v108 = (os_log_s *)__nwlog_obj();
        os_log_type_t v109 = type;
        if (!os_log_type_enabled(v108, type)) {
          goto LABEL_272;
        }
        size_t v110 = default_input_handler->identifier->name;
        if (!v110) {
          size_t v110 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v134 = "__nw_protocol_get_path";
        BOOL v135 = 2082;
        BOOL v136 = (nw_protocol_identifier *)v110;
        char v137 = 2048;
        os_log_type_t v138 = default_input_handler;
        uint64_t v111 = "%{public}s protocol %{public}s (%p) has invalid get_path callback";
LABEL_271:
        _os_log_impl(&dword_181A5C000, v108, v109, v111, buf, 0x20u);
        goto LABEL_272;
      }

      if (!v131)
      {
        v108 = (os_log_s *)__nwlog_obj();
        os_log_type_t v109 = type;
        if (!os_log_type_enabled(v108, type)) {
          goto LABEL_272;
        }
        os_log_type_t v127 = default_input_handler->identifier->name;
        if (!v127) {
          os_log_type_t v127 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v134 = "__nw_protocol_get_path";
        BOOL v135 = 2082;
        BOOL v136 = (nw_protocol_identifier *)v127;
        char v137 = 2048;
        os_log_type_t v138 = default_input_handler;
        uint64_t v111 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded";
        goto LABEL_271;
      }

      size_t v120 = (char *)__nw_create_backtrace_string();
      v108 = (os_log_s *)__nwlog_obj();
      os_log_type_t v109 = type;
      size_t v121 = os_log_type_enabled(v108, type);
      if (!v120)
      {
        if (!v121) {
          goto LABEL_272;
        }
        os_log_type_t v129 = default_input_handler->identifier->name;
        if (!v129) {
          os_log_type_t v129 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v134 = "__nw_protocol_get_path";
        BOOL v135 = 2082;
        BOOL v136 = (nw_protocol_identifier *)v129;
        char v137 = 2048;
        os_log_type_t v138 = default_input_handler;
        uint64_t v111 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace";
        goto LABEL_271;
      }

      if (v121)
      {
        size_t v122 = default_input_handler->identifier->name;
        if (!v122) {
          size_t v122 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        os_log_type_t v134 = "__nw_protocol_get_path";
        BOOL v135 = 2082;
        BOOL v136 = (nw_protocol_identifier *)v122;
        char v137 = 2048;
        os_log_type_t v138 = default_input_handler;
        BOOL v139 = 2082;
        os_log_type_t v140 = v120;
        _os_log_impl( &dword_181A5C000,  v108,  v109,  "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v120);
    }

    if (v41) {
      free(v41);
    }
    goto LABEL_28;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v65 = "__nw_protocol_remove_input_handler";
  output_handler = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  size_t v62 = 0;
  if (!__nwlog_fault((const char *)output_handler, &type, &v62))
  {
LABEL_151:
    if (!output_handler) {
      goto LABEL_32;
    }
    goto LABEL_62;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    unint64_t v52 = (os_log_s *)__nwlog_obj();
    unsigned int v53 = type;
    if (!os_log_type_enabled(v52, type)) {
      goto LABEL_151;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v65 = "__nw_protocol_remove_input_handler";
    unsigned int v54 = "%{public}s called with null protocol";
LABEL_150:
    _os_log_impl(&dword_181A5C000, v52, v53, v54, buf, 0xCu);
    goto LABEL_151;
  }

  if (!v62)
  {
    unint64_t v52 = (os_log_s *)__nwlog_obj();
    unsigned int v53 = type;
    if (!os_log_type_enabled(v52, type)) {
      goto LABEL_151;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v65 = "__nw_protocol_remove_input_handler";
    unsigned int v54 = "%{public}s called with null protocol, backtrace limit exceeded";
    goto LABEL_150;
  }

  BOOL v58 = (char *)__nw_create_backtrace_string();
  unint64_t v52 = (os_log_s *)__nwlog_obj();
  unsigned int v53 = type;
  unsigned int v59 = os_log_type_enabled(v52, type);
  if (!v58)
  {
    if (!v59) {
      goto LABEL_151;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v65 = "__nw_protocol_remove_input_handler";
    unsigned int v54 = "%{public}s called with null protocol, no backtrace";
    goto LABEL_150;
  }

  if (v59)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v65 = "__nw_protocol_remove_input_handler";
    id v66 = 2082;
    size_t v67 = v58;
    _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v58);
  if (!output_handler) {
    goto LABEL_32;
  }
LABEL_62:
  free((void *)output_handler);
LABEL_32:
  if ((_DWORD)a3)
  {
    default_input_handler = a1[1].default_input_handler;
    if (default_input_handler)
    {
      os_release(default_input_handler);
      a1[1].default_input_handler = 0LL;
    }

    output_handler_context = a1[1].output_handler_context;
    if (output_handler_context)
    {
      os_release(output_handler_context);
      a1[1].output_handler_context = 0LL;
    }

    nw_protocol_destroy((uint64_t)&a1[1].output_handler, 0LL);
  }

  return 1LL;
}

    *char v57 = 0;
    goto LABEL_145;
  }

            *(_OWORD *)unsigned int v53 = v226;
            if ((v4[405] & 0x80000000) == 0)
            {
LABEL_191:
              __nwlog_obj();
              size_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
              {
                os_log_type_t v117 = *(void *)(v7 + 48);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v89 + 407;
                *(_WORD *)&buf[22] = 2080;
                os_log_type_t v208 = " ";
                v209 = 2048;
                os_log_type_t v210 = a2;
                BOOL v211 = 2112;
                *(void *)os_log_type_t v212 = v117;
                _os_log_impl( &dword_181A5C000,  v116,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sPath %lx failed to open socket over %@",  buf,  0x34u);
              }
            }

      if (v53) {
        free(v53);
      }
      BOOL v30 = 0;
      if (v25 != &nw_protocol_ref_counted_handle)
      {
LABEL_40:
        if (v18 != &nw_protocol_ref_counted_handle) {
          goto LABEL_41;
        }
        goto LABEL_148;
      }

    if (v148) {
      free(v148);
    }
LABEL_6:
    uint64_t v10 = nw_content_context_copy_protocol_metadata( (nw_content_context_t)v209,  *((nw_protocol_definition_t *)v210 + 96));
    id v205 = v10;
    if (v10)
    {
      objc_storeStrong(v6 + 29, v10);
      uint64_t v11 = (void *)nw_protocol_metadata_copy_message_options(v205);
      uint64_t v12 = v11;
      if (v11)
      {
        uint64_t v13 = nw_protocol_options_copy(v11);

        nw_parameters_set_protocol_instance(v13, v14, v207);
        unint64_t v15 = v6[22];
        if (v15)
        {
          os_log_type_t v16 = (id *)v15;
          os_log_type_t v17 = v16[19];

          nw_protocol_stack_replace_protocol(v17, *((void **)v210 + 96), v13);
        }
      }

      else
      {
        uint64_t v13 = 0LL;
      }
    }

    BOOL v211 = 0;
    unsigned __int8 v46 = nw_hash_table_add_object(*((void *)v210 + 108), (uint64_t)v6, &v211);
    if (v46 && v211)
    {
      unsigned int v47 = v46;
      if (v207)
      {
        if ((id *)v207 != v6)
        {
          unsigned int v48 = *(void **)(v207 + 24);
          if (v48 && v6 && *v48)
          {
            if ((nw_protocol_add_input_handler(v207, (uint64_t)v6) & 1) != 0)
            {
              BOOL v49 = v6[4];
              if (v49)
              {
                __int128 v50 = v49[3];
                if (v50)
                {
                  char v51 = *(void (**)(void *, id *))(v50 + 24);
                  if (v51)
                  {
                    v51(v49, v6);
LABEL_42:
                    if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                      }
                      unint64_t v52 = (os_log_s *)(id)gconnectionLogObj;
                      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
                      {
                        unsigned int v53 = nw_endpoint_handler_get_id_string(v5);
                        unsigned int v54 = nw_endpoint_handler_dry_run_string(v5);
                        unsigned int v55 = nw_endpoint_handler_copy_endpoint(v5);
                        id v56 = nw_endpoint_get_logging_description(v55);
                        char v57 = nw_endpoint_handler_state_string(v5);
                        BOOL v58 = nw_endpoint_handler_mode_string(v5);
                        unsigned int v59 = nw_endpoint_handler_copy_current_path(v5);
                        __int128 v60 = *(char **)(v207 + 16);
                        *(_DWORD *)buf = 136448258;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
                        v215 = 2082;
                        v216 = (uint64_t)v53;
                        v217 = 2082;
                        v218 = (uint64_t)v54;
                        v219 = 2082;
                        os_log_type_t v220 = v56;
                        os_log_type_t v221 = 2082;
                        os_log_type_t v222 = v57;
                        v223 = 2082;
                        size_t v224 = v58;
                        unint64_t v225 = 2114;
                        id v226 = v59;
                        int v227 = 2048;
                        v228 = (char *)v6;
                        v229 = 2080;
                        os_log_type_t v230 = v60;
                        _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Added per-mes sage protocol %p to %s",  buf,  0x5Cu);
                      }
                    }

                    goto LABEL_122;
                  }
                }
              }

              __nwlog_obj();
              v163 = (void *)objc_claimAutoreleasedReturnValue();
              __int16 v164 = v6[4];
              unsigned int v165 = "invalid";
              if (v164)
              {
                uint64_t v166 = (const char *)*((void *)v164 + 2);
                if (v166) {
                  unsigned int v165 = v166;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
              v215 = 2082;
              v216 = (uint64_t)v165;
              unint64_t v167 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v212 = 0;
              if (__nwlog_fault(v167, type, &v212))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  id v168 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v169 = type[0];
                  if (os_log_type_enabled(v168, type[0]))
                  {
                    v170 = v6[4];
                    os_log_type_t v171 = "invalid";
                    if (v170)
                    {
                      id v172 = (const char *)*((void *)v170 + 2);
                      if (v172) {
                        os_log_type_t v171 = v172;
                      }
                    }

                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
                    v215 = 2082;
                    v216 = (uint64_t)v171;
                    _os_log_impl( &dword_181A5C000,  v168,  v169,  "%{public}s protocol %{public}s has invalid connect callback",  buf,  0x16u);
                  }
                }

                else
                {
                  if (v212)
                  {
                    uint64_t v173 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v174 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    v175 = type[0];
                    v176 = os_log_type_enabled(v174, type[0]);
                    if (v173)
                    {
                      if (v176)
                      {
                        unsigned int v177 = v6[4];
                        v178 = "invalid";
                        if (v177)
                        {
                          unint64_t v179 = (const char *)*((void *)v177 + 2);
                          if (v179) {
                            v178 = v179;
                          }
                        }

                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
                        v215 = 2082;
                        v216 = (uint64_t)v178;
                        v217 = 2082;
                        v218 = (uint64_t)v173;
                        _os_log_impl( &dword_181A5C000,  v174,  v175,  "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x20u);
                      }

                      free(v173);
                    }

                    else
                    {
                      if (v176)
                      {
                        v185 = v6[4];
                        os_log_type_t v186 = "invalid";
                        if (v185)
                        {
                          BOOL v187 = (const char *)*((void *)v185 + 2);
                          if (v187) {
                            os_log_type_t v186 = v187;
                          }
                        }

                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
                        v215 = 2082;
                        v216 = (uint64_t)v186;
                        _os_log_impl( &dword_181A5C000,  v174,  v175,  "%{public}s protocol %{public}s has invalid connect callback, no backtrace",  buf,  0x16u);
                      }
                    }

                    goto LABEL_190;
                  }

                  __nwlog_obj();
                  id v168 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v181 = type[0];
                  if (os_log_type_enabled(v168, type[0]))
                  {
                    v182 = v6[4];
                    os_log_type_t v183 = "invalid";
                    if (v182)
                    {
                      v184 = (const char *)*((void *)v182 + 2);
                      if (v184) {
                        os_log_type_t v183 = v184;
                      }
                    }

                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
                    v215 = 2082;
                    v216 = (uint64_t)v183;
                    _os_log_impl( &dword_181A5C000,  v168,  v181,  "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded",  buf,  0x16u);
                  }
                }
              }

      goto LABEL_145;
    }

    if (!(_BYTE)v112)
    {
      __nwlog_obj();
      BOOL v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v92 = buf[0];
      if (os_log_type_enabled(v71, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)unsigned int v118 = 136446210;
        *(void *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl( &dword_181A5C000,  v71,  v92,  "%{public}s called with null handler, backtrace limit exceeded",  v118,  0xCu);
      }

      goto LABEL_144;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v78 = buf[0];
    nw_txt_record_t v79 = os_log_type_enabled(v71, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v79)
      {
        *(_DWORD *)unsigned int v118 = 136446210;
        *(void *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_181A5C000, v71, v78, "%{public}s called with null handler, no backtrace", v118, 0xCu);
      }

      goto LABEL_144;
    }

    if (v79)
    {
      *(_DWORD *)unsigned int v118 = 136446466;
      *(void *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
      *(_WORD *)&v118[12] = 2082;
      *(void *)&v118[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v71,  v78,  "%{public}s called with null handler, dumping backtrace:%{public}s",  v118,  0x16u);
    }

  os_release(v34);
LABEL_145:
  size_t v67 = nw_parameters_copy_effective_proxy_config(*((void **)handle + 40));
  if (v67)
  {
    size_t v68 = (unsigned __int16 *)v67;
    size_t v69 = v68[84];

    if (!v69)
    {
LABEL_160:
      os_release(v68);
      goto LABEL_161;
    }

    *((_WORD *)handle + 262) = v69;
    os_log_type_t v70 = (void *)*((void *)handle + 41);
    if (v70)
    {
      else {
        BOOL v71 = 0LL;
      }
      globals_for_uint64_t protocol = (unsigned __int16 *)nw_context_get_globals_for_protocol(v70, v71);
      if (globals_for_protocol)
      {
        if (*globals_for_protocol != v69)
        {
          *globals_for_uint64_t protocol = v69;
          globals_for_protocol[1] = 0;
          if ((v20[2] & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
            }
            id v73 = (os_log_s *)gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = handle + 531;
              *(_WORD *)&_BYTE buf[12] = 2080;
              *(void *)&buf[14] = " ";
              *(_WORD *)&buf[22] = 1024;
              LODWORD(v124) = v69;
              _os_log_impl( &dword_181A5C000,  v73,  OS_LOG_TYPE_INFO,  "%{public}s%sSaving config epoch value: %u",  buf,  0x1Cu);
            }
          }
        }

        goto LABEL_160;
      }

      size_t v106 = v20;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_set_config_epoch_value";
      os_log_type_t v92 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v111) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v93 = (os_log_s *)__nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v93, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_set_config_epoch_value";
          size_t v95 = "%{public}s called with null globals";
          goto LABEL_243;
        }

        goto LABEL_244;
      }

      if (!(_BYTE)v111)
      {
        id v93 = (os_log_s *)__nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v93, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_set_config_epoch_value";
          size_t v95 = "%{public}s called with null globals, backtrace limit exceeded";
          goto LABEL_243;
        }

        goto LABEL_244;
      }

      size_t v100 = (char *)__nw_create_backtrace_string();
      id v93 = (os_log_s *)__nwlog_obj();
      os_log_type_t v94 = type[0];
      BOOL v103 = os_log_type_enabled(v93, type[0]);
      if (!v100)
      {
        if (v103)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_set_config_epoch_value";
          size_t v95 = "%{public}s called with null globals, no backtrace";
          goto LABEL_243;
        }

        goto LABEL_244;
      }

      if (v103)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_masque_set_config_epoch_value";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v100;
        os_log_type_t v102 = "%{public}s called with null globals, dumping backtrace:%{public}s";
        goto LABEL_228;
      }
    }

    else
    {
      size_t v106 = v20;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_set_config_epoch_value";
      os_log_type_t v92 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v111) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v93 = (os_log_s *)__nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v93, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_set_config_epoch_value";
          size_t v95 = "%{public}s called with null masque->context";
LABEL_243:
          _os_log_impl(&dword_181A5C000, v93, v94, v95, buf, 0xCu);
        }

              if (v49) {
                free(v49);
              }
              metadata_for_request = 0LL;
LABEL_59:
              object = metadata_for_request;
              v76 |= 1u;
              nw_endpoint_t v34 = *(void *)(v71 + 40);
              if (v34)
              {
                __int16 v35 = *(void **)(v3 + 656);
                id v36 = *(void **)(v3 + 624);
                *(void *)nw_endpoint_t v64 = MEMORY[0x1895F87A8];
                BOOL v65 = 0x40000000LL;
                id v66 = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_16;
                size_t v67 = &unk_189BBDE88;
                size_t v68 = type;
                size_t v69 = v3;
                *(void *)os_log_type_t v77 = MEMORY[0x1895F87A8];
                *(void *)&v77[8] = 0x40000000LL;
                *(void *)&v77[16] = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_3;
                size_t v78 = &unk_189BBDED8;
                os_log_type_t v80 = type;
                __int16 v81 = v3;
                nw_txt_record_t v79 = buf;
                v63[0] = MEMORY[0x1895F87A8];
                v63[1] = 0x40000000LL;
                v63[2] = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_5;
                v63[3] = &__block_descriptor_tmp_25_41719;
                v63[4] = v3;
                nw_protocol_plugin_retry_reissue_output_frames( v3 + 360,  v3,  v35,  v36,  0LL,  2,  1,  v64,  v77,  (uint64_t)v63);
                goto LABEL_61;
              }

              __nwlog_obj();
              *(_DWORD *)os_log_type_t v77 = 136446210;
              *(void *)&v77[4] = "nw_http_retry_reissue";
              unsigned int v53 = (char *)_os_log_send_and_compose_impl();
              v64[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v63[0]) = 0;
              if (__nwlog_fault(v53, v64, v63))
              {
                if (v64[0] == OS_LOG_TYPE_FAULT)
                {
                  unsigned int v54 = (os_log_s *)__nwlog_obj();
                  unsigned int v55 = v64[0];
                  if (!os_log_type_enabled(v54, v64[0])) {
                    goto LABEL_150;
                  }
                  *(_DWORD *)os_log_type_t v77 = 136446210;
                  *(void *)&v77[4] = "nw_http_retry_reissue";
                  id v56 = "%{public}s called with null request_metadata";
                  goto LABEL_149;
                }

                if (!LOBYTE(v63[0]))
                {
                  unsigned int v54 = (os_log_s *)__nwlog_obj();
                  unsigned int v55 = v64[0];
                  if (!os_log_type_enabled(v54, v64[0])) {
                    goto LABEL_150;
                  }
                  *(_DWORD *)os_log_type_t v77 = 136446210;
                  *(void *)&v77[4] = "nw_http_retry_reissue";
                  id v56 = "%{public}s called with null request_metadata, backtrace limit exceeded";
                  goto LABEL_149;
                }

                __int16 v61 = (char *)__nw_create_backtrace_string();
                unsigned int v54 = (os_log_s *)__nwlog_obj();
                unsigned int v55 = v64[0];
                size_t v62 = os_log_type_enabled(v54, v64[0]);
                if (v61)
                {
                  if (v62)
                  {
                    *(_DWORD *)os_log_type_t v77 = 136446466;
                    *(void *)&v77[4] = "nw_http_retry_reissue";
                    *(_WORD *)&v77[12] = 2082;
                    *(void *)&v77[14] = v61;
                    _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s called with null request_metadata, dumping backtrace:%{public}s",  v77,  0x16u);
                  }

                  free(v61);
                  goto LABEL_150;
                }

                if (v62)
                {
                  *(_DWORD *)os_log_type_t v77 = 136446210;
                  *(void *)&v77[4] = "nw_http_retry_reissue";
                  id v56 = "%{public}s called with null request_metadata, no backtrace";
LABEL_149:
                  _os_log_impl(&dword_181A5C000, v54, v55, v56, v77, 0xCu);
                }
              }

      if (!v84)
      {
LABEL_146:

        os_log_type_t v105 = 0LL;
        __int16 v35 = 104LL;
        goto LABEL_44;
      }

                        if (a2 == a3) {
                          return 217LL;
                        }
                        if (*a2 != 32)
                        {
                          BOOL result = 0LL;
                          *(_DWORD *)(a1 + 24) = 9;
                          os_log_type_t v8 = "Expected space after version";
                          goto LABEL_2272;
                        }

                        ++a2;
                        *(_WORD *)(a1 + 84) = 0;
LABEL_147:
                        if (a2 == a3) {
                          return 216LL;
                        }
                        unsigned int v55 = *a2 - 48;
                        if (v55 >= 0xA
                          || (++a2, id v56 = *(unsigned __int16 *)(a1 + 84), v56 >> 1 > 0xCCC)
                          || (char v57 = 10 * v56, *(_WORD *)(a1 + 84) = v57, (v55 ^ 0xFFFFu) < v57))
                        {
LABEL_191:
                          BOOL result = 0LL;
                          *(_DWORD *)(a1 + 24) = 13;
                          os_log_type_t v8 = "Invalid status code";
                          goto LABEL_2272;
                        }

                        *(_WORD *)(a1 + 84) = v57 + v55;
LABEL_152:
                        if (a2 == a3) {
                          return 215LL;
                        }
                        BOOL v58 = *a2 - 48;
                        if (v58 >= 0xA) {
                          goto LABEL_162;
                        }
                        ++a2;
                        unsigned int v59 = *(unsigned __int16 *)(a1 + 84);
                        if (v59 >> 1 > 0xCCC) {
                          goto LABEL_191;
                        }
                        __int128 v60 = 10 * v59;
                        *(_WORD *)(a1 + 84) = v60;
                        *(_WORD *)(a1 + 84) = v60 + v58;
LABEL_157:
                        if (a2 == a3) {
                          return 214LL;
                        }
                        __int16 v61 = *a2 - 48;
                        if (v61 >= 0xA)
                        {
LABEL_162:
                          if ((*(_WORD *)(a1 + 78) & 0x2000) == 0) {
                            goto LABEL_191;
                          }
                        }

                        else
                        {
                          ++a2;
                          size_t v62 = *(unsigned __int16 *)(a1 + 84);
                          if (v62 >> 1 > 0xCCC) {
                            goto LABEL_191;
                          }
                          nw_endpoint_t v63 = 10 * v62;
                          *(_WORD *)(a1 + 84) = v63;
                          *(_WORD *)(a1 + 84) = v63 + v61;
                        }

                  if (v84) {
                    free(v84);
                  }
                  nw_service_connector_handle_unsolicited_requests(v7, v5);
                  nw_service_connector_cancel_request_inner( v7,  *((void **)v44 + 1),  (uint64_t)v44 + 16,  *((void **)v44 + 61),  1);
                  goto LABEL_113;
                }
              }

              else
              {
                __nwlog_obj();
                v98 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)key = 136446466;
                  *(void *)&key[4] = "nwsc_process_incoming_request";
                  *(_WORD *)&key[12] = 2112;
                  *(void *)&key[14] = *(void *)buf;
                  _os_log_impl( &dword_181A5C000,  v98,  OS_LOG_TYPE_ERROR,  "%{public}s SecKeyCreateWithData failed with error %@",  (uint8_t *)key,  0x16u);
                }

                if (*(void *)buf)
                {
                  CFRelease(*(CFTypeRef *)buf);
                  *(void *)buf = 0LL;
                }
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v99 = (os_log_s *)(id)gLogObj;
              if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)key = 136446722;
                *(void *)&key[4] = "nwsc_process_incoming_request";
                *(_WORD *)&key[12] = 2114;
                *(void *)&key[14] = v7;
                *(_WORD *)&key[22] = 2114;
                *(void *)&key[24] = *(void *)buf;
                _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ signature verification error: %{public}@",  (uint8_t *)key,  0x20u);
              }

              if (*(void *)buf)
              {
                CFRelease(*(CFTypeRef *)buf);
                *(void *)buf = 0LL;
              }

              if (v28 >= v5->sequenceNumber)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                size_t v106 = (os_log_s *)(id)gLogObj;
                if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
                {
                  os_log_type_t v107 = v5->signature[0];
                  v108 = v5->signature[1];
                  os_log_type_t v109 = v5->signature[2];
                  size_t v110 = v5->signature[3];
                  *(_DWORD *)key = 136449026;
                  *(void *)&key[4] = "nwsc_process_incoming_request";
                  *(_WORD *)&key[12] = 2114;
                  *(void *)&key[14] = v7;
                  *(_WORD *)&key[22] = 2114;
                  *(void *)&key[24] = v5;
                  *(_WORD *)&key[32] = 1024;
                  *(_DWORD *)&key[34] = v107;
                  *(_WORD *)&key[38] = 1024;
                  *(_DWORD *)&key[40] = v108;
                  *(_WORD *)&key[44] = 1024;
                  *(_DWORD *)&key[46] = v109;
                  *(_WORD *)&key[50] = 1024;
                  *(_DWORD *)&key[52] = v110;
                  *(_WORD *)&key[56] = 1024;
                  *(_DWORD *)&key[58] = v145;
                  *(_WORD *)&key[62] = 1024;
                  LODWORD(v152) = BYTE1(v145);
                  WORD2(v152) = 1024;
                  *(_DWORD *)((char *)&v152 + 6) = BYTE2(v145);
                  WORD5(v152) = 1024;
                  HIDWORD(v152) = BYTE3(v145);
                  LOWORD(v153) = 2048;
                  *(void *)((char *)&v153 + 2) = v28;
                  _os_log_impl( &dword_181A5C000,  v106,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ cancelling due to bad signature on incoming request %{public}@ sig %02x%02x%02 x%02x remotePubKey %02x%02x%02x%02x remotePubKeySeqNo %llu",  (uint8_t *)key,  0x5Au);
                }

                *((_BYTE *)v5 + 616) |= 0x40u;
                nw_service_connector_reject_incoming_request(v7, v5, 0);
                goto LABEL_169;
              }

              if ((*((_BYTE *)v5 + 616) & 0x20) == 0)
              {
                *((_BYTE *)v5 + 616) |= 0x20u;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                size_t v100 = (os_log_s *)(id)gLogObj;
                if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                {
                  id v101 = v5->signature[0];
                  os_log_type_t v102 = v5->signature[1];
                  BOOL v103 = v5->signature[2];
                  os_log_type_t v104 = v5->signature[3];
                  *(_DWORD *)key = 136448770;
                  *(void *)&key[4] = "nwsc_process_incoming_request";
                  *(_WORD *)&key[12] = 2114;
                  *(void *)&key[14] = v7;
                  *(_WORD *)&key[22] = 2114;
                  *(void *)&key[24] = v5;
                  *(_WORD *)&key[32] = 1024;
                  *(_DWORD *)&key[34] = v101;
                  *(_WORD *)&key[38] = 1024;
                  *(_DWORD *)&key[40] = v102;
                  *(_WORD *)&key[44] = 1024;
                  *(_DWORD *)&key[46] = v103;
                  *(_WORD *)&key[50] = 1024;
                  *(_DWORD *)&key[52] = v104;
                  *(_WORD *)&key[56] = 1024;
                  *(_DWORD *)&key[58] = v145;
                  *(_WORD *)&key[62] = 1024;
                  LODWORD(v152) = BYTE1(v145);
                  WORD2(v152) = 1024;
                  *(_DWORD *)((char *)&v152 + 6) = BYTE2(v145);
                  WORD5(v152) = 1024;
                  HIDWORD(v152) = BYTE3(v145);
                  _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ signature did not verify on incoming request %{public}@ sig %02x%02x%02x%02x r emotePubKey %02x%02x%02x%02x requesting newer remotePubKey",  (uint8_t *)key,  0x50u);
                }

                if ((*((_BYTE *)v7 + 152) & 2) != 0)
                {
                  __nwlog_obj();
                  BOOL v130 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)key = 136446722;
                    *(void *)&key[4] = "nwsc_process_incoming_request";
                    *(_WORD *)&key[12] = 2114;
                    *(void *)&key[14] = v7;
                    *(_WORD *)&key[22] = 2114;
                    *(void *)&key[24] = v5;
                    _os_log_impl( &dword_181A5C000,  v130,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ failing incoming connection for testing: %{public}@",  (uint8_t *)key,  0x20u);
                  }

                  nw_connection_cancel_current_endpoint((nw_connection_t)v5->connection);
                }

                os_log_type_t v105 = (id)nwsc_request_create_and_start_connection_inner( v7,  0LL,  v5->endpoint);
                nw_array_append((uint64_t)v7->pendingUnverifiedIncomingRequests, v5);
                goto LABEL_169;
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              in6_addr v44 = (id)gLogObj;
              if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v111 = v5->signature[0];
                os_log_type_t v112 = v5->signature[1];
                os_log_type_t v113 = v5->signature[2];
                size_t v114 = v5->signature[3];
                *(_DWORD *)key = 136448770;
                *(void *)&key[4] = "nwsc_process_incoming_request";
                *(_WORD *)&key[12] = 2114;
                *(void *)&key[14] = v7;
                *(_WORD *)&key[22] = 2114;
                *(void *)&key[24] = v5;
                *(_WORD *)&key[32] = 1024;
                *(_DWORD *)&key[34] = v111;
                *(_WORD *)&key[38] = 1024;
                *(_DWORD *)&key[40] = v112;
                *(_WORD *)&key[44] = 1024;
                *(_DWORD *)&key[46] = v113;
                *(_WORD *)&key[50] = 1024;
                *(_DWORD *)&key[52] = v114;
                *(_WORD *)&key[56] = 1024;
                *(_DWORD *)&key[58] = v145;
                *(_WORD *)&key[62] = 1024;
                LODWORD(v152) = BYTE1(v145);
                WORD2(v152) = 1024;
                *(_DWORD *)((char *)&v152 + 6) = BYTE2(v145);
                WORD5(v152) = 1024;
                HIDWORD(v152) = BYTE3(v145);
                _os_log_impl( &dword_181A5C000,  (os_log_t)v44,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ signature did not verify on incoming request %{public}@ sig %02x%02x%02x%02x rem otePubKey %02x%02x%02x%02x not requesting newer remotePubKey",  (uint8_t *)key,  0x50u);
              }
                    }
                  }

                  if (!v68) {
                    goto LABEL_159;
                  }
                  goto LABEL_158;
                }

        goto LABEL_214;
      }

      if (!v162)
      {
        __nwlog_obj();
        os_log_type_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v148 = v163;
        if (os_log_type_enabled(v112, v163))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_path";
          _os_log_impl( &dword_181A5C000,  v112,  v148,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_144;
      }

      BOOL v130 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v131 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v132 = v163;
      os_log_type_t v133 = os_log_type_enabled(v131, v163);
      if (v130)
      {
        if (v133)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_path";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v130;
          _os_log_impl( &dword_181A5C000,  v131,  v132,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v130);
      }

      else
      {
        if (v133)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_path";
          _os_log_impl( &dword_181A5C000,  v131,  v132,  "%{public}s metadata must be http_connection, no backtrace",  buf,  0xCu);
        }
      }

        free(v50);
        goto LABEL_42;
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v49 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
      __int128 v50 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v92 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        unint64_t v52 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
          _os_log_impl(&dword_181A5C000, v51, v52, "%{public}s called with null agent", (uint8_t *)buf, 0xCu);
        }

        goto LABEL_142;
      }

      if (v92 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        char v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        nw_txt_record_t v79 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
          _os_log_impl( &dword_181A5C000,  v51,  v79,  "%{public}s called with null agent, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
        }

        goto LABEL_142;
      }

      __int16 v61 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v62 = type[0];
      nw_endpoint_t v63 = os_log_type_enabled(v51, type[0]);
      if (!v61)
      {
        if (v63)
        {
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
          _os_log_impl( &dword_181A5C000,  v51,  v62,  "%{public}s called with null agent, no backtrace",  (uint8_t *)buf,  0xCu);
        }

        goto LABEL_142;
      }

      if (v63)
      {
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v61;
        _os_log_impl( &dword_181A5C000,  v51,  v62,  "%{public}s called with null agent, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
      }

      free(v61);
    }

    goto LABEL_145;
  }

  if (a2)
  {
    if (a1 >= 0x7FFFFFFF)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v4 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_interface_create_with_index_and_name";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = a1;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 0x7FFFFFFF;
        *(_WORD *)&_BYTE buf[24] = 2082;
        *(void *)&buf[26] = a2;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s refusing to create an interface with index %u too high (>=%u) (name=%{public}s)",  buf,  0x22u);
      }

      return 0LL;
    }

    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_interface);
    uint64_t v7 = v6;
    if (v6)
    {
      v6->index = a1;
      os_log_type_t v8 = *a2;
      v6->name[0] = v8;
      if (v8)
      {
        uint64_t v9 = a2[1];
        v6->name[1] = v9;
        if (v9)
        {
          uint64_t v10 = a2[2];
          v6->name[2] = v10;
          if (v10)
          {
            uint64_t v11 = a2[3];
            v6->name[3] = v11;
            if (v11)
            {
              uint64_t v12 = a2[4];
              v6->name[4] = v12;
              if (v12)
              {
                uint64_t v13 = a2[5];
                v6->name[5] = v13;
                if (v13)
                {
                  uint64_t v14 = a2[6];
                  v6->name[6] = v14;
                  if (v14)
                  {
                    unint64_t v15 = a2[7];
                    v6->name[7] = v15;
                    if (v15)
                    {
                      os_log_type_t v16 = a2[8];
                      v6->name[8] = v16;
                      if (v16)
                      {
                        os_log_type_t v17 = a2[9];
                        v6->name[9] = v17;
                        if (v17)
                        {
                          BOOL v18 = a2[10];
                          v6->name[10] = v18;
                          if (v18)
                          {
                            int v19 = a2[11];
                            v6->name[11] = v19;
                            if (v19)
                            {
                              unint64_t v20 = a2[12];
                              v6->name[12] = v20;
                              if (v20)
                              {
                                size_t v21 = a2[13];
                                v6->name[13] = v21;
                                if (v21)
                                {
                                  uint64_t v22 = a2[14];
                                  v6->name[14] = v22;
                                  if (v22)
                                  {
                                    id v23 = a2[15];
                                    v6->name[15] = v23;
                                    if (v23)
                                    {
                                      char v24 = a2[16];
                                      v6->name[16] = v24;
                                      if (v24)
                                      {
                                        os_log_type_t v25 = a2[17];
                                        v6->name[17] = v25;
                                        if (v25)
                                        {
                                          os_log_type_t v26 = a2[18];
                                          v6->name[18] = v26;
                                          if (v26)
                                          {
                                            unint64_t v27 = a2[19];
                                            v6->name[19] = v27;
                                            if (v27)
                                            {
                                              __int16 v28 = a2[20];
                                              v6->name[20] = v28;
                                              if (v28)
                                              {
                                                os_log_type_t v29 = a2[21];
                                                v6->name[21] = v29;
                                                if (v29)
                                                {
                                                  BOOL v30 = a2[22];
                                                  v6->name[22] = v30;
                                                  if (v30)
                                                  {
                                                    os_log_type_t v31 = a2[23];
                                                    v6->name[23] = v31;
                                                    if (v31) {
                                                      v6->name[24] = 0;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      BOOL v32 = socket(2, 2, 0);
      if ((v32 & 0x80000000) == 0)
      {
        unsigned int v33 = v7;
        nw_endpoint_t v34 = v33;
        memset(buf, 0, 32);
        buf[0] = v7->name[0];
        if (buf[0])
        {
          buf[1] = v33->name[1];
          if (buf[1])
          {
            buf[2] = v33->name[2];
            if (buf[2])
            {
              buf[3] = v33->name[3];
              if (buf[3])
              {
                uint8_t buf[4] = v33->name[4];
                if (buf[4])
                {
                  buf[5] = v33->name[5];
                  if (buf[5])
                  {
                    buf[6] = v33->name[6];
                    if (buf[6])
                    {
                      buf[7] = v33->name[7];
                      if (buf[7])
                      {
                        buf[8] = v33->name[8];
                        if (buf[8])
                        {
                          buf[9] = v33->name[9];
                          if (buf[9])
                          {
                            buf[10] = v33->name[10];
                            if (buf[10])
                            {
                              buf[11] = v33->name[11];
                              if (buf[11])
                              {
                                _BYTE buf[12] = v33->name[12];
                                if (buf[12])
                                {
                                  buf[13] = v33->name[13];
                                  if (buf[13]) {
                                    buf[14] = v33->name[14];
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        if (ioctl(v32, 0xC0206933uLL, buf) != -1) {
          v34->details.mtu = *(_DWORD *)&buf[16];
        }
        if (ioctl(v32, 0xC02069A0uLL, buf) != -1) {
          *(_WORD *)((char *)&v34->details + 73) = *(_WORD *)((char *)&v34->details + 73) & 0xFFFE | (*(_DWORD *)&buf[16] != 0);
        }
        if (ioctl(v32, 0xC02069CCuLL, buf) != -1) {
          *(_WORD *)((char *)&v34->details + 73) = *(_WORD *)((char *)&v34->details + 73) & 0xFFFD | (2 * (*(_DWORD *)&buf[16] != 0));
        }
        if (ioctl(v32, 0xC02069DAuLL, buf) != -1) {
          *(_WORD *)((char *)&v34->details + 73) = *(_WORD *)((char *)&v34->details + 73) & 0xFFFB | (4 * (*(_DWORD *)&buf[16] != 0));
        }
        if (ioctl(v32, 0xC020699DuLL, buf) != -1) {
          v34->delegate_index = *(_DWORD *)&buf[16];
        }
        if (ioctl(v32, 0xC02069ADuLL, buf) != -1)
        {
          __int16 v35 = *(_DWORD *)&buf[16];
          id v36 = 4;
          BOOL v37 = 2;
          switch(*(_DWORD *)&buf[16])
          {
            case 1:
            case 6:
              goto LABEL_95;
            case 2:
              BOOL v37 = 3;
              goto LABEL_99;
            case 3:
            case 4:
              v34->os_log_type_t type = 1;
              size_t v38 = v35 - 3;
              goto LABEL_96;
            case 5:
LABEL_99:
              unsigned int v55 = 0;
              v34->os_log_type_t type = v37;
              break;
            default:
              id v36 = 0;
LABEL_95:
              v34->os_log_type_t type = v36;
              size_t v38 = v35 - 3;
              if (v38 > 4) {
                unsigned int v55 = 0;
              }
              else {
LABEL_96:
              }
                unsigned int v55 = dword_18272D758[v38];
              break;
          }

          v34->subos_log_type_t type = v55;
        }

        if (ioctl(v32, 0xC0206911uLL, buf) != -1) {
          *(_WORD *)((char *)&v34->details + 73) = *(_WORD *)((char *)&v34->details + 73) & 0xFDFF | (*(_WORD *)&buf[16] >> 6) & 0x200;
        }

        close(v32);
        id v5 = v34;
        goto LABEL_110;
      }

      __int128 v43 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      in6_addr v44 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interface_create_with_index_and_name";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v43;
      size_t v40 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      size_t v72 = 0;
      if (!__nwlog_fault((const char *)v40, &type, &v72))
      {
LABEL_107:
        if (!v40)
        {
LABEL_109:
          id v5 = 0LL;
LABEL_110:

          return v5;
        }

LABEL_145:
          *((_BYTE *)v160 + 474) |= 1u;
          if ((v53 & 0x10000) == 0)
          {
LABEL_101:
            if ((v53 & 0x20000) == 0) {
              goto LABEL_102;
            }
            goto LABEL_147;
          }

        if (!v2)
        {
          __nwlog_obj();
          unsigned int v119 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v119, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          os_log_type_t v140 = "_strict_strlcat";
          size_t v120 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v120);
          if (result) {
            goto LABEL_268;
          }
          free(v120);
        }

        id v66 = 0LL;
        size_t v67 = 107LL;
        while (1)
        {
          size_t v68 = &v2[v66];
          if (!v2[v66]) {
            break;
          }
          ++v66;
          if (!--v67) {
            goto LABEL_157;
          }
        }

        if (v67 < 2)
        {
LABEL_156:
          os_log_s *v68 = 0;
        }

        else
        {
          size_t v69 = v67 - 2;
          os_log_type_t v70 = 106 - v66;
          BOOL v71 = 105 - v66;
          if (v71 >= 0x11) {
            BOOL v71 = 17LL;
          }
          memcpy(v68, "interface_removed", v71 + 1);
          size_t v68 = v2 + 106;
          while (v69 <= 0x10)
          {
            if (!--v70) {
              goto LABEL_156;
            }
          }
        }

            free((void *)output_handler);
            goto LABEL_27;
          }
        }

        __nwlog_obj();
        os_log_type_t v92 = a1->identifier;
        *(_DWORD *)buf = 136446722;
        os_log_type_t v129 = "__nw_protocol_disconnected";
        if (!v92) {
          os_log_type_t v92 = (nw_protocol_identifier *)"invalid";
        }
        BOOL v130 = 2082;
        os_log_type_t v131 = (nw_protocol *)v92;
        BOOL v132 = 2048;
        os_log_type_t v133 = a1;
        id v93 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v126 = 0;
        if (__nwlog_fault(v93, &type, &v126))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v94 = (os_log_s *)__nwlog_obj();
            size_t v95 = type;
            if (!os_log_type_enabled(v94, type)) {
              goto LABEL_306;
            }
            id v96 = a1->identifier;
            if (!v96) {
              id v96 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v129 = "__nw_protocol_disconnected";
            BOOL v130 = 2082;
            os_log_type_t v131 = (nw_protocol *)v96;
            BOOL v132 = 2048;
            os_log_type_t v133 = a1;
            os_log_type_t v97 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
            goto LABEL_305;
          }

          size_t v110 = v12;
          if (!v126)
          {
            os_log_type_t v94 = (os_log_s *)__nwlog_obj();
            size_t v95 = type;
            if (!os_log_type_enabled(v94, type)) {
              goto LABEL_306;
            }
            v123 = a1->identifier;
            if (!v123) {
              v123 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v129 = "__nw_protocol_disconnected";
            BOOL v130 = 2082;
            os_log_type_t v131 = (nw_protocol *)v123;
            BOOL v132 = 2048;
            os_log_type_t v133 = a1;
            os_log_type_t v97 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
            goto LABEL_305;
          }

          uint64_t v111 = (char *)__nw_create_backtrace_string();
          os_log_type_t v94 = (os_log_s *)__nwlog_obj();
          size_t v95 = type;
          os_log_type_t v112 = os_log_type_enabled(v94, type);
          if (v111)
          {
            if (v112)
            {
              os_log_type_t v113 = a1->identifier;
              if (!v113) {
                os_log_type_t v113 = (nw_protocol_identifier *)"invalid";
              }
              *(_DWORD *)buf = 136446978;
              os_log_type_t v129 = "__nw_protocol_disconnected";
              BOOL v130 = 2082;
              os_log_type_t v131 = (nw_protocol *)v113;
              BOOL v132 = 2048;
              os_log_type_t v133 = a1;
              os_log_type_t v134 = 2082;
              BOOL v135 = v111;
              _os_log_impl( &dword_181A5C000,  v94,  v95,  "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v111);
            uint64_t v12 = v110;
            goto LABEL_306;
          }

          uint64_t v12 = v110;
          if (v112)
          {
            os_log_type_t v125 = a1->identifier;
            if (!v125) {
              os_log_type_t v125 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v129 = "__nw_protocol_disconnected";
            BOOL v130 = 2082;
            os_log_type_t v131 = (nw_protocol *)v125;
            BOOL v132 = 2048;
            os_log_type_t v133 = a1;
            os_log_type_t v97 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
LABEL_305:
            _os_log_impl(&dword_181A5C000, v94, v95, v97, buf, 0x20u);
          }
        }

    if (v110) {
      free(v110);
    }
    goto LABEL_79;
  }

  if (logging_disabled) {
    return;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  id v5 = (os_log_s *)(id)gconnectionLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(_DWORD *)(v6 + 448);
    os_log_type_t v8 = nw_endpoint_get_logging_description(*(void **)(v6 + 8));
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (*(_BYTE *)(a1 + 40)) {
      uint64_t v10 = "forced ";
    }
    else {
      uint64_t v10 = "";
    }
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = v8;
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v9;
    *(_WORD *)&buf[28] = 2082;
    *(void *)&buf[30] = v10;
    _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "[C%u %{public}s %{public}@] is already cancelled, ignoring %{public}scancel",  buf,  0x26u);
  }
      }
    }
  }

  else if (v35 && *v35 == 1 && v35[1] != 1)
  {
    *(void *)aBlock = 0LL;
    *(void *)&aBlock[8] = 0LL;
    nw_endpoint_handler_get_client_id(v34, aBlock);
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      size_t v38 = (os_log_s *)(id)gconnectionLogObj;
      else {
        os_log_type_t v70 = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 40));
      }
      if (os_log_type_enabled(v38, v70))
      {
        size_t v83 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
        os_log_type_t v84 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
        __int16 v85 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
        v517 = v84;
        v86 = nw_endpoint_get_logging_description(v85);
        id v87 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
        v88 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
        os_log_type_t v89 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
        os_log_type_t v90 = *(unsigned __int16 **)(a1 + 56);
        if (v90)
        {
          id v91 = *v90;
          else {
            os_log_type_t v92 = off_189BBC170[v91 - 1];
          }
          os_log_type_t v134 = nw_endpoint_event_event_string(v91, v90[1]);
        }

        else
        {
          os_log_type_t v92 = "null";
          os_log_type_t v134 = "null";
        }

        *(_DWORD *)buf = 136449026;
        *(void *)&uint8_t buf[4] = v83;
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v517;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&_BYTE buf[24] = v86;
        *(_WORD *)v524 = 2082;
        *(void *)&v524[2] = v87;
        *(_WORD *)&v524[10] = 2082;
        *(void *)&v524[12] = v88;
        *(_WORD *)&v524[20] = 2114;
        *(void *)&v524[22] = v89;
        v525 = 2082;
        v526 = v92;
        v527 = 2082;
        v528 = v134;
        v529 = 1024;
        v530 = v519 / 1000;
        v531 = 1024;
        v532 = v519 % 1000;
        v533 = 1042;
        *(_DWORD *)v534 = 16;
        *(_WORD *)&v534[4] = 2098;
        *(void *)&v534[6] = aBlock;
        _os_log_impl( &dword_181A5C000,  v38,  v70,  "[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] event: %{public}s:%{public}s @%u.%03us, uuid: %{public,uuid_t}.16P",  buf,  0x6Eu);
      }

      goto LABEL_145;
    }
  }

  else
  {
    size_t v40 = v34;
    BOOL v41 = (v40[268] & 0x20) == 0;

    if (v41)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      size_t v38 = (os_log_s *)(id)gconnectionLogObj;
      else {
        size_t v42 = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 40));
      }
      if (os_log_type_enabled(v38, v42))
      {
        unsigned int v54 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
        unsigned int v55 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
        id v56 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
        char v57 = nw_endpoint_get_logging_description(v56);
        BOOL v58 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
        unsigned int v59 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
        __int128 v60 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
        __int16 v61 = v60;
        size_t v62 = *(unsigned __int16 **)(a1 + 56);
        if (v62)
        {
          nw_endpoint_t v63 = *v62 - 1;
          if (v63 > 6) {
            nw_endpoint_t v64 = "unknown";
          }
          else {
            nw_endpoint_t v64 = off_189BBC170[v63];
          }
          BOOL v71 = v62[1];
          switch(v63)
          {
            case 0u:
              size_t v72 = off_189BBC1A8;
              goto LABEL_142;
            case 1u:
              LOWORD(v71) = v71 - 1;
              size_t v72 = off_189BBC1F8;
              goto LABEL_142;
            case 2u:
              size_t v72 = off_189BBC238;
              goto LABEL_142;
            case 3u:
              size_t v72 = off_189BBC2B0;
              goto LABEL_142;
            case 4u:
              size_t v72 = off_189BBC2E0;
              goto LABEL_142;
            case 5u:
              size_t v72 = off_189BBC320;
              goto LABEL_142;
            case 6u:
              size_t v72 = off_189BBC308;
LABEL_142:
              size_t v69 = v72[(unsigned __int16)v71];
              break;
            default:
LABEL_143:
              size_t v69 = "unknown";
              break;
          }
        }

        else
        {
          nw_endpoint_t v64 = "null";
          size_t v69 = "null";
        }

        *(_DWORD *)buf = 136448514;
        *(void *)&uint8_t buf[4] = v54;
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v55;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&_BYTE buf[24] = v57;
        *(_WORD *)v524 = 2082;
        *(void *)&v524[2] = v58;
        *(_WORD *)&v524[10] = 2082;
        *(void *)&v524[12] = v59;
        *(_WORD *)&v524[20] = 2114;
        *(void *)&v524[22] = v60;
        v525 = 2082;
        v526 = v64;
        v527 = 2082;
        v528 = v69;
        v529 = 1024;
        v530 = v519 / 1000;
        v531 = 1024;
        v532 = v519 % 1000;
        _os_log_impl( &dword_181A5C000,  v38,  v42,  "[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] event: %{public}s:%{public}s @%u.%03us",  buf,  0x5Eu);
      }

      goto LABEL_145;
    }
  }

  id v96 = *(void **)(a1 + 40);
  if (v96)
  {
    os_log_type_t v97 = *(void *)(a1 + 32);
    v98 = *(void **)(v97 + 144);
    if (v98)
    {
      if (v96 == v98 && !*(_DWORD *)(v97 + 280))
      {
        os_log_type_t v99 = *(_DWORD *)(a1 + 64);
        if (v99 <= 5 && ((1 << v99) & 0x3A) != 0)
        {
          size_t v100 = v96;
          os_unfair_lock_lock((os_unfair_lock_t)v100 + 28);
          id v101 = *((id *)v100 + 8);
          os_unfair_lock_unlock((os_unfair_lock_t)v100 + 28);

          if (v101)
          {
            os_log_type_t v102 = v101;
            BOOL v103 = v102[92];

            *(_DWORD *)(*(void *)(a1 + 32) + 280LL) = v103;
          }
        }
      }
    }
  }

  size_t v68 = v107;
  if (v70) {
    free(v70);
  }
LABEL_97:
}

        v223 = 0;
        stack = 0LL;
LABEL_146:
        switch(v11)
        {
          case 10:
            size_t v72 = keys;
            if (!keys) {
              size_t v72 = (char **)xpc_dictionary_create(0LL, 0LL, 0LL);
            }
            keys = v72;
            xpc_dictionary_set_uint64(v72, v22, 2uLL);
            break;
          case 3:
            BOOL v71 = keys;
            if (!keys) {
              BOOL v71 = (char **)xpc_dictionary_create(0LL, 0LL, 0LL);
            }
            keys = v71;
            xpc_dictionary_set_uint64(v71, v22, 3uLL);
            break;
          case 2:
            if (strcmp(v22, (const char *)nw_proxy_config_default_transport(void)::default_transport_string))
            {
              os_log_type_t v70 = keys;
              if (!keys) {
                os_log_type_t v70 = (char **)xpc_dictionary_create(0LL, 0LL, 0LL);
              }
              keys = v70;
              xpc_dictionary_set_uint64(v70, v22, 4uLL);
            }

            break;
        }

        __s1 = v22;
        continue;
      case 4:
      case 5:
        if (!stack) {
          stack = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_stack);
        }
        os_log_type_t v238 = v9;
        if (v12 < 0x2A)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int128 v50 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v12;
          char v51 = (char *)_os_log_send_and_compose_impl();

          v245[0] = 16;
          os_log_type_t v244 = 0;
          if (v245[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v52 = (os_log_s *)(id)gLogObj;
            unsigned int v53 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u",  buf,  0x12u);
            }
          }

          else if (v244)
          {
            id v66 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v52 = (os_log_s *)(id)gLogObj;
            size_t v67 = v245[0];
            size_t v68 = os_log_type_enabled(v52, (os_log_type_t)v245[0]);
            if (v66)
            {
              if (v68)
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = v12;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v66;
                _os_log_impl( &dword_181A5C000,  v52,  v67,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v66);
              if (!v51) {
                goto LABEL_308;
              }
              goto LABEL_307;
            }

            if (v68)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl( &dword_181A5C000,  v52,  v67,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, no backtrace",  buf,  0x12u);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v52 = (os_log_s *)(id)gLogObj;
            id v87 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl( &dword_181A5C000,  v52,  v87,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, backtrace limit exceeded",  buf,  0x12u);
            }
          }
        }

        else
        {
          os_log_type_t v25 = *((unsigned __int16 *)v22 + 20);
          if (v25 + 42 == v12)
          {
            os_log_type_t v26 = *((_OWORD *)v22 + 1);
            *(_OWORD *)buf = *(_OWORD *)v22;
            *(_OWORD *)&buf[16] = v26;
            *(void *)&_BYTE buf[32] = *((void *)v22 + 4);
            os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
            unint64_t v27 = &g_registration_list;
            do
            {
              unint64_t v27 = (uint64_t *)*v27;
              if (!v27) {
                goto LABEL_162;
              }
            }

            while (*(void *)buf != v27[4]
                 || *(void *)&buf[8] != v27[5]
                 || *(void *)&buf[16] != v27[6]
                 || *(void *)&buf[24] != v27[7]
                 || *(void *)&buf[32] != v27[8]);
            BOOL v32 = (void *)v27[14];
            if (v32)
            {
              unsigned int v33 = os_retain(v32);
              os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
              if (v33) {
                goto LABEL_187;
              }
            }

            else
            {
LABEL_162:
              os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
            }

            unsigned int v33 = (id)g_tcp_definition;
            identifier = nw_protocol_definition_get_identifier(v33);
            if (nw_protocols_are_equal(identifier, buf))
            {
              if (v33) {
                goto LABEL_187;
              }
            }

            else
            {
            }

            unsigned int v33 = (id)nw_protocol_boringssl_copy_definition();
            __int16 v85 = nw_protocol_definition_get_identifier(v33);
            if (nw_protocols_are_equal(v85, buf))
            {
              if (v33)
              {
LABEL_187:
                if (*((_WORD *)v22 + 20)) {
                  deserialized_options = nw_protocol_create_deserialized_options( v33,  (uint64_t)(v22 + 42),  *((unsigned __int16 *)v22 + 20));
                }
                else {
                  deserialized_options = nw_protocol_create_options(v33);
                }
                v88 = deserialized_options;
                if (!deserialized_options)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v92 = (os_log_s *)(id)gLogObj;
                  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)BOOL v245 = 136446466;
                    os_log_type_t v246 = "nw_proxy_config_create_with_agent_data_extended";
                    BOOL v247 = 2112;
                    v248 = v33;
                    _os_log_impl( &dword_181A5C000,  v92,  OS_LOG_TYPE_DEFAULT,  "%{public}s Failed to deserialize options for %@",  v245,  0x16u);
                  }

                  id v91 = 0LL;
                  v223 = 1;
                  goto LABEL_327;
                }

                if (nw_protocol_options_is_serializable_tls(deserialized_options))
                {
                  os_log_type_t v244 = 1;
                  os_log_type_t v89 = nw_tls_create_options_from_serializable(v88, (uint64_t)uu, &v244);

                  if (!v244)
                  {
                    __nwlog_obj();
                    os_log_type_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)BOOL v245 = 136446210;
                      os_log_type_t v246 = "nw_proxy_config_create_with_agent_data_extended";
                      _os_log_impl( &dword_181A5C000,  v90,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to serialize tls options",  v245,  0xCu);
                    }

                    if (v222) {
                      *os_log_type_t v222 = 0;
                    }
                  }

                  id v91 = v89;
                  goto LABEL_324;
                }

                id v91 = v88;
                if (nw_protocol_options_is_quic_connection(v91))
                {
                }

                else
                {
                  is_quic_stream = nw_protocol_options_is_quic_stream(v91);

                  if (!is_quic_stream)
                  {
LABEL_324:
                    if (v11 == 5)
                    {
                      nw_protocol_stack_set_transport_protocol((nw_protocol_stack_t)stack, (nw_protocol_options_t)v91);
LABEL_328:

LABEL_329:
                      goto LABEL_330;
                    }

                    nw_protocol_stack_append_application_protocol(stack, v91);
                    id v91 = v91;
                    os_log_type_t v92 = v237;
                    v237 = (os_log_s *)v91;
LABEL_327:

                    goto LABEL_328;
                  }
                }

                if (!uuid_is_null(uu))
                {
                  id v91 = v91;
                  os_log_type_t v140 = v91;
                  if (nw_protocol_options_is_quic_stream(v91))
                  {
                    os_log_type_t v140 = nw_quic_stream_copy_shared_connection_options(v91);
                  }

                  else {
                    BOOL v141 = 0LL;
                  }
                  if (!nw_quic_connection_fetch_client_identity_reference(v140, uu, (uint64_t)v141))
                  {
                    if (v222) {
                      *os_log_type_t v222 = 0;
                    }
                    __nwlog_obj();
                    os_log_type_t v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)BOOL v245 = 136446210;
                      os_log_type_t v246 = "nw_proxy_config_create_with_agent_data_extended";
                      _os_log_impl( &dword_181A5C000,  v142,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to fetch quic client identity",  v245,  0xCu);
                    }
                  }
                }

                goto LABEL_324;
              }
            }

            else
            {
            }

            __nwlog_obj();
            unsigned int v33 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)BOOL v245 = 136446466;
              os_log_type_t v246 = "nw_proxy_config_create_with_agent_data_extended";
              BOOL v247 = 2080;
              v248 = buf;
              _os_log_impl( &dword_181A5C000,  (os_log_t)v33,  OS_LOG_TYPE_DEFAULT,  "%{public}s No protocol definition registered for %s",  v245,  0x16u);
            }

            v223 = 1;
            goto LABEL_329;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          nw_endpoint_t v64 = (id)gLogObj;
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v12;
          char v51 = (char *)_os_log_send_and_compose_impl();

          v245[0] = 16;
          os_log_type_t v244 = 0;
          if (!__nwlog_fault(v51, v245, &v244))
          {
LABEL_306:
            if (!v51)
            {
LABEL_308:
              v223 = 1;
              continue;
            }

  if ((*(_BYTE *)(v15 + 158) & 1) == 0)
  {
    id v101 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v102 = *(void *)(v15 + 256);
      BOOL v103 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
      if (v102) {
        LODWORD(v102) = *(_DWORD *)(v102 + 860);
      }
      os_log_type_t v104 = *(_DWORD *)(v15 + 424);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      v783 = (uint64_t)" ";
      *(_WORD *)v784 = 1024;
      *(_DWORD *)&v784[2] = v103;
      *(_WORD *)&v784[6] = 1024;
      *(_DWORD *)&v784[8] = v102;
      *(_WORD *)&v784[12] = 1024;
      *(_DWORD *)&v784[14] = v104;
      _os_log_impl( &dword_181A5C000,  v101,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> no available connections, waiting",  buf,  0x32u);
    }
  }

  if ((*(_BYTE *)(v15 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v572 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v572, OS_LOG_TYPE_DEBUG))
      {
        v573 = *(void *)(v15 + 256);
        v574 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
        if (v573) {
          LODWORD(v573) = *(_DWORD *)(v573 + 860);
        }
        v575 = *(_DWORD *)(v15 + 424);
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v15 + 74;
        *(_WORD *)&buf[22] = 2080;
        v783 = (uint64_t)" ";
        *(_WORD *)v784 = 1024;
        *(_DWORD *)&v784[2] = v574;
        *(_WORD *)&v784[6] = 1024;
        *(_DWORD *)&v784[8] = v573;
        *(_WORD *)&v784[12] = 1024;
        *(_DWORD *)&v784[14] = v575;
        *(_WORD *)&v784[18] = 2048;
        *(void *)&v784[20] = v15;
        _os_log_impl( &dword_181A5C000,  v572,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream (%p)",  buf,  0x3Cu);
      }
    }
  }

  if ((*(_WORD *)(v15 + 428) & 0x1000) != 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = v15;
    unsigned int v118 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unsigned int v119 = (os_log_s *)__nwlog_obj();
      size_t v120 = type[0];
      if (!os_log_type_enabled(v119, type[0])) {
        goto LABEL_363;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v15;
      size_t v121 = "%{public}s stream %p already in pending list, cannot add again";
    }

    else if ((_BYTE)aBlock)
    {
      BOOL v130 = (char *)__nw_create_backtrace_string();
      unsigned int v119 = (os_log_s *)__nwlog_obj();
      size_t v120 = type[0];
      os_log_type_t v131 = os_log_type_enabled(v119, type[0]);
      if (v130)
      {
        if (v131)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&buf[14] = v15;
          *(_WORD *)&buf[22] = 2082;
          v783 = (uint64_t)v130;
          _os_log_impl( &dword_181A5C000,  v119,  v120,  "%{public}s stream %p already in pending list, cannot add again, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v130);
        goto LABEL_363;
      }

      if (!v131)
      {
LABEL_363:
        if (v118) {
          free(v118);
        }
        return 1LL;
      }

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v15;
      size_t v121 = "%{public}s stream %p already in pending list, cannot add again, no backtrace";
    }

    else
    {
      unsigned int v119 = (os_log_s *)__nwlog_obj();
      size_t v120 = type[0];
      if (!os_log_type_enabled(v119, type[0])) {
        goto LABEL_363;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v15;
      size_t v121 = "%{public}s stream %p already in pending list, cannot add again, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v119, v120, v121, buf, 0x16u);
    goto LABEL_363;
  }

  *(void *)(v15 + 296) = 0LL;
  os_log_type_t v105 = *(uint64_t **)(v9 + 256);
  *(void *)(v15 + 304) = v105;
  char *v105 = v15;
  *(void *)(v9 + 256) = v15 + 296;
  size_t v106 = *(unsigned int *)(v9 + 348) + 1LL;
  os_log_type_t v107 = v106 << 31 >> 31;
  *(_DWORD *)(v9 + 34_Block_object_dispose(va, 8) = v106;
  if (v107 == v106 && (v107 & 0x8000000000000000LL) == 0) {
    goto LABEL_403;
  }
  __nwlog_obj();
  v108 = *(unsigned int *)(v9 + 348);
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
  *(_WORD *)&_BYTE buf[12] = 2082;
  *(void *)&buf[14] = "http1->pending_stream_count";
  *(_WORD *)&buf[22] = 2048;
  v783 = 1LL;
  *(_WORD *)v784 = 2048;
  *(void *)&v784[2] = v108;
  os_log_type_t v109 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(aBlock) = 0;
  if (__nwlog_fault(v109, type, &aBlock))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      size_t v110 = (os_log_s *)__nwlog_obj();
      uint64_t v111 = type[0];
      if (os_log_type_enabled(v110, type[0]))
      {
        os_log_type_t v112 = *(unsigned int *)(v9 + 348);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = "http1->pending_stream_count";
        *(_WORD *)&buf[22] = 2048;
        v783 = 1LL;
        *(_WORD *)v784 = 2048;
        *(void *)&v784[2] = v112;
        os_log_type_t v113 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_399:
        _os_log_impl(&dword_181A5C000, v110, v111, v113, buf, 0x2Au);
      }
    }

    else if ((_BYTE)aBlock)
    {
      v236 = (char *)__nw_create_backtrace_string();
      size_t v110 = (os_log_s *)__nwlog_obj();
      uint64_t v111 = type[0];
      v237 = os_log_type_enabled(v110, type[0]);
      if (v236)
      {
        if (v237)
        {
          os_log_type_t v238 = *(unsigned int *)(v9 + 348);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v783 = 1LL;
          *(_WORD *)v784 = 2048;
          *(void *)&v784[2] = v238;
          *(_WORD *)&v784[10] = 2082;
          *(void *)&v784[12] = v236;
          _os_log_impl( &dword_181A5C000,  v110,  v111,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(v236);
        goto LABEL_400;
      }

      if (v237)
      {
        BOOL v272 = *(unsigned int *)(v9 + 348);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = "http1->pending_stream_count";
        *(_WORD *)&buf[22] = 2048;
        v783 = 1LL;
        *(_WORD *)v784 = 2048;
        *(void *)&v784[2] = v272;
        os_log_type_t v113 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_399;
      }
    }

    else
    {
      size_t v110 = (os_log_s *)__nwlog_obj();
      uint64_t v111 = type[0];
      if (os_log_type_enabled(v110, type[0]))
      {
        v251 = *(unsigned int *)(v9 + 348);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = "http1->pending_stream_count";
        *(_WORD *)&buf[22] = 2048;
        v783 = 1LL;
        *(_WORD *)v784 = 2048;
        *(void *)&v784[2] = v251;
        os_log_type_t v113 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_399;
      }
    }
  }

          *(void *)buf = v47;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39794;
          v209 = (uint64_t)&__block_descriptor_tmp_57_39795;
          v210[0] = 0;
          id v93 = *(void *)(v46 + 680);
          do
          {
            if (!v93) {
              break;
            }
            os_log_type_t v94 = *(void *)(v93 + 16);
            size_t v95 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            id v93 = v94;
          }

          while ((v95 & 1) != 0);
          if (!*(void *)(v46 + 680))
          {
            if (!*((_BYTE *)v12 + 1537)) {
              goto LABEL_150;
            }
            goto LABEL_346;
          }

          unsigned int v118 = v47;
          __nwlog_obj();
          os_log_type_t v213 = 136446210;
          os_log_type_t v214 = "nw_protocol_finalize_master_frame_array";
          unsigned int v119 = (char *)_os_log_send_and_compose_impl();
          v203 = OS_LOG_TYPE_ERROR;
          v202 = 0;
          if (__nwlog_fault(v119, &v203, &v202))
          {
            if (v203 == OS_LOG_TYPE_FAULT)
            {
              size_t v120 = (os_log_s *)__nwlog_obj();
              size_t v121 = v203;
              if (!os_log_type_enabled(v120, v203)) {
                goto LABEL_343;
              }
              os_log_type_t v213 = 136446210;
              os_log_type_t v214 = "nw_protocol_finalize_master_frame_array";
              size_t v122 = "%{public}s frame array is not empty after finalize";
LABEL_342:
              _os_log_impl(&dword_181A5C000, v120, v121, v122, (uint8_t *)&v213, 0xCu);
              goto LABEL_343;
            }

            if (!v202)
            {
              size_t v120 = (os_log_s *)__nwlog_obj();
              size_t v121 = v203;
              if (!os_log_type_enabled(v120, v203)) {
                goto LABEL_343;
              }
              os_log_type_t v213 = 136446210;
              os_log_type_t v214 = "nw_protocol_finalize_master_frame_array";
              size_t v122 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
              goto LABEL_342;
            }

            unint64_t v179 = (char *)__nw_create_backtrace_string();
            size_t v120 = (os_log_s *)__nwlog_obj();
            size_t v121 = v203;
            id v180 = os_log_type_enabled(v120, v203);
            if (!v179)
            {
              if (!v180) {
                goto LABEL_343;
              }
              os_log_type_t v213 = 136446210;
              os_log_type_t v214 = "nw_protocol_finalize_master_frame_array";
              size_t v122 = "%{public}s frame array is not empty after finalize, no backtrace";
              goto LABEL_342;
            }

            if (v180)
            {
              os_log_type_t v213 = 136446466;
              os_log_type_t v214 = "nw_protocol_finalize_master_frame_array";
              v215 = 2082;
              v216 = v179;
              _os_log_impl( &dword_181A5C000,  v120,  v121,  "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s",  (uint8_t *)&v213,  0x16u);
            }

            free(v179);
          }

      free(v84);
      goto LABEL_146;
    }

    __nwlog_obj();
    size_t v83 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_http_client_metadata_get_transaction_count";
    LODWORD(v102) = 12;
    id v101 = out;
    os_log_type_t v84 = (char *)_os_log_send_and_compose_impl();

    string[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v117) = 0;
    if (string[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v86 = string[0];
      if (os_log_type_enabled(v85, string[0]))
      {
        *(_DWORD *)out = 136446210;
        *(void *)&out[4] = "nw_http_client_metadata_get_transaction_count";
        _os_log_impl(&dword_181A5C000, v85, v86, "%{public}s called with null metadata", (uint8_t *)out, 0xCu);
      }
    }

    else if ((_BYTE)v117)
    {
      id v93 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v94 = string[0];
      size_t v95 = os_log_type_enabled(v85, string[0]);
      if (v93)
      {
        if (v95)
        {
          *(_DWORD *)out = 136446466;
          *(void *)&out[4] = "nw_http_client_metadata_get_transaction_count";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v93;
          _os_log_impl( &dword_181A5C000,  v85,  v94,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  (uint8_t *)out,  0x16u);
        }

        free(v93);
        goto LABEL_144;
      }

      if (v95)
      {
        *(_DWORD *)out = 136446210;
        *(void *)&out[4] = "nw_http_client_metadata_get_transaction_count";
        _os_log_impl( &dword_181A5C000,  v85,  v94,  "%{public}s called with null metadata, no backtrace",  (uint8_t *)out,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v99 = string[0];
      if (os_log_type_enabled(v85, string[0]))
      {
        *(_DWORD *)out = 136446210;
        *(void *)&out[4] = "nw_http_client_metadata_get_transaction_count";
        _os_log_impl( &dword_181A5C000,  v85,  v99,  "%{public}s called with null metadata, backtrace limit exceeded",  (uint8_t *)out,  0xCu);
      }
    }

    unsigned int v59 = (char *)backtrace_string;
LABEL_210:
    free(v59);
    goto LABEL_211;
  }

  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
    BOOL v4 = _os_log_send_and_compose_impl();
    v86[0] = 16;
    LOBYTE(v85[0]) = 0;
    if (v86[0] == 17)
    {
      BOOL v32 = (os_log_s *)__nwlog_obj();
      unsigned int v33 = v86[0];
      if (os_log_type_enabled(v32, (os_log_type_t)v86[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
        nw_endpoint_t v34 = "%{public}s called with null socket_handler";
        goto LABEL_181;
      }

      goto LABEL_211;
    }

    if (!LOBYTE(v85[0]))
    {
      BOOL v32 = (os_log_s *)__nwlog_obj();
      unsigned int v33 = v86[0];
      if (os_log_type_enabled(v32, (os_log_type_t)v86[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
        nw_endpoint_t v34 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_181;
      }

      goto LABEL_211;
    }

    backtrace_string = __nw_create_backtrace_string();
    BOOL v32 = (os_log_s *)__nwlog_obj();
    unsigned int v33 = v86[0];
    id v73 = os_log_type_enabled(v32, (os_log_type_t)v86[0]);
    if (!backtrace_string)
    {
      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
        nw_endpoint_t v34 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_181;
      }

      goto LABEL_211;
    }

    if (v73)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_144;
    }

    goto LABEL_145;
  }

  BOOL v4 = 0LL;
  switch(a2)
  {
    case 1:
      if (*(_DWORD *)(a1 + 272) == 2)
      {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 400);
        if (v6 == 30 || v6 == 2)
        {
          *(_DWORD *)v86 = 408;
          if (((*(unsigned __int16 *)(a1 + 397) | (*(unsigned __int8 *)(a1 + 399) << 16)) & 0x20000) == 0)
          {
            BOOL v4 = (uint64_t)malloc(0x198uLL);
            if (v4) {
              goto LABEL_9;
            }
            size_t v78 = (os_log_s *)__nwlog_obj();
            os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "strict_malloc";
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = 408LL;
            nw_txt_record_t v79 = (void *)_os_log_send_and_compose_impl();
            if (!__nwlog_abort((uint64_t)v79))
            {
              free(v79);
LABEL_9:
              if (getsockopt(*(_DWORD *)(a1 + 268), 6, 512, (void *)v4, (socklen_t *)v86))
              {
                uint64_t v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v8 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
                  *(_WORD *)&_BYTE buf[12] = 2080;
                  *(void *)&buf[14] = a1 + 404;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&_BYTE buf[24] = v7;
                  _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s %s getsockopt TCP_INFO failed %{darwin.errno}d",  buf,  0x1Cu);
                }

                uint64_t v9 = (os_log_s *)__nwlog_obj();
                uint64_t v10 = v9;
                if (v7 == 102)
                {
                  if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_211;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 102;
                  uint64_t v11 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
LABEL_34:
                  _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
                  goto LABEL_211;
                }

                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = v7;
                size_t v62 = (const char *)_os_log_send_and_compose_impl();
                LOBYTE(v85[0]) = 16;
                LOBYTE(v84) = 0;
                if (LOBYTE(v85[0]) == 17)
                {
                  nw_endpoint_t v63 = (os_log_s *)__nwlog_obj();
                  nw_endpoint_t v64 = v85[0];
                  if (os_log_type_enabled(v63, v85[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v7;
                    BOOL v65 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
                    goto LABEL_207;
                  }

                  goto LABEL_208;
                }

                if (!(_BYTE)v84)
                {
                  nw_endpoint_t v63 = (os_log_s *)__nwlog_obj();
                  nw_endpoint_t v64 = v85[0];
                  if (os_log_type_enabled(v63, v85[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v7;
                    BOOL v65 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, backtrace limit exceeded";
                    goto LABEL_207;
                  }

                  goto LABEL_208;
                }

                size_t v68 = (char *)__nw_create_backtrace_string();
                nw_endpoint_t v63 = (os_log_s *)__nwlog_obj();
                nw_endpoint_t v64 = v85[0];
                BOOL v71 = os_log_type_enabled(v63, v85[0]);
                if (!v68)
                {
                  if (v71)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v7;
                    BOOL v65 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, no backtrace";
                    goto LABEL_207;
                  }

                  goto LABEL_208;
                }

                if (v71)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v7;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = v68;
                  os_log_type_t v70 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s";
                  goto LABEL_175;
                }

                goto LABEL_176;
              }

              goto LABEL_122;
            }

  __break(1u);
  return result;
}

    free(v114);
    goto LABEL_146;
  }

  size_t v110 = (unsigned __int8 *)v108[31];
  if (!v110)
  {
    __nwlog_obj();
    v276 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
    os_log_type_t v277 = (char *)_os_log_send_and_compose_impl();

    v425[0] = 16;
    LOBYTE(v389) = 0;
    if (__nwlog_fault(v277, v425, &v389))
    {
      if (v425[0] == 17)
      {
        __nwlog_obj();
        BOOL v278 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v279 = v425[0];
        if (os_log_type_enabled(v278, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
          _os_log_impl(&dword_181A5C000, v278, v279, "%{public}s called with null fallback", (uint8_t *)buf, 0xCu);
        }
      }

      else
      {
        if ((_BYTE)v389)
        {
          os_log_type_t v284 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v285 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v286 = v425[0];
          v287 = os_log_type_enabled(v285, (os_log_type_t)v425[0]);
          if (v284)
          {
            if (v287)
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v284;
              _os_log_impl( &dword_181A5C000,  v285,  v286,  "%{public}s called with null fallback, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
            }

            free(v284);
          }

          else
          {
            if (v287)
            {
              buf[0] = 136446210;
              *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
              _os_log_impl( &dword_181A5C000,  v285,  v286,  "%{public}s called with null fallback, no backtrace",  (uint8_t *)buf,  0xCu);
            }
          }

          goto LABEL_556;
        }

        __nwlog_obj();
        BOOL v278 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v372 = v425[0];
        if (os_log_type_enabled(v278, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
          _os_log_impl( &dword_181A5C000,  v278,  v372,  "%{public}s called with null fallback, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
        }
      }
    }

            if (!v64) {
              goto LABEL_56;
            }
LABEL_146:
            free(v64);
            goto LABEL_56;
          }

          BOOL v49 = *((void *)v11 + 3);
          if (v49)
          {
            __int128 v50 = *(void (**)(const char *, char *, id))(v49 + 168);
            if (v50)
            {
              v50(v11, (char *)v7 + 376, v16);
LABEL_56:
              if (v46 == &nw_protocol_ref_counted_handle) {
                nw::release_if_needed<nw_protocol *>(&v96);
              }
              if (v18 == &nw_protocol_ref_counted_handle) {
                nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              }

              goto LABEL_82;
            }
          }

          __nwlog_obj();
          size_t v62 = (void *)objc_claimAutoreleasedReturnValue();
          nw_endpoint_t v63 = (const char *)*((void *)v11 + 2);
          *(_DWORD *)buf = 136446722;
          id v101 = "__nw_protocol_updated_path";
          if (!v63) {
            nw_endpoint_t v63 = "invalid";
          }
          os_log_type_t v102 = 2082;
          BOOL v103 = (void *)v63;
          os_log_type_t v104 = 2048;
          os_log_type_t v105 = v11;
          id v93 = (const char *)_os_log_send_and_compose_impl();

          size_t v95 = OS_LOG_TYPE_ERROR;
          os_log_type_t v94 = 0;
          nw_endpoint_t v64 = (char *)v93;
          if (v95 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            BOOL v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            id v66 = v95;
            if (os_log_type_enabled(v65, v95))
            {
              size_t v67 = (const char *)*((void *)v11 + 2);
              if (!v67) {
                size_t v67 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              id v101 = "__nw_protocol_updated_path";
              os_log_type_t v102 = 2082;
              BOOL v103 = (void *)v67;
              os_log_type_t v104 = 2048;
              os_log_type_t v105 = v11;
              _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback",  buf,  0x20u);
            }
          }

          else
          {
            if (v94)
            {
              nw_txt_record_t v79 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              os_log_type_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v89 = v95;
              __int16 v81 = os_log_type_enabled(v80, v95);
              if (v79)
              {
                if (v81)
                {
                  size_t v82 = (const char *)*((void *)v11 + 2);
                  if (!v82) {
                    size_t v82 = "invalid";
                  }
                  *(_DWORD *)buf = 136446978;
                  id v101 = "__nw_protocol_updated_path";
                  os_log_type_t v102 = 2082;
                  BOOL v103 = (void *)v82;
                  os_log_type_t v104 = 2048;
                  os_log_type_t v105 = v11;
                  size_t v106 = 2082;
                  os_log_type_t v107 = v79;
                  _os_log_impl( &dword_181A5C000,  v80,  v89,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                }

                free(v79);
              }

              else
              {
                if (v81)
                {
                  id v87 = (const char *)*((void *)v11 + 2);
                  if (!v87) {
                    id v87 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  id v101 = "__nw_protocol_updated_path";
                  os_log_type_t v102 = 2082;
                  BOOL v103 = (void *)v87;
                  os_log_type_t v104 = 2048;
                  os_log_type_t v105 = v11;
                  _os_log_impl( &dword_181A5C000,  v80,  v89,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace",  buf,  0x20u);
                }
              }

              goto LABEL_144;
            }

            __nwlog_obj();
            BOOL v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __int16 v85 = v95;
            if (os_log_type_enabled(v65, v95))
            {
              v86 = (const char *)*((void *)v11 + 2);
              if (!v86) {
                v86 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              id v101 = "__nw_protocol_updated_path";
              os_log_type_t v102 = 2082;
              BOOL v103 = (void *)v86;
              os_log_type_t v104 = 2048;
              os_log_type_t v105 = v11;
              _os_log_impl( &dword_181A5C000,  v65,  v85,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded",  buf,  0x20u);
            }
          }

LABEL_144:
          nw_endpoint_t v64 = (char *)v93;
          goto LABEL_145;
        }
      }

      else
      {
      }
    }

    else if (nw_endpoint_handler_get_minimize_logging(v5))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v5);
        size_t v69 = nw_endpoint_handler_dry_run_string(v5);
        os_log_type_t v70 = nw_endpoint_handler_copy_endpoint(v5);
        logging_description = nw_endpoint_get_logging_description(v70);
        size_t v72 = nw_endpoint_handler_state_string(v5);
        id v73 = nw_endpoint_handler_mode_string(v5);
        __int16 v74 = nw_endpoint_handler_copy_current_path(v5);
        *(_DWORD *)buf = 136447746;
        id v101 = "nw_endpoint_handler_reset_traffic_class";
        os_log_type_t v102 = 2082;
        BOOL v103 = (void *)id_string;
        os_log_type_t v104 = 2082;
        os_log_type_t v105 = v69;
        size_t v106 = 2082;
        os_log_type_t v107 = (void *)logging_description;
        v108 = 2082;
        os_log_type_t v109 = v72;
        size_t v110 = 2082;
        uint64_t v111 = v73;
        os_log_type_t v112 = 2114;
        os_log_type_t v113 = v74;
        _os_log_impl( &dword_181A5C000,  (os_log_t)v10,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping reset of traffic cla ss, no active flow registration",  buf,  0x48u);
      }
    }

    else
    {
      BOOL v30 = v5;
      os_log_type_t v31 = *((_BYTE *)v30 + 268);

      if ((v31 & 0x20) != 0)
      {
LABEL_83:

        goto LABEL_84;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_INFO))
      {
        BOOL v32 = v30;

        unsigned int v33 = v32;
        nw_endpoint_t v34 = *((_BYTE *)v30 + 268);

        if ((v34 & 1) != 0) {
          __int16 v35 = "dry-run ";
        }
        else {
          __int16 v35 = "";
        }
        id v36 = nw_endpoint_handler_copy_endpoint(v33);
        BOOL v37 = nw_endpoint_get_logging_description(v36);
        os_log_type_t v90 = v36;
        id_str = v32->id_str;
        size_t v38 = v33;
        os_log_type_t v39 = v38;
        size_t v40 = v38[30];
        else {
          BOOL v41 = off_189BBBBF0[v40];
        }

        char v51 = v39;
        unint64_t v52 = v51;
        unsigned int v53 = v5->mode;
        unsigned int v54 = "path";
        switch(v53)
        {
          case 0:
            break;
          case 1:
            unsigned int v54 = "resolver";
            break;
          case 2:
            unsigned int v54 = nw_endpoint_flow_mode_string(v51[31]);
            break;
          case 3:
            unsigned int v54 = "proxy";
            break;
          case 4:
            unsigned int v54 = "fallback";
            break;
          case 5:
            unsigned int v54 = "transform";
            break;
          default:
            unsigned int v54 = "unknown-mode";
            break;
        }

        unsigned int v55 = v52;
        os_unfair_lock_lock((os_unfair_lock_t)v55 + 28);
        id v56 = v55[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v55 + 28);

        *(_DWORD *)buf = 136447746;
        id v101 = "nw_endpoint_handler_reset_traffic_class";
        os_log_type_t v102 = 2082;
        BOOL v103 = id_str;
        os_log_type_t v104 = 2082;
        os_log_type_t v105 = v35;
        size_t v106 = 2082;
        os_log_type_t v107 = (void *)v37;
        v108 = 2082;
        os_log_type_t v109 = v41;
        size_t v110 = 2082;
        uint64_t v111 = v54;
        os_log_type_t v112 = 2114;
        os_log_type_t v113 = v56;
        _os_log_impl( &dword_181A5C000,  (os_log_t)v10,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping reset of traffic cla ss, no active flow registration",  buf,  0x48u);
      }
    }

  if (v59) {
LABEL_146:
  }
    free(v59);
  return 0LL;
}