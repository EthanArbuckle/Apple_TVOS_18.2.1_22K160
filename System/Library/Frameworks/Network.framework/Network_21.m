void nw_http_authentication_options_set_challenge_handler(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id *v8;
  id v9;
  BOOL is_equal_unsafe;
  void *v11;
  char *v12;
  os_log_s *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  BOOL v19;
  char *v20;
  os_log_type_t v21;
  BOOL v22;
  os_log_type_t v23;
  os_log_type_t v24;
  void v25[4];
  id v26;
  id v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;
  v34 = *MEMORY[0x1895F89C0];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_http_authentication_options_set_challenge_handler";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_authentication_options_set_challenge_handler";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_http_authentication_options_set_challenge_handler";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12) {
          goto LABEL_6;
        }
LABEL_41:
        free(v12);
        goto LABEL_6;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_authentication_options_set_challenge_handler";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_authentication_options_set_challenge_handler";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_authentication_options_set_challenge_handler_block_invoke(uint64_t a1, void **a2)
{
  v4 = _Block_copy(*(const void **)(a1 + 40));
  v5 = *a2;
  *a2 = v4;

  objc_storeStrong(a2 + 5, *(id *)(a1 + 32));
  return 1LL;
}

uint64_t __nw_http_authentication_options_copy_challenge_handler_block_invoke(uint64_t a1, const void **a2)
{
  v3 = _Block_copy(*a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1LL;
}

uint64_t __nw_http_authentication_options_copy_challenge_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t __nw_http_authentication_options_copy_credential_storage_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_authentication_options_set_credential_storage(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_authentication_options_set_credential_storage";
    v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_authentication_options_set_credential_storage";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_authentication_options_set_credential_storage";
          __int16 v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_authentication_options_set_credential_storage";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_authentication_options_set_credential_storage";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_authentication_options_set_credential_storage_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_http_authentication_options_copy_credential_cache(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      char v24 = __Block_byref_object_copy__4;
      v25 = __Block_byref_object_dispose__5;
      id v26 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_authentication_options_copy_credential_cache_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
    v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_authentication", buf, 0xCu);
        }

void sub_1824CC6E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_authentication_options_copy_credential_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_authentication_options_set_credential_cache(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_authentication_options_set_credential_cache";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http_authentication_options_set_credential_cache";
          __int16 v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_58:
        free(v10);
        goto LABEL_7;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_authentication_options_set_credential_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t __nw_http_authentication_options_copy_h1_fallback_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_authentication_options_set_h1_fallback_cache(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_authentication_options_set_h1_fallback_cache";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http_authentication_options_set_h1_fallback_cache";
          __int16 v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_58:
        free(v10);
        goto LABEL_7;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_authentication_options_set_h1_fallback_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t nw_http_authentication_options_copy_appsso_h1_fallback_headers(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_authentication_options_copy_appsso_h1_fallback_headers_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(void *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
    v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_authentication", buf, 0xCu);
        }

void sub_1824CDB9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_authentication_options_copy_appsso_h1_fallback_headers_block_invoke( uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(id *)(a2 + 32);
  return 1LL;
}

void nw_http_authentication_options_set_appsso_h1_fallback_headers(void *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
    v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_authentication_options_set_appsso_h1_fallback_headers_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

const char *nw_http_encoding_type_to_string(unsigned int a1)
{
  if (a1 > 5) {
    return "<unknown>";
  }
  else {
    return off_189BC6808[a1];
  }
}

NWConcrete_nw_protocol_options *nw_http_encoding_create_options()
{
  if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_73148);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition);
}

BOOL __nw_protocol_copy_http_encoding_definition_block_invoke()
{
  if (nw_protocol_http_encoding_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_encoding_identifier::onceToken, &__block_literal_global_33083);
  }
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_encoding_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition;
  nw_protocol_copy_http_encoding_definition_http_encoding_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition,  (uint64_t)nw_http_encoding_allocate_options,  (uint64_t)nw_http_encoding_copy_options,  (uint64_t)nw_http_encoding_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition,  (uint64_t)nw_http_encoding_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition,  0,  (uint64_t)nw_http_encoding_serialize_options,  (uint64_t)nw_http_encoding_deserialize_options);
  if (nw_protocol_http_encoding_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_encoding_identifier::onceToken, &__block_literal_global_33083);
  }
  return nw_protocol_register_handle( (uint64_t)nw_protocol_http_encoding_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition,  (uint64_t)nw_protocol_http_encoding_create,  0LL);
}

BOOL nw_http_encoding_allocate_options(void *a1)
{
  id v1 = a1;
  v2 = calloc(1uLL, 4uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_encoding_copy_options(void *a1, _DWORD *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_http_encoding_copy_options";
    id v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      id v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_http_encoding_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v18 = "nw_http_encoding_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_http_encoding_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_http_encoding_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http_encoding_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    free(a2);
    return;
  }

  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v12 = "nw_http_encoding_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_encoding_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v12 = "nw_http_encoding_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v8) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_encoding_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_encoding_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http_encoding_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }

  return result;
}

BOOL nw_http_encoding_serialize_options(void *a1, _DWORD *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_encoding_copy_options(a1, a2);
    *a3 = 4LL;
    return result;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_http_encoding_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_encoding_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v15 = "nw_http_encoding_serialize_options";
            __int16 v16 = 2082;
            BOOL v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_encoding_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_encoding_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_encoding_deserialize_options(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      BOOL v7 = nw_http_encoding_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_encoding_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_encoding_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_encoding_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_encoding_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_encoding_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_encoding_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_encoding_deserialize_options";
          __int16 v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

id nw_protocol_copy_http_encoding_definition()
{
  if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_73148);
  }
  return (id)nw_protocol_copy_http_encoding_definition_http_encoding_definition;
}

BOOL nw_protocol_options_is_http_encoding(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_73148);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_encoding_definition_http_encoding_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_encoding";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_encoding";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_encoding";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_encoding";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_encoding";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_http_encoding_options_set_type(void *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_http_encoding_options_set_type";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_encoding_options_set_type";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_http_encoding_options_set_type";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_encoding_options_set_type";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_encoding_options_set_type";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_encoding_options_set_type_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_encoding_options_get_type(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_73148);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_encoding_definition_http_encoding_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v24 = 1;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_encoding_options_get_type_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http encoding", buf, 0xCu);
        }

void sub_1824CFDBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_encoding_options_get_type_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_http_redirect_create_options()
{
  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_73205);
  }
  options = nw_protocol_create_options((void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition);
  nw_http_redirect_options_set_limit(options, 20);
  return options;
}

void nw_http_redirect_options_set_limit(void *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_http_redirect_options_set_limit";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_redirect_options_set_limit";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_http_redirect_options_set_limit";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_redirect_options_set_limit";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_redirect_options_set_limit";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_redirect_options_set_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

BOOL __nw_protocol_copy_http_redirect_definition_block_invoke()
{
  if (nw_protocol_http_redirect_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_redirect_identifier::onceToken, &__block_literal_global_926);
  }
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_redirect_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition;
  nw_protocol_copy_http_redirect_definition_http_redirect_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition,  (uint64_t)nw_http_redirect_allocate_options,  (uint64_t)nw_http_redirect_copy_options,  (uint64_t)nw_http_redirect_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition,  (uint64_t)nw_http_redirect_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition,  0,  (uint64_t)nw_http_redirect_serialize_options,  (uint64_t)nw_http_redirect_deserialize_options);
  if (nw_protocol_http_redirect_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_redirect_identifier::onceToken, &__block_literal_global_926);
  }
  return nw_protocol_register_handle( (uint64_t)nw_protocol_http_redirect_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition,  (uint64_t)nw_protocol_http_redirect_create,  0LL);
}

BOOL nw_http_redirect_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 0x18uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_redirect_copy_options(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "nw_http_redirect_copy_options";
    char v9 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault((const char *)v9, &type, &v17))
    {
LABEL_22:
      if (v9) {
        free(v9);
      }
      id v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_http_redirect_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      }
    }

    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v20 = "nw_http_redirect_copy_options";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v16) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_http_redirect_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_http_redirect_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http_redirect_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0LL;

    id v4 = a2[1];
    a2[1] = 0LL;

    free(a2);
    return;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_http_redirect_deallocate_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_deallocate_options";
        char v9 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_http_redirect_deallocate_options";
            __int16 v16 = 2082;
            char v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v11) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_deallocate_options";
        char v9 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_deallocate_options";
        char v9 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http_redirect_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2];
  }
  return result;
}

BOOL nw_http_redirect_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_redirect_copy_options(a1, a2);
    *a3 = 24LL;
    return result;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_http_redirect_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_http_redirect_serialize_options";
            __int16 v16 = 2082;
            char v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_redirect_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_redirect_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 24)
    {
      BOOL v7 = nw_http_redirect_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_redirect_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_redirect_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      char v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_redirect_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_redirect_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

id nw_protocol_copy_http_redirect_definition()
{
  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_73205);
  }
  return (id)nw_protocol_copy_http_redirect_definition_http_redirect_definition;
}

BOOL nw_protocol_options_is_http_redirect(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_73205);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_redirect_definition_http_redirect_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_redirect";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_redirect";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_redirect";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_redirect";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_redirect";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_http_redirect_options_set_handler(void *a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_http_redirect_options_set_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_redirect_options_set_handler";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_http_redirect_options_set_handler";
          __int16 v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12) {
          goto LABEL_6;
        }
LABEL_41:
        free(v12);
        goto LABEL_6;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_redirect_options_set_handler";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_redirect_options_set_handler";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_redirect_options_set_handler_block_invoke(uint64_t a1, void **a2)
{
  id v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *a2;
  *a2 = v4;

  objc_storeStrong(a2 + 1, *(id *)(a1 + 32));
  return 1LL;
}

uint64_t __nw_http_redirect_options_copy_handler_block_invoke(uint64_t a1, const void **a2)
{
  id v3 = _Block_copy(*a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1LL;
}

uint64_t __nw_http_redirect_options_copy_handler_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t nw_http_redirect_options_get_limit(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_73205);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_redirect_definition_http_redirect_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v24 = 0;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_redirect_options_get_limit_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }

    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http redirect", buf, 0xCu);
        }

void sub_1824D20D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_redirect_options_get_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 16);
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_http_retry_create_options()
{
  if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73298);
  }
  options = nw_protocol_create_options((void *)nw_protocol_copy_http_retry_definition_http_retry_definition);
  nw_http_retry_options_set_limit(options, 3);
  return options;
}

void nw_http_retry_options_set_limit(void *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_http_retry_options_set_limit";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_retry_options_set_limit";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v27 = "nw_http_retry_options_set_limit";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_retry_options_set_limit";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_retry_options_set_limit";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_retry_options_set_limit_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1LL;
}

BOOL __nw_protocol_copy_http_retry_definition_block_invoke()
{
  if (nw_protocol_http_retry_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_retry_identifier::onceToken, &__block_literal_global_41658);
  }
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http_retry_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_retry_definition_http_retry_definition;
  nw_protocol_copy_http_retry_definition_http_retry_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_retry_definition_http_retry_definition,  (uint64_t)nw_http_retry_allocate_options,  (uint64_t)nw_http_retry_copy_options,  (uint64_t)nw_http_retry_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http_retry_definition_http_retry_definition,  (uint64_t)nw_http_retry_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_retry_definition_http_retry_definition,  0,  (uint64_t)nw_http_retry_serialize_options,  (uint64_t)nw_http_retry_deserialize_options);
  if (nw_protocol_http_retry_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_retry_identifier::onceToken, &__block_literal_global_41658);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http_retry_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_retry_definition_http_retry_definition,  (uint64_t)nw_protocol_http_retry_create,  0LL);
}

BOOL nw_http_retry_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 4uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_retry_copy_options(void *a1, _DWORD *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_http_retry_copy_options";
    id v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      uint64_t v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_http_retry_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v18 = "nw_http_retry_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_http_retry_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_http_retry_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http_retry_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    free(a2);
    return;
  }

  __nwlog_obj();
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v12 = "nw_http_retry_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_retry_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v12 = "nw_http_retry_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v8) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_retry_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_retry_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http_retry_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }

  return result;
}

BOOL nw_http_retry_serialize_options(void *a1, _DWORD *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_retry_copy_options(a1, a2);
    *a3 = 4LL;
    return result;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_http_retry_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_retry_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v15 = "nw_http_retry_serialize_options";
            __int16 v16 = 2082;
            BOOL v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_retry_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_retry_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_retry_deserialize_options(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      BOOL v7 = nw_http_retry_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_retry_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_retry_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_retry_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options)), backtr"
                "ace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_retry_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_retry_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options)), dumping ba"
            "cktrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_retry_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_retry_deserialize_options";
          __int16 v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

id nw_protocol_copy_http_retry_definition()
{
  if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73298);
  }
  return (id)nw_protocol_copy_http_retry_definition_http_retry_definition;
}

BOOL nw_protocol_options_is_http_retry(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73298);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_retry_definition_http_retry_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_retry";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_retry";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_retry";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_retry";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_retry";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_http_retry_options_get_limit(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73298);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_retry_definition_http_retry_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v24 = 0;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_retry_options_get_limit_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }

    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http retry", buf, 0xCu);
        }

void sub_1824D3D70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_retry_options_get_limit_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_http_security_create_options()
{
  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_security_definition_http_security_definition);
}

BOOL __nw_protocol_copy_http_security_definition_block_invoke()
{
  if (nw_protocol_http_security_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_security_identifier::onceToken, &__block_literal_global_28437);
  }
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_security_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_security_definition_http_security_definition;
  nw_protocol_copy_http_security_definition_http_security_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_security_definition_http_security_definition,  (uint64_t)nw_http_security_allocate_options,  (uint64_t)nw_http_security_copy_options,  (uint64_t)nw_http_security_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http_security_definition_http_security_definition,  (uint64_t)nw_http_security_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_security_definition_http_security_definition,  0,  (uint64_t)nw_http_security_serialize_options,  (uint64_t)nw_http_security_deserialize_options);
  if (nw_protocol_http_security_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_security_identifier::onceToken, &__block_literal_global_28437);
  }
  return nw_protocol_register_handle( (uint64_t)nw_protocol_http_security_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_security_definition_http_security_definition,  (uint64_t)nw_protocol_http_security_create,  0LL);
}

BOOL nw_http_security_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 0x28uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_security_copy_options(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v21 = "nw_http_security_copy_options";
    os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault((const char *)v10, &type, &v18))
    {
LABEL_22:
      if (v10) {
        free(v10);
      }
      uint64_t v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_http_security_copy_options";
        char v13 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
      }
    }

    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v17 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            char v21 = "nw_http_security_copy_options";
            __int16 v22 = 2082;
            uint64_t v23 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v17) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_http_security_copy_options";
        char v13 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_http_security_copy_options";
        char v13 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http_security_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0LL;

    uint64_t v4 = a2[2];
    a2[2] = 0LL;

    uint64_t v5 = a2[3];
    a2[3] = 0LL;

    free(a2);
    return;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_http_security_deallocate_options";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http_security_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v16 = "nw_http_security_deallocate_options";
            __int16 v17 = 2082;
            char v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v12) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http_security_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http_security_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http_security_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3] && a2[4] == a3[4];
  }
  return result;
}

BOOL nw_http_security_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_security_copy_options(a1, a2);
    *a3 = 40LL;
    return result;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_http_security_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http_security_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v15 = "nw_http_security_serialize_options";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http_security_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http_security_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_security_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 40)
    {
      BOOL v7 = nw_http_security_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_http_security_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v22 = "nw_http_security_deserialize_options";
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_http_security_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_http_security_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

id nw_protocol_copy_http_security_definition()
{
  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
  }
  return (id)nw_protocol_copy_http_security_definition_http_security_definition;
}

BOOL nw_protocol_options_is_http_security(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_security_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_security_definition_http_security_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_security";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_security";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_security";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_security";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_security";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_http_security_options_copy_hsts_storage_block_invoke(uint64_t a1, id *a2)
{
  return 1LL;
}

void nw_http_security_options_set_hsts_storage(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_http_security_options_set_hsts_storage";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_security_options_set_hsts_storage";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v27 = "nw_http_security_options_set_hsts_storage";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_security_options_set_hsts_storage";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_security_options_set_hsts_storage";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_security_options_set_hsts_storage_block_invoke(uint64_t a1, id *location)
{
  return 1LL;
}

void nw_http_security_options_set_handler(void *a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_http_security_options_set_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_security_options_set_handler";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_http_security_options_set_handler";
          __int16 v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12) {
          goto LABEL_6;
        }
LABEL_41:
        free(v12);
        goto LABEL_6;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_security_options_set_handler";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_security_options_set_handler";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_security_options_set_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v4;

  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  return 1LL;
}

void *nw_http_security_options_copy_handler(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_security_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      os_log_type_t v24 = __Block_byref_object_copy__72694;
      uint64_t v25 = __Block_byref_object_dispose__72695;
      id v26 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_security_options_copy_handler_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40LL));
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http security", buf, 0xCu);
        }

void sub_1824D60C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_security_options_copy_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a2 + 16));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1LL;
}

id nw_http_security_options_copy_handler_queue(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_security_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      os_log_type_t v24 = __Block_byref_object_copy__4;
      uint64_t v25 = __Block_byref_object_dispose__5;
      id v26 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_security_options_copy_handler_queue_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http security", buf, 0xCu);
        }

void sub_1824D6688( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_security_options_copy_handler_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t __nw_http_security_options_get_skip_hsts_lookup_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 32) & 1;
  return 1LL;
}

uint64_t __nw_http_security_options_set_skip_hsts_lookup_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

BOOL nw_http_security_options_get_save_hsts_with_untrusted_root_cert(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = nw_protocol_options_copy_definition(v1);
  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v2,  (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

  if (is_equal)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v18 = 0;
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_http_security_options_get_save_hsts_with_untrusted_root_cert_block_invoke;
    v14[3] = &unk_189BC60A8;
    v14[4] = buf;
    nw_protocol_options_access_handle(v1, v14);
    BOOL v4 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s protocol options are not http security", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s protocol options are not http security, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s protocol options are not http security, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s protocol options are not http security, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824D6A4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_security_options_get_save_hsts_with_untrusted_root_cert_block_invoke( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 32) & 2) != 0;
  return 1LL;
}

uint64_t __nw_http_security_options_set_save_hsts_with_untrusted_root_cert_block_invoke( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

uint64_t __nw_http_security_options_copy_alt_svc_storage_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_http_cookie_options_copy_cookie_storage(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      os_log_type_t v24 = __Block_byref_object_copy__4;
      uint64_t v25 = __Block_byref_object_dispose__5;
      id v26 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_cookie_options_copy_cookie_storage_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }

void sub_1824D7030( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_cookie_options_copy_cookie_storage_block_invoke(uint64_t a1, id *a2)
{
  return 1LL;
}

void nw_http_cookie_options_set_cookie_storage(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_cookie_options_set_cookie_storage";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_cookie_options_set_cookie_storage_block_invoke(uint64_t a1, id *location)
{
  return 1LL;
}

uint64_t __nw_http_cookie_options_copy_transform_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a2 + 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1LL;
}

uint64_t __nw_http_cookie_options_set_transform_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)(a2 + _Block_object_dispose(va, 8) = v3;

  return 1LL;
}

uint64_t nw_http_cookie_options_get_cookie_partition_identifier(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v24 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_cookie_options_get_cookie_partition_identifier_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(void *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_cookie_partition_identifier";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }

void sub_1824D7BA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_cookie_options_get_cookie_partition_identifier_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 16);
  return 1LL;
}

BOOL __nw_http_cookie_options_set_cookie_partition_identifier_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 16);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 16) = 0LL;
  }

  uint64_t v5 = *(const char **)(a1 + 32);
  if (!v5) {
    return 1LL;
  }
  id v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(void *)(a2 + 16) = v6;
    return 1LL;
  }

  __nwlog_obj();
  os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t __nw_http_cookie_options_set_allow_only_partitioned_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xF7 | (8 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

uint64_t __nw_http_cookie_options_get_allow_only_partitioned_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 32) & 8) != 0;
  return 1LL;
}

uint64_t nw_http_cookie_options_copy_site_for_cookies(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_cookie_options_copy_site_for_cookies_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      uint64_t v5 = *(void *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }

void sub_1824D8274( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_cookie_options_copy_site_for_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(id *)(a2 + 24);
  return 1LL;
}

uint64_t __nw_http_cookie_options_set_site_for_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

BOOL nw_http_cookie_options_get_is_top_level_navigation(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_cookie_options_get_is_top_level_navigation_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      BOOL v5 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }

void sub_1824D8834( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_cookie_options_get_is_top_level_navigation_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 32) & 1;
  return 1LL;
}

uint64_t __nw_http_cookie_options_set_is_top_level_navigation_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

uint64_t __nw_http_cookie_options_get_should_not_send_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 32) & 2) != 0;
  return 1LL;
}

uint64_t __nw_http_cookie_options_set_should_not_send_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

uint64_t __nw_http_cookie_options_get_should_not_save_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 32) & 4) != 0;
  return 1LL;
}

uint64_t __nw_http_cookie_options_set_should_not_save_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFB | (4 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

uint64_t __nw_http_alt_svc_options_copy_alt_svc_storage_block_invoke(uint64_t a1, id *a2)
{
  return 1LL;
}

void nw_http_alt_svc_options_set_alt_svc_storage(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_alt_svc_options_set_alt_svc_storage_block_invoke(uint64_t a1, id *location)
{
  return 1LL;
}

uint64_t __nw_http_alt_svc_options_set_assumes_http3_capable_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 8) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

uint64_t __nw_http_alt_svc_options_get_assumes_http3_capable_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 8) & 1;
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_http_early_data_create_options()
{
  if (nw_protocol_copy_http_early_data_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http_early_data_definition_onceToken, &__block_literal_global_34_73756);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition);
}

BOOL __nw_protocol_copy_http_early_data_definition_block_invoke()
{
  if (nw_protocol_http_early_data_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_early_data_identifier::onceToken, &__block_literal_global_63649);
  }
  v0 = nw_protocol_definition_create_with_identifier(&nw_protocol_http_early_data_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition;
  nw_protocol_copy_http_early_data_definition_http_early_data_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition,  (uint64_t)nw_http_early_data_allocate_options,  (uint64_t)nw_http_early_data_copy_options,  (uint64_t)nw_http_early_data_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition,  (uint64_t)nw_http_early_data_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition,  0,  (uint64_t)nw_http_early_data_serialize_options,  (uint64_t)nw_http_early_data_deserialize_options);
  if (nw_protocol_http_early_data_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_early_data_identifier::onceToken, &__block_literal_global_63649);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http_early_data_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition,  (uint64_t)nw_protocol_http_early_data_create,  0LL);
}

BOOL nw_http_early_data_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 4uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  BOOL v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_early_data_copy_options(void *a1, _BYTE *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_http_early_data_copy_options";
    id v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      id v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_http_early_data_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v18 = "nw_http_early_data_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_http_early_data_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_http_early_data_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http_early_data_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    free(a2);
    return;
  }

  __nwlog_obj();
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v12 = "nw_http_early_data_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_early_data_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v12 = "nw_http_early_data_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v8) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_early_data_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_early_data_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http_early_data_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }

  return result;
}

BOOL nw_http_early_data_serialize_options(void *a1, _BYTE *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_early_data_copy_options(a1, a2);
    *a3 = 4LL;
    return result;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_http_early_data_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_early_data_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v15 = "nw_http_early_data_serialize_options";
            __int16 v16 = 2082;
            BOOL v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_early_data_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_early_data_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_early_data_deserialize_options(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      BOOL v7 = nw_http_early_data_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_early_data_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_early_data_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_early_data_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options)), b"
                "acktrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_early_data_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_early_data_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options)), dumpi"
            "ng backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_early_data_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_early_data_deserialize_options";
          __int16 v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

id nw_protocol_copy_http_early_data_definition()
{
  if (nw_protocol_copy_http_early_data_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http_early_data_definition_onceToken, &__block_literal_global_34_73756);
  }
  return (id)nw_protocol_copy_http_early_data_definition_http_early_data_definition;
}

BOOL nw_protocol_options_is_http_early_data(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_early_data_definition_onceToken[0] != -1) {
      dispatch_once(nw_protocol_copy_http_early_data_definition_onceToken, &__block_literal_global_34_73756);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_early_data_definition_http_early_data_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_early_data";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_early_data";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_early_data";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_early_data";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_early_data";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

NWConcrete_nw_protocol_options *nw_http_sniffing_create_options()
{
  if (nw_protocol_copy_http_sniffing_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_35);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition);
}

BOOL __nw_protocol_copy_http_sniffing_definition_block_invoke()
{
  if (nw_protocol_http_sniffing_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_sniffing_identifier::onceToken, &__block_literal_global_498);
  }
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http_sniffing_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;
  nw_protocol_copy_http_sniffing_definition_http_sniffing_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition,  (uint64_t)nw_http_sniffing_allocate_options,  (uint64_t)nw_http_sniffing_copy_options,  (uint64_t)nw_http_sniffing_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition,  (uint64_t)nw_http_sniffing_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition,  0,  (uint64_t)nw_http_sniffing_serialize_options,  (uint64_t)nw_http_sniffing_deserialize_options);
  if (nw_protocol_http_sniffing_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_sniffing_identifier::onceToken, &__block_literal_global_498);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http_sniffing_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition,  (uint64_t)nw_protocol_http_sniffing_create,  0LL);
}

BOOL nw_http_sniffing_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 4uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_sniffing_copy_options(void *a1, _BYTE *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_http_sniffing_copy_options";
    BOOL v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      id v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_sniffing_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_http_sniffing_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_sniffing_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http_sniffing_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http_sniffing_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    free(a2);
    return;
  }

  __nwlog_obj();
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v12 = "nw_http_sniffing_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_sniffing_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v12 = "nw_http_sniffing_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v8) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_sniffing_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_sniffing_deallocate_options";
        id v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http_sniffing_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }

  return result;
}

BOOL nw_http_sniffing_serialize_options(void *a1, _BYTE *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_sniffing_copy_options(a1, a2);
    *a3 = 4LL;
    return result;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_http_sniffing_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_sniffing_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v15 = "nw_http_sniffing_serialize_options";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_sniffing_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_http_sniffing_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_sniffing_deserialize_options(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      BOOL v7 = nw_http_sniffing_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_sniffing_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http_sniffing_deserialize_options";
      __int16 v23 = 2082;
      char v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http_sniffing_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_http_sniffing_deserialize_options";
          __int16 v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

id nw_protocol_copy_http_sniffing_definition()
{
  if (nw_protocol_copy_http_sniffing_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_35);
  }
  return (id)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;
}

BOOL nw_protocol_options_is_http_sniffing(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_sniffing_definition_onceToken[0] != -1) {
      dispatch_once(nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_35);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_sniffing_definition_http_sniffing_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_sniffing";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_sniffing";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_sniffing";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_sniffing";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_sniffing";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_protocol_copy_oblivious_http_definition()
{
  if (nw_protocol_copy_oblivious_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_36_73823);
  }
  return (id)nw_protocol_copy_oblivious_http_definition_ohttp_definition;
}

BOOL __nw_protocol_copy_oblivious_http_definition_block_invoke()
{
  if (nw_protocol_oblivious_http_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28577);
  }
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition;
  nw_protocol_copy_oblivious_http_definition_ohttp_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition,  (uint64_t)nw_oblivious_http_allocate_options,  (uint64_t)nw_oblivious_http_copy_options,  (uint64_t)nw_oblivious_http_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition,  (uint64_t)nw_oblivious_http_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition,  0,  (uint64_t)nw_oblivious_http_serialize_options,  (uint64_t)nw_oblivious_http_deserialize_options);
  if (nw_protocol_oblivious_http_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28577);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier,  (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition,  (uint64_t)nw_protocol_oblivious_http_create,  0LL);
}

BOOL nw_oblivious_http_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 0x28uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  id v6 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v6);
  if (!result)
  {
    free(v6);
LABEL_2:
    id v3 = (void *)v2[1];
    v2[1] = 0LL;

    v2[2] = 0LL;
    v2[3] = 0LL;

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_oblivious_http_copy_options(void *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_oblivious_http_copy_options";
    os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v24))
    {
LABEL_32:
      if (v12) {
        free(v12);
      }
      id v4 = 0LL;
      goto LABEL_10;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_oblivious_http_copy_options";
        uint64_t v15 = "%{public}s called with null existing_handle";
LABEL_30:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else
    {
      if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v23 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_oblivious_http_copy_options";
            __int16 v28 = 2082;
            uint64_t v29 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (!v23) {
          goto LABEL_31;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_oblivious_http_copy_options";
        uint64_t v15 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_30;
      }

      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_oblivious_http_copy_options";
        uint64_t v15 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_30;
      }
    }

void nw_oblivious_http_deallocate_options(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = (void *)a2[1];
    a2[1] = 0LL;

    id v4 = (void *)a2[2];
    if (v4)
    {
      free(v4);
      a2[2] = 0LL;
    }

    id v5 = (void *)a2[3];
    if (v5) {
      free(v5);
    }
    free(a2);
    return;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_oblivious_http_deallocate_options";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_oblivious_http_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v16 = "nw_oblivious_http_deallocate_options";
            __int16 v17 = 2082;
            BOOL v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v12) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_oblivious_http_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_oblivious_http_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

BOOL nw_oblivious_http_options_are_equal(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  BOOL v6 = a2 == a3;
  if (a2 != a3 && a2 && a3)
  {
    BOOL v7 = *(void **)(a2 + 8);
    os_log_type_t v8 = *(void **)(a3 + 8);
    if (v7 != v8 && v7 && v8)
    {
      if (!xpc_equal(v7, v8)) {
        goto LABEL_23;
      }
    }

    else if (v7 != v8)
    {
      goto LABEL_23;
    }

    os_log_type_t v9 = *(const char **)(a2 + 16);
    os_log_type_t v10 = *(const char **)(a3 + 16);
    if (v9 != v10 && v9 && v10)
    {
      if (strcmp(v9, v10)) {
        goto LABEL_23;
      }
    }

    else if (v9 != v10)
    {
      goto LABEL_23;
    }

    BOOL v11 = *(const char **)(a2 + 24);
    BOOL v12 = *(const char **)(a3 + 24);
    if (v11 != v12 && v11 && v12)
    {
      if (!strcmp(v11, v12))
      {
LABEL_22:
        if (((*(_BYTE *)(a3 + 32) ^ *(_BYTE *)(a2 + 32)) & 7) == 0)
        {
          BOOL v6 = *(void *)a2 == *(void *)a3;
          goto LABEL_24;
        }
      }
    }

    else if (v11 == v12)
    {
      goto LABEL_22;
    }

BOOL nw_oblivious_http_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_oblivious_http_serialize_options";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_oblivious_http_serialize_options";
          uint64_t v32 = "%{public}s called with null existing_handle";
LABEL_63:
          _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
        }

BOOL nw_oblivious_http_deserialize_options(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    size_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_oblivious_http_deserialize_options";
    int v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v21, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_oblivious_http_deserialize_options";
          char v24 = "%{public}s called with null serialized_bytes";
LABEL_61:
          _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
        }

id nw_protocol_copy_oblivious_http_contexts_definition()
{
  if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_37_73860);
  }
  return (id)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition;
}

BOOL __nw_protocol_copy_oblivious_http_contexts_definition_block_invoke()
{
  if (nw_protocol_oblivious_http_contexts_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28583);
  }
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition;
  nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition,  (uint64_t)nw_oblivious_http_allocate_options,  (uint64_t)nw_oblivious_http_copy_options,  (uint64_t)nw_oblivious_http_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition,  (uint64_t)nw_oblivious_http_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition,  0,  (uint64_t)nw_oblivious_http_serialize_options,  (uint64_t)nw_oblivious_http_deserialize_options);
  if (nw_protocol_oblivious_http_contexts_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28583);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier,  (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition,  (uint64_t)nw_protocol_oblivious_http_create,  0LL);
}

NWConcrete_nw_protocol_options *nw_oblivious_http_create_options(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    size_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_oblivious_http_create_options";
    xpc_object_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_oblivious_http_create_options";
      uint64_t v12 = "%{public}s called with null oblivious_config";
LABEL_46:
      _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      goto LABEL_47;
    }

    if (!v20)
    {
      __nwlog_obj();
      size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_oblivious_http_create_options";
        uint64_t v12 = "%{public}s called with null oblivious_config, backtrace limit exceeded";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_oblivious_http_create_options";
        uint64_t v12 = "%{public}s called with null oblivious_config, no backtrace";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (!v16) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v23 = "nw_oblivious_http_create_options";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    uint64_t v17 = "%{public}s called with null oblivious_config, dumping backtrace:%{public}s";
LABEL_32:
    _os_log_impl(&dword_181A5C000, v10, v11, v17, buf, 0x16u);
LABEL_33:

    free(backtrace_string);
    goto LABEL_48;
  }

  if (!a2)
  {
    __nwlog_obj();
    size_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_oblivious_http_create_options";
    xpc_object_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_oblivious_http_create_options";
      uint64_t v12 = "%{public}s called with null oblivious_config_length";
      goto LABEL_46;
    }

    if (!v20)
    {
      __nwlog_obj();
      size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_oblivious_http_create_options";
        uint64_t v12 = "%{public}s called with null oblivious_config_length, backtrace limit exceeded";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_oblivious_http_create_options";
        uint64_t v12 = "%{public}s called with null oblivious_config_length, no backtrace";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (!v18) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v23 = "nw_oblivious_http_create_options";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    uint64_t v17 = "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s";
    goto LABEL_32;
  }

  if (a3)
  {
    if (nw_protocol_copy_oblivious_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_36_73823);
    }
    options = nw_protocol_create_options((void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition);
    nw_oblivious_http_set_config(options, a1, a2);
    nw_oblivious_http_set_request_path(options, a3);
    return options;
  }

  __nwlog_obj();
  size_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_oblivious_http_create_options";
  xpc_object_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_oblivious_http_create_options";
        uint64_t v12 = "%{public}s called with null request_path";
        goto LABEL_46;
      }

void nw_oblivious_http_set_config(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (nw_protocol_options_is_oblivious_http(v5))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_oblivious_http_set_config_block_invoke;
    v13[3] = &__block_descriptor_48_e9_B16__0_v8l;
    v13[4] = a2;
    v13[5] = a3;
    nw_protocol_options_access_handle(v5, v13);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_oblivious_http_set_config";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v15 = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &v15, &v14))
  {
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v15;
      if (os_log_type_enabled(v8, v15))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_oblivious_http_set_config";
        size_t v10 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = v15;
        BOOL v12 = os_log_type_enabled(v8, v15);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v17 = "nw_oblivious_http_set_config";
            __int16 v18 = 2082;
            BOOL v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v12) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_oblivious_http_set_config";
        size_t v10 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v15;
      if (os_log_type_enabled(v8, v15))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_oblivious_http_set_config";
        size_t v10 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }

void nw_oblivious_http_set_request_path(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 3221225472LL;
    v11[2] = __nw_oblivious_http_set_request_path_block_invoke;
    v11[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v11[4] = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_oblivious_http_set_request_path";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_request_path";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_oblivious_http_set_request_path";
            __int16 v16 = 2082;
            uint64_t v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_request_path";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_request_path";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_protocol_options_is_oblivious_http(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_oblivious_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_36_73823);
    }
    id v3 = (id)nw_protocol_copy_oblivious_http_definition_ohttp_definition;
    if (nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3))
    {
      BOOL is_equal_unsafe = 1LL;
    }

    else
    {
      if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_37_73860);
      }
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition);
    }

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_protocol_options_is_oblivious_http";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_options_is_oblivious_http";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_protocol_options_is_oblivious_http";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_options_is_oblivious_http";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_options_is_oblivious_http";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL __nw_oblivious_http_set_request_path_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a2 + 16);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 16) = 0LL;
  }

  id v5 = *(const char **)(a1 + 32);
  if (!v5) {
    return 1LL;
  }
  id v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(void *)(a2 + 16) = v6;
    return 1LL;
  }

  __nwlog_obj();
  size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t __nw_oblivious_http_set_config_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(const void **)(a1 + 32);
  if (v4 && (size_t v5 = *(void *)(a1 + 40)) != 0)
  {
    xpc_object_t v6 = xpc_data_create(v4, v5);
    os_log_type_t v7 = *(void **)(a2 + 8);
    *(void *)(a2 + _Block_object_dispose(va, 8) = v6;
  }

  else
  {
    os_log_type_t v7 = *(void **)(a2 + 8);
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  }

  *(_BYTE *)(a2 + 32) &= ~4u;
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_oblivious_http_create_options_with_context( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_oblivious_http_create_options_with_context";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_oblivious_http_create_options_with_context";
      char v14 = "%{public}s called with null oblivious_config";
LABEL_46:
      _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
      goto LABEL_47;
    }

    if (!v22)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null oblivious_config, backtrace limit exceeded";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v13 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null oblivious_config, no backtrace";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (!v18) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v25 = "nw_oblivious_http_create_options_with_context";
    __int16 v26 = 2082;
    uint64_t v27 = backtrace_string;
    BOOL v19 = "%{public}s called with null oblivious_config, dumping backtrace:%{public}s";
LABEL_32:
    _os_log_impl(&dword_181A5C000, v12, v13, v19, buf, 0x16u);
LABEL_33:

    free(backtrace_string);
    goto LABEL_48;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_oblivious_http_create_options_with_context";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_oblivious_http_create_options_with_context";
      char v14 = "%{public}s called with null oblivious_config_length";
      goto LABEL_46;
    }

    if (!v22)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null oblivious_config_length, backtrace limit exceeded";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v13 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null oblivious_config_length, no backtrace";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (!v20) {
      goto LABEL_33;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v25 = "nw_oblivious_http_create_options_with_context";
    __int16 v26 = 2082;
    uint64_t v27 = backtrace_string;
    BOOL v19 = "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s";
    goto LABEL_32;
  }

  if (a3)
  {
    if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_37_73860);
    }
    options = nw_protocol_create_options((void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition);
    nw_oblivious_http_set_config(options, a1, a2);
    nw_oblivious_http_set_request_path(options, a3);
    nw_oblivious_http_set_use_chunks(options, 1);
    nw_oblivious_http_set_context_id(options, a4);
    return options;
  }

  __nwlog_obj();
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v25 = "nw_oblivious_http_create_options_with_context";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v11, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_oblivious_http_create_options_with_context";
        char v14 = "%{public}s called with null request_path";
        goto LABEL_46;
      }

void nw_oblivious_http_set_use_chunks(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 3221225472LL;
    v11[2] = __nw_oblivious_http_set_use_chunks_block_invoke;
    v11[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v12 = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_oblivious_http_set_use_chunks";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_oblivious_http_set_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v16 = "nw_oblivious_http_set_use_chunks";
            __int16 v17 = 2082;
            BOOL v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_oblivious_http_set_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_oblivious_http_set_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }

void nw_oblivious_http_set_context_id(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 3221225472LL;
    v11[2] = __nw_oblivious_http_set_context_id_block_invoke;
    v11[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v11[4] = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_oblivious_http_set_context_id";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_context_id";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_oblivious_http_set_context_id";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_context_id";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_oblivious_http_set_context_id";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }

uint64_t __nw_oblivious_http_set_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) |= 2u;
  *(void *)a2 = *(void *)(a1 + 32);
  return 1LL;
}

uint64_t __nw_oblivious_http_set_use_chunks_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

uint64_t nw_oblivious_http_set_standalone_aead_key(void *a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = __nw_oblivious_http_set_standalone_aead_key_block_invoke;
  v4[3] = &__block_descriptor_48_e9_B16__0_v8l;
  v4[4] = a2;
  v4[5] = a3;
  return nw_protocol_options_access_handle(a1, v4);
}

uint64_t __nw_oblivious_http_set_standalone_aead_key_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(const void **)(a1 + 32);
  if (v4 && (size_t v5 = *(void *)(a1 + 40)) != 0)
  {
    xpc_object_t v6 = xpc_data_create(v4, v5);
    os_log_type_t v7 = *(void **)(a2 + 8);
    *(void *)(a2 + _Block_object_dispose(va, 8) = v6;
  }

  else
  {
    os_log_type_t v7 = *(void **)(a2 + 8);
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  }

  *(_BYTE *)(a2 + 32) |= 4u;
  return 1LL;
}

uint64_t nw_oblivious_http_get_config_is_standalone_aead(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    uint64_t v2 = nw_protocol_options_access_handle(v1, &__block_literal_global_39_73933);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
            __int16 v15 = 2082;
            __int16 v16 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_config_is_standalone_aead";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }

uint64_t __nw_oblivious_http_get_config_is_standalone_aead_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 32) >> 2) & 1;
}

id nw_oblivious_http_copy_config(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    __int16 v16 = __Block_byref_object_copy__4;
    uint64_t v17 = __Block_byref_object_dispose__5;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_oblivious_http_copy_config_block_invoke;
    v12[3] = &unk_189BC60A8;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_copy_config";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824DEFB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_oblivious_http_copy_config_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t nw_oblivious_http_get_request_path(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_oblivious_http_get_request_path_block_invoke;
    v12[3] = &unk_189BC60A8;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_request_path";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824DF2F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_oblivious_http_get_request_path_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 16);
  return 1LL;
}

uint64_t nw_oblivious_http_get_use_chunks(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    uint64_t v2 = nw_protocol_options_access_handle(v1, &__block_literal_global_40);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_oblivious_http_get_use_chunks";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            char v14 = "nw_oblivious_http_get_use_chunks";
            __int16 v15 = 2082;
            uint64_t v16 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_chunks";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }

uint64_t __nw_oblivious_http_get_use_chunks_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 32) & 1;
}

uint64_t nw_oblivious_http_get_use_context_ids(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    uint64_t v2 = nw_protocol_options_access_handle(v1, &__block_literal_global_41_73962);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_oblivious_http_get_use_context_ids";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_context_ids";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            char v14 = "nw_oblivious_http_get_use_context_ids";
            __int16 v15 = 2082;
            uint64_t v16 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_context_ids";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_oblivious_http_get_use_context_ids";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }

uint64_t __nw_oblivious_http_get_use_context_ids_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 32) >> 1) & 1;
}

uint64_t nw_oblivious_http_get_context_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_oblivious_http_get_context_id_block_invoke;
    v12[3] = &unk_189BC60A8;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824DFB20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_oblivious_http_get_context_id_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

void nw_oblivious_http_set_media_type(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 3221225472LL;
    v11[2] = __nw_oblivious_http_set_media_type_block_invoke;
    v11[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v11[4] = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "nw_oblivious_http_set_media_type";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_oblivious_http_set_media_type";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v15 = "nw_oblivious_http_set_media_type";
            __int16 v16 = 2082;
            uint64_t v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v10) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_oblivious_http_set_media_type";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_oblivious_http_set_media_type";
        size_t v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL __nw_oblivious_http_set_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a2 + 24);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 24) = 0LL;
  }

  size_t v5 = *(const char **)(a1 + 32);
  if (!v5) {
    return 1LL;
  }
  xpc_object_t v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(void *)(a2 + 24) = v6;
    return 1LL;
  }

  __nwlog_obj();
  size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t nw_oblivious_http_get_media_type(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_oblivious_http_get_media_type_block_invoke;
    v12[3] = &unk_189BC60A8;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_oblivious_http_get_media_type";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824E0200( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_oblivious_http_get_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 24);
  return 1LL;
}

id *nw_http_create_metadata_for_request(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
  if (singleton)
  {
    v15[0] = MEMORY[0x1895F87A8];
    v15[1] = 3221225472LL;
    v15[2] = __nw_http_create_metadata_for_request_block_invoke;
    v15[3] = &unk_189BC6260;
    id v3 = v1;
    id v16 = v3;
    uint64_t v4 = (uint64_t)singleton[4];
    if (v4)
    {
      __nw_http_create_metadata_for_request_block_invoke((uint64_t)v15, v4);
      size_t v5 = v16;
    }

    else
    {
      size_t v5 = v3;
    }

    xpc_object_t v6 = singleton;

    goto LABEL_8;
  }

  __nwlog_obj();
  size_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_http_create_metadata_for_request";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_request";
        char v12 = "%{public}s called with null metadata";
LABEL_22:
        _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      }
    }

    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_http_create_metadata_for_request";
            __int16 v21 = 2082;
            char v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (!v14) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_request";
        char v12 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_22;
      }

      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_request";
        char v12 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_22;
      }
    }

uint64_t __nw_http_create_metadata_for_request_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id *nw_http_create_metadata_for_response(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
  if (singleton)
  {
    v15[0] = MEMORY[0x1895F87A8];
    v15[1] = 3221225472LL;
    v15[2] = __nw_http_create_metadata_for_response_block_invoke;
    v15[3] = &unk_189BC6260;
    id v3 = v1;
    id v16 = v3;
    uint64_t v4 = (uint64_t)singleton[4];
    if (v4)
    {
      __nw_http_create_metadata_for_response_block_invoke((uint64_t)v15, v4);
      size_t v5 = v16;
    }

    else
    {
      size_t v5 = v3;
    }

    xpc_object_t v6 = singleton;

    goto LABEL_8;
  }

  __nwlog_obj();
  size_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_http_create_metadata_for_response";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_response";
        char v12 = "%{public}s called with null metadata";
LABEL_22:
        _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      }
    }

    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_http_create_metadata_for_response";
            __int16 v21 = 2082;
            char v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (!v14) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_response";
        char v12 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_22;
      }

      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_for_response";
        char v12 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_22;
      }
    }

uint64_t __nw_http_create_metadata_for_response_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id *nw_http_create_metadata()
{
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  return nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
}

BOOL nw_protocol_metadata_is_http(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_definition_http_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  size_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_protocol_metadata_is_http";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_metadata_is_http";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_protocol_metadata_is_http";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_metadata_is_http";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_metadata_is_http";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_http_metadata_get_type(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_get_type_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_get_type_block_invoke((uint64_t)v22, v5);
        xpc_object_t v6 = (unsigned int *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        xpc_object_t v6 = (unsigned int *)&v26;
      }

      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

void sub_1824E10D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_metadata_get_type_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v4 = 1;
  }

  else
  {
    xpc_object_t v6 = *(void **)(a2 + 32);
    if (!v6) {
      return 1LL;
    }
    id v7 = v6;
    int status_code = _nw_http_response_get_status_code();

    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
    else {
      int v4 = 3;
    }
  }

  *(_DWORD *)(v3 + 24) = v4;
  return 1LL;
}

id nw_http_metadata_copy_request(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      int v26 = __Block_byref_object_copy__4;
      uint64_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_copy_request_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_copy_request_block_invoke((uint64_t)v22, v5);
        xpc_object_t v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        xpc_object_t v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

uint64_t __nw_http_metadata_copy_request_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_http_metadata_copy_response(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      int v26 = __Block_byref_object_copy__4;
      uint64_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_copy_response_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_copy_response_block_invoke((uint64_t)v22, v5);
        xpc_object_t v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        xpc_object_t v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

uint64_t __nw_http_metadata_copy_response_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_metadata_set_trailer_fields(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v28 = "nw_http_metadata_set_trailer_fields";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_metadata_set_trailer_fields";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "nw_http_metadata_set_trailer_fields";
          __int16 v29 = 2082;
          BOOL v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_metadata_set_trailer_fields";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_metadata_set_trailer_fields";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_metadata_set_trailer_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_http_metadata_copy_trailer_fields(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      int v26 = __Block_byref_object_copy__4;
      uint64_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_copy_trailer_fields_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_copy_trailer_fields_block_invoke((uint64_t)v22, v5);
        id v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        id v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

uint64_t __nw_http_metadata_copy_trailer_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_metadata_set_version(void *a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v28 = "nw_http_metadata_set_version";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_metadata_set_version";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "nw_http_metadata_set_version";
          __int16 v29 = 2082;
          BOOL v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_metadata_set_version";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_metadata_set_version";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_metadata_set_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_metadata_get_version(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_get_version_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_get_version_block_invoke((uint64_t)v22, v5);
        id v6 = (unsigned int *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        id v6 = (unsigned int *)&v26;
      }

      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

uint64_t __nw_http_metadata_get_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 48);
  return 1LL;
}

void nw_http_metadata_set_method(void *a1, int a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_set_method";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http_metadata_set_method";
          __int16 v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v10) {
          goto LABEL_8;
        }
LABEL_59:
        free(v10);
        goto LABEL_8;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_metadata_set_method_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = (id *)(a2 + 24);
  id v4 = *(id *)(a2 + 24);
  if (!v4)
  {
    id v4 = (id)_nw_http_request_create("GET", "https", 0LL, "/");
    objc_storeStrong(v3, v4);
  }

  int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = 1LL;
  switch(v5)
  {
    case 0:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      BOOL v22 = "nw_http_metadata_set_method_block_invoke";
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v19 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_metadata_set_method_block_invoke";
          BOOL v11 = "%{public}s Setting invalid method";
LABEL_27:
          BOOL v17 = v9;
          os_log_type_t v18 = v10;
LABEL_28:
          _os_log_impl(&dword_181A5C000, v17, v18, v11, buf, 0xCu);
          goto LABEL_29;
        }

        goto LABEL_29;
      }

      if (!v19)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_metadata_set_method_block_invoke";
          BOOL v11 = "%{public}s Setting invalid method, backtrace limit exceeded";
          goto LABEL_27;
        }

uint64_t nw_http_metadata_get_method(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_get_method_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_get_method_block_invoke((uint64_t)v22, v5);
        uint64_t v6 = (unsigned int *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = (unsigned int *)&v26;
      }

      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

void sub_1824E42A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL __nw_http_metadata_get_method_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v3 = *(id *)(a2 + 24);
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    int has_method = _nw_http_request_has_method((uint64_t)v5);

    if (has_method)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    }

    else
    {
      id v7 = v5;
      int v8 = _nw_http_request_has_method((uint64_t)v7);

      if (v8)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 2;
      }

      else
      {
        id v9 = v7;
        int v10 = _nw_http_request_has_method((uint64_t)v9);

        if (v10)
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 3;
        }

        else
        {
          id v11 = v9;
          int v12 = _nw_http_request_has_method((uint64_t)v11);

          if (v12)
          {
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 4;
          }

          else
          {
            id v13 = v11;
            int v14 = _nw_http_request_has_method((uint64_t)v13);

            if (v14)
            {
              *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 5;
            }

            else
            {
              id v15 = v13;
              int v16 = _nw_http_request_has_method((uint64_t)v15);

              if (v16)
              {
                *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 6;
              }

              else if (nw_http_request_has_method(v15, (uint64_t)"OPTIONS"))
              {
                *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 7;
              }

              else if (nw_http_request_has_method(v15, (uint64_t)"TRACE"))
              {
                *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 8;
              }

              else if (nw_http_request_has_method(v15, (uint64_t)"PATCH"))
              {
                *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 9;
              }

              else
              {
                BOOL v17 = nw_http_request_has_method(v15, (uint64_t)"CONNECT-UDP");
                uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8LL);
                if (v17) {
                  *(_DWORD *)(v18 + 24) = 100;
                }
                else {
                  *(_DWORD *)(v18 + 24) = 0;
                }
              }
            }
          }
        }
      }
    }

    goto LABEL_40;
  }

  __nwlog_obj();
  BOOL v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v30 = "nw_http_metadata_get_method_block_invoke";
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v20, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        char v30 = "nw_http_metadata_get_method_block_invoke";
        char v23 = "%{public}s metadata not request";
LABEL_36:
        _os_log_impl(&dword_181A5C000, v21, v22, v23, buf, 0xCu);
      }
    }

    else
    {
      if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        BOOL v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            char v30 = "nw_http_metadata_get_method_block_invoke";
            __int16 v31 = 2082;
            BOOL v32 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s metadata not request, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }

        if (!v25) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        char v30 = "nw_http_metadata_get_method_block_invoke";
        char v23 = "%{public}s metadata not request, no backtrace";
        goto LABEL_36;
      }

      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        char v30 = "nw_http_metadata_get_method_block_invoke";
        char v23 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_36;
      }
    }

void nw_http_metadata_set_path(void *a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v32 = "nw_http_metadata_set_path";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v32 = "nw_http_metadata_set_path";
          __int16 v33 = 2082;
          __int16 v34 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v10) {
          goto LABEL_8;
        }
LABEL_59:
        free(v10);
        goto LABEL_8;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v32 = "nw_http_metadata_set_path";
        _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_metadata_set_path_block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a2 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    id v4 = v2;
    _nw_http_request_set_path(v4, v3);
  }

  else
  {
    uint64_t v6 = _nw_http_request_create("GET", "https", 0LL, v3);
    id v4 = *(id *)(a2 + 24);
    *(void *)(a2 + 24) = v6;
  }

  return 1LL;
}

uint64_t nw_http_metadata_get_path(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      os_log_type_t v26 = __Block_byref_object_copy__4;
      os_log_type_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_get_path_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_get_path_block_invoke((uint64_t)v22, v5);
        uint64_t v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      uint64_t v7 = [v6 cStringUsingEncoding:5];
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

void sub_1824E5438( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL __nw_http_metadata_get_path_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v2 = *(void **)(a2 + 24);
  if (v2)
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_http_metadata_get_path_block_invoke_44;
    v13[3] = &unk_189BC6448;
    v13[4] = *(void *)(a1 + 32);
    id v3 = v2;
    id v4 = v13;
    _nw_http_request_access_path((uint64_t)v3, v4);

    return v2 != 0LL;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_http_metadata_get_path_block_invoke";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http_metadata_get_path_block_invoke";
        int v10 = "%{public}s metadata not request";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v17 = "nw_http_metadata_get_path_block_invoke";
            __int16 v18 = 2082;
            BOOL v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s metadata not request, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v12) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http_metadata_get_path_block_invoke";
        int v10 = "%{public}s metadata not request, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http_metadata_get_path_block_invoke";
        int v10 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

void __nw_http_metadata_get_path_block_invoke_44(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = [NSString stringWithCString:a2 encoding:5];
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

id nw_http_metadata_copy_endpoint(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      os_log_type_t v26 = __Block_byref_object_copy__4;
      os_log_type_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_copy_endpoint_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_copy_endpoint_block_invoke((uint64_t)v22, v5);
        uint64_t v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

void sub_1824E5CC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL __nw_http_metadata_copy_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v2 = *(void **)(a2 + 24);
  if (!v2)
  {
    __nwlog_obj();
    id v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_http_metadata_copy_endpoint_block_invoke";
    os_log_type_t v12 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v12, &type, &v18))
    {
LABEL_21:
      if (!v12) {
        return v2 != 0LL;
      }
      os_log_type_t v9 = (char *)v12;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_http_metadata_copy_endpoint_block_invoke";
        id v15 = "%{public}s metadata not request";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v21 = "nw_http_metadata_copy_endpoint_block_invoke";
            __int16 v22 = 2082;
            char v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s metadata not request, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v17) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_http_metadata_copy_endpoint_block_invoke";
        id v15 = "%{public}s metadata not request, no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_http_metadata_copy_endpoint_block_invoke";
        id v15 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_19;
      }
    }

void nw_http_metadata_set_endpoint(void *a1, void *a2)
{
  *(void *)&v55[13] = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    char v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_metadata_set_endpoint";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v50)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type;
      BOOL v39 = os_log_type_enabled(v31, type);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_http_metadata_set_endpoint";
          __int16 v54 = 2082;
          *(void *)uint64_t v55 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v31,  v38,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_27:
        if (!v15) {
          goto LABEL_29;
        }
LABEL_28:
        free(v15);
        goto LABEL_29;
      }

      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_181A5C000, v31, v38, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl( &dword_181A5C000,  v31,  v45,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_1824E69C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_http_metadata_set_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  nw_endpoint_t url = nw_endpoint_get_url(*(nw_endpoint_t *)(a1 + 32));
  if (url)
  {
    id v4 = *(void **)(a2 + 24);
    if (v4)
    {
      id v5 = v4;
      _nw_http_request_set_url();
    }

    else
    {
      uint64_t v6 = _nw_http_request_create_from_url("GET", url);
      uint64_t v7 = *(void **)(a2 + 24);
      *(void *)(a2 + 24) = v6;
    }

    return url != 0LL;
  }

  __nwlog_obj();
  int v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v19 = "nw_http_metadata_set_endpoint_block_invoke";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http_metadata_set_endpoint_block_invoke";
        id v13 = "%{public}s endpoint isn't url";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
      }
    }

    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            int v19 = "nw_http_metadata_set_endpoint_block_invoke";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s endpoint isn't url, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v15) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http_metadata_set_endpoint_block_invoke";
        id v13 = "%{public}s endpoint isn't url, no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http_metadata_set_endpoint_block_invoke";
        id v13 = "%{public}s endpoint isn't url, backtrace limit exceeded";
        goto LABEL_19;
      }
    }

void nw_http_metadata_set_status(void *a1, int a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_http_metadata_set_status";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v33 = "nw_http_metadata_set_status";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v10) {
          goto LABEL_8;
        }
LABEL_59:
        free(v10);
        goto LABEL_8;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_http_metadata_set_status";
        _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_metadata_set_status_block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a2 + 32);
  if (v2)
  {
    id v3 = v2;
    _nw_http_response_set_status_code();
  }

  else
  {
    uint64_t v5 = _nw_http_response_create((unsigned __int16)*(_DWORD *)(a1 + 32), 0LL);
    id v3 = *(id *)(a2 + 32);
    *(void *)(a2 + 32) = v5;
  }

  return 1LL;
}

uint64_t nw_http_metadata_get_status(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_get_status_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_get_status_block_invoke((uint64_t)v22, v5);
        id v6 = (unsigned int *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        id v6 = (unsigned int *)&v26;
      }

      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

void sub_1824E79AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL __nw_http_metadata_get_status_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v2 = *(void **)(a2 + 32);
  if (v2)
  {
    id v4 = v2;
    int status_code = _nw_http_response_get_status_code();

    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = status_code;
    return v2 != 0LL;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_http_metadata_get_status_block_invoke";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v8, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http_metadata_get_status_block_invoke";
        uint64_t v11 = "%{public}s metadata not response";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v17 = "nw_http_metadata_get_status_block_invoke";
            __int16 v18 = 2082;
            BOOL v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s metadata not response, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v13) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http_metadata_get_status_block_invoke";
        uint64_t v11 = "%{public}s metadata not response, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http_metadata_get_status_block_invoke";
        uint64_t v11 = "%{public}s metadata not response, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

void nw_http_metadata_add_header(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v39 = "nw_http_metadata_add_header";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v37 = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (v37 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = v37;
      BOOL v23 = os_log_type_enabled(v13, v37);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v39 = "nw_http_metadata_add_header";
          __int16 v40 = 2082;
          os_log_type_t v41 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_75:
        if (!v12) {
          goto LABEL_9;
        }
LABEL_76:
        free(v12);
        goto LABEL_9;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_181A5C000, v13, v22, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v39 = "nw_http_metadata_add_header";
        _os_log_impl( &dword_181A5C000,  v13,  v31,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_metadata_add_header_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  int v4 = strcmp(*(const char **)(a1 + 32), ":protocol");
  id v5 = *(void **)(a2 + 24);
  if (v4)
  {
    if (v5)
    {
      id v6 = v5;
    }

    else
    {
      uint64_t v10 = *(void **)(a2 + 32);
      int v9 = (id *)(a2 + 32);
      id v6 = v10;
      if (!v6)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_http_metadata_add_header_block_invoke";
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s Unknown metadata type, assuming response for bincompat",  buf,  0xCu);
        }

        id v6 = (id)_nw_http_response_create(200LL, 0LL);
        objc_storeStrong(v9, v6);
      }
    }

    nw_http_fields_append(v6, *(void *)(a1 + 32), *(void *)(a1 + 40));

    return 1LL;
  }

  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = v5;
    _nw_http_request_set_extended_connect_protocol(v8, v7);

    return 1LL;
  }

  __nwlog_obj();
  BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v23 = "nw_http_metadata_add_header_block_invoke";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v14, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_http_metadata_add_header_block_invoke";
        BOOL v17 = "%{public}s metadata not request";
LABEL_26:
        _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
      }
    }

    else
    {
      if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v23 = "nw_http_metadata_add_header_block_invoke";
            __int16 v24 = 2082;
            os_log_type_t v25 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s metadata not request, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }

        if (!v19) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_http_metadata_add_header_block_invoke";
        BOOL v17 = "%{public}s metadata not request, no backtrace";
        goto LABEL_26;
      }

      __nwlog_obj();
      BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_http_metadata_add_header_block_invoke";
        BOOL v17 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_26;
      }
    }

void nw_http_metadata_enumerate_headers(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v33 = "nw_http_metadata_enumerate_headers";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v33 = "nw_http_metadata_enumerate_headers";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v11) {
          goto LABEL_9;
        }
LABEL_60:
        free(v11);
        goto LABEL_9;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl( &dword_181A5C000,  v12,  v26,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_metadata_enumerate_headers_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v4 = *(void **)(a2 + 24);
  uint64_t v5 = MEMORY[0x1895F87A8];
  if (v4)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v33 = 1;
    v29[0] = MEMORY[0x1895F87A8];
    v29[1] = 3221225472LL;
    v29[2] = __nw_http_metadata_enumerate_headers_block_invoke_2;
    v29[3] = &unk_189BC6498;
    os_log_type_t v31 = buf;
    id v30 = *(id *)(a1 + 32);
    id v6 = v4;
    uint64_t v7 = v29;
    _nw_http_request_access_authority_field((uint64_t)v6, v7);

    if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
    {
      id v8 = *(void **)(a2 + 24);
      v26[0] = v5;
      v26[1] = 3221225472LL;
      v26[2] = __nw_http_metadata_enumerate_headers_block_invoke_4;
      v26[3] = &unk_189BC6498;
      os_log_type_t v28 = buf;
      id v27 = *(id *)(a1 + 32);
      nw_http_request_access_path_field(v8, v26);
      if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
      {
        id v9 = *(id *)(a2 + 24);
        int v10 = 0;
      }

      else
      {
        id v9 = 0LL;
        int v10 = 1;
      }
    }

    else
    {
      id v9 = 0LL;
      int v10 = 1;
    }

    _Block_object_dispose(buf, 8);
    if (v10) {
      goto LABEL_12;
    }
  }

  else
  {
    id v9 = *(id *)(a2 + 32);
  }

  if (v9)
  {
    v22[0] = v5;
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_metadata_enumerate_headers_block_invoke_49;
    v22[3] = &unk_189BC64C0;
    id v23 = *(id *)(a1 + 32);
    id v9 = v9;
    uint64_t v11 = v22;
    _nw_http_fields_enumerate((uint64_t)v9, v11);

LABEL_12:
    uint64_t v12 = 1LL;
    goto LABEL_13;
  }

  __nwlog_obj();
  os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v15, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null headers", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null headers, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
        _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null headers, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null headers, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824E941C(_Unwind_Exception *a1)
{
}

void __nw_http_metadata_enumerate_headers_block_invoke_2(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 3221225472LL;
  v5[2] = __nw_http_metadata_enumerate_headers_block_invoke_3;
  v5[3] = &unk_189BC6470;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  *(_OWORD *)id v6 = v4;
  nw_http_field_access(a2, v5);
}

void __nw_http_metadata_enumerate_headers_block_invoke_4(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 3221225472LL;
  v5[2] = __nw_http_metadata_enumerate_headers_block_invoke_5;
  v5[3] = &unk_189BC6470;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  *(_OWORD *)id v6 = v4;
  nw_http_field_access(a2, v5);
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke_49(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke_5(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke_3(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

id *nw_http_create_metadata_for_capsule(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
  if (singleton)
  {
    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 3221225472LL;
    v17[2] = __nw_http_create_metadata_for_capsule_block_invoke;
    v17[3] = &unk_189BC64E8;
    uint64_t v19 = a1;
    id v5 = v3;
    id v18 = v5;
    uint64_t v6 = (uint64_t)singleton[4];
    if (v6)
    {
      __nw_http_create_metadata_for_capsule_block_invoke((uint64_t)v17, v6);
      uint64_t v7 = v18;
    }

    else
    {
      uint64_t v7 = v5;
    }

    id v8 = singleton;

    goto LABEL_8;
  }

  __nwlog_obj();
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v23 = "nw_http_create_metadata_for_capsule";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v11, &v21, &v20))
  {
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v21;
      if (os_log_type_enabled(v12, v21))
      {
        *(_DWORD *)buf = 136446210;
        id v23 = "nw_http_create_metadata_for_capsule";
        os_log_type_t v14 = "%{public}s called with null metadata";
LABEL_22:
        _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
      }
    }

    else
    {
      if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = v21;
        BOOL v16 = os_log_type_enabled(v12, v21);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            id v23 = "nw_http_create_metadata_for_capsule";
            __int16 v24 = 2082;
            BOOL v25 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (!v16) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        id v23 = "nw_http_create_metadata_for_capsule";
        os_log_type_t v14 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_22;
      }

      __nwlog_obj();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v21;
      if (os_log_type_enabled(v12, v21))
      {
        *(_DWORD *)buf = 136446210;
        id v23 = "nw_http_create_metadata_for_capsule";
        os_log_type_t v14 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_22;
      }
    }

uint64_t __nw_http_create_metadata_for_capsule_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)(a1 + 40);
  objc_storeStrong((id *)(a2 + 16), *(id *)(a1 + 32));
  return 1LL;
}

BOOL nw_http_metadata_is_capsule(void *a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_http_metadata_is_capsule";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }

      goto LABEL_38;
    }

    if (!v22)
    {
      __nwlog_obj();
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_http_metadata_is_capsule";
        _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_38;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }

      goto LABEL_38;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v25 = "nw_http_metadata_is_capsule";
      __int16 v26 = 2082;
      id v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_26;
  }

  id v3 = (id *)v1;
  id v4 = v3[1];

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_http_metadata_is_capsule";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http", buf, 0xCu);
      }

uint64_t nw_http_metadata_get_capsule_type(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_metadata_get_capsule_type_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      id v5 = (void *)*((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_get_capsule_type_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http", buf, 0xCu);
        }

uint64_t __nw_http_metadata_get_capsule_type_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

id nw_http_metadata_copy_capsule_data(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v26 = __Block_byref_object_copy__4;
      id v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_copy_capsule_data_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_copy_capsule_data_block_invoke((uint64_t)v22, v5);
        uint64_t v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

uint64_t __nw_http_metadata_copy_capsule_data_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t nw_http_metadata_get_datagram_context_id(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_metadata_get_datagram_context_id_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_get_datagram_context_id_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http", buf, 0xCu);
        }

uint64_t __nw_http_metadata_get_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 8);
  return 1LL;
}

void nw_http_metadata_set_datagram_context_id(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_http_metadata_set_datagram_context_id";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_metadata_set_datagram_context_id";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          id v27 = "nw_http_metadata_set_datagram_context_id";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_metadata_set_datagram_context_id";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_http_metadata_set_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_metadata_set_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 144), 8) = *(void *)(a1 + 32);
  return 1LL;
}

id *nw_http_create_metadata_with_parsed_fields(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    if (a2)
    {
      id v6 = (void *)_nw_http_parsed_fields_copy_request();

      if (v6)
      {
        metadata_for_request = nw_http_create_metadata_for_request(v6);
LABEL_7:
        uint64_t v8 = metadata_for_request;
LABEL_9:

        goto LABEL_10;
      }
    }

    else
    {
      id v6 = (void *)_nw_http_parsed_fields_copy_response();

      if (v6)
      {
        metadata_for_request = nw_http_create_metadata_for_response(v6);
        goto LABEL_7;
      }
    }

    uint64_t v8 = 0LL;
    goto LABEL_9;
  }

  __nwlog_obj();
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
        os_log_type_t v14 = "%{public}s called with null parsed_fields";
LABEL_24:
        _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
      }
    }

    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
            __int16 v21 = 2082;
            os_log_type_t v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null parsed_fields, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }

        if (!v16) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
        os_log_type_t v14 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_24;
      }

      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_http_create_metadata_with_parsed_fields";
        os_log_type_t v14 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_24;
      }
    }

id nw_http_metadata_copy_header_fields(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v26 = __Block_byref_object_copy__4;
      id v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_metadata_copy_header_fields_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_metadata_copy_header_fields_block_invoke((uint64_t)v22, v5);
        id v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        id v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }

BOOL __nw_http_metadata_copy_header_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v4 = *(void **)(a2 + 24);
  if (!v4) {
    id v4 = *(void **)(a2 + 32);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), v4);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (!v5)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_http_metadata_copy_header_fields_block_invoke";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http_metadata_copy_header_fields_block_invoke";
        os_log_type_t v11 = "%{public}s called with null header_fields";
LABEL_18:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v17 = "nw_http_metadata_copy_header_fields_block_invoke";
            __int16 v18 = 2082;
            BOOL v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null header_fields, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (!v13) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http_metadata_copy_header_fields_block_invoke";
        os_log_type_t v11 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_18;
      }

      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_http_metadata_copy_header_fields_block_invoke";
        os_log_type_t v11 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_18;
      }
    }

void nw_http_metadata_set_request(void *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v3;
  id v6 = v5;
  if (v5)
  {
    id v7 = *((id *)v5 + 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v39 = "nw_protocol_metadata_copy_definition";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (__nwlog_fault(v12, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v39 = "nw_protocol_metadata_copy_definition";
          __int16 v40 = 2082;
          os_log_type_t v41 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v13, v24, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl( &dword_181A5C000,  v13,  v32,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_http_metadata_set_request_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 32);
  *(void *)(a2 + 32) = 0LL;

  return 1LL;
}

BOOL __nw_http_metadata_enumerate_modern_header_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = *(void **)(a2 + 24);
  if (!v3)
  {
    id v4 = *(id *)(a2 + 32);
    if (v4) {
      goto LABEL_4;
    }
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
    os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v18))
    {
LABEL_24:
      if (v12) {
        free(v12);
      }
      return 0LL;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
        os_log_type_t v15 = "%{public}s called with null header_fields";
LABEL_22:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
            __int16 v22 = 2082;
            char v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null header_fields, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (!v17) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
        os_log_type_t v15 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_22;
      }

      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
        os_log_type_t v15 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_22;
      }
    }

void nw_http_metadata_enumerate_modern_header_fields_combined(void *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v3;
  id v6 = v5;
  if (v5)
  {
    id v7 = *((id *)v5 + 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v39 = "nw_protocol_metadata_copy_definition";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (__nwlog_fault(v12, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v39 = "nw_protocol_metadata_copy_definition";
          __int16 v40 = 2082;
          os_log_type_t v41 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v13, v24, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl( &dword_181A5C000,  v13,  v32,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL __nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = *(void **)(a2 + 24);
  if (!v3)
  {
    id v4 = *(id *)(a2 + 32);
    if (v4) {
      goto LABEL_4;
    }
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
    os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v18))
    {
LABEL_24:
      if (v12) {
        free(v12);
      }
      return 0LL;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
        os_log_type_t v15 = "%{public}s called with null header_fields";
LABEL_22:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
            __int16 v22 = 2082;
            char v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null header_fields, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (!v17) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
        os_log_type_t v15 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_22;
      }

      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
        os_log_type_t v15 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_22;
      }
    }

uint64_t nw_http_metadata_legacy_serialize(void *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (a2)
  {
    id v5 = nw_protocol_metadata_copy_definition(v3);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v5,  (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v35 = 0LL;
      v31[0] = MEMORY[0x1895F87A8];
      v31[1] = 3221225472LL;
      v31[2] = __nw_http_metadata_legacy_serialize_block_invoke;
      v31[3] = &unk_189BC6510;
      v31[4] = buf;
      v31[5] = a2;
      if (v4)
      {
        uint64_t v7 = *((void *)v4 + 4);
        if (v7) {
          __nw_http_metadata_legacy_serialize_block_invoke((uint64_t)v31, v7);
        }
LABEL_8:
        uint64_t v8 = *(void *)(*(void *)&buf[8] + 24LL);
        _Block_object_dispose(buf, 8);
        goto LABEL_9;
      }

      __nwlog_obj();
      os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)char v36 = 136446210;
      os_log_type_t v37 = "nw_protocol_metadata_access_handle";
      BOOL v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v32 = 0;
      if (__nwlog_fault(v17, &type, &v32))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          char v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)char v36 = 136446210;
            os_log_type_t v37 = "nw_protocol_metadata_access_handle";
            _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null metadata", v36, 0xCu);
          }
        }

        else if (v32)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          char v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v26 = type;
          BOOL v27 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v27)
            {
              *(_DWORD *)char v36 = 136446466;
              os_log_type_t v37 = "nw_protocol_metadata_access_handle";
              __int16 v38 = 2082;
              BOOL v39 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v18,  v26,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  v36,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_61;
          }

          if (v27)
          {
            *(_DWORD *)char v36 = 136446210;
            os_log_type_t v37 = "nw_protocol_metadata_access_handle";
            _os_log_impl(&dword_181A5C000, v18, v26, "%{public}s called with null metadata, no backtrace", v36, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          char v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v30 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)char v36 = 136446210;
            os_log_type_t v37 = "nw_protocol_metadata_access_handle";
            _os_log_impl( &dword_181A5C000,  v18,  v30,  "%{public}s called with null metadata, backtrace limit exceeded",  v36,  0xCu);
          }
        }
      }

void sub_1824EDAEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t __nw_http_metadata_legacy_serialize_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = *(void **)(a2 + 24);
  if (v3)
  {
    id v4 = v3;
LABEL_4:
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = nw_http_fields_legacy_serialize( v4,  *(void *)(a1 + 40));

    return 1LL;
  }

  id v4 = *(id *)(a2 + 32);
  if (v4) {
    goto LABEL_4;
  }
  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_http_metadata_legacy_serialize_block_invoke";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http_metadata_legacy_serialize_block_invoke";
        uint64_t v10 = "%{public}s called with null header_fields";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v16 = "nw_http_metadata_legacy_serialize_block_invoke";
            __int16 v17 = 2082;
            char v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null header_fields, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v12) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http_metadata_legacy_serialize_block_invoke";
        uint64_t v10 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_http_metadata_legacy_serialize_block_invoke";
        uint64_t v10 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_19;
      }
    }

id nw_protocol_copy_http_client_definition()
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  return (id)nw_protocol_copy_http_client_definition_definition;
}

BOOL __nw_protocol_copy_http_client_definition_block_invoke()
{
  if (nw_protocol_http_client_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_client_identifier::onceToken, &__block_literal_global_29737);
  }
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http_client_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_client_definition_definition;
  nw_protocol_copy_http_client_definition_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_client_definition_definition,  (uint64_t)nw_http_client_allocate_options,  (uint64_t)nw_http_client_copy_options,  (uint64_t)nw_http_client_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http_client_definition_definition,  (uint64_t)nw_http_client_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_client_definition_definition,  0,  (uint64_t)nw_http_client_serialize_options,  (uint64_t)nw_http_client_deserialize_options);
  nw_protocol_definition_set_metadata_initializer( (void *)nw_protocol_copy_http_client_definition_definition,  0x48u,  nw_http_client_initialize_metadata,  nw_http_client_finalize_metadata);
  if (nw_protocol_http_client_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_client_identifier::onceToken, &__block_literal_global_29737);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http_client_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_client_definition_definition,  (uint64_t)nw_protocol_http_client_create,  0LL);
}

BOOL nw_http_client_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 0x10uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_client_copy_options(void *a1, const void **a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_client_copy_options";
    os_log_type_t v11 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault((const char *)v11, &type, &v19))
    {
LABEL_22:
      if (v11) {
        free(v11);
      }
      id v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_client_copy_options";
        os_log_type_t v14 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
      }
    }

    else
    {
      if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v18 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v22 = "nw_http_client_copy_options";
            __int16 v23 = 2082;
            uint64_t v24 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v18) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_client_copy_options";
        os_log_type_t v14 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_http_client_copy_options";
        os_log_type_t v14 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http_client_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0LL;

    id v4 = a2[1];
    a2[1] = 0LL;

    free(a2);
    return;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_http_client_deallocate_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_deallocate_options";
        os_log_type_t v9 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_http_client_deallocate_options";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v11) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_deallocate_options";
        os_log_type_t v9 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_deallocate_options";
        os_log_type_t v9 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http_client_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1];
  }
  return result;
}

BOOL nw_http_client_serialize_options(void *a1, const void **a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_client_copy_options(a1, a2);
    *a3 = 16LL;
    return result;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_http_client_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_http_client_serialize_options";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http_client_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_client_deserialize_options(void *a1, const void **a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 16)
    {
      BOOL v7 = nw_http_client_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_client_deserialize_options";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options)), backt"
                "race limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v22 = "nw_http_client_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options)), dumping b"
            "acktrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_http_client_deserialize_options";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_http_client_deserialize_options";
          os_log_type_t v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

void nw_http_client_initialize_metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 1LL;
  *(double *)(a2 + 16) = (double)0LL - *MEMORY[0x189604DA8] + (double)0LL * 0.000000001;
  BOOL v3 = nw_array_create();
  id v4 = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v3;
}

void nw_http_client_finalize_metadata(uint64_t a1, void *a2)
{
  BOOL v3 = (void *)a2[3];
  a2[3] = 0LL;

  id v4 = (void *)a2[4];
  a2[4] = 0LL;

  id v5 = (void *)a2[5];
  if (v5)
  {
    free(v5);
    a2[5] = 0LL;
  }

  id v6 = (void *)a2[6];
  a2[6] = 0LL;

  BOOL v7 = (void *)a2[7];
  a2[7] = 0LL;
}

NWConcrete_nw_protocol_options *nw_http_client_create_options()
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_client_definition_definition);
}

BOOL nw_protocol_options_is_http_client(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_client_definition_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_client";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_client";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_client";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_client";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_client";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_http_client_options_set_resend_handler_block_invoke(uint64_t a1, void **a2)
{
  BOOL v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *a2;
  *a2 = v3;

  return 1LL;
}

void *nw_http_client_options_copy_resend_handler(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    BOOL v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v24 = __Block_byref_object_copy__72694;
      uint64_t v25 = __Block_byref_object_dispose__72695;
      id v26 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_client_options_copy_resend_handler_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40LL));
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }

    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_client", buf, 0xCu);
        }

void sub_1824EF630( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_client_options_copy_resend_handler_block_invoke(uint64_t a1, const void **a2)
{
  BOOL v3 = _Block_copy(*a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1LL;
}

uint64_t __nw_http_client_options_set_retry_with_h1_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  BOOL v3 = _Block_copy(*(const void **)(a1 + 32));
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)(a2 + _Block_object_dispose(va, 8) = v3;

  return 1LL;
}

void *nw_http_client_options_copy_retry_with_h1_handler(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    BOOL v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v24 = __Block_byref_object_copy__72694;
      uint64_t v25 = __Block_byref_object_dispose__72695;
      id v26 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_client_options_copy_retry_with_h1_handler_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40LL));
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }

    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_client", buf, 0xCu);
        }

void sub_1824EFC28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_client_options_copy_retry_with_h1_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  BOOL v3 = _Block_copy(*(const void **)(a2 + 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1LL;
}

void nw_http_client_metadata_create_next_transaction(void *a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_client_metadata_create_next_transaction_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = v4[2];
    uint64_t v5 = v4[3];
    if (v6 == v5) {
      uint64_t v4 = 0LL;
    }
    else {
      uint64_t v4 = *(void **)(v5 - 8);
    }
  }

  BOOL v7 = v4;
  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_transaction_definition_definition);
  int v9 = *(_DWORD *)(a1 + 32);
  os_log_type_t v10 = singleton;
  BOOL v11 = v10;
  if (!v10)
  {
    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v19) {
          goto LABEL_13;
        }
        goto LABEL_50;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_set_start_reason";
        _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t nw_http_transaction_metadata_get_start_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_start_time_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_start_time_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

void nw_http_transaction_metadata_set_end_time(void *a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_transaction_metadata_set_end_time";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v26;
      if (os_log_type_enabled(v12, v26))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_transaction_metadata_set_end_time";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v26;
      BOOL v18 = os_log_type_enabled(v12, v26);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_transaction_metadata_set_end_time";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_transaction_metadata_set_end_time";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = v26;
      if (os_log_type_enabled(v12, v26))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_transaction_metadata_set_end_time";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL __nw_http_transaction_metadata_set_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  if (!v2)
  {
    *(void *)(a2 + 56) = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(a2 + 120);
    if (v3) {
      (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, *(void *)(a1 + 32), 4LL);
    }
  }

  return v2 == 0;
}

uint64_t __nw_http_transaction_metadata_get_start_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 48);
  return 1LL;
}

uint64_t __nw_http_transaction_metadata_set_start_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

void __nw_protocol_copy_http_transaction_definition_block_invoke()
{
  named = nw_protocol_definition_create_named(1, "http_transaction");
  id v1 = (void *)nw_protocol_copy_http_transaction_definition_definition;
  nw_protocol_copy_http_transaction_definition_definition = (uint64_t)named;

  nw_protocol_definition_set_metadata_initializer( (void *)nw_protocol_copy_http_transaction_definition_definition,  0x90u,  nw_http_transaction_initialize_metadata,  nw_http_transaction_finalize_metadata);
}

uint64_t nw_http_transaction_initialize_metadata(uint64_t a1, uint64_t a2)
{
  uint64_t result = mach_continuous_time();
  if (result <= 1) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = result;
  }
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = v4;
  return result;
}

void nw_http_transaction_finalize_metadata(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[12];
  a2[12] = 0LL;

  uint64_t v4 = (void *)a2[13];
  a2[13] = 0LL;

  uint64_t v5 = (void *)a2[14];
  a2[14] = 0LL;

  id v6 = (void *)a2[15];
  a2[15] = 0LL;

  BOOL v7 = (void *)a2[16];
  a2[16] = 0LL;
}

id nw_http_client_metadata_copy_current_transaction_metadata(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      os_log_type_t v26 = __Block_byref_object_copy__4;
      uint64_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_client_metadata_copy_current_transaction_metadata_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_client_metadata_copy_current_transaction_metadata_block_invoke((uint64_t)v22, v5);
        id v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        id v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_client", buf, 0xCu);
        }

uint64_t __nw_http_client_metadata_copy_current_transaction_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2 || (uint64_t v4 = *(void *)(v2 + 16), v3 = *(void *)(v2 + 24), v4 == v3)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *(void **)(v3 - 8);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), v5);
  return 1LL;
}

uint64_t __nw_http_client_metadata_get_transaction_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2) {
    uint64_t v2 = (uint64_t)(*(void *)(v2 + 24) - *(void *)(v2 + 16)) >> 3;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v2;
  return 1LL;
}

void nw_http_client_metadata_enumerate_transactions(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v28 = "nw_http_client_metadata_enumerate_transactions";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_client_metadata_enumerate_transactions";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "nw_http_client_metadata_enumerate_transactions";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_client_metadata_enumerate_transactions";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_client_metadata_enumerate_transactions";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_client_metadata_enumerate_transactions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 24);
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = __nw_http_client_metadata_enumerate_transactions_block_invoke_2;
  v4[3] = &unk_189BC8628;
  id v5 = *(id *)(a1 + 32);
  nw_array_apply(v2, (uint64_t)v4);

  return 1LL;
}

uint64_t __nw_http_client_metadata_enumerate_transactions_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void nw_http_client_metadata_set_initial_request(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v28 = "nw_http_client_metadata_set_initial_request";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_client_metadata_set_initial_request";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "nw_http_client_metadata_set_initial_request";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_client_metadata_set_initial_request";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_client_metadata_set_initial_request";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_client_metadata_set_initial_request_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t __nw_http_client_metadata_get_initial_request_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_client_metadata_set_prevent_timeout_callback(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_client_metadata_set_prevent_timeout_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *(void **)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = v3;

  return 1LL;
}

BOOL __nw_http_client_metadata_mark_end_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2)
  {
    mach_get_times();
    *(void *)(a2 + _Block_object_dispose(va, 8) = 1LL;
    *(double *)(a2 + 16) = (double)0LL - *MEMORY[0x189604DA8] + (double)0LL * 0.000000001;
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4 || (uint64_t v6 = *(void *)(v4 + 16), v5 = *(void *)(v4 + 24), v6 == v5))
    {
      id v8 = 0LL;
    }

    else
    {
      id v7 = *(id *)(v5 - 8);
      id v8 = v7;
      if (v7) {
        nw_http_transaction_metadata_set_end_time(v7, *(void *)(a2 + 8));
      }
    }
  }

  return v2 == 0;
}

uint64_t nw_http_client_metadata_get_start_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_client_metadata_get_start_time_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = (void *)*((void *)v2 + 4);
      if (v5)
      {
        __nw_http_client_metadata_get_start_time_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_client", buf, 0xCu);
        }

uint64_t __nw_http_client_metadata_get_start_time_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

uint64_t nw_http_client_metadata_get_end_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_client_metadata_get_end_time_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_client_metadata_get_end_time_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_client", buf, 0xCu);
        }

uint64_t __nw_http_client_metadata_get_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 8);
  return 1LL;
}

double nw_http_client_metadata_convert_time_to_absolute(void *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (!v29)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl( &dword_181A5C000,  v12,  v25,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
    }

uint64_t __nw_http_client_metadata_convert_time_to_absolute_block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    unint64_t v4 = *(void *)a2;
  }
  if (v4 <= *(void *)(a1 + 40))
  {
    uint64_t v9 = nw_delta_nanos(v4, *(void *)(a1 + 40));
    double v6 = *(double *)(a2 + 16);
    double v7 = (double)(unint64_t)v9;
    double v8 = 0.000000001;
  }

  else
  {
    uint64_t v5 = nw_delta_nanos(*(void *)(a1 + 40), v4);
    double v6 = *(double *)(a2 + 16);
    double v7 = (double)(unint64_t)v5;
    double v8 = -0.000000001;
  }

  *(double *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v6 + v7 * v8;
  return 1LL;
}

void nw_http_client_metadata_set_sniffed_media_type(void *a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  unint64_t v4 = v3;
  if (v3)
  {
    id v5 = *((id *)v3 + 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  double v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v34 = "nw_protocol_metadata_copy_definition";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v9, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_protocol_metadata_copy_definition";
          __int16 v35 = 2082;
          int v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v10, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl( &dword_181A5C000,  v10,  v27,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL __nw_http_client_metadata_set_sniffed_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a2 + 40);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 40) = 0LL;
  }

  id v5 = *(const char **)(a1 + 32);
  if (!v5) {
    return 1LL;
  }
  double v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(void *)(a2 + 40) = v6;
    return 1LL;
  }

  __nwlog_obj();
  double v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  uint64_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t __nw_http_client_metadata_get_sniffed_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 40);
  return 1LL;
}

void nw_http_client_metadata_set_client_error(void *a1, int a2)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  unint64_t v4 = v3;
  if (v3)
  {
    id v5 = *((id *)v3 + 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  double v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v35 = "nw_protocol_metadata_copy_definition";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v32 = 0;
  if (__nwlog_fault(v9, &type, &v32))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v35 = "nw_protocol_metadata_copy_definition";
          __int16 v36 = 2082;
          uint64_t v37 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v10, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_protocol_metadata_copy_definition";
        _os_log_impl( &dword_181A5C000,  v10,  v27,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_http_client_metadata_set_client_error_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t __nw_http_client_metadata_get_client_error_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 64);
  return 1LL;
}

uint64_t __nw_http_client_metadata_set_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_http_client_metadata_get_sec_metadata(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      BOOL v26 = __Block_byref_object_copy__4;
      os_log_type_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_client_metadata_get_sec_metadata_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_client_metadata_get_sec_metadata_block_invoke((uint64_t)v22, v5);
        double v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        double v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_client", buf, 0xCu);
        }

uint64_t __nw_http_client_metadata_get_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_protocol_copy_http_client_bottom_definition()
{
  if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_56_74791);
  }
  return (id)nw_protocol_copy_http_client_bottom_definition_definition;
}

BOOL __nw_protocol_copy_http_client_bottom_definition_block_invoke()
{
  if (nw_protocol_http_client_bottom_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_client_bottom_identifier::onceToken, &__block_literal_global_22210);
  }
  v0 = nw_protocol_definition_create_with_identifier(&nw_protocol_http_client_bottom_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_client_bottom_definition_definition;
  nw_protocol_copy_http_client_bottom_definition_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_client_bottom_definition_definition,  (uint64_t)nw_http_client_bottom_allocate_options,  (uint64_t)nw_http_client_bottom_copy_options,  (uint64_t)nw_http_client_bottom_deallocate_options);
  nw_protocol_definition_set_options_comparator( (void *)nw_protocol_copy_http_client_bottom_definition_definition,  (uint64_t)nw_http_client_bottom_options_compare);
  if (nw_protocol_http_client_bottom_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_client_bottom_identifier::onceToken, &__block_literal_global_22210);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http_client_bottom_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_client_bottom_definition_definition,  (uint64_t)nw_protocol_http_client_bottom_create,  (uint64_t)nw_protocol_http_client_bottom_accept);
}

BOOL nw_http_client_bottom_allocate_options(void *a1)
{
  id v1 = a1;
  uint64_t v2 = calloc(1uLL, 1uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  unint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_client_bottom_copy_options(void *a1)
{
  id v1 = a1;
  uint64_t v2 = calloc(1uLL, 1uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  unint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

void nw_http_client_bottom_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    free(a2);
    return;
  }

  __nwlog_obj();
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
        double v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
            __int16 v13 = 2082;
            os_log_type_t v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v8) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
        double v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      unint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_http_client_bottom_deallocate_options";
        double v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

uint64_t nw_http_client_bottom_options_compare()
{
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_http_client_bottom_create_options()
{
  if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_56_74791);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_client_bottom_definition_definition);
}

BOOL nw_protocol_options_is_http_client_bottom(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_56_74791);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_client_bottom_definition_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_options_is_http_client_bottom";
  double v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http_client_bottom";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_options_is_http_client_bottom";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http_client_bottom";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http_client_bottom";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_protocol_copy_http_messaging_definition()
{
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  return (id)nw_protocol_copy_http_messaging_definition_definition;
}

NWConcrete_nw_protocol_options *nw_http_messaging_create_options()
{
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_messaging_definition_definition);
}

void nw_http_messaging_options_set_http1_options(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_messaging_options_set_http1_options_block_invoke(uint64_t a1, id *location)
{
  return 1LL;
}

void nw_http_messaging_options_set_http2_options(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_messaging_options_set_http2_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_messaging_options_set_http3_options(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_messaging_options_set_http3_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_messaging_options_set_client_metadata(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
    char v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_messaging_options_set_client_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_parameters_find_http_messaging_options(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    os_log_type_t v5 = nw_parameters_copy_default_protocol_stack(v3);
    *(void *)os_log_type_t type = 0LL;
    os_log_type_t v18 = type;
    uint64_t v19 = 0x2020000000LL;
    char v20 = 0;
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    id v23 = __Block_byref_object_copy__4;
    char v24 = __Block_byref_object_dispose__5;
    id v25 = 0LL;
    iterate_block[0] = MEMORY[0x1895F87A8];
    iterate_block[1] = 3221225472LL;
    iterate_block[2] = __nw_parameters_find_http_messaging_options_block_invoke;
    iterate_block[3] = &unk_189BC65B8;
    iterate_block[4] = type;
    iterate_block[5] = buf;
    iterate_block[6] = a2;
    nw_protocol_stack_iterate_application_protocols(v5, iterate_block);
    id v6 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    _Block_object_dispose(type, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_parameters_find_http_messaging_options";
  char v9 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v9, type, &v21))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_find_http_messaging_options";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type[0];
      BOOL v14 = os_log_type_enabled(v10, type[0]);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_parameters_find_http_messaging_options";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_find_http_messaging_options";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_find_http_messaging_options";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_parameters_find_http_messaging_options_block_invoke(void *a1, void *a2)
{
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL))
  {
    if (!*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
    {
      id v8 = v4;
      BOOL is_http_messaging = nw_protocol_options_is_http_messaging(v4);
      os_log_type_t v5 = v8;
      if (is_http_messaging)
      {
        objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), a2);
        os_log_type_t v5 = v8;
      }
    }
  }

  else
  {
    id v9 = v4;
    uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v4);
    os_log_type_t v5 = v9;
    if (protocol_handle == a1[6]) {
      *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
    }
  }
}

void *nw_http_messaging_options_find_or_create_client_metadata_in_parameters(void *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2)
    {
      id http_messaging_options = nw_parameters_find_http_messaging_options(v3, a2);
      id v6 = http_messaging_options;
      if (http_messaging_options)
      {
        singleton = nw_http_messaging_options_copy_client_metadata(http_messaging_options);
        if (!singleton)
        {
          if (nw_protocol_copy_http_client_definition_onceToken != -1) {
            dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
          }
          singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_client_definition_definition);
          nw_http_client_metadata_create_next_transaction(singleton, 0);
          nw_http_messaging_options_set_client_metadata(v6, singleton);
        }

id nw_http_messaging_options_copy_client_metadata(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = nw_protocol_options_copy_definition(v1);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v2,  (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    os_log_type_t v18 = __Block_byref_object_copy__4;
    uint64_t v19 = __Block_byref_object_dispose__5;
    id v20 = 0LL;
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_http_messaging_options_copy_client_metadata_block_invoke;
    v14[3] = &unk_189BC60A8;
    v14[4] = buf;
    nw_protocol_options_access_handle(v1, v14);
    id v4 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s protocol options are not http_messaging", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s protocol options are not http_messaging, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_client_metadata";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s protocol options are not http_messaging, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824F8050( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_messaging_options_copy_client_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_messaging_options_create_transaction_in_parameters(void *a1, uint64_t a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (v5)
  {
    id http_messaging_options = nw_parameters_find_http_messaging_options(v5, a2);
    id v8 = http_messaging_options;
    if (http_messaging_options)
    {
      id v9 = nw_http_messaging_options_copy_client_metadata(http_messaging_options);
      nw_http_client_metadata_create_next_transaction(v9, a3);

LABEL_4:
      goto LABEL_5;
    }

    __nwlog_obj();
    char v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_http_messaging_options_create_transaction_in_parameters";
    BOOL v16 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault((const char *)v16, &type, &v24))
    {
LABEL_38:
      if (v16) {
        free(v16);
      }
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        uint64_t v19 = "%{public}s called with null messaging_options";
LABEL_36:
        _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
      }
    }

    else
    {
      if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        BOOL v23 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v27 = "nw_http_messaging_options_create_transaction_in_parameters";
            __int16 v28 = 2082;
            uint64_t v29 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s called with null messaging_options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }

        if (!v23) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        uint64_t v19 = "%{public}s called with null messaging_options, no backtrace";
        goto LABEL_36;
      }

      __nwlog_obj();
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        uint64_t v19 = "%{public}s called with null messaging_options, backtrace limit exceeded";
        goto LABEL_36;
      }
    }

id nw_http_messaging_options_copy_transaction_metadata(void *a1)
{
  id v1 = a1;
  id v2 = nw_protocol_options_copy_definition(v1);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v2,  (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal)
  {
    uint64_t v7 = 0LL;
    id v8 = &v7;
    uint64_t v9 = 0x3032000000LL;
    os_log_type_t v10 = __Block_byref_object_copy__4;
    os_log_type_t v11 = __Block_byref_object_dispose__5;
    id v12 = 0LL;
    v6[0] = MEMORY[0x1895F87A8];
    v6[1] = 3221225472LL;
    id v6[2] = __nw_http_messaging_options_copy_transaction_metadata_block_invoke;
    v6[3] = &unk_189BC60A8;
    v6[4] = &v7;
    nw_protocol_options_access_handle(v1, v6);
    id v4 = (id)v8[5];
    _Block_object_dispose(&v7, 8);
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

void sub_1824F8610( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __nw_http_messaging_options_copy_transaction_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a2 + 24);
  if (v2)
  {
    id v4 = v2;
    id v5 = nw_http_client_metadata_copy_current_transaction_metadata(v4);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  return 1LL;
}

BOOL nw_http_messaging_options_override_version_specific_protocol(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = nw_protocol_options_copy_definition(v5);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v7,  (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal)
  {
    uint64_t v15 = 0LL;
    BOOL v16 = &v15;
    uint64_t v17 = 0x2020000000LL;
    char v18 = 0;
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 3221225472LL;
    v11[2] = __nw_http_messaging_options_override_version_specific_protocol_block_invoke;
    v11[3] = &unk_189BC65E0;
    os_log_type_t v13 = &v15;
    uint64_t v14 = a2;
    id v12 = v6;
    nw_protocol_options_access_handle(v5, v11);
    BOOL v9 = *((_BYTE *)v16 + 24) != 0;

    _Block_object_dispose(&v15, 8);
  }

  else
  {
    BOOL v9 = 0LL;
  }

  return v9;
}

void sub_1824F87A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __nw_http_messaging_options_override_version_specific_protocol_block_invoke(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 32);
    if (v3) {
      *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))( v3,  a1[6],  a1[4]);
    }
  }

  return 1LL;
}

uint64_t __nw_http_messaging_options_set_override_protocol_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (a2 && !*(void *)(a2 + 32))
  {
    id v4 = _Block_copy(*(const void **)(a1 + 32));
    id v5 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = v4;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_messaging_options_set_override_protocol_handler_block_invoke";
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}s Ignoring duplicate setting of http_messaging override_protocol handler",  (uint8_t *)&v7,  0xCu);
    }
  }

  return 1LL;
}

uint64_t __nw_http_messaging_options_can_accept_block_invoke(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 40);
    if (v3) {
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))( v3,  a1[4],  a1[5]);
    }
  }

  return 1LL;
}

uint64_t __nw_http_messaging_options_set_can_accept_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (a2 && !*(void *)(a2 + 40))
  {
    id v4 = _Block_copy(*(const void **)(a1 + 32));
    id v5 = *(void **)(a2 + 40);
    *(void *)(a2 + 40) = v4;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_messaging_options_set_can_accept_handler_block_invoke";
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}s Ignoring duplicate setting of http_messaging can_accept handler",  (uint8_t *)&v7,  0xCu);
    }
  }

  return 1LL;
}

id nw_protocol_copy_http_transaction_definition()
{
  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  return (id)nw_protocol_copy_http_transaction_definition_definition;
}

void nw_http_transaction_metadata_set_event_handler(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_http_transaction_metadata_set_event_handler";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_http_transaction_metadata_set_event_handler";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v28 = "nw_http_transaction_metadata_set_event_handler";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_http_transaction_metadata_set_event_handler";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_http_transaction_metadata_set_event_handler";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_set_event_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *(void **)(a2 + 120);
  *(void *)(a2 + 120) = v3;

  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_start_reason(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_transaction_metadata_get_start_reason_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_start_reason_block_invoke((uint64_t)v22, v5);
        id v6 = (unsigned int *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        id v6 = (unsigned int *)&v26;
      }

      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_start_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 136);
  return 1LL;
}

void nw_http_transaction_metadata_set_connection_metadata(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_http_transaction_metadata_set_connection_metadata";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_http_transaction_metadata_set_connection_metadata";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v28 = "nw_http_transaction_metadata_set_connection_metadata";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_http_transaction_metadata_set_connection_metadata";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_http_transaction_metadata_set_connection_metadata";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_set_connection_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_http_transaction_metadata_get_connection_metadata(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      int v26 = __Block_byref_object_copy__4;
      uint64_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_transaction_metadata_get_connection_metadata_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_connection_metadata_block_invoke((uint64_t)v22, v5);
        id v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        id v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_connection_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_transaction_metadata_set_outbound_message(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_http_transaction_metadata_set_outbound_message";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_http_transaction_metadata_set_outbound_message";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = v27;
      BOOL v19 = os_log_type_enabled(v13, v27);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_http_transaction_metadata_set_outbound_message";
          __int16 v30 = 2082;
          uint64_t v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v12) {
          goto LABEL_8;
        }
LABEL_43:
        free(v12);
        goto LABEL_8;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_http_transaction_metadata_set_outbound_message";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_http_transaction_metadata_set_outbound_message";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_set_outbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = mach_continuous_time();
  if (v4 <= 1) {
    uint64_t v5 = 1LL;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(a2 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, *(void *)(a1 + 40), 0LL);
  }
  return 1LL;
}

id nw_http_transaction_metadata_get_outbound_message(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      char v26 = __Block_byref_object_copy__4;
      os_log_type_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_transaction_metadata_get_outbound_message_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_outbound_message_block_invoke((uint64_t)v22, v5);
        uint64_t v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_outbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_transaction_metadata_set_inbound_message(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_http_transaction_metadata_set_inbound_message";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_http_transaction_metadata_set_inbound_message";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = v27;
      BOOL v19 = os_log_type_enabled(v13, v27);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_http_transaction_metadata_set_inbound_message";
          __int16 v30 = 2082;
          uint64_t v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v12) {
          goto LABEL_8;
        }
LABEL_43:
        free(v12);
        goto LABEL_8;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_http_transaction_metadata_set_inbound_message";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_http_transaction_metadata_set_inbound_message";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_set_inbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = mach_continuous_time();
  if (v4 <= 1) {
    uint64_t v5 = 1LL;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(a2 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v6, *(void *)(a1 + 40), 2LL);
  }
  return 1LL;
}

id nw_http_transaction_metadata_get_inbound_message(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      char v26 = __Block_byref_object_copy__4;
      os_log_type_t v27 = __Block_byref_object_dispose__5;
      id v28 = 0LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_transaction_metadata_get_inbound_message_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_inbound_message_block_invoke((uint64_t)v22, v5);
        uint64_t v6 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_inbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_transaction_metadata_set_first_on_connection(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_http_transaction_metadata_set_first_on_connection";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_http_transaction_metadata_set_first_on_connection";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_http_transaction_metadata_set_first_on_connection";
          __int16 v25 = 2082;
          char v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_42:
        free(v8);
        goto LABEL_7;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_http_transaction_metadata_set_first_on_connection";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_http_transaction_metadata_set_first_on_connection";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL nw_http_transaction_metadata_is_first_on_connection(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      char v25 = 0;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_is_first_on_connection_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_is_first_on_connection_block_invoke((uint64_t)v21, v5);
        BOOL v6 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
      }

      else
      {
        BOOL v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_is_first_on_connection_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 140) & 1;
  return 1LL;
}

void nw_http_transaction_metadata_increment_outbound_header_size(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_increment_outbound_header_size_block_invoke(uint64_t a1, void *a2)
{
  *a2 += *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_outbound_header_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_outbound_header_size_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = (void *)*((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_outbound_header_size_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_outbound_header_size_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

uint64_t __nw_http_transaction_metadata_increment_outbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) += *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_outbound_body_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_outbound_body_size_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_outbound_body_size_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_outbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 8);
  return 1LL;
}

void nw_http_transaction_metadata_increment_outbound_body_transfer_size(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_increment_outbound_body_transfer_size_block_invoke( uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) += *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_outbound_body_transfer_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_outbound_body_transfer_size_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_outbound_body_transfer_size_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_outbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 16);
  return 1LL;
}

void nw_http_transaction_metadata_increment_inbound_header_size(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_increment_inbound_header_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) += *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_inbound_header_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_inbound_header_size_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_inbound_header_size_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_inbound_header_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 24);
  return 1LL;
}

uint64_t __nw_http_transaction_metadata_increment_inbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) += *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_inbound_body_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_inbound_body_size_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_inbound_body_size_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_inbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 32);
  return 1LL;
}

void nw_http_transaction_metadata_increment_inbound_body_transfer_size(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_increment_inbound_body_transfer_size_block_invoke( uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) += *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_inbound_body_transfer_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_inbound_body_transfer_size_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_inbound_body_transfer_size_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_inbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 40);
  return 1LL;
}

void nw_http_transaction_metadata_mark_outbound_message_end(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_mark_outbound_message_end_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = mach_continuous_time();
  if (v4 <= 1) {
    uint64_t v5 = 1LL;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(a2 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v6, *(void *)(a1 + 32), 1LL);
  }
  return 1LL;
}

void nw_http_transaction_metadata_mark_inbound_message_end(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_mark_inbound_message_end_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = mach_continuous_time();
  if (v4 <= 1) {
    uint64_t v5 = 1LL;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v6, *(void *)(a1 + 32), 3LL);
  }
  return 1LL;
}

void nw_http_transaction_metadata_mark_end(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_http_transaction_metadata_mark_end";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_transaction_metadata_mark_end";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_http_transaction_metadata_mark_end";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_transaction_metadata_mark_end";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_transaction_metadata_mark_end";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_mark_end_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 56))
  {
    id v2 = *(void **)(a1 + 32);
    uint64_t v3 = mach_continuous_time();
    if (v3 <= 1) {
      uint64_t v4 = 1LL;
    }
    else {
      uint64_t v4 = v3;
    }
    nw_http_transaction_metadata_set_end_time(v2, v4);
  }

  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_end_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_end_time_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_end_time_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 56);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_outbound_message_start_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_outbound_message_start_time_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_outbound_message_start_time_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_outbound_message_start_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 64);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_outbound_message_end_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_outbound_message_end_time_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_outbound_message_end_time_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_outbound_message_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 72);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_inbound_message_start_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_inbound_message_start_time_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_inbound_message_start_time_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_inbound_message_start_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 80);
  return 1LL;
}

uint64_t nw_http_transaction_metadata_get_inbound_message_end_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_transaction_metadata_get_inbound_message_end_time_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_transaction_metadata_get_inbound_message_end_time_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }

uint64_t __nw_http_transaction_metadata_get_inbound_message_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 88);
  return 1LL;
}

void nw_http_transaction_metadata_set_converted_url_response(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_http_transaction_metadata_set_converted_url_response";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_transaction_metadata_set_converted_url_response";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_http_transaction_metadata_set_converted_url_response";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_transaction_metadata_set_converted_url_response";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_http_transaction_metadata_set_converted_url_response";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_transaction_metadata_set_converted_url_response_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t __nw_http_transaction_metadata_get_converted_url_response_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(id *)(a2 + 128);
  return 1LL;
}

id nw_protocol_copy_http_connection_definition()
{
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  return (id)nw_protocol_copy_http_connection_definition_definition;
}

void __nw_protocol_copy_http_connection_definition_block_invoke()
{
  named = nw_protocol_definition_create_named(1, "http_connection");
  id v1 = (void *)nw_protocol_copy_http_connection_definition_definition;
  nw_protocol_copy_http_connection_definition_definition = (uint64_t)named;

  nw_protocol_definition_set_metadata_initializer( (void *)nw_protocol_copy_http_connection_definition_definition,  0xC8u,  nw_http_connection_initialize_metadata,  nw_http_connection_finalize_metadata);
}

void nw_http_connection_initialize_metadata(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 176) = 0;
}

void nw_http_connection_finalize_metadata(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 88);
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = 0LL;

  *(_BYTE *)(a2 + 196) &= ~4u;
  uint64_t v4 = *(void **)(a2 + 96);
  *(void *)(a2 + 96) = 0LL;

  id v5 = *(void **)(a2 + 104);
  *(void *)(a2 + 104) = 0LL;

  id v6 = *(void **)(a2 + 112);
  *(void *)(a2 + 112) = 0LL;

  uint64_t v7 = *(void **)(a2 + 64);
  *(void *)(a2 + 64) = 0LL;

  uint64_t v8 = *(void **)(a2 + 72);
  *(void *)(a2 + 72) = 0LL;

  uint64_t v9 = *(const void **)(a2 + 80);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a2 + 80) = 0LL;
  }

  *(void *)(a2 + 16) = 0LL;
  os_log_type_t v10 = *(void **)(a2 + 40);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;

  os_log_type_t v11 = *(void **)(a2 + 120);
  *(void *)(a2 + 120) = 0LL;

  os_log_type_t v12 = *(void **)(a2 + 128);
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = 0LL;

  os_log_type_t v13 = *(void **)(a2 + 136);
  *(void *)(a2 + 136) = 0LL;

  os_log_type_t v14 = *(void **)(a2 + 144);
  *(void *)(a2 + 144) = 0LL;

  os_log_type_t v15 = *(void **)(a2 + 152);
  *(void *)(a2 + 152) = 0LL;
}

id *nw_http_connection_create_metadata(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_connection_definition_definition);
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 3221225472LL;
  v13[2] = __nw_http_connection_create_metadata_block_invoke;
  v13[3] = &unk_189BC6698;
  id v14 = v5;
  id v15 = v6;
  id v16 = v7;
  id v9 = v7;
  id v10 = v6;
  id v11 = v5;
  nw_protocol_metadata_access_handle((uint64_t)singleton, (uint64_t)v13);

  return singleton;
}

uint64_t __nw_http_connection_create_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *(void **)(a2 + 128);
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = v4;

  id v6 = _Block_copy(*(const void **)(a1 + 48));
  id v7 = *(void **)(a2 + 152);
  *(void *)(a2 + 152) = v6;

  return 1LL;
}

BOOL nw_protocol_metadata_is_http_connection(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_connection_definition_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_protocol_metadata_is_http_connection";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_metadata_is_http_connection";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_protocol_metadata_is_http_connection";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_metadata_is_http_connection";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_metadata_is_http_connection";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_http_connection_metadata_closed(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v9) {
          goto LABEL_7;
        }
LABEL_42:
        free(v9);
        goto LABEL_7;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_http_connection_metadata_closed_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 128);
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 152);
  *(void *)(v4 + 152) = 0LL;

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 136);
  if (v7)
  {
    os_log_type_t v8 = *(dispatch_queue_s **)(v6 + 144);
    if (v8)
    {
      dispatch_async(v8, v7);
      uint64_t v9 = *(void *)(a1 + 32);
      os_log_type_t v10 = *(void **)(v9 + 136);
      *(void *)(v9 + 136) = 0LL;

      uint64_t v11 = *(void *)(a1 + 32);
      os_log_type_t v12 = *(void **)(v11 + 144);
      *(void *)(v11 + 144) = 0LL;
    }
  }

BOOL nw_http_connection_metadata_get_is_closed(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      char v25 = 0;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_connection_metadata_get_is_closed_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      id v5 = (os_unfair_lock_s *)*((void *)v2 + 4);
      if (v5)
      {
        __nw_http_connection_metadata_get_is_closed_block_invoke((uint64_t)v21, v5);
        BOOL v6 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
      }

      else
      {
        BOOL v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
        }

uint64_t __nw_http_connection_metadata_get_is_closed_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t v2 = a2 + 44;
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = __nw_http_connection_metadata_get_is_closed_block_invoke_2;
  v4[3] = &unk_189BC66C0;
  void v4[4] = *(void *)(a1 + 32);
  v4[5] = a2;
  os_unfair_lock_lock(a2 + 44);
  __nw_http_connection_metadata_get_is_closed_block_invoke_2((uint64_t)v4);
  os_unfair_lock_unlock(v2);
  return 1LL;
}

uint64_t __nw_http_connection_metadata_get_is_closed_block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(void *)(*(void *)(result + 40) + 128LL) == 0LL;
  return result;
}

void nw_http_connection_metadata_close_connection(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_http_connection_metadata_close_connection";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_connection_metadata_close_connection";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_http_connection_metadata_close_connection";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_connection_metadata_close_connection";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_connection_metadata_close_connection";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_close_connection_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0LL;
  os_log_type_t v13 = &v12;
  uint64_t v14 = 0x2020000000LL;
  char v15 = 0;
  id v4 = (os_unfair_lock_s *)(a2 + 176);
  uint64_t v5 = MEMORY[0x1895F87A8];
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 3221225472LL;
  v11[2] = __nw_http_connection_metadata_close_connection_block_invoke_2;
  v11[3] = &unk_189BC66C0;
  void v11[4] = &v12;
  void v11[5] = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 176));
  __nw_http_connection_metadata_close_connection_block_invoke_2((uint64_t)v11);
  os_unfair_lock_unlock(v4);
  if (!*((_BYTE *)v13 + 24))
  {
    BOOL v6 = *(void **)(a2 + 120);
    v8[0] = v5;
    v8[1] = 3221225472LL;
    v8[2] = __nw_http_connection_metadata_close_connection_block_invoke_3;
    v8[3] = &unk_189BC66E8;
    id v9 = *(id *)(a1 + 32);
    uint64_t v10 = a2;
    nw_queue_context_async_if_needed(v6, v8);
  }

  _Block_object_dispose(&v12, 8);
  return 1LL;
}

void sub_18250409C(_Unwind_Exception *a1)
{
}

uint64_t __nw_http_connection_metadata_close_connection_block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(void *)(*(void *)(result + 40) + 128LL) == 0LL;
  return result;
}

void __nw_http_connection_metadata_close_connection_block_invoke_3(uint64_t a1)
{
  uint64_t v10 = 0LL;
  os_log_type_t v11 = &v10;
  uint64_t v12 = 0x3032000000LL;
  os_log_type_t v13 = __Block_byref_object_copy__72694;
  uint64_t v14 = __Block_byref_object_dispose__72695;
  id v15 = 0LL;
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 40);
  uint64_t v2 = v1 + 44;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 3221225472LL;
  v9[2] = __nw_http_connection_metadata_close_connection_block_invoke_4;
  v9[3] = &unk_189BC66C0;
  v9[4] = &v10;
  v9[5] = v1;
  os_unfair_lock_lock(v1 + 44);
  __nw_http_connection_metadata_close_connection_block_invoke_4((uint64_t)v9);
  os_unfair_lock_unlock(v2);
  uint64_t v8 = v11[5];
  if (v8) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v8, v3, v4, v5, v6, v7);
  }
  _Block_object_dispose(&v10, 8);
}

void sub_182504194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void __nw_http_connection_metadata_close_connection_block_invoke_4(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 40) + 128LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(v5 + 128);
  *(void *)(v5 + 12_Block_object_dispose(va, 8) = 0LL;
}

void nw_http_connection_metadata_set_connection_closed_handler(void *a1, void *a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v42 = "nw_http_connection_metadata_set_connection_closed_handler";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v42 = "nw_http_connection_metadata_set_connection_closed_handler";
          __int16 v43 = 2082;
          BOOL v44 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_76:
        if (!v15) {
          goto LABEL_10;
        }
LABEL_77:
        free(v15);
        goto LABEL_10;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_181A5C000, v16, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl( &dword_181A5C000,  v16,  v34,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_set_connection_closed_handler_block_invoke( uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t v3 = a2 + 44;
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 3221225472LL;
  v7[2] = __nw_http_connection_metadata_set_connection_closed_handler_block_invoke_2;
  v7[3] = &unk_189BC6EB0;
  v7[6] = a2;
  id v4 = *(id *)(a1 + 40);
  v7[5] = v4;
  id v5 = *(id *)(a1 + 32);
  v7[4] = v5;
  os_unfair_lock_lock(v3);
  __nw_http_connection_metadata_set_connection_closed_handler_block_invoke_2((uint64_t)v7);
  os_unfair_lock_unlock(v3);

  return 1LL;
}

void __nw_http_connection_metadata_set_connection_closed_handler_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (*(void *)(v1 + 128))
  {
    uint64_t v3 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = *(void **)(v4 + 136);
    *(void *)(v4 + 136) = v3;

    objc_storeStrong((id *)(*(void *)(a1 + 48) + 144LL), *(id *)(a1 + 32));
  }

  else
  {
    dispatch_async(*(dispatch_queue_t *)(v1 + 144), *(dispatch_block_t *)(v1 + 136));
  }

uint64_t __nw_http_connection_metadata_send_ping_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 120);
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 3221225472LL;
  id v6[2] = __nw_http_connection_metadata_send_ping_block_invoke_2;
  v6[3] = &unk_189BC6EB0;
  id v7 = *(id *)(a1 + 32);
  uint64_t v9 = a2;
  id v8 = *(id *)(a1 + 40);
  nw_queue_context_async_if_needed(v4, v6);

  return 1LL;
}

void __nw_http_connection_metadata_send_ping_block_invoke_2(uint64_t a1)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x3032000000LL;
  id v12 = __Block_byref_object_copy__72694;
  os_log_type_t v13 = __Block_byref_object_dispose__72695;
  id v14 = 0LL;
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 48);
  uint64_t v3 = v2 + 44;
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  v8[2] = __nw_http_connection_metadata_send_ping_block_invoke_3;
  v8[3] = &unk_189BC66C0;
  void v8[4] = &v9;
  v8[5] = v2;
  os_unfair_lock_lock(v2 + 44);
  __nw_http_connection_metadata_send_ping_block_invoke_3((uint64_t)v8);
  os_unfair_lock_unlock(v3);
  uint64_t v7 = v10[5];
  if (v7) {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, *(void *)(a1 + 40));
  }
  else {
    (*(void (**)(void, void, void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  v4,  v5,  v6);
  }
  _Block_object_dispose(&v9, 8);
}

void sub_182504DFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void __nw_http_connection_metadata_send_ping_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 40) + 152LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void nw_http_connection_metadata_set_version(void *a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_connection_metadata_set_version";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_version";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_connection_metadata_set_version";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_version";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_version";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_set_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_connection_metadata_get_version(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v26 = 0;
      *(void *)&buf[16] = 0x2020000000LL;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_http_connection_metadata_get_version_block_invoke;
      v22[3] = &unk_189BC60A8;
      void v22[4] = buf;
      uint64_t v5 = *((void *)v2 + 4);
      if (v5)
      {
        __nw_http_connection_metadata_get_version_block_invoke((uint64_t)v22, v5);
        id v6 = (unsigned int *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        id v6 = (unsigned int *)&v26;
      }

      uint64_t v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
        }

uint64_t __nw_http_connection_metadata_get_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 160);
  return 1LL;
}

void nw_http_connection_metadata_increment_outbound_message_count(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
          __int16 v25 = 2082;
          int v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_42:
        free(v8);
        goto LABEL_7;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_http_connection_metadata_increment_outbound_message_count";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_increment_outbound_message_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(unsigned int *)(a2 + 168) + 1LL;
  uint64_t v4 = v3 << 31 >> 31;
  *(_DWORD *)(a2 + 16_Block_object_dispose(va, 8) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(unsigned int *)(a2 + 168);
        int v8 = 136446978;
        uint64_t v9 = "nw_http_connection_metadata_increment_outbound_message_count_block_invoke";
        __int16 v10 = 2082;
        uint64_t v11 = "http_metadata->outbound_message_count";
        __int16 v12 = 2048;
        uint64_t v13 = 1LL;
        __int16 v14 = 2048;
        uint64_t v15 = v7;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  (uint8_t *)&v8,  0x2Au);
      }
    }

    *(_DWORD *)(a2 + 16_Block_object_dispose(va, 8) = -1;
  }

  return 1LL;
}

void nw_http_connection_metadata_increment_inbound_message_count(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v24 = "nw_http_connection_metadata_increment_inbound_message_count";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_http_connection_metadata_increment_inbound_message_count";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          int v24 = "nw_http_connection_metadata_increment_inbound_message_count";
          __int16 v25 = 2082;
          int v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_42:
        free(v8);
        goto LABEL_7;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_http_connection_metadata_increment_inbound_message_count";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_http_connection_metadata_increment_inbound_message_count";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_increment_inbound_message_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(unsigned int *)(a2 + 172) + 1LL;
  uint64_t v4 = v3 << 31 >> 31;
  *(_DWORD *)(a2 + 172) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(unsigned int *)(a2 + 172);
        int v8 = 136446978;
        uint64_t v9 = "nw_http_connection_metadata_increment_inbound_message_count_block_invoke";
        __int16 v10 = 2082;
        uint64_t v11 = "http_metadata->inbound_message_count";
        __int16 v12 = 2048;
        uint64_t v13 = 1LL;
        __int16 v14 = 2048;
        uint64_t v15 = v7;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  (uint8_t *)&v8,  0x2Au);
      }
    }

    *(_DWORD *)(a2 + 172) = -1;
  }

  return 1LL;
}

uint64_t __nw_http_connection_metadata_get_message_counts_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  if (v2) {
    _DWORD *v2 = *(_DWORD *)(a2 + 168);
  }
  uint64_t v3 = *(_DWORD **)(a1 + 40);
  if (v3) {
    _DWORD *v3 = *(_DWORD *)(a2 + 172);
  }
  return 1LL;
}

BOOL __nw_http_connection_metadata_copy_cached_token_block_invoke(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 196) & 4) != 0)
  {
    uint64_t v7 = *(_BYTE **)(a1 + 40);
    if (v7) {
      _BYTE *v7 = 1;
    }
    return 1LL;
  }

  uint64_t v4 = *(void **)(a2 + 88);
  if (!v4) {
    return 1LL;
  }
  size_t length = xpc_data_get_length(v4);
  if (!length)
  {
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    __int16 v10 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v10);
    if (result) {
      goto LABEL_13;
    }
    free(v10);
  }

  uint64_t v6 = malloc(length);
  if (v6)
  {
LABEL_5:
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v6;
    **(void **)(a1 + 4_Block_object_dispose(va, 8) = xpc_data_get_bytes( *(xpc_object_t *)(a2 + 88),  *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  0LL,  length);
    return 1LL;
  }

  __nwlog_obj();
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  __int16 v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_5;
  }

void nw_http_connection_metadata_set_cached_token(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = *((id *)v5 + 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v36 = "nw_protocol_metadata_copy_definition";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v11, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v36 = "nw_protocol_metadata_copy_definition";
          __int16 v37 = 2082;
          uint64_t v38 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_protocol_metadata_copy_definition";
        _os_log_impl( &dword_181A5C000,  v12,  v29,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_http_connection_metadata_set_cached_token_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 196) &= ~4u;
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4 && (size_t v5 = *(void *)(a1 + 40)) != 0)
  {
    xpc_object_t v6 = xpc_data_create(v4, v5);
    id v7 = *(void **)(a2 + 88);
    *(void *)(a2 + 8_Block_object_dispose(va, 8) = v6;
  }

  else
  {
    id v7 = *(void **)(a2 + 88);
    *(void *)(a2 + 8_Block_object_dispose(va, 8) = 0LL;
  }

  return 1LL;
}

void nw_http_connection_metadata_mark_cached_token_failed(void *a1)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = *((id *)v1 + 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v32 = "nw_protocol_metadata_copy_definition";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (__nwlog_fault(v8, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v32 = "nw_protocol_metadata_copy_definition";
          __int16 v33 = 2082;
          os_log_type_t v34 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v9, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_protocol_metadata_copy_definition";
        _os_log_impl( &dword_181A5C000,  v9,  v26,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_http_connection_metadata_get_next_connect_ip_request_id(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v25 = 0LL;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_http_connection_metadata_get_next_connect_ip_request_id_block_invoke;
      v21[3] = &unk_189BC60A8;
      v21[4] = buf;
      uint64_t v5 = (uint64_t *)*((void *)v2 + 4);
      if (v5)
      {
        __nw_http_connection_metadata_get_next_connect_ip_request_id_block_invoke((uint64_t)v21, v5);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }

    __nwlog_obj();
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
        }

uint64_t __nw_http_connection_metadata_get_next_connect_ip_request_id_block_invoke(uint64_t a1, uint64_t *a2)
{
  else {
    uint64_t v2 = 1LL;
  }
  *a2 = v2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v2;
  return 1LL;
}

uint64_t __nw_http_connection_metadata_set_path_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = nw_path_copy_without_parameters(*(void **)(a1 + 32));
  uint64_t v4 = *(void **)(a2 + 96);
  *(void *)(a2 + 96) = v3;

  return 1LL;
}

id nw_http_connection_metadata_get_path(void *a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition((nw_protocol_metadata_t)v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v2,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    os_log_type_t v27 = __Block_byref_object_copy__4;
    os_log_type_t v28 = __Block_byref_object_dispose__5;
    id v29 = 0LL;
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_connection_metadata_get_path_block_invoke;
    v23[3] = &unk_189BC60A8;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t v4 = v1[4];
      if (v4) {
        __nw_http_connection_metadata_get_path_block_invoke((uint64_t)v23, v4);
      }
LABEL_7:
      id v5 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_8;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v30 = 136446210;
    os_log_type_t v31 = "nw_protocol_metadata_access_handle";
    __int16 v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", v30, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)os_log_type_t v30 = 136446466;
            os_log_type_t v31 = "nw_protocol_metadata_access_handle";
            __int16 v32 = 2082;
            __int16 v33 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  v30,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (v20)
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null metadata, no backtrace", v30, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  v30,  0xCu);
        }
      }
    }

uint64_t __nw_http_connection_metadata_get_path_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t __nw_http_connection_metadata_set_establishment_report_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_http_connection_metadata_get_establishment_report(void *a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition((nw_protocol_metadata_t)v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v2,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    os_log_type_t v27 = __Block_byref_object_copy__4;
    os_log_type_t v28 = __Block_byref_object_dispose__5;
    id v29 = 0LL;
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_connection_metadata_get_establishment_report_block_invoke;
    v23[3] = &unk_189BC60A8;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t v4 = v1[4];
      if (v4) {
        __nw_http_connection_metadata_get_establishment_report_block_invoke((uint64_t)v23, v4);
      }
LABEL_7:
      id v5 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_8;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v30 = 136446210;
    os_log_type_t v31 = "nw_protocol_metadata_access_handle";
    __int16 v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", v30, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)os_log_type_t v30 = 136446466;
            os_log_type_t v31 = "nw_protocol_metadata_access_handle";
            __int16 v32 = 2082;
            __int16 v33 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  v30,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (v20)
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null metadata, no backtrace", v30, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  v30,  0xCu);
        }
      }
    }

uint64_t __nw_http_connection_metadata_get_establishment_report_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_connection_metadata_set_sec_metadata(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_connection_metadata_set_sec_metadata";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_sec_metadata";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_connection_metadata_set_sec_metadata";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_sec_metadata";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_sec_metadata";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_set_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_http_connection_metadata_get_sec_metadata(void *a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition((nw_protocol_metadata_t)v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v2,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    os_log_type_t v27 = __Block_byref_object_copy__4;
    os_log_type_t v28 = __Block_byref_object_dispose__5;
    id v29 = 0LL;
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_connection_metadata_get_sec_metadata_block_invoke;
    v23[3] = &unk_189BC60A8;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t v4 = v1[4];
      if (v4) {
        __nw_http_connection_metadata_get_sec_metadata_block_invoke((uint64_t)v23, v4);
      }
LABEL_7:
      id v5 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_8;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v30 = 136446210;
    uint64_t v31 = "nw_protocol_metadata_access_handle";
    __int16 v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          uint64_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", v30, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)os_log_type_t v30 = 136446466;
            uint64_t v31 = "nw_protocol_metadata_access_handle";
            __int16 v32 = 2082;
            __int16 v33 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  v30,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (v20)
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          uint64_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null metadata, no backtrace", v30, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          uint64_t v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  v30,  0xCu);
        }
      }
    }

uint64_t __nw_http_connection_metadata_get_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http_connection_metadata_set_privacy_stance(void *a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_set_privacy_stance_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 164) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http_connection_metadata_get_privacy_stance(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition((nw_protocol_metadata_t)v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v2,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v27 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_connection_metadata_get_privacy_stance_block_invoke;
    v23[3] = &unk_189BC60A8;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t v4 = v1[4];
      if (v4) {
        __nw_http_connection_metadata_get_privacy_stance_block_invoke((uint64_t)v23, v4);
      }
LABEL_7:
      uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
      goto LABEL_8;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v28 = 136446210;
    __int16 v29 = "nw_protocol_metadata_access_handle";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", v28, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)os_log_type_t v28 = 136446466;
            __int16 v29 = "nw_protocol_metadata_access_handle";
            __int16 v30 = 2082;
            uint64_t v31 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  v28,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (v20)
        {
          *(_DWORD *)os_log_type_t v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null metadata, no backtrace", v28, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  v28,  0xCu);
        }
      }
    }

uint64_t __nw_http_connection_metadata_get_privacy_stance_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 164);
  return 1LL;
}

uint64_t __nw_http_connection_metadata_is_multipath_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 196) & 1;
  return 1LL;
}

uint64_t __nw_http_connection_metadata_is_unlisted_tracker_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 196) & 2) != 0;
  return 1LL;
}

uint64_t __nw_http_connection_metadata_used_tfo_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 196) & 8) != 0;
  return 1LL;
}

void nw_http_connection_metadata_set_uuid(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v27 = "nw_http_connection_metadata_set_uuid";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_http_connection_metadata_set_uuid";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          int v27 = "nw_http_connection_metadata_set_uuid";
          __int16 v28 = 2082;
          __int16 v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          goto LABEL_7;
        }
LABEL_42:
        free(v10);
        goto LABEL_7;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_http_connection_metadata_set_uuid";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_http_connection_metadata_set_uuid";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_set_uuid_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 180) = *(_OWORD *)*(void *)(a1 + 32);
  return 1LL;
}

void nw_http_connection_metadata_get_uuid(void *a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = *((id *)v3 + 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v34 = "nw_protocol_metadata_copy_definition";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v9, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v34 = "nw_protocol_metadata_copy_definition";
          __int16 v35 = 2082;
          os_log_type_t v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_181A5C000, v10, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl( &dword_181A5C000,  v10,  v27,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_http_connection_metadata_get_uuid_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)*(void *)(a1 + 32) = *(_OWORD *)(a2 + 180);
  return 1LL;
}

void nw_http_connection_metadata_received_certificate(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_connection_metadata_received_certificate";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_received_certificate";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_connection_metadata_received_certificate";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_received_certificate";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_received_certificate";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_received_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, v4, *(void *)(a1 + 32));
    }
  }

  return 1LL;
}

void nw_http_connection_metadata_send_certificate(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_connection_metadata_send_certificate";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_send_certificate";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_connection_metadata_send_certificate";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_send_certificate";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_send_certificate";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_send_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, v4, *(void *)(a1 + 32));
    }
  }

  return 1LL;
}

uint64_t __nw_http_connection_metadata_set_send_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  *(void *)(a2 + 16) = *(void *)(a1 + 40);
  if (*(void *)(a2 + 24))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_connection_metadata_set_send_certificate_block_invoke";
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s Ignoring duplicate setting of nw_http_connection_metadata_set_send_certificate",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    uint64_t v4 = _Block_copy(*(const void **)(a1 + 32));
    id v5 = *(void **)(a2 + 24);
    *(void *)(a2 + 24) = v4;
  }

  return 1LL;
}

void nw_http_connection_metadata_set_receive_certificate(void *a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_http_connection_metadata_set_receive_certificate";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v28 = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (v28 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v28;
      if (os_log_type_enabled(v14, v28))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_connection_metadata_set_receive_certificate";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v28;
      BOOL v20 = os_log_type_enabled(v14, v28);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_http_connection_metadata_set_receive_certificate";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v13) {
          goto LABEL_8;
        }
LABEL_43:
        free(v13);
        goto LABEL_8;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_connection_metadata_set_receive_certificate";
        _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = v28;
      if (os_log_type_enabled(v14, v28))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_http_connection_metadata_set_receive_certificate";
        _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_set_receive_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  *(void *)(a2 + 32) = *(void *)(a1 + 40);
  if (*(void *)(a2 + 40))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_connection_metadata_set_receive_certificate_block_invoke";
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s Ignoring duplicate setting of nw_http_connection_metadata_set_receive_certificate",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    uint64_t v4 = _Block_copy(*(const void **)(a1 + 32));
    id v5 = *(void **)(a2 + 40);
    *(void *)(a2 + 40) = v4;
  }

  return 1LL;
}

uint64_t __nw_http_connection_metadata_set_certificate_added_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = *(void *)(a1 + 40);
  if (*(void *)(a2 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      id v8 = "nw_http_connection_metadata_set_certificate_added_handler_block_invoke";
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s Ignoring duplicate setting of nw_http_connection_metadata_set_certificate_added_handler",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    uint64_t v4 = _Block_copy(*(const void **)(a1 + 32));
    id v5 = *(void **)(a2 + 56);
    *(void *)(a2 + 56) = v4;
  }

  return 1LL;
}

void nw_http_connection_metadata_store_secondary_certificate(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    id v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_connection_metadata_store_secondary_certificate";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_store_secondary_certificate";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_connection_metadata_store_secondary_certificate";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_store_secondary_certificate";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_store_secondary_certificate";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_store_secondary_certificate_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[8];
  if (!v4)
  {
    BOOL v5 = nw_array_create();
    id v6 = (void *)a2[8];
    a2[8] = v5;

    uint64_t v4 = a2[8];
  }

  nw_array_append(v4, *(void **)(a1 + 32));
  if (a2[6])
  {
    uint64_t v7 = a2[7];
    if (v7) {
      (*(void (**)(void))(v7 + 16))();
    }
  }

  return 1LL;
}

uint64_t nw_http_connection_metadata_get_secondary_certificate_count(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
LABEL_27:
    uint64_t v6 = 0LL;
    goto LABEL_28;
  }

  id v3 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s metadata must be http_connection, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t __nw_http_connection_metadata_get_secondary_certificate_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2) {
    uint64_t v2 = (uint64_t)(*(void *)(v2 + 24) - *(void *)(v2 + 16)) >> 3;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v2;
  return 1LL;
}

void nw_http_connection_metadata_enumerate_secondary_certificates(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 64);
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke_2;
  v4[3] = &unk_189BC8628;
  id v5 = *(id *)(a1 + 32);
  nw_array_apply(v2, (uint64_t)v4);

  return 1LL;
}

uint64_t __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void nw_http_connection_metadata_set_shared_connection_pool_metadata(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http_connection_metadata_set_shared_connection_pool_metadata_block_invoke( uint64_t a1, uint64_t a2)
{
  return 1LL;
}

CFTypeRef nw_http_connection_metadata_find_or_create_pat_timestamps_array(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition((nw_protocol_metadata_t)v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v2,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v27 = 0LL;
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_connection_metadata_find_or_create_pat_timestamps_array_block_invoke;
    v23[3] = &unk_189BC60A8;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t v4 = v1[4];
      if (v4) {
        __nw_http_connection_metadata_find_or_create_pat_timestamps_array_block_invoke((uint64_t)v23, v4);
      }
LABEL_7:
      CFTypeRef v5 = CFRetain(*(CFTypeRef *)(*(void *)&buf[8] + 24LL));
      _Block_object_dispose(buf, 8);
      goto LABEL_8;
    }

    __nwlog_obj();
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v28 = 136446210;
    __int16 v29 = "nw_protocol_metadata_access_handle";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", v28, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)os_log_type_t v28 = 136446466;
            __int16 v29 = "nw_protocol_metadata_access_handle";
            __int16 v30 = 2082;
            uint64_t v31 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  v28,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (v20)
        {
          *(_DWORD *)os_log_type_t v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null metadata, no backtrace", v28, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  v28,  0xCu);
        }
      }
    }

void sub_18250D74C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http_connection_metadata_find_or_create_pat_timestamps_array_block_invoke( uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 72))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = nw_http_connection_metadata_find_or_create_pat_timestamps_array();
  }

  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 80);
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      *(void *)(a2 + 80) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    }
  }

  return 1LL;
}

uint64_t nw_http_connection_metadata_get_last_application_stream_id(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = nw_protocol_metadata_copy_definition((nw_protocol_metadata_t)v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal = nw_protocol_definition_is_equal( v2,  (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v27 = -1LL;
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_connection_metadata_get_last_application_stream_id_block_invoke;
    v23[3] = &unk_189BC60A8;
    void v23[4] = buf;
    if (v1)
    {
      uint64_t v4 = v1[4];
      if (v4) {
        __nw_http_connection_metadata_get_last_application_stream_id_block_invoke((uint64_t)v23, v4);
      }
LABEL_7:
      uint64_t v5 = *(void *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
      goto LABEL_8;
    }

    __nwlog_obj();
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v28 = 136446210;
    __int16 v29 = "nw_protocol_metadata_access_handle";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null metadata", v28, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)os_log_type_t v28 = 136446466;
            __int16 v29 = "nw_protocol_metadata_access_handle";
            __int16 v30 = 2082;
            uint64_t v31 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  v28,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (v20)
        {
          *(_DWORD *)os_log_type_t v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null metadata, no backtrace", v28, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)os_log_type_t v28 = 136446210;
          __int16 v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null metadata, backtrace limit exceeded",  v28,  0xCu);
        }
      }
    }

uint64_t __nw_http_connection_metadata_get_last_application_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 8);
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_http_create_options()
{
  if (nw_protocol_copy_http2_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
}

uint64_t tcp_connection_fallback_watcher_create(int a1, dispatch_queue_t queue, void *a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (!queue)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v29 = "tcp_connection_fallback_watcher_create";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(out_token) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (out_token == 17)
    {
      BOOL v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v29 = "tcp_connection_fallback_watcher_create";
      os_log_type_t v10 = "%{public}s called with null queue";
      goto LABEL_52;
    }

    if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = out_token;
      BOOL v21 = os_log_type_enabled(v18, (os_log_type_t)out_token);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v29 = "tcp_connection_fallback_watcher_create";
          __int16 v30 = 2082;
          uint64_t v31 = backtrace_string;
          os_log_type_t v22 = "%{public}s called with null queue, dumping backtrace:%{public}s";
LABEL_42:
          _os_log_impl(&dword_181A5C000, v18, v19, v22, buf, 0x16u);
        }

uint64_t __tcp_connection_fallback_watcher_create_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

BOOL tcp_fallback_watcher_fallback_inuse(uint64_t a1)
{
  *(void *)&v23[13] = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
    id v3 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(state64) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (state64 == 17)
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = state64;
      if (!os_log_type_enabled(v13, (os_log_type_t)state64)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
      uint32_t v6 = "%{public}s called with null watcher";
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = state64;
      BOOL v16 = os_log_type_enabled(v13, (os_log_type_t)state64);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
          __int16 v22 = 2082;
          *(void *)BOOL v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null watcher, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (!v16) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
      uint32_t v6 = "%{public}s called with null watcher, no backtrace";
    }

    else
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = state64;
      if (!os_log_type_enabled(v13, (os_log_type_t)state64)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
      uint32_t v6 = "%{public}s called with null watcher, backtrace limit exceeded";
    }

    os_log_type_t v10 = v13;
    os_log_type_t v11 = v14;
    uint32_t v12 = 12;
    goto LABEL_18;
  }

  uint64_t state64 = 0LL;
  uint32_t state = notify_get_state(a1, &state64);
  if (!state) {
    return state64 != 0;
  }
  uint32_t v2 = state;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
  __int16 v22 = 1024;
  *(_DWORD *)BOOL v23 = v2;
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v3, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)gLogObj;
      os_log_type_t v5 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
        __int16 v22 = 1024;
        *(_DWORD *)BOOL v23 = v2;
        uint32_t v6 = "%{public}s notify_get_state [%u] failed";
LABEL_17:
        os_log_type_t v10 = v4;
        os_log_type_t v11 = v5;
        uint32_t v12 = 18;
LABEL_18:
        _os_log_impl(&dword_181A5C000, v10, v11, v6, buf, v12);
      }
    }

    else if (v17)
    {
      id v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)gLogObj;
      os_log_type_t v5 = type;
      BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v8)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446722;
          BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
          __int16 v22 = 1024;
          *(_DWORD *)BOOL v23 = v2;
          v23[2] = 2082;
          *(void *)&v23[3] = v8;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s notify_get_state [%u] failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v8);
        goto LABEL_19;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
        __int16 v22 = 1024;
        *(_DWORD *)BOOL v23 = v2;
        uint32_t v6 = "%{public}s notify_get_state [%u] failed, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)gLogObj;
      os_log_type_t v5 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "tcp_fallback_watcher_fallback_inuse";
        __int16 v22 = 1024;
        *(_DWORD *)BOOL v23 = v2;
        uint32_t v6 = "%{public}s notify_get_state [%u] failed, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

void tcp_connection_fallback_watcher_destroy(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    notify_cancel(a1);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
  id v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v1, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v2 = (os_log_s *)__nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
      uint64_t v4 = "%{public}s called with null watcher";
      goto LABEL_16;
    }

    if (!v7)
    {
      uint32_t v2 = (os_log_s *)__nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
      uint64_t v4 = "%{public}s called with null watcher, backtrace limit exceeded";
      goto LABEL_16;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint32_t v2 = (os_log_s *)__nwlog_obj();
    os_log_type_t v3 = type;
    BOOL v6 = os_log_type_enabled(v2, type);
    if (backtrace_string)
    {
      if (v6)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
        __int16 v11 = 2082;
        uint32_t v12 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v2,  v3,  "%{public}s called with null watcher, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_17;
    }

    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v10 = "tcp_connection_fallback_watcher_destroy";
      uint64_t v4 = "%{public}s called with null watcher, no backtrace";
LABEL_16:
      _os_log_impl(&dword_181A5C000, v2, v3, v4, buf, 0xCu);
    }
  }

void nw_string::_destroy(nw_string *this)
{
  if (this)
  {
    uint32_t v2 = (void (*)(void))*((void *)this + 8);
    if (v2)
    {
      *((void *)this + _Block_object_dispose(va, 8) = 0LL;
      v2(*((void *)this + 3));
      *((void *)this + 3) = 0LL;
      *((void *)this + 4) = 0LL;
    }

    free(this);
  }

uint64_t *nw_string_create()
{
  uint32_t v2 = &nw::object::_class(void)::instance;
  if ((v5 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
    *(void *)algn_18C45F558 = 12LL;
    xmmword_18C45F560 = 0u;
    unk_18C45F570 = 0u;
    xmmword_18C45F580 = 0u;
    xmmword_18C45F5A0 = 0u;
    *(_OWORD *)&qword_18C45F5B0 = 0u;
    qword_18C45F5C0 = (uint64_t)v2;
    unk_18C45F5C8 = 4096LL;
    qword_18C45F5D0 = 0LL;
    qword_18C45F5D8 = 0LL;
    qword_18C45F5E0 = (uint64_t)&qword_18C45F5E0;
    qword_18C45F5E8 = (uint64_t)&qword_18C45F5E0;
    qword_18C45F5F0 = 0LL;
    dword_18C45F5F8 = 0;
    xmmword_18C45F590 = 0u;
    nw::object::class_def::setup(v2, (int64x2_t *)&xmmword_18C45F590);
LABEL_2:
    id v1 = nw::object::operator new();
    uint32_t v2 = (uint64_t *)v1;
    if (v1)
    {
      *((_DWORD *)v1 + 3) = 0;
      *(_OWORD *)(v1 + 3) = 0u;
      *(_OWORD *)(v1 + 5) = 0u;
      v1[7] = 0LL;
      return v2;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    os_log_type_t v3 = (void *)_os_log_send_and_compose_impl();
    __break(1u);
LABEL_11:
    {
      uint64_t *v2 = (uint64_t)"object";
      v2[1] = 6LL;
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *((_OWORD *)v2 + 3) = 0u;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_OWORD *)v2 + _Block_object_dispose(va, 8) = 0u;
      v2[18] = (uint64_t)(v2 + 18);
      v2[19] = (uint64_t)(v2 + 18);
      v2[20] = 0LL;
      *((_DWORD *)v2 + 42) = 0;
    }
  }

  free(v3);
  return v2;
}

BOOL nw_string_create_with_string(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_string_create_with_string";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_string_create_with_string";
      uint64_t v13 = "%{public}s called with null string";
      goto LABEL_26;
    }

    if (!v19)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_string_create_with_string";
      uint64_t v13 = "%{public}s called with null string, backtrace limit exceeded";
      goto LABEL_26;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_string_create_with_string";
      uint64_t v13 = "%{public}s called with null string, no backtrace";
      goto LABEL_26;
    }

    if (!v17) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v22 = "nw_string_create_with_string";
    __int16 v23 = 2082;
    char v24 = backtrace_string;
    BOOL v16 = "%{public}s called with null string, dumping backtrace:%{public}s";
    goto LABEL_18;
  }

  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      nw::object::_class(v18);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      *(void *)algn_18C45F558 = 12LL;
      xmmword_18C45F560 = 0u;
      unk_18C45F570 = 0u;
      xmmword_18C45F580 = 0u;
      xmmword_18C45F5A0 = 0u;
      *(_OWORD *)&qword_18C45F5B0 = 0u;
      qword_18C45F5C0 = (uint64_t)&nw::object::_class(void)::instance;
      unk_18C45F5C8 = 4096LL;
      qword_18C45F5D0 = 0LL;
      qword_18C45F5D8 = 0LL;
      qword_18C45F5E0 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5E8 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5F0 = 0LL;
      dword_18C45F5F8 = 0;
      xmmword_18C45F590 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_18C45F590);
    }
  }

  os_log_type_t v3 = nw::object::operator new();
  if (v3)
  {
    uint64_t v4 = v3;
    *(_OWORD *)(v3 + 5) = 0u;
    unsigned __int8 v5 = (std::string *)(v3 + 5);
    HIDWORD(v5[-2].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v5[-1].__r_.__value_.__r.__words[1] = 0u;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    BOOL v6 = *(const std::string::value_type **)(a1 + 24);
    if (v6)
    {
      std::string::__assign_external(v5, v6);
      LODWORD(v7) = *((char *)v4 + 63);
      if ((v7 & 0x80000000) != 0)
      {
        unsigned __int8 v5 = (std::string *)v4[5];
        char v7 = v4[6];
        goto LABEL_21;
      }

      unsigned __int8 v5 = (std::string *)(v4 + 5);
    }

    else
    {
      LOBYTE(v7) = 0;
    }

    char v7 = (uint64_t *)v7;
LABEL_21:
    v4[3] = (uint64_t *)v5;
    void v4[4] = v7;
    return (BOOL)v4;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  __int16 v22 = "operator()";
  __int16 v23 = 2080;
  char v24 = "auto nw_string_create_with_string(nw_string_t)::(anonymous class)::operator()() const";
  id v8 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_string_create_with_string";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_string_create_with_string";
        uint64_t v13 = "%{public}s called with null self";
LABEL_26:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        goto LABEL_27;
      }

      goto LABEL_27;
    }

    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_string_create_with_string";
        uint64_t v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_26;
      }

BOOL nw_string_create_with_c_string(const std::string::value_type *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_string_create_with_c_string";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_string_create_with_c_string";
      uint64_t v13 = "%{public}s called with null c_str";
      goto LABEL_23;
    }

    if (!v19)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_string_create_with_c_string";
      uint64_t v13 = "%{public}s called with null c_str, backtrace limit exceeded";
      goto LABEL_23;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_string_create_with_c_string";
      uint64_t v13 = "%{public}s called with null c_str, no backtrace";
      goto LABEL_23;
    }

    if (!v17) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v22 = "nw_string_create_with_c_string";
    __int16 v23 = 2082;
    char v24 = backtrace_string;
    BOOL v16 = "%{public}s called with null c_str, dumping backtrace:%{public}s";
    goto LABEL_17;
  }

  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      nw::object::_class(v18);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      *(void *)algn_18C45F558 = 12LL;
      xmmword_18C45F560 = 0u;
      unk_18C45F570 = 0u;
      xmmword_18C45F580 = 0u;
      xmmword_18C45F5A0 = 0u;
      *(_OWORD *)&qword_18C45F5B0 = 0u;
      qword_18C45F5C0 = (uint64_t)&nw::object::_class(void)::instance;
      unk_18C45F5C8 = 4096LL;
      qword_18C45F5D0 = 0LL;
      qword_18C45F5D8 = 0LL;
      qword_18C45F5E0 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5E8 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5F0 = 0LL;
      dword_18C45F5F8 = 0;
      xmmword_18C45F590 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_18C45F590);
    }
  }

  os_log_type_t v3 = nw::object::operator new();
  if (v3)
  {
    uint64_t v4 = v3;
    *(_OWORD *)(v3 + 5) = 0u;
    unsigned __int8 v5 = (std::string *)(v3 + 5);
    HIDWORD(v5[-2].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v5[-1].__r_.__value_.__r.__words[1] = 0u;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    BOOL v6 = std::string::__assign_external(v5, a1);
    if ((char)v6->__r_.__value_.__s.__size_ < 0)
    {
      BOOL v6 = (std::string *)v4[5];
      size = v4[6];
    }

    else
    {
      size = (uint64_t *)v6->__r_.__value_.__s.__size_;
    }

    v4[3] = (uint64_t *)v6;
    void v4[4] = size;
    return (BOOL)v4;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  __int16 v22 = "operator()";
  __int16 v23 = 2080;
  char v24 = "auto nw_string_create_with_c_string(const char *)::(anonymous class)::operator()() const";
  id v8 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_string_create_with_c_string";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_string_create_with_c_string";
        uint64_t v13 = "%{public}s called with null self";
LABEL_23:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        goto LABEL_24;
      }

      goto LABEL_24;
    }

    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_string_create_with_c_string";
        uint64_t v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_23;
      }

BOOL nw_string_create_with_c_string_no_copy(const char *a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_string_create_with_c_string_no_copy";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_string_create_with_c_string_no_copy";
      uint64_t v13 = "%{public}s called with null c_str";
      goto LABEL_21;
    }

    if (!v20)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_string_create_with_c_string_no_copy";
      uint64_t v13 = "%{public}s called with null c_str, backtrace limit exceeded";
      goto LABEL_21;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_string_create_with_c_string_no_copy";
      uint64_t v13 = "%{public}s called with null c_str, no backtrace";
      goto LABEL_21;
    }

    if (!v17) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v23 = "nw_string_create_with_c_string_no_copy";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    BOOL v16 = "%{public}s called with null c_str, dumping backtrace:%{public}s";
    goto LABEL_15;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_string_create_with_c_string_no_copy";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_string_create_with_c_string_no_copy";
      uint64_t v13 = "%{public}s called with null free_func";
      goto LABEL_21;
    }

    if (!v20)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_string_create_with_c_string_no_copy";
      uint64_t v13 = "%{public}s called with null free_func, backtrace limit exceeded";
      goto LABEL_21;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v18 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_string_create_with_c_string_no_copy";
      uint64_t v13 = "%{public}s called with null free_func, no backtrace";
      goto LABEL_21;
    }

    if (!v18) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v23 = "nw_string_create_with_c_string_no_copy";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    BOOL v16 = "%{public}s called with null free_func, dumping backtrace:%{public}s";
    goto LABEL_15;
  }

  if ((v4 & 1) == 0)
  {
    if ((_DWORD)v19)
    {
      nw::object::_class(v19);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      *(void *)algn_18C45F558 = 12LL;
      xmmword_18C45F560 = 0u;
      unk_18C45F570 = 0u;
      xmmword_18C45F580 = 0u;
      xmmword_18C45F5A0 = 0u;
      *(_OWORD *)&qword_18C45F5B0 = 0u;
      qword_18C45F5C0 = (uint64_t)&nw::object::_class(void)::instance;
      unk_18C45F5C8 = 4096LL;
      qword_18C45F5D0 = 0LL;
      qword_18C45F5D8 = 0LL;
      qword_18C45F5E0 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5E8 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5F0 = 0LL;
      dword_18C45F5F8 = 0;
      xmmword_18C45F590 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_18C45F590);
    }
  }

  unsigned __int8 v5 = nw::object::operator new();
  if (v5)
  {
    BOOL v6 = v5;
    *((_DWORD *)v5 + 3) = 0;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    v5[7] = 0LL;
    size_t v7 = strlen(a1);
    v6[3] = (uint64_t *)a1;
    void v6[4] = (uint64_t *)v7;
    v6[8] = a2;
    return (BOOL)v6;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  __int16 v23 = "operator()";
  __int16 v24 = 2080;
  uint64_t v25 = "auto nw_string_create_with_c_string_no_copy(char *, void (*)(char *))::(anonymous class)::operator()() const";
  id v8 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_string_create_with_c_string_no_copy";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_string_create_with_c_string_no_copy";
        uint64_t v13 = "%{public}s called with null self";
LABEL_21:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        goto LABEL_22;
      }

      goto LABEL_22;
    }

    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_string_create_with_c_string_no_copy";
        uint64_t v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_21;
      }

BOOL nw_string_create_with_dispatch_data(dispatch_data_s *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_string_create_with_dispatch_data";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = v21;
      if (!os_log_type_enabled(v11, v21)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_string_create_with_dispatch_data";
      uint64_t v13 = "%{public}s called with null data";
      goto LABEL_23;
    }

    if (!v20)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = v21;
      if (!os_log_type_enabled(v11, v21)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_string_create_with_dispatch_data";
      uint64_t v13 = "%{public}s called with null data, backtrace limit exceeded";
      goto LABEL_23;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = v21;
    BOOL v17 = os_log_type_enabled(v11, v21);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_string_create_with_dispatch_data";
      uint64_t v13 = "%{public}s called with null data, no backtrace";
      goto LABEL_23;
    }

    if (!v17) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v23 = "nw_string_create_with_dispatch_data";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    BOOL v16 = "%{public}s called with null data, dumping backtrace:%{public}s";
    goto LABEL_17;
  }

  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      nw::object::_class(v18);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      *(void *)algn_18C45F558 = 12LL;
      xmmword_18C45F560 = 0u;
      unk_18C45F570 = 0u;
      xmmword_18C45F580 = 0u;
      xmmword_18C45F5A0 = 0u;
      *(_OWORD *)&qword_18C45F5B0 = 0u;
      qword_18C45F5C0 = (uint64_t)&nw::object::_class(void)::instance;
      unk_18C45F5C8 = 4096LL;
      qword_18C45F5D0 = 0LL;
      qword_18C45F5D8 = 0LL;
      qword_18C45F5E0 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5E8 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5F0 = 0LL;
      dword_18C45F5F8 = 0;
      xmmword_18C45F590 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_18C45F590);
    }
  }

  os_log_type_t v3 = nw::object::operator new();
  if (v3)
  {
    unsigned __int8 v4 = v3;
    *((_DWORD *)v3 + 3) = 0;
    *(_OWORD *)(v3 + 3) = 0u;
    *(_OWORD *)(v3 + 5) = 0u;
    unsigned __int8 v5 = v3 + 5;
    uint64_t v6 = MEMORY[0x1895F87A8];
    v3[7] = 0LL;
    applier[0] = v6;
    applier[1] = 0x40000000LL;
    applier[2] = __nw_string_create_with_dispatch_data_block_invoke;
    applier[3] = &__block_descriptor_tmp_76040;
    applier[4] = v3;
    dispatch_data_apply(a1, applier);
    if (*((char *)v4 + 63) < 0)
    {
      unsigned __int8 v5 = (uint64_t **)v4[5];
      size_t v7 = v4[6];
    }

    else
    {
      size_t v7 = (uint64_t *)*((unsigned __int8 *)v4 + 63);
    }

    v4[3] = (uint64_t *)v5;
    void v4[4] = v7;
    return (BOOL)v4;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  __int16 v23 = "operator()";
  __int16 v24 = 2080;
  uint64_t v25 = "auto nw_string_create_with_dispatch_data(dispatch_data_t)::(anonymous class)::operator()() const";
  id v8 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_string_create_with_dispatch_data";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = v21;
      if (os_log_type_enabled((os_log_t)gLogObj, v21))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_string_create_with_dispatch_data";
        uint64_t v13 = "%{public}s called with null self";
LABEL_23:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        goto LABEL_24;
      }

      goto LABEL_24;
    }

    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = v21;
      if (os_log_type_enabled((os_log_t)gLogObj, v21))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_string_create_with_dispatch_data";
        uint64_t v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_23;
      }

uint64_t __nw_string_create_with_dispatch_data_block_invoke( uint64_t a1, int a2, int a3, std::string::value_type *__s, std::string::size_type __n)
{
  return 1LL;
}

BOOL nw_string_is_empty(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1) {
    return *(void *)(a1 + 32) == 0LL;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v11 = "nw_string_is_empty";
  unsigned __int8 v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v11 = "nw_string_is_empty";
        unsigned __int8 v5 = "%{public}s called with null string";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }

    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v11 = "nw_string_is_empty";
          __int16 v12 = 2082;
          uint64_t v13 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null string, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v11 = "nw_string_is_empty";
        unsigned __int8 v5 = "%{public}s called with null string, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      os_log_type_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v11 = "nw_string_is_empty";
        unsigned __int8 v5 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

BOOL nw_string_copy(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_string_copy";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_string_copy";
      uint64_t v13 = "%{public}s called with null string";
      goto LABEL_26;
    }

    if (!v19)
    {
      __int16 v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_string_copy";
      uint64_t v13 = "%{public}s called with null string, backtrace limit exceeded";
      goto LABEL_26;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_string_copy";
      uint64_t v13 = "%{public}s called with null string, no backtrace";
      goto LABEL_26;
    }

    if (!v17) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v22 = "nw_string_copy";
    __int16 v23 = 2082;
    __int16 v24 = backtrace_string;
    BOOL v16 = "%{public}s called with null string, dumping backtrace:%{public}s";
    goto LABEL_18;
  }

  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      nw::object::_class(v18);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      *(void *)algn_18C45F558 = 12LL;
      xmmword_18C45F560 = 0u;
      unk_18C45F570 = 0u;
      xmmword_18C45F580 = 0u;
      xmmword_18C45F5A0 = 0u;
      *(_OWORD *)&qword_18C45F5B0 = 0u;
      qword_18C45F5C0 = (uint64_t)&nw::object::_class(void)::instance;
      unk_18C45F5C8 = 4096LL;
      qword_18C45F5D0 = 0LL;
      qword_18C45F5D8 = 0LL;
      qword_18C45F5E0 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5E8 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5F0 = 0LL;
      dword_18C45F5F8 = 0;
      xmmword_18C45F590 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_18C45F590);
    }
  }

  os_log_type_t v3 = nw::object::operator new();
  if (v3)
  {
    os_log_type_t v4 = v3;
    *(_OWORD *)(v3 + 5) = 0u;
    unsigned __int8 v5 = (std::string *)(v3 + 5);
    HIDWORD(v5[-2].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v5[-1].__r_.__value_.__r.__words[1] = 0u;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v6 = *(const std::string::value_type **)(a1 + 24);
    if (v6)
    {
      std::string::__assign_external(v5, v6);
      LODWORD(v7) = *((char *)v4 + 63);
      if ((v7 & 0x80000000) != 0)
      {
        unsigned __int8 v5 = (std::string *)v4[5];
        BOOL v7 = v4[6];
        goto LABEL_21;
      }

      unsigned __int8 v5 = (std::string *)(v4 + 5);
    }

    else
    {
      LOBYTE(v7) = 0;
    }

    BOOL v7 = (uint64_t *)v7;
LABEL_21:
    v4[3] = (uint64_t *)v5;
    void v4[4] = v7;
    return (BOOL)v4;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  __int16 v22 = "operator()";
  __int16 v23 = 2080;
  __int16 v24 = "auto nw_string_copy(nw_string_t)::(anonymous class)::operator()() const";
  char v8 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_string_copy";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_string_copy";
        uint64_t v13 = "%{public}s called with null self";
LABEL_26:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        goto LABEL_27;
      }

      goto LABEL_27;
    }

    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_string_copy";
        uint64_t v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_26;
      }

BOOL nw_string_is_equal_to_string(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_string_is_equal_to_string";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v12)
      {
        unsigned __int8 v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_string_is_equal_to_string";
        BOOL v7 = "%{public}s called with null string1, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned __int8 v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v9) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_string_is_equal_to_string";
        BOOL v7 = "%{public}s called with null string1, no backtrace";
        goto LABEL_31;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v15 = "nw_string_is_equal_to_string";
        __int16 v16 = 2082;
        BOOL v17 = backtrace_string;
        os_log_type_t v10 = "%{public}s called with null string1, dumping backtrace:%{public}s";
LABEL_21:
        _os_log_impl(&dword_181A5C000, v5, v6, v10, buf, 0x16u);
      }

BOOL nw_string_is_equal_to_c_string(uint64_t a1, char *__s)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_string_is_equal_to_c_string";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        BOOL v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_string_is_equal_to_c_string";
        BOOL v9 = "%{public}s called with null string1, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v11) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_string_is_equal_to_c_string";
        BOOL v9 = "%{public}s called with null string1, no backtrace";
        goto LABEL_31;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v17 = "nw_string_is_equal_to_c_string";
        __int16 v18 = 2082;
        char v19 = backtrace_string;
        char v12 = "%{public}s called with null string1, dumping backtrace:%{public}s";
LABEL_21:
        _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
      }

void nw_string_append_string(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_string_append_string";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_string_append_string";
      char v12 = "%{public}s called with null string1";
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_string_append_string";
          __int16 v21 = 2082;
          __int16 v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null string1, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v9) {
          return;
        }
LABEL_44:
        free(v9);
        return;
      }

      if (!v14) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_string_append_string";
      char v12 = "%{public}s called with null string1, no backtrace";
    }

    else
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_string_append_string";
      char v12 = "%{public}s called with null string1, backtrace limit exceeded";
    }

void nw_string_append_c_string(uint64_t a1, char *__s)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_string_append_c_string";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_string_append_c_string";
      BOOL v13 = "%{public}s called with null string1";
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v21 = "nw_string_append_c_string";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null string1, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v10) {
          return;
        }
LABEL_44:
        free(v10);
        return;
      }

      if (!v15) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_string_append_c_string";
      BOOL v13 = "%{public}s called with null string1, no backtrace";
    }

    else
    {
      os_log_type_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_string_append_c_string";
      BOOL v13 = "%{public}s called with null string1, backtrace limit exceeded";
    }

void nw_string_append_dispatch_data(uint64_t a1, dispatch_data_t data)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_string_append_dispatch_data";
    unsigned __int8 v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v15;
      if (!os_log_type_enabled(v6, v15)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_string_append_dispatch_data";
      size_t v8 = "%{public}s called with null string";
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v15;
      BOOL v10 = os_log_type_enabled(v6, v15);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_string_append_dispatch_data";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null string, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_36:
        if (!v5) {
          return;
        }
LABEL_37:
        free(v5);
        return;
      }

      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_string_append_dispatch_data";
      size_t v8 = "%{public}s called with null string, no backtrace";
    }

    else
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v15;
      if (!os_log_type_enabled(v6, v15)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_string_append_dispatch_data";
      size_t v8 = "%{public}s called with null string, backtrace limit exceeded";
    }

uint64_t __nw_string_append_dispatch_data_block_invoke( uint64_t a1, int a2, int a3, std::string::value_type *__s, std::string::size_type __n)
{
  return 1LL;
}

uint64_t nw_string_get_length(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1) {
    return *(void *)(a1 + 32);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "nw_string_get_length";
  size_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_length";
        unsigned __int8 v5 = "%{public}s called with null string";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }

    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "nw_string_get_length";
          __int16 v12 = 2082;
          BOOL v13 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null string, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_length";
        unsigned __int8 v5 = "%{public}s called with null string, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_length";
        unsigned __int8 v5 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

uint64_t nw_string_get_c_string(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1) {
    return *(void *)(a1 + 24);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "nw_string_get_c_string";
  size_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_c_string";
        unsigned __int8 v5 = "%{public}s called with null string";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }

    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "nw_string_get_c_string";
          __int16 v12 = 2082;
          BOOL v13 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null string, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_c_string";
        unsigned __int8 v5 = "%{public}s called with null string, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_string_get_c_string";
        unsigned __int8 v5 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

uint64_t nw_string_get_char_at_index(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "nw_string_get_char_at_index";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_string_get_char_at_index";
      uint64_t v6 = "%{public}s called with null string";
    }

    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v13 = "nw_string_get_char_at_index";
          __int16 v14 = 2082;
          os_log_type_t v15 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null string, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (!v8)
      {
LABEL_18:
        if (v3) {
          free(v3);
        }
        return 0;
      }

      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_string_get_char_at_index";
      uint64_t v6 = "%{public}s called with null string, no backtrace";
    }

    else
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_string_get_char_at_index";
      uint64_t v6 = "%{public}s called with null string, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_18;
  }

  if (*(void *)(a1 + 32) <= a2) {
    return 0;
  }
  return *(char *)(*(void *)(a1 + 24) + a2);
}

BOOL nw_string_get_bytes(uint64_t a1, void *__dst, size_t a3, unint64_t a4, size_t a5, size_t *a6)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v30 = "nw_string_get_bytes";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null string";
      goto LABEL_55;
    }

    if (!v27)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null string, backtrace limit exceeded";
      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v22 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null string, no backtrace";
      goto LABEL_55;
    }

    if (!v22) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v30 = "nw_string_get_bytes";
    __int16 v31 = 2082;
    __int16 v32 = backtrace_string;
    uint64_t v23 = "%{public}s called with null string, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_181A5C000, v18, v19, v23, buf, 0x16u);
    goto LABEL_42;
  }

  if (!__dst)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v30 = "nw_string_get_bytes";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null buffer";
      goto LABEL_55;
    }

    if (!v27)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v24 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v24) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_55;
    }

    if (!v24) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v30 = "nw_string_get_bytes";
    __int16 v31 = 2082;
    __int16 v32 = backtrace_string;
    uint64_t v23 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
    goto LABEL_41;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v30 = "nw_string_get_bytes";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null bytes_copied";
      goto LABEL_55;
    }

    if (!v27)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v30 = "nw_string_get_bytes";
      uint64_t v20 = "%{public}s called with null bytes_copied, backtrace limit exceeded";
      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v26 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v30 = "nw_string_get_bytes";
        __int16 v31 = 2082;
        __int16 v32 = backtrace_string;
        uint64_t v23 = "%{public}s called with null bytes_copied, dumping backtrace:%{public}s";
        goto LABEL_41;
      }

uint64_t nw_string_find_c_string(uint64_t a1, char *__s)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_string_find_c_string";
    size_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_string_find_c_string";
        BOOL v17 = "%{public}s called with null string";
LABEL_42:
        _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
      }

BOOL nw_protocol_http_messaging_create(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_http_messaging_create";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_http_messaging_create";
        BOOL v19 = "%{public}s called with null endpoint";
LABEL_57:
        _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
      }

void ___ZL47nw_protocol_http_messaging_get_listen_callbacksv_block_invoke()
{
  nw_protocol_http_messaging_get_listen_callbacks(void)::listen_protocol_callbacks = (uint64_t)nw_protocol_http_messaging_listen_protocol_new_flow;
  *(void *)algn_18C593408 = nw_protocol_http_messaging_listen_protocol_disconnected;
}

uint64_t nw_protocol_http_messaging_listen_protocol_new_flow( nw_listen_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    char v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null listener";
      goto LABEL_21;
    }

    if (!v18)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null listener, backtrace limit exceeded";
      goto LABEL_21;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v16 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null listener, no backtrace";
      goto LABEL_21;
    }

    if (!v16) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    __int16 v22 = 2082;
    uint64_t v23 = backtrace_string;
    uint64_t v14 = "%{public}s called with null listener, dumping backtrace:%{public}s";
    goto LABEL_15;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    char v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null http_messaging";
      goto LABEL_21;
    }

    if (!v18)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_21;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_21;
    }

    if (!v17) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    __int16 v22 = 2082;
    uint64_t v23 = backtrace_string;
    uint64_t v14 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_15;
  }

  if ((handle[272] & 2) == 0)
  {
    if (gLogDatapath)
    {
      size_t v15 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
        __int16 v22 = 2082;
        uint64_t v23 = handle + 188;
        __int16 v24 = 2080;
        uint64_t v25 = " ";
        __int16 v26 = 2112;
        char v27 = a2;
        _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%screating new inbound flow from %@",  buf,  0x2Au);
      }
    }
  }

  int64_t v6 = (void *)*((void *)handle + 16);
  if (v6 != *((void **)handle + 17)) {
    return (**(uint64_t (***)(void, nw_endpoint *, nw_parameters *))*v6)(*v6, a2, a3);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
  char v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (os_log_s *)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      char v11 = "%{public}s No listen handler found for inbound stream";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      goto LABEL_22;
    }

    goto LABEL_22;
  }

  if (v18)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (os_log_s *)gLogObj;
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
        char v11 = "%{public}s No listen handler found for inbound stream, no backtrace";
        goto LABEL_21;
      }

      goto LABEL_22;
    }

    if (!v13)
    {
LABEL_16:
      free(backtrace_string);
      goto LABEL_22;
    }

    *(_DWORD *)buf = 136446466;
    BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    __int16 v22 = 2082;
    uint64_t v23 = backtrace_string;
    uint64_t v14 = "%{public}s No listen handler found for inbound stream, dumping backtrace:%{public}s";
LABEL_15:
    _os_log_impl(&dword_181A5C000, v9, v10, v14, buf, 0x16u);
    goto LABEL_16;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v9 = (os_log_s *)gLogObj;
  os_log_type_t v10 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    char v11 = "%{public}s No listen handler found for inbound stream, backtrace limit exceeded";
    goto LABEL_21;
  }

void nw_protocol_http_messaging_listen_protocol_disconnected( nw_listen_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v13 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
            __int16 v21 = 2082;
            __int16 v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
        }

        else if (v13)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          uint64_t v7 = "%{public}s called with null listener, no backtrace";
          goto LABEL_23;
        }
      }

      else
      {
        os_log_type_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          uint64_t v7 = "%{public}s called with null listener, backtrace limit exceeded";
          goto LABEL_23;
        }
      }

      goto LABEL_24;
    }

    os_log_type_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    uint64_t v7 = "%{public}s called with null listener";
LABEL_23:
    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_24;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v17)
      {
        BOOL v9 = (char *)__nw_create_backtrace_string();
        os_log_type_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v14 = os_log_type_enabled(v5, type);
        if (v9)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
            __int16 v21 = 2082;
            __int16 v22 = v9;
            char v11 = "%{public}s called with null existing_protocol, dumping backtrace:%{public}s";
            goto LABEL_16;
          }

void nw_protocol_http_messaging_teardown(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_protocol_http_messaging_teardown";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_protocol_http_messaging_teardown";
      BOOL v15 = "%{public}s called with null protocol";
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v23 = "nw_protocol_http_messaging_teardown";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_46:
        if (!v12) {
          return;
        }
        goto LABEL_47;
      }

      if (!v17) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_protocol_http_messaging_teardown";
      BOOL v15 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_protocol_http_messaging_teardown";
      BOOL v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_http_messaging_destroy(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(a1 + 272) & 2) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v12 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v13 = 136446722;
        os_log_type_t v14 = "nw_http_messaging_destroy";
        __int16 v15 = 2082;
        uint64_t v16 = a1 + 188;
        __int16 v17 = 2080;
        char v18 = " ";
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v13, 0x20u);
      }
    }
  }

  uint64_t v3 = *(_BYTE **)(a1 + 128);
  uint64_t v2 = *(_BYTE **)(a1 + 136);
  int64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    os_log_type_t v5 = 0LL;
  }

  else
  {
    if (v4 < 0) {
      abort();
    }
    os_log_type_t v5 = (char *)operator new(v2 - v3);
    memcpy(v5, v3, v4);
    uint64_t v6 = 0LL;
    uint64_t v7 = 8 * (v4 >> 3);
    do
    {
      (*(void (**)(void, uint64_t, void))(**(void **)&v5[v6] + 8LL))(*(void *)&v5[v6], a1, 0LL);
      v6 += 8LL;
    }

    while (v7 != v6);
  }

  *(void *)(a1 + 40) = 0LL;
  uint64_t v8 = *(void **)(a1 + 160);
  if (v8)
  {
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = v8;
    operator delete(v8);
  }

  uint64_t v9 = *(void **)(a1 + 128);
  if (v9)
  {
    *(void *)(a1 + 136) = v9;
    operator delete(v9);
  }

  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    uint64_t v10 = *(void **)(a1 + 112);
    if (v10) {
      os_release(v10);
    }
  }

  *(void *)(a1 + 112) = 0LL;
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    char v11 = *(void **)(a1 + 96);
    if (v11) {
      os_release(v11);
    }
  }

  free((void *)a1);
  if (v5) {
    operator delete(v5);
  }
}

void ___ZL40nw_protocol_http_messaging_get_callbacksv_block_invoke()
{
  qword_18C5930F8 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_18C593100 = nw_protocol_common_get_output_frames;
  qword_18C5930E8 = (uint64_t)nw_protocol_common_input_available;
  unk_18C5930F0 = nw_protocol_common_output_available;
  qword_18C593168 = (uint64_t)nw_protocol_common_output_finished;
  unk_18C593170 = nw_protocol_common_get_output_local_endpoint;
  qword_18C5931A8 = (uint64_t)nw_protocol_common_reset;
  unk_18C5931B0 = nw_protocol_common_input_flush;
  qword_18C593158 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_18C593160 = nw_protocol_common_input_finished;
  qword_18C593178 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_18C593180 = nw_protocol_common_waiting_for_output;
  qword_18C593138 = (uint64_t)nw_protocol_common_register_notification;
  unk_18C593140 = nw_protocol_common_unregister_notification;
  qword_18C593148 = (uint64_t)nw_protocol_common_notify;
  unk_18C593150 = nw_protocol_common_updated_path;
  qword_18C593108 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_18C593110 = nw_protocol_common_link_state;
  nw_protocol_http_messaging_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http_messaging_add_input_handler;
  unk_18C5930B0 = nw_protocol_http_messaging_remove_input_handler;
  qword_18C593118 = (uint64_t)nw_protocol_http_messaging_get_parameters;
  unk_18C593120 = nw_protocol_common_get_path;
  qword_18C593128 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_18C593130 = nw_protocol_http_messaging_get_remote_endpoint;
  qword_18C5930B8 = (uint64_t)nw_protocol_http_messaging_replace_input_handler;
  unk_18C5930C0 = nw_protocol_http_messaging_connect;
  qword_18C5930C8 = (uint64_t)nw_protocol_http_messaging_disconnect;
  unk_18C5930D0 = nw_protocol_http_messaging_connected;
  qword_18C5930D8 = (uint64_t)nw_protocol_http_messaging_disconnected;
  unk_18C5930E0 = nw_protocol_http_messaging_error;
  qword_18C593188 = (uint64_t)nw_protocol_http_messaging_copy_info;
  unk_18C593190 = nw_protocol_http_messaging_add_listen_handler;
  qword_18C593198 = (uint64_t)nw_protocol_http_messaging_remove_listen_handler;
  unk_18C5931A0 = nw_protocol_common_get_message_properties;
}

uint64_t nw_protocol_http_messaging_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v51 = "nw_protocol_http_messaging_add_input_handler";
    uint64_t v37 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      size_t v51 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v40 = "%{public}s called with null protocol";
      goto LABEL_99;
    }

    if (!v48)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      size_t v51 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v40 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_99;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v38 = (os_log_s *)__nwlog_obj();
    os_log_type_t v39 = type;
    BOOL v42 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        size_t v51 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_99;
      }

      goto LABEL_100;
    }

    if (!v42) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446466;
    size_t v51 = "nw_protocol_http_messaging_add_input_handler";
    __int16 v52 = 2082;
    v53 = (nw_protocol *)backtrace_string;
    __int16 v43 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_77:
    _os_log_impl(&dword_181A5C000, v38, v39, v43, buf, 0x16u);
    goto LABEL_78;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v51 = "nw_protocol_http_messaging_add_input_handler";
    uint64_t v37 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      size_t v51 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v40 = "%{public}s called with null http_messaging";
      goto LABEL_99;
    }

    if (!v48)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      size_t v51 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v40 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_99;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v38 = (os_log_s *)__nwlog_obj();
    os_log_type_t v39 = type;
    BOOL v44 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        size_t v51 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v40 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_99;
      }

      goto LABEL_100;
    }

    if (!v44) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446466;
    size_t v51 = "nw_protocol_http_messaging_add_input_handler";
    __int16 v52 = 2082;
    v53 = (nw_protocol *)backtrace_string;
    __int16 v43 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_77;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v51 = "nw_protocol_http_messaging_add_input_handler";
    uint64_t v37 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      size_t v51 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v40 = "%{public}s called with null input_protocol";
      goto LABEL_99;
    }

    if (!v48)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      size_t v51 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v40 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_99;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v38 = (os_log_s *)__nwlog_obj();
    os_log_type_t v39 = type;
    BOOL v45 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        size_t v51 = "nw_protocol_http_messaging_add_input_handler";
        uint64_t v40 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_99;
      }

      goto LABEL_100;
    }

    if (!v45) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446466;
    size_t v51 = "nw_protocol_http_messaging_add_input_handler";
    __int16 v52 = 2082;
    v53 = (nw_protocol *)backtrace_string;
    __int16 v43 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_77;
  }

  if (*((void *)handle + 19)) {
    return nw_http_messaging_add_to_version_specific_protocol((uint64_t)a1->handle, (uint64_t)a2);
  }
  uint64_t v6 = (nw_protocol *)*((void *)handle + 6);
  if (!v6)
  {
    nw_protocol_set_input_handler((uint64_t)a1->handle, (uint64_t)a2);
    *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
    parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
    if (parameters)
    {
      char v11 = nw_parameters_copy_protocol_options_legacy(parameters, a1);
      if (v11)
      {
        uint64_t v12 = v11;
        int v13 = v12;
        uint64_t v14 = 0LL;
        handle[188] = 0;
        __int16 v15 = handle + 188;
        unint64_t v16 = 84LL;
        while (1)
        {
          int v17 = v12[v14 + 48];
          v15[v14] = v17;
          if (!v17) {
            break;
          }
          --v16;
          ++v14;
          if (v16 <= 1)
          {
            v15[v14] = 0;
            break;
          }
        }

        os_release(v13);
        if (a2->output_handler) {
          goto LABEL_40;
        }
        goto LABEL_17;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      size_t v51 = "nw_protocol_http_messaging_add_input_handler";
      uint64_t v37 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v48 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          size_t v51 = "nw_protocol_http_messaging_add_input_handler";
          uint64_t v40 = "%{public}s called with null options";
          goto LABEL_99;
        }

uint64_t nw_protocol_http_messaging_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    unint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        int v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "nw_protocol_http_messaging_replace_input_handler";
          uint64_t v19 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_83;
        }

        goto LABEL_84;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "nw_protocol_http_messaging_replace_input_handler";
          uint64_t v19 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_83;
        }

        goto LABEL_84;
      }

      if (!v21) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      __int16 v30 = 2082;
      __int16 v31 = (nw_protocol *)backtrace_string;
      __int16 v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }

    int v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    uint64_t v19 = "%{public}s called with null protocol";
LABEL_83:
    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
    goto LABEL_84;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    unint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        int v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "nw_protocol_http_messaging_replace_input_handler";
          uint64_t v19 = "%{public}s called with null http_messaging, backtrace limit exceeded";
          goto LABEL_83;
        }

        goto LABEL_84;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v23 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "nw_protocol_http_messaging_replace_input_handler";
          uint64_t v19 = "%{public}s called with null http_messaging, no backtrace";
          goto LABEL_83;
        }

        goto LABEL_84;
      }

      if (!v23) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      __int16 v30 = 2082;
      __int16 v31 = (nw_protocol *)backtrace_string;
      __int16 v22 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_65;
    }

    int v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    uint64_t v19 = "%{public}s called with null http_messaging";
    goto LABEL_83;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    unint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "nw_protocol_http_messaging_replace_input_handler";
      uint64_t v19 = "%{public}s called with null old_input_protocol";
      goto LABEL_83;
    }

    if (!v26)
    {
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_protocol_http_messaging_replace_input_handler";
        uint64_t v19 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }

      goto LABEL_84;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v24 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_protocol_http_messaging_replace_input_handler";
        uint64_t v19 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_83;
      }

      goto LABEL_84;
    }

    if (!v24) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136446466;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    __int16 v30 = 2082;
    __int16 v31 = (nw_protocol *)backtrace_string;
    __int16 v22 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_181A5C000, v17, v18, v22, buf, 0x16u);
    goto LABEL_66;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "nw_protocol_http_messaging_replace_input_handler";
    unint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "nw_protocol_http_messaging_replace_input_handler";
        uint64_t v19 = "%{public}s called with null new_input_protocol";
        goto LABEL_83;
      }

uint64_t nw_protocol_http_messaging_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v50 = "nw_protocol_http_messaging_remove_input_handler";
    uint64_t v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446210;
      char v50 = "nw_protocol_http_messaging_remove_input_handler";
      os_log_type_t v41 = "%{public}s called with null protocol";
LABEL_116:
      _os_log_impl(&dword_181A5C000, v39, v40, v41, buf, 0xCu);
      goto LABEL_117;
    }

    if (!v47)
    {
      os_log_type_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        char v50 = "nw_protocol_http_messaging_remove_input_handler";
        os_log_type_t v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_116;
      }

      goto LABEL_117;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v43 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        char v50 = "nw_protocol_http_messaging_remove_input_handler";
        os_log_type_t v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_116;
      }

      goto LABEL_117;
    }

    if (!v43) {
      goto LABEL_103;
    }
    *(_DWORD *)buf = 136446466;
    char v50 = "nw_protocol_http_messaging_remove_input_handler";
    __int16 v51 = 2082;
    __int16 v52 = (nw_protocol *)backtrace_string;
    BOOL v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_102:
    _os_log_impl(&dword_181A5C000, v39, v40, v44, buf, 0x16u);
    goto LABEL_103;
  }

  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v50 = "nw_protocol_http_messaging_remove_input_handler";
    uint64_t v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446210;
      char v50 = "nw_protocol_http_messaging_remove_input_handler";
      os_log_type_t v41 = "%{public}s called with null http_messaging";
      goto LABEL_116;
    }

    if (!v47)
    {
      os_log_type_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        char v50 = "nw_protocol_http_messaging_remove_input_handler";
        os_log_type_t v41 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_116;
      }

      goto LABEL_117;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v45 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        char v50 = "nw_protocol_http_messaging_remove_input_handler";
        os_log_type_t v41 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_116;
      }

      goto LABEL_117;
    }

    if (!v45) {
      goto LABEL_103;
    }
    *(_DWORD *)buf = 136446466;
    char v50 = "nw_protocol_http_messaging_remove_input_handler";
    __int16 v51 = 2082;
    __int16 v52 = (nw_protocol *)backtrace_string;
    BOOL v44 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_102;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v50 = "nw_protocol_http_messaging_remove_input_handler";
    uint64_t v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        char v50 = "nw_protocol_http_messaging_remove_input_handler";
        os_log_type_t v41 = "%{public}s called with null other_protocol";
        goto LABEL_116;
      }

uint64_t nw_protocol_http_messaging_get_parameters(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_http_messaging_get_parameters";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_messaging_get_parameters";
      uint64_t v6 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v11)
      {
        int64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_http_messaging_get_parameters";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_protocol_http_messaging_get_parameters";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v3) {
          return 0LL;
        }
        goto LABEL_34;
      }

      if (!v8) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_messaging_get_parameters";
      uint64_t v6 = "%{public}s called with null protocol, no backtrace";
    }

uint64_t nw_protocol_http_messaging_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      uint64_t v2 = handle[6];
      if (v2) {
        return nw_protocol_get_remote_endpoint(v2);
      }
      else {
        return handle[14];
      }
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v15 = "nw_protocol_http_messaging_get_remote_endpoint";
    int64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        unint64_t v7 = "%{public}s called with null http_messaging";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (!v12)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        unint64_t v7 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        unint64_t v7 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v15 = "nw_protocol_http_messaging_get_remote_endpoint";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      BOOL v10 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "nw_protocol_http_messaging_get_remote_endpoint";
  int64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        unint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        unint64_t v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v15 = "nw_protocol_http_messaging_get_remote_endpoint";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      BOOL v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v5, v6, v10, buf, 0x16u);
    }

uint64_t nw_protocol_http_messaging_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v38 = "nw_protocol_http_messaging_connect";
    unint64_t v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v32 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (!v32) {
            goto LABEL_40;
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          __int16 v39 = 2082;
          os_log_type_t v40 = (nw_protocol *)backtrace_string;
          os_log_type_t v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
          goto LABEL_39;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          BOOL v10 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_50;
        }
      }

      else
      {
        BOOL v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          BOOL v10 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_50;
        }
      }

      goto LABEL_51;
    }

    BOOL v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_51;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v38 = "nw_protocol_http_messaging_connect";
    BOOL v10 = "%{public}s called with null protocol";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_51;
  }

  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v38 = "nw_protocol_http_messaging_connect";
    unint64_t v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v33 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (!v33) {
            goto LABEL_40;
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          __int16 v39 = 2082;
          os_log_type_t v40 = (nw_protocol *)backtrace_string;
          os_log_type_t v27 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
          goto LABEL_39;
        }

        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          BOOL v10 = "%{public}s called with null http_messaging, no backtrace";
          goto LABEL_50;
        }
      }

      else
      {
        BOOL v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          BOOL v10 = "%{public}s called with null http_messaging, backtrace limit exceeded";
          goto LABEL_50;
        }
      }

      goto LABEL_51;
    }

    BOOL v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_51;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v38 = "nw_protocol_http_messaging_connect";
    BOOL v10 = "%{public}s called with null http_messaging";
    goto LABEL_50;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v38 = "nw_protocol_http_messaging_connect";
    unint64_t v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v7, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          BOOL v10 = "%{public}s called with null other_protocol";
          goto LABEL_50;
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v34 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (!v34) {
            goto LABEL_40;
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          __int16 v39 = 2082;
          os_log_type_t v40 = (nw_protocol *)backtrace_string;
          os_log_type_t v27 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
          goto LABEL_39;
        }

        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          BOOL v10 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_50;
        }
      }

      else
      {
        BOOL v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_protocol_http_messaging_connect";
          BOOL v10 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_50;
        }
      }
    }

void sub_182518D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_http_messaging_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v108 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_http_messaging_connected";
    v84 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v85 = (os_log_s *)__nwlog_obj();
      os_log_type_t v86 = type;
      if (!os_log_type_enabled(v85, type)) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      v101 = "nw_protocol_http_messaging_connected";
      v87 = "%{public}s called with null protocol";
    }

    else if (v98)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v85 = (os_log_s *)__nwlog_obj();
      os_log_type_t v86 = type;
      BOOL v91 = os_log_type_enabled(v85, type);
      if (backtrace_string)
      {
        if (v91)
        {
          *(_DWORD *)buf = 136446466;
          v101 = "nw_protocol_http_messaging_connected";
          __int16 v102 = 2082;
          v103 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_193:
        if (!v84) {
          return;
        }
        goto LABEL_194;
      }

      if (!v91) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      v101 = "nw_protocol_http_messaging_connected";
      v87 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      v85 = (os_log_s *)__nwlog_obj();
      os_log_type_t v86 = type;
      if (!os_log_type_enabled(v85, type)) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      v101 = "nw_protocol_http_messaging_connected";
      v87 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_192;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_http_messaging_connected";
    v84 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v98)
      {
        v85 = (os_log_s *)__nwlog_obj();
        os_log_type_t v86 = type;
        if (!os_log_type_enabled(v85, type)) {
          goto LABEL_193;
        }
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_http_messaging_connected";
        v87 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_192;
      }

      v92 = (char *)__nw_create_backtrace_string();
      v85 = (os_log_s *)__nwlog_obj();
      os_log_type_t v86 = type;
      BOOL v93 = os_log_type_enabled(v85, type);
      if (!v92)
      {
        if (!v93) {
          goto LABEL_193;
        }
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_http_messaging_connected";
        v87 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_192;
      }

      if (v93)
      {
        *(_DWORD *)buf = 136446466;
        v101 = "nw_protocol_http_messaging_connected";
        __int16 v102 = 2082;
        v103 = v92;
        v94 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_177:
        _os_log_impl(&dword_181A5C000, v85, v86, v94, buf, 0x16u);
      }

void sub_18251A214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_http_messaging_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_protocol_http_messaging_disconnect";
    char v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_http_messaging_disconnect";
      os_log_type_t v17 = "%{public}s called with null protocol";
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_protocol_http_messaging_disconnect";
          __int16 v28 = 2082;
          BOOL v29 = (nw_protocol *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_74:
        if (!v14) {
          return;
        }
        goto LABEL_75;
      }

      if (!v19) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_http_messaging_disconnect";
      os_log_type_t v17 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_http_messaging_disconnect";
      os_log_type_t v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_73;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_protocol_http_messaging_disconnect";
    char v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        __int16 v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_protocol_http_messaging_disconnect";
        os_log_type_t v17 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_73;
      }

      uint64_t v20 = (char *)__nw_create_backtrace_string();
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_protocol_http_messaging_disconnect";
        os_log_type_t v17 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_73;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v27 = "nw_protocol_http_messaging_disconnect";
        __int16 v28 = 2082;
        BOOL v29 = (nw_protocol *)v20;
        os_log_type_t v22 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_58:
        _os_log_impl(&dword_181A5C000, v15, v16, v22, buf, 0x16u);
      }

void nw_protocol_http_messaging_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
        uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v9) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
        uint64_t v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
        __int16 v18 = 2082;
        BOOL v19 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_46;
    }

    uint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
    uint64_t v7 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_46;
  }

  handle = (void **)a1->handle;
  if (handle)
  {
    if (a2)
    {
      nw_protocol_remove_instance((uint64_t)a1->handle);
      nw_protocol_disconnected(handle[6], (uint64_t)a2);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v4, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
        uint64_t v7 = "%{public}s called with null other_protocol";
        goto LABEL_45;
      }

      if (!v14)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
        uint64_t v7 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_45;
      }

      BOOL v10 = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v13 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v13) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
        uint64_t v7 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_45;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v17 = "nw_protocol_http_messaging_disconnected";
        __int16 v18 = 2082;
        BOOL v19 = v10;
        BOOL v12 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_30;
      }

      goto LABEL_31;
    }

void nw_protocol_http_messaging_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_http_messaging_error";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v13)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_messaging_error";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (!backtrace_string)
      {
        if (!v8) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_messaging_error";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "nw_protocol_http_messaging_error";
        __int16 v17 = 2082;
        __int16 v18 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_46;
    }

    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_http_messaging_error";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_46;
  }

  handle = (void **)a1->handle;
  if (handle)
  {
    if (a2)
    {
      nw_protocol_error(handle[6], (uint64_t)a2);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_http_messaging_error";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v3, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_messaging_error";
        os_log_type_t v6 = "%{public}s called with null other_protocol";
        goto LABEL_45;
      }

      if (!v13)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_messaging_error";
        os_log_type_t v6 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_45;
      }

      BOOL v9 = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v12 = os_log_type_enabled(v4, type);
      if (!v9)
      {
        if (!v12) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_messaging_error";
        os_log_type_t v6 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_45;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "nw_protocol_http_messaging_error";
        __int16 v17 = 2082;
        __int16 v18 = v9;
        BOOL v11 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_30;
      }

      goto LABEL_31;
    }

uint64_t nw_protocol_http_messaging_copy_info(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_http_messaging_copy_info";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_http_messaging_copy_info";
      os_log_type_t v6 = "%{public}s called with null protocol";
      goto LABEL_33;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_http_messaging_copy_info";
      os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v8) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_http_messaging_copy_info";
      os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_http_messaging_copy_info";
      __int16 v15 = 2082;
      os_log_type_t v16 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_34:
    if (!v3) {
      return 0LL;
    }
LABEL_35:
    free(v3);
    return 0LL;
  }

  if (!*(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_http_messaging_copy_info";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_http_messaging_copy_info";
      os_log_type_t v6 = "%{public}s called with null http_messaging";
      goto LABEL_33;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_http_messaging_copy_info";
      os_log_type_t v6 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_33;
    }

    BOOL v9 = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (v9)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        char v14 = "nw_protocol_http_messaging_copy_info";
        __int16 v15 = 2082;
        os_log_type_t v16 = v9;
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null http_messaging, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v9);
      if (!v3) {
        return 0LL;
      }
      goto LABEL_35;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_http_messaging_copy_info";
      os_log_type_t v6 = "%{public}s called with null http_messaging, no backtrace";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

  if (a2 == 253) {
    return 0LL;
  }
  return nw_protocol_common_copy_info(a1, a2);
}

uint64_t nw_protocol_http_messaging_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
      uint64_t v20 = "%{public}s called with null protocol";
      goto LABEL_46;
    }

    if (!v36)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
      uint64_t v20 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_46;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v34 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
      uint64_t v20 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_46;
    }

    if (!v34) {
      goto LABEL_27;
    }
    *(_DWORD *)buf = 136446466;
    unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
    __int16 v40 = 2082;
    uint64_t v41 = backtrace_string;
    BOOL v23 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_26;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
      uint64_t v20 = "%{public}s called with null http_messaging";
      goto LABEL_46;
    }

    if (!v36)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
      uint64_t v20 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_46;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v35 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v35) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
      uint64_t v20 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_46;
    }

    if (!v35) {
      goto LABEL_27;
    }
    *(_DWORD *)buf = 136446466;
    unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
    __int16 v40 = 2082;
    uint64_t v41 = backtrace_string;
    BOOL v23 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_26;
  }

  if ((handle[272] & 2) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v33 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
        __int16 v40 = 2082;
        uint64_t v41 = handle + 188;
        __int16 v42 = 2080;
        uint64_t v43 = " ";
        __int16 v44 = 2048;
        uint64_t v45 = a2;
        _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%scalled with listen_protocol %p",  buf,  0x2Au);
      }
    }
  }

  uint64_t v7 = (char *)*((void *)handle + 16);
  BOOL v8 = (char *)*((void *)handle + 17);
  if (v7 == v8 || (handle[272] & 1) == 0)
  {
    unint64_t v9 = *((void *)handle + 18);
    if ((unint64_t)v8 >= v9)
    {
      int64_t v11 = v8 - v7;
      uint64_t v12 = (v8 - v7) >> 3;
      unint64_t v13 = v12 + 1;
      uint64_t v14 = v9 - (void)v7;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        os_log_type_t v16 = operator new(8 * v15);
      }

      else
      {
        os_log_type_t v16 = 0LL;
      }

      char v24 = &v16[8 * v12];
      BOOL v25 = &v16[8 * v15];
      *char v24 = a2;
      BOOL v10 = v24 + 1;
      if (v7 != v8)
      {
        unint64_t v26 = ((unint64_t)(v11 - 8) >> 3) + 1;
        uint64_t v27 = &v16[8 * v12 - 16];
        __int16 v28 = v8 - 16;
        uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          _OWORD *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4LL;
        }

        while (v29);
        v24 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_81:
          do
          {
            uint64_t v31 = *((void *)v8 - 1);
            v8 -= 8;
            *--char v24 = v31;
          }

          while (v8 != v7);
          uint64_t v7 = (char *)*((void *)handle + 16);
        }
      }

      *((void *)handle + 16) = v24;
      *((void *)handle + 17) = v10;
      *((void *)handle + 1_Block_object_dispose(va, 8) = v25;
      if (v7) {
        operator delete(v7);
      }
    }

    else
    {
      *(void *)BOOL v8 = a2;
      BOOL v10 = v8 + 8;
    }

    *((void *)handle + 17) = v10;
    a2->protocol_handler = a1;
    if ((a3 & 1) != 0) {
      nw_protocol_remove_instance((uint64_t)a1);
    }
    return 1LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
  uint64_t v17 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v18 = (os_log_s *)gLogObj;
    os_log_type_t v19 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
      uint64_t v20 = "%{public}s already have a server listen handler, ignoring add";
LABEL_46:
      _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
      goto LABEL_47;
    }

    goto LABEL_47;
  }

  if (v36)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v18 = (os_log_s *)gLogObj;
    os_log_type_t v19 = type;
    BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
        uint64_t v20 = "%{public}s already have a server listen handler, ignoring add, no backtrace";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (!v22)
    {
LABEL_27:
      free(backtrace_string);
      goto LABEL_47;
    }

    *(_DWORD *)buf = 136446466;
    unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
    __int16 v40 = 2082;
    uint64_t v41 = backtrace_string;
    BOOL v23 = "%{public}s already have a server listen handler, ignoring add, dumping backtrace:%{public}s";
LABEL_26:
    _os_log_impl(&dword_181A5C000, v18, v19, v23, buf, 0x16u);
    goto LABEL_27;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v18 = (os_log_s *)gLogObj;
  os_log_type_t v19 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    unint64_t v39 = "nw_protocol_http_messaging_add_listen_handler";
    uint64_t v20 = "%{public}s already have a server listen handler, ignoring add, backtrace limit exceeded";
    goto LABEL_46;
  }

uint64_t nw_protocol_http_messaging_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
    unint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
      os_log_type_t v16 = "%{public}s called with null protocol";
      goto LABEL_39;
    }

    if (!v24)
    {
      uint64_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
      os_log_type_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
      os_log_type_t v16 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_39;
    }

    if (!v22) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
    __int16 v28 = 2082;
    uint64_t v29 = backtrace_string;
    uint64_t v20 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_33;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
    unint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
      os_log_type_t v16 = "%{public}s called with null http_messaging";
      goto LABEL_39;
    }

    if (!v24)
    {
      uint64_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
      os_log_type_t v16 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v23 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v23) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
      os_log_type_t v16 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_39;
    }

    if (!v23) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
    __int16 v28 = 2082;
    uint64_t v29 = backtrace_string;
    uint64_t v20 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_33;
  }

  if ((handle[272] & 2) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v21 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v27 = "nw_protocol_http_messaging_remove_listen_handler";
        __int16 v28 = 2082;
        uint64_t v29 = handle + 188;
        __int16 v30 = 2080;
        uint64_t v31 = " ";
        __int16 v32 = 2048;
        uint64_t v33 = a2;
        _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%scalled with listen_protocol %p",  buf,  0x2Au);
      }
    }
  }

  os_log_type_t v5 = (nw_listen_protocol **)*((void *)handle + 16);
  uint64_t v4 = (nw_listen_protocol **)*((void *)handle + 17);
  os_log_type_t v6 = v4;
  if (v5 != v4)
  {
    os_log_type_t v6 = (nw_listen_protocol **)*((void *)handle + 16);
    while (*v6 != a2)
    {
      if (++v6 == v4)
      {
        os_log_type_t v6 = (nw_listen_protocol **)*((void *)handle + 17);
        break;
      }
    }
  }

  if (v6 == v4 || (uint64_t v7 = v6 + 1, v6 + 1 == v4))
  {
    BOOL v8 = (char *)*((void *)handle + 16);
    unint64_t v9 = (nw_listen_protocol **)*((void *)handle + 17);
    if (v6 == v4) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }

  do
  {
    if (*v7 != a2) {
      *v6++ = *v7;
    }
    ++v7;
  }

  while (v7 != v4);
  BOOL v8 = (char *)*((void *)handle + 16);
  unint64_t v9 = (nw_listen_protocol **)*((void *)handle + 17);
  if (v6 != v9)
  {
LABEL_18:
    BOOL v10 = v6;
    int64_t v11 = (char *)v9 - (char *)v6;
    int64_t v12 = (char *)v9 - ((char *)v10 + v11);
    if (v9 != (nw_listen_protocol **)((char *)v10 + v11))
    {
      memmove(v10, (char *)v10 + v11, (char *)v9 - ((char *)v10 + v11));
      BOOL v8 = (char *)*((void *)handle + 16);
    }

    unint64_t v9 = (nw_listen_protocol **)((char *)v10 + v12);
    *((void *)handle + 17) = (char *)v10 + v12;
  }

uint64_t nw_http_messaging_add_to_version_specific_protocol(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_http_messaging_add_to_version_specific_protocol";
    int64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_http_messaging_add_to_version_specific_protocol";
      os_log_type_t v15 = "%{public}s called with null input_protocol";
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v25 = "nw_http_messaging_add_to_version_specific_protocol";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_50:
        if (!v12) {
          return 0LL;
        }
LABEL_51:
        free(v12);
        return 0LL;
      }

      if (!v17) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_http_messaging_add_to_version_specific_protocol";
      os_log_type_t v15 = "%{public}s called with null input_protocol, no backtrace";
    }

    else
    {
      unint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_http_messaging_add_to_version_specific_protocol";
      os_log_type_t v15 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }

    goto LABEL_49;
  }

  parameters = (void *)nw_protocol_get_parameters(a2);
  if (!parameters)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_http_messaging_add_to_version_specific_protocol";
    int64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        unint64_t v13 = (os_log_s *)__nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_http_messaging_add_to_version_specific_protocol";
        os_log_type_t v15 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_49;
      }

      __int16 v18 = (char *)__nw_create_backtrace_string();
      unint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (!v18)
      {
        if (!v19) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_http_messaging_add_to_version_specific_protocol";
        os_log_type_t v15 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_49;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v25 = "nw_http_messaging_add_to_version_specific_protocol";
        __int16 v26 = 2082;
        uint64_t v27 = v18;
        uint64_t v20 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_181A5C000, v13, v14, v20, buf, 0x16u);
      }

BOOL nw_protocol_http_messaging_accept(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type[0];
      if (!os_log_type_enabled(v19, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      BOOL v21 = "%{public}s called with null protocol";
    }

    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type[0];
      BOOL v23 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_74:
        if (!v18) {
          return 0LL;
        }
LABEL_75:
        free(v18);
        return 0LL;
      }

      if (!v23) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      BOOL v21 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type[0];
      if (!os_log_type_enabled(v19, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      BOOL v21 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_73;
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v29)
      {
        BOOL v19 = (os_log_s *)__nwlog_obj();
        os_log_type_t v20 = type[0];
        if (!os_log_type_enabled(v19, type[0])) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
        BOOL v21 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_73;
      }

      char v24 = (char *)__nw_create_backtrace_string();
      BOOL v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type[0];
      BOOL v25 = os_log_type_enabled(v19, type[0]);
      if (!v24)
      {
        if (!v25) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
        BOOL v21 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_73;
      }

      if (!v25) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v24;
      __int16 v26 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_54;
    }

    BOOL v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type[0];
    if (!os_log_type_enabled(v19, type[0])) {
      goto LABEL_74;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    BOOL v21 = "%{public}s called with null http_messaging";
LABEL_73:
    _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
    goto LABEL_74;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type[0];
      if (!os_log_type_enabled(v19, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      BOOL v21 = "%{public}s called with null endpoint";
      goto LABEL_73;
    }

    if (!v29)
    {
      BOOL v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type[0];
      if (!os_log_type_enabled(v19, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      BOOL v21 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_73;
    }

    char v24 = (char *)__nw_create_backtrace_string();
    BOOL v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type[0];
    BOOL v27 = os_log_type_enabled(v19, type[0]);
    if (!v24)
    {
      if (!v27) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      BOOL v21 = "%{public}s called with null endpoint, no backtrace";
      goto LABEL_73;
    }

    if (!v27) {
      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v24;
    __int16 v26 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_54:
    _os_log_impl(&dword_181A5C000, v19, v20, v26, buf, 0x16u);
    goto LABEL_55;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type[0];
      if (!os_log_type_enabled(v19, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      BOOL v21 = "%{public}s called with null parameters";
      goto LABEL_73;
    }

    if (!v29)
    {
      BOOL v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type[0];
      if (!os_log_type_enabled(v19, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      BOOL v21 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_73;
    }

    char v24 = (char *)__nw_create_backtrace_string();
    BOOL v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type[0];
    BOOL v28 = os_log_type_enabled(v19, type[0]);
    if (!v24)
    {
      if (!v28) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      BOOL v21 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_73;
    }

    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v24;
      __int16 v26 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_54;
    }

void sub_18251D810( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

double __nw_protocol_http_messaging_identifier_block_invoke()
{
  *(void *)&double result = 0x200000004LL;
  qword_18C5940A8 = 0x200000004LL;
  return result;
}

uint64_t nw_http_field_name_find_well_known(unint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = (a1 - (unint64_t)":method") >> 5;
    if (((a1 - (void)":method") & 0x1F) != 0) {
      LODWORD(v1) = -1;
    }
    else {
      unsigned int v2 = -1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    os_log_type_t v5 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v5);
    if ((_DWORD)result)
    {
      __break(1u);
    }

    else
    {
      free(v5);
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t nw_http_is_valid_token_char(unsigned __int8 a1)
{
  int v1 = a1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case '!':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '*':
    case '+':
    case '-':
    case '.':
    case '^':
    case '_':
    case '|':
    case '~':
      return result;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

uint64_t nw_http_field_name_is_valid(unsigned __int8 *a1, char *a2)
{
  if (a1)
  {
    unint64_t v4 = a1 - ":method";
    BOOL v5 = a1 < ":method" || a1 > "Multipath";
    if (!v5 && (v4 & 0x1F) == 0 && (v4 >> 5) != -1)
    {
LABEL_13:
      if (a2)
      {
        char v9 = 0;
LABEL_15:
        *a2 = v9;
      }

      return 1LL;
    }
  }

  else
  {
    __nwlog_obj();
    int64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    id v13 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v13);
    if ((_DWORD)result)
    {
      __break(1u);
      return result;
    }

    free(v13);
  }

  unsigned __int8 v8 = *a1;
  os_log_type_t v6 = a1 + 1;
  unsigned __int8 v7 = v8;
  char v9 = 1;
  while (1)
  {
    uint64_t result = nw_http_is_valid_token_char(v7);
    if (!(_DWORD)result) {
      return result;
    }
    v9 &= (v7 - 91) < 0xE6u;
    int v11 = *v6++;
    unsigned __int8 v7 = v11;
    if (!v11)
    {
      if (a2) {
        goto LABEL_15;
      }
      return 1LL;
    }
  }

BOOL nw_http_field_value_is_valid(_BYTE *a1)
{
  if (a1)
  {
    int v2 = *a1;
    if (*a1) {
      goto LABEL_3;
    }
    return 1LL;
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (result)
  {
    __break(1u);
    return result;
  }

  free(v9);
  int v2 = MEMORY[0];
  if (!MEMORY[0]) {
    return 1LL;
  }
LABEL_3:
  if (v2 != 9 && v2 != 32)
  {
    unint64_t v4 = a1 - 1;
    while (1)
    {
      BOOL v5 = (v2 - 33) < 0x5E || v2 == 9;
      if (!v5 && v2 != 32 && (v2 & 0x80) == 0) {
        break;
      }
      int v2 = v4[2];
      ++v4;
      if (!v2)
      {
        int v6 = *v4;
        return v6 != 9 && v6 != 32;
      }
    }
  }

  return 0LL;
}

uint64_t nw_http_field_has_name(uint64_t a1, unint64_t a2)
{
  if (a1)
  {
    if (a2) {
      return _nw_http_field_has_name(a1, a2);
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    int v6 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v6);
    if ((_DWORD)result) {
      goto LABEL_8;
    }
    free(v6);
    if (a2) {
      return _nw_http_field_has_name(a1, a2);
    }
  }

  __nwlog_obj();
  unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v8);
  if (!(_DWORD)result)
  {
    free(v8);
    return _nw_http_field_has_name(a1, a2);
  }

uint64_t nw_http_field_set_value(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2) {
      return _nw_http_field_set_value();
    }
  }

  else
  {
    __nwlog_obj();
    unint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    BOOL v5 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v5);
    if ((_DWORD)result) {
      goto LABEL_8;
    }
    free(v5);
    if (a2) {
      return _nw_http_field_set_value();
    }
  }

  __nwlog_obj();
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v7);
  if (!(_DWORD)result)
  {
    free(v7);
    return _nw_http_field_set_value();
  }

void nw_http_field_access(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
LABEL_3:
      _nw_http_field_access(a1, v4);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    int v6 = (void *)_os_log_send_and_compose_impl();

    free(v6);
    if (v4) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v8))
  {
    free(v8);
    goto LABEL_3;
  }

void nw_http_field_access_canonical(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
LABEL_3:
      _nw_http_field_access_canonical(a1, v4);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    int v6 = (void *)_os_log_send_and_compose_impl();

    free(v6);
    if (v4) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v8))
  {
    free(v8);
    goto LABEL_3;
  }

uint64_t nw_http_field_set_indexing_strategy(uint64_t a1, unsigned int a2)
{
  if (a1) {
    return _nw_http_field_set_indexing_strategy(a1, a2);
  }
  __nwlog_obj();
  BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  int v6 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v6);
  if (!(_DWORD)result)
  {
    free(v6);
    return _nw_http_field_set_indexing_strategy(a1, a2);
  }

  __break(1u);
  return result;
}

uint64_t nw_http_field_get_indexing_strategy(uint64_t a1)
{
  if (a1) {
    return _nw_http_field_get_indexing_strategy(a1);
  }
  __nwlog_obj();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  unint64_t v4 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v4);
  if (!(_DWORD)result)
  {
    free(v4);
    return _nw_http_field_get_indexing_strategy(a1);
  }

  __break(1u);
  return result;
}

BOOL nw_http_fields_copy(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  unint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  BOOL v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_fields_copy((uint64_t)v1);

    return v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_fields_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t is_equal = _nw_http_fields_is_equal((uint64_t)v3);

      return is_equal;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  int v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

BOOL nw_http_fields_get_count(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  BOOL v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t count = _nw_http_fields_get_count();

    return count;
  }

  __break(1u);
  return result;
}

void nw_http_fields_append(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    free(v9);
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }

  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (a3)
  {
LABEL_4:
    _nw_http_fields_append(v5, a2, a3);

    return;
  }

void nw_http_fields_set_value_by_name(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    free(v9);
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }

  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (a3)
  {
LABEL_4:
    _nw_http_fields_set_value_by_name(v5, a2, a3);

    return;
  }

void nw_http_fields_remove_by_name(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      _nw_http_fields_remove_by_name(v3, a2);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    free(v5);
    if (a2) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    goto LABEL_3;
  }

void nw_http_fields_remove(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_fields_remove((uint64_t)v3, a2);

    return;
  }

  __break(1u);
}

BOOL nw_http_fields_copy_value_by_name(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      uint64_t v4 = _nw_http_fields_copy_value_by_name(v3, a2);

      return v4;
    }
  }

  else
  {
    __nwlog_obj();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v7);
    if (result) {
      goto LABEL_8;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }

BOOL nw_http_fields_have_field_with_name(void *a1, unint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      uint64_t have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v3, a2);

      return have_field_with_name;
    }
  }

  else
  {
    __nwlog_obj();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unsigned __int8 v7 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v7);
    if (result) {
      goto LABEL_8;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }

void nw_http_fields_append_advanced( void *a1, unint64_t a2, uint64_t a3, char *a4, size_t a5, void *a6)
{
  id v11 = a1;
  id v12 = a6;
  if (v11)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_8:
    __nwlog_obj();
    BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    os_log_type_t v16 = (void *)_os_log_send_and_compose_impl();

    free(v16);
    if (a4) {
      goto LABEL_4;
    }
LABEL_10:
    __nwlog_obj();
    BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    __int16 v18 = (void *)_os_log_send_and_compose_impl();

    free(v18);
    if (v12) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

  __nwlog_obj();
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  id v14 = (void *)_os_log_send_and_compose_impl();

  free(v14);
  if (!a2) {
    goto LABEL_8;
  }
LABEL_3:
  if (!a4) {
    goto LABEL_10;
  }
LABEL_4:
  if (v12)
  {
LABEL_5:
    _nw_http_fields_append_advanced((uint64_t)v11, a2, a3, a4, a5, v12);

    return;
  }

void nw_http_fields_access_value_by_name(void *a1, unint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    __nwlog_obj();
    unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

    free(v8);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    __nwlog_obj();
    char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    id v10 = (void *)_os_log_send_and_compose_impl();

    free(v10);
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }

  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (v6)
  {
LABEL_4:
    _nw_http_fields_access_value_by_name((uint64_t)v5, a2, v6);

    return;
  }

void nw_http_fields_access_field(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  unsigned __int8 v7 = v6;
  if (v5)
  {
    if (v6)
    {
LABEL_3:
      _nw_http_fields_access_field((uint64_t)v5, a2, v7);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    free(v9);
    if (v7) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_3;
  }

BOOL nw_http_fields_enumerate_by_name(void *a1, unint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    __nwlog_obj();
    char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    id v10 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v10);
    if (result) {
      goto LABEL_11;
    }
    free(v10);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    id v12 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v12);
    if (result) {
      goto LABEL_11;
    }
    free(v12);
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }

  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (v6)
  {
LABEL_4:
    unint64_t v7 = _nw_http_fields_enumerate_by_name((uint64_t)v5, a2, v6);

    return v7;
  }

BOOL nw_http_fields_enumerate(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_fields_enumerate((uint64_t)v3, v5);

      return v6;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

BOOL nw_http_fields_enumerate_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_fields_enumerate_field((uint64_t)v3, v5);

      return v6;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

void nw_http_fields_enumerate_const_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_fields_enumerate_const_field((uint64_t)v3, v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

uint64_t nw_http_request_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    return _nw_http_request_create(a1, a2, a3, a4);
  }
  __nwlog_obj();
  char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  id v10 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v10);
  if (!(_DWORD)result)
  {
    free(v10);
    return _nw_http_request_create(a1, a2, a3, a4);
  }

  __break(1u);
  return result;
}

uint64_t nw_http_request_create_from_url(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2) {
      return _nw_http_request_create_from_url(a1, a2);
    }
  }

  else
  {
    __nwlog_obj();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    uint64_t v6 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v6);
    if ((_DWORD)result) {
      goto LABEL_8;
    }
    free(v6);
    if (a2) {
      return _nw_http_request_create_from_url(a1, a2);
    }
  }

  __nwlog_obj();
  unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  unsigned __int8 v8 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v8);
  if (!(_DWORD)result)
  {
    free(v8);
    return _nw_http_request_create_from_url(a1, a2);
  }

BOOL nw_http_request_copy(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_fields_copy((uint64_t)v1);

    return v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_request_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t is_equal = _nw_http_fields_is_equal((uint64_t)v3);

      return is_equal;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

BOOL nw_http_request_has_method(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      uint64_t has_method = _nw_http_request_has_method((uint64_t)v3);

      return has_method;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v7);
    if (result) {
      goto LABEL_8;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }

void nw_http_request_set_method(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      _nw_http_request_set_method(v3, a2);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    free(v5);
    if (a2) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unint64_t v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    goto LABEL_3;
  }

void nw_http_request_set_scheme(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_scheme(v3, a2);

    return;
  }

  __break(1u);
}

void nw_http_request_set_authority(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_authority(v3, a2);

    return;
  }

  __break(1u);
}

void nw_http_request_set_path(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_path(v3, a2);

    return;
  }

  __break(1u);
}

void nw_http_request_set_extended_connect_protocol(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_extended_connect_protocol(v3, a2);

    return;
  }

  __break(1u);
}

void nw_http_request_access_method(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_method((uint64_t)v3, v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

void nw_http_request_access_scheme(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_scheme((uint64_t)v3, v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

void nw_http_request_access_authority(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_authority((uint64_t)v3, v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

void nw_http_request_access_path(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_path((uint64_t)v3, v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

void nw_http_request_access_extended_connect_protocol(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_extended_connect_protocol((uint64_t)v3, v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

void nw_http_request_access_method_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_method_field((uint64_t)v3, v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

BOOL nw_http_request_access_scheme_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_access_scheme_field((uint64_t)v3, v5);

      return v6;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

BOOL nw_http_request_access_authority_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_access_authority_field((uint64_t)v3, v5);

      return v6;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

BOOL nw_http_request_access_path_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_access_path_field((uint64_t)v3, v5);

      return v6;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

BOOL nw_http_request_access_extended_connect_protocol_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_access_extended_connect_protocol_field((uint64_t)v3, v5);

      return v6;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

void nw_http_request_set_url(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      _nw_http_request_set_url(v3, a2);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    free(v5);
    if (a2) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unint64_t v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    goto LABEL_3;
  }

BOOL nw_http_request_copy_url(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_request_copy_url(v1);

    return v2;
  }

  __break(1u);
  return result;
}

void nw_http_request_set_header_fields(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_set_header_fields((uint64_t)v3, (uint64_t)v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

BOOL nw_http_request_copy_header_fields(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_request_copy_header_fields((uint64_t)v1);

    return v2;
  }

  __break(1u);
  return result;
}

uint64_t nw_http_response_create_well_known(uint64_t a1)
{
  if ((_DWORD)a1 == 507) {
    return _nw_http_response_create(a1, "Insufficient Storage");
  }
  else {
    return _nw_http_response_create_well_known(a1);
  }
}

BOOL nw_http_response_copy(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_fields_copy((uint64_t)v1);

    return v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_response_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      uint64_t is_equal = _nw_http_fields_is_equal((uint64_t)v3);

      return is_equal;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

void nw_http_response_set_status_code(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_response_set_status_code(v3, a2);

    return;
  }

  __break(1u);
}

BOOL nw_http_response_get_status_code(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t status_code = _nw_http_response_get_status_code();

    return status_code;
  }

  __break(1u);
  return result;
}

void nw_http_response_set_reason_phrase(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_response_set_reason_phrase(v3, a2);

    return;
  }

  __break(1u);
}

void nw_http_response_access_reason_phrase(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_response_access_reason_phrase((uint64_t)v3, v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

void nw_http_response_access_status_field(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_response_access_status_field((uint64_t)v3, v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

void nw_http_response_set_header_fields(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_response_set_header_fields((uint64_t)v3, (uint64_t)v5);

      return;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    if (v5) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }

BOOL nw_http_response_copy_header_fields(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_response_copy_header_fields((uint64_t)v1);

    return v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_add( void *a1, unint64_t a2, uint64_t a3, const char *a4, int64_t a5, char a6)
{
  id v11 = a1;
  if (!v11)
  {
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    BOOL v15 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v15);
    if (result) {
      goto LABEL_11;
    }
    free(v15);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    __nwlog_obj();
    os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    BOOL v17 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v17);
    if (result) {
      goto LABEL_11;
    }
    free(v17);
    if (a4) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }

  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (a4)
  {
LABEL_4:
    uint64_t v12 = _nw_http_parsed_fields_add((uint64_t)v11, a2, a3, a4, a5, a6);

    return v12;
  }

BOOL nw_http_parsed_fields_copy_request(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_parsed_fields_copy_request(v1);

    return v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_copy_response(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_parsed_fields_copy_response(v1);

    return v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_copy_trailer_fields(void *a1)
{
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    uint64_t v2 = _nw_http_parsed_fields_copy_trailer_fields(v1);

    return v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http_fields_legacy_serialize(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      uint64_t v4 = _nw_http_fields_legacy_serialize(v3, a2);

      return v4;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v7);
    if (result) {
      goto LABEL_8;
    }
    free(v7);
    if (a2) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  char v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }

uint64_t nw_http_request_create_from_url_request(void *a1)
{
  if (a1) {
    return _nw_http_request_create_from_url_request(a1);
  }
  __nwlog_obj();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v4);
  if (!(_DWORD)result)
  {
    free(v4);
    return _nw_http_request_create_from_url_request(a1);
  }

  __break(1u);
  return result;
}

BOOL nw_http_request_copy_url_request(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  if (v5)
  {
    if (a2)
    {
LABEL_3:
      uint64_t v6 = _nw_http_request_copy_url_request((uint64_t)v5, a2, a3);

      return v6;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    char v9 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result) {
      goto LABEL_8;
    }
    free(v9);
    if (a2) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  id v11 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

BOOL nw_http_response_copy_url_response(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  if (v7)
  {
    if (a4)
    {
LABEL_3:
      uint64_t v9 = _nw_http_response_copy_url_response((uint64_t)v7, (uint64_t)v8, a3, a4);

      return v9;
    }
  }

  else
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    uint64_t v12 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v12);
    if (result) {
      goto LABEL_8;
    }
    free(v12);
    if (a4) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  id v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }

void sub_182524AAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1825253AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_application_id_get_current_persona(unsigned __int8 *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uuid_clear(a1);
  gotLoadHelper_x19__OBJC_CLASS___UMUserManager(v3);
  if (objc_opt_class())
  {
    [*(id *)(v1 + 3008) sharedManager];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    [v4 currentPersona];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 userPersonaUniqueString];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      id v7 = (os_log_s *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDString:v6];
      id v8 = v7;
      if (v7)
      {
        -[os_log_s getUUIDBytes:](v7, "getUUIDBytes:", a1);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int v13 = 136446722;
          id v14 = "nw_application_id_get_current_persona";
          __int16 v15 = 1040;
          int v16 = 16;
          __int16 v17 = 2096;
          __int16 v18 = a1;
          _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_INFO,  "%{public}s Current persona id is '%{uuid_t}.16P'",  (uint8_t *)&v13,  0x1Cu);
        }

        uint64_t v10 = 1LL;
        goto LABEL_14;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136446210;
        id v14 = "nw_application_id_get_current_persona";
        id v11 = "%{public}s Failed to get current persona id, personaUniqueIdentifier is not a valid UUID";
        goto LABEL_12;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136446210;
        id v14 = "nw_application_id_get_current_persona";
        id v11 = "%{public}s Failed to get current persona id, no personaUniqueIdentifier set";
LABEL_12:
        _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v13, 0xCu);
      }
    }

    uint64_t v10 = 0LL;
LABEL_14:

    return v10;
  }

  return 0LL;
}

void sub_182525610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182525E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_application_id_validate_bundle_id(NWConcrete_nw_application_id *a1)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = (void *)NEHelperCacheCopyAppUUIDMappingExtended();
  double v3 = v2;
  if (v2 && object_getClass(v2) == (Class)MEMORY[0x1895F9220] && xpc_array_get_count(v3))
  {
    *((_OWORD *)v1 + 1) = *(_OWORD *)xpc_array_get_uuid(v3, 0LL);
    uint64_t v6 = 1LL;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *((void *)v1 + 10);
      int v8 = 136446466;
      uint64_t v9 = "nw_application_id_validate_bundle_id";
      __int16 v10 = 2082;
      uint64_t v11 = v5;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to convert from bundle ID (%{public}s) to UUID.",  (uint8_t *)&v8,  0x16u);
    }

    uint64_t v6 = 0LL;
  }

  return v6;
}

void sub_182525F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_application_id_copy_redacted_description(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    int v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_application_id_copy_redacted_description";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_application_id_copy_redacted_description";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null application_id", buf, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v27 = "nw_application_id_copy_redacted_description";
            __int16 v28 = 2082;
            uint64_t v29 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null application_id, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_application_id_copy_redacted_description";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null application_id, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_application_id_copy_redacted_description";
          _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null application_id, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182526434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_application_id_create_with_uuid(unsigned __int8 *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!uuid_is_null(a1)) {
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_application_id),  a1,  0LL,  0LL,  0);
  }
  __nwlog_obj();
  double v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v13 = "nw_application_id_create_with_uuid";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        int v13 = "nw_application_id_create_with_uuid";
        id v7 = "%{public}s uuid is null";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }

    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        size_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            int v13 = "nw_application_id_create_with_uuid";
            __int16 v14 = 2082;
            __int16 v15 = backtrace_string;
            _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s uuid is null, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v9) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        int v13 = "nw_application_id_create_with_uuid";
        id v7 = "%{public}s uuid is null, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      size_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        int v13 = "nw_application_id_create_with_uuid";
        id v7 = "%{public}s uuid is null, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_application_id_create_with_audit_token(__int128 *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  __int128 v1 = a1[1];
  __int128 v12 = *a1;
  __int128 v13 = v1;
  if ((unint64_t)v12 | *((void *)&v12 + 1) | (unint64_t)v1 | *((void *)&v1 + 1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = 0LL;
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_application_id),  buf,  a1,  0LL,  0);
  }

  __nwlog_obj();
  double v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_application_id_create_with_audit_token";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_audit_token";
        id v7 = "%{public}s audit token is null";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }

    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        size_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_application_id_create_with_audit_token";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s audit token is null, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v9) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_audit_token";
        id v7 = "%{public}s audit token is null, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      size_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_audit_token";
        id v7 = "%{public}s audit token is null, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_application_id_create_with_bundle_id(const char *a1)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = 0LL;
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_application_id),  buf,  0LL,  a1,  0);
  }

  __nwlog_obj();
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
  double v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
        os_log_type_t v6 = "%{public}s called with null bundle_id";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null bundle_id, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v8) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
        os_log_type_t v6 = "%{public}s called with null bundle_id, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_bundle_id";
        os_log_type_t v6 = "%{public}s called with null bundle_id, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_application_id_create_with_external_bundle_id(const char *a1)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = 0LL;
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_application_id),  buf,  0LL,  a1,  1);
  }

  __nwlog_obj();
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
  double v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
        os_log_type_t v6 = "%{public}s called with null bundle_id";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null bundle_id, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v8) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
        os_log_type_t v6 = "%{public}s called with null bundle_id, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_external_bundle_id";
        os_log_type_t v6 = "%{public}s called with null bundle_id, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

uint64_t nw_application_id_set_persona(void *a1, _OWORD *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  double v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(_OWORD *)(v3 + 8_Block_object_dispose(va, 8) = *a2;
      uint64_t v5 = 1LL;
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_application_id_set_persona";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null persona", buf, 0xCu);
        }

void nw_application_id_get_persona(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  double v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_application_id_get_persona";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_application_id_get_persona";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null application_id", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          char v22 = "nw_application_id_get_persona";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null application_id, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_application_id_get_persona";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_application_id_get_persona";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null application_id, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL nw_application_id_copy_serialized_bytes(void *a1, uint64_t *a2)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  double v3 = a1;
  uint64_t v4 = (unsigned __int8 *)v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v35 = "nw_application_id_copy_serialized_bytes";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v35 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null application_id", buf, 0xCu);
      }

      goto LABEL_63;
    }

    if (!v32)
    {
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v35 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s called with null application_id, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_63;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v35 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }

      goto LABEL_63;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v35 = "nw_application_id_copy_serialized_bytes";
      __int16 v36 = 2082;
      int v37 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null application_id, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

  if (!a2)
  {
    __nwlog_obj();
    char v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v35 = "nw_application_id_copy_serialized_bytes";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v35 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null length", buf, 0xCu);
      }

void sub_182528034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_application_id_create_self()
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v14 = 0;
  *(_OWORD *)__n = 0u;
  __int128 v13 = 0u;
  __int128 v11 = 0u;
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v0 = (id)nw_context_copy_implicit_context::implicit_context;
  nw_path_shared_necp_fd(v0);

  if (necp_client_action())
  {
    int v1 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_application_id_create_self";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v1;
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_ERROR,  "%{public}s NECP_CLIENT_ACTION_GET_SIGNED_CLIENT_ID %{darwin.errno}d",  buf,  0x12u);
    }

    return 0LL;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_application_id_create_self";
      *(_WORD *)&buf[12] = 1040;
      *(_DWORD *)&buf[14] = 16;
      __int16 v9 = 2096;
      id v10 = &v11;
      _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s Got client UUID=%{uuid_t}.16P", buf, 0x1Cu);
    }

    uint64_t v6 = nw_application_id_create_with_uuid((unsigned __int8 *)&v11);
    uint64_t v3 = v6;
    if (v6)
    {
      size_t v7 = LODWORD(__n[0]);
      if (LODWORD(__n[0]))
      {
        if (LODWORD(__n[0]) <= 0x20)
        {
          *(_DWORD *)(v6 + 32) = __n[0];
          memcpy((void *)(v6 + 36), (char *)__n + 4, v7);
          *(void *)buf = 0LL;
          *(void *)&buf[8] = 0LL;
        }
      }
    }
  }

  return v3;
}

void sub_182528288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_application_id_set_self(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  int v1 = a1;
  int v16 = 1;
  int v24 = 0;
  memset(v23, 0, sizeof(v23));
  nw_application_id_get_uuid(v1, v23);
  size_t v2 = v1[8];
  if ((v2 - 1) <= 0x1F)
  {
    LODWORD(v23[1]) = v1[8];
    memcpy((char *)&v23[1] + 4, v1 + 9, v2);
  }

  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v3 = (id)nw_context_copy_implicit_context::implicit_context;
  nw_path_shared_necp_fd(v3);

  if (!necp_client_action())
  {
    uint64_t v4 = 0LL;
    goto LABEL_14;
  }

  uint64_t v4 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  os_log_type_t v18 = "nw_application_id_set_self";
  __int16 v19 = 1024;
  int v20 = v4;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "nw_application_id_set_self";
        __int16 v19 = 1024;
        int v20 = v4;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d",  buf,  0x12u);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v18 = "nw_application_id_set_self";
          __int16 v19 = 1024;
          int v20 = v4;
          __int16 v21 = 2082;
          char v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v11,  "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(backtrace_string);
        if (v6) {
          goto LABEL_12;
        }
        goto LABEL_14;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "nw_application_id_set_self";
        __int16 v19 = 1024;
        int v20 = v4;
        _os_log_impl( &dword_181A5C000,  v7,  v11,  "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d, no backtrace",  buf,  0x12u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "nw_application_id_set_self";
        __int16 v19 = 1024;
        int v20 = v4;
        _os_log_impl( &dword_181A5C000,  v7,  v13,  "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
      }
    }
  }

  if (v6) {
LABEL_12:
  }
    free(v6);
LABEL_14:

  return v4;
}

void sub_18252868C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_application_id_get_uuid(void *a1, _OWORD *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = (char *)v3;
  if (!v3)
  {
    __nwlog_obj();
    size_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v24 = "nw_application_id_get_uuid";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_application_id_get_uuid";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null application_id", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          int v24 = "nw_application_id_get_uuid";
          __int16 v25 = 2082;
          BOOL v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null application_id, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8) {
          goto LABEL_8;
        }
LABEL_43:
        free(v8);
        goto LABEL_8;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_application_id_get_uuid";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_application_id_get_uuid";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null application_id, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182528BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_application_id_create_with_serialized_bytes(__int128 *a1, unint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
    __int16 v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null data", buf, 0xCu);
      }

      goto LABEL_55;
    }

    if (!v26)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v10,  v23,  "%{public}s called with null data, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = type[0];
    BOOL v18 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }

      goto LABEL_55;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null data, dumping backtrace:%{public}s",  buf,  0x16u);
    }

uint64_t nw_application_id_delegate_socket(void *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    int v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_application_id_delegate_socket";
    size_t v6 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(uu) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (uu == 17)
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = uu;
      if (os_log_type_enabled(v17, (os_log_type_t)uu))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_application_id_delegate_socket";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null application_id", buf, 0xCu);
      }
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = uu;
      BOOL v21 = os_log_type_enabled(v17, (os_log_type_t)uu);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_application_id_delegate_socket";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v20,  "%{public}s called with null application_id, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_24:
        if (v6) {
LABEL_25:
        }
          free(v6);
LABEL_26:
        uint64_t v9 = 0LL;
        goto LABEL_27;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_application_id_delegate_socket";
        _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = uu;
      if (os_log_type_enabled(v17, (os_log_type_t)uu))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_application_id_delegate_socket";
        _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s called with null application_id, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_24;
  }

  __int128 uu = 0uLL;
  nw_application_id_get_uuid(v3, &uu);
  if (uuid_is_null((const unsigned __int8 *)&uu))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_application_id_delegate_socket";
    size_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v6, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_application_id_delegate_socket";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s Passed UUID is null", buf, 0xCu);
        }
      }

      else if (v23)
      {
        os_log_type_t v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v27 = "nw_application_id_delegate_socket";
            __int16 v28 = 2082;
            uint64_t v29 = v11;
            _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s Passed UUID is null, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v11);
          if (!v6) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_application_id_delegate_socket";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s Passed UUID is null, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_application_id_delegate_socket";
          _os_log_impl(&dword_181A5C000, v7, v14, "%{public}s Passed UUID is null, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_24;
  }

  if (!setsockopt(a2, 0xFFFF, 4360, &uu, 0x10u)) {
    goto LABEL_26;
  }
  uint64_t v9 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v10 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_application_id_delegate_socket";
    __int16 v28 = 1024;
    LODWORD(v29) = a2;
    _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_ERROR,  "%{public}s Setting delegate socket uuid failed for fd: %u",  buf,  0x12u);
  }

LABEL_27:
  return v9;
}

void sub_182529880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_application_id_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  if (v3 && v4)
  {
    if (v3[2] != v4[2])
    {
      uint64_t v6 = 0LL;
      goto LABEL_10;
    }

    BOOL v5 = v3[3] == v4[3];
  }

  else
  {
    BOOL v5 = v3 == v4;
  }

  uint64_t v6 = v5;
LABEL_10:

  return v6;
}

void nw_application_id_get_audit_token(void *a1, _OWORD *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    size_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_application_id_get_audit_token";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_application_id_get_audit_token";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null application_id", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_application_id_get_audit_token";
          __int16 v25 = 2082;
          char v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null application_id, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8) {
          goto LABEL_8;
        }
LABEL_43:
        free(v8);
        goto LABEL_8;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_application_id_get_audit_token";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_application_id_get_audit_token";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null application_id, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t nw_application_id_get_bundle_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  size_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 10);
    goto LABEL_3;
  }

  __nwlog_obj();
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_application_id_get_bundle_id";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_application_id_get_bundle_id";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null application_id", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_application_id_get_bundle_id";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null application_id, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_application_id_get_bundle_id";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_application_id_get_bundle_id";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null application_id, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parallel_array_create()
{
  uint64_t v0 = _os_object_alloc();
  if (v0) {
    goto LABEL_2;
  }
  size_t v2 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  uint64_t v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 4_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    atomic_store(0, (unsigned __int8 *)(v0 + 64));
    return v0;
  }

  __break(1u);
  return result;
}

void nw_parallel_array_append(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_parallel_array_append";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_parallel_array_append";
      int v16 = "%{public}s called with null parray";
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_parallel_array_append";
          __int16 v25 = 2082;
          char v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null parray, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_47:
        if (v9) {
          goto LABEL_6;
        }
        return;
      }

      if (!v18) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_parallel_array_append";
      int v16 = "%{public}s called with null parray, no backtrace";
    }

    else
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_parallel_array_append";
      int v16 = "%{public}s called with null parray, backtrace limit exceeded";
    }

uint64_t nw_parallel_array_get_count(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v14 = "nw_parallel_array_get_count";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "nw_parallel_array_get_count";
      uint64_t v6 = "%{public}s called with null parray";
    }

    else
    {
      if (!v11)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parallel_array_get_count";
        uint64_t v6 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_parallel_array_get_count";
          __int16 v15 = 2082;
          int v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null parray, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v3) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (!v8) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "nw_parallel_array_get_count";
      uint64_t v6 = "%{public}s called with null parray, no backtrace";
    }

void nw_parallel_array_get_at_index(void *a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        __int16 v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_parallel_array_get_at_index";
        uint64_t v17 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_77;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (!v19) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_parallel_array_get_at_index";
        uint64_t v17 = "%{public}s called with null parray, no backtrace";
        goto LABEL_77;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v28 = "nw_parallel_array_get_at_index";
        __int16 v29 = 2082;
        uint64_t v30 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null parray, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
LABEL_78:
      if (v14) {
        goto LABEL_79;
      }
      return;
    }

    __int16 v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    uint64_t v17 = "%{public}s called with null parray";
    goto LABEL_77;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        __int16 v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_parallel_array_get_at_index";
        uint64_t v17 = "%{public}s called with null first, backtrace limit exceeded";
        goto LABEL_77;
      }

      BOOL v20 = (char *)__nw_create_backtrace_string();
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_parallel_array_get_at_index";
        uint64_t v17 = "%{public}s called with null first, no backtrace";
        goto LABEL_77;
      }

      if (!v21) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v28 = "nw_parallel_array_get_at_index";
      __int16 v29 = 2082;
      uint64_t v30 = v20;
      os_log_type_t v22 = "%{public}s called with null first, dumping backtrace:%{public}s";
      goto LABEL_58;
    }

    __int16 v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    uint64_t v17 = "%{public}s called with null first";
LABEL_77:
    _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
    goto LABEL_78;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_parallel_array_get_at_index";
    os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v28 = "nw_parallel_array_get_at_index";
      uint64_t v17 = "%{public}s called with null second";
      goto LABEL_77;
    }

    if (!v25)
    {
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v28 = "nw_parallel_array_get_at_index";
      uint64_t v17 = "%{public}s called with null second, backtrace limit exceeded";
      goto LABEL_77;
    }

    BOOL v20 = (char *)__nw_create_backtrace_string();
    __int16 v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v28 = "nw_parallel_array_get_at_index";
      uint64_t v17 = "%{public}s called with null second, no backtrace";
      goto LABEL_77;
    }

    if (!v23) {
      goto LABEL_59;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v28 = "nw_parallel_array_get_at_index";
    __int16 v29 = 2082;
    uint64_t v30 = v20;
    os_log_type_t v22 = "%{public}s called with null second, dumping backtrace:%{public}s";
LABEL_58:
    _os_log_impl(&dword_181A5C000, v15, v16, v22, buf, 0x16u);
    goto LABEL_59;
  }

  *a3 = 0LL;
  *a4 = 0LL;
  uint64_t v4 = a1[2];
  unint64_t v5 = (a1[3] - v4) >> 3;
  if (v5 == (uint64_t)(a1[6] - a1[5]) >> 3)
  {
    if (v5 > a2)
    {
      *a3 = *(void *)(v4 + 8 * a2);
      *a4 = *(void *)(a1[5] + 8 * a2);
      return;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    __int16 v28 = "nw_parallel_array_get_at_index";
    __int16 v29 = 2048;
    uint64_t v30 = (char *)a2;
    size_t v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v28 = "nw_parallel_array_get_at_index";
        __int16 v29 = 2048;
        uint64_t v30 = (char *)a2;
        BOOL v10 = "%{public}s array index out of range: %lu";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0x16u);
      }
    }

    else if (v25)
    {
      char v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v11)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          __int16 v28 = "nw_parallel_array_get_at_index";
          __int16 v29 = 2048;
          uint64_t v30 = (char *)a2;
          __int16 v31 = 2082;
          char v32 = v11;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s array index out of range: %lu, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v11);
        goto LABEL_21;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v28 = "nw_parallel_array_get_at_index";
        __int16 v29 = 2048;
        uint64_t v30 = (char *)a2;
        BOOL v10 = "%{public}s array index out of range: %lu, no backtrace";
        goto LABEL_20;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v28 = "nw_parallel_array_get_at_index";
        __int16 v29 = 2048;
        uint64_t v30 = (char *)a2;
        BOOL v10 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_parallel_array_remove_at_index(uint64_t a1, unint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v40 = "nw_parallel_array_remove_at_index";
    uint64_t v6 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v40 = "nw_parallel_array_remove_at_index";
      char v32 = "%{public}s called with null parray";
LABEL_75:
      _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
      goto LABEL_76;
    }

    if (!v37)
    {
      uint64_t v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v40 = "nw_parallel_array_remove_at_index";
      char v32 = "%{public}s called with null parray, backtrace limit exceeded";
      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v34 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v40 = "nw_parallel_array_remove_at_index";
      char v32 = "%{public}s called with null parray, no backtrace";
      goto LABEL_75;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v40 = "nw_parallel_array_remove_at_index";
      __int16 v41 = 2082;
      __int16 v42 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s called with null parray, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_76:
    if (!v6) {
      return;
    }
LABEL_6:
    size_t v7 = (char *)v6;
LABEL_46:
    free(v7);
    return;
  }

  unint64_t v3 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  if (v3 == (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3)
  {
    if (v3 > a2)
    {
      if (atomic_load((unsigned __int8 *)(a1 + 64)))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_parallel_array_remove_at_index";
        uint64_t v6 = (const char *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v6))
        {
          __break(1u);
          return;
        }

        goto LABEL_6;
      }

      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v15 = *(void *)(a1 + 16) + 8 * a2;
      uint64_t v16 = v15 + 8;
      if (v15 + 8 == v14)
      {
        if (v16 == v15) {
          goto LABEL_27;
        }
      }

      else
      {
        do
        {
          if (*(void *)v15) {
            os_release(*(void **)v15);
          }
          uint64_t v17 = v15 + 8;
          *(void *)uint64_t v15 = *(void *)(v15 + 8);
          *(void *)(v15 + _Block_object_dispose(va, 8) = 0LL;
          uint64_t v18 = v15 + 16;
          v15 += 8LL;
        }

        while (v18 != v14);
        uint64_t v16 = *(void *)(a1 + 24);
        uint64_t v15 = v17;
        if (v16 == v17)
        {
LABEL_27:
          *(void *)(a1 + 24) = v15;
          uint64_t v22 = *(void *)(a1 + 48);
          uint64_t v23 = *(void *)(a1 + 40) + 8 * a2;
          uint64_t v24 = v23 + 8;
          if (v23 + 8 == v22)
          {
            if (v24 == v23)
            {
LABEL_38:
              *(void *)(a1 + 4_Block_object_dispose(va, 8) = v23;
              return;
            }
          }

          else
          {
            do
            {
              if (*(void *)v23) {
                os_release(*(void **)v23);
              }
              uint64_t v25 = v23 + 8;
              *(void *)uint64_t v23 = *(void *)(v23 + 8);
              *(void *)(v23 + _Block_object_dispose(va, 8) = 0LL;
              uint64_t v26 = v23 + 16;
              v23 += 8LL;
            }

            while (v26 != v22);
            uint64_t v24 = *(void *)(a1 + 48);
            uint64_t v23 = v25;
            if (v24 == v25) {
              goto LABEL_38;
            }
          }

          uint64_t v27 = v24;
          do
          {
            __int16 v29 = *(void **)(v27 - 8);
            v27 -= 8LL;
            __int16 v28 = v29;
            if (v29) {
              os_release(v28);
            }
            *(void *)(v24 - _Block_object_dispose(va, 8) = 0LL;
            uint64_t v24 = v27;
          }

          while (v27 != v23);
          goto LABEL_38;
        }
      }

      uint64_t v19 = v16;
      do
      {
        BOOL v21 = *(void **)(v19 - 8);
        v19 -= 8LL;
        BOOL v20 = v21;
        if (v21) {
          os_release(v20);
        }
        *(void *)(v16 - _Block_object_dispose(va, 8) = 0LL;
        uint64_t v16 = v19;
      }

      while (v19 != v15);
      goto LABEL_27;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    __int16 v40 = "nw_parallel_array_remove_at_index";
    __int16 v41 = 2048;
    __int16 v42 = (char *)a2;
    BOOL v8 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v8, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (os_log_s *)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v40 = "nw_parallel_array_remove_at_index";
          __int16 v41 = 2048;
          __int16 v42 = (char *)a2;
          char v11 = "%{public}s array index out of range: %lu";
LABEL_43:
          _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0x16u);
        }
      }

      else if (v37)
      {
        BOOL v12 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (os_log_s *)gLogObj;
        os_log_type_t v10 = type;
        BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v12)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446722;
            __int16 v40 = "nw_parallel_array_remove_at_index";
            __int16 v41 = 2048;
            __int16 v42 = (char *)a2;
            __int16 v43 = 2082;
            __int16 v44 = v12;
            _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s array index out of range: %lu, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v12);
          goto LABEL_44;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v40 = "nw_parallel_array_remove_at_index";
          __int16 v41 = 2048;
          __int16 v42 = (char *)a2;
          char v11 = "%{public}s array index out of range: %lu, no backtrace";
          goto LABEL_43;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (os_log_s *)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v40 = "nw_parallel_array_remove_at_index";
          __int16 v41 = 2048;
          __int16 v42 = (char *)a2;
          char v11 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
          goto LABEL_43;
        }
      }
    }

uint64_t nw_parallel_array_find(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_parallel_array_find";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_parallel_array_find";
      char v11 = "%{public}s called with null parray";
    }

    else
    {
      if (!v16)
      {
        os_log_type_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_parallel_array_find";
        char v11 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_parallel_array_find";
          __int16 v20 = 2082;
          BOOL v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null parray, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v8) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_41;
      }

      if (!v13) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_parallel_array_find";
      char v11 = "%{public}s called with null parray, no backtrace";
    }

BOOL nw_parallel_array_contains(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1[3] - a1[2] == a1[6] - a1[5]) {
      return nw_parallel_array_find(a1, a2, a3) != -1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_parallel_array_contains";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        size_t v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v12)
    {
      unint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        size_t v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        size_t v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_parallel_array_contains";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      os_log_type_t v10 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_parallel_array_contains";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      unint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        size_t v7 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_parallel_array_contains";
        size_t v7 = "%{public}s called with null parray, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_parallel_array_contains";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      os_log_type_t v10 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v5, v6, v10, buf, 0x16u);
    }

BOOL nw_parallel_array_is_equal(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_parallel_array_is_equal";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        uint64_t v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_parallel_array_is_equal";
        __int16 v16 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_45;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (!v18) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_parallel_array_is_equal";
        __int16 v16 = "%{public}s called with null parray, no backtrace";
        goto LABEL_45;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v24 = "nw_parallel_array_is_equal";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        uint64_t v19 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_35:
        _os_log_impl(&dword_181A5C000, v14, v15, v19, buf, 0x16u);
      }

void ***nw_parallel_array_copy(void ***a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    if ((char *)a1[3] - (char *)a1[2] == (char *)a1[6] - (char *)a1[5])
    {
      BOOL v2 = nw_parallel_array_create();
      if ((void ***)v2 != v1)
      {
        BOOL v3 = v2;
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v2 + 16,  v1[2],  v1[3],  v1[3] - v1[2]);
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v3 + 40,  v1[5],  v1[6],  v1[6] - v1[5]);
        return (void ***)v3;
      }

      return v1;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_parallel_array_copy";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    if (!v13)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v16 = "nw_parallel_array_copy";
      __int16 v17 = 2082;
      BOOL v18 = backtrace_string;
      BOOL v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
      goto LABEL_22;
    }

    goto LABEL_23;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_parallel_array_copy";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_parallel_array_copy";
        BOOL v8 = "%{public}s called with null parray, no backtrace";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v16 = "nw_parallel_array_copy";
      __int16 v17 = 2082;
      BOOL v18 = backtrace_string;
      BOOL v11 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_22:
      _os_log_impl(&dword_181A5C000, v6, v7, v11, buf, 0x16u);
    }

uint64_t nw_parallel_array_apply(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parallel_array_apply";
    int64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parallel_array_apply";
        os_log_type_t v7 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_45;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v9) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parallel_array_apply";
        os_log_type_t v7 = "%{public}s called with null parray, no backtrace";
        goto LABEL_45;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v17 = "nw_parallel_array_apply";
        __int16 v18 = 2082;
        uint64_t v19 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null parray, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_46;
    }

    uint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parallel_array_apply";
    os_log_type_t v7 = "%{public}s called with null parray";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_46;
  }

  unint64_t v2 = (uint64_t)(a1[3] - a1[2]) >> 3;
  if (v2 != (uint64_t)(a1[6] - a1[5]) >> 3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parallel_array_apply";
    int64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parallel_array_apply";
        os_log_type_t v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_45;
      }

      BOOL v10 = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v11) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parallel_array_apply";
        os_log_type_t v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_45;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v17 = "nw_parallel_array_apply";
        __int16 v18 = 2082;
        uint64_t v19 = v10;
        BOOL v12 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
LABEL_30:
        _os_log_impl(&dword_181A5C000, v5, v6, v12, buf, 0x16u);
      }

uint64_t nw_parallel_array_apply_with_range(void *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v32 = "nw_parallel_array_apply_with_range";
    char v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      char v32 = "nw_parallel_array_apply_with_range";
      __int16 v17 = "%{public}s called with null parray";
LABEL_62:
      _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
      goto LABEL_63;
    }

    if (!v29)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        char v32 = "nw_parallel_array_apply_with_range";
        __int16 v17 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_62;
      }

      goto LABEL_63;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v25 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        char v32 = "nw_parallel_array_apply_with_range";
        __int16 v17 = "%{public}s called with null parray, no backtrace";
        goto LABEL_62;
      }

      goto LABEL_63;
    }

    if (!v25) {
      goto LABEL_49;
    }
    *(_DWORD *)buf = 136446466;
    char v32 = "nw_parallel_array_apply_with_range";
    __int16 v33 = 2082;
    BOOL v34 = backtrace_string;
    uint64_t v26 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_48:
    _os_log_impl(&dword_181A5C000, v15, v16, v26, buf, 0x16u);
    goto LABEL_49;
  }

  if (a1[3] - a1[2] != a1[6] - a1[5])
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v32 = "nw_parallel_array_apply_with_range";
    char v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      char v32 = "nw_parallel_array_apply_with_range";
      __int16 v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_62;
    }

    if (!v29)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        char v32 = "nw_parallel_array_apply_with_range";
        __int16 v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_62;
      }

      goto LABEL_63;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v27 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        char v32 = "nw_parallel_array_apply_with_range";
        __int16 v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_62;
      }

      goto LABEL_63;
    }

    if (!v27) {
      goto LABEL_49;
    }
    *(_DWORD *)buf = 136446466;
    char v32 = "nw_parallel_array_apply_with_range";
    __int16 v33 = 2082;
    BOOL v34 = backtrace_string;
    uint64_t v26 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
    goto LABEL_48;
  }

  if (a4)
  {
    BOOL v8 = (unsigned __int8 *)(a1 + 8);
    do
      int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    if (v9 == 255)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      char v32 = "nw_parallel_array_apply_with_range";
      uint64_t v19 = (void *)_os_log_send_and_compose_impl();
      free(v19);
      if (a2 < a3) {
        goto LABEL_8;
      }
    }

    else if (a2 < a3)
    {
LABEL_8:
      if ((*(unsigned int (**)(uint64_t, unint64_t, void, void))(a4 + 16))( a4,  a2,  *(void *)(a1[2] + 8 * a2),  *(void *)(a1[5] + 8 * a2)))
      {
        unint64_t v10 = a2 + 1;
        while (a3 != v10)
        {
          char v11 = (*(uint64_t (**)(uint64_t, unint64_t, void, void))(a4 + 16))( a4,  v10,  *(void *)(a1[2] + 8 * v10),  *(void *)(a1[5] + 8 * v10));
          ++v10;
          if ((v11 & 1) == 0)
          {
            unint64_t v12 = v10 - 1;
            goto LABEL_15;
          }
        }

        unint64_t v12 = a3;
LABEL_15:
        BOOL v13 = v12 >= a3;
      }

      else
      {
        BOOL v13 = 0LL;
      }

      goto LABEL_31;
    }

    BOOL v13 = 1LL;
    do
LABEL_31:
      int v20 = __ldxr(v8);
    while (__stlxr(v20 - 1, v8));
    if (v20 != 255) {
      return v13;
    }
    uint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    char v32 = "nw_parallel_array_apply_with_range";
    uint64_t v23 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v23))
    {
      free(v23);
      return v13;
    }

uint64_t ___ZL38nw_endpoint_transform_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke( uint64_t a1)
{
  return nw_endpoint_transform_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

uint64_t ___ZL38nw_endpoint_transform_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke_102( uint64_t a1)
{
  return nw_endpoint_transform_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

uint64_t __Block_byref_object_copy__77715(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__77716(uint64_t a1)
{
}

uint64_t ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v142 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  uint64_t v122 = 0LL;
  v123 = (id *)&v122;
  uint64_t v124 = 0x3032000000LL;
  v125 = __Block_byref_object_copy__77715;
  v126 = __Block_byref_object_dispose__77716;
  id v127 = nw_protocol_transform_copy_endpoint(v4);
  uint64_t v118 = 0LL;
  v119 = &v118;
  uint64_t v120 = 0x2020000000LL;
  char v121 = 0;
  id v5 = nw_parameters_copy_url_endpoint(*(void **)(a1 + 32));
  if (!v5) {
    id v5 = *(id *)(*(void *)(a1 + 40) + 56LL);
  }
  if (!nw_protocol_transform_supports_endpoint(v4, v5))
  {
    *((_BYTE *)v119 + 24) = 1;
    if (gLogDatapath)
    {
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v61 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          v63 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          v64 = id_string;
          nw_endpoint_t v102 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          logging_description = nw_endpoint_get_logging_description(v102);
          int v66 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          v67 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          id v68 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          *(_DWORD *)buf = 136447746;
          v129 = "nw_endpoint_transform_add_children_block_invoke";
          __int16 v130 = 2082;
          v131 = v64;
          __int16 v132 = 2082;
          v133 = v63;
          __int16 v134 = 2082;
          v135 = logging_description;
          __int16 v136 = 2082;
          v137 = v66;
          __int16 v138 = 2082;
          v139 = v67;
          __int16 v140 = 2114;
          id v141 = v68;
          _os_log_impl( &dword_181A5C000,  v61,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping transform due to u nsupported endpoint",  buf,  0x48u);
        }
      }
    }
  }

  if (!*((_BYTE *)v119 + 24))
  {
    if (v123[5]) {
      goto LABEL_96;
    }
    uint64_t v19 = *(void **)(*(void *)(a1 + 40) + 56LL);
    v112[0] = MEMORY[0x1895F87A8];
    v112[1] = 3221225472LL;
    v112[2] = ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_94;
    v112[3] = &unk_189BC6D10;
    v116 = &v122;
    id v113 = v4;
    v117 = &v118;
    id v114 = *(id *)(a1 + 48);
    id v115 = *(id *)(a1 + 40);
    nw_endpoint_enumerate_alternatives(v19, v112);

    if (!*((_BYTE *)v119 + 24))
    {
LABEL_96:
      if (!v123[5]) {
        objc_storeStrong(v123 + 5, *(id *)(*(void *)(a1 + 40) + 56LL));
      }
      id v6 = *(id *)(a1 + 32);
      os_log_type_t v7 = (NWConcrete_nw_parameters *)-[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v6,  0,  0);

      nw_protocol_transform_modify_parameters(v4, v7);
      if (nw_parameters_get_upper_transport_protocol(v7) != 253)
      {
        int is_above_failure_threshold = 0;
        goto LABEL_36;
      }

      id v8 = nw_endpoint_handler_copy_association(*(void **)(a1 + 48), 0);
      v101 = v8;
      if (!v8)
      {
        int is_above_failure_threshold = 0;
        goto LABEL_28;
      }

      LOBYTE(v10_Block_object_dispose(va, 8) = 0;
      int is_above_failure_threshold = nw_quic_is_above_failure_threshold(v8, &v108);
      if (!is_above_failure_threshold)
      {
LABEL_28:
        BOOL v20 = networkd_settings_get_BOOL((const char *)nw_setting_disable_quic_race);
        BOOL v21 = networkd_settings_get_BOOL((const char *)nw_setting_disable_quic);
        if (!v20 && !v21)
        {
          uint64_t v22 = *(void **)(a1 + 56);
          BOOL has_custom_proxy_configs = nw_parameters_has_custom_proxy_configs(*(void **)(a1 + 32));
          if (!nw_path_should_use_proxy(v22, has_custom_proxy_configs))
          {
LABEL_35:

LABEL_36:
            inner = nw_endpoint_handler_create_inner( v123[5],  v7,  nw_endpoint_transform_receive_report,  *(void **)(a1 + 48),  *(void **)(a1 + 48),  0,  0);
            uint64_t v26 = *(void *)(a1 + 40);
            if (*(void *)(v26 + 8))
            {
              if (!*(void *)(v26 + 24)) {
                goto LABEL_42;
              }
            }

            else
            {
              BOOL v27 = nw_array_create();
              uint64_t v28 = *(void *)(a1 + 40);
              char v29 = *(void **)(v28 + 8);
              *(void *)(v28 + _Block_object_dispose(va, 8) = v27;

              if (!*(void *)(*(void *)(a1 + 40) + 24LL))
              {
LABEL_42:
                xpc_object_t v30 = xpc_array_create(0LL, 0LL);
                uint64_t v31 = *(void *)(a1 + 40);
                char v32 = *(void **)(v31 + 24);
                *(void *)(v31 + 24) = v30;
              }
            }

            unsigned int fallback_mode = nw_protocol_transform_get_fallback_mode(v4);
            if (is_above_failure_threshold)
            {
              if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL))
              {
                BOOL v34 = nw_array_create();
                uint64_t v35 = *(void *)(*(void *)(a1 + 72) + 8LL);
                BOOL v36 = *(void **)(v35 + 40);
                *(void *)(v35 + 40) = v34;
              }

              if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL))
              {
                xpc_object_t v37 = xpc_array_create(0LL, 0LL);
                uint64_t v38 = *(void *)(*(void *)(a1 + 80) + 8LL);
                unint64_t v39 = *(void **)(v38 + 40);
                *(void *)(v38 + 40) = v37;
              }

              nw_array_append(*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), inner);
              __int16 v40 = (xpc_object_t *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
            }

            else
            {
              nw_array_append(*(void *)(*(void *)(a1 + 40) + 8LL), inner);
              __int16 v40 = (xpc_object_t *)(*(void *)(a1 + 40) + 24LL);
            }

            xpc_array_set_int64(*v40, 0xFFFFFFFFFFFFFFFFLL, fallback_mode);

            goto LABEL_59;
          }

          uint64_t v24 = (unsigned __int8 *)nw_parameters_copy_custom_proxy_configs(*(void **)(a1 + 32));
          if (!v24) {
            uint64_t v24 = (unsigned __int8 *)nw_path_copy_proxy_configs(*(void **)(a1 + 56));
          }
          uint64_t v108 = 0LL;
          v109 = &v108;
          uint64_t v110 = 0x2020000000LL;
          char v111 = 0;
          v103[0] = MEMORY[0x1895F87A8];
          v103[1] = 3221225472LL;
          v103[2] = ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_96;
          v103[3] = &unk_189BC6D38;
          __int16 v106 = &v122;
          __int16 v104 = v7;
          id v105 = *(id *)(a1 + 56);
          v107 = &v108;
          nw_array_apply(v24, (uint64_t)v103);
          if (*((_BYTE *)v109 + 24))
          {

            _Block_object_dispose(&v108, 8);
            goto LABEL_35;
          }

          int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 48));
          char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0) {
              goto LABEL_69;
            }
            v100 = v7;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            log = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              v89 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
              v80 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
              nw_endpoint_t v81 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
              v82 = nw_endpoint_get_logging_description(v81);
              BOOL v83 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
              v84 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
              id v85 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
              *(_DWORD *)buf = 136447746;
              v129 = "nw_endpoint_transform_add_children_block_invoke_2";
              __int16 v130 = 2082;
              v131 = v89;
              __int16 v132 = 2082;
              v133 = v80;
              __int16 v134 = 2082;
              v135 = v82;
              __int16 v136 = 2082;
              v137 = v83;
              __int16 v138 = 2082;
              v139 = v84;
              __int16 v140 = 2114;
              id v141 = v85;
              _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Non-QUIC proxies detect ed, denying QUIC attempt",  buf,  0x48u);

              os_log_type_t v7 = v100;
            }
          }

          else
          {
            if ((logging_disabled & 1) != 0)
            {
LABEL_69:
              *(_BYTE *)(*(void *)(a1 + 40) + 94LL) = 1;

              _Block_object_dispose(&v108, 8);
              goto LABEL_59;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v54 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
LABEL_68:

              goto LABEL_69;
            }

            BOOL v55 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
            v87 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
            log = v54;
            v97 = v7;
            nw_endpoint_t v56 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
            __int16 v57 = nw_endpoint_get_logging_description(v56);
            unint64_t v58 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
            uint64_t v59 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
            id v60 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136447746;
            v129 = "nw_endpoint_transform_add_children_block_invoke";
            __int16 v130 = 2082;
            v131 = v55;
            __int16 v132 = 2082;
            v133 = v87;
            __int16 v134 = 2082;
            v135 = v57;
            __int16 v136 = 2082;
            v137 = v58;
            __int16 v138 = 2082;
            v139 = v59;
            __int16 v140 = 2114;
            id v141 = v60;
            _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Non-QUIC proxies detected , denying QUIC attempt",  buf,  0x48u);

            os_log_type_t v7 = v97;
          }

          uint64_t v54 = log;
          goto LABEL_68;
        }

        int v41 = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 48));
        char v42 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
        if (v41)
        {
          if ((v42 & 1) != 0) {
            goto LABEL_58;
          }
          char v98 = v7;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v43 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            v69 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
            logc = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
            nw_endpoint_t v70 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
            v71 = nw_endpoint_get_logging_description(v70);
            os_log_type_t v72 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
            v73 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
            id v74 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136447746;
            v129 = "nw_endpoint_transform_add_children_block_invoke";
            __int16 v130 = 2082;
            v131 = v69;
            __int16 v132 = 2082;
            v133 = logc;
            __int16 v134 = 2082;
            v135 = v71;
            __int16 v136 = 2082;
            v137 = v72;
            __int16 v138 = 2082;
            v139 = v73;
            __int16 v140 = 2114;
            id v141 = v74;
            _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC disabled, denying race attempt",  buf,  0x48u);

            os_log_type_t v7 = v98;
          }
        }

        else
        {
          if ((v42 & 1) != 0)
          {
LABEL_58:
            *(_BYTE *)(*(void *)(a1 + 40) + 94LL) = 1;

LABEL_59:
            goto LABEL_60;
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v43 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            v96 = v7;
            __int16 v44 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
            uint64_t v45 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
            logb = v43;
            nw_endpoint_t v46 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
            char v47 = nw_endpoint_get_logging_description(v46);
            unint64_t v48 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
            uint64_t v49 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
            id v50 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136447746;
            v129 = "nw_endpoint_transform_add_children_block_invoke";
            __int16 v130 = 2082;
            v131 = v44;
            __int16 v132 = 2082;
            v133 = v45;
            __int16 v134 = 2082;
            v135 = v47;
            __int16 v136 = 2082;
            v137 = v48;
            __int16 v138 = 2082;
            v139 = v49;
            __int16 v140 = 2114;
            id v141 = v50;
            __int16 v43 = logb;
            _os_log_impl( &dword_181A5C000,  logb,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC disabled, denying race attempt",  buf,  0x48u);

            os_log_type_t v7 = v96;
          }
        }

        goto LABEL_58;
      }

      int v10 = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 48));
      char v11 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
      if (v10)
      {
        if ((v11 & 1) != 0) {
          goto LABEL_21;
        }
        v99 = v7;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        unint64_t v12 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          logd = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          v88 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          nw_endpoint_t v75 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          os_log_type_t v76 = nw_endpoint_get_logging_description(v75);
          v77 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          v78 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          id v79 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          *(_DWORD *)buf = 136447746;
          v129 = "nw_endpoint_transform_add_children_block_invoke";
          __int16 v130 = 2082;
          v131 = logd;
          __int16 v132 = 2082;
          v133 = v88;
          __int16 v134 = 2082;
          v135 = v76;
          __int16 v136 = 2082;
          v137 = v77;
          __int16 v138 = 2082;
          v139 = v78;
          __int16 v140 = 2114;
          id v141 = v79;
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC is beyond failure thre shold, deferring",  buf,  0x48u);

          os_log_type_t v7 = v99;
        }
      }

      else
      {
        if ((v11 & 1) != 0)
        {
LABEL_21:
          uint64_t v18 = 92LL;
          if ((_BYTE)v108) {
            uint64_t v18 = 93LL;
          }
          *(_BYTE *)(*(void *)(a1 + 40) + v1_Block_object_dispose(va, 8) = 1;
          goto LABEL_28;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        unint64_t v12 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          BOOL v13 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          BOOL v95 = v7;
          os_log_type_t v86 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          os_log_t loga = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          char v14 = nw_endpoint_get_logging_description(loga);
          os_log_type_t v15 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          os_log_type_t v16 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          id v17 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          *(_DWORD *)buf = 136447746;
          v129 = "nw_endpoint_transform_add_children_block_invoke";
          __int16 v130 = 2082;
          v131 = v13;
          __int16 v132 = 2082;
          v133 = v86;
          __int16 v134 = 2082;
          v135 = v14;
          __int16 v136 = 2082;
          v137 = v15;
          __int16 v138 = 2082;
          v139 = v16;
          __int16 v140 = 2114;
          id v141 = v17;
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC is beyond failure thre shold, deferring",  buf,  0x48u);

          os_log_type_t v7 = v95;
        }
      }

      goto LABEL_21;
    }
  }

void sub_18252F65C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, id a44)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_98( uint64_t a1, int a2, xpc_object_t value)
{
  return 1LL;
}

uint64_t ___ZL36nw_endpoint_transform_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke( uint64_t a1, void *a2, void *a3)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  id v6 = a3;
  os_log_type_t v7 = v6;
  uint64_t v8 = 1LL;
  if (v5)
  {
    if (v6)
    {
      if (v5 != &__block_literal_global_6237)
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 32LL);
        if (v9)
        {
          char v11 = *(id **)(v9 + 16);
          int v10 = *(id **)(v9 + 24);
          if (v11 != v10)
          {
            while (*v11 != v6)
            {
              if (++v11 == v10)
              {
                char v11 = v10;
                break;
              }
            }
          }

          if (v11 == v10)
          {
            uint64_t v8 = 1LL;
            goto LABEL_19;
          }

          int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 40));
          char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40));
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0) {
              goto LABEL_17;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            log = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
              uint64_t v24 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
              nw_endpoint_t v25 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
              logging_description = nw_endpoint_get_logging_description(v25);
              BOOL v27 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
              uint64_t v28 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
              id v29 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
              *(_DWORD *)buf = 136448002;
              __int16 v33 = "nw_endpoint_transform_receive_report_block_invoke";
              __int16 v34 = 2082;
              uint64_t v35 = id_string;
              __int16 v36 = 2082;
              xpc_object_t v37 = v24;
              __int16 v38 = 2082;
              unint64_t v39 = logging_description;
              __int16 v40 = 2082;
              int v41 = v27;
              __int16 v42 = 2082;
              __int16 v43 = v28;
              __int16 v44 = 2114;
              id v45 = v29;
              __int16 v46 = 2114;
              char v47 = v7;
              char v14 = log;
              _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] updated endpoint altern atives allow %{public}@, restarting",  buf,  0x52u);
            }

            else
            {
              char v14 = log;
            }
          }

          else
          {
            if ((logging_disabled & 1) != 0)
            {
LABEL_17:
              uint64_t v8 = 0LL;
              *(_BYTE *)(*(void *)(a1 + 32) + 96LL) = 1;
              *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
              goto LABEL_19;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            char v14 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v15 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
              os_log_type_t v16 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
              os_log_t loga = v14;
              nw_endpoint_t v17 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
              uint64_t v18 = nw_endpoint_get_logging_description(v17);
              uint64_t v19 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
              BOOL v20 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
              id v21 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
              *(_DWORD *)buf = 136448002;
              __int16 v33 = "nw_endpoint_transform_receive_report_block_invoke";
              __int16 v34 = 2082;
              uint64_t v35 = v15;
              __int16 v36 = 2082;
              xpc_object_t v37 = v16;
              __int16 v38 = 2082;
              unint64_t v39 = v18;
              __int16 v40 = 2082;
              int v41 = v19;
              __int16 v42 = 2082;
              __int16 v43 = v20;
              __int16 v44 = 2114;
              id v45 = v21;
              __int16 v46 = 2114;
              char v47 = v7;
              char v14 = loga;
              _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] updated endpoint altern atives allow %{public}@, restarting",  buf,  0x52u);
            }
          }

          goto LABEL_17;
        }
      }
    }
  }

void sub_18252FB9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL36nw_endpoint_transform_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_100( uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(unsigned int *)(v7 + 40);
  if (v8 > a2)
  {
    if (*(id *)(a1 + 40) == v5)
    {
      *(_DWORD *)(v7 + 8_Block_object_dispose(va, 8) = a2;
    }

    else
    {
      id v9 = nw_endpoint_handler_copy_parameters(v5);
      if (nw_parameters_get_upper_transport_protocol(v9) == 253)
      {
        id v10 = nw_endpoint_handler_copy_association(*(void **)(a1 + 48), 0);
        nw_quic_report_race_result_on_queue(v10, 0, 1);
      }

      nw_endpoint_handler_cancel(v6, 0LL, 0);
    }
  }

  return v8 > a2;
}

void sub_18252FC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_94( uint64_t a1, void *a2, void *a3)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  id v6 = a2;
  id v7 = a3;
  if (v7
    && !*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL)
    && nw_protocol_transform_contains_protocol(*(void **)(a1 + 32), v7))
  {
    if (v6 == &__block_literal_global_6237)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v18 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          BOOL v20 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          id v21 = id_string;
          nw_endpoint_t v32 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          logging_description = nw_endpoint_get_logging_description(v32);
          uint64_t v23 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          uint64_t v24 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v25 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136448002;
          __int16 v34 = "nw_endpoint_transform_add_children_block_invoke";
          __int16 v35 = 2082;
          __int16 v36 = v21;
          __int16 v37 = 2082;
          __int16 v38 = v20;
          __int16 v39 = 2082;
          __int16 v40 = logging_description;
          __int16 v41 = 2082;
          __int16 v42 = v23;
          __int16 v43 = 2082;
          __int16 v44 = v24;
          __int16 v45 = 2114;
          id v46 = v25;
          __int16 v47 = 2112;
          id v48 = v7;
          _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Transform including protoco l %@ cannot be used, unknown endpoint",  buf,  0x52u);
        }
      }

      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v16 = a1 + 48;
      uint64_t v27 = *(void *)(v26 + 32);
      if (!v27)
      {
        BOOL v28 = nw_array_create();
        id v29 = *(void **)(*(void *)v16 + 32LL);
        *(void *)(*(void *)v16 + 32LL) = v28;

        uint64_t v27 = *(void *)(*(void *)v16 + 32LL);
      }

      nw_array_append(v27, v7);
      char v17 = 0;
    }

    else
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        unint64_t v8 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          id v9 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          id v10 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          char v11 = v9;
          nw_endpoint_t v31 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          unint64_t v12 = nw_endpoint_get_logging_description(v31);
          BOOL v13 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          char v14 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v15 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136448258;
          __int16 v34 = "nw_endpoint_transform_add_children_block_invoke";
          __int16 v35 = 2082;
          __int16 v36 = v11;
          __int16 v37 = 2082;
          __int16 v38 = v10;
          __int16 v39 = 2082;
          __int16 v40 = v12;
          __int16 v41 = 2082;
          __int16 v42 = v13;
          __int16 v43 = 2082;
          __int16 v44 = v14;
          __int16 v45 = 2114;
          id v46 = v15;
          __int16 v47 = 2112;
          id v48 = v7;
          __int16 v49 = 2112;
          id v50 = v6;
          _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Transform including protoco l %@ using endpoint %@",  buf,  0x5Cu);
        }
      }

      uint64_t v16 = a1 + 48;
      char v17 = 1;
    }

    *(_BYTE *)(*(void *)v16 + 95LL) = v17;
  }

  return 1LL;
}

void sub_182530050( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_96( uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v4 = nw_proxy_config_supports_connection( a3,  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  *(void **)(a1 + 32),  *(void **)(a1 + 40));
  if (v4) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
  }
  return !v4;
}

BOOL NWPBServiceEndpointReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x189611CF0];
  uint64_t v4 = (int)*MEMORY[0x189611CF0];
  unint64_t v5 = *(void *)(a2 + v4);
  id v6 = (int *)MEMORY[0x189611CE8];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x189611CE8]);
  unint64_t v8 = (int *)MEMORY[0x189611CE0];
  if (v5 < v7)
  {
    id v10 = (int *)MEMORY[0x189611CD8];
    while (1)
    {
      char v14 = (_BYTE *)(a2 + *v8);
      if (*v14) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v15 = *(_BYTE *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0) {
        goto LABEL_40;
      }
      uint64_t v17 = *v3;
      unint64_t v18 = *(void *)(a2 + v17);
      if (v18 == -1LL || v18 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v19 = v18 + 1;
      int v20 = *(char *)(*(void *)(a2 + *v10) + v18);
      *(void *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v21 = *v3;
      unint64_t v22 = *(void *)(a2 + v21);
      if (v22 == -1LL || v22 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v23 = v22 + 1;
      int v24 = *(char *)(*(void *)(a2 + *v10) + v22);
      *(void *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v25 = *v3;
      unint64_t v26 = *(void *)(a2 + v25);
      if (v26 == -1LL || v26 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v27 = v26 + 1;
      int v28 = *(char *)(*(void *)(a2 + *v10) + v26);
      *(void *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v29 = *v3;
      unint64_t v30 = *(void *)(a2 + v29);
      if (v30 == -1LL || v30 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v31 = v30 + 1;
      int v32 = *(char *)(*(void *)(a2 + *v10) + v30);
      *(void *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1LL || v34 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v35 = v34 + 1;
      int v36 = *(char *)(*(void *)(a2 + *v10) + v34);
      *(void *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v37 = *v3;
      unint64_t v38 = *(void *)(a2 + v37);
      if (v38 == -1LL || v38 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v39 = v38 + 1;
      int v40 = *(char *)(*(void *)(a2 + *v10) + v38);
      *(void *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v41 = *v3;
      unint64_t v42 = *(void *)(a2 + v41);
      if (v42 == -1LL || v42 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v43 = v42 + 1;
      int v44 = *(char *)(*(void *)(a2 + *v10) + v42);
      *(void *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v45 = *v3;
      unint64_t v46 = *(void *)(a2 + v45);
      if (v46 == -1LL || v46 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v47 = v46 + 1;
      int v48 = *(char *)(*(void *)(a2 + *v10) + v46);
      *(void *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v49 = *v3;
      unint64_t v50 = *(void *)(a2 + v49);
      if (v50 == -1LL || v50 >= *(void *)(a2 + *v6))
      {
LABEL_38:
        char v14 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }

      unint64_t v51 = v50 + 1;
      int v52 = *(char *)(*(void *)(a2 + *v10) + v50);
      *(void *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        unint64_t v16 = 0LL;
        int v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }

BOOL nw_connection_used_tls(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v19 = 0;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_connection_used_tls_block_invoke;
    v13[3] = &unk_189BC9210;
    char v14 = v1;
    char v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_used_tls_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_connection_used_tls_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = nw_endpoint_handler_stack_uses_tls(*(void **)(v2 + 144));
  }

  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v4 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
        int v6 = 136446466;
        unint64_t v7 = "nw_connection_used_tls_block_invoke";
        __int16 v8 = 1024;
        int v9 = v5;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Connection is not ready",  (uint8_t *)&v6,  0x12u);
      }
    }
  }

void nw_establishment_report_get_accurate_ecn_state(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  int v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v32) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if ((_BYTE)v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type[0];
      BOOL v22 = os_log_type_enabled(v14, type[0]);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v13) {
          goto LABEL_5;
        }
LABEL_56:
        free(v13);
        goto LABEL_5;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_establishment_report_get_accurate_ecn_state_block_invoke(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  id v8 = (id)g_tcp_definition;
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }
  id v9 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v9))
  {

LABEL_8:
    goto LABEL_9;
  }

  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
  }
  id v12 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v12);

  if (!is_equal_unsafe)
  {
    uint64_t v10 = 1LL;
    goto LABEL_10;
  }

void sub_1825351CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_establishment_report_get_l4s_enabled(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)os_log_type_t type = 0LL;
    uint64_t v20 = type;
    uint64_t v21 = 0x2020000000LL;
    uint64_t v3 = MEMORY[0x1895F87A8];
    char v22 = 0;
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 3221225472LL;
    v18[2] = __nw_establishment_report_get_l4s_enabled_block_invoke;
    v18[3] = &unk_189BC7130;
    v18[4] = type;
    uint64_t v4 = v1;
    id v5 = v18;
    int v6 = (unsigned __int8 *)v4[8];
    *(void *)buf = v3;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __nw_establishment_report_enumerate_protocol_l4s_state_block_invoke;
    BOOL v25 = &unk_189BC8628;
    id v7 = v5;
    id v26 = v7;
    nw_array_apply(v6, (uint64_t)buf);

    BOOL v8 = *((_BYTE *)v20 + 24) != 0;
    _Block_object_dispose(type, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v11, type, &v23))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type[0];
      BOOL v16 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_l4s_enabled";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_establishment_report_get_l4s_enabled_block_invoke( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  id v7 = a2;
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }
  id v8 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8))
  {
  }

  else
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
    }
    id v9 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v9);

    if (!is_equal_unsafe)
    {
      uint64_t v11 = 1LL;
      goto LABEL_10;
    }
  }

  uint64_t v11 = 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a5;
LABEL_10:

  return v11;
}

void sub_182535650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_connection_fillout_tcp_statistics(void *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(void *)a2 = 0LL;
      *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
      id v5 = (os_unfair_lock_s *)v3;
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v49 = __Block_byref_object_copy__7759;
      unint64_t v50 = __Block_byref_object_dispose__7760;
      id v51 = 0LL;
      uint64_t v6 = MEMORY[0x1895F87A8];
      id v7 = v5 + 34;
      *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
      uint64_t v43 = 3221225472LL;
      int v44 = __nw_connection_copy_establishment_report_off_queue_block_invoke;
      uint64_t v45 = &unk_189BC9210;
      unint64_t v47 = buf;
      id v8 = v5;
      unint64_t v46 = v8;
      os_unfair_lock_lock(v7);
      __nw_connection_copy_establishment_report_off_queue_block_invoke((uint64_t)type);
      os_unfair_lock_unlock(v7);
      id v9 = *(id *)(*(void *)&buf[8] + 40LL);

      _Block_object_dispose(buf, 8);
      BOOL v10 = v9 != 0LL;
      if (v9)
      {
        v40[0] = v6;
        v40[1] = 3221225472LL;
        v40[2] = __nw_connection_fillout_tcp_statistics_block_invoke;
        v40[3] = &__block_descriptor_40_e43_B16__0__NSObject_OS_nw_resolution_report__8l;
        v40[4] = a2;
        uint64_t v11 = v9;
        id v12 = v40;
        os_log_type_t v13 = (unsigned __int8 *)v11[9];
        *(void *)buf = v6;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __nw_establishment_report_enumerate_resolution_reports_block_invoke;
        uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BC8628;
        char v14 = v12;
        unint64_t v50 = v14;
        nw_array_apply(v13, (uint64_t)buf);

        os_log_type_t v15 = v11;
        uint64_t v16 = v15[3];

        *(_DWORD *)(a2 + 4) = *(_DWORD *)a2 + v16;
        id v17 = (id)g_tcp_definition;
        *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = nw_establishment_report_get_handshake_ms_for_protocol(v15, v17);

        if (*(_DWORD *)(a2 + 8))
        {
          unint64_t v18 = v15;
          uint64_t v19 = v18[1];

          *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 8) + v19;
        }

        uint64_t v20 = (void *)nw_protocol_boringssl_copy_definition();
        *(_DWORD *)(a2 + 16) = nw_establishment_report_get_handshake_ms_for_protocol(v15, v20);

        if (*(_DWORD *)(a2 + 16))
        {
          uint64_t v21 = v15;
          int v22 = v21[4];

          *(_DWORD *)(a2 + 20) = v22;
        }
      }

      else
      {
        uint64_t v23 = *((void *)v8 + 2);
        if (v23 && !nw_path_parameters_get_logging_disabled(*(void *)(v23 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v24 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            int v25 = *((_DWORD *)v8 + 112);
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Establishment report is not ready",  buf,  0x12u);
          }
        }
      }

      goto LABEL_18;
    }

    __nwlog_obj();
    unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v28, type, &v41))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_statistics";
          _os_log_impl(&dword_181A5C000, v29, v32, "%{public}s called with null statistics", buf, 0xCu);
        }

void sub_182535DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_fillout_tcp_statistics_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  **(_DWORD **)(a1 + 32) = nw_resolution_report_get_milliseconds(v3);

  return 0LL;
}

uint64_t nw_establishment_report_get_handshake_ms_for_protocol(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v4)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v23 = 0LL;
    enumerate_block[0] = MEMORY[0x1895F87A8];
    enumerate_block[1] = 3221225472LL;
    enumerate_block[2] = ___ZL53nw_establishment_report_get_handshake_ms_for_protocolPU37objcproto26OS_nw_establishment_report8NSObjectPU36objcproto25OS_nw_protocol_definitionS_S3__block_invoke;
    enumerate_block[3] = &unk_189BC7238;
    id v17 = v4;
    id v18 = 0LL;
    uint64_t v19 = buf;
    nw_establishment_report_enumerate_protocols(v3, enumerate_block);
    uint64_t v6 = *(void *)(*(void *)&buf[8] + 24LL);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null match_protocol", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null match_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null match_protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null match_protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t ___ZL53nw_establishment_report_get_handshake_ms_for_protocolPU37objcproto26OS_nw_establishment_report8NSObjectPU36objcproto25OS_nw_protocol_definitionS_S3__block_invoke( uint64_t *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, a1[4])
    || (uint64_t v6 = a1[5]) != 0 && nw_protocol_definition_is_equal_unsafe((uint64_t)v5, v6))
  {
    uint64_t v7 = 0LL;
    *(void *)(*(void *)(a1[6] + 8) + 24LL) = a3;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_1825361AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_enable_stats_report_on_nw_queue(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v20 = "nw_connection_enable_stats_report_on_nw_queue";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_connection_enable_stats_report_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            char v20 = "nw_connection_enable_stats_report_on_nw_queue";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_connection_enable_stats_report_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_connection_enable_stats_report_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18253653C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_get_symptom_reporter_handle_block_invoke()
{
  uint64_t result = symptom_framework_init();
  nw_connection_get_symptom_reporter_handle::symptom_reporter = result;
  return result;
}

void nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue(void *a1, void *a2, uint64_t a3)
{
  uint64_t v134 = *MEMORY[0x1895F89C0];
  char v5 = a1;
  id v6 = a2;
  nw_context_assert_queue(v5[3]);
  uint64_t v7 = (id *)nw_endpoint_handler_copy_current_path(v6);
  if (v7)
  {
    v107[0] = MEMORY[0x1895F87A8];
    v107[1] = 3221225472LL;
    v107[2] = ___ZL70nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queueP24NWConcrete_nw_connectionPU33objcproto22OS_nw_endpoint_handler8NSObjectP35netcore_stats_tcp_statistics_report_block_invoke;
    v107[3] = &unk_189BC7260;
    id v8 = v5;
    uint64_t v108 = v8;
    uint64_t v109 = a3;
    nw_endpoint_handler_access_resolver_handler(v6, v107);
    id v102 = v7[12];
    if (v102)
    {
      id v9 = v102;
      int v10 = v9[24];

      *(_DWORD *)(a3 + 196) = v10;
    }

    unsigned __int16 v106 = WORD2(v6) ^ WORD1(v6) ^ HIWORD(v6) ^ (unsigned __int16)v6;
    int event_milliseconds = nw_connection_get_event_milliseconds(v8, 3, 3, &v106, 0LL);
    if (event_milliseconds != -1) {
      *(_DWORD *)(a3 + 140) = event_milliseconds;
    }
    v101 = (void *)nw_endpoint_handler_copy_connected_path(v6);
    if (!v101) {
      goto LABEL_41;
    }
    *(_DWORD *)(a3 + 144) = nw_connection_get_transport_connect_milliseconds(v8, v106, 1);
    *(_DWORD *)(a3 + 14_Block_object_dispose(va, 8) = nw_connection_get_transport_connect_milliseconds(v8, v106, 0);
    uint64_t start_time = v8->start_time;
    uint64_t v13 = mach_continuous_time();
    if (v13 <= 1) {
      uint64_t v14 = 1LL;
    }
    else {
      uint64_t v14 = v13;
    }
    unint64_t v15 = nw_delta_nanos(start_time, v14);
    unsigned int v16 = *(_DWORD *)(a3 + 144);
    *(_DWORD *)(a3 + 152) = v15 / 0xF4240 - v16;
    if ((v15 / 0xF4240) < v16)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v97 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v98 = *(unsigned int *)(a3 + 144);
          uint64_t v99 = *(unsigned int *)(a3 + 152);
          buf[0] = 136446978;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
          LOWORD(buf[3]) = 2082;
          *(void *)((char *)&buf[3] + 2) = "statistics_report->flow_duration_msecs";
          HIWORD(buf[5]) = 2048;
          *(void *)&buf[6] = v98;
          LOWORD(buf[8]) = 2048;
          *(void *)((char *)&buf[8] + 2) = v99;
          _os_log_impl( &dword_181A5C000,  v97,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  (uint8_t *)buf,  0x2Au);
        }
      }

      *(_DWORD *)(a3 + 152) = 0;
    }

    id v100 = nw_path_copy_interface(v101);
    if (v100)
    {
      char v17 = v100;
      int v18 = v17[24];

      *(_DWORD *)(a3 + 200) = v18;
    }

    *(_WORD *)(a3 + 208) |= 2u;
    id v19 = v6;
    while (1)
    {
      char v20 = v19;
      if (!v20) {
        break;
      }
      __int16 v21 = v20;
      int v22 = v20[29];

      if (v22 == 4)
      {
        uint64_t v27 = v8;
        LOWORD(buf[0]) = WORD2(v21) ^ WORD1(v21) ^ HIWORD(v21) ^ (unsigned __int16)v21;
        unsigned int v28 = nw_connection_get_event_milliseconds(v27, 5, 3, buf, 0LL);
        unsigned int v29 = nw_connection_get_event_milliseconds(v27, 5, 4, buf, 0LL);
        if (v29 == -1 || v28 == -1) {
          BOOL v31 = v29 != -1;
        }
        else {
          BOOL v31 = v28 >= v29;
        }

        if (v31) {
          __int16 v32 = 4;
        }
        else {
          __int16 v32 = 0;
        }
        *(_WORD *)(a3 + 20_Block_object_dispose(va, 8) = *(_WORD *)(a3 + 208) & 0xFFFB | v32;
        else {
          __int16 v33 = 0;
        }
        *(_WORD *)(a3 + 20_Block_object_dispose(va, 8) = *(_WORD *)(a3 + 208) & 0xFFEF | v33;
        goto LABEL_39;
      }

      __int16 v23 = v21;
      id v19 = v23[9];

      if (!v19) {
        goto LABEL_40;
      }
    }

    __nwlog_obj();
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_endpoint_handler_get_mode";
    v78 = (char *)_os_log_send_and_compose_impl();

    v110[0] = 16;
    LOBYTE(v105) = 0;
    if (__nwlog_fault(v78, v110, &v105))
    {
      if (v110[0] == 17)
      {
        id v79 = v78;
        __nwlog_obj();
        v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v81 = v110[0];
        if (os_log_type_enabled(v80, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v80, v81, "%{public}s called with null handler", (uint8_t *)buf, 0xCu);
        }

void sub_182537334( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25)
{
  _Unwind_Resume(a1);
}

void nw_connection_send_report_to_symptoms( NWConcrete_nw_connection *a1, netcore_stats_tcp_report *a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  char v5 = a1;
  if (nw_connection_get_symptom_reporter_handle::once != -1) {
    dispatch_once(&nw_connection_get_symptom_reporter_handle::once, &__block_literal_global_78285);
  }
  symptom_new();
  symptom_set_qualifier();
  symptom_set_additional_qualifier();
  if (a2->delegated)
  {
    __int128 v7 = 0uLL;
    nw_parameters_get_proc_uuid(v5->parameters, &v7);
    symptom_set_additional_qualifier();
    nw_parameters_get_pid(v5->parameters);
    symptom_set_qualifier();
    effective_bundle_id = (const char *)nw_parameters_get_effective_bundle_id(v5->parameters);
    if (effective_bundle_id)
    {
      strlen(effective_bundle_id);
      symptom_set_additional_qualifier();
    }
  }

  if (a3) {
    symptom_send_immediate();
  }
  else {
    symptom_send();
  }
}

void sub_1825374FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_stats_fill_in_nw_report_on_nw_queue( NWConcrete_nw_connection *a1, nw_connection_report_s *a2)
{
  uint64_t v427 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  v378 = v3;
  if (!a2)
  {
    __nwlog_obj();
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    v257 = (char *)_os_log_send_and_compose_impl();

    v425[0] = 16;
    LOBYTE(v389) = 0;
    if (__nwlog_fault(v257, v425, &v389))
    {
      if (v425[0] == 17)
      {
        __nwlog_obj();
        v258 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v259 = v425[0];
        if (os_log_type_enabled(v258, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v258, v259, "%{public}s called with null report", (uint8_t *)buf, 0xCu);
        }
      }

      else if ((_BYTE)v389)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v258 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v261 = v425[0];
        BOOL v262 = os_log_type_enabled(v258, (os_log_type_t)v425[0]);
        if (backtrace_string)
        {
          if (v262)
          {
            buf[0] = 136446466;
            *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            LOWORD(buf[3]) = 2082;
            *(void *)((char *)&buf[3] + 2) = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v258,  v261,  "%{public}s called with null report, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_393;
        }

        if (v262)
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v258,  v261,  "%{public}s called with null report, no backtrace",  (uint8_t *)buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v258 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v271 = v425[0];
        if (os_log_type_enabled(v258, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v258,  v271,  "%{public}s called with null report, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
        }
      }
    }

LABEL_412:
      goto LABEL_413;
    }

    __nwlog_obj();
    v263 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
    v264 = (char *)_os_log_send_and_compose_impl();

    v425[0] = 16;
    char v410 = 0;
    if (__nwlog_fault(v264, v425, &v410))
    {
      if (v425[0] == 17)
      {
        __nwlog_obj();
        v265 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v266 = v425[0];
        if (os_log_type_enabled(v265, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
          _os_log_impl(&dword_181A5C000, v265, v266, "%{public}s called with null connection", (uint8_t *)buf, 0xCu);
        }
      }

      else
      {
        if (v410)
        {
          v272 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v273 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v274 = v425[0];
          BOOL v275 = os_log_type_enabled(v273, (os_log_type_t)v425[0]);
          if (v272)
          {
            if (v275)
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v272;
              _os_log_impl( &dword_181A5C000,  v273,  v274,  "%{public}s called with null connection, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
            }

            free(v272);
          }

          else
          {
            if (v275)
            {
              buf[0] = 136446210;
              *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
              _os_log_impl( &dword_181A5C000,  v273,  v274,  "%{public}s called with null connection, no backtrace",  (uint8_t *)buf,  0xCu);
            }
          }

          goto LABEL_410;
        }

        __nwlog_obj();
        v265 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v288 = v425[0];
        if (os_log_type_enabled(v265, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
          _os_log_impl( &dword_181A5C000,  v265,  v288,  "%{public}s called with null connection, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
        }
      }
    }

LABEL_331:
  uint64_t v249 = (uint64_t)v381;
  v250 = v379;
  if (v381) {
    goto LABEL_418;
  }
LABEL_421:
  v292 = (unsigned int *)((char *)v131 + 1706);
  unint64_t v293 = *(_DWORD *)((char *)v131 + 1706) & 0xFFFFFBFF | ((unint64_t)*((unsigned __int16 *)v131 + 855) << 32) | v249;
  *(_DWORD *)((char *)v131 + 1706) = v293;
  if (v250)
  {
    v294 = (void *)nw_protocol_boringssl_copy_definition();
    v131->tls_milliseconds = nw_establishment_report_get_handshake_ms_for_protocol(v250, v294);

    unint64_t v293 = *v292 | ((unint64_t)*((unsigned __int16 *)v131 + 855) << 32);
    __int128 v131 = v382;
  }

  else
  {
    v131->tls_milliseconds = 0;
  }

  *((_WORD *)v292 + 2) = WORD2(v293);
  unsigned int *v292 = v293 & 0xFFFF7FFF | (((~(_WORD)v293 & 0x4400) == 0LL) << 15);
  v131->tls_version = nw_connection_get_tls_version(v126);
  BOOL v295 = networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_disable_tls13);
  int v296 = 2048;
  if (v295) {
    int v296 = 0;
  }
  unint64_t v297 = *v292 & 0xFFFFF7FF | ((unint64_t)*((unsigned __int16 *)v292 + 2) << 32);
  unsigned int *v292 = *v292 & 0xFFFFF7FF | v296;
  *((_WORD *)v292 + 2) = WORD2(v297);
  v298 = (void *)nw_protocol_boringssl_copy_definition();
  v376 = nw_parameters_copy_protocol_options_for_definition(v381, v298);

  if (v376)
  {
    v299 = v376;
    BOOL enable_encrypted_client_hello = sec_protocol_options_get_enable_encrypted_client_hello(v299);
    uint64_t v301 = 0x10000000000LL;
    if (!enable_encrypted_client_hello) {
      uint64_t v301 = 0LL;
    }
    unint64_t v302 = (*v292 | ((unint64_t)*((unsigned __int16 *)v292 + 2) << 32)) & 0xFFFFFEFFFFFFFFFFLL;
    unsigned int *v292 = *v292;
    *((_WORD *)v292 + 2) = (v302 | v301) >> 32;
  }

  if ((*v292 & 0x400) != 0)
  {
    v303 = v126;
    v304 = v303;
    if (v303->used_timestamps)
    {
      unint64_t v305 = 0LL;
      v306 = v303->timestamps;
      v307 = &v306->var1.event;
      while (*v307 != 5 || *(v307 - 1) != 5)
      {
        ++v305;
        v307 += 8;
        if (v305 >= v303->used_timestamps) {
          goto LABEL_438;
        }
      }

      unint64_t v308 = nw_delta_nanos(v303->start_time, *(&v306->var0 + 2 * v305));
    }

    else
    {
LABEL_438:
    }
  }

  v309 = v126;
  uint64_t v310 = 0LL;
  do
  {
    uint64_t v311 = v310;
    if ((_DWORD)v310 == 255) {
      break;
    }
    v312 = v309;
    if (!v309)
    {
      __nwlog_obj();
      v320 = (void *)objc_claimAutoreleasedReturnValue();
      buf[0] = 136446210;
      *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
      v321 = (char *)_os_log_send_and_compose_impl();

      v425[0] = 16;
      char v410 = 0;
      if (__nwlog_fault(v321, v425, &v410))
      {
        if (v425[0] == 17)
        {
          __nwlog_obj();
          v322 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v323 = v425[0];
          if (os_log_type_enabled(v322, (os_log_type_t)v425[0]))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl(&dword_181A5C000, v322, v323, "%{public}s called with null connection", (uint8_t *)buf, 0xCu);
          }
        }

        else
        {
          if (v410)
          {
            v324 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v325 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v326 = v425[0];
            BOOL v327 = os_log_type_enabled(v325, (os_log_type_t)v425[0]);
            if (v324)
            {
              if (v327)
              {
                buf[0] = 136446466;
                *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
                LOWORD(buf[3]) = 2082;
                *(void *)((char *)&buf[3] + 2) = v324;
                _os_log_impl( &dword_181A5C000,  v325,  v326,  "%{public}s called with null connection, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
              }

              free(v324);
            }

            else
            {
              if (v327)
              {
                buf[0] = 136446210;
                *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
                _os_log_impl( &dword_181A5C000,  v325,  v326,  "%{public}s called with null connection, no backtrace",  (uint8_t *)buf,  0xCu);
              }
            }

            goto LABEL_469;
          }

          __nwlog_obj();
          v322 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v328 = v425[0];
          if (os_log_type_enabled(v322, (os_log_type_t)v425[0]))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl( &dword_181A5C000,  v322,  v328,  "%{public}s called with null connection, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
          }
        }
      }

      if (v210) {
        free(v210);
      }
      int v21 = 0LL;
      if (!v34) {
        goto LABEL_287;
      }
LABEL_237:
      os_release(v34);
LABEL_287:
      _Block_object_dispose(&v308, 8);
      _Block_object_dispose(&v312, 8);
      return v21;
    }
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  uint64_t v25 = (os_log_s *)gconnectionLogObj;
  if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
    return 0LL;
  }
  int v26 = *((_DWORD *)handle + 92);
  *(_DWORD *)buf = 136447490;
  uint64_t v317 = "nw_protocol_http2_get_input_frames";
  uint64_t v318 = 2082;
  v319 = handle + 390;
  v320 = 2080;
  v321 = (uint64_t)" ";
  v322 = 1024;
  *(_DWORD *)os_log_type_t v323 = v26;
  *(_WORD *)&v323[4] = 1042;
  *(_DWORD *)&v323[6] = 16;
  *(_WORD *)&v323[10] = 2098;
  *(void *)&v323[12] = a2;
  _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> can't find hash table entry for %{public,uuid_t}.16P",  buf,  0x36u);
  return 0LL;
}

                  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0
                    && *((_BYTE *)v8 + 1537))
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    id v215 = (os_log_s *)gconnectionLogObj;
                    unsigned int v8 = &qword_18C45F000;
                    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      v217 = *(_DWORD *)(a3 + 176);
                      v216 = *(_DWORD *)(a3 + 180);
                      LODWORD(buf[0]) = 136447234;
                      *(void *)((char *)buf + 4) = "nw_http2_submit_headers";
                      WORD2(buf[1]) = 2082;
                      *(void *)((char *)&buf[1] + 6) = a3 + 191;
                      HIWORD(buf[2]) = 2080;
                      *(void *)&v370 = " ";
                      WORD4(v370) = 1024;
                      *(_DWORD *)((char *)&v370 + 10) = v216;
                      HIWORD(v370) = 1024;
                      LODWORD(v371[0]) = v217;
                      _os_log_impl( &dword_181A5C000,  v215,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> failed to handle new stream id",  (uint8_t *)buf,  0x2Cu);
                    }
                  }

                  goto LABEL_149;
                }

                *(_DWORD *)(a3 + 176) = v104;
                if (!nw_http2_add_to_id_table(a1, a3, (uint64_t)a2))
                {
                  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    int64x2_t v194 = (os_log_s *)gconnectionLogObj;
                    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                    {
                      int64x2_t v196 = *(_DWORD *)(a3 + 176);
                      int32x4_t v195 = *(_DWORD *)(a3 + 180);
                      LODWORD(buf[0]) = 136447234;
                      *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                      WORD2(buf[1]) = 2082;
                      *(void *)((char *)&buf[1] + 6) = a3 + 191;
                      HIWORD(buf[2]) = 2080;
                      *(void *)&v370 = " ";
                      WORD4(v370) = 1024;
                      *(_DWORD *)((char *)&v370 + 10) = v195;
                      HIWORD(v370) = 1024;
                      LODWORD(v371[0]) = v196;
                      _os_log_impl( &dword_181A5C000,  v194,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> Failed to add new stream to the id based hash table",  (uint8_t *)buf,  0x2Cu);
                    }
                  }

                  *(_DWORD *)(a3 + 176) = -1;
                  goto LABEL_331;
                }

                __int128 v126 = *(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16);
              }

              else if (v125 > 0)
              {
LABEL_179:
                if ((v126 & 0x80000) == 0 && *((_BYTE *)v8 + 1537))
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  uint64_t v310 = (os_log_s *)gconnectionLogObj;
                  unsigned int v8 = &qword_18C45F000;
                  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    v312 = *(_DWORD *)(a3 + 176);
                    uint64_t v311 = *(_DWORD *)(a3 + 180);
                    if ((*(_WORD *)(a1 + 388) & 0x80) != 0) {
                      v313 = "response";
                    }
                    else {
                      v313 = "request";
                    }
                    LODWORD(buf[0]) = 136447746;
                    *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                    WORD2(buf[1]) = 2082;
                    *(void *)((char *)&buf[1] + 6) = a3 + 191;
                    HIWORD(buf[2]) = 2080;
                    *(void *)&v370 = " ";
                    WORD4(v370) = 1024;
                    *(_DWORD *)((char *)&v370 + 10) = v311;
                    HIWORD(v370) = 1024;
                    LODWORD(v371[0]) = v312;
                    WORD2(v371[0]) = 2080;
                    *(void **)((char *)v371 + 6) = (void *)v313;
                    HIWORD(v371[1]) = 1024;
                    LODWORD(v371[2]) = v312;
                    _os_log_impl( &dword_181A5C000,  v310,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> %s headers submitted on stream %d",  (uint8_t *)buf,  0x3Cu);
                  }
                }

                if (a4)
                {
                  __int128 v127 = *(_DWORD *)(a4 + 52);
                  if (v127 && v127 != *(_DWORD *)(a4 + 56) + *(_DWORD *)(a4 + 60))
                  {
                    int v10 = *(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16);
                    goto LABEL_185;
                  }

                  goto LABEL_35;
                }

                __nwlog_obj();
                LODWORD(buf[0]) = 136446210;
                *(void *)((char *)buf + 4) = "__nw_frame_unclaimed_length";
                v306 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(v374[0]) = 16;
                LOBYTE(v366[0]) = 0;
                if (__nwlog_fault(v306, v374, v366))
                {
                  if (LOBYTE(v374[0]) == 17)
                  {
                    v307 = (os_log_s *)__nwlog_obj();
                    unint64_t v308 = v374[0];
                    if (os_log_type_enabled(v307, v374[0]))
                    {
                      LODWORD(buf[0]) = 136446210;
                      *(void *)((char *)buf + 4) = "__nw_frame_unclaimed_length";
                      v309 = "%{public}s called with null frame";
LABEL_616:
                      _os_log_impl(&dword_181A5C000, v307, v308, v309, (uint8_t *)buf, 0xCu);
                    }
                  }

                  else if (LOBYTE(v366[0]))
                  {
                    uint64_t v330 = (char *)__nw_create_backtrace_string();
                    v307 = (os_log_s *)__nwlog_obj();
                    unint64_t v308 = v374[0];
                    uint64_t v331 = os_log_type_enabled(v307, v374[0]);
                    if (v330)
                    {
                      if (v331)
                      {
                        LODWORD(buf[0]) = 136446466;
                        *(void *)((char *)buf + 4) = "__nw_frame_unclaimed_length";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = v330;
                        _os_log_impl( &dword_181A5C000,  v307,  v308,  "%{public}s called with null frame, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
                      }

                      free(v330);
                      goto LABEL_617;
                    }

                    if (v331)
                    {
                      LODWORD(buf[0]) = 136446210;
                      *(void *)((char *)buf + 4) = "__nw_frame_unclaimed_length";
                      v309 = "%{public}s called with null frame, no backtrace";
                      goto LABEL_616;
                    }
                  }

                  else
                  {
                    v307 = (os_log_s *)__nwlog_obj();
                    unint64_t v308 = v374[0];
                    if (os_log_type_enabled(v307, v374[0]))
                    {
                      LODWORD(buf[0]) = 136446210;
                      *(void *)((char *)buf + 4) = "__nw_frame_unclaimed_length";
                      v309 = "%{public}s called with null frame, backtrace limit exceeded";
                      goto LABEL_616;
                    }
                  }
                }

void sub_18253AFB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45)
{
  _Unwind_Resume(a1);
}

uint64_t nw_report_excessive_data_usage_event(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (v5)
  {
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (v6)
    {
      __int128 v7 = (id *)v5;
      id v8 = v7[1];

      if (!v8)
      {
        pid_t v23 = v7[2];
        if (!v23 || nw_path_parameters_get_logging_disabled(v23[13]))
        {
          uint64_t effective_process_name = 0LL;
          goto LABEL_77;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v10 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          int v24 = *((_DWORD *)v7 + 112);
          *(_DWORD *)buf = 136446466;
          char v62 = "nw_report_excessive_data_usage_event";
          __int16 v63 = 1024;
          LODWORD(v64) = v24;
          _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Connection has no remote endpoint",  buf,  0x12u);
        }

        uint64_t effective_process_name = 0LL;
LABEL_76:

LABEL_77:
        goto LABEL_78;
      }

      nw_path_t v9 = nw_connection_copy_current_path((nw_connection_t)v7);
      int v10 = v9;
      if (v9)
      {
        id v11 = nw_path_copy_interface(v9);
        if (!v11)
        {
          unint64_t v30 = v7[2];
          if (v30 && !nw_path_parameters_get_logging_disabled(v30[13]))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            BOOL v31 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              int v32 = *((_DWORD *)v7 + 112);
              *(_DWORD *)buf = 136446466;
              char v62 = "nw_report_excessive_data_usage_event";
              __int16 v63 = 1024;
              LODWORD(v64) = v32;
              _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Connection has no interface",  buf,  0x12u);
            }
          }

          id v11 = 0LL;
          uint64_t effective_process_name = 0LL;
          goto LABEL_75;
        }

        if (nw_utilities_get_self_name::onceToken != -1) {
          dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44151);
        }
        os_log_type_t v12 = (const char *)nw_utilities_get_self_name::name;
        if (nw_utilities_get_self_name::name)
        {
          uint64_t v13 = v7;
          id v14 = v13[2];
          uint64_t v58 = (NWConcrete_nw_connection *)v13;

          uint64_t effective_process_name = nw_parameters_get_effective_process_name(v14);
          if (effective_process_name)
          {
            char v55 = (const char *)effective_process_name;
            uint64_t v16 = (unsigned int *)v11;
            uint64_t v17 = v16[24];

            else {
              int v18 = off_189BC9540[v17];
            }
            string = (char *)v18;
            os_log_type_t v34 = v16;
            int v35 = v34[25];
            unsigned int v54 = v34;

            if (v35 <= 1001)
            {
              if (!v35)
              {
                os_log_type_t v36 = "other";
                goto LABEL_67;
              }

              if (v35 == 1001)
              {
                os_log_type_t v36 = "wifi_infrastructure";
                goto LABEL_67;
              }
            }

            else
            {
              switch(v35)
              {
                case 1002:
                  os_log_type_t v36 = "wifi_awdl";
                  goto LABEL_67;
                case 4001:
                  os_log_type_t v36 = "coprocessor";
                  goto LABEL_67;
                case 5001:
                  os_log_type_t v36 = "companion";
LABEL_67:
                  int8x16_t v56 = (char *)v36;
                  xpc_dictionary_set_uint64(v6, "bytes_in", a2);
                  xpc_dictionary_set_uint64(v6, "bytes_out", a3);
                  xpc_dictionary_set_string(v6, "bundle_id", v12);
                  xpc_dictionary_set_string(v6, "effective_bundle_id", v55);
                  xpc_dictionary_set_string(v6, "interface_type", string);
                  xpc_dictionary_set_string(v6, "interface_subtype", v56);
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  unsigned int v37 = (os_log_s *)(id)gLogObj;
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446722;
                    char v62 = "nw_report_excessive_data_usage_event";
                    __int16 v63 = 2048;
                    uint64_t v64 = a2;
                    __int16 v65 = 2048;
                    uint64_t v66 = a3;
                    _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s Excessive data usage detected, bytes in/out: %llu/%llu",  buf,  0x20u);
                  }

                  if (os_variant_has_internal_diagnostics()
                    && nw_connection_stats_get_apple_host(v58))
                  {
                    description = nw_endpoint_get_description(v8);
                    xpc_dictionary_set_string(v6, "endpoint", description);
                    __nwlog_obj();
                    unint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                    {
                      id v41 = nw_connection_copy_connected_local_endpoint(v58);
                      int v42 = nw_endpoint_get_description(v41);
                      id v43 = nw_connection_copy_connected_remote_endpoint(v58);
                      logging_description = nw_endpoint_get_logging_description(v43);
                      *(_DWORD *)buf = 136447234;
                      char v62 = "nw_report_excessive_data_usage_event";
                      __int16 v63 = 2082;
                      uint64_t v64 = (uint64_t)v42;
                      __int16 v65 = 2082;
                      uint64_t v66 = (uint64_t)logging_description;
                      __int16 v67 = 2080;
                      uint64_t v68 = string;
                      __int16 v69 = 2080;
                      unsigned int v70 = v56;
                      _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEBUG,  "%{public}s Excessive data usage event: %{public}s<->%{public}s, interface: %s, subtype: %s",  buf,  0x34u);
                    }
                  }

                  analytics_send_event_delayInitStub(v38);
                  uint64_t effective_process_name = 1LL;
                  id v11 = v54;
                  goto LABEL_75;
              }
            }

            os_log_type_t v36 = "unknown";
            goto LABEL_67;
          }

void sub_18253BC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_log_summary_on_nw_queue(NWConcrete_nw_connection *a1)
{
  v410[2] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_context_assert_queue(v1->context);
  uint64_t v2 = nw_endpoint_handler_copy_connected_flow_handler(v1->parent_endpoint_handler);
  if (v2)
  {
    char v3 = 0;
    LOWORD(v4) = 0;
    int v5 = 0;
    int v6 = 0;
    int privacy_stance = v1->privacy_stance;
    v383 = "?";
    do
    {
      unint64_t v9 = v2;
      int v10 = *(_DWORD *)(v9 + 116);

      if (v10 == 2 && (unsigned __int16)v4 == 0)
      {
        char v3 = nw_endpoint_handler_stack_uses_tls(v1->parent_endpoint_handler);
        os_log_type_t v12 = (id *)(id)v9;
        id v13 = v12[4];

        if (v13)
        {
          int ip_protocol = nw_parameters_get_ip_protocol(v13);
          unint64_t v15 = "QUIC";
          if (nw_parameters_get_upper_transport_protocol(v13) != 253)
          {
            if (ip_protocol == 17)
            {
              unint64_t v15 = "UDP";
            }

            else
            {
              unint64_t v15 = v383;
              if (ip_protocol == 6)
              {
                if (nw_connection_uses_multipath(v1)) {
                  unint64_t v15 = "MPTCP";
                }
                else {
                  unint64_t v15 = "TCP";
                }
              }
            }
          }
        }

        else
        {
          unint64_t v15 = v383;
        }

        int v4 = HIDWORD(v9) ^ (v9 >> 16) ^ HIWORD(v9) ^ v9;

        v383 = v15;
      }

      uint64_t v16 = (NWConcrete_nw_endpoint_handler *)(id)v9;
      int v17 = *(_DWORD *)(v9 + 116);

      if (v17 == 1)
      {
        int v18 = nw_endpoint_handler_copy_endpoint(v16);
        nw_endpoint_type_t type = nw_endpoint_get_type(v18);

        if (type != nw_endpoint_type_host || v5)
        {
          int v7 = (unsigned __int16)(WORD2(v16) ^ WORD1(v16) ^ HIWORD(v16) ^ (unsigned __int16)v16);
          if (v6) {
            int v7 = v6;
          }
        }

        else
        {
          int v5 = (unsigned __int16)(WORD2(v16) ^ WORD1(v16) ^ HIWORD(v16) ^ (unsigned __int16)v16);
        }
      }

      id v8 = v16;
      uint64_t v2 = (NWConcrete_nw_endpoint_handler *)v8[9];
    }

    while (v2);
    unsigned int used_timestamps = v1->used_timestamps;
    if (v1->used_timestamps)
    {
      uint64_t v21 = 0LL;
      unint64_t v22 = 0LL;
      unsigned int v382 = -1;
      LODWORD(v379) = -1;
      unsigned int v371 = -1;
      unsigned int v372 = -1;
      LODWORD(v373) = -1;
      while (1)
      {
        timestamps = v1->timestamps;
        int v24 = *(unsigned __int16 *)((char *)&timestamps->var1.domain + v21);
        if (v24 == 3) {
          break;
        }
        if (v24 == 2)
        {
          uint64_t v25 = v1;
          nw_context_assert_queue(v1->context);
          switch(*(unsigned __int16 *)((char *)&timestamps->var1.event + v21))
          {
            case 1u:
              if (v5)
              {
              }

              else
              {
                int v5 = *(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21);
              }

              unint64_t v35 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
              unint64_t v36 = v35 / 0xF4240;
              if (v35 > 0xF423FFFFFFFFFLL) {
                LODWORD(v36) = -1;
              }
              unsigned int v372 = v36;
              goto LABEL_80;
            case 2u:
              if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) == v5 && (_DWORD)v379 == -1)
              {
                if (v372 == -1)
                {
                  LODWORD(v379) = -1;
                  unsigned int v372 = -1;
                }

                else
                {
                  unint64_t v28 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
                  unint64_t v29 = v28 / 0xF4240;
                  if (v28 > 0xF423FFFFFFFFFLL) {
                    LODWORD(v29) = -1;
                  }
                  uint64_t v379 = v29 - v372;
                  if (v29 < v372)
                  {
                    if (gLogDatapath)
                    {
                      __nwlog_obj();
                      int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446978;
                        *(void *)v388 = "nw_connection_log_summary_resolver_on_nw_queue";
                        *(_WORD *)&v388[8] = 2082;
                        *(void *)&v388[10] = "dns->receive";
                        *(_WORD *)&v388[18] = 2048;
                        *(void *)&v388[20] = v372;
                        *(_WORD *)&v388[28] = 2048;
                        *(void *)uint64_t v389 = v379;
                        _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
                      }

                      LODWORD(v379) = 0;
                      goto LABEL_87;
                    }

                    LODWORD(v379) = 0;
                  }
                }
              }

              goto LABEL_80;
            case 3u:
              if (!v6)
              {
                int v6 = *(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21);
LABEL_75:
                unint64_t v37 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
                unint64_t v38 = v37 / 0xF4240;
                if (v37 > 0xF423FFFFFFFFFLL) {
                  LODWORD(v3_Block_object_dispose(va, 8) = -1;
                }
                goto LABEL_79;
              }

              break;
            case 4u:
              if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) == v6 && (_DWORD)v373 == -1)
              {
                if (v371 == -1)
                {
                  LODWORD(v373) = -1;
                  LODWORD(v3_Block_object_dispose(va, 8) = -1;
LABEL_79:
                  unsigned int v371 = v38;
                }

                else
                {
                  unint64_t v31 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
                  unint64_t v32 = v31 / 0xF4240;
                  if (v31 > 0xF423FFFFFFFFFLL) {
                    LODWORD(v32) = -1;
                  }
                  uint64_t v373 = v32 - v371;
                  if (v32 < v371)
                  {
                    if (gLogDatapath)
                    {
                      __nwlog_obj();
                      int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446978;
                        *(void *)v388 = "nw_connection_log_summary_resolver_on_nw_queue";
                        *(_WORD *)&v388[8] = 2082;
                        *(void *)&v388[10] = "bonjour->receive";
                        *(_WORD *)&v388[18] = 2048;
                        *(void *)&v388[20] = v371;
                        *(_WORD *)&v388[28] = 2048;
                        *(void *)uint64_t v389 = v373;
                        _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
                      }

                      LODWORD(v373) = 0;
LABEL_87:
                    }

                    else
                    {
                      LODWORD(v373) = 0;
                    }
                  }
                }
              }

              goto LABEL_80;
            default:
              goto LABEL_80;
          }

          goto LABEL_80;
        }

void sub_18253FEF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_get_transport_connect_milliseconds(NWConcrete_nw_connection *a1, __int16 a2, char a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  int v5 = a1;
  __int16 v13 = a2;
  LODWORD(v6) = nw_connection_get_event_milliseconds(v5, 3, 6, &v13, 0LL);
  if ((_DWORD)v6 == -1)
  {
    LODWORD(v6) = nw_connection_get_event_milliseconds(v5, 3, 13, &v13, 0LL);
    if ((_DWORD)v6 == -1)
    {
LABEL_9:
      uint64_t v6 = 0LL;
      goto LABEL_10;
    }
  }

  unsigned int event_milliseconds = nw_connection_get_event_milliseconds(v5, 3, 5, &v13, 0LL);
  if (event_milliseconds == -1) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = event_milliseconds;
  }
  if ((a3 & 1) == 0)
  {
    unsigned int v8 = nw_connection_get_event_milliseconds(v5, 3, 3, &v13, 0LL);
    BOOL v9 = v6 >= v8;
    uint64_t v6 = v6 - v8;
    if (!v9)
    {
      if (gLogDatapath)
      {
        unsigned int v12 = v8;
        __nwlog_obj();
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          unint64_t v15 = "nw_connection_get_transport_connect_milliseconds";
          __int16 v16 = 2082;
          int v17 = "connect_finish";
          __int16 v18 = 2048;
          uint64_t v19 = v12;
          __int16 v20 = 2048;
          uint64_t v21 = v6;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
        }
      }

      goto LABEL_9;
    }
  }

uint64_t nw_connection_get_tls_version(NWConcrete_nw_connection *a1)
{
  id v1 = a1;
  uint64_t v2 = (nw_protocol_definition *)nw_protocol_boringssl_copy_definition();
  nw_protocol_metadata_t v3 = nw_connection_copy_protocol_metadata((nw_connection_t)v1, v2);

  if (v3)
  {
    int v4 = v3;
    int negotiated_tls_protocol_version = sec_protocol_metadata_get_negotiated_tls_protocol_version(v4);
    uint64_t v6 = 2LL;
    switch(negotiated_tls_protocol_version)
    {
      case 769:
        break;
      case 770:
        uint64_t v6 = 3LL;
        break;
      case 771:
        uint64_t v6 = 4LL;
        break;
      case 772:
        uint64_t v6 = 5LL;
        break;
      default:
        if (negotiated_tls_protocol_version == 65277)
        {
          uint64_t v6 = 7LL;
        }

        else if (negotiated_tls_protocol_version == 65279)
        {
          uint64_t v6 = 6LL;
        }

        else
        {
          uint64_t v6 = 0LL;
        }

        break;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

void sub_1825403A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_stats_get_apple_host(NWConcrete_nw_connection *a1)
{
  id v1 = a1;
  endpoint = v1->endpoint;
  if (!endpoint || (v3 = endpoint, int v4 = -[OS_nw_endpoint type](v3, "type"), v3, v4 != 2))
  {
LABEL_21:
    uint64_t v6 = 0LL;
    goto LABEL_22;
  }

  hostname = nw_endpoint_get_hostname(v1->endpoint);
  uint64_t v6 = (uint64_t)hostname;
  if (hostname)
  {
    size_t v7 = strlen(hostname);
    unint64_t v8 = v7;
    if (v7 >= 0x12 && !strncmp((const char *)(v7 + v6 - 18), ".pancake.apple.com", 0x12uLL)
      || !strcmp((const char *)v6, "pancake.apple.com"))
    {
      uint64_t v6 = 5LL;
      goto LABEL_22;
    }

    if (v8 >= 0x15 && !strncmp((const char *)(v8 + v6 - 21), ".clientflow.apple.com", 0x15uLL)
      || !strcmp((const char *)v6, "clientflow.apple.com"))
    {
      uint64_t v6 = 6LL;
      goto LABEL_22;
    }

    if (v8 >= 0xA && !strncmp((const char *)(v8 + v6 - 10), ".apple.com", 0xAuLL)
      || !strcmp((const char *)v6, "apple.com"))
    {
      uint64_t v6 = 1LL;
      goto LABEL_22;
    }

    if (nw_connection_stats_hostname_has_suffix((const char *)v6, ".icloud.com")
      || !strcmp((const char *)v6, "icloud.com")
      || nw_connection_stats_hostname_has_suffix((const char *)v6, ".icloud-content.com")
      || !strcmp((const char *)v6, "icloud-content.com"))
    {
      uint64_t v6 = 2LL;
      goto LABEL_22;
    }

    if (nw_connection_stats_hostname_has_suffix((const char *)v6, ".mzstatic.com")
      || !strcmp((const char *)v6, "mzstatic.com"))
    {
      uint64_t v6 = 3LL;
      goto LABEL_22;
    }

    if (nw_connection_stats_hostname_has_suffix((const char *)v6, ".me.com") || !strcmp((const char *)v6, "me.com"))
    {
      uint64_t v6 = 4LL;
      goto LABEL_22;
    }

    goto LABEL_21;
  }

void sub_1825405BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_connection_stats_hostname_has_suffix(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  size_t v5 = strlen(a2);
  return v4 >= v5 && strncmp(&a1[v4 - v5], a2, v5) == 0;
}

uint64_t nw_connection_stats_get_apple_app_for_string(const char *a1)
{
  if (!strcmp(a1, "com.apple.MobileSMS")) {
    return 1LL;
  }
  if (!strcmp(a1, "com.apple.mobilesafari")) {
    return 2LL;
  }
  if (!strcmp(a1, "com.apple.mobilemail")) {
    return 3LL;
  }
  if (!strcmp(a1, "com.apple.Maps")) {
    return 4LL;
  }
  if (!strcmp(a1, "com.apple.mobileslideshow")) {
    return 5LL;
  }
  if (!strcmp(a1, "com.apple.Music")) {
    return 6LL;
  }
  if (!strcmp(a1, "com.apple.AppStore")) {
    return 7LL;
  }
  if (!strcmp(a1, "com.apple.MobileStore")) {
    return 8LL;
  }
  if (!strcmp(a1, "com.apple.assistantd")) {
    return 9LL;
  }
  return 0LL;
}

uint64_t ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2;
  v4[3] = &__block_descriptor_40_e9_B16__0r_8l;
  void v4[4] = *(void *)(a1 + 32);
  nw_resolver_config_enumerate_name_servers(a3, v4);
  return 1LL;
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_43( uint64_t a1, void *a2)
{
  nw_protocol_metadata_t v3 = a2;
  size_t v4 = v3;
  unint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v5 <= 1)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v11 = v3;
    hostname = nw_endpoint_get_hostname(v3);
    size_t v4 = v11;
    if (hostname)
    {
      unint64_t v8 = (_BYTE *)(v6 + (v5 << 6) + 2272);
      uint64_t v9 = 64LL;
      while (1)
      {
        int v10 = *(unsigned __int8 *)hostname;
        _BYTE *v8 = v10;
        if (!v10) {
          break;
        }
        ++v8;
        ++hostname;
        if ((unint64_t)--v9 <= 1)
        {
          _BYTE *v8 = 0;
          break;
        }
      }

      ++*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    }
  }
}

void sub_18254084C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2_44( uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  id v18 = v3;
  if (!v3)
  {
    __nwlog_obj();
    int v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_endpoint_handler_get_proxy_result";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v11, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unsigned int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_endpoint_handler_get_proxy_result";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v22 = "nw_endpoint_handler_get_proxy_result";
            __int16 v23 = 2082;
            int v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }

        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_endpoint_handler_get_proxy_result";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unsigned int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_endpoint_handler_get_proxy_result";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182540BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_3( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  id v7 = a2;
  uint64_t v8 = a1[6];
  unsigned int v9 = *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL);
  char identifier = (unsigned __int8 *)nw_protocol_definition_get_identifier(v7);
  id v11 = (_DWORD *)(v8 + 56LL * v9 + 1712);
  if (!identifier)
  {
    *(_BYTE *)(v8 + 56LL * v9 + 171_Block_object_dispose(va, 8) = 110;
    *(_WORD *)(v8 + 56LL * v9 + 1716) = 30575;
    *id v11 = 1852534389;
    uint64_t v43 = 7LL;
    goto LABEL_35;
  }

  int v12 = *identifier;
  *(_BYTE *)id v11 = v12;
  if (v12)
  {
    int v13 = identifier[1];
    *(_BYTE *)(v8 + 56LL * v9 + 1713) = v13;
    if (v13)
    {
      int v14 = identifier[2];
      *(_BYTE *)(v8 + 56LL * v9 + 1714) = v14;
      if (v14)
      {
        int v15 = identifier[3];
        *(_BYTE *)(v8 + 56LL * v9 + 1715) = v15;
        if (v15)
        {
          int v16 = identifier[4];
          *(_BYTE *)(v8 + 56LL * v9 + 1716) = v16;
          if (v16)
          {
            int v17 = identifier[5];
            *(_BYTE *)(v8 + 56LL * v9 + 1717) = v17;
            if (v17)
            {
              int v18 = identifier[6];
              *(_BYTE *)(v8 + 56LL * v9 + 171_Block_object_dispose(va, 8) = v18;
              if (v18)
              {
                int v19 = identifier[7];
                *(_BYTE *)(v8 + 56LL * v9 + 1719) = v19;
                if (v19)
                {
                  int v20 = identifier[8];
                  *(_BYTE *)(v8 + 56LL * v9 + 1720) = v20;
                  if (v20)
                  {
                    int v21 = identifier[9];
                    *(_BYTE *)(v8 + 56LL * v9 + 1721) = v21;
                    if (v21)
                    {
                      int v22 = identifier[10];
                      *(_BYTE *)(v8 + 56LL * v9 + 1722) = v22;
                      if (v22)
                      {
                        int v23 = identifier[11];
                        *(_BYTE *)(v8 + 56LL * v9 + 1723) = v23;
                        if (v23)
                        {
                          int v24 = identifier[12];
                          *(_BYTE *)(v8 + 56LL * v9 + 1724) = v24;
                          if (v24)
                          {
                            int v25 = identifier[13];
                            *(_BYTE *)(v8 + 56LL * v9 + 1725) = v25;
                            if (v25)
                            {
                              int v26 = identifier[14];
                              *(_BYTE *)(v8 + 56LL * v9 + 1726) = v26;
                              if (v26)
                              {
                                int v27 = identifier[15];
                                *(_BYTE *)(v8 + 56LL * v9 + 1727) = v27;
                                if (v27)
                                {
                                  int v28 = identifier[16];
                                  *(_BYTE *)(v8 + 56LL * v9 + 172_Block_object_dispose(va, 8) = v28;
                                  if (v28)
                                  {
                                    int v29 = identifier[17];
                                    *(_BYTE *)(v8 + 56LL * v9 + 1729) = v29;
                                    if (v29)
                                    {
                                      int v30 = identifier[18];
                                      *(_BYTE *)(v8 + 56LL * v9 + 1730) = v30;
                                      if (v30)
                                      {
                                        int v31 = identifier[19];
                                        *(_BYTE *)(v8 + 56LL * v9 + 1731) = v31;
                                        if (v31)
                                        {
                                          int v32 = identifier[20];
                                          *(_BYTE *)(v8 + 56LL * v9 + 1732) = v32;
                                          if (v32)
                                          {
                                            int v33 = identifier[21];
                                            *(_BYTE *)(v8 + 56LL * v9 + 1733) = v33;
                                            if (v33)
                                            {
                                              int v34 = identifier[22];
                                              *(_BYTE *)(v8 + 56LL * v9 + 1734) = v34;
                                              if (v34)
                                              {
                                                int v35 = identifier[23];
                                                *(_BYTE *)(v8 + 56LL * v9 + 1735) = v35;
                                                if (v35)
                                                {
                                                  int v36 = identifier[24];
                                                  *(_BYTE *)(v8 + 56LL * v9 + 1736) = v36;
                                                  if (v36)
                                                  {
                                                    int v37 = identifier[25];
                                                    *(_BYTE *)(v8 + 56LL * v9 + 1737) = v37;
                                                    if (v37)
                                                    {
                                                      int v38 = identifier[26];
                                                      *(_BYTE *)(v8 + 56LL * v9 + 173_Block_object_dispose(va, 8) = v38;
                                                      if (v38)
                                                      {
                                                        int v39 = identifier[27];
                                                        *(_BYTE *)(v8 + 56LL * v9 + 1739) = v39;
                                                        if (v39)
                                                        {
                                                          int v40 = identifier[28];
                                                          *(_BYTE *)(v8 + 56LL * v9 + 1740) = v40;
                                                          if (v40)
                                                          {
                                                            int v41 = identifier[29];
                                                            *(_BYTE *)(v8 + 56LL * v9 + 1741) = v41;
                                                            if (v41)
                                                            {
                                                              int v42 = identifier[30];
                                                              *(_BYTE *)(v8 + 56LL * v9 + 1742) = v42;
                                                              if (v42)
                                                              {
                                                                uint64_t v43 = 31LL;
LABEL_35:
                                                                *((_BYTE *)v11 + v43) = 0;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  uint64_t v44 = v8 + 56LL * v9;
  *(_DWORD *)(v44 + 1760) = *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL);
  *(void *)(v44 + 1744) = a3;
  *(void *)(v44 + 1752) = a4;
  uint64_t v45 = *(void *)(a1[5] + 8LL);
  unsigned int v46 = *(unsigned __int8 *)(v45 + 24);
  if (v46 > 8)
  {
    uint64_t v47 = *(void *)(a1[4] + 16LL);
    if (v47 && !nw_path_parameters_get_logging_disabled(*(void *)(v47 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unint64_t v48 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        int v49 = *(_DWORD *)(a1[4] + 448LL);
        int v51 = 136446466;
        uint64_t v52 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke_3";
        __int16 v53 = 1024;
        int v54 = v49;
        _os_log_impl( &dword_181A5C000,  v48,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] max protocol establishment reports, stopping",  (uint8_t *)&v51,  0x12u);
      }
    }
  }

  else
  {
    *(_BYTE *)(v45 + 24) = v46 + 1;
  }

  return v46 < 9;
}

uint64_t ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_46( void *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  uint64_t v4 = a1[6];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL);
  hostname = nw_endpoint_get_hostname(v3);
  if (hostname)
  {
    id v7 = (_BYTE *)(v4 + (v5 << 6) + 2272);
    uint64_t v8 = 64LL;
    while (1)
    {
      int v9 = *(unsigned __int8 *)hostname;
      _BYTE *v7 = v9;
      if (!v9) {
        break;
      }
      ++v7;
      ++hostname;
      if ((unint64_t)--v8 <= 1)
      {
        _BYTE *v7 = 0;
        break;
      }
    }

    uint64_t v10 = *(void *)(a1[5] + 8LL);
    if (*(_BYTE *)(v10 + 24))
    {
      uint64_t v11 = *(void *)(a1[4] + 16LL);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v12 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v13 = *(_DWORD *)(a1[4] + 448LL);
          int v16 = 136446466;
          int v17 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
          __int16 v18 = 1024;
          int v19 = v13;
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] max proxy hops, stopping",  (uint8_t *)&v16,  0x12u);
        }
      }

      uint64_t v14 = 0LL;
    }

    else
    {
      uint64_t v14 = 1LL;
      *(_BYTE *)(v10 + 24) = 1;
    }
  }

  else
  {
    uint64_t v14 = 1LL;
  }

  return v14;
}

void sub_1825410AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_48( uint64_t a1, void *a2)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3) {
    goto LABEL_35;
  }
  __int16 v50 = WORD2(v3) ^ WORD1(v3) ^ HIWORD(v3) ^ (unsigned __int16)v3;
  unsigned int event_milliseconds = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 1, &v50, 0LL);
  unsigned int v6 = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 2, &v50, 0LL);
  *(_DWORD *)(*(void *)(a1 + 40) + 1706LL) |= 0x200u;
  *(_DWORD *)(*(void *)(a1 + 40) + 232LL) = v6 - event_milliseconds;
  if (v6 < event_milliseconds)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v37 = *(unsigned int *)(*(void *)(a1 + 40) + 232LL);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
        *(_WORD *)&_DWORD buf[12] = 2082;
        *(void *)&buf[14] = "report->resolution_milliseconds";
        *(_WORD *)&_BYTE buf[22] = 2048;
        unint64_t v53 = event_milliseconds;
        LOWORD(v54) = 2048;
        *(void *)((char *)&v54 + 2) = v37;
        _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
      }
    }

    *(_DWORD *)(*(void *)(a1 + 40) + 232LL) = 0;
  }

  int v48 = 0;
  int v49 = 0;
  char v47 = 0;
  int v46 = 0;
  id v7 = v4;
  uint64_t v8 = v7;
  if (*((_DWORD *)v7 + 29) == 1)
  {
    int v9 = v7[31];
    uint64_t v10 = v9;
    if (v9)
    {
      int v48 = 0;
      int v49 = 0;
      int v46 = 0;
      char v47 = 0;
      uint64_t v11 = (unsigned __int8 *)v9[5];
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_endpoint_resolver_get_details_block_invoke;
      unint64_t v53 = (unint64_t)&unk_189BBB9F0;
      *((void *)&v54 + 1) = &v49;
      uint64_t v55 = &v48;
      uint64_t v56 = &v47;
      *(void *)&__int128 v54 = v9;
      int8x16_t v57 = &v46;
      nw_array_apply(v11, (uint64_t)buf);

LABEL_8:
      goto LABEL_28;
    }

    __nwlog_obj();
    int v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
    int v39 = (char *)_os_log_send_and_compose_impl();

    type[1] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v39, &type[1], type))
    {
      if (type[1] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type[1];
        if (os_log_type_enabled(v40, type[1]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
          _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s called with null endpoint_resolver", buf, 0xCu);
        }
      }

      else if (type[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v43 = type[1];
        BOOL v44 = os_log_type_enabled(v40, type[1]);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
            *(_WORD *)&_DWORD buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v40,  v43,  "%{public}s called with null endpoint_resolver, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_55;
        }

        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
          _os_log_impl( &dword_181A5C000,  v40,  v43,  "%{public}s called with null endpoint_resolver, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v45 = type[1];
        if (os_log_type_enabled(v40, type[1]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_get_details";
          _os_log_impl( &dword_181A5C000,  v40,  v45,  "%{public}s called with null endpoint_resolver, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182541900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_50( uint64_t a1, void *a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (v3)
  {
    id v44 = v3;
    uint64_t v4 = (id *)v3;
    os_log_type_t v45 = v4;
    if (*((_DWORD *)v4 + 29) == 5)
    {
      uint64_t v5 = (unsigned __int8 *)v4[31];
      unsigned int v6 = v5;
      if (v5)
      {
        uint64_t v7 = *((void *)v5 + 9);
        uint64_t v43 = *((void *)v5 + 10);
        int v8 = *((_DWORD *)v5 + 22);
        uint64_t v9 = v5[92];
        uint64_t v10 = v5[93];
        uint64_t v11 = v5[94];
        uint64_t v12 = v5[95];
        uint64_t v13 = v5[96];
        uint64_t v14 = v5[97];
LABEL_5:

LABEL_14:
        uint64_t v19 = *(void *)(a1 + 32);
        *(void *)(v19 + 176) = v7;
        *(void *)(v19 + 296) = v43;
        *(_DWORD *)(v19 + 304) = v8;
        unint64_t v20 = (*(unsigned int *)(v19 + 1706) | ((unint64_t)*(unsigned __int16 *)(v19 + 1710) << 32)) & 0xFFFFFFFBFFFFFFFFLL;
        *(_DWORD *)(v19 + 1706) = *(_DWORD *)(v19 + 1706);
        *(_WORD *)(v19 + 1710) = (v20 | (v9 << 34)) >> 32;
        uint64_t v21 = *(void *)(a1 + 32);
        unint64_t v22 = (*(unsigned int *)(v21 + 1706) | ((unint64_t)*(unsigned __int16 *)(v21 + 1710) << 32)) & 0xFFFFFFF7FFFFFFFFLL;
        *(_DWORD *)(v21 + 1706) = *(_DWORD *)(v21 + 1706);
        *(_WORD *)(v21 + 1710) = (v22 | (v10 << 35)) >> 32;
        uint64_t v23 = *(void *)(a1 + 32);
        unint64_t v24 = (*(unsigned int *)(v23 + 1706) | ((unint64_t)*(unsigned __int16 *)(v23 + 1710) << 32)) & 0xFFFFFFEFFFFFFFFFLL;
        *(_DWORD *)(v23 + 1706) = *(_DWORD *)(v23 + 1706);
        *(_WORD *)(v23 + 1710) = (v24 | (v11 << 36)) >> 32;
        uint64_t v25 = *(void *)(a1 + 32);
        unint64_t v26 = (*(unsigned int *)(v25 + 1706) | ((unint64_t)*(unsigned __int16 *)(v25 + 1710) << 32)) & 0xFFFFFFDFFFFFFFFFLL;
        *(_DWORD *)(v25 + 1706) = *(_DWORD *)(v25 + 1706);
        *(_WORD *)(v25 + 1710) = (v26 | (v12 << 37)) >> 32;
        uint64_t v27 = *(void *)(a1 + 32);
        unint64_t v28 = (*(unsigned int *)(v27 + 1706) | ((unint64_t)*(unsigned __int16 *)(v27 + 1710) << 32)) & 0xFFFFFFBFFFFFFFFFLL;
        *(_DWORD *)(v27 + 1706) = *(_DWORD *)(v27 + 1706);
        *(_WORD *)(v27 + 1710) = (v28 | (v13 << 38)) >> 32;
        uint64_t v29 = *(void *)(a1 + 32);
        unint64_t v30 = (*(unsigned int *)(v29 + 1706) | ((unint64_t)*(unsigned __int16 *)(v29 + 1710) << 32)) & 0xFFFFFF7FFFFFFFFFLL | (v14 << 39);
        *(_DWORD *)(v29 + 1706) = *(_DWORD *)(v29 + 1706);
        *(_WORD *)(v29 + 1710) = WORD2(v30);
        id v3 = v44;
        goto LABEL_15;
      }

      __nwlog_obj();
      BOOL v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      int v49 = "nw_endpoint_transform_get_details";
      int v36 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v46 = 0;
      if (__nwlog_fault(v36, &type, &v46))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v38 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            int v49 = "nw_endpoint_transform_get_details";
            _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s called with null endpoint_transform", buf, 0xCu);
          }
        }

        else if (v46)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v40 = type;
          BOOL v41 = os_log_type_enabled(v37, type);
          if (backtrace_string)
          {
            if (v41)
            {
              *(_DWORD *)buf = 136446466;
              int v49 = "nw_endpoint_transform_get_details";
              __int16 v50 = 2082;
              int v51 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v37,  v40,  "%{public}s called with null endpoint_transform, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_44;
          }

          if (v41)
          {
            *(_DWORD *)buf = 136446210;
            int v49 = "nw_endpoint_transform_get_details";
            _os_log_impl( &dword_181A5C000,  v37,  v40,  "%{public}s called with null endpoint_transform, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v42 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            int v49 = "nw_endpoint_transform_get_details";
            _os_log_impl( &dword_181A5C000,  v37,  v42,  "%{public}s called with null endpoint_transform, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

uint64_t nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (a2)
  {
    nw_context_assert_queue(v3[3]);
    id v5 = nw_endpoint_handler_copy_connected_socket_wrapper(v4[18]);
    unsigned int v6 = v5;
    if (v5)
    {
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = ___ZL62nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queueP24NWConcrete_nw_connectionPP9mptcpinfo_block_invoke;
      v20[3] = &__block_descriptor_40_e8_B12__0i8l;
      v20[4] = a2;
      uint64_t fd = nw_fd_wrapper_get_fd(v5, v20);
    }

    else
    {
      int v8 = v4[2];
      if (v8 && !nw_path_parameters_get_logging_disabled(v8[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v9 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int v10 = *((_DWORD *)v4 + 112);
          *(_DWORD *)buf = 136446466;
          unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
          __int16 v25 = 1024;
          LODWORD(v26) = v10;
          _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] Cannot get MPTCP info, no socket",  buf,  0x12u);
        }
      }

      uint64_t fd = 0LL;
    }

    goto LABEL_13;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v13, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null mptcp_info", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
          __int16 v25 = 2082;
          unint64_t v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null mptcp_info, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null mptcp_info, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null mptcp_info, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182542374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_51( void *a1, uint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  unsigned int v6 = v5;
  int v7 = *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
  if (v7 != 50)
  {
    id v8 = v5;
    if (nw_activity_is_selected_for_reporting(v8))
    {
      nw_activity_get_token(v8, &v26);
      *(_OWORD *)(a1[6] + 16LL * (*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL))++ + 383) = v26;
      uint64_t v9 = *(void *)(a1[4] + 16LL);
      if (v9)
      {
        if (!nw_path_parameters_get_logging_disabled(*(void *)(v9 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v10 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            int v11 = *(_DWORD *)(a1[4] + 448LL);
            int v12 = *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL) - 1;
            int v16 = 136447234;
            os_log_type_t v17 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
            __int16 v18 = 1024;
            int v19 = v11;
            __int16 v20 = 2114;
            id v21 = v8;
            __int16 v22 = 1024;
            int v23 = v12;
            __int16 v24 = 2048;
            uint64_t v25 = a2;
            _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Copied activity %{public}@ to connection report index %u from index %lu",  (uint8_t *)&v16,  0x2Cu);
          }
        }
      }
    }

BOOL ___ZL62nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queueP24NWConcrete_nw_connectionPP9mptcpinfo_block_invoke( uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v2 = copymptcpinfo(a2, *(void **)(a1 + 32));
  if (v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v4, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (os_log_s *)(id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        int v7 = "%{public}s copymptcpinfo failed";
LABEL_16:
        int v12 = v5;
        os_log_type_t v13 = v6;
        goto LABEL_17;
      }

      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (os_log_s *)(id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        int v7 = "%{public}s copymptcpinfo failed, backtrace limit exceeded";
        goto LABEL_16;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_18:

          if (!v4) {
            return v2 == 0;
          }
          goto LABEL_12;
        }

        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        int v7 = "%{public}s copymptcpinfo failed, no backtrace";
        int v12 = v5;
        os_log_type_t v13 = v9;
LABEL_17:
        _os_log_impl(&dword_181A5C000, v12, v13, v7, buf, 0xCu);
        goto LABEL_18;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        __int16 v18 = 2082;
        int v19 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v5,  v9,  "%{public}s copymptcpinfo failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

    if (v4) {
LABEL_12:
    }
      free(v4);
  }

  return v2 == 0;
}

uint64_t ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2( uint64_t a1, char *hostname)
{
  host = nw_endpoint_create_host(hostname, "0");
  if (nw_endpoint_get_type(host) == nw_endpoint_type_address)
  {
    address = nw_endpoint_get_address(host);
    if (address)
    {
      int sa_family = address->sa_family;
      if (sa_family == 30)
      {
        ++*(_DWORD *)(*(void *)(a1 + 32) + 276LL);
      }

      else if (sa_family == 2)
      {
        ++*(_DWORD *)(*(void *)(a1 + 32) + 272LL);
      }
    }
  }

  return 1LL;
}

void sub_18254295C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_connection_stats_get_current_appPb_block_invoke()
{
  if (nw_utilities_get_self_bundle_id::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
  }
  uint64_t result = nw_utilities_get_self_bundle_id::bundle_identifier_string;
  if (nw_utilities_get_self_bundle_id::bundle_identifier_string)
  {
    uint64_t result = nw_connection_stats_get_apple_app_for_string((const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string);
    nw_connection_stats_get_current_app(BOOL *)::current_app = result;
  }

  else
  {
    nw_connection_stats_get_current_app(BOOL *)::is_daemon = 1;
  }

  return result;
}

void ___ZL70nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queueP24NWConcrete_nw_connectionPU33objcproto22OS_nw_endpoint_handler8NSObjectP35netcore_stats_tcp_statistics_report_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    __int16 v11 = WORD2(v3) ^ WORD1(v3) ^ HIWORD(v3) ^ (unsigned __int16)v3;
    unsigned int event_milliseconds = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 1, &v11, 0LL);
    unsigned int v6 = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 2, &v11, 0LL);
    int v7 = *(_DWORD **)(a1 + 40);
    if (event_milliseconds != -1) {
      v7[33] = event_milliseconds;
    }
    if (v6 != -1) {
      v7[32] = v6;
    }
    v7[34] = v6 - event_milliseconds;
    if (v6 < event_milliseconds)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 40) + 136LL);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v13 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue_block_invoke";
          __int16 v14 = 2082;
          os_log_type_t v15 = "statistics_report->dns_resolved_time_msecs";
          __int16 v16 = 2048;
          uint64_t v17 = event_milliseconds;
          __int16 v18 = 2048;
          uint64_t v19 = v10;
          _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
        }
      }

      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)(v8 + 136) = 0;
      goto LABEL_10;
    }

    uint64_t v8 = *(void *)(a1 + 40);
    if (*(_DWORD *)(v8 + 136) <= 5u) {
LABEL_10:
    }
      *(_WORD *)(v8 + 208) |= 1u;
  }
}

void nw_connection_report_symptom_internal_on_nw_queue( int a1, void *a2, void *a3, void *a4, uint64_t a5, const unsigned __int8 *a6, uint64_t a7, int a8, int a9, int a10)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  uint64_t v75 = a7;
  int v74 = a8;
  unsigned int v72 = v15;
  if (!v15)
  {
    __nwlog_obj();
    int64x2_t v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    v80[0] = 16;
    uu[0] = 0;
    if (v80[0] == 17)
    {
      __nwlog_obj();
      unint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v30, v61, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_85;
    }

    if (!uu[0])
    {
      __nwlog_obj();
      unint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v69 = v80[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v30,  v69,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_85;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v65 = v80[0];
    BOOL v66 = os_log_type_enabled(v40, (os_log_type_t)v80[0]);
    if (backtrace_string)
    {
      if (v66)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        *(_WORD *)&_DWORD buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v40,  v65,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
LABEL_86:
      if (!v29) {
        goto LABEL_88;
      }
LABEL_87:
      free(v29);
      goto LABEL_88;
    }

    if (v66)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      _os_log_impl(&dword_181A5C000, v40, v65, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }

void sub_182543B48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void __nw_connection_report_symptom_internal_on_nw_queue_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    endpoint = v3;
    nw_endpoint_type_t type = nw_endpoint_get_type(v3);
    uint64_t v4 = endpoint;
    if (type == 4 || (v6 = nw_endpoint_get_type(endpoint), uint64_t v4 = endpoint, v6 == nw_endpoint_type_host))
    {
      hostname = nw_endpoint_get_hostname(v4);
      uint64_t v4 = endpoint;
      if (hostname)
      {
        size_t v8 = strlen(hostname);
        uint64_t v4 = endpoint;
        if (v8)
        {
          symptom_set_additional_qualifier();
          *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
          uint64_t v4 = endpoint;
        }
      }
    }
  }
}

void sub_182543C78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_connection_report_symptom_on_nw_queue(void *a1, int a2, void *a3, int a4)
{
  *(void *)&v28[13] = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a3;
  if (v7)
  {
    nw_context_assert_queue(*((void **)v7 + 3));
    if (v8)
    {
      id v9 = v8;
      os_unfair_lock_lock((os_unfair_lock_t)v9 + 28);
      id v10 = *((id *)v9 + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)v9 + 28);

      if (!v10) {
        goto LABEL_15;
      }
LABEL_8:
      nw_connection_report_symptom_internal_on_nw_queue( a2,  *((void **)v7 + 1),  *((void **)v7 + 2),  v10,  0LL,  0LL,  0LL,  0,  a4,  *((_DWORD *)v7 + 126));
      uint64_t v11 = *((void *)v7 + 2);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v12 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v13 = *((_DWORD *)v7 + 112);
          __int16 v14 = off_189BC74D0[a2 - 421889];
          *(_DWORD *)buf = 136446722;
          __int128 v26 = "nw_connection_report_symptom_on_nw_queue";
          __int16 v27 = 1024;
          *(_DWORD *)id v28 = v13;
          v28[2] = 2082;
          *(void *)&v28[3] = v14;
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] reported %{public}s symptom",  buf,  0x1Cu);
        }
      }

      goto LABEL_15;
    }

    if ((*((_BYTE *)v7 + 109) & 0x40) != 0)
    {
      id v10 = (id)nw_endpoint_handler_copy_connected_path(*((void **)v7 + 18));
      if (v10) {
        goto LABEL_8;
      }
    }

    else
    {
      id v10 = 0LL;
    }

void sub_18254407C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_connection_copy_endpoint_handler_for_handler_id(NWConcrete_nw_connection *a1, __int16 a2)
{
  uint64_t v6 = 0LL;
  id v7 = &v6;
  uint64_t v8 = 0x3032000000LL;
  id v9 = __Block_byref_object_copy__78582;
  id v10 = __Block_byref_object_dispose__78583;
  id v11 = 0LL;
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = ___ZL50nw_connection_copy_endpoint_handler_for_handler_idP24NWConcrete_nw_connectiont_block_invoke;
  v4[3] = &unk_189BC7380;
  __int16 v5 = a2;
  void v4[4] = &v6;
  nw_endpoint_handler_apply_to_leaf_children(a1, v4);
  id v2 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v2;
}

void sub_182544150( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__78582(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__78583(uint64_t a1)
{
}

uint64_t ___ZL50nw_connection_copy_endpoint_handler_for_handler_idP24NWConcrete_nw_connectiont_block_invoke( uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  int v5 = (unsigned __int16)(WORD2(v3) ^ WORD1(v3) ^ HIWORD(v3) ^ (unsigned __int16)v3);
  if (!v3) {
    int v5 = 0;
  }
  if (v5 == *(unsigned __int16 *)(a1 + 40))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v7 = v3;
    id v8 = *(id *)(v6 + 40);
    *(void *)(v6 + 40) = v7;
LABEL_11:

    uint64_t v12 = 0LL;
    goto LABEL_12;
  }

  id v9 = nw_endpoint_handler_copy_parent(v3);
  if (v9)
  {
    id v10 = v9;
    while (*(unsigned __int16 *)(a1 + 40) != (unsigned __int16)(WORD2(v10) ^ WORD1(v10) ^ HIWORD(v10) ^ (unsigned __int16)v10))
    {
      id v11 = (id *)v10;
      id v10 = v11[9];

      if (!v10) {
        goto LABEL_9;
      }
    }

    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
    __int16 v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v10;
    id v8 = v10;

    goto LABEL_11;
  }

id nw_connection_copy_tcp_info(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    id v19 = __Block_byref_object_copy__78582;
    os_log_type_t v20 = __Block_byref_object_dispose__78583;
    id v21 = 0LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_connection_copy_tcp_info_block_invoke;
    v13[3] = &unk_189BC9210;
    __int16 v14 = v1;
    id v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_tcp_info_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    id v3 = *(id *)(*(void *)&buf[8] + 40LL);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
          *(_WORD *)&_DWORD buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_connection_copy_tcp_info_block_invoke(uint64_t a1)
{
  buf.var97 = *MEMORY[0x1895F89C0];
  id v2 = *(void **)(a1 + 32);
  if (v2[18])
  {
    id v3 = v2;
    id v4 = v3[2];

    if (nw_parameters_get_multipath(v4))
    {
      int is_multipath = nw_endpoint_handler_is_multipath(*(void **)(*(void *)(a1 + 32) + 144LL));

      if (is_multipath)
      {
        id v6 = nw_endpoint_handler_copy_multipath_tcp_info(*(void **)(*(void *)(a1 + 32) + 144LL));
        uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
        os_log_type_t v8 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = v6;

        return;
      }
    }

    else
    {
    }

    memset(&buf, 0, 408);
    if (nw_connection_get_tcp_info_for_connected_endpoint_locked(*(NWConcrete_nw_connection **)(a1 + 32), &buf))
    {
      uint64_t v12 = nw_endpoint_handler_copy_connected_path(*(void **)(*(void *)(a1 + 32) + 144LL));
      uint64_t v13 = (void *)v12;
      if (v12) {
        __int16 v14 = (char *)*(id *)(v12 + 96);
      }
      else {
        __int16 v14 = 0LL;
      }
      xpc_object_t v15 = xpc_dictionary_create(0LL, 0LL, 0LL);
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      os_log_type_t v18 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      if (v18)
      {
        if (v14) {
          id v19 = v14 + 104;
        }
        else {
          id v19 = "unknown";
        }
        xpc_dictionary_set_data(v18, v19, &buf, 0x198uLL);
        goto LABEL_29;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v20 = (id)gLogObj;
      *(_DWORD *)unint64_t v30 = 136446210;
      os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
      id v21 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v28 = 0;
      if (__nwlog_fault(v21, &type, &v28))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v22 = (os_log_s *)(id)gLogObj;
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)unint64_t v30 = 136446210;
            os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
            _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s xpc_dictionary_create failed", v30, 0xCu);
          }
        }

        else if (v28)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v25 = type;
          BOOL v26 = os_log_type_enabled(v22, type);
          if (backtrace_string)
          {
            if (v26)
            {
              *(_DWORD *)unint64_t v30 = 136446466;
              os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
              __int16 v32 = 2082;
              os_log_type_t v33 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v22,  v25,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  v30,  0x16u);
            }

            free(backtrace_string);
            if (!v21) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }

          if (v26)
          {
            *(_DWORD *)unint64_t v30 = 136446210;
            os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
            _os_log_impl(&dword_181A5C000, v22, v25, "%{public}s xpc_dictionary_create failed, no backtrace", v30, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)unint64_t v30 = 136446210;
            os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
            _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s xpc_dictionary_create failed, backtrace limit exceeded",  v30,  0xCu);
          }
        }
      }

      if (!v21)
      {
LABEL_29:

        return;
      }

void sub_182544A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182544A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_connection_get_tcp_info_for_connected_endpoint_locked(NWConcrete_nw_connection *a1, tcp_info *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2)
    {
      int v5 = v3;
      BOOL v6 = nw_parameters_get_ip_protocol(v5[2]) == 6 && nw_endpoint_handler_fillout_tcp_info(v5[18], a2);

      goto LABEL_7;
    }

    __nwlog_obj();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null tcp_info", buf, 0xCu);
        }

void sub_182544F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_connection_fillout_tcp_connection_info(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(void *)tcp_info buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      char v27 = 0;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_connection_fillout_tcp_connection_info_block_invoke;
      v20[3] = &unk_189BC93F0;
      char v21 = v3;
      uint64_t v22 = buf;
      uint64_t v23 = a2;
      os_unfair_lock_lock(v4 + 34);
      __nw_connection_fillout_tcp_connection_info_block_invoke(v20);
      os_unfair_lock_unlock(v4 + 34);
      BOOL v5 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v8, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null info_ptr", buf, 0xCu);
        }

void __nw_connection_fillout_tcp_connection_info_block_invoke(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v1 = (_BYTE *)a1[4];
  if ((v1[109] & 0x40) == 0) {
    return;
  }
  id v3 = v1;
  id v4 = v3[2];

  LODWORD(v3) = nw_parameters_get_multipath(v4);
  BOOL v5 = (void *)a1[4];
  if (!(_DWORD)v3)
  {
    uint64_t v9 = (_OWORD *)a1[6];
    os_log_type_t v10 = v5;
    os_log_type_t v11 = v10;
    if (v10)
    {
      if (v9)
      {
        BOOL v12 = nw_endpoint_handler_fillout_tcp_connection_info((void *)v10[18], v9);
LABEL_13:

        *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = v12;
        return;
      }

      __nwlog_obj();
      BOOL v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
      os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v26 = 0;
      if (__nwlog_fault(v14, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v18 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            uint64_t v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null tcp_connection_info", buf, 0xCu);
          }

void sub_182545A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_used_tfo_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F9240] && (bytes_ptr = xpc_data_get_bytes_ptr(v4)) != 0LL)
  {
    uint64_t v5 = 1LL;
    if (xpc_data_get_length(v4) == 408 && (bytes_ptr[244] & 0x10) != 0)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_182545B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_connection_better_path_available(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *(void *)tcp_info buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v19 = 0;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_connection_better_path_available_block_invoke;
    v13[3] = &unk_189BC9210;
    BOOL v15 = buf;
    os_log_type_t v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_better_path_available_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_better_path_available";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_better_path_available";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_better_path_available";
          *(_WORD *)&_DWORD buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_better_path_available";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_better_path_available";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_connection_better_path_available_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 132LL) == 1;
  return result;
}

BOOL nw_connection_has_proxy_attempt_locked_on_nw_queue(void *a1)
{
  *(void *)&v33[5] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[3]);
    if (*((_DWORD *)v2 + 20) == 5)
    {
      BOOL v3 = v2[2];
      if (v3 && !nw_path_parameters_get_logging_disabled(v3[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v4 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          int v5 = *((_DWORD *)v2 + 112);
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          __int16 v32 = 1024;
          *(_DWORD *)os_log_type_t v33 = v5;
          _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Cancelled, cannot check for proxy attempts",  buf,  0x12u);
        }
      }

      goto LABEL_10;
    }

    os_log_type_t v8 = v2[18];
    if (v8)
    {
      BOOL has_proxy_child_locked = nw_endpoint_handler_has_proxy_child_locked(v8);
      uint64_t v7 = v2[2];
      if (!v7) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
    os_log_type_t v13 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault((const char *)v13, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s Cannot check proxy endpoint without parent endpoint handler",  buf,  0xCu);
        }
      }

      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
            __int16 v32 = 2082;
            *(void *)os_log_type_t v33 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s Cannot check proxy endpoint without parent endpoint handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v13)
          {
LABEL_10:
            BOOL has_proxy_child_locked = 0LL;
            uint64_t v7 = v2[2];
            if (!v7) {
              goto LABEL_20;
            }
LABEL_14:
            if (!nw_path_parameters_get_logging_disabled(v7[13]))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v9 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
              {
                int v10 = *((_DWORD *)v2 + 112);
                *(_DWORD *)tcp_info buf = 136446722;
                os_log_type_t v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
                __int16 v32 = 1024;
                *(_DWORD *)os_log_type_t v33 = v10;
                v33[2] = 1024;
                *(_DWORD *)&v33[3] = has_proxy_child_locked;
                _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Has proxy attempt: %u",  buf,  0x18u);
              }
            }

            goto LABEL_20;
          }

void sub_1825464E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_has_proxy_child_locked(void *a1)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    nw_endpoint_t v3 = nw_endpoint_handler_copy_endpoint(v1);
    nw_endpoint_t v4 = v3;
    if (v3)
    {
      BOOL v5 = nw_endpoint_copy_proxy_original_endpoint(v3);
      if (v5)
      {
        uint64_t v6 = v2;
        char v7 = v6[268];

        if ((v7 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v8 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v9 = v6;

            int v10 = v9;
            char v11 = v6[268];

            if ((v11 & 1) != 0) {
              id v12 = "dry-run ";
            }
            else {
              id v12 = "";
            }
            nw_endpoint_t v13 = nw_endpoint_handler_copy_endpoint(v10);
            logging_description = nw_endpoint_get_logging_description(v13);
            char v46 = v9 + 168;
            id v47 = v12;
            os_log_type_t v15 = v10;
            char v16 = v15;
            uint64_t v17 = v15[30];
            else {
              BOOL v18 = off_189BBBBF0[v17];
            }
            id v45 = v18;

            os_log_type_t v22 = v16;
            os_log_type_t v23 = v22;
            os_log_type_t v24 = logging_description;
            os_log_type_t v25 = "path";
            switch(*((_DWORD *)v22 + 29))
            {
              case 0:
                break;
              case 1:
                os_log_type_t v25 = "resolver";
                break;
              case 2:
                os_log_type_t v25 = nw_endpoint_flow_mode_string(v22[31]);
                break;
              case 3:
                os_log_type_t v25 = "proxy";
                break;
              case 4:
                os_log_type_t v25 = "fallback";
                break;
              case 5:
                os_log_type_t v25 = "transform";
                break;
              default:
                os_log_type_t v25 = "unknown-mode";
                break;
            }

            BOOL v26 = v23;
            os_unfair_lock_lock((os_unfair_lock_t)v26 + 28);
            id v27 = v26[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v26 + 28);

            *(_DWORD *)tcp_info buf = 136448258;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
            *(_WORD *)&_DWORD buf[12] = 2082;
            *(void *)&buf[14] = v46;
            *(_WORD *)&_BYTE buf[22] = 2082;
            uint64_t v52 = v47;
            __int16 v53 = 2082;
            __int128 v54 = v24;
            __int16 v55 = 2082;
            int v56 = v45;
            __int16 v57 = 2082;
            os_log_type_t v58 = v25;
            __int16 v59 = 2114;
            id v60 = v27;
            __int16 v61 = 2112;
            nw_endpoint_t v62 = v4;
            __int16 v63 = 2112;
            BOOL v64 = v5;
            _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint %@ has proxy ori ginal endpoint %@",  buf,  0x5Cu);
          }
        }

        BOOL v21 = 1LL;
      }

      else
      {
        *(void *)tcp_info buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000LL;
        LOBYTE(v52) = 0;
        v48[0] = MEMORY[0x1895F87A8];
        v48[1] = 3221225472LL;
        v48[2] = ___ZL42nw_endpoint_handler_has_proxy_child_lockedPU33objcproto22OS_nw_endpoint_handler8NSObject_block_invoke;
        v48[3] = &unk_189BC73A8;
        v48[4] = buf;
        os_log_type_t v19 = v2;
        uint64_t v20 = v48;
        if ((objc_opt_respondsToSelector() & 1) != 0) {
          [v19[31] applyWithHandler:v19 toChildren:v20];
        }

        BOOL v21 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
        _Block_object_dispose(buf, 8);
      }

LABEL_28:
      goto LABEL_29;
    }

    __nwlog_obj();
    os_log_type_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (__nwlog_fault(v34, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
          _os_log_impl(&dword_181A5C000, v35, v36, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v49)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type;
        BOOL v42 = os_log_type_enabled(v35, type);
        if (backtrace_string)
        {
          if (v42)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
            *(_WORD *)&_DWORD buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v35,  v41,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_65;
        }

        if (v42)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
          _os_log_impl(&dword_181A5C000, v35, v41, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
          _os_log_impl( &dword_181A5C000,  v35,  v44,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182546C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_endpoint_handler_has_proxy_child_lockedPU33objcproto22OS_nw_endpoint_handler8NSObject_block_invoke( uint64_t a1, uint64_t a2)
{
  int has_proxy_child_locked = nw_endpoint_handler_has_proxy_child_locked(a2);
  if (has_proxy_child_locked) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return has_proxy_child_locked ^ 1u;
}

BOOL nw_connection_has_proxy_attempt_on_nw_queue(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 3));
    *(void *)tcp_info buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v19 = 0;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_connection_has_proxy_attempt_on_nw_queue_block_invoke;
    v13[3] = &unk_189BC9210;
    os_log_type_t v15 = buf;
    os_log_type_t v14 = v2;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_has_proxy_attempt_on_nw_queue_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
          *(_WORD *)&_DWORD buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182547068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_connection_has_proxy_attempt_on_nw_queue_block_invoke(uint64_t a1)
{
  BOOL result = nw_connection_has_proxy_attempt_locked_on_nw_queue(*(void **)(a1 + 32));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

BOOL nw_connection_failed_due_to_blocked_tracker(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *(void *)tcp_info buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v19 = 0;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_connection_failed_due_to_blocked_tracker_block_invoke;
    v13[3] = &unk_189BC9210;
    os_log_type_t v15 = buf;
    os_log_type_t v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_failed_due_to_blocked_tracker_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_failed_due_to_blocked_tracker";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_failed_due_to_blocked_tracker";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_failed_due_to_blocked_tracker";
          *(_WORD *)&_DWORD buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_failed_due_to_blocked_tracker";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_failed_due_to_blocked_tracker";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_connection_failed_due_to_blocked_tracker_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 110LL) & 1;
  return result;
}

void nw_connection_shares_protocol_stack(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  char v7 = a1;
  os_log_type_t v8 = a2;
  uint64_t v9 = a3;
  id v10 = a4;
  BOOL v11 = v10;
  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    char v49 = "nw_connection_shares_protocol_stack";
    char v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = v47;
      BOOL v27 = os_log_type_enabled(v17, v47);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v49 = "nw_connection_shares_protocol_stack";
          __int16 v50 = 2082;
          int v51 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v26,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_81:
        if (!v16) {
          goto LABEL_15;
        }
LABEL_82:
        free(v16);
        goto LABEL_15;
      }

      if (v27)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_181A5C000, v17, v26, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v35,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182547E50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_shares_protocol_stack_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void __nw_connection_shares_protocol_stack_block_invoke_2(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  BOOL v3 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 136LL);
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  v8[2] = __nw_connection_shares_protocol_stack_block_invoke_3;
  v8[3] = &unk_189BC7210;
  id v7 = v2;
  void v8[4] = v7;
  id v4 = *(id *)(a1 + 32);
  v8[5] = v4;
  id v5 = *(id *)(a1 + 48);
  void v8[6] = v5;
  id v6 = *(id *)(a1 + 56);
  v8[7] = v6;
  os_unfair_lock_lock(v3);
  __nw_connection_shares_protocol_stack_block_invoke_3((uint64_t)v8);
  os_unfair_lock_unlock(v3);
}

void __nw_connection_shares_protocol_stack_block_invoke_3(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  BOOL v3 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 136LL);
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  v8[2] = __nw_connection_shares_protocol_stack_block_invoke_4;
  v8[3] = &unk_189BC7210;
  id v7 = v2;
  void v8[4] = v7;
  id v4 = *(id *)(a1 + 32);
  v8[5] = v4;
  id v5 = *(id *)(a1 + 48);
  void v8[6] = v5;
  id v6 = *(id *)(a1 + 56);
  v8[7] = v6;
  os_unfair_lock_lock(v3);
  __nw_connection_shares_protocol_stack_block_invoke_4((uint64_t)v8);
  os_unfair_lock_unlock(v3);
}

void __nw_connection_shares_protocol_stack_block_invoke_4(uint64_t a1)
{
  uint64_t v77 = *MEMORY[0x1895F89C0];
  id v2 = *(void **)(a1 + 40);
  BOOL v3 = (void **)*(id *)(a1 + 32);
  id v4 = v2;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
    os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v69 = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (__nwlog_fault(v40, &v69, &v68))
    {
      if (v69 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v42 = v69;
        if (os_log_type_enabled(v41, v69))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s called with null connection", buf, 0xCu);
        }
      }

      else if (v68)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v44 = v69;
        BOOL v45 = os_log_type_enabled(v41, v69);
        if (backtrace_string)
        {
          if (v45)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            uint64_t v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
            __int16 v72 = 2082;
            *(void *)int v73 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v41,  v44,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_123;
        }

        if (v45)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v41, v44, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = v69;
        if (os_log_type_enabled(v41, v69))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v41,  v52,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182548EF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20, void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_shares_protocol_stack_block_invoke_5(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void __nw_connection_start_throughput_monitor_on_nw_queue_block_invoke(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  id v1 = (void **)*(id *)(a1 + 32);
  id v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[3]);
    if ((*((_BYTE *)v2 + 109) & 0x40) == 0)
    {
      BOOL v3 = v2[2];
      if (v3 && !nw_path_parameters_get_logging_disabled(v3[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v4 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          int v5 = *((_DWORD *)v2 + 112);
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_throughput_measure_on_nw_queue";
          *(_WORD *)&_DWORD buf[12] = 1024;
          *(_DWORD *)&buf[14] = v5;
          _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Connection does not have a connected handler",  buf,  0x12u);
        }
      }

      goto LABEL_32;
    }

    uint64_t v38 = 0LL;
    memset(v37, 0, sizeof(v37));
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    memset(buf, 0, sizeof(buf));
    id v6 = v2;
    id v7 = v6[2];

    if (!nw_parameters_get_multipath(v7))
    {
      int v8 = v6;
      nw_context_assert_queue(v2[3]);
      id v9 = v8;
      if (nw_parameters_get_ip_protocol(v6[2]) == 6)
      {
        BOOL v10 = nw_endpoint_handler_fillout_tcp_info(v9[18], buf);

        if (v10)
        {
          BOOL v11 = (_BYTE *)(*(void *)((char *)&v37[2] + 12) + *(void *)((char *)v37 + 12));
          uint64_t v12 = mach_continuous_time();
          if (v12 <= 1) {
            uint64_t v13 = 1LL;
          }
          else {
            uint64_t v13 = v12;
          }
          uint64_t v14 = (uint64_t)v9[45];
          if (v14)
          {
            unint64_t v15 = nw_delta_nanos(v14, v13);
            int v16 = v6[2];
            unint64_t v17 = 1000 * (v11 - (_BYTE *)v9[44]) / (v15 / 0xF4240);
            if (v16 && !nw_path_parameters_get_logging_disabled(v16[13]))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v18 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v19 = *((_DWORD *)v9 + 112);
                LODWORD(v39[0]) = 136446722;
                *(void *)((char *)v39 + 4) = "nw_connection_throughput_measure_on_nw_queue";
                WORD2(v39[1]) = 1024;
                *(_DWORD *)((char *)&v39[1] + 6) = v19;
                WORD1(v39[2]) = 2048;
                *(void *)((char *)&v39[2] + 4) = v17;
                _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] bps: %llu",  (uint8_t *)v39,  0x1Cu);
              }
            }

            if (v17 < *((unsigned int *)v9 + 94))
            {
              os_log_type_t v20 = v9;
              nw_context_assert_queue(v2[3]);
              BOOL v21 = (const void *)*((void *)v20 + 48);
              if (v21 && v20[20] != 5)
              {
                os_log_type_t v22 = _Block_copy(v21);
                dispatch_qos_class_t v23 = v20[48];
                v39[0] = MEMORY[0x1895F87A8];
                v39[1] = 3221225472LL;
                v39[2] = ___ZL45nw_connection_send_low_throughput_on_nw_queueP24NWConcrete_nw_connectiony_block_invoke;
                v39[3] = &unk_189BC73D0;
                id v40 = v22;
                unint64_t v41 = v17;
                id v24 = v22;
                nw_connection_async_client(v20, v23, v39);
              }
            }
          }

          *((_OWORD *)v9 + 22) = *((_OWORD *)v9 + 21);
          v9[42] = v11;
          v9[43] = (id)v13;
        }

        goto LABEL_32;
      }
    }

    goto LABEL_32;
  }

  __nwlog_obj();
  id v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_throughput_measure_on_nw_queue";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v39[0]) = 16;
  char v33 = 0;
  if (__nwlog_fault(v26, v39, &v33))
  {
    if (LOBYTE(v39[0]) == 17)
    {
      __nwlog_obj();
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = v39[0];
      if (os_log_type_enabled(v27, v39[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_throughput_measure_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = v39[0];
      BOOL v31 = os_log_type_enabled(v27, v39[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_throughput_measure_on_nw_queue";
          *(_WORD *)&_DWORD buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v27,  v30,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }

      if (v31)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_throughput_measure_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v27, v30, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = v39[0];
      if (os_log_type_enabled(v27, v39[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_throughput_measure_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v27,  v32,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1825494F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL45nw_connection_send_low_throughput_on_nw_queueP24NWConcrete_nw_connectiony_block_invoke( uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void nw_connection_report_estimated_byte_threshold_change_on_queue( NWConcrete_nw_connection *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  BOOL v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    char v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
    dispatch_qos_class_t v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v23, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
          _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null connection", buf, 0xCu);
        }
      }

      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            char v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
            __int16 v34 = 2082;
            __int128 v35 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v24,  v27,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_56;
        }

        if (v28)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
          _os_log_impl(&dword_181A5C000, v24, v27, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
          _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1825499C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_add_client_event_internal(void *a1, int a2, void *a3, void *a4)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    uint64_t v10 = mach_continuous_time();
    if (v10 <= 1) {
      uint64_t v11 = 1LL;
    }
    else {
      uint64_t v11 = v10;
    }
    unint64_t v12 = nw_delta_nanos(v7[9], v11);
    if (v12 > 0xF423FFFFFFFFFLL) {
      unsigned int v13 = -1;
    }
    else {
      unsigned int v13 = v12 / 0xF4240;
    }
    if (nw_parameters_get_logging_disabled(v7[2])) {
      goto LABEL_28;
    }
    if ((a2 & 0xFFFFFFFE) == 4)
    {
      if (__nwlog_activity_log::onceToken != -1) {
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
      }
      id v14 = (id)gactivityLogObj;
      if (!os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_DEFAULT))
      {
LABEL_27:

LABEL_28:
        v30[0] = MEMORY[0x1895F87A8];
        v30[1] = 3221225472LL;
        v30[2] = ___ZL39nw_connection_add_client_event_internalP24NWConcrete_nw_connection26nw_endpoint_client_event_tPU24objcproto13OS_xpc_object8NSObjectPU25objcproto14OS_nw_activityS2__block_invoke;
        v30[3] = &unk_189BC7420;
        uint64_t v34 = v11;
        int v35 = a2;
        BOOL v31 = v7;
        id v32 = v8;
        id v33 = v9;
        nw_connection_async_if_needed(v31, v30);

        goto LABEL_29;
      }

      else {
        int v15 = off_189BBC320[(unsigned __int16)(a2 - 1)];
      }
      int v21 = *((_DWORD *)v7 + 112);
      *(_DWORD *)tcp_info buf = 67110146;
      *(_DWORD *)BOOL v39 = v21;
      *(_WORD *)&void v39[4] = 2082;
      *(void *)&v39[6] = v15;
      *(_WORD *)&v39[14] = 1024;
      *(_DWORD *)&v39[16] = v13 / 0x3E8;
      __int16 v40 = 1024;
      unsigned int v41 = v13 % 0x3E8;
      __int16 v42 = 2114;
      id v43 = v9;
      int v18 = "[C%u] event: client:%{public}s @%u.%03us, activity %{public}@";
      unsigned int v19 = (os_log_s *)v14;
      uint32_t v20 = 40;
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v14 = (id)gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      else {
        int v16 = off_189BBC320[(unsigned __int16)(a2 - 1)];
      }
      int v17 = *((_DWORD *)v7 + 112);
      *(_DWORD *)tcp_info buf = 67109890;
      *(_DWORD *)BOOL v39 = v17;
      *(_WORD *)&void v39[4] = 2082;
      *(void *)&v39[6] = v16;
      *(_WORD *)&v39[14] = 1024;
      *(_DWORD *)&v39[16] = v13 / 0x3E8;
      __int16 v40 = 1024;
      unsigned int v41 = v13 % 0x3E8;
      int v18 = "[C%u] event: client:%{public}s @%u.%03us";
      unsigned int v19 = (os_log_s *)v14;
      uint32_t v20 = 30;
    }

    _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
    goto LABEL_27;
  }

  __nwlog_obj();
  os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)BOOL v39 = "nw_connection_add_client_event_internal";
  dispatch_qos_class_t v23 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (__nwlog_fault(v23, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)BOOL v39 = "nw_connection_add_client_event_internal";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)BOOL v39 = "nw_connection_add_client_event_internal";
          *(_WORD *)&v39[8] = 2082;
          *(void *)&v39[10] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v24,  v27,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_46;
      }

      if (v28)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)BOOL v39 = "nw_connection_add_client_event_internal";
        _os_log_impl(&dword_181A5C000, v24, v27, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)BOOL v39 = "nw_connection_add_client_event_internal";
        _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182549F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL39nw_connection_add_client_event_internalP24NWConcrete_nw_connection26nw_endpoint_client_event_tPU24objcproto13OS_xpc_object8NSObjectPU25objcproto14OS_nw_activityS2__block_invoke( uint64_t a1)
{
  uint64_t v141 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 56);
  LODWORD(logging_description) = *(_DWORD *)(a1 + 64);
  uint64_t v4 = MEMORY[0x1895F87A8];
  int v5 = &unk_182665000;
  switch((int)logging_description)
  {
    case 1:
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(v21 + 96);
      if (v22)
      {
        ++*(_DWORD *)(v22 + 184);
        uint64_t v21 = *(void *)(a1 + 32);
      }

      unsigned int v19 = *(void **)(v21 + 144);
      int v20 = 0;
      goto LABEL_17;
    case 2:
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 96LL);
      if (v24)
      {
        ++*(_DWORD *)(v24 + 188);
        os_log_type_t v25 = *(void **)(a1 + 40);
        if (v25)
        {
          if (object_getClass(v25) == (Class)MEMORY[0x1895F92F0]) {
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 96LL) + 192LL) = xpc_uint64_get_value(*(xpc_object_t *)(a1 + 40));
          }
        }
      }

      nw_connection_report_symptom_on_nw_queue(*(void **)(a1 + 32), 421890, 0LL, 0);
      id v26 = *(id *)(*(void *)(a1 + 32) + 144LL);
      uint64_t v118 = v2;
      if (v26)
      {
        id v117 = v26;
        os_log_type_t v27 = (NWConcrete_nw_endpoint_handler *)v26;
        uint64_t mode = v27->mode;

        if ((_DWORD)mode == 2)
        {
          os_log_type_t v29 = nw_endpoint_handler_copy_flow(v27);
          if (nw_endpoint_handler_get_minimize_logging(v27))
          {
            if ((nw_endpoint_handler_get_logging_disabled(v27) & 1) != 0)
            {
LABEL_100:
              uint64_t v76 = *((void *)v29 + 51);
              if (v76)
              {
                uint64_t v77 = *(void *)(v76 + 24);
                if (v77)
                {
                  __int128 v78 = *(void (**)(void))(v77 + 160);
                  if (v78) {
                    v78();
                  }
                }
              }

              goto LABEL_117;
            }

            os_log_type_t v116 = v29;
            __int16 v100 = (__int16)logging_description;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v32 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v27);
              id v113 = nw_endpoint_handler_dry_run_string(v27);
              nw_endpoint_t v102 = nw_endpoint_handler_copy_endpoint(v27);
              logging_description = (char *)nw_endpoint_get_logging_description(v102);
              unsigned int v103 = nw_endpoint_handler_state_string(v27);
              unsigned int v104 = nw_endpoint_handler_mode_string(v27);
              id v105 = nw_endpoint_handler_copy_current_path(v27);
              *(_DWORD *)unint64_t v134 = 136447746;
              *(void *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(void *)&v134[14] = id_string;
              *(_WORD *)&v134[22] = 2082;
              v135 = v113;
              *(_WORD *)uint64_t v136 = 2082;
              *(void *)&v136[2] = logging_description;
              *(_WORD *)&v136[10] = 2082;
              *(void *)&v136[12] = v103;
              __int16 v137 = 2082;
              uint64_t v138 = v104;
              __int16 v139 = 2114;
              id v140 = v105;
              _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Reporting data stall to protocols",  v134,  0x48u);

              os_log_type_t v29 = v116;
              LOWORD(logging_description) = v100;
            }
          }

          else
          {
            char v30 = v27;
            char v31 = *((_BYTE *)v30 + 268);

            if ((v31 & 0x20) != 0) {
              goto LABEL_100;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v32 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              __int128 v115 = v29;
              id v33 = v30;

              uint64_t v34 = v33;
              char v35 = *((_BYTE *)v30 + 268);

              if ((v35 & 1) != 0) {
                char v36 = "dry-run ";
              }
              else {
                char v36 = "";
              }
              nw_endpoint_t v37 = nw_endpoint_handler_copy_endpoint(v34);
              uint64_t v38 = nw_endpoint_get_logging_description(v37);
              id_str = v33->id_str;
              __int16 v40 = v34;
              unsigned int v41 = v40;
              uint64_t v42 = v40[30];
              else {
                id v43 = off_189BBBBF0[v42];
              }
              int v112 = v43;

              id v66 = v41;
              char v67 = v66;
              __int16 v114 = (__int16)logging_description;
              char v68 = "path";
              switch(v27->mode)
              {
                case 0:
                  break;
                case 1:
                  char v68 = "resolver";
                  break;
                case 2:
                  char v68 = nw_endpoint_flow_mode_string(v66[31]);
                  break;
                case 3:
                  char v68 = "proxy";
                  break;
                case 4:
                  char v68 = "fallback";
                  break;
                case 5:
                  char v68 = "transform";
                  break;
                default:
                  char v68 = "unknown-mode";
                  break;
              }

              logging_description = v67;
              os_unfair_lock_lock((os_unfair_lock_t)logging_description + 28);
              id v75 = *((id *)logging_description + 8);
              os_unfair_lock_unlock((os_unfair_lock_t)logging_description + 28);

              *(_DWORD *)unint64_t v134 = 136447746;
              *(void *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(void *)&v134[14] = id_str;
              *(_WORD *)&v134[22] = 2082;
              v135 = v36;
              *(_WORD *)uint64_t v136 = 2082;
              *(void *)&v136[2] = v38;
              *(_WORD *)&v136[10] = 2082;
              *(void *)&v136[12] = v112;
              __int16 v137 = 2082;
              uint64_t v138 = v68;
              __int16 v139 = 2114;
              id v140 = v75;
              _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Reporting data stall to protocols",  v134,  0x48u);

              LOWORD(logging_description) = v114;
              os_log_type_t v29 = v115;
            }
          }

          uint64_t v4 = MEMORY[0x1895F87A8];
          goto LABEL_100;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v45 = (id)gLogObj;
        else {
          char v46 = off_189BBBBC0[mode];
        }
        *(_DWORD *)unint64_t v134 = 136446722;
        *(void *)&v134[4] = "nw_endpoint_handler_report_data_stall";
        *(_WORD *)&v134[12] = 2082;
        *(void *)&v134[14] = v46;
        *(_WORD *)&v134[22] = 2082;
        v135 = "flow";
        int v56 = (char *)_os_log_send_and_compose_impl();

        v132[0] = 16;
        buf[0] = 0;
        if (__nwlog_fault(v56, v132, buf))
        {
          if (v132[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v57 = (os_log_s *)(id)gLogObj;
            os_log_type_t v58 = v132[0];
            if (os_log_type_enabled(v57, (os_log_type_t)v132[0]))
            {
              else {
                __int16 v59 = off_189BBBBC0[mode];
              }
              *(_DWORD *)unint64_t v134 = 136446722;
              *(void *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(void *)&v134[14] = v59;
              *(_WORD *)&v134[22] = 2082;
              v135 = "flow";
              _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  v134,  0x20u);
            }
          }

          else if (buf[0])
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v57 = (os_log_s *)(id)gLogObj;
            os_log_type_t v61 = v132[0];
            BOOL v62 = os_log_type_enabled(v57, (os_log_type_t)v132[0]);
            if (backtrace_string)
            {
              if (v62)
              {
                else {
                  __int16 v63 = off_189BBBBC0[mode];
                }
                *(_DWORD *)unint64_t v134 = 136446978;
                *(void *)&v134[4] = "nw_endpoint_handler_report_data_stall";
                *(_WORD *)&v134[12] = 2082;
                *(void *)&v134[14] = v63;
                *(_WORD *)&v134[22] = 2082;
                v135 = "flow";
                *(_WORD *)uint64_t v136 = 2082;
                *(void *)&v136[2] = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v57,  v61,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  v134,  0x2Au);
              }

              free(backtrace_string);
              if (!v56) {
                goto LABEL_117;
              }
              goto LABEL_116;
            }

            if (v62)
            {
              else {
                int v74 = off_189BBBBC0[mode];
              }
              *(_DWORD *)unint64_t v134 = 136446722;
              *(void *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(void *)&v134[14] = v74;
              *(_WORD *)&v134[22] = 2082;
              v135 = "flow";
              _os_log_impl( &dword_181A5C000,  v57,  v61,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  v134,  0x20u);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v57 = (os_log_s *)(id)gLogObj;
            os_log_type_t v72 = v132[0];
            if (os_log_type_enabled(v57, (os_log_type_t)v132[0]))
            {
              else {
                int v73 = off_189BBBBC0[mode];
              }
              *(_DWORD *)unint64_t v134 = 136446722;
              *(void *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(void *)&v134[14] = v73;
              *(_WORD *)&v134[22] = 2082;
              v135 = "flow";
              _os_log_impl( &dword_181A5C000,  v57,  v72,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  v134,  0x20u);
            }
          }
        }

        if (!v56)
        {
LABEL_117:
          __int128 v79 = v117;
          goto LABEL_118;
        }

void sub_18254B4A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_connection_add_activity_on_nw_queueP24NWConcrete_nw_connectionPU25objcproto14OS_nw_activity8NSObjectb_block_invoke( uint64_t a1, __int16 a2, void *a3)
{
  int is_equal = nw_activity_is_equal(*(void **)(a1 + 32), a3);
  if (is_equal) {
    *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  }
  return is_equal ^ 1u;
}

void ___ZL39nw_connection_add_client_event_internalP24NWConcrete_nw_connection26nw_endpoint_client_event_tPU24objcproto13OS_xpc_object8NSObjectPU25objcproto14OS_nw_activityS2__block_invoke_119( uint64_t a1)
{
}

id nw_connection_copy_attempted_endpoint_array(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)tcp_info buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    unsigned int v19 = __Block_byref_object_copy__78582;
    int v20 = __Block_byref_object_dispose__78583;
    id v21 = 0LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_connection_copy_attempted_endpoint_array_block_invoke;
    v13[3] = &unk_189BC9210;
    uint64_t v14 = v1;
    id v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_attempted_endpoint_array_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    id v3 = *(id *)(*(void *)&buf[8] + 40LL);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_attempted_endpoint_array";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_attempted_endpoint_array";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_attempted_endpoint_array";
          *(_WORD *)&_DWORD buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_attempted_endpoint_array";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_attempted_endpoint_array";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_connection_copy_attempted_endpoint_array_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 328LL);
  if (v1)
  {
    uint64_t v3 = nw_array_create();
    if (v3 != v1)
    {
      uint64_t v4 = v3;
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v3 + 16,  *(void ***)(v1 + 16),  *(void ***)(v1 + 24),  (uint64_t)(*(void *)(v1 + 24) - *(void *)(v1 + 16)) >> 3);
      uint64_t v1 = v4;
    }

    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v1;
  }

void sub_18254D690( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_agent_client;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18254DD74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_agent_get_next_id(void)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  do
    unsigned int v0 = __ldaxr((unsigned int *)&nw_agent_get_next_id(void)::s_last_id);
  while (__stlxr(v0 + 1, (unsigned int *)&nw_agent_get_next_id(void)::s_last_id));
  uint64_t result = v0 + 1;
  if (v0 == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136446466;
      uint64_t v4 = "nw_agent_get_next_id";
      __int16 v5 = 1024;
      int v6 = 0;
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_ERROR,  "%{public}s reached %u agent ids, wrapping",  (uint8_t *)&v3,  0x12u);
    }

    return nw_agent_get_next_id();
  }

  return result;
}

uint64_t nw_agent_client_get_next_id(unsigned int *a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  do
  {
    unsigned int v2 = __ldaxr(a1);
    LODWORD(result) = v2 + 1;
  }

  while (__stlxr(v2 + 1, a1));
  if (result >= 0x100 && (_BYTE)v2 == 0xFF)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136446210;
      int v6 = "nw_agent_client_get_next_id";
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s reached maximum agent clients, wrapping",  (uint8_t *)&v5,  0xCu);
    }

    LOBYTE(result) = nw_agent_client_get_next_id(a1);
  }

  return result;
}

id nw_agent_client_copy_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  unsigned int v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_agent_client_copy_endpoint";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_agent_client_copy_endpoint";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null client, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null client, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_agent_client_copy_parameters(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  unsigned int v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_agent_client_copy_parameters";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_agent_client_copy_parameters";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null client, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_parameters";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null client, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_agent_client_copy_path(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  unsigned int v2 = v1;
  if (v1)
  {
    id v3 = v1[6];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_agent_client_copy_path";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_path";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_agent_client_copy_path";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null client, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_path";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_path";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null client, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_agent_client_copy_advertise_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  unsigned int v2 = v1;
  if (v1)
  {
    id v3 = v1[7];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_agent_client_copy_advertise_descriptor";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_agent_client_copy_advertise_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null client, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_advertise_descriptor";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null client, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_agent_client_copy_browse_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  unsigned int v2 = v1;
  if (v1)
  {
    id v3 = v1[8];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_agent_client_copy_browse_descriptor";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_agent_client_copy_browse_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null client, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_browse_descriptor";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null client, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_agent_client_copy_group_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  unsigned int v2 = v1;
  if (v1)
  {
    id v3 = v1[9];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_agent_client_copy_group_descriptor";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_group_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_agent_client_copy_group_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null client, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_group_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_agent_client_copy_group_descriptor";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null client, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_agent_send_error_response(void *a1, void *a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  int v5 = a1;
  int v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    char v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v47 = "nw_agent_send_error_response";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null agent", buf, 0xCu);
      }

      goto LABEL_70;
    }

    if (!v44)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v47 = "nw_agent_send_error_response";
        _os_log_impl( &dword_181A5C000,  v18,  v40,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_70;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v31 = type;
    BOOL v32 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_181A5C000, v18, v31, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }

      goto LABEL_70;
    }

    if (v32)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v47 = "nw_agent_send_error_response";
      __int16 v48 = 2082;
      uint64_t v49 = (uint64_t)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v18,  v31,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_18254FBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_agent_assign(NWConcrete_nw_agent *a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, char a5)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  if (!v9)
  {
    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v38 = "nw_agent_assign";
    uint64_t v24 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v24, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v38 = "nw_agent_assign";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null agent", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type;
        BOOL v31 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v38 = "nw_agent_assign";
            __int16 v39 = 2082;
            uint64_t v40 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v30,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }

        if (v31)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v38 = "nw_agent_assign";
          _os_log_impl(&dword_181A5C000, v25, v30, "%{public}s called with null agent, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v38 = "nw_agent_assign";
          _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18255027C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL15nw_agent_assignP19NWConcrete_nw_agentPhmS1_b_block_invoke(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 48)) {
    int v3 = 20;
  }
  else {
    int v3 = 11;
  }
  return nw_network_agent_ctl_setsockopt_inner( a2,  v3,  *(const unsigned __int8 **)(a1 + 32),  *(_DWORD *)(a1 + 40),  0LL,  0) == 0;
}

BOOL nw_agent_send_group_member_update(void *a1, void *a2, void *a3)
{
  int v5 = a1;
  int v6 = a2;
  unint64_t v10 = 0LL;
  BOOL v7 = nw_path_create_endpoint_array_result(&v10, a3, 213);
  BOOL v8 = nw_agent_assign(v5, (unsigned __int8 *)v7, v10, v6 + 8, 1);
  if (v7) {
    free((void *)v7);
  }

  return v8;
}

void sub_18255036C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_agent *nw_agent_create(const char *a1, const char *a2, const char *a3, void *a4)
{
  uint64_t v144 = *MEMORY[0x1895F89C0];
  BOOL v8 = a4;
  id v9 = v8;
  if (!a1)
  {
    __nwlog_obj();
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v139 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v90 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_181A5C000, v89, v90, "%{public}s called with null domain", location, 0xCu);
      }

      goto LABEL_213;
    }

    if (!v139)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v126 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl( &dword_181A5C000,  v89,  v126,  "%{public}s called with null domain, backtrace limit exceeded",  location,  0xCu);
      }

      goto LABEL_213;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v108 = type;
    BOOL v109 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v109)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_181A5C000, v89, v108, "%{public}s called with null domain, no backtrace", location, 0xCu);
      }

      goto LABEL_213;
    }

    if (v109)
    {
      *(_DWORD *)location = 136446466;
      *(void *)&location[4] = "nw_agent_create";
      __int16 v142 = 2082;
      uint64_t v143 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v89,  v108,  "%{public}s called with null domain, dumping backtrace:%{public}s",  location,  0x16u);
    }

    goto LABEL_146;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v91 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v139 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v92 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_181A5C000, v89, v92, "%{public}s called with null type", location, 0xCu);
      }

      goto LABEL_213;
    }

    if (!v139)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v127 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl( &dword_181A5C000,  v89,  v127,  "%{public}s called with null type, backtrace limit exceeded",  location,  0xCu);
      }

      goto LABEL_213;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v110 = type;
    BOOL v111 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v111)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_181A5C000, v89, v110, "%{public}s called with null type, no backtrace", location, 0xCu);
      }

      goto LABEL_213;
    }

    if (v111)
    {
      *(_DWORD *)location = 136446466;
      *(void *)&location[4] = "nw_agent_create";
      __int16 v142 = 2082;
      uint64_t v143 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v89,  v110,  "%{public}s called with null type, dumping backtrace:%{public}s",  location,  0x16u);
    }

    goto LABEL_146;
  }

  if (!v8)
  {
    __nwlog_obj();
    os_log_type_t v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v139 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v94 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_181A5C000, v89, v94, "%{public}s called with null queue", location, 0xCu);
      }

      goto LABEL_213;
    }

    if (!v139)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v128 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl( &dword_181A5C000,  v89,  v128,  "%{public}s called with null queue, backtrace limit exceeded",  location,  0xCu);
      }

      goto LABEL_213;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v112 = type;
    BOOL v113 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v113)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_181A5C000, v89, v112, "%{public}s called with null queue, no backtrace", location, 0xCu);
      }

      goto LABEL_213;
    }

    if (v113)
    {
      *(_DWORD *)location = 136446466;
      *(void *)&location[4] = "nw_agent_create";
      __int16 v142 = 2082;
      uint64_t v143 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v89,  v112,  "%{public}s called with null queue, dumping backtrace:%{public}s",  location,  0x16u);
    }

    goto LABEL_146;
  }

  if (strlen(a1) >= 0x20)
  {
    __nwlog_obj();
    os_log_type_t v95 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v139 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v96 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_181A5C000, v89, v96, "%{public}s called with null (strlen(domain) < 32)", location, 0xCu);
      }

      goto LABEL_213;
    }

    if (!v139)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v129 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl( &dword_181A5C000,  v89,  v129,  "%{public}s called with null (strlen(domain) < 32), backtrace limit exceeded",  location,  0xCu);
      }

      goto LABEL_213;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v114 = type;
    BOOL v115 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v115)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl( &dword_181A5C000,  v89,  v114,  "%{public}s called with null (strlen(domain) < 32), no backtrace",  location,  0xCu);
      }

      goto LABEL_213;
    }

    if (v115)
    {
      *(_DWORD *)location = 136446466;
      *(void *)&location[4] = "nw_agent_create";
      __int16 v142 = 2082;
      uint64_t v143 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v89,  v114,  "%{public}s called with null (strlen(domain) < 32), dumping backtrace:%{public}s",  location,  0x16u);
    }

    goto LABEL_146;
  }

  if (strlen(a2) >= 0x20)
  {
    __nwlog_obj();
    unsigned int v97 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v139 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v98 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_181A5C000, v89, v98, "%{public}s called with null (strlen(type) < 32)", location, 0xCu);
      }

      goto LABEL_213;
    }

    if (!v139)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v130 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl( &dword_181A5C000,  v89,  v130,  "%{public}s called with null (strlen(type) < 32), backtrace limit exceeded",  location,  0xCu);
      }

      goto LABEL_213;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v116 = type;
    BOOL v117 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v117)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl( &dword_181A5C000,  v89,  v116,  "%{public}s called with null (strlen(type) < 32), no backtrace",  location,  0xCu);
      }

      goto LABEL_213;
    }

    if (v117)
    {
      *(_DWORD *)location = 136446466;
      *(void *)&location[4] = "nw_agent_create";
      __int16 v142 = 2082;
      uint64_t v143 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v89,  v116,  "%{public}s called with null (strlen(type) < 32), dumping backtrace:%{public}s",  location,  0x16u);
    }

void sub_1825518A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_agent_create_block_invoke(uint64_t a1)
{
}

void __nw_agent_create_block_invoke_2(uint64_t a1)
{
  WeakRetained = (NWConcrete_nw_agent *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *((void *)WeakRetained + 106) == *(void *)(a1 + 32))
  {
    while (nw_agent_read_message_on_queue(WeakRetained))
      ;
  }
}

void sub_182551930( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_agent_read_message_on_queue(NWConcrete_nw_agent *a1)
{
  uint64_t v417 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v1 + 27));
  uint64_t v401 = 0LL;
  __int16 v402 = &v401;
  uint64_t v403 = 0x2020000000LL;
  uint64_t v404 = 0LL;
  unsigned int v2 = (void *)*((void *)v1 + 105);
  v400[0] = MEMORY[0x1895F87A8];
  v400[1] = 3221225472LL;
  v400[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke;
  v400[3] = &unk_189BC78E8;
  v400[4] = &v401;
  nw_fd_wrapper_get_fd(v2, v400);
  int v3 = (_BYTE *)v402[3];
  if (!v3)
  {
    BOOL v297 = 0;
    goto LABEL_508;
  }

  if (*v3 == 25)
  {
    *(void *)out = 0LL;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000LL;
    *(void *)&out[24] = __Block_byref_object_copy__79337;
    *(void *)&out[32] = __Block_byref_object_dispose__79338;
    *(void *)&out[40] = 0LL;
    v397[0] = MEMORY[0x1895F87A8];
    v397[1] = 3221225472LL;
    v397[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_153;
    v397[3] = &unk_189BC9210;
    v399 = out;
    __int16 v398 = v1;
    uint64_t v4 = v398 + 2;
    os_unfair_lock_lock(v398 + 2);
    ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_153((uint64_t)v397);
    os_unfair_lock_unlock(v4);
    uint64_t v5 = *(void *)(*(void *)&out[8] + 40LL);
    if (v5)
    {
      (*(void (**)(void))(v5 + 16))();
LABEL_170:
      os_log_type_t v82 = (void *)v402[3];
      if (v82)
      {
        free(v82);
        v402[3] = 0LL;
      }

      _Block_object_dispose(out, 8);
      BOOL v297 = 1;
      goto LABEL_508;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    LOBYTE(uu) = 0;
    if (__nwlog_fault(v12, v413, &uu))
    {
      if (v413[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = v413[0];
        if (os_log_type_enabled(v13, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s No handler for TOKENS_NEEDED", buf, 0xCu);
        }
      }

      else if ((_BYTE)uu)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          int v21 = (char *)backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v22 = (os_log_s *)(id)gLogObj;
          os_log_type_t v23 = v413[0];
          if (os_log_type_enabled(v22, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
            *(_WORD *)&_DWORD buf[12] = 2082;
            *(void *)&buf[14] = v21;
            _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s No handler for TOKENS_NEEDED, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v21);
          if (!v12) {
            goto LABEL_170;
          }
          goto LABEL_169;
        }

        __nwlog_obj();
        int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v81 = v413[0];
        if (os_log_type_enabled(v13, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v13, v81, "%{public}s No handler for TOKENS_NEEDED, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v75 = v413[0];
        if (os_log_type_enabled(v13, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v13,  v75,  "%{public}s No handler for TOKENS_NEEDED, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v12) {
      goto LABEL_170;
    }
LABEL_169:
    free(v12);
    goto LABEL_170;
  }

  *(void *)tcp_info buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  uint64_t v409 = __Block_byref_object_copy__154;
  char v410 = __Block_byref_object_dispose__155;
  id v411 = 0LL;
  v392[0] = MEMORY[0x1895F87A8];
  v392[1] = 3221225472LL;
  int v393 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_156;
  __int16 v394 = &unk_189BC9210;
  __int16 v396 = buf;
  v395 = v1;
  int v6 = v395;
  BOOL v7 = v392;
  unsigned int v298 = v6;
  v6 += 2;
  os_unfair_lock_lock(v6);
  v393((uint64_t)v7);
  lock = v6;
  os_unfair_lock_unlock(v6);

  if (!*(void *)(*(void *)&buf[8] + 40LL))
  {
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    objc_storeStrong((id *)(*(void *)&buf[8] + 40LL), (id)nw_context_copy_implicit_context::implicit_context);
  }

  __int128 uu = 0uLL;
  BOOL v8 = (unsigned __int8 *)v402[3];
  if (!v8)
  {
    __nwlog_obj();
    os_log_type_t v89 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_agent_get_uuid_for_message";
    os_log_type_t v90 = (char *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v90, v413, &type))
    {
      if (v413[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v92 = v413[0];
        if (os_log_type_enabled(v91, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_get_uuid_for_message";
          _os_log_impl(&dword_181A5C000, v91, v92, "%{public}s called with null message", out, 0xCu);
        }
      }

      else if (type)
      {
        unsigned int v97 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v98 = v413[0];
        BOOL v99 = os_log_type_enabled(v91, (os_log_type_t)v413[0]);
        if (v97)
        {
          if (v99)
          {
            *(_DWORD *)out = 136446466;
            *(void *)&out[4] = "nw_agent_get_uuid_for_message";
            *(_WORD *)&out[12] = 2082;
            *(void *)&out[14] = v97;
            _os_log_impl( &dword_181A5C000,  v91,  v98,  "%{public}s called with null message, dumping backtrace:%{public}s",  out,  0x16u);
          }

          free(v97);
          goto LABEL_230;
        }

        if (v99)
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_get_uuid_for_message";
          _os_log_impl(&dword_181A5C000, v91, v98, "%{public}s called with null message, no backtrace", out, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v107 = v413[0];
        if (os_log_type_enabled(v91, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_get_uuid_for_message";
          _os_log_impl( &dword_181A5C000,  v91,  v107,  "%{public}s called with null message, backtrace limit exceeded",  out,  0xCu);
        }
      }
    }

LABEL_345:
    if (v153) {
      free(v153);
    }
    goto LABEL_347;
  }

  if (*(_DWORD *)(v142 + 12) >= 0x14u && *(_BYTE *)v142 == 26)
  {
    uint64_t v143 = *(unsigned int *)(v142 + 32);
    goto LABEL_348;
  }

                  goto LABEL_379;
                }

                if (!v349)
                {
                  __nwlog_obj();
                  uint64_t v290 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v309 = v352;
                  if (os_log_type_enabled(v290, v352))
                  {
                    unsigned int v310 = output_handler->identifier->name;
                    if (!v310) {
                      unsigned int v310 = "invalid";
                    }
                    *(_DWORD *)tcp_info buf = 136446722;
                    v358 = "__nw_protocol_replace_input_handler";
                    char v359 = 2082;
                    unint64_t v360 = (char *)v310;
                    v361 = 2048;
                    unsigned int v362 = (const char *)output_handler;
                    _os_log_impl( &dword_181A5C000,  v290,  v309,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
                  }

                  goto LABEL_345;
                }

                v299 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v300 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                uint64_t v301 = v352;
                unint64_t v302 = os_log_type_enabled(v300, v352);
                if (v299)
                {
                  if (v302)
                  {
                    v303 = output_handler->identifier->name;
                    if (!v303) {
                      v303 = "invalid";
                    }
                    *(_DWORD *)tcp_info buf = 136446978;
                    v358 = "__nw_protocol_replace_input_handler";
                    char v359 = 2082;
                    unint64_t v360 = (char *)v303;
                    v361 = 2048;
                    unsigned int v362 = (const char *)output_handler;
                    v363 = 2082;
                    v364 = v299;
                    _os_log_impl( &dword_181A5C000,  v300,  v301,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                  }

                  free(v299);
                }

                else
                {
                  if (v302)
                  {
                    uint64_t v311 = output_handler->identifier->name;
                    if (!v311) {
                      uint64_t v311 = "invalid";
                    }
                    *(_DWORD *)tcp_info buf = 136446722;
                    v358 = "__nw_protocol_replace_input_handler";
                    char v359 = 2082;
                    unint64_t v360 = (char *)v311;
                    v361 = 2048;
                    unsigned int v362 = (const char *)output_handler;
                    _os_log_impl( &dword_181A5C000,  v300,  v301,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace",  buf,  0x20u);
                  }
                }
              }

                                goto LABEL_384;
                              }

                              if (v349 == OS_LOG_TYPE_DEFAULT)
                              {
                                __nwlog_obj();
                                BOOL v294 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                                unsigned int v310 = v347[0];
                                if (os_log_type_enabled(v294, v347[0]))
                                {
                                  uint64_t v311 = *(const char **)(internal + 16);
                                  if (!v311) {
                                    uint64_t v311 = "invalid";
                                  }
                                  *(_DWORD *)tcp_info buf = 136446722;
                                  uint64_t v355 = "__nw_protocol_remove_input_handler";
                                  uint64_t v356 = 2082;
                                  unint64_t v357 = (char *)v311;
                                  v358 = 2048;
                                  char v359 = (const char *)internal;
                                  _os_log_impl( &dword_181A5C000,  v294,  v310,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backt race limit exceeded",  buf,  0x20u);
                                }

                                goto LABEL_345;
                              }

                              unint64_t v302 = (char *)__nw_create_backtrace_string();
                              __nwlog_obj();
                              v303 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                              unsigned int v304 = v347[0];
                              unint64_t v305 = os_log_type_enabled(v303, v347[0]);
                              if (v302)
                              {
                                if (v305)
                                {
                                  v306 = *(const char **)(internal + 16);
                                  if (!v306) {
                                    v306 = "invalid";
                                  }
                                  *(_DWORD *)tcp_info buf = 136446978;
                                  uint64_t v355 = "__nw_protocol_remove_input_handler";
                                  uint64_t v356 = 2082;
                                  unint64_t v357 = (char *)v306;
                                  v358 = 2048;
                                  char v359 = (const char *)internal;
                                  unint64_t v360 = 2082;
                                  v361 = v302;
                                  _os_log_impl( &dword_181A5C000,  v303,  v304,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumpi ng backtrace:%{public}s",  buf,  0x2Au);
                                }

                                free(v302);
                              }

                              else
                              {
                                if (v305)
                                {
                                  v312 = *(const char **)(internal + 16);
                                  if (!v312) {
                                    v312 = "invalid";
                                  }
                                  *(_DWORD *)tcp_info buf = 136446722;
                                  uint64_t v355 = "__nw_protocol_remove_input_handler";
                                  uint64_t v356 = 2082;
                                  unint64_t v357 = (char *)v312;
                                  v358 = 2048;
                                  char v359 = (const char *)internal;
                                  _os_log_impl( &dword_181A5C000,  v303,  v304,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace",  buf,  0x20u);
                                }
                              }
                            }

                  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) != 0
                    || !*((_BYTE *)v8 + 1537))
                  {
                    goto LABEL_195;
                  }

                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  unsigned int v220 = gconnectionLogObj;
                  if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_195;
                  }
                  BOOL v222 = *(_DWORD *)(a3 + 176);
                  os_log_type_t v221 = *(_DWORD *)(a3 + 180);
                  LODWORD(buf[0]) = 136447746;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_message";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = a3 + 191;
                  HIWORD(buf[2]) = 2080;
                  *(void *)&v370 = " ";
                  WORD4(v370) = 1024;
                  *(_DWORD *)((char *)&v370 + 10) = v221;
                  HIWORD(v370) = 1024;
                  LODWORD(v371[0]) = v222;
                  WORD2(v371[0]) = 1024;
                  *(_DWORD *)((char *)v371 + 6) = v222;
                  WORD1(v371[1]) = 2048;
                  *(void **)((char *)&v371[1] + 4) = (void *)a4;
                  id v131 = "%{public}s %{public}s%s<i%u:s%d> couldn't send frame on stream %d, adding frame %p to waiting_output_frames";
                  os_log_type_t v223 = (os_log_s *)v220;
                  int v224 = 60;
                  goto LABEL_466;
                }

                __nwlog_obj();
                int8x16_t v188 = nghttp2_strerror();
                LODWORD(buf[0]) = 136446722;
                *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                WORD2(buf[1]) = 2082;
                *(void *)((char *)&buf[1] + 6) = v188;
                HIWORD(buf[2]) = 1024;
                LODWORD(v370) = v143;
                uint64_t v189 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(v366[0]) = 16;
                LOBYTE(v365[0]) = 0;
                if (LOBYTE(v366[0]) == 17)
                {
                  id v190 = (os_log_s *)__nwlog_obj();
                  uint64_t v191 = v366[0];
                  if (!os_log_type_enabled(v190, v366[0])) {
                    goto LABEL_342;
                  }
                  uint64_t v192 = nghttp2_strerror();
                  LODWORD(buf[0]) = 136446722;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = v192;
                  HIWORD(buf[2]) = 1024;
                  LODWORD(v370) = v143;
                  os_log_type_t v193 = "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed";
                }

                else if (LOBYTE(v365[0]))
                {
                  int v198 = (char *)__nw_create_backtrace_string();
                  id v190 = (os_log_s *)__nwlog_obj();
                  uint64_t v191 = v366[0];
                  uint64_t v199 = os_log_type_enabled(v190, v366[0]);
                  if (v198)
                  {
                    if (v199)
                    {
                      uint64_t v200 = nghttp2_strerror();
                      LODWORD(buf[0]) = 136446978;
                      *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                      WORD2(buf[1]) = 2082;
                      *(void *)((char *)&buf[1] + 6) = v200;
                      HIWORD(buf[2]) = 1024;
                      LODWORD(v370) = v143;
                      WORD2(v370) = 2082;
                      *(void *)((char *)&v370 + 6) = v198;
                      _os_log_impl( &dword_181A5C000,  v190,  v191,  "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x26u);
                    }

                    free(v198);
LABEL_342:
                    if (v189) {
                      free(v189);
                    }
                    if (v176 == -529) {
                      goto LABEL_345;
                    }
                    if ((*(_WORD *)(a1 + 388) & 8) == 0)
                    {
                      if (v176 != -1)
                      {
                        if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) != 0)
                        {
LABEL_37:
                          nw_frame_cache_return_frame(a1 + 200, a4);
                          return 1LL;
                        }

                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        unsigned int v225 = a3 + 191;
                        uint64_t v227 = *(_DWORD *)(a3 + 176);
                        v226 = *(_DWORD *)(a3 + 180);
                        unsigned int v228 = (void *)nghttp2_strerror();
                        LODWORD(buf[0]) = 136447746;
                        *(void *)((char *)buf + 4) = "nw_http2_submit_message";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = a3 + 191;
                        HIWORD(buf[2]) = 2080;
                        *(void *)&v370 = " ";
                        WORD4(v370) = 1024;
                        *(_DWORD *)((char *)&v370 + 10) = v226;
                        HIWORD(v370) = 1024;
                        LODWORD(v371[0]) = v227;
                        WORD2(v371[0]) = 2080;
                        *(void **)((char *)v371 + 6) = v228;
                        HIWORD(v371[1]) = 2048;
                        v371[2] = (void *)a4;
                        id v229 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v374[0]) = 16;
                        LOBYTE(v366[0]) = 0;
                        if (__nwlog_fault(v229, v374, v366))
                        {
                          if (LOBYTE(v374[0]) == 17)
                          {
                            if (__nwlog_connection_log::onceToken != -1) {
                              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                            }
                            v230 = (os_log_s *)gconnectionLogObj;
                            os_log_type_t v231 = v374[0];
                            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v374[0])) {
                              goto LABEL_405;
                            }
                            uint64_t v234 = a3 + 176;
                            os_log_type_t v232 = *(_DWORD *)(a3 + 176);
                            v233 = *(_DWORD *)(v234 + 4);
                            id v235 = (void *)nghttp2_strerror();
                            LODWORD(buf[0]) = 136447746;
                            *(void *)((char *)buf + 4) = "nw_http2_submit_message";
                            WORD2(buf[1]) = 2082;
                            *(void *)((char *)&buf[1] + 6) = v225;
                            HIWORD(buf[2]) = 2080;
                            *(void *)&v370 = " ";
                            WORD4(v370) = 1024;
                            *(_DWORD *)((char *)&v370 + 10) = v233;
                            HIWORD(v370) = 1024;
                            LODWORD(v371[0]) = v232;
                            WORD2(v371[0]) = 2080;
                            *(void **)((char *)v371 + 6) = v235;
                            HIWORD(v371[1]) = 2048;
                            v371[2] = (void *)a4;
                            uint64_t v236 = "%{public}s %{public}s%s<i%u:s%d> failed to submit data (%s), returning frame %p to cache";
                            goto LABEL_404;
                          }

                          if (!LOBYTE(v366[0]))
                          {
                            if (__nwlog_connection_log::onceToken != -1) {
                              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                            }
                            v230 = (os_log_s *)gconnectionLogObj;
                            os_log_type_t v231 = v374[0];
                            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v374[0])) {
                              goto LABEL_405;
                            }
                            BOOL v252 = a3 + 176;
                            uint64_t v250 = *(_DWORD *)(a3 + 176);
                            os_log_type_t v251 = *(_DWORD *)(v252 + 4);
                            os_log_type_t v253 = (void *)nghttp2_strerror();
                            LODWORD(buf[0]) = 136447746;
                            *(void *)((char *)buf + 4) = "nw_http2_submit_message";
                            WORD2(buf[1]) = 2082;
                            *(void *)((char *)&buf[1] + 6) = v225;
                            HIWORD(buf[2]) = 2080;
                            *(void *)&v370 = " ";
                            WORD4(v370) = 1024;
                            *(_DWORD *)((char *)&v370 + 10) = v251;
                            HIWORD(v370) = 1024;
                            LODWORD(v371[0]) = v250;
                            WORD2(v371[0]) = 2080;
                            *(void **)((char *)v371 + 6) = v253;
                            HIWORD(v371[1]) = 2048;
                            v371[2] = (void *)a4;
                            uint64_t v236 = "%{public}s %{public}s%s<i%u:s%d> failed to submit data (%s), returning frame %p to ca"
                                   "che, backtrace limit exceeded";
                            goto LABEL_404;
                          }

                          uint64_t v237 = (char *)__nw_create_backtrace_string();
                          if (__nwlog_connection_log::onceToken != -1) {
                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                          }
                          v230 = (os_log_s *)gconnectionLogObj;
                          os_log_type_t v231 = v374[0];
                          os_log_type_t v238 = os_log_type_enabled((os_log_t)gconnectionLogObj, v374[0]);
                          if (v237)
                          {
                            if (v238)
                            {
                              BOOL v241 = a3 + 176;
                              uint64_t v239 = *(_DWORD *)(a3 + 176);
                              os_log_type_t v240 = *(_DWORD *)(v241 + 4);
                              os_log_type_t v242 = (void *)nghttp2_strerror();
                              LODWORD(buf[0]) = 136448002;
                              *(void *)((char *)buf + 4) = "nw_http2_submit_message";
                              WORD2(buf[1]) = 2082;
                              *(void *)((char *)&buf[1] + 6) = v225;
                              HIWORD(buf[2]) = 2080;
                              *(void *)&v370 = " ";
                              WORD4(v370) = 1024;
                              *(_DWORD *)((char *)&v370 + 10) = v240;
                              HIWORD(v370) = 1024;
                              LODWORD(v371[0]) = v239;
                              WORD2(v371[0]) = 2080;
                              *(void **)((char *)v371 + 6) = v242;
                              HIWORD(v371[1]) = 2048;
                              v371[2] = (void *)a4;
                              unsigned int v372 = 2082;
                              uint64_t v373 = v237;
                              _os_log_impl( &dword_181A5C000,  v230,  v231,  "%{public}s %{public}s%s<i%u:s%d> failed to submit data (%s), returning frame %p to cache , dumping backtrace:%{public}s",  (uint8_t *)buf,  0x4Au);
                            }

                            free(v237);
                            goto LABEL_405;
                          }

                          if (v238)
                          {
                            os_log_type_t v271 = a3 + 176;
                            unsigned int v269 = *(_DWORD *)(a3 + 176);
                            os_log_type_t v270 = *(_DWORD *)(v271 + 4);
                            os_log_type_t v272 = (void *)nghttp2_strerror();
                            LODWORD(buf[0]) = 136447746;
                            *(void *)((char *)buf + 4) = "nw_http2_submit_message";
                            WORD2(buf[1]) = 2082;
                            *(void *)((char *)&buf[1] + 6) = v225;
                            HIWORD(buf[2]) = 2080;
                            *(void *)&v370 = " ";
                            WORD4(v370) = 1024;
                            *(_DWORD *)((char *)&v370 + 10) = v270;
                            HIWORD(v370) = 1024;
                            LODWORD(v371[0]) = v269;
                            WORD2(v371[0]) = 2080;
                            *(void **)((char *)v371 + 6) = v272;
                            HIWORD(v371[1]) = 2048;
                            v371[2] = (void *)a4;
                            uint64_t v236 = "%{public}s %{public}s%s<i%u:s%d> failed to submit data (%s), returning frame %p to ca"
                                   "che, no backtrace";
LABEL_404:
                            _os_log_impl(&dword_181A5C000, v230, v231, v236, (uint8_t *)buf, 0x40u);
                          }
                        }

LABEL_561:
    if (v260) {
      free(v260);
    }
    goto LABEL_563;
  }

  int v166 = *v114;
  if (v166 == 14)
  {
    *(void *)out = 0LL;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000LL;
    *(void *)&out[24] = __Block_byref_object_copy__79337;
    *(void *)&out[32] = __Block_byref_object_dispose__79338;
    *(void *)&out[40] = 0LL;
    v368[0] = MEMORY[0x1895F87A8];
    v368[1] = 3221225472LL;
    v369 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_162;
    v370 = &unk_189BC9210;
    unsigned int v372 = out;
    unsigned int v371 = v298;
    v167 = v371;
    os_log_type_t v168 = v368;
    os_unfair_lock_lock(v116);
    v369((uint64_t)v168);
    os_unfair_lock_unlock(v116);

    uint64_t v169 = *(void *)(*(void *)&out[8] + 40LL);
    if (v169)
    {
      v365[0] = MEMORY[0x1895F87A8];
      v365[1] = 3221225472LL;
      v365[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_163;
      v365[3] = &unk_189BC7780;
      v366 = v167;
      v367 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, void *))(v169 + 16))(v169, v367, v365);

      goto LABEL_383;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v170 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    __int128 v414 = "nw_agent_read_message_on_queue";
    os_log_type_t v171 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v405 = 0;
    if (__nwlog_fault(v171, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unsigned int v172 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v173 = type;
        if (os_log_type_enabled(v172, type))
        {
          *(_DWORD *)v413 = 136446210;
          __int128 v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v172, v173, "%{public}s No handler for CLIENT_ASSERT", v413, 0xCu);
        }

        goto LABEL_380;
      }

      if (v405)
      {
        uint64x2_t v178 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v172 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v179 = type;
        BOOL v180 = os_log_type_enabled(v172, type);
        if (v178)
        {
          if (v180)
          {
            *(_DWORD *)v413 = 136446466;
            __int128 v414 = "nw_agent_read_message_on_queue";
            __int16 v415 = 2082;
            __int128 v416 = v178;
            _os_log_impl( &dword_181A5C000,  v172,  v179,  "%{public}s No handler for CLIENT_ASSERT, dumping backtrace:%{public}s",  v413,  0x16u);
          }

          free(v178);
          goto LABEL_381;
        }

        if (v180)
        {
          *(_DWORD *)v413 = 136446210;
          __int128 v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v172,  v179,  "%{public}s No handler for CLIENT_ASSERT, no backtrace",  v413,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unsigned int v172 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v186 = type;
        if (os_log_type_enabled(v172, type))
        {
          *(_DWORD *)v413 = 136446210;
          __int128 v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v172,  v186,  "%{public}s No handler for CLIENT_ASSERT, backtrace limit exceeded",  v413,  0xCu);
        }
      }

LABEL_402:
    }

LABEL_407:
  int v198 = *v114;
  if (v198 == 10)
  {
    *(void *)out = 0LL;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000LL;
    *(void *)&out[24] = __Block_byref_object_copy__79337;
    *(void *)&out[32] = __Block_byref_object_dispose__79338;
    *(void *)&out[40] = 0LL;
    v328[0] = MEMORY[0x1895F87A8];
    v328[1] = 3221225472LL;
    uint64_t v329 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_173;
    uint64_t v330 = &unk_189BC9210;
    uint64_t v332 = out;
    uint64_t v331 = v298;
    uint64_t v199 = v331;
    uint64_t v200 = v328;
    os_unfair_lock_lock(v116);
    v329((uint64_t)v200);
    os_unfair_lock_unlock(v116);

    uint64_t v201 = *(void *)(*(void *)&out[8] + 40LL);
    if (v201)
    {
      v325[0] = MEMORY[0x1895F87A8];
      v325[1] = 3221225472LL;
      v325[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_174;
      v325[3] = &unk_189BC77F8;
      uint64_t v326 = v199;
      uint64_t v327 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, void *))(v201 + 16))(v201, v327, v325);

      goto LABEL_428;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v202 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    __int128 v414 = "nw_agent_read_message_on_queue";
    int8x16_t v203 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v405 = 0;
    if (__nwlog_fault(v203, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int8x16_t v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v205 = type;
        if (os_log_type_enabled(v204, type))
        {
          *(_DWORD *)v413 = 136446210;
          __int128 v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v204, v205, "%{public}s No handler for REQUEST_NEXUS", v413, 0xCu);
        }

        goto LABEL_425;
      }

      if (v405)
      {
        int64x2_t v206 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int8x16_t v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v207 = type;
        BOOL v208 = os_log_type_enabled(v204, type);
        if (v206)
        {
          if (v208)
          {
            *(_DWORD *)v413 = 136446466;
            __int128 v414 = "nw_agent_read_message_on_queue";
            __int16 v415 = 2082;
            __int128 v416 = v206;
            _os_log_impl( &dword_181A5C000,  v204,  v207,  "%{public}s No handler for REQUEST_NEXUS, dumping backtrace:%{public}s",  v413,  0x16u);
          }

          free(v206);
          goto LABEL_426;
        }

        if (v208)
        {
          *(_DWORD *)v413 = 136446210;
          __int128 v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v204,  v207,  "%{public}s No handler for REQUEST_NEXUS, no backtrace",  v413,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int8x16_t v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v209 = type;
        if (os_log_type_enabled(v204, type))
        {
          *(_DWORD *)v413 = 136446210;
          __int128 v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v204,  v209,  "%{public}s No handler for REQUEST_NEXUS, backtrace limit exceeded",  v413,  0xCu);
        }
      }

          goto LABEL_408;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          uint64_t v141 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v169 = v370[0];
          if (os_log_type_enabled(v141, v370[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            uint64_t v378 = "__nw_protocol_replace_input_handler";
            _os_log_impl( &dword_181A5C000,  v141,  v169,  "%{public}s called with null new_input_protocol, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_407;
        }

        nw_endpoint_t v160 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v141 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v349 = v370[0];
        os_log_type_t v161 = os_log_type_enabled(v141, v370[0]);
        if (!v160)
        {
          if (v161)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            uint64_t v378 = "__nw_protocol_replace_input_handler";
            _os_log_impl( &dword_181A5C000,  v141,  v349,  "%{public}s called with null new_input_protocol, no backtrace",  buf,  0xCu);
          }

          goto LABEL_407;
        }

        if (v161)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v378 = "__nw_protocol_replace_input_handler";
          uint64_t v379 = 2082;
          v380 = v160;
          _os_log_impl( &dword_181A5C000,  v141,  v349,  "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v160);
LABEL_408:
        if (v140) {
          free(v140);
        }
        os_log_type_t v81 = 0;
        if ((v75 & 1) != 0) {
          goto LABEL_180;
        }
LABEL_181:
        if ((v376 & 1) != 0)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)v375);
          if ((v81 & 1) == 0)
          {
LABEL_557:
            if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v214 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
              {
                os_log_t loga = v214;
                BOOL v275 = nw_endpoint_handler_get_id_string(v362);
                os_log_type_t v276 = nw_endpoint_handler_dry_run_string(v362);
                BOOL v277 = nw_endpoint_handler_copy_endpoint(v362);
                os_log_type_t v278 = nw_endpoint_get_logging_description(v277);
                unsigned int v279 = nw_endpoint_handler_state_string(v362);
                v280 = nw_endpoint_handler_mode_string(v362);
                uint64_t v281 = nw_endpoint_handler_copy_current_path(v362);
                os_log_type_t v282 = v281;
                BOOL v283 = "invalid";
                if (v359 && *(void *)(v359 + 16)) {
                  BOOL v283 = *(const char **)(v359 + 16);
                }
                *(_DWORD *)tcp_info buf = 136448258;
                uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
                uint64_t v379 = 2082;
                v380 = (char *)v275;
                v381 = 2082;
                unsigned int v382 = v276;
                v383 = 2082;
                char v384 = (void *)v278;
                uint64_t v385 = 2082;
                v386 = v279;
                char v387 = 2082;
                v388 = v280;
                uint64_t v389 = 2114;
                __int16 v390 = v281;
                v391 = 2082;
                __int16 v392 = v12;
                int v393 = 2082;
                __int16 v394 = (void *)v283;
                _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to replace pro tocol %{public}s with %{public}s",  buf,  0x5Cu);

                goto LABEL_599;
              }

              goto LABEL_600;
            }

            goto LABEL_601;
          }
        }

        else if ((v81 & 1) == 0)
        {
          goto LABEL_557;
        }

LABEL_456:
      }

        os_log_type_t v197 = v362;
        int v198 = (*((_BYTE *)v197 + 268) & 0x20) == 0;

        if (v198)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v199 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v200 = v197;

            uint64_t v201 = v200;
            id v202 = (*((_BYTE *)v197 + 268) & 1) == 0;

            if (v202) {
              int8x16_t v203 = "";
            }
            else {
              int8x16_t v203 = "dry-run ";
            }
            int8x16_t v204 = nw_endpoint_handler_copy_endpoint(v201);
            os_log_type_t v205 = nw_endpoint_get_logging_description(v204);
            int64x2_t v206 = v201;
            os_log_type_t v207 = v206;
            BOOL v208 = v357->state;
            else {
              os_log_type_t v209 = off_189BBBBF0[v208];
            }

            uint64_t v210 = v207;
            uint64_t v211 = v210;
            uint64_t v212 = v4[29];
            uint64_t v213 = "path";
            switch(v212)
            {
              case 0u:
                break;
              case 1u:
                uint64_t v213 = "resolver";
                break;
              case 2u:
                uint64_t v213 = nw_endpoint_flow_mode_string(v210[31]);
                break;
              case 3u:
                uint64_t v213 = "proxy";
                break;
              case 4u:
                uint64_t v213 = "fallback";
                break;
              case 5u:
                uint64_t v213 = "transform";
                break;
              default:
                uint64_t v213 = "unknown-mode";
                break;
            }

            uint64_t v244 = v211;
            os_unfair_lock_lock((os_unfair_lock_t)v244 + 28);
            uint64_t v245 = v244[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v244 + 28);

            *(_DWORD *)tcp_info buf = 136447746;
            uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
            uint64_t v379 = 2082;
            v380 = v200 + 168;
            v381 = 2082;
            unsigned int v382 = v203;
            v383 = 2082;
            char v384 = (void *)v205;
            uint64_t v385 = 2082;
            v386 = v209;
            char v387 = 2082;
            v388 = v213;
            uint64_t v389 = 2114;
            __int16 v390 = v245;
            _os_log_impl( &dword_181A5C000,  v199,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No modifications made to protocol stack",  buf,  0x48u);
          }
        }

        BOOL v196 = 1LL;
LABEL_602:

LABEL_603:
        return v196;
      case 3:
        if (!identifier)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v214 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            {
              os_log_t loga = v214;
              BOOL v222 = nw_endpoint_handler_get_id_string(v362);
              os_log_type_t v223 = nw_endpoint_handler_dry_run_string(v362);
              int v224 = nw_endpoint_handler_copy_endpoint(v362);
              unsigned int v225 = nw_endpoint_get_logging_description(v224);
              v226 = nw_endpoint_handler_state_string(v362);
              uint64_t v227 = nw_endpoint_handler_mode_string(v362);
              unsigned int v228 = nw_endpoint_handler_copy_current_path(v362);
              *(_DWORD *)tcp_info buf = 136448002;
              uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
              uint64_t v379 = 2082;
              v380 = (char *)v222;
              v381 = 2082;
              unsigned int v382 = v223;
              v383 = 2082;
              char v384 = (void *)v225;
              uint64_t v385 = 2082;
              v386 = v226;
              char v387 = 2082;
              v388 = v227;
              uint64_t v389 = 2114;
              __int16 v390 = v228;
              v391 = 2082;
              __int16 v392 = v12;
              _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot insert NULL prot ocol after %{public}s",  buf,  0x52u);

              goto LABEL_599;
            }

            goto LABEL_600;
          }

          goto LABEL_601;
        }

        unsigned int v25 = nw_endpoint_handler_copy_endpoint(v362);
        uint64_t v26 = nw_endpoint_handler_create_protocol_for_definition((uint64_t)identifier, v20, v25, v361);

        if (!v26)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v214 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR)) {
            goto LABEL_600;
          }
          goto LABEL_541;
        }

        nw_parameters_add_protocol_stack_member(v361, 4, 0xFFFFFFFF, v14);
        nw_endpoint_handler_set_protocol_instance(v362, v14, v20, v26);
        if (v26 == v10)
        {
          __nwlog_obj();
          uint64_t v236 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v378 = "nw_protocol_utilities_add_input_handler";
          uint64_t v379 = 2048;
          v380 = (char *)v10;
          uint64_t v237 = (char *)_os_log_send_and_compose_impl();

          v375[0] = OS_LOG_TYPE_ERROR;
          v373[0] = OS_LOG_TYPE_DEFAULT;
          if (v375[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v238 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v239 = v375[0];
            if (os_log_type_enabled(v238, v375[0]))
            {
              *(_DWORD *)tcp_info buf = 136446466;
              uint64_t v378 = "nw_protocol_utilities_add_input_handler";
              uint64_t v379 = 2048;
              v380 = (char *)v10;
              _os_log_impl(&dword_181A5C000, v238, v239, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
            }

            goto LABEL_578;
          }

          if (v373[0])
          {
            unsigned int v269 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v238 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v270 = v375[0];
            os_log_type_t v271 = os_log_type_enabled(v238, v375[0]);
            if (v269)
            {
              if (v271)
              {
                *(_DWORD *)tcp_info buf = 136446722;
                uint64_t v378 = "nw_protocol_utilities_add_input_handler";
                uint64_t v379 = 2048;
                v380 = (char *)v10;
                v381 = 2082;
                unsigned int v382 = v269;
                _os_log_impl( &dword_181A5C000,  v238,  v270,  "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(v269);
LABEL_579:
              if (v237) {
                free(v237);
              }
LABEL_581:
              uint64_t v293 = v362;
              BOOL v294 = (*((_BYTE *)v293 + 268) & 0x20) == 0;

              if (!v294) {
                goto LABEL_601;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_t loga = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
              {
                BOOL v295 = nw_endpoint_handler_get_id_string(v293);
                int v296 = nw_endpoint_handler_dry_run_string(v293);
                BOOL v297 = v295;
                v363 = nw_endpoint_handler_copy_endpoint(v293);
                unsigned int v298 = nw_endpoint_get_logging_description(v363);
                v299 = nw_endpoint_handler_state_string(v293);
                v300 = nw_endpoint_handler_mode_string(v293);
                uint64_t v301 = nw_endpoint_handler_copy_current_path(v293);
                *(_DWORD *)tcp_info buf = 136448258;
                uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
                uint64_t v379 = 2082;
                v380 = (char *)v297;
                v381 = 2082;
                unsigned int v382 = v296;
                v383 = 2082;
                char v384 = (void *)v298;
                uint64_t v385 = 2082;
                v386 = v299;
                char v387 = 2082;
                v388 = v300;
                uint64_t v389 = 2114;
                __int16 v390 = v301;
                v391 = 2082;
                __int16 v392 = identifier;
                int v393 = 2082;
                __int16 v394 = v12;
                _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add protoco l %{public}s above %{public}s",  buf,  0x5Cu);
              }

              goto LABEL_599;
            }

            if (v271)
            {
              *(_DWORD *)tcp_info buf = 136446466;
              uint64_t v378 = "nw_protocol_utilities_add_input_handler";
              uint64_t v379 = 2048;
              v380 = (char *)v10;
              _os_log_impl( &dword_181A5C000,  v238,  v270,  "%{public}s Cannot add input handler %p to itself, no backtrace",  buf,  0x16u);
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v238 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v284 = v375[0];
            if (os_log_type_enabled(v238, v375[0]))
            {
              *(_DWORD *)tcp_info buf = 136446466;
              uint64_t v378 = "nw_protocol_utilities_add_input_handler";
              uint64_t v379 = 2048;
              v380 = (char *)v10;
              _os_log_impl( &dword_181A5C000,  v238,  v284,  "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded",  buf,  0x16u);
            }
          }

void sub_1825568C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, void *a30)
{
  _Block_object_dispose((const void *)(v32 - 192), 8);
  _Block_object_dispose((const void *)(v32 - 240), 8);

  _Block_object_dispose(&STACK[0x578], 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke(uint64_t a1, int a2)
{
  char v3 = 0;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = nw_network_agent_ctl_copy_received_agent_message( a2,  &v3);
  return 1LL;
}

void *__Block_byref_object_copy__79337(uint64_t a1, uint64_t a2)
{
  BOOL result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__79338(uint64_t a1)
{
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_153(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 824LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t __Block_byref_object_copy__154(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__155(uint64_t a1)
{
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_156(uint64_t a1)
{
}

NWConcrete_nw_agent_client *nw_agent_client_create(unsigned __int8 *a1, void *a2, void *a3)
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_agent_client);
  BOOL v8 = (unsigned int *)v5;
  id v9 = v6;
  if (v7)
  {
    if (a1)
    {
      v63.os_log_type_t receiver = v7;
      v63.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_agent_client;
      BOOL v7 = (NWConcrete_nw_agent_client *)objc_msgSendSuper2(&v63, sel_init);
      if (v7)
      {
        unsigned int v10 = *a1;
        if (v10 > 0x13) {
          goto LABEL_13;
        }
        if (((1 << v10) & 0xCF400) != 0)
        {
          if (*((_DWORD *)a1 + 3) > 0xFu)
          {
            id v11 = a1 + 16;
            if (!uuid_is_null(v11))
            {
              *(_OWORD *)v7->client_uuid = *(_OWORD *)v11;
              BOOL v12 = nw_path_copy_path_for_client_with_context((uint64_t)v11);
              path = v7->path;
              v7->path = (OS_nw_path *)v12;

              os_log_type_t v14 = v7->path;
              if (v14)
              {
                nw_endpoint_t v15 = nw_path_copy_effective_remote_endpoint(v14);
                endpoint = v7->endpoint;
                v7->endpoint = v15;

                int v17 = (OS_nw_parameters *)nw_path_copy_parameters(v7->path);
                parameters = v7->parameters;
                v7->parameters = v17;

                int v19 = (OS_nw_advertise_descriptor *)nw_path_copy_advertise_descriptor(v7->path);
                advertise_descriptor = v7->advertise_descriptor;
                v7->advertise_descriptor = v19;

                int v21 = (OS_nw_browse_descriptor *)nw_path_copy_browse_descriptor(v7->path);
                browse_descriptor = v7->browse_descriptor;
                v7->browse_descriptor = v21;

                os_log_type_t v23 = (OS_nw_group_descriptor *)nw_path_copy_group_descriptor(v7->path);
                group_descriptor = v7->group_descriptor;
                v7->group_descriptor = v23;
              }
            }

            goto LABEL_13;
          }

          __nwlog_obj();
          os_log_type_t v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
          id v39 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v62 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v41 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)tcp_info buf = 136446210;
              os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_client_message))",  buf,  0xCu);
            }
          }

          else if (v62)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v49 = type;
            BOOL v50 = os_log_type_enabled(v40, type);
            if (backtrace_string)
            {
              if (v50)
              {
                *(_DWORD *)tcp_info buf = 136446466;
                os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
                __int16 v67 = 2082;
                int v68 = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v40,  v49,  "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_client_message)) , dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(backtrace_string);
              goto LABEL_73;
            }

            if (v50)
            {
              *(_DWORD *)tcp_info buf = 136446210;
              os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl( &dword_181A5C000,  v40,  v49,  "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_client_message)), no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v53 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)tcp_info buf = 136446210;
              os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl( &dword_181A5C000,  v40,  v53,  "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_client_message)), backtrace limit exceeded",  buf,  0xCu);
            }
          }

LABEL_73:
          if (v39) {
            free(v39);
          }
LABEL_75:

LABEL_76:
          BOOL v7 = 0LL;
          goto LABEL_14;
        }

        if (v10 != 5)
        {
LABEL_13:
          unsigned int v27 = v8[3];
          int next_id = nw_agent_client_get_next_id(v8 + 4);
          snprintf(v7->log_string, 8uLL, "%u.%u", v27, next_id);
          goto LABEL_14;
        }

        if (*((_DWORD *)a1 + 3) > 0x17u)
        {
          nw_parameters_t v25 = nw_parameters_create();
          uint64_t v26 = v7->parameters;
          v7->parameters = v25;

          nw_parameters_set_pid(v7->parameters, *((_DWORD *)a1 + 5));
          nw_parameters_set_e_proc_uuid(v7->parameters, a1 + 24);
          goto LABEL_13;
        }

        __nwlog_obj();
        os_log_type_t v54 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
        os_log_type_t v55 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v62 = 0;
        if (__nwlog_fault(v55, &type, &v62))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            int v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v57 = type;
            if (os_log_type_enabled(v56, type))
            {
              *(_DWORD *)tcp_info buf = 136446210;
              os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_trigger_message))",  buf,  0xCu);
            }
          }

          else if (v62)
          {
            int v58 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            int v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v59 = type;
            BOOL v60 = os_log_type_enabled(v56, type);
            if (v58)
            {
              if (v60)
              {
                *(_DWORD *)tcp_info buf = 136446466;
                os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
                __int16 v67 = 2082;
                int v68 = v58;
                _os_log_impl( &dword_181A5C000,  v56,  v59,  "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_trigger_message)), dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v58);
              goto LABEL_88;
            }

            if (v60)
            {
              *(_DWORD *)tcp_info buf = 136446210;
              os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl( &dword_181A5C000,  v56,  v59,  "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_trigger_message)), no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            int v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v61 = type;
            if (os_log_type_enabled(v56, type))
            {
              *(_DWORD *)tcp_info buf = 136446210;
              os_log_type_t v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl( &dword_181A5C000,  v56,  v61,  "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_trigger_message)), backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

void sub_1825577D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_157(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 752LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2( uint64_t a1, int a2, int a3, void *a4)
{
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_159(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 752LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_160( uint64_t a1, int a2, int a3, void *a4)
{
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_161(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 832LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_162(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 792LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_163(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (!v3)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke_2";
    BOOL v7 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null discovered_endpoints", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke";
            __int16 v17 = 2082;
            uint64_t v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null discovered_endpoints, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v12)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null discovered_endpoints, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null discovered_endpoints, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182557BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_166(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 800LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_167(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 24LL * *(unsigned __int8 *)(a1 + 48) + 360));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_168(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (!v3)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke_2";
    BOOL v7 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null resolved_endpoints", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke";
            __int16 v17 = 2082;
            uint64_t v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null resolved_endpoints, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v12)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null resolved_endpoints, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null resolved_endpoints, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182557F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_169(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 24LL * *(unsigned __int8 *)(a1 + 48) + 368));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_170(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 760LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_171( uint64_t a1, int a2, int a3, void *a4)
{
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_172(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 768LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_173(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 776LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_174( uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  unsigned int v10 = *(void **)(a1 + 32);
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 3221225472LL;
  v16[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_3;
  v16[3] = &unk_189BC77D0;
  v16[4] = v7;
  id v17 = v10;
  id v18 = v8;
  id v11 = *(id *)(a1 + 40);
  id v19 = v11;
  id v20 = v9;
  BOOL v12 = (os_unfair_lock_s *)v17;
  id v13 = v9;
  id v14 = v8;
  id v15 = v7;
  os_unfair_lock_lock(v12 + 2);
  ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_3((uint64_t)v16);
  os_unfair_lock_unlock(v12 + 2);
}

void sub_182558144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_177(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 80LL);
  if (v1)
  {
    id v3 = v1;
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 80);
    *(void *)(v4 + 80) = 0LL;

    uint64_t v6 = *(void *)(a1 + 40);
    if (*(char *)(v6 + 856) < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v12 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s Closing channel on nexus",  (uint8_t *)__str,  0xCu);
      }

      nw_channel_close((uint64_t)v3, v13);
    }

    else
    {
      uint64_t v17 = 0LL;
      id v18 = &v17;
      uint64_t v19 = 0x2020000000LL;
      char v20 = 1;
      uint64_t v7 = *(void *)(v6 + 736);
      v14[0] = MEMORY[0x1895F87A8];
      v14[1] = 3221225472LL;
      v14[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_178;
      v14[3] = &unk_189BC7820;
      id v8 = v3;
      id v15 = v8;
      int v16 = &v17;
      nw_dictionary_apply(v7, (uint64_t)v14);
      if (*((_BYTE *)v18 + 24))
      {
        __int128 uu = 0uLL;
        nw_parameters_get_proc_uuid(*(void **)(*(void *)(a1 + 32) + 40LL), &uu);
        memset(out, 0, 37);
        uuid_unparse((const unsigned __int8 *)&uu, out);
        int pid = nw_parameters_get_pid(*(void **)(*(void *)(a1 + 32) + 40LL));
        __int128 v26 = 0u;
        memset(v27, 0, sizeof(v27));
        *(_OWORD *)__str = 0u;
        snprintf(__str, 0x35uLL, "%d-%s", pid, out);
        nw_dictionary_set_value(*(void *)(*(void *)(a1 + 40) + 744LL), __str, 0LL);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v10 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)tcp_info buf = 136446466;
          int v22 = "nw_agent_read_message_on_queue_block_invoke";
          __int16 v23 = 2080;
          int v24 = __str;
          _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s Removing channel on nexus for %s",  buf,  0x16u);
        }

        nw_channel_close((uint64_t)v8, v11);
      }

      _Block_object_dispose(&v17, 8);
    }
  }

void sub_182558414( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_180(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 784LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_181(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 808LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_182(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (v3)
  {
    nw_agent_send_group_member_update(*(void **)(a1 + 32), *(void **)(a1 + 40), v3);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  id v15 = "nw_agent_read_message_on_queue_block_invoke_2";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        id v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null assign_members", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          id v15 = "nw_agent_read_message_on_queue_block_invoke";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null assign_members, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        id v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null assign_members, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        id v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null assign_members, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182558754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_183(uint64_t a1)
{
  unsigned int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 816LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_184(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (v3)
  {
    nw_agent_send_group_member_update(*(void **)(a1 + 32), *(void **)(a1 + 40), v3);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  id v15 = "nw_agent_read_message_on_queue_block_invoke_2";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        id v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null assign_members", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          id v15 = "nw_agent_read_message_on_queue_block_invoke";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null assign_members, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        id v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null assign_members, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        id v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null assign_members, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182558A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_178( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 80) == *(void *)(a1 + 32)) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_3(uint64_t a1)
{
  uint64_t v104 = *MEMORY[0x1895F89C0];
  if (!*(void *)(a1 + 32) || (*(_BYTE *)(*(void *)(a1 + 40) + 856LL) & 2) == 0 && !*(void *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 80LL);
    out[0] = 0LL;
    memset(__str, 0, sizeof(__str));
    if (v4) {
      unsigned int v5 = 54;
    }
    else {
      unsigned int v5 = 61;
    }
    assign_message_uint64_t internal = nw_path_create_assign_message_internal(out, __str, v5, 0LL, 0, 0LL, 0LL, 0LL);
    if (assign_message_internal)
    {
      nw_agent_assign( *(NWConcrete_nw_agent **)(a1 + 40),  (unsigned __int8 *)assign_message_internal,  out[0],  (unsigned __int8 *)(*(void *)(a1 + 56) + 8LL),  0);
      os_log_type_t v7 = (char *)assign_message_internal;
LABEL_13:
      free(v7);
      return;
    }

    __nwlog_obj();
    os_log_type_t v42 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke_3";
    os_log_type_t v43 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(uu) = 16;
    LOBYTE(v93) = 0;
    if (uu == 17)
    {
      __nwlog_obj();
      BOOL v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = uu;
      if (os_log_type_enabled(v44, (os_log_type_t)uu))
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s called with null assign_message", (uint8_t *)buf, 0xCu);
      }
    }

    else if ((_BYTE)v93)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = uu;
      BOOL v48 = os_log_type_enabled(v44, (os_log_type_t)uu);
      if (backtrace_string)
      {
        if (v48)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v44,  v47,  "%{public}s called with null assign_message, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
        }

        free(backtrace_string);
LABEL_109:
        if (!v43) {
          return;
        }
        goto LABEL_110;
      }

      if (v48)
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl( &dword_181A5C000,  v44,  v47,  "%{public}s called with null assign_message, no backtrace",  (uint8_t *)buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v72 = uu;
      if (os_log_type_enabled(v44, (os_log_type_t)uu))
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl( &dword_181A5C000,  v44,  v72,  "%{public}s called with null assign_message, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
      }
    }

    goto LABEL_109;
  }

  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)(v2 + 80))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s Client already assigned channel",  (uint8_t *)buf,  0xCu);
    }

    return;
  }

  __int128 uu = 0uLL;
  nw_parameters_get_proc_uuid(*(void **)(v2 + 40), &uu);
  memset(out, 0, 37);
  uuid_unparse((const unsigned __int8 *)&uu, (char *)out);
  int pid = nw_parameters_get_pid(*(void **)(*(void *)(a1 + 56) + 40LL));
  __int128 v95 = 0u;
  memset(v96, 0, sizeof(v96));
  *(_OWORD *)__str = 0u;
  snprintf(__str, 0x35uLL, "%d-%s", pid, (const char *)out);
  uint64_t v9 = *(void *)(a1 + 40);
  if (!*(void *)(v9 + 744))
  {
    BOOL v10 = nw_dictionary_create();
    uint64_t v11 = *(void *)(a1 + 40);
    char v12 = *(void **)(v11 + 744);
    *(void *)(v11 + 744) = v10;

    uint64_t v9 = *(void *)(a1 + 40);
    goto LABEL_18;
  }

  if ((*(char *)(v9 + 856) & 0x80000000) == 0)
  {
LABEL_18:
    uint64_t v13 = nw_dictionary_copy_value(*(void *)(v9 + 744), (uint64_t)__str);
    uint64_t v14 = *(void *)(a1 + 56);
    id v15 = *(void **)(v14 + 80);
    *(void *)(v14 + 80) = v13;
  }

void sub_182559CD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void ___ZL31nw_agent_client_attach_protocolP19NWConcrete_nw_agentP26NWConcrete_nw_agent_clientPU25objcproto14OS_nw_endpoint8NSObjectS5_PU33objcproto22OS_nw_protocol_optionsS3__block_invoke( uint64_t a1)
{
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  v8[2] = ___ZL31nw_agent_client_attach_protocolP19NWConcrete_nw_agentP26NWConcrete_nw_agent_clientPU25objcproto14OS_nw_endpoint8NSObjectS5_PU33objcproto22OS_nw_protocol_optionsS3__block_invoke_2;
  v8[3] = &unk_189BC7848;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  void v8[4] = v3;
  id v4 = *(id *)(a1 + 48);
  v8[5] = v4;
  id v5 = *(id *)(a1 + 56);
  void v8[6] = v5;
  id v6 = *(id *)(a1 + 64);
  v8[7] = v6;
  os_log_type_t v7 = v2;
  os_unfair_lock_lock(v7 + 2);
  ___ZL31nw_agent_client_attach_protocolP19NWConcrete_nw_agentP26NWConcrete_nw_agent_clientPU25objcproto14OS_nw_endpoint8NSObjectS5_PU33objcproto22OS_nw_protocol_optionsS3__block_invoke_2((uint64_t)v8);
  os_unfair_lock_unlock(v7 + 2);
}

void sub_182559E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL31nw_agent_client_attach_protocolP19NWConcrete_nw_agentP26NWConcrete_nw_agent_clientPU25objcproto14OS_nw_endpoint8NSObjectS5_PU33objcproto22OS_nw_protocol_optionsS3__block_invoke_2( uint64_t a1)
{
  uint64_t v97 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 80))
  {
    if (!*(void *)(v2 + 88))
    {
      id v3 = nw_protocol_options_copy(*(void **)(a1 + 40));
      nw_protocol_options_set_log_id(v3, "A", (const char *)(*(void *)(a1 + 32) + 24LL), 1);
      uint64_t protocol_handler = nw_channel_get_protocol_handler(*(void *)(*(void *)(a1 + 32) + 80LL));
      nw_protocol_definition_t v5 = nw_protocol_options_copy_definition((nw_protocol_options_t)v3);
      nw_protocol_definition_t v6 = v5;
      if (v5)
      {
        os_log_type_t v7 = v5;
        char v8 = *((_BYTE *)v7 + 184);

        if ((v8 & 1) != 0)
        {
          uint64_t v9 = nw_protocol_definition_get_framer_create(v7);
          if (v9)
          {
            BOOL v10 = (uint64_t (*)(char *, nw_protocol_definition *, void, void))v9;
            uint64_t v11 = *(nw_endpoint **)(a1 + 48);
            if (v11) {
              nw_parameters_set_local_endpoint(*(nw_parameters_t *)(*(void *)(a1 + 32) + 40LL), v11);
            }
            char v12 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(*(void *)(a1 + 32) + 40LL));
            nw_protocol_stack_prepend_application_protocol(v12, (nw_protocol_options_t)v3);
            uint64_t v13 = v7;

            uint64_t v14 = v10((char *)v13 + 8, v13, *(void *)(a1 + 56), *(void *)(*(void *)(a1 + 32) + 40LL));
            nw_parameters_set_protocol_instance(v3, v15, v14);
            id v16 = nw_agent_client_copy_path(*(void **)(a1 + 32));
            nw_path_get_client_id(v16, (_OWORD *)v14);

            *(void *)(*(void *)(a1 + 32) + 88LL) = v14;
            if (v14)
            {
              uint64_t v17 = *(void (***)(uint64_t, void))(v14 + 24);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (v18)
                {
                  v18(v14, 0LL);
                  goto LABEL_12;
                }
              }

              __nwlog_obj();
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
              __int128 v26 = *(const char **)(v14 + 16);
              if (!v26) {
                __int128 v26 = "invalid";
              }
            }

            else
            {
              __nwlog_obj();
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
              __int128 v26 = "invalid";
            }

            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v94 = "nw_agent_client_attach_protocol_block_invoke";
            __int16 v95 = 2082;
            *(void *)os_log_type_t v96 = v26;
            os_log_type_t v43 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v91 = 0;
            if (__nwlog_fault(v43, &type, &v91))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                BOOL v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v45 = type;
                if (os_log_type_enabled(v44, type))
                {
                  os_log_type_t v46 = "invalid";
                  if (v14 && *(void *)(v14 + 16)) {
                    os_log_type_t v46 = *(const char **)(v14 + 16);
                  }
                  *(_DWORD *)tcp_info buf = 136446466;
                  os_log_type_t v94 = "nw_agent_client_attach_protocol_block_invoke";
                  __int16 v95 = 2082;
                  *(void *)os_log_type_t v96 = v46;
                  _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s protocol %{public}s has invalid add_input_handler callback",  buf,  0x16u);
                }
              }

              else if (v91)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                BOOL v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v48 = type;
                BOOL v49 = os_log_type_enabled(v44, type);
                if (backtrace_string)
                {
                  if (v49)
                  {
                    BOOL v50 = "invalid";
                    if (v14 && *(void *)(v14 + 16)) {
                      BOOL v50 = *(const char **)(v14 + 16);
                    }
                    *(_DWORD *)tcp_info buf = 136446722;
                    os_log_type_t v94 = "nw_agent_client_attach_protocol_block_invoke";
                    __int16 v95 = 2082;
                    *(void *)os_log_type_t v96 = v50;
                    *(_WORD *)&v96[8] = 2082;
                    *(void *)&v96[10] = backtrace_string;
                    _os_log_impl( &dword_181A5C000,  v44,  v48,  "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
                  }

                  free(backtrace_string);
                  goto LABEL_151;
                }

                if (v49)
                {
                  uint64_t v84 = "invalid";
                  if (v14 && *(void *)(v14 + 16)) {
                    uint64_t v84 = *(const char **)(v14 + 16);
                  }
                  *(_DWORD *)tcp_info buf = 136446466;
                  os_log_type_t v94 = "nw_agent_client_attach_protocol_block_invoke";
                  __int16 v95 = 2082;
                  *(void *)os_log_type_t v96 = v84;
                  _os_log_impl( &dword_181A5C000,  v44,  v48,  "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace",  buf,  0x16u);
                }
              }

              else
              {
                __nwlog_obj();
                BOOL v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v67 = type;
                if (os_log_type_enabled(v44, type))
                {
                  os_log_type_t v68 = "invalid";
                  if (v14 && *(void *)(v14 + 16)) {
                    os_log_type_t v68 = *(const char **)(v14 + 16);
                  }
                  *(_DWORD *)tcp_info buf = 136446466;
                  os_log_type_t v94 = "nw_agent_client_attach_protocol_block_invoke";
                  __int16 v95 = 2082;
                  *(void *)os_log_type_t v96 = v68;
                  _os_log_impl( &dword_181A5C000,  v44,  v67,  "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded",  buf,  0x16u);
                }
              }
            }

void sub_18255B134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_agent_change_state(void *a1, int a2, int a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  os_log_type_t v7 = a1;
  id v8 = a4;
  if (v7)
  {
    uint64_t v9 = (dispatch_queue_s *)v7[27];
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nw_agent_change_state_block_invoke;
    block[3] = &unk_189BC75E8;
    uint64_t v19 = v7;
    int v21 = a2;
    int v22 = a3;
    id v20 = v8;
    dispatch_async(v9, block);

    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  __int128 v26 = "nw_agent_change_state";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v24 = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v11, &v24, &v23))
  {
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v24;
      if (os_log_type_enabled(v12, v24))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int128 v26 = "nw_agent_change_state";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v24;
      BOOL v16 = os_log_type_enabled(v12, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int128 v26 = "nw_agent_change_state";
          __int16 v27 = 2082;
          unint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v16)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int128 v26 = "nw_agent_change_state";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v24;
      if (os_log_type_enabled(v12, v24))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int128 v26 = "nw_agent_change_state";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_agent_change_state_block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (id *)(a1 + 32);
  *(_DWORD *)(*(void *)(a1 + 32) + 232LL) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(*(void *)(a1 + 32) + 236LL) = *(_DWORD *)(a1 + 52);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 224LL), *(id *)(a1 + 40));
  id v3 = *v2;
  id v4 = v3;
  if (v3)
  {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 27));
    nw_protocol_definition_t v5 = (void *)v4[105];
    *(void *)tcp_info buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke;
    os_log_type_t v24 = &unk_189BC7898;
    uint64_t v25 = v4;
    nw_fd_wrapper_get_fd(v5, buf);

    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_agent_sync_state";
  uint64_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_agent_sync_state";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_agent_sync_state";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v19)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_agent_sync_state";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_agent_sync_state";
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18255B82C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke(uint64_t a1, int a2)
{
  uint64_t v11 = 0LL;
  char v12 = &v11;
  int v14 = 0;
  uint64_t v13 = 0x2020000000LL;
  id v3 = *(void **)(a1 + 32);
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 3221225472LL;
  v7[2] = ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke_2;
  v7[3] = &unk_189BC7870;
  id v8 = v3;
  uint64_t v9 = &v11;
  int v10 = a2;
  id v4 = (os_unfair_lock_s *)v8;
  os_unfair_lock_lock(v4 + 2);
  ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke_2((uint64_t)v7);
  os_unfair_lock_unlock(v4 + 2);

  BOOL v5 = *((_DWORD *)v12 + 6) == 0;
  _Block_object_dispose(&v11, 8);
  return v5;
}

uint64_t ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  *(void *)&v49[4068] = *MEMORY[0x1895F89C0];
  bzero(v48, 0x1000uLL);
  uint64_t v2 = *(void *)(v1 + 32);
  char v3 = *(_BYTE *)(v2 + 856);
  if ((v3 & 0x28) == 0)
  {
    uint64_t v7 = 0LL;
    goto LABEL_22;
  }

  if ((*(_BYTE *)(v2 + 856) & 8) != 0)
  {
    int v4 = *(_DWORD *)(v2 + 260);
    v48[0] = *(_DWORD *)(v2 + 256);
    v48[1] = v4;
    v48[2] = v4;
    unint64_t v5 = *(unsigned __int8 *)(v2 + 348);
    if (*(_BYTE *)(v2 + 348))
    {
      if (v5 < 8)
      {
        unint64_t v6 = 0LL;
        do
        {
LABEL_10:
          unint64_t v12 = v6;
          int v13 = *(_DWORD *)(v2 + 288 + 4 * v6++);
          v48[v12 + 3] = v13;
        }

        while (v6 < v5);
        goto LABEL_11;
      }

      unint64_t v6 = v5 & 0xF8;
      id v8 = v49;
      uint64_t v9 = (__int128 *)(v2 + 304);
      unint64_t v10 = v6;
      do
      {
        __int128 v11 = *v9;
        *(v8 - 1) = *(v9 - 1);
        _OWORD *v8 = v11;
        v8 += 2;
        v9 += 2;
        v10 -= 8LL;
      }

      while (v10);
      if (v6 != v5) {
        goto LABEL_10;
      }
    }
  }

NWConcrete_nw_agent *nw_agent_create_with_path_override_info(void *a1, const char *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    if (v6)
    {
      id v8 = nw_agent_create("Network", "PathOverride", a2, v6);
      goto LABEL_4;
    }

    __nwlog_obj();
    unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v26 = "nw_agent_create_with_path_override_info";
    __int128 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null queue", buf, 0xCu);
        }

void sub_18255C178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_agent_set_uuid(void *a1, _OWORD *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  char v3 = a1;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_agent_set_uuid";
    id v8 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v23) = 16;
    char v20 = 0;
    if (__nwlog_fault(v8, &v23, &v20))
    {
      if (v23 == 17)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = v23;
        if (os_log_type_enabled(v9, (os_log_type_t)v23))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_set_uuid";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null agent", buf, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = v23;
        BOOL v15 = os_log_type_enabled(v9, (os_log_type_t)v23);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_agent_set_uuid";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v15)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_set_uuid";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null agent, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = v23;
        if (os_log_type_enabled(v9, (os_log_type_t)v23))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_set_uuid";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void __nw_agent_set_uuid_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 856) & 1) == 0)
  {
    *(_OWORD *)(v2 + 720) = *(_OWORD *)*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    goto LABEL_14;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v17 = "nw_agent_set_uuid_block_invoke";
  int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v4, &type, &v14))
  {
LABEL_12:
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (os_log_s *)(id)gLogObj;
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_21;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v17 = "nw_agent_set_uuid_block_invoke";
    uint64_t v7 = "%{public}s Cannot modify agent UUID after registration";
LABEL_19:
    unint64_t v12 = v5;
    os_log_type_t v13 = v6;
LABEL_20:
    _os_log_impl(&dword_181A5C000, v12, v13, v7, buf, 0xCu);
    goto LABEL_21;
  }

  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (os_log_s *)(id)gLogObj;
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_21;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v17 = "nw_agent_set_uuid_block_invoke";
    uint64_t v7 = "%{public}s Cannot modify agent UUID after registration, backtrace limit exceeded";
    goto LABEL_19;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (os_log_s *)(id)gLogObj;
  os_log_type_t v9 = type;
  BOOL v10 = os_log_type_enabled(v5, type);
  if (backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v17 = "nw_agent_set_uuid_block_invoke";
      __int16 v18 = 2082;
      os_log_type_t v19 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v5,  v9,  "%{public}s Cannot modify agent UUID after registration, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
    goto LABEL_12;
  }

  if (v10)
  {
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v17 = "nw_agent_set_uuid_block_invoke";
    uint64_t v7 = "%{public}s Cannot modify agent UUID after registration, no backtrace";
    unint64_t v12 = v5;
    os_log_type_t v13 = v9;
    goto LABEL_20;
  }

void nw_agent_get_uuid(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *a2 = *((_OWORD *)v3 + 45);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_agent_get_uuid";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_agent_get_uuid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_agent_get_uuid";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_agent_get_uuid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_agent_get_uuid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_agent_set_activate_handler(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v26 = "nw_agent_set_activate_handler";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v26 = "nw_agent_set_activate_handler";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v24;
      BOOL v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v26 = "nw_agent_set_activate_handler";
          __int16 v27 = 2082;
          unint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9) {
          goto LABEL_4;
        }
LABEL_39:
        free(v9);
        goto LABEL_4;
      }

      if (v16)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v26 = "nw_agent_set_activate_handler";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v26 = "nw_agent_set_activate_handler";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_set_activate_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 752);
  *(void *)(v3 + 752) = v2;
}

void nw_agent_set_assert_handlers(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    int v35 = "nw_agent_set_assert_handlers";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          int v35 = "nw_agent_set_assert_handlers";
          __int16 v36 = 2082;
          id v37 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v13) {
          goto LABEL_5;
        }
LABEL_56:
        free(v13);
        goto LABEL_5;
      }

      if (v22)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v35 = "nw_agent_set_assert_handlers";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_set_assert_handlers_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 856LL) |= 4u;
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 760);
  *(void *)(v3 + 760) = v2;

  id v5 = _Block_copy(*(const void **)(a1 + 48));
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 768);
  *(void *)(v6 + 76_Block_object_dispose((const void *)(v20 - 192), 8) = v5;
}

void nw_agent_set_error_handler(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v26 = "nw_agent_set_error_handler";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v26 = "nw_agent_set_error_handler";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v24;
      BOOL v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v26 = "nw_agent_set_error_handler";
          __int16 v27 = 2082;
          os_log_type_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9) {
          goto LABEL_4;
        }
LABEL_39:
        free(v9);
        goto LABEL_4;
      }

      if (v16)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v26 = "nw_agent_set_error_handler";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v26 = "nw_agent_set_error_handler";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_set_error_handler_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 856LL) |= 4u;
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 832);
  *(void *)(v3 + 832) = v2;
}

void nw_agent_set_token_low_water_mark(void *a1, int a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  id v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    id v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v29 = "nw_agent_set_token_low_water_mark";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v27;
      if (os_log_type_enabled(v12, v27))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v29 = "nw_agent_set_token_low_water_mark";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v27;
      BOOL v18 = os_log_type_enabled(v12, v27);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v29 = "nw_agent_set_token_low_water_mark";
          __int16 v30 = 2082;
          int v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v11) {
          goto LABEL_4;
        }
LABEL_39:
        free(v11);
        goto LABEL_4;
      }

      if (v18)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v29 = "nw_agent_set_token_low_water_mark";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = v27;
      if (os_log_type_enabled(v12, v27))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v29 = "nw_agent_set_token_low_water_mark";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_set_token_low_water_mark_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 716LL) = *(_DWORD *)(a1 + 48);
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 824);
  *(void *)(v3 + 824) = v2;
}

void nw_agent_add_token(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v27 = "nw_agent_add_token";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_agent_add_token";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v25;
      BOOL v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v27 = "nw_agent_add_token";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }

      if (v15)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_agent_add_token";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_agent_add_token";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_add_token_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 840LL);
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  v3[2] = __nw_agent_add_token_block_invoke_2;
  v3[3] = &unk_189BC7898;
  id v4 = v1;
  nw_fd_wrapper_get_fd(v2, v3);
}

void sub_18255E7D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t __nw_agent_add_token_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  int v3 = v2;
  uint64_t v4 = v1;
  uint64_t v15 = *MEMORY[0x1895F89C0];
  bzero(v14, 0x1000uLL);
  id v5 = *(dispatch_data_s **)(v4 + 32);
  uint64_t v10 = 0LL;
  os_log_type_t v11 = &v10;
  uint64_t v12 = 0x2000000000LL;
  uint64_t v13 = 0LL;
  v9[0] = 0LL;
  v9[1] = v9;
  v9[2] = 0x2000000000LL;
  v9[3] = v14;
  if (v5)
  {
    v8[0] = MEMORY[0x1895F87A8];
    v8[1] = 0x40000000LL;
    v8[2] = __nw_dispatch_data_copyout_block_invoke;
    v8[3] = &unk_189BBF598;
    v8[5] = v9;
    void v8[6] = 4096LL;
    void v8[4] = &v10;
    dispatch_data_apply(v5, v8);
    unsigned int v6 = *((_DWORD *)v11 + 6);
  }

  else
  {
    unsigned int v6 = 0;
  }

  _Block_object_dispose(v9, 8);
  _Block_object_dispose(&v10, 8);
  nw_network_agent_ctl_setsockopt_inner(v3, 21, v14, v6, 0LL, 0);
  return 1LL;
}

void nw_agent_flush_tokens(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  int v2 = v1;
  if (v1)
  {
    int v3 = (dispatch_queue_s *)v1[27];
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nw_agent_flush_tokens_block_invoke;
    block[3] = &unk_189BC93A0;
    uint64_t v13 = v1;
    dispatch_async(v3, block);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v17 = "nw_agent_flush_tokens";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_agent_flush_tokens";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v17 = "nw_agent_flush_tokens";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_agent_flush_tokens";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_agent_flush_tokens";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_agent_flush_tokens_block_invoke(uint64_t a1)
{
  return nw_fd_wrapper_get_fd(*(void **)(*(void *)(a1 + 32) + 840LL), &__block_literal_global_79685);
}

uint64_t __nw_agent_flush_tokens_block_invoke_2(uint64_t a1, int a2)
{
  return 1LL;
}

void nw_agent_reset_error(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  int v2 = v1;
  if (v1)
  {
    int v3 = (dispatch_queue_s *)v1[27];
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nw_agent_reset_error_block_invoke;
    block[3] = &unk_189BC93A0;
    uint64_t v13 = v1;
    dispatch_async(v3, block);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v17 = "nw_agent_reset_error";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_agent_reset_error";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v17 = "nw_agent_reset_error";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_agent_reset_error";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_agent_reset_error";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_agent_reset_error_block_invoke(uint64_t a1)
{
  return nw_fd_wrapper_get_fd(*(void **)(*(void *)(a1 + 32) + 840LL), &__block_literal_global_76_79691);
}

uint64_t __nw_agent_reset_error_block_invoke_2(uint64_t a1, int a2)
{
  return 1LL;
}

BOOL nw_agent_add_to_interface(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  int v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      BOOL v6 = nw_network_agent_add_to_interface((uint64_t)v4 + 104, v3 + 720) == 0;
      goto LABEL_4;
    }

    __nwlog_obj();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    char v24 = "nw_agent_add_to_interface";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null interface", buf, 0xCu);
        }

BOOL nw_agent_remove_from_interface(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  int v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      BOOL v6 = nw_network_agent_remove_from_interface((uint64_t)v4 + 104, v3 + 720) == 0;
      goto LABEL_4;
    }

    __nwlog_obj();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    char v24 = "nw_agent_remove_from_interface";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null interface", buf, 0xCu);
        }

void nw_agent_add_resolve_handlers(void *a1, int a2, int a3, void *a4, void *a5)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  os_log_type_t v9 = a1;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = v11;
  if (!v9)
  {
    __nwlog_obj();
    char v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v42 = "nw_agent_add_resolve_handlers";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v40 = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (v40 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v40;
      if (os_log_type_enabled(v16, v40))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = v40;
      BOOL v24 = os_log_type_enabled(v16, v40);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v42 = "nw_agent_add_resolve_handlers";
          __int16 v43 = 2082;
          uint64_t v44 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v15) {
          goto LABEL_5;
        }
LABEL_56:
        free(v15);
        goto LABEL_5;
      }

      if (v24)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = v40;
      if (os_log_type_enabled(v16, v40))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl( &dword_181A5C000,  v16,  v30,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_add_resolve_handlers_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  *(_BYTE *)(*(void *)(a1 + 32) + 856LL) |= 0x20u;
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(unsigned __int8 *)(v1 + 712);
  if (v2 < 0xF)
  {
    uint64_t v5 = 24 * v2;
    *(_DWORD *)(v1 + 24 * v2 + 352) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(*(void *)(a1 + 32) + 24 * v2 + 356) = *(_DWORD *)(a1 + 60);
    BOOL v6 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32) + v5;
    os_log_type_t v8 = *(void **)(v7 + 360);
    *(void *)(v7 + 360) = v6;

    os_log_type_t v9 = _Block_copy(*(const void **)(a1 + 48));
    uint64_t v10 = *(void *)(a1 + 32) + v5;
    id v11 = *(void **)(v10 + 368);
    *(void *)(v10 + 36_Block_object_dispose((const void *)(v20 - 192), 8) = v9;

    ++*(_BYTE *)(*(void *)(a1 + 32) + 712LL);
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136446210;
      os_log_type_t v13 = "nw_agent_add_resolve_handlers_block_invoke";
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s Maximum number of resolution pairs reached",  (uint8_t *)&v12,  0xCu);
    }
  }

void nw_agent_set_browse_handlers(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    int v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    id v35 = "nw_agent_set_browse_handlers";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        id v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          id v35 = "nw_agent_set_browse_handlers";
          __int16 v36 = 2082;
          int v37 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v13) {
          goto LABEL_5;
        }
LABEL_56:
        free(v13);
        goto LABEL_5;
      }

      if (v22)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        id v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        id v35 = "nw_agent_set_browse_handlers";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_set_browse_handlers_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 856LL) |= 0x10u;
  unint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 792);
  *(void *)(v3 + 792) = v2;

  id v5 = _Block_copy(*(const void **)(a1 + 48));
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 800);
  *(void *)(v6 + 800) = v5;
}

void nw_agent_set_flow_handlers(void *a1, int a2, int a3, char a4, void *a5, void *a6)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  id v11 = a1;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = v13;
  if (!v11)
  {
    __nwlog_obj();
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v44 = "nw_agent_set_flow_handlers";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v42 = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (v42 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = v42;
      if (os_log_type_enabled(v20, v42))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = v42;
      BOOL v28 = os_log_type_enabled(v20, v42);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v44 = "nw_agent_set_flow_handlers";
          __int16 v45 = 2082;
          uint64_t v46 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v27,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v19) {
          goto LABEL_5;
        }
LABEL_56:
        free(v19);
        goto LABEL_5;
      }

      if (v28)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_181A5C000, v20, v27, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = v42;
      if (os_log_type_enabled(v20, v42))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v44 = "nw_agent_set_flow_handlers";
        _os_log_impl( &dword_181A5C000,  v20,  v34,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_set_flow_handlers_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 248)) {
    goto LABEL_20;
  }
  uint64_t v3 = nw_nexus_create_with_options(v2 + 52, *(void *)(v2 + 264), *(void *)(v2 + 272), *(void *)(v2 + 280));
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 248);
  *(void *)(v4 + 24_Block_object_dispose((const void *)(v20 - 192), 8) = v3;

  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 248)) {
    goto LABEL_20;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v25 = "nw_agent_set_flow_handlers_block_invoke";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v7, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_agent_set_flow_handlers_block_invoke";
        id v10 = "%{public}s nw_nexus_create failed";
LABEL_14:
        uint64_t v14 = v8;
        os_log_type_t v15 = v9;
LABEL_15:
        _os_log_impl(&dword_181A5C000, v14, v15, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v25 = "nw_agent_set_flow_handlers_block_invoke";
            __int16 v26 = 2082;
            os_log_type_t v27 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v12,  "%{public}s nw_nexus_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_17;
        }

        if (!v13) {
          goto LABEL_16;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_agent_set_flow_handlers_block_invoke";
        id v10 = "%{public}s nw_nexus_create failed, no backtrace";
        uint64_t v14 = v8;
        os_log_type_t v15 = v12;
        goto LABEL_15;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_agent_set_flow_handlers_block_invoke";
        id v10 = "%{public}s nw_nexus_create failed, backtrace limit exceeded";
        goto LABEL_14;
      }
    }

void nw_agent_add_flow_request_endpoint_type(void *a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v25 = "nw_agent_add_flow_request_endpoint_type";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_agent_add_flow_request_endpoint_type";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v25 = "nw_agent_add_flow_request_endpoint_type";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_agent_add_flow_request_endpoint_type";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_agent_add_flow_request_endpoint_type";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_add_flow_request_endpoint_type_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(unsigned __int8 *)(v1 + 348);
  if (v2 < 0xF)
  {
    *(_DWORD *)(v1 + 4 * v2 + 28_Block_object_dispose((const void *)(v20 - 192), 8) = *(_DWORD *)(a1 + 40);
    ++*(_BYTE *)(*(void *)(a1 + 32) + 348LL);
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136446210;
      id v5 = "nw_agent_add_flow_request_endpoint_type_block_invoke";
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s Maximum number of flow types",  (uint8_t *)&v4,  0xCu);
    }
  }

void nw_agent_set_flow_sizes(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (v7)
  {
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 3221225472LL;
    v18[2] = __nw_agent_set_flow_sizes_block_invoke;
    v18[3] = &unk_189BC7710;
    os_log_type_t v9 = (os_unfair_lock_s *)v7;
    v18[4] = v9;
    void v18[5] = a2;
    v18[6] = a3;
    v18[7] = a4;
    os_unfair_lock_lock(v9 + 2);
    __nw_agent_set_flow_sizes_block_invoke(v18);
    os_unfair_lock_unlock(v9 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  char v22 = "nw_agent_set_flow_sizes";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v11, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v20;
      if (os_log_type_enabled(v12, v20))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v22 = "nw_agent_set_flow_sizes";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v20;
      BOOL v16 = os_log_type_enabled(v12, v20);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v22 = "nw_agent_set_flow_sizes";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v16)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v22 = "nw_agent_set_flow_sizes";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v20;
      if (os_log_type_enabled(v12, v20))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v22 = "nw_agent_set_flow_sizes";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_agent_set_flow_sizes_block_invoke(void *a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1[4];
  if (*(void *)(v1 + 248))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136446210;
      int v4 = "nw_agent_set_flow_sizes_block_invoke";
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_ERROR,  "%{public}s Cannot set flow sizes after setting flow handlers",  (uint8_t *)&v3,  0xCu);
    }
  }

  else
  {
    *(void *)(v1 + 264) = a1[5];
    *(void *)(a1[4] + 272LL) = a1[6];
    *(void *)(a1[4] + 280LL) = a1[7];
  }

void nw_agent_set_flow_do_not_coalesce(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_agent_set_flow_do_not_coalesce_block_invoke;
    v12[3] = &unk_189BC93A0;
    int v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 2);
    __nw_agent_set_flow_do_not_coalesce_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  BOOL v16 = "nw_agent_set_flow_do_not_coalesce";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v16 = "nw_agent_set_flow_do_not_coalesce";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v16 = "nw_agent_set_flow_do_not_coalesce";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v16 = "nw_agent_set_flow_do_not_coalesce";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v16 = "nw_agent_set_flow_do_not_coalesce";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_agent_set_flow_do_not_coalesce_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 248))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136446210;
      int v4 = "nw_agent_set_flow_do_not_coalesce_block_invoke";
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_ERROR,  "%{public}s Cannot set do not coalesce after setting flow handlers",  (uint8_t *)&v3,  0xCu);
    }
  }

  else
  {
    *(_BYTE *)(v1 + 856) |= 0x80u;
  }

void nw_agent_set_flow_context(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v26 = "nw_agent_set_flow_context";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v26 = "nw_agent_set_flow_context";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v24;
      BOOL v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v26 = "nw_agent_set_flow_context";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9) {
          goto LABEL_4;
        }
LABEL_39:
        free(v9);
        goto LABEL_4;
      }

      if (v16)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v26 = "nw_agent_set_flow_context";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v26 = "nw_agent_set_flow_context";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_set_flow_context_block_invoke(uint64_t a1)
{
}

void nw_agent_set_group_handlers(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v35 = "nw_agent_set_group_handlers";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null agent", buf, 0xCu);
      }
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v35 = "nw_agent_set_group_handlers";
          __int16 v36 = 2082;
          int v37 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v13) {
          goto LABEL_5;
        }
LABEL_56:
        free(v13);
        goto LABEL_5;
      }

      if (v22)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v35 = "nw_agent_set_group_handlers";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_agent_set_group_handlers_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 856LL) |= 0x40u;
  unint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 808);
  *(void *)(v3 + 80_Block_object_dispose((const void *)(v20 - 192), 8) = v2;

  id v5 = _Block_copy(*(const void **)(a1 + 48));
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 816);
  *(void *)(v6 + 816) = v5;
}

uint64_t nw_log_delta_to_ms(unsigned int a1)
{
  return (unsigned __int16)(a1 & 0x7FF) << (a1 >> 11);
}

uint64_t nw_log_ms_to_delta(unsigned int a1)
{
  unsigned int v1 = 21 - __clz(a1);
  int v2 = (a1 >> v1) | (v1 << 11);
  if (a1 < 0x800) {
    LOWORD(v2) = a1;
  }
  return (unsigned __int16)v2;
}

void nw_log_ring_append(uint64_t a1, unint64_t a2, char *__src)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(void *)a1;
  if (a2 + 1 > *(void *)a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = *(void *)a1;
    int __srca = 136446722;
    __int16 v36 = "nw_log_ring_append";
    __int16 v37 = 2048;
    unint64_t v38 = a2;
    __int16 v39 = 2048;
    uint64_t v40 = v6;
    id v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v7, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v10 = *(void *)a1;
          int __srca = 136446722;
          __int16 v36 = "nw_log_ring_append";
          __int16 v37 = 2048;
          unint64_t v38 = a2;
          __int16 v39 = 2048;
          uint64_t v40 = v10;
          id v11 = "%{public}s Trying to insert %zu bytes in ring of %zu bytes";
LABEL_34:
          _os_log_impl(&dword_181A5C000, v8, v9, v11, (uint8_t *)&__srca, 0x20u);
        }
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = type;
        BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v26)
          {
            uint64_t v27 = *(void *)a1;
            int __srca = 136446978;
            __int16 v36 = "nw_log_ring_append";
            __int16 v37 = 2048;
            unint64_t v38 = a2;
            __int16 v39 = 2048;
            uint64_t v40 = v27;
            __int16 v41 = 2082;
            os_log_type_t v42 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Trying to insert %zu bytes in ring of %zu bytes, dumping backtrace:%{public}s",  (uint8_t *)&__srca,  0x2Au);
          }

          free(backtrace_string);
          goto LABEL_35;
        }

        if (v26)
        {
          uint64_t v31 = *(void *)a1;
          int __srca = 136446722;
          __int16 v36 = "nw_log_ring_append";
          __int16 v37 = 2048;
          unint64_t v38 = a2;
          __int16 v39 = 2048;
          uint64_t v40 = v31;
          id v11 = "%{public}s Trying to insert %zu bytes in ring of %zu bytes, no backtrace";
          goto LABEL_34;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v30 = *(void *)a1;
          int __srca = 136446722;
          __int16 v36 = "nw_log_ring_append";
          __int16 v37 = 2048;
          unint64_t v38 = a2;
          __int16 v39 = 2048;
          uint64_t v40 = v30;
          id v11 = "%{public}s Trying to insert %zu bytes in ring of %zu bytes, backtrace limit exceeded";
          goto LABEL_34;
        }
      }
    }

size_t nw_log_ring_copyout(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    if (a3)
    {
      id v4 = (char *)a1 + 17;
      *a2 = 1;
      uint64_t v5 = a2 + 1;
      unint64_t v6 = a3 - 1;
      if (a1[*((_BYTE *)a1 + 16) == 0] <= (unint64_t)(a3 - 1))
      {
        if (*((_BYTE *)a1 + 16))
        {
          uint64_t v11 = a1[1];
          size_t v12 = *a1 - v11;
          memcpy(v5, &v4[v11], v12);
        }

        else
        {
          size_t v12 = 0LL;
        }

        memcpy(&v5[v12], v4, a1[1]);
        size_t v8 = a1[1] + v12;
      }

      else
      {
        unint64_t v7 = a1[1];
        if (v6 >= v7) {
          size_t v8 = a1[1];
        }
        else {
          size_t v8 = a3 - 1;
        }
        memcpy(&v5[v6 - v8], &v4[v7 - v8], v8);
        if (v6 > v7 && *((_BYTE *)a1 + 16))
        {
          uint64_t v9 = *a1;
          if (v6 - v8 >= *a1 - a1[1]) {
            size_t v10 = *a1 - a1[1];
          }
          else {
            size_t v10 = v6 - v8;
          }
          memcpy(v5, &v4[v9 - v10], v10);
          v8 += v10;
        }
      }

      return v8 + 1;
    }

    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    BOOL v25 = "nw_log_ring_copyout";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v25 = "nw_log_ring_copyout";
        uint64_t v17 = "%{public}s called with null maxLength";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    if (!v22)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v25 = "nw_log_ring_copyout";
        uint64_t v17 = "%{public}s called with null maxLength, backtrace limit exceeded";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v25 = "nw_log_ring_copyout";
        uint64_t v17 = "%{public}s called with null maxLength, no backtrace";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    if (v21)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      BOOL v25 = "nw_log_ring_copyout";
      __int16 v26 = 2082;
      uint64_t v27 = backtrace_string;
      unint64_t v20 = "%{public}s called with null maxLength, dumping backtrace:%{public}s";
      goto LABEL_35;
    }

    goto LABEL_36;
  }

  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  BOOL v25 = "nw_log_ring_copyout";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v22)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v25 = "nw_log_ring_copyout";
        uint64_t v17 = "%{public}s called with null bufferOut, backtrace limit exceeded";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v19 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v25 = "nw_log_ring_copyout";
        uint64_t v17 = "%{public}s called with null bufferOut, no backtrace";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    if (v19)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      BOOL v25 = "nw_log_ring_copyout";
      __int16 v26 = 2082;
      uint64_t v27 = backtrace_string;
      unint64_t v20 = "%{public}s called with null bufferOut, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_181A5C000, v15, v16, v20, buf, 0x16u);
    }

void nw_log_ring_parse(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    BOOL v21 = "nw_log_ring_parse";
    size_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      BOOL v21 = "nw_log_ring_parse";
      os_log_type_t v13 = "%{public}s called with null buffer";
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v21 = "nw_log_ring_parse";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10) {
          return;
        }
LABEL_42:
        free(v10);
        return;
      }

      if (!v15) {
        goto LABEL_41;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      BOOL v21 = "nw_log_ring_parse";
      os_log_type_t v13 = "%{public}s called with null buffer, no backtrace";
    }

    else
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      BOOL v21 = "nw_log_ring_parse";
      os_log_type_t v13 = "%{public}s called with null buffer, backtrace limit exceeded";
    }

void sub_1825646BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1825654D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_flow_setup_protocols( NWConcrete_nw_endpoint_handler *a1, nw_protocol *a2, nw_protocol *a3, int a4, int a5)
{
  uint64_t v308 = *MEMORY[0x1895F89C0];
  size_t v8 = a1;
  int v9 = v8;
  if (!v8)
  {
    __nwlog_obj();
    os_log_type_t v218 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v292 = "nw_endpoint_handler_get_mode";
    os_log_type_t v219 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v307) = 16;
    LOBYTE(v289) = 0;
    if (__nwlog_fault(v219, &v307, &v289))
    {
      if (v307 == 17)
      {
        __nwlog_obj();
        unsigned int v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v221 = v307;
        if (os_log_type_enabled(v220, (os_log_type_t)v307))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v292 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v220, v221, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if ((_BYTE)v289)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v223 = v307;
        BOOL v224 = os_log_type_enabled(v220, (os_log_type_t)v307);
        if (backtrace_string)
        {
          if (v224)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            uint64_t v292 = "nw_endpoint_handler_get_mode";
            __int16 v293 = 2082;
            BOOL v294 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v220,  v223,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_275;
        }

        if (v224)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v292 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v220, v223, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unsigned int v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v225 = v307;
        if (os_log_type_enabled(v220, (os_log_type_t)v307))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v292 = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v220,  v225,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182567D98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__80314(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__80315(uint64_t a1)
{
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v316 = *MEMORY[0x1895F89C0];
  id v8 = a3;
  id v9 = a4;
  __int16 v293 = v9;
  BOOL v294 = v8;
  if (nw_protocol_options_is_custom_ip(v9))
  {
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v12 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          uint64_t v211 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v212 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          logging_description = nw_endpoint_get_logging_description(v212);
          uint64_t v214 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          uint64_t v215 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v216 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)tcp_info buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
          __int16 v300 = 2082;
          uint64_t v301 = (uint64_t)id_string;
          __int16 v302 = 2082;
          __int16 v303 = v211;
          __int16 v304 = 2082;
          __int16 v305 = (void *)logging_description;
          __int16 v306 = 2082;
          __int128 v307 = v214;
          __int16 v308 = 2082;
          v309 = v215;
          __int16 v310 = 2114;
          id v311 = v216;
          __int16 v312 = 1024;
          LODWORD(v313) = nw_custom_ip_options_get_protocol(v293);
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u as a proxied protocol, not attaching any proxied transport",  buf,  0x4Eu);
        }

        goto LABEL_8;
      }
    }

    else if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v12 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        char v13 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        os_log_type_t v14 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v15 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        os_log_type_t v16 = nw_endpoint_get_logging_description(v15);
        char v17 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        char v18 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v19 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)tcp_info buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        __int16 v300 = 2082;
        uint64_t v301 = (uint64_t)v13;
        __int16 v302 = 2082;
        __int16 v303 = v14;
        __int16 v304 = 2082;
        __int16 v305 = (void *)v16;
        __int16 v306 = 2082;
        __int128 v307 = v17;
        __int16 v308 = 2082;
        v309 = v18;
        __int16 v310 = 2114;
        id v311 = v19;
        __int16 v312 = 1024;
        LODWORD(v313) = nw_custom_ip_options_get_protocol(v293);
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u a s a proxied protocol, not attaching any proxied transport",  buf,  0x4Eu);
      }

LABEL_389:
    if (v236) {
      free(v236);
    }
LABEL_162:
    id v9 = v293;
LABEL_185:
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v100 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
    {
      id v120 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      os_log_type_t v121 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v122 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      os_log_type_t v123 = nw_endpoint_get_logging_description(v122);
      os_log_type_t v124 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      BOOL v125 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v126 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)tcp_info buf = 136448002;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
      __int16 v300 = 2082;
      uint64_t v301 = (uint64_t)v120;
      __int16 v302 = 2082;
      __int16 v303 = v121;
      __int16 v304 = 2082;
      __int16 v305 = (void *)v123;
      __int16 v306 = 2082;
      __int128 v307 = v124;
      __int16 v308 = 2082;
      v309 = v125;
      __int16 v310 = 2114;
      id v311 = v126;
      __int16 v312 = 2082;
      v313 = identifier;
      _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach application pr otocol %{public}s",  buf,  0x52u);
    }

void sub_18256B27C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20, void *a21, uint64_t a22, void *a23, void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_218( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v110 = *MEMORY[0x1895F89C0];
  id v7 = a3;
  id v8 = a4;
  char identifier = nw_protocol_definition_get_identifier(v7);
  uint64_t registered_endpoint = *(void *)(a1 + 96);
  id v88 = v8;
  int v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  os_log_type_t v12 = *(void **)(a1 + 40);
  char v13 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  os_log_type_t v14 = *(void **)(a1 + 48);
  id v15 = *(id *)(a1 + 32);
  id v89 = v12;
  id v16 = v13;
  id v90 = v14;
  id v86 = v15;
  os_log_type_t v87 = v16;
  if (!v15)
  {
    __nwlog_obj();
    os_log_type_t v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v91 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v36, v53, "%{public}s called with null handler", buf, 0xCu);
      }

      goto LABEL_161;
    }

    if (!v91)
    {
      __nwlog_obj();
      __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v69 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v36,  v69,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_161;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v57 = type;
    BOOL v58 = os_log_type_enabled(v36, type);
    if (!backtrace_string)
    {
      if (v58)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v36, v57, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }

      goto LABEL_161;
    }

    if (v58)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      __int16 v94 = 2082;
      nw_endpoint_t v95 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v36,  v57,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_128;
  }

  char v17 = (unsigned int *)v15;
  uint64_t v18 = v17[29];

  if ((_DWORD)v18 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v27 = (id)gLogObj;
    else {
      char v28 = off_189BBBBC0[v18];
    }
    *(_DWORD *)tcp_info buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    __int16 v94 = 2082;
    nw_endpoint_t v95 = (void *)v28;
    __int16 v96 = 2082;
    uint64_t v97 = "flow";
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v91 = 0;
    if (__nwlog_fault(v35, &type, &v91))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v36 = (os_log_s *)(id)gLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          else {
            unint64_t v38 = off_189BBBBC0[v18];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v94 = 2082;
          nw_endpoint_t v95 = (void *)v38;
          __int16 v96 = 2082;
          uint64_t v97 = "flow";
          _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }

        goto LABEL_161;
      }

      if (!v91)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v36 = (os_log_s *)(id)gLogObj;
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v36, type))
        {
          else {
            uint64_t v45 = off_189BBBBC0[v18];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v94 = 2082;
          nw_endpoint_t v95 = (void *)v45;
          __int16 v96 = 2082;
          uint64_t v97 = "flow";
          _os_log_impl( &dword_181A5C000,  v36,  v44,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }

        goto LABEL_161;
      }

      int v39 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v40 = (os_log_s *)(id)gLogObj;
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v40, type);
      if (v39)
      {
        if (v42)
        {
          else {
            id v43 = off_189BBBBC0[v18];
          }
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v94 = 2082;
          nw_endpoint_t v95 = (void *)v43;
          __int16 v96 = 2082;
          uint64_t v97 = "flow";
          __int16 v98 = 2082;
          uint64_t v99 = v39;
          _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v39);
        if (!v35) {
          goto LABEL_72;
        }
        goto LABEL_71;
      }

      if (v42)
      {
        else {
          uint64_t v46 = off_189BBBBC0[v18];
        }
        *(_DWORD *)tcp_info buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v94 = 2082;
        nw_endpoint_t v95 = (void *)v46;
        __int16 v96 = 2082;
        uint64_t v97 = "flow";
        _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
      }
    }

void sub_18256C60C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_219( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v148 = *MEMORY[0x1895F89C0];
  id v7 = a3;
  id v128 = a4;
  char identifier = nw_protocol_definition_get_identifier(v7);
  uint64_t registered_endpoint = *(void *)(a1 + 96);
  int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  int v11 = *(void **)(a1 + 40);
  os_log_type_t v12 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  char v13 = *(void **)(a1 + 48);
  id v14 = *(id *)(a1 + 32);
  id v122 = v11;
  id v124 = v12;
  id v126 = v13;
  id v120 = v14;
  if (!v14)
  {
    __nwlog_obj();
    id v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    char v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v129 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v87 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v34, v87, "%{public}s called with null handler", buf, 0xCu);
      }

      goto LABEL_205;
    }

    if (!v129)
    {
      __nwlog_obj();
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v103 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v34,  v103,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_205;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v91 = type;
    BOOL v92 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v92)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v34, v91, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }

      goto LABEL_205;
    }

    if (v92)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      __int16 v132 = 2082;
      nw_endpoint_t v133 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v34,  v91,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_172;
  }

  id v15 = (unsigned int *)v14;
  uint64_t v16 = v15[29];

  if ((_DWORD)v16 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v25 = (id)gLogObj;
    else {
      __int16 v26 = off_189BBBBC0[v16];
    }
    *(_DWORD *)tcp_info buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    __int16 v132 = 2082;
    nw_endpoint_t v133 = (void *)v26;
    __int16 v134 = 2082;
    uint64_t v135 = "flow";
    char v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v129 = 0;
    if (__nwlog_fault(v33, &type, &v129))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v34 = (os_log_s *)(id)gLogObj;
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          else {
            __int16 v36 = off_189BBBBC0[v16];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v132 = 2082;
          nw_endpoint_t v133 = (void *)v36;
          __int16 v134 = 2082;
          uint64_t v135 = "flow";
          _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }

        goto LABEL_205;
      }

      if (!v129)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v34 = (os_log_s *)(id)gLogObj;
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v34, type))
        {
          else {
            id v43 = off_189BBBBC0[v16];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v132 = 2082;
          nw_endpoint_t v133 = (void *)v43;
          __int16 v134 = 2082;
          uint64_t v135 = "flow";
          _os_log_impl( &dword_181A5C000,  v34,  v42,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }

        goto LABEL_205;
      }

      os_log_type_t v37 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v38 = (os_log_s *)(id)gLogObj;
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v38, type);
      if (v37)
      {
        if (v40)
        {
          else {
            os_log_type_t v41 = off_189BBBBC0[v16];
          }
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v132 = 2082;
          nw_endpoint_t v133 = (void *)v41;
          __int16 v134 = 2082;
          uint64_t v135 = "flow";
          __int16 v136 = 2082;
          id v137 = v37;
          _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v37);
        if (!v33) {
          goto LABEL_72;
        }
        goto LABEL_71;
      }

      if (v40)
      {
        else {
          os_log_type_t v44 = off_189BBBBC0[v16];
        }
        *(_DWORD *)tcp_info buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v132 = 2082;
        nw_endpoint_t v133 = (void *)v44;
        __int16 v134 = 2082;
        uint64_t v135 = "flow";
        _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
      }
    }

void sub_18256DCB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_220( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v169 = *MEMORY[0x1895F89C0];
  id v7 = a3;
  id v8 = a4;
  os_log_type_t v149 = v7;
  if (nw_protocol_options_is_custom_ip(v8))
  {
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    uint64_t v147 = v8;
    if (minimize_logging)
    {
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v11 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          os_log_type_t v99 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v100 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          logging_description = nw_endpoint_get_logging_description(v100);
          BOOL v102 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          os_log_type_t v103 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v104 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)tcp_info buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
          __int16 v153 = 2082;
          nw_endpoint_t v154 = (void *)id_string;
          __int16 v155 = 2082;
          v156 = v99;
          __int16 v157 = 2082;
          os_log_type_t v158 = (void *)logging_description;
          __int16 v159 = 2082;
          nw_endpoint_t v160 = v102;
          __int16 v161 = 2082;
          BOOL v162 = v103;
          __int16 v163 = 2114;
          id v164 = v104;
          __int16 v165 = 1024;
          LODWORD(v166) = nw_custom_ip_options_get_protocol(v147);
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u , not attaching any transport",  buf,  0x4Eu);
        }

        goto LABEL_8;
      }
    }

    else if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v11 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v12 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        char v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        id v15 = nw_endpoint_get_logging_description(v14);
        uint64_t v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        char v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)tcp_info buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        __int16 v153 = 2082;
        nw_endpoint_t v154 = (void *)v12;
        __int16 v155 = 2082;
        v156 = v13;
        __int16 v157 = 2082;
        os_log_type_t v158 = (void *)v15;
        __int16 v159 = 2082;
        nw_endpoint_t v160 = v16;
        __int16 v161 = 2082;
        BOOL v162 = v17;
        __int16 v163 = 2114;
        id v164 = v18;
        __int16 v165 = 1024;
        LODWORD(v166) = nw_custom_ip_options_get_protocol(v147);
        _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u, not attaching any transport",  buf,  0x4Eu);
      }

void sub_18256F600( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_221( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v120 = *MEMORY[0x1895F89C0];
  id v6 = a3;
  id v7 = a4;
  char identifier = nw_protocol_definition_get_identifier(v6);
  uint64_t registered_endpoint = *(void *)(a1 + 96);
  id v98 = v7;
  int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  int v11 = *(void **)(a1 + 40);
  os_log_type_t v12 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  char v13 = *(void **)(a1 + 48);
  id v14 = *(id *)(a1 + 32);
  id v97 = v11;
  id v15 = v12;
  id v16 = v13;
  nw_endpoint_t v95 = v14;
  os_log_type_t v96 = v15;
  if (!v14)
  {
    __nwlog_obj();
    char v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    uint64_t v59 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v100 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v61, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v100)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type;
      BOOL v66 = os_log_type_enabled(v60, type);
      if (backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v104 = 2082;
          os_log_type_t v105 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v60,  v65,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_160:
        if (!v59) {
          goto LABEL_73;
        }
        goto LABEL_161;
      }

      if (v66)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v65, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v78 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v60,  v78,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182570970( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_222( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v120 = *MEMORY[0x1895F89C0];
  id v6 = a3;
  id v7 = a4;
  char identifier = nw_protocol_definition_get_identifier(v6);
  uint64_t registered_endpoint = *(void *)(a1 + 96);
  id v98 = v7;
  int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  int v11 = *(void **)(a1 + 40);
  os_log_type_t v12 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  char v13 = *(void **)(a1 + 48);
  id v14 = *(id *)(a1 + 32);
  id v97 = v11;
  id v15 = v12;
  id v16 = v13;
  nw_endpoint_t v95 = v14;
  os_log_type_t v96 = v15;
  if (!v14)
  {
    __nwlog_obj();
    char v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    uint64_t v59 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v100 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v61, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v100)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type;
      BOOL v66 = os_log_type_enabled(v60, type);
      if (backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v104 = 2082;
          os_log_type_t v105 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v60,  v65,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_160:
        if (!v59) {
          goto LABEL_73;
        }
        goto LABEL_161;
      }

      if (v66)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v65, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v78 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v60,  v78,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182571C40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_attach_socket_protocol(NWConcrete_nw_endpoint_handler *a1, nw_protocol *a2)
{
  uint64_t v118 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = nw_endpoint_handler_copy_flow(v3);
  parameters = (char *)nw_endpoint_handler_copy_parameters(v3);
  if (nw_socket_protocol_identifier::onceToken != -1) {
    dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_64023);
  }
  nw_endpoint_t v5 = nw_endpoint_handler_copy_endpoint(v3);
  uint64_t internal = nw_protocol_create_internal((uint64_t)&nw_socket_protocol_identifier::identifier, v5, parameters, 1);

  if (internal)
  {
    if (nw_socket_protocol_identifier::onceToken != -1) {
      dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_64023);
    }
    id v7 = nw_protocol_definition_create_with_identifier(&nw_socket_protocol_identifier::identifier);
    id v8 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)parameters);
    id v9 = v8;
    os_log_type_t v96 = v8;
    id v97 = v7;
    if (!*((void *)v4 + 90))
    {
      nw_protocol_options_t v10 = nw_protocol_stack_copy_transport_protocol(v8);
      nw_endpoint_handler_set_protocol_instance(v3, v10, v7, internal);
    }

    nw_protocol_options_t v11 = nw_protocol_stack_copy_internet_protocol(v9);
    nw_endpoint_handler_set_protocol_instance(v3, v11, v7, internal);
    *((void *)v4 + 114) = internal;
    os_unfair_lock_lock((os_unfair_lock_t)v4 + 220);
    if (!*((void *)v4 + 90))
    {
      if (*(_UNKNOWN **)(internal + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v23 = *(void *)(internal + 88);
        if (v23) {
          *(void *)(internal + 8_Block_object_dispose((const void *)(v20 - 192), 8) = v23 + 1;
        }
        char v13 = 1;
        char v12 = -1;
      }

      else
      {
        char v12 = 0;
        char v13 = 0;
      }

      *(void *)&buf[0].sa_len = internal;
      buf[0].sa_data[6] = v12;
      char v24 = *((_BYTE *)v4 + 728);
      if ((v24 & 1) != 0)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)v4 + 90);
        char v24 = *((_BYTE *)v4 + 728);
      }

      *((void *)v4 + 90) = internal;
      *((_BYTE *)v4 + 72_Block_object_dispose((const void *)(v20 - 192), 8) = v13 | v24 & 0xFE;
    }

    os_unfair_lock_unlock((os_unfair_lock_t)v4 + 220);
    if ((*((_DWORD *)v4 + 225) & 0x80000000) != 0) {
      goto LABEL_74;
    }
    if (*(_UNKNOWN **)(internal + 40) == &nw_protocol_ref_counted_handle)
    {
      if (*(_DWORD *)(internal + 268) != -1)
      {
        if ((*(_WORD *)(internal + 397) & 0x80) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          id v25 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
LABEL_47:
            *(_DWORD *)&buf[0].sa_len = 136446466;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
            *(_WORD *)&buf[0].sa_data[10] = 2082;
            *(void *)&buf[0].sa_data[12] = internal + 404;
            _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Socket protocol already has valid fd",  &buf[0].sa_len,  0x16u);
          }
        }

BOOL nw_endpoint_flow_join_protocol( void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, _BYTE *a10)
{
  uint64_t v109 = *MEMORY[0x1895F89C0];
  char v17 = a1;
  id v86 = a2;
  id v87 = a3;
  id v18 = a4;
  BOOL v85 = nw_protocols_are_equal(*(void **)(a7 + 16), a5);
  if (!v85) {
    goto LABEL_68;
  }
  id v84 = v18;
  nw_endpoint_handler_set_protocol_instance(v17, v87, v18, a7);
  uint64_t v19 = *(void *)(a7 + 24);
  if (v19)
  {
    uint64_t v20 = *(void (**)(uint64_t))(v19 + 112);
    if (v20)
    {
      id v21 = *(void **)(a7 + 40);
      if (v21 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v23 = *(void *)(a7 + 88);
        if (v23) {
          *(void *)(a7 + 8_Block_object_dispose((const void *)(v20 - 192), 8) = v23 + 1;
        }
        char v22 = -1;
      }

      else
      {
        char v22 = 0;
      }

      *(void *)tcp_info buf = a7;
      buf[8] = v22;
      v20(a7);
      char v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v21 == &nw_protocol_ref_counted_handle) {
        nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
      }
      nw_parameters_inherit_protocol_instances(v86, a6, v24, a7, a9);
    }
  }

  if (!a8)
  {
    __nwlog_obj();
    char v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&sockaddr buf[4] = "nw_protocol_utilities_add_input_handler";
    id v44 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v88 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&sockaddr buf[4] = "nw_protocol_utilities_add_input_handler";
        _os_log_impl(&dword_181A5C000, v45, v65, "%{public}s called with null input_protocol", buf, 0xCu);
      }

      goto LABEL_89;
    }

    if (!v88)
    {
      __nwlog_obj();
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v78 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&sockaddr buf[4] = "nw_protocol_utilities_add_input_handler";
        _os_log_impl( &dword_181A5C000,  v45,  v78,  "%{public}s called with null input_protocol, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_89;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v67 = type[0];
    BOOL v68 = os_log_type_enabled(v49, type[0]);
    if (backtrace_string)
    {
      if (v68)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&sockaddr buf[4] = "nw_protocol_utilities_add_input_handler";
        __int16 v91 = 2082;
        uint64_t v92 = (uint64_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v49,  v67,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
LABEL_56:
      if (!v44) {
        goto LABEL_58;
      }
LABEL_57:
      free(v44);
      goto LABEL_58;
    }

    if (v68)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&sockaddr buf[4] = "nw_protocol_utilities_add_input_handler";
      _os_log_impl(&dword_181A5C000, v49, v67, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_55;
  }

  if (a7 == a8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v43 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446466;
    *(void *)&sockaddr buf[4] = "nw_protocol_utilities_add_input_handler";
    __int16 v91 = 2048;
    uint64_t v92 = a7;
    id v44 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v88 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v45 = (os_log_s *)(id)gLogObj;
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&sockaddr buf[4] = "nw_protocol_utilities_add_input_handler";
        __int16 v91 = 2048;
        uint64_t v92 = a7;
        _os_log_impl(&dword_181A5C000, v45, v46, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
      }

void sub_182573D68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t nw::retained_ptr<nw_protocol *>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v4 = *(_BYTE *)(a1 + 8);
    if ((v4 & 1) != 0)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)a1);
      char v4 = *(_BYTE *)(a1 + 8);
    }

    *(void *)a1 = 0LL;
    *(void *)a1 = *(void *)a2;
    *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v20 - 192), 8) = v4 & 0xFE | *(_BYTE *)(a2 + 8) & 1;
    *(void *)a2 = 0LL;
    *(_BYTE *)(a2 + 8) &= ~1u;
  }

  return a1;
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_80436()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

void nw_endpoint_handler_register_adaptive_read_handler(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v107 = *MEMORY[0x1895F89C0];
  unsigned int v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v65 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
    BOOL v66 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v89) = 0;
    if (__nwlog_fault(v66, type, &v89))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v68 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v67, v68, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if ((_BYTE)v89)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v70 = type[0];
        BOOL v71 = os_log_type_enabled(v67, type[0]);
        if (backtrace_string)
        {
          if (v71)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
            __int16 v93 = 2082;
            id_str = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v67,  v70,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_98;
        }

        if (v71)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v67, v70, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v72 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v67,  v72,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182574B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_register_adaptive_write_handler(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v107 = *MEMORY[0x1895F89C0];
  unsigned int v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v65 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
    BOOL v66 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v89) = 0;
    if (__nwlog_fault(v66, type, &v89))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v68 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v67, v68, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if ((_BYTE)v89)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v70 = type[0];
        BOOL v71 = os_log_type_enabled(v67, type[0]);
        if (backtrace_string)
        {
          if (v71)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
            __int16 v93 = 2082;
            id_str = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v67,  v70,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_98;
        }

        if (v71)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v67, v70, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v72 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v67,  v72,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182575834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_register_keepalive_handler(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v104 = *MEMORY[0x1895F89C0];
  unsigned int v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
    os_log_type_t v63 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v88 = 0;
    if (__nwlog_fault(v63, type, &v88))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v65 = type[0];
        if (os_log_type_enabled(v64, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v64, v65, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v88)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v67 = type[0];
        BOOL v68 = os_log_type_enabled(v64, type[0]);
        if (backtrace_string)
        {
          if (v68)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
            __int16 v90 = 2082;
            id_str = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v64,  v67,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_96;
        }

        if (v68)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v64, v67, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v69 = type[0];
        if (os_log_type_enabled(v64, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v64,  v69,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18257652C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_register_metadata_changed_handler(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v104 = *MEMORY[0x1895F89C0];
  unsigned int v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
    os_log_type_t v63 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v88 = 0;
    if (__nwlog_fault(v63, type, &v88))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v65 = type[0];
        if (os_log_type_enabled(v64, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v64, v65, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v88)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v67 = type[0];
        BOOL v68 = os_log_type_enabled(v64, type[0]);
        if (backtrace_string)
        {
          if (v68)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
            __int16 v90 = 2082;
            id_str = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v64,  v67,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_96;
        }

        if (v68)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v64, v67, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v69 = type[0];
        if (os_log_type_enabled(v64, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&sockaddr buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v64,  v69,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182577224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_flow_reset_expected_progress_target(void *a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  nw_endpoint_t v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    id v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v79 = "nw_endpoint_handler_get_mode";
    nw_endpoint_t v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v76 = 0;
    if (__nwlog_fault(v45, &type, &v76))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v79 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v46, v47, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v76)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v49 = type;
        BOOL v50 = os_log_type_enabled(v46, type);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            uint64_t v79 = "nw_endpoint_handler_get_mode";
            __int16 v80 = 2082;
            BOOL v81 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v46,  v49,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_65;
        }

        if (v50)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v79 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v46, v49, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v79 = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v46,  v56,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182577DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_flow_reset_expected_progress_target_block_invoke(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v3 = (os_log_s *)(id)gLogObj;
  char v4 = v3;
  if (v2 != 22)
  {
    *(_DWORD *)tcp_info buf = 136446466;
    char v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
    __int16 v19 = 1024;
    int v20 = v2;
    nw_endpoint_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_22;
        }
        *(_DWORD *)tcp_info buf = 136446466;
        char v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
        __int16 v19 = 1024;
        int v20 = v2;
        uint64_t v8 = "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d";
LABEL_20:
        int v13 = v6;
        os_log_type_t v14 = v7;
        goto LABEL_21;
      }

      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_22;
        }
        *(_DWORD *)tcp_info buf = 136446466;
        char v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
        __int16 v19 = 1024;
        int v20 = v2;
        uint64_t v8 = "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_20;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_22:

          if (!v5) {
            return 1LL;
          }
          goto LABEL_16;
        }

        *(_DWORD *)tcp_info buf = 136446466;
        char v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
        __int16 v19 = 1024;
        int v20 = v2;
        uint64_t v8 = "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d, no backtrace";
        int v13 = v6;
        os_log_type_t v14 = v10;
LABEL_21:
        _os_log_impl(&dword_181A5C000, v13, v14, v8, buf, 0x12u);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446722;
        char v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
        __int16 v19 = 1024;
        int v20 = v2;
        __int16 v21 = 2082;
        char v22 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v6,  v10,  "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(backtrace_string);
    }

    if (!v5) {
      return 1LL;
    }
LABEL_16:
    free(v5);
    return 1LL;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)tcp_info buf = 136446466;
    char v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
    __int16 v19 = 1024;
    int v20 = 22;
    _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d",  buf,  0x12u);
  }

  return 1LL;
}

BOOL ___ZL33nw_endpoint_flow_expected_to_joinP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flow_block_invoke( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v122 = *MEMORY[0x1895F89C0];
  id v7 = a3;
  id v8 = a4;
  __int16 v98 = v7;
  __int16 v99 = v8;
  if (nw_protocol_definition_is_proxy(v7))
  {
    else {
      char v9 = nw_endpoint_copy_without_proxy_parent(*(void **)(a1 + 32));
    }
    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
    BOOL v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v12 = nw_endpoint_handler_copy_context(*(void **)(a1 + 40));
    int v13 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL)) {
      int v14 = 1;
    }
    else {
      int v14 = nw_parameters_get_use_enhanced_privacy_mode(*(void **)(a1 + 48)) ^ 1;
    }
    id v15 = nw_context_copy_registered_endpoint_internal(v12, v13, v14);
    uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
    *(_BYTE *)(*(void *)(a1 + 56) + 35LL) |= 0x20u;
  }

  char identifier = nw_protocol_definition_get_identifier(v7);
  int v19 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
  int v20 = *(void **)(a1 + 32);
  __int16 v21 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  char v22 = *(void **)(a1 + 48);
  id v23 = *(id *)(a1 + 40);
  id v101 = v20;
  id v24 = v21;
  id v25 = v22;
  __int16 v100 = v24;
  __int16 v97 = v23;
  if (!v23)
  {
    __nwlog_obj();
    id v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v61 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v102 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v63 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v62, v63, "%{public}s called with null handler", buf, 0xCu);
      }

      goto LABEL_137;
    }

    if (!v102)
    {
      __nwlog_obj();
      id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v81 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v62,  v81,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_137;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v68 = type;
    BOOL v69 = os_log_type_enabled(v67, type);
    if (backtrace_string)
    {
      if (v69)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v106 = 2082;
        uint64_t v107 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v67,  v68,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
LABEL_155:
      if (!v61) {
        goto LABEL_80;
      }
      goto LABEL_156;
    }

    if (v69)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_181A5C000, v67, v68, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_154;
  }

  nw_endpoint_t v26 = (unsigned int *)v23;
  uint64_t v27 = v26[29];

  if ((_DWORD)v27 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v37 = (id)gLogObj;
    else {
      char v38 = off_189BBBBC0[v27];
    }
    *(_DWORD *)tcp_info buf = 136446722;
    __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
    __int16 v106 = 2082;
    uint64_t v107 = (void *)v38;
    __int16 v108 = 2082;
    uint64_t v109 = "flow";
    BOOL v46 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v102 = 0;
    if (__nwlog_fault(v46, &type, &v102))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v47 = (os_log_s *)(id)gLogObj;
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v47, type))
        {
          else {
            os_log_type_t v49 = off_189BBBBC0[v27];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v106 = 2082;
          uint64_t v107 = (void *)v49;
          __int16 v108 = 2082;
          uint64_t v109 = "flow";
          _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v102)
      {
        BOOL v50 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v47 = (os_log_s *)(id)gLogObj;
        os_log_type_t v51 = type;
        BOOL v52 = os_log_type_enabled(v47, type);
        if (v50)
        {
          if (v52)
          {
            else {
              uint64_t v53 = off_189BBBBC0[v27];
            }
            *(_DWORD *)tcp_info buf = 136446978;
            __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
            __int16 v106 = 2082;
            uint64_t v107 = (void *)v53;
            __int16 v108 = 2082;
            uint64_t v109 = "flow";
            __int16 v110 = 2082;
            __int16 v111 = v50;
            _os_log_impl( &dword_181A5C000,  v47,  v51,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v50);
          if (!v46) {
            goto LABEL_80;
          }
LABEL_78:
          id v57 = (char *)v46;
LABEL_79:
          free(v57);
          goto LABEL_80;
        }

        if (v52)
        {
          else {
            os_log_type_t v56 = off_189BBBBC0[v27];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v106 = 2082;
          uint64_t v107 = (void *)v56;
          __int16 v108 = 2082;
          uint64_t v109 = "flow";
          _os_log_impl( &dword_181A5C000,  v47,  v51,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v47 = (os_log_s *)(id)gLogObj;
        os_log_type_t v54 = type;
        if (os_log_type_enabled(v47, type))
        {
          else {
            id v55 = off_189BBBBC0[v27];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v106 = 2082;
          uint64_t v107 = (void *)v55;
          __int16 v108 = 2082;
          uint64_t v109 = "flow";
          _os_log_impl( &dword_181A5C000,  v47,  v54,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v46)
    {
LABEL_80:
      uint64_t registered_endpoint = 0LL;
      goto LABEL_81;
    }

    goto LABEL_78;
  }

  if (!identifier)
  {
    __nwlog_obj();
    os_log_type_t v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v61 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v102 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v62, v65, "%{public}s called with null identifier", buf, 0xCu);
      }

      goto LABEL_137;
    }

    if (!v102)
    {
      __nwlog_obj();
      id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v82 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v62,  v82,  "%{public}s called with null identifier, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_137;
    }

    os_log_type_t v74 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v75 = type;
    BOOL v76 = os_log_type_enabled(v67, type);
    if (v74)
    {
      if (v76)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        __int16 v105 = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v106 = 2082;
        uint64_t v107 = v74;
        _os_log_impl( &dword_181A5C000,  v67,  v75,  "%{public}s called with null identifier, dumping backtrace:%{public}s",  buf,  0x16u);
      }

void sub_182579378( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL36nw_endpoint_flow_validate_delegationP30NWConcrete_nw_endpoint_handler_block_invoke_214( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  if (object_getClass(v4) != (Class)MEMORY[0x1895F92E8]
    || (string_ptr = xpc_string_get_string_ptr(v4),
        size_t length = xpc_string_get_length(v4),
        size_t v7 = *(void *)(a1 + 48),
        BOOL v8 = v7 >= length,
        size_t v9 = v7 - length,
        !v8))
  {
LABEL_11:
    uint64_t v21 = 1LL;
    goto LABEL_12;
  }

  int v10 = strcmp(string_ptr, (const char *)(*(void *)(a1 + 56) + v9));
  char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
  if (v10)
  {
    if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v12 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        int v14 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        id v15 = id_string;
        nw_endpoint_t v32 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v32);
        uint64_t v17 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        char v18 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v19 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        uint64_t v20 = *(void *)(a1 + 56);
        *(_DWORD *)tcp_info buf = 136448258;
        nw_endpoint_t v35 = "nw_endpoint_flow_validate_delegation_block_invoke";
        __int16 v36 = 2082;
        id v37 = v15;
        __int16 v38 = 2082;
        id v39 = v14;
        __int16 v40 = 2082;
        nw_endpoint_t v41 = logging_description;
        __int16 v42 = 2082;
        BOOL v43 = v17;
        __int16 v44 = 2082;
        id v45 = v18;
        __int16 v46 = 2114;
        id v47 = v19;
        __int16 v48 = 2082;
        uint64_t v49 = v20;
        __int16 v50 = 2082;
        os_log_type_t v51 = string_ptr;
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Domain %{public}s does no t match %{public}s",  buf,  0x5Cu);
      }
    }

    goto LABEL_11;
  }

  if ((logging_disabled & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v23 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      id v24 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      id v25 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v26 = v24;
      nw_endpoint_t v33 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      uint64_t v27 = nw_endpoint_get_logging_description(v33);
      uint64_t v28 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      nw_endpoint_t v29 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v30 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      uint64_t v31 = *(void *)(a1 + 56);
      *(_DWORD *)tcp_info buf = 136448258;
      nw_endpoint_t v35 = "nw_endpoint_flow_validate_delegation_block_invoke";
      __int16 v36 = 2082;
      id v37 = v26;
      __int16 v38 = 2082;
      id v39 = v25;
      __int16 v40 = 2082;
      nw_endpoint_t v41 = v27;
      __int16 v42 = 2082;
      BOOL v43 = v28;
      __int16 v44 = 2082;
      id v45 = v29;
      __int16 v46 = 2114;
      id v47 = v30;
      __int16 v48 = 2082;
      uint64_t v49 = v31;
      __int16 v50 = 2082;
      os_log_type_t v51 = string_ptr;
      _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Domain %{public}s matches %{public}s",  buf,  0x5Cu);
    }
  }

  uint64_t v21 = 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
LABEL_12:

  return v21;
}

void sub_18257974C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_endpoint_flow_validate_delegationP30NWConcrete_nw_endpoint_handler_block_invoke()
{
  uint64_t v0 = nw_utilities_copy_local_entitlement_value("com.apple.private.network.delegation-allowlist");
  unsigned int v1 = (void *)nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist;
  nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist = v0;

  if (!nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist)
  {
    uint64_t v2 = nw_utilities_copy_local_entitlement_value("com.apple.private.network.delegation-whitelist");
    uint64_t v3 = (void *)nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist;
    nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist = v2;
  }

void nw_endpoint_flow_reset_is_leaf_handler(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 32) = *((_BYTE *)v3 + 32) & 0xFD | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v17 = "nw_endpoint_flow_reset_is_leaf_handler";
  size_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v17 = "nw_endpoint_flow_reset_is_leaf_handler";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v17 = "nw_endpoint_flow_reset_is_leaf_handler";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v17 = "nw_endpoint_flow_reset_is_leaf_handler";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v17 = "nw_endpoint_flow_reset_is_leaf_handler";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_endpoint_handler_access_parent_flow_handler(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v4)
  {
    char v5 = (id *)v3;
    if (v5)
    {
      uint64_t v6 = v5;
      size_t v7 = v5[9];

      if (v7)
      {
        while (1)
        {
          size_t v7 = v7;
          int v8 = v7[29];

          if (v8 == 2) {
            break;
          }
          os_log_type_t v9 = v7;
          size_t v7 = v9[9];

          if (!v7) {
            goto LABEL_8;
          }
        }

        v4[2](v4, v7);
      }

      goto LABEL_8;
    }

    __nwlog_obj();
    char v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    nw_endpoint_t v29 = "nw_endpoint_handler_copy_parent";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v15, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          nw_endpoint_t v29 = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            nw_endpoint_t v29 = "nw_endpoint_handler_copy_parent";
            __int16 v30 = 2082;
            uint64_t v31 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v16,  v22,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (v23)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          nw_endpoint_t v29 = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_181A5C000, v16, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          nw_endpoint_t v29 = "nw_endpoint_handler_copy_parent";
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182579FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_flow_set_pre_connected_fd_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 900LL) = a2;
  return 1LL;
}

BOOL nw_endpoint_handler_has_connected_flow(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    size_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v19 = "nw_endpoint_handler_has_connected_flow";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v19 = "nw_endpoint_handler_has_connected_flow";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v19 = "nw_endpoint_handler_has_connected_flow";
            __int16 v20 = 2082;
            uint64_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v13)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v19 = "nw_endpoint_handler_has_connected_flow";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v19 = "nw_endpoint_handler_has_connected_flow";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18257A2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_flow_copy_connected_socket_wrapper(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 220);
    if ((v2[8]._os_unfair_lock_opaque & 2) != 0 || (v2[8]._os_unfair_lock_opaque & 0x100) != 0)
    {
      id v3 = *(id *)&v2[222]._os_unfair_lock_opaque;
    }

    else
    {
      if (!*(void *)&v2[234]._os_unfair_lock_opaque)
      {
        id v4 = 0LL;
        goto LABEL_8;
      }

      id v3 = (id)nw_endpoint_handler_copy_connected_socket_wrapper();
    }

    id v4 = v3;
LABEL_8:
    os_unfair_lock_unlock(v2 + 220);
    goto LABEL_9;
  }

  __nwlog_obj();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
  size_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v12)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18257A590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_endpoint_flow_fillout_tcp_connection_info_block_invoke(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  socklen_t v17 = 112;
  int v2 = getsockopt(a2, 6, 262, *(void **)(a1 + 32), &v17);
  if (v2)
  {
    int v3 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446466;
    os_log_type_t v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
    __int16 v20 = 1024;
    int v21 = v3;
    char v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
        __int16 v20 = 1024;
        int v21 = v3;
        int v8 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
LABEL_16:
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v7;
        goto LABEL_17;
      }

      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
        __int16 v20 = 1024;
        int v21 = v3;
        int v8 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_16;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_18:

          if (!v5) {
            return v2 == 0;
          }
          goto LABEL_12;
        }

        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
        __int16 v20 = 1024;
        int v21 = v3;
        int v8 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, no backtrace";
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v10;
LABEL_17:
        _os_log_impl(&dword_181A5C000, v13, v14, v8, buf, 0x12u);
        goto LABEL_18;
      }

      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446722;
        os_log_type_t v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
        __int16 v20 = 1024;
        int v21 = v3;
        __int16 v22 = 2082;
        BOOL v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v6,  v10,  "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(backtrace_string);
    }

    if (v5) {
LABEL_12:
    }
      free(v5);
  }

  return v2 == 0;
}

void *nw_endpoint_handler_copy_connected_parameters_with_protocol(void *a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    nw_endpoint_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v42 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
    socklen_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v17, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v42 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
          _os_log_impl(&dword_181A5C000, v18, v34, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v42 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
            __int16 v43 = 2082;
            __int16 v44 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v18,  v36,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v17) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }

        if (v37)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v42 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
          _os_log_impl(&dword_181A5C000, v18, v36, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v42 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
          _os_log_impl( &dword_181A5C000,  v18,  v38,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_48;
    }

void sub_18257B008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_handler *nw_endpoint_handler_copy_top_protocol_flow_handler(void *a1)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
        _os_log_impl(&dword_181A5C000, v11, v23, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
          __int16 v32 = 2082;
          nw_endpoint_t v33 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_42;
      }

      if (v26)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
        _os_log_impl(&dword_181A5C000, v11, v25, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
        _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18257B6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_modify_protocol_stack(void *a1, void *a2)
{
  uint64_t v395 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v367 = a2;
  v364 = v3;
  if (!v3)
  {
    __nwlog_obj();
    __int16 v314 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
    int v174 = (char *)_os_log_send_and_compose_impl();

    v375[0] = OS_LOG_TYPE_ERROR;
    v373[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v174, v375, v373))
    {
      if (v375[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v175 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v315 = v375[0];
        if (os_log_type_enabled(v175, v375[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl(&dword_181A5C000, v175, v315, "%{public}s called with null handler", buf, 0xCu);
        }

        goto LABEL_477;
      }

      if (v373[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        id v175 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v327 = v375[0];
        if (os_log_type_enabled(v175, v375[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl( &dword_181A5C000,  v175,  v327,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_477;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v175 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v319 = v375[0];
      BOOL v320 = os_log_type_enabled(v175, v375[0]);
      if (!backtrace_string)
      {
        if (v320)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl(&dword_181A5C000, v175, v319, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }

        goto LABEL_477;
      }

      if (v320)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
        __int16 v379 = 2082;
        v380 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v175,  v319,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_628;
    }

LABEL_477:
        goto LABEL_478;
      }

      if (v373[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        id v175 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v335 = v375[0];
        if (os_log_type_enabled(v175, v375[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl( &dword_181A5C000,  v175,  v335,  "%{public}s called with null modifier, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_477;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v175 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v325 = v375[0];
      BOOL v326 = os_log_type_enabled(v175, v375[0]);
      if (!backtrace_string)
      {
        if (v326)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl(&dword_181A5C000, v175, v325, "%{public}s called with null modifier, no backtrace", buf, 0xCu);
        }

        goto LABEL_477;
      }

      if (v326)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
        __int16 v379 = 2082;
        v380 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v175,  v325,  "%{public}s called with null modifier, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_628:
      free(backtrace_string);
      if (!v174) {
        goto LABEL_480;
      }
      goto LABEL_479;
    }

    goto LABEL_478;
  }

  BOOL v6 = v4;
  int state = v6->state;

  if ((state & 0xFFFFFFFE) == 4)
  {
LABEL_480:
    uint64_t v196 = 0LL;
    goto LABEL_603;
  }

  unint64_t v357 = v6;
  id v8 = nw_endpoint_handler_copy_flow(v6);
  os_log_type_t v9 = v6;
  id v361 = v9[4];
  unsigned int v362 = v9;

  uint64_t v10 = *((void *)v8 + 51);
  v358 = v8;
  if (!v10) {
    goto LABEL_456;
  }
  char v11 = 0;
  unsigned int log = 0;
  uint64_t v359 = (uint64_t)v8 + 376;
  while (2)
  {
    int v368 = 0;
    os_log_type_t v12 = *(_DWORD **)(v10 + 16);
    (*((void (**)(id, void, _DWORD *, int *))v367 + 2))(v367, log, v12, &v368);
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = v13;
    if (v13)
    {
      os_log_type_t v15 = v13;
      BOOL v16 = v15 + 1;
      id v17 = v15[1];

      char identifier = nw_protocol_definition_get_identifier(v17);
      os_log_type_t v19 = v15;
      id v20 = *v16;
    }

    else
    {
      id v20 = 0LL;
      char identifier = 0LL;
    }

    uint64_t v21 = *(void *)(v10 + 32);
    switch(v368)
    {
      case 0:
        ++log;
        uint64_t v359 = v10;
        goto LABEL_141;
      case 1:
        if ((v12[9] & 0xFFFFFFFE) == 2)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v214 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            {
              os_log_t loga = v214;
              id_string = nw_endpoint_handler_get_id_string(v362);
              BOOL v230 = nw_endpoint_handler_dry_run_string(v362);
              nw_endpoint_t v231 = nw_endpoint_handler_copy_endpoint(v362);
              logging_description = nw_endpoint_get_logging_description(v231);
              id v233 = nw_endpoint_handler_state_string(v362);
              os_log_type_t v234 = nw_endpoint_handler_mode_string(v362);
              id v235 = nw_endpoint_handler_copy_current_path(v362);
              *(_DWORD *)tcp_info buf = 136448002;
              uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
              __int16 v379 = 2082;
              v380 = (char *)id_string;
              __int16 v381 = 2082;
              unsigned int v382 = v230;
              __int16 v383 = 2082;
              char v384 = (void *)logging_description;
              __int16 v385 = 2082;
              v386 = v233;
              __int16 v387 = 2082;
              v388 = v234;
              __int16 v389 = 2114;
              id v390 = v235;
              __int16 v391 = 2082;
              __int16 v392 = v12;
              _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Can only replace one-to -one protocols, (%{public}s is not one-to-one)",  buf,  0x52u);

              goto LABEL_599;
            }

            goto LABEL_600;
          }

          goto LABEL_601;
        }

        if (identifier)
        {
          nw_endpoint_t v29 = nw_endpoint_handler_copy_endpoint(v362);
          uint64_t protocol_for_definition = nw_endpoint_handler_create_protocol_for_definition( (uint64_t)identifier,  v20,  v29,  v361);

          if (!protocol_for_definition)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v214 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR)) {
              goto LABEL_600;
            }
LABEL_541:
            os_log_t loga = v214;
            os_log_type_t v256 = nw_endpoint_handler_get_id_string(v362);
            BOOL v257 = nw_endpoint_handler_dry_run_string(v362);
            nw_endpoint_t v258 = nw_endpoint_handler_copy_endpoint(v362);
            os_log_type_t v259 = nw_endpoint_get_logging_description(v258);
            os_log_type_t v260 = nw_endpoint_handler_state_string(v362);
            BOOL v261 = nw_endpoint_handler_mode_string(v362);
            id v262 = nw_endpoint_handler_copy_current_path(v362);
            *(_DWORD *)tcp_info buf = 136448002;
            uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
            __int16 v379 = 2082;
            v380 = (char *)v256;
            __int16 v381 = 2082;
            unsigned int v382 = v257;
            __int16 v383 = 2082;
            char v384 = (void *)v259;
            __int16 v385 = 2082;
            v386 = v260;
            __int16 v387 = 2082;
            v388 = v261;
            __int16 v389 = 2114;
            id v390 = v262;
            __int16 v391 = 2082;
            __int16 v392 = identifier;
            _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to create protocol %{public}s",  buf,  0x52u);

            goto LABEL_599;
          }

          nw_parameters_add_protocol_stack_member(v361, 4, 0xFFFFFFFF, v14);
          nw_endpoint_handler_set_protocol_instance(v362, v14, v20, protocol_for_definition);
          if (!v21)
          {
            __nwlog_obj();
            uint64_t v328 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)tcp_info buf = 136446210;
            uint64_t v378 = "__nw_protocol_replace_input_handler";
            uint64_t v329 = (char *)_os_log_send_and_compose_impl();

            v375[0] = OS_LOG_TYPE_ERROR;
            v373[0] = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v329, v375, v373))
            {
              if (v375[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                uint64_t v330 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v331 = v375[0];
                if (os_log_type_enabled(v330, v375[0]))
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  uint64_t v378 = "__nw_protocol_replace_input_handler";
                  _os_log_impl(&dword_181A5C000, v330, v331, "%{public}s called with null protocol", buf, 0xCu);
                }

                goto LABEL_671;
              }

              if (v373[0])
              {
                uint64_t v336 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                uint64_t v330 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v337 = v375[0];
                BOOL v338 = os_log_type_enabled(v330, v375[0]);
                if (v336)
                {
                  if (v338)
                  {
                    *(_DWORD *)tcp_info buf = 136446466;
                    uint64_t v378 = "__nw_protocol_replace_input_handler";
                    __int16 v379 = 2082;
                    v380 = v336;
                    _os_log_impl( &dword_181A5C000,  v330,  v337,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v336);
                  goto LABEL_672;
                }

                if (v338)
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  uint64_t v378 = "__nw_protocol_replace_input_handler";
                  _os_log_impl( &dword_181A5C000,  v330,  v337,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                uint64_t v330 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v340 = v375[0];
                if (os_log_type_enabled(v330, v375[0]))
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  uint64_t v378 = "__nw_protocol_replace_input_handler";
                  _os_log_impl( &dword_181A5C000,  v330,  v340,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                }
              }

        _os_log_impl(&dword_181A5C000, v315, v316, v317, (uint8_t *)buf, 0xCu);
        goto LABEL_629;
      }

LABEL_672:
            if (v329) {
              free(v329);
            }
LABEL_674:
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v214 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR)) {
              goto LABEL_600;
            }
LABEL_546:
            os_log_t loga = v214;
            BOOL v263 = nw_endpoint_handler_get_id_string(v362);
            os_log_type_t v264 = nw_endpoint_handler_dry_run_string(v362);
            nw_endpoint_t v360 = nw_endpoint_handler_copy_endpoint(v362);
            BOOL v265 = nw_endpoint_get_logging_description(v360);
            os_log_type_t v266 = nw_endpoint_handler_state_string(v362);
            os_log_type_t v267 = nw_endpoint_handler_mode_string(v362);
            id v268 = nw_endpoint_handler_copy_current_path(v362);
            *(_DWORD *)tcp_info buf = 136448258;
            uint64_t v378 = "nw_endpoint_handler_modify_protocol_stack";
            __int16 v379 = 2082;
            v380 = (char *)v263;
            __int16 v381 = 2082;
            unsigned int v382 = v264;
            __int16 v383 = 2082;
            char v384 = (void *)v265;
            __int16 v385 = 2082;
            v386 = v266;
            __int16 v387 = 2082;
            v388 = v267;
            __int16 v389 = 2114;
            id v390 = v268;
            __int16 v391 = 2082;
            __int16 v392 = v12;
            __int16 v393 = 2082;
            __int16 v394 = identifier;
            _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to replace protoco l %{public}s with %{public}s",  buf,  0x5Cu);

            goto LABEL_599;
          }

          if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v43 = *(void *)(v21 + 88);
            if (v43) {
              *(void *)(v21 + 8_Block_object_dispose((const void *)(v20 - 192), 8) = v43 + 1;
            }
            *(void *)id v375 = v21;
            char v31 = v376 | 1;
          }

          else
          {
            *(void *)id v375 = v21;
            char v31 = v376 & 0xFE;
          }

          char v376 = v31;
          if (*(_UNKNOWN **)(v10 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v45 = *(void *)(v10 + 88);
            if (v45) {
              *(void *)(v10 + 8_Block_object_dispose((const void *)(v20 - 192), 8) = v45 + 1;
            }
            *(void *)uint64_t v373 = v10;
            char v44 = v374 | 1;
          }

          else
          {
            *(void *)uint64_t v373 = v10;
            char v44 = v374 & 0xFE;
          }

          char v374 = v44;
          if (*(_UNKNOWN **)(protocol_for_definition + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v47 = *(void *)(protocol_for_definition + 88);
            if (v47) {
              *(void *)(protocol_for_definition + 8_Block_object_dispose((const void *)(v20 - 192), 8) = v47 + 1;
            }
            *(void *)v370 = protocol_for_definition;
            char v46 = v371 | 1;
          }

          else
          {
            *(void *)v370 = protocol_for_definition;
            char v46 = v371 & 0xFE;
          }

          char v371 = v46;
          uint64_t v48 = *(void *)(v21 + 24);
          if (v48)
          {
            uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
            if (v49)
            {
              char v50 = v49(v21, v10, protocol_for_definition);
              if ((v371 & 1) != 0) {
                goto LABEL_87;
              }
              goto LABEL_88;
            }
          }

          __nwlog_obj();
          __int16 v105 = (void *)objc_claimAutoreleasedReturnValue();
          __int16 v106 = *(const char **)(v21 + 16);
          if (!v106) {
            __int16 v106 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          uint64_t v378 = "__nw_protocol_replace_input_handler";
          __int16 v379 = 2082;
          v380 = (char *)v106;
          __int16 v381 = 2048;
          unsigned int v382 = (const char *)v21;
          uint64_t v351 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v369 = 0;
          uint64_t v107 = (char *)v351;
          if (__nwlog_fault(v351, &type, &v369))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              __int16 v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v343 = type;
              if (os_log_type_enabled(v108, type))
              {
                uint64_t v109 = *(const char **)(v21 + 16);
                if (!v109) {
                  uint64_t v109 = "invalid";
                }
                *(_DWORD *)tcp_info buf = 136446722;
                uint64_t v378 = "__nw_protocol_replace_input_handler";
                __int16 v379 = 2082;
                v380 = (char *)v109;
                __int16 v381 = 2048;
                unsigned int v382 = (const char *)v21;
                _os_log_impl( &dword_181A5C000,  v108,  v343,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback",  buf,  0x20u);
              }

              goto LABEL_247;
            }

            if (v369)
            {
              uint64_t v119 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              uint64_t v345 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v341 = type;
              BOOL v120 = os_log_type_enabled(v345, type);
              if (v119)
              {
                if (v120)
                {
                  uint64_t v121 = *(const char **)(v21 + 16);
                  if (!v121) {
                    uint64_t v121 = "invalid";
                  }
                  *(_DWORD *)tcp_info buf = 136446978;
                  uint64_t v378 = "__nw_protocol_replace_input_handler";
                  __int16 v379 = 2082;
                  v380 = (char *)v121;
                  __int16 v381 = 2048;
                  unsigned int v382 = (const char *)v21;
                  __int16 v383 = 2082;
                  char v384 = v119;
                  _os_log_impl( &dword_181A5C000,  v345,  v341,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                }

                free(v119);
              }

              else
              {
                if (v120)
                {
                  char v150 = *(const char **)(v21 + 16);
                  if (!v150) {
                    char v150 = "invalid";
                  }
                  *(_DWORD *)tcp_info buf = 136446722;
                  uint64_t v378 = "__nw_protocol_replace_input_handler";
                  __int16 v379 = 2082;
                  v380 = (char *)v150;
                  __int16 v381 = 2048;
                  unsigned int v382 = (const char *)v21;
                  _os_log_impl( &dword_181A5C000,  v345,  v341,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace",  buf,  0x20u);
                }
              }
            }

            else
            {
              __nwlog_obj();
              __int16 v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v347 = type;
              if (os_log_type_enabled(v108, type))
              {
                uint64_t v147 = *(const char **)(v21 + 16);
                if (!v147) {
                  uint64_t v147 = "invalid";
                }
                *(_DWORD *)tcp_info buf = 136446722;
                uint64_t v378 = "__nw_protocol_replace_input_handler";
                __int16 v379 = 2082;
                v380 = (char *)v147;
                __int16 v381 = 2048;
                unsigned int v382 = (const char *)v21;
                _os_log_impl( &dword_181A5C000,  v108,  v347,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
              }

LABEL_662:
          goto LABEL_663;
        }

        if (v21 == v359)
        {
          __nwlog_obj();
          os_log_type_t v240 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v378 = "nw_protocol_utilities_add_input_handler";
          __int16 v379 = 2048;
          v380 = (char *)v359;
          os_log_type_t v241 = (char *)_os_log_send_and_compose_impl();

          v375[0] = OS_LOG_TYPE_ERROR;
          v373[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v241, v375, v373))
          {
            if (v375[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              BOOL v242 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v243 = v375[0];
              if (os_log_type_enabled(v242, v375[0]))
              {
                *(_DWORD *)tcp_info buf = 136446466;
                uint64_t v378 = "nw_protocol_utilities_add_input_handler";
                __int16 v379 = 2048;
                v380 = (char *)v359;
                _os_log_impl( &dword_181A5C000,  v242,  v243,  "%{public}s Cannot add input handler %p to itself",  buf,  0x16u);
              }

              goto LABEL_588;
            }

            if (v373[0])
            {
              os_log_type_t v272 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              BOOL v242 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v273 = v375[0];
              BOOL v274 = os_log_type_enabled(v242, v375[0]);
              if (v272)
              {
                if (v274)
                {
                  *(_DWORD *)tcp_info buf = 136446722;
                  uint64_t v378 = "nw_protocol_utilities_add_input_handler";
                  __int16 v379 = 2048;
                  v380 = (char *)v359;
                  __int16 v381 = 2082;
                  unsigned int v382 = v272;
                  _os_log_impl( &dword_181A5C000,  v242,  v273,  "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s",  buf,  0x20u);
                }

                free(v272);
                goto LABEL_589;
              }

              if (v274)
              {
                *(_DWORD *)tcp_info buf = 136446466;
                uint64_t v378 = "nw_protocol_utilities_add_input_handler";
                __int16 v379 = 2048;
                v380 = (char *)v359;
                _os_log_impl( &dword_181A5C000,  v242,  v273,  "%{public}s Cannot add input handler %p to itself, no backtrace",  buf,  0x16u);
              }
            }

            else
            {
              __nwlog_obj();
              BOOL v242 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v285 = v375[0];
              if (os_log_type_enabled(v242, v375[0]))
              {
                *(_DWORD *)tcp_info buf = 136446466;
                uint64_t v378 = "nw_protocol_utilities_add_input_handler";
                __int16 v379 = 2048;
                v380 = (char *)v359;
                _os_log_impl( &dword_181A5C000,  v242,  v285,  "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded",  buf,  0x16u);
              }
            }

LABEL_588:
          }

LABEL_601:
          uint64_t v196 = 0LL;
          goto LABEL_602;
        }

        uint64_t v41 = *(void *)(v359 + 32);
        BOOL v42 = v41 == v10 || v41 == 0;
        char v11 = 1;
        if (v42 && v41 != v21)
        {
          if (v41)
          {
            if (*(_UNKNOWN **)(v41 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v70 = *(void *)(v41 + 88);
              if (v70)
              {
                uint64_t v71 = v70 - 1;
                *(void *)(v41 + 8_Block_object_dispose((const void *)(v20 - 192), 8) = v71;
                if (!v71)
                {
                  os_log_type_t v72 = *(void (***)(void))(v41 + 64);
                  if (v72)
                  {
                    *(void *)(v41 + 64) = 0LL;
                    v72[2](v72);
                    _Block_release(v72);
                  }

                  if ((*(_BYTE *)(v41 + 72) & 1) != 0)
                  {
                    os_log_type_t v73 = *(const void **)(v41 + 64);
                    if (v73) {
                      _Block_release(v73);
                    }
                  }

                  free((void *)v41);
                }
              }
            }
          }

          *(void *)(v359 + 32) = v21;
LABEL_219:
          if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v94 = *(void *)(v21 + 88);
            if (v94) {
              *(void *)(v21 + 8_Block_object_dispose((const void *)(v20 - 192), 8) = v94 + 1;
            }
          }
        }

void sub_18257FEA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_append_and_start_application_protocol(void *a1, void *a2)
{
  uint64_t v375 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  os_log_type_t v348 = v3;
  if (!v3)
  {
    uint64_t v208 = v4;
    __nwlog_obj();
    id v209 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    v358 = "nw_endpoint_handler_append_and_start_application_protocol";
    nw_endpoint_t v25 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v353) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v210 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v211 = type[0];
      if (os_log_type_enabled(v210, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        _os_log_impl(&dword_181A5C000, v210, v211, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if ((_BYTE)v353)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v210 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v241 = type[0];
      BOOL v242 = os_log_type_enabled(v210, type[0]);
      if (backtrace_string)
      {
        if (v242)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          v358 = "nw_endpoint_handler_append_and_start_application_protocol";
          __int16 v359 = 2082;
          nw_endpoint_t v360 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v210,  v241,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_335:
        os_log_type_t v23 = v208;
        if (!v25) {
          goto LABEL_87;
        }
        goto LABEL_86;
      }

      if (v242)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        _os_log_impl(&dword_181A5C000, v210, v241, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v210 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v287 = type[0];
      if (os_log_type_enabled(v210, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        _os_log_impl( &dword_181A5C000,  v210,  v287,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_335;
  }

  BOOL v6 = (unsigned int *)v3;
  uint64_t v7 = v6[29];

  if ((_DWORD)v7 == 2)
  {
    nw_protocol_definition_t v347 = nw_protocol_options_copy_definition(v5);
    unsigned int v346 = v5;
    if (nw_endpoint_handler_get_minimize_logging(v6))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v6) & 1) != 0)
      {
LABEL_45:
        BOOL v42 = v6;
        int state = v42->state;

        if ((state & 0xFFFFFFFE) == 4)
        {
          uint64_t started = 0LL;
LABEL_209:

          os_log_type_t v23 = v346;
          goto LABEL_210;
        }

        uint64_t v45 = nw_endpoint_handler_copy_flow(v42);
        char v46 = v45;
        uint64_t v345 = v45;
        if ((*((_BYTE *)v45 + 32) & 4) != 0)
        {
          BOOL v63 = (os_unfair_lock_s *)((char *)v45 + 880);
          os_unfair_lock_lock((os_unfair_lock_t)v45 + 220);
          uint64_t v64 = (nw_parameters *)*((id *)v46 + 117);
          os_unfair_lock_unlock(v63);
          if (v64) {
            uint64_t started = nw_endpoint_handler_append_and_start_application_protocol(v64, v346);
          }
          else {
            uint64_t started = 0LL;
          }
          goto LABEL_208;
        }

        uint64_t v47 = v42;
        parameters = v47->parameters;
        uint64_t v48 = v47;

        nw_protocol_stack_t v342 = nw_parameters_copy_default_protocol_stack(parameters);
        nw_protocol_stack_append_application_protocol(v342, v346);
        output_handler = (nw_protocol *)*((void *)v345 + 51);
        if (!output_handler)
        {
          char v65 = v47;
          BOOL v66 = (*((_BYTE *)v65 + 268) & 0x20) == 0;

          if (v66)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v67 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              os_log_type_t v68 = v65;

              BOOL v69 = v68;
              BOOL v70 = (*((_BYTE *)v65 + 268) & 1) == 0;

              if (v70) {
                uint64_t v71 = "";
              }
              else {
                uint64_t v71 = "dry-run ";
              }
              nw_endpoint_t v72 = nw_endpoint_handler_copy_endpoint(v69);
              logging_description = nw_endpoint_get_logging_description(v72);
              uint64_t v74 = v69;
              char v75 = v74;
              uint64_t v76 = v42->state;
              else {
                char v77 = off_189BBBBF0[v76];
              }

              uint64_t v78 = v75;
              uint64_t v79 = v78;
              unsigned int v80 = v6[29];
              char v81 = "path";
              switch(v80)
              {
                case 0u:
                  break;
                case 1u:
                  char v81 = "resolver";
                  break;
                case 2u:
                  char v81 = nw_endpoint_flow_mode_string(v78[31]);
                  break;
                case 3u:
                  char v81 = "proxy";
                  break;
                case 4u:
                  char v81 = "fallback";
                  break;
                case 5u:
                  char v81 = "transform";
                  break;
                default:
                  char v81 = "unknown-mode";
                  break;
              }

              uint64_t v135 = v79;
              os_unfair_lock_lock((os_unfair_lock_t)v135 + 28);
              id v136 = v135[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v135 + 28);

              *(_DWORD *)tcp_info buf = 136447746;
              v358 = "nw_endpoint_handler_append_and_start_application_protocol";
              __int16 v359 = 2082;
              nw_endpoint_t v360 = v68 + 168;
              __int16 v361 = 2082;
              unsigned int v362 = v71;
              __int16 v363 = 2082;
              v364 = (void *)logging_description;
              __int16 v365 = 2082;
              v366 = v77;
              __int16 v367 = 2082;
              int v368 = v81;
              __int16 v369 = 2114;
              id v370 = v136;
              _os_log_impl( &dword_181A5C000,  v67,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No previous output handler on flow",  buf,  0x48u);
            }
          }

          goto LABEL_206;
        }

        uint64_t v51 = (uint64_t)v345 + 376;
        if (output_handler != *((nw_protocol **)v345 + 90))
        {
          gotLoadHelper_x19__ne_filter_protocol_identifier(v49);
          triggered_agent_uuids = v47[2].triggered_agent_uuids;
          while (1)
          {
            uint64_t v54 = output_handler;
            char identifier = output_handler->identifier;
            uint64_t v56 = triggered_agent_uuids ? (void *)ne_filter_protocol_identifier_delayInitStub(v52) : 0LL;
            if (nw_protocols_are_equal(identifier, v56)) {
              break;
            }
            char v57 = nw_parameters_copy_protocol_options_legacy(parameters, output_handler);
            uint64_t v58 = v57;
            if (v57)
            {
              uint64_t v59 = v57;
              id v60 = v59[1];

              char v61 = (char *)v60;
              if (v61)
              {
                char v61 = v61;
                BOOL v62 = v61[184] < 0;

                if (v62)
                {
                  uint64_t v58 = v59;
LABEL_91:

                  break;
                }
              }
            }

            else
            {
              char v61 = 0LL;
            }

            output_handler = v54->output_handler;
            if (!output_handler) {
              goto LABEL_91;
            }

            uint64_t v51 = (uint64_t)v54;
            if (output_handler == *((nw_protocol **)v345 + 90)) {
              goto LABEL_93;
            }
          }

          output_handler = v54;
        }

void sub_182583300( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_start_tls_while_connected(void *a1)
{
  uint64_t v370 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v189 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v355 = "nw_endpoint_start_tls_while_connected";
    id v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v350) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v190 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v191 = type[0];
      if (os_log_type_enabled(v190, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v355 = "nw_endpoint_start_tls_while_connected";
        _os_log_impl(&dword_181A5C000, v190, v191, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if ((_BYTE)v350)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v190 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v215 = type[0];
      BOOL v216 = os_log_type_enabled(v190, type[0]);
      if (backtrace_string)
      {
        if (v216)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v355 = "nw_endpoint_start_tls_while_connected";
          __int16 v356 = 2082;
          unint64_t v357 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v190,  v215,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_292:
        uint64_t v20 = 0LL;
        if (!v22) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }

      if (v216)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v355 = "nw_endpoint_start_tls_while_connected";
        _os_log_impl(&dword_181A5C000, v190, v215, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v190 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v241 = type[0];
      if (os_log_type_enabled(v190, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v355 = "nw_endpoint_start_tls_while_connected";
        _os_log_impl( &dword_181A5C000,  v190,  v241,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_292;
  }

  id v3 = (unsigned int *)v1;
  uint64_t v4 = v3[29];

  if ((_DWORD)v4 == 2)
  {
    uint64_t v345 = v2;
    if (nw_endpoint_handler_get_minimize_logging(v3))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) != 0)
      {
LABEL_45:
        char v39 = v3;
        int state = v39->state;

        if ((state & 0xFFFFFFFE) == 4)
        {
          uint64_t started = 0LL;
LABEL_200:
          uint64_t v20 = v345;
          goto LABEL_201;
        }

        BOOL v42 = nw_endpoint_handler_copy_flow(v39);
        uint64_t v43 = v42;
        nw_protocol_stack_t v342 = v42;
        if ((*((_BYTE *)v42 + 32) & 4) != 0)
        {
          os_unfair_lock_lock((os_unfair_lock_t)v42 + 220);
          if (*((void *)v43 + 117)) {
            uint64_t started = nw_endpoint_start_tls_while_connected();
          }
          else {
            uint64_t started = 0LL;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)v43 + 220);
          goto LABEL_199;
        }

        char v44 = v39;
        id v344 = v44[4];
        uint64_t v45 = v44;

        nw_parameters_set_tls(v344, 1);
        char v46 = (void *)nw_protocol_boringssl_copy_definition();
        os_log_type_t v340 = v46;
        os_log_type_t v341 = nw_parameters_copy_protocol_options_for_definition(v344, v46);
        if (v341)
        {
          output_handler = (nw_protocol *)*((void *)v342 + 51);
          if (output_handler)
          {
            uint64_t v49 = (uint64_t)v342 + 376;
            if (output_handler != *((nw_protocol **)v342 + 90))
            {
              gotLoadHelper_x20__ne_filter_protocol_identifier(v47);
              uint64_t v51 = v46[81];
              while (1)
              {
                double v52 = output_handler;
                char identifier = output_handler->identifier;
                uint64_t v54 = v51 ? (void *)ne_filter_protocol_identifier_delayInitStub(v50) : 0LL;
                if (nw_protocols_are_equal(identifier, v54)) {
                  break;
                }
                char v55 = nw_parameters_copy_protocol_options_legacy(v344, output_handler);
                uint64_t v56 = v55;
                if (v55)
                {
                  char v57 = v55;
                  id v58 = v57[1];

                  uint64_t v59 = (char *)v58;
                  if (v59)
                  {
                    uint64_t v59 = v59;
                    BOOL v60 = v59[184] < 0;

                    if (v60)
                    {
                      uint64_t v56 = v57;
LABEL_99:

                      break;
                    }
                  }
                }

                else
                {
                  uint64_t v59 = 0LL;
                }

                output_handler = v52->output_handler;
                if (!output_handler) {
                  goto LABEL_99;
                }

                uint64_t v49 = (uint64_t)v52;
                if (output_handler == *((nw_protocol **)v342 + 90)) {
                  goto LABEL_101;
                }
              }

              output_handler = v52;
            }

void sub_182586794( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_channel(void *a1)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    nw_endpoint_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    char v34 = "nw_endpoint_handler_copy_channel";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v34 = "nw_endpoint_handler_copy_channel";
        _os_log_impl(&dword_181A5C000, v14, v26, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v34 = "nw_endpoint_handler_copy_channel";
          __int16 v35 = 2082;
          os_log_type_t v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_43;
      }

      if (v29)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v34 = "nw_endpoint_handler_copy_channel";
        _os_log_impl(&dword_181A5C000, v14, v28, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v34 = "nw_endpoint_handler_copy_channel";
        _os_log_impl( &dword_181A5C000,  v14,  v30,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182587110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_remove_all_interface_options(void *a1)
{
  uint64_t v146 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    unsigned int v80 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    char v133 = "nw_endpoint_handler_remove_all_interface_options";
    id v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v12_Block_object_dispose((const void *)(v20 - 192), 8) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v82 = type[0];
      if (os_log_type_enabled(v81, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_endpoint_handler_remove_all_interface_options";
        _os_log_impl(&dword_181A5C000, v81, v82, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if ((_BYTE)v128)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v91 = type[0];
      BOOL v92 = os_log_type_enabled(v81, type[0]);
      if (backtrace_string)
      {
        if (v92)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v133 = "nw_endpoint_handler_remove_all_interface_options";
          __int16 v134 = 2082;
          id_str = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v81,  v91,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_158:
        uint64_t v20 = 0LL;
        if (!v22) {
          goto LABEL_109;
        }
        goto LABEL_100;
      }

      if (v92)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_endpoint_handler_remove_all_interface_options";
        _os_log_impl(&dword_181A5C000, v81, v91, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v100 = type[0];
      if (os_log_type_enabled(v81, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_endpoint_handler_remove_all_interface_options";
        _os_log_impl( &dword_181A5C000,  v81,  v100,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_158;
  }

  id v3 = (NWConcrete_nw_endpoint_handler *)v1;
  uint64_t mode = v3->mode;

  if ((_DWORD)mode == 2)
  {
    char v125 = v2;
    uint64_t v5 = &qword_18C45F000;
    if (nw_endpoint_handler_get_minimize_logging(v3))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) != 0)
      {
LABEL_45:
        id v38 = nw_endpoint_handler_copy_flow(v3);
        __int16 v39 = (void *)*((void *)v38 + 104);
        if (v39)
        {
          nw_path_flow_registration_remove_all_interface_options(v39);
          id v40 = (id)nw_path_flow_registration_copy_path(*((void **)v38 + 104));
          os_unfair_lock_lock((os_unfair_lock_t)v38 + 220);
          objc_storeStrong((id *)v38 + 2, v40);
          if ((*((_BYTE *)v38 + 33) & 4) != 0) {
            objc_storeStrong((id *)v38 + 1, v40);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)v38 + 220);
          uint64_t v41 = (const char *)*((void *)v38 + 51);
          id v42 = *((id *)v38 + 2);
          if (v41 && (uint64_t v43 = *((void *)v41 + 3)) != 0)
          {
            if (*(void *)(v43 + 168)) {
              BOOL v44 = v42 == 0LL;
            }
            else {
              BOOL v44 = 1;
            }
            int v45 = !v44;

            if (v45)
            {
              id v46 = *((id *)v38 + 2);
              double v47 = v46;
              uint64_t v48 = (void *)*((void *)v41 + 5);
              if (v48 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v62 = *((void *)v41 + 11);
                if (v62) {
                  *((void *)v41 + 11) = v62 + 1;
                }
                char v49 = -1;
              }

              else
              {
                char v49 = 0;
              }

              *(void *)os_log_type_t type = v41;
              char v131 = v49;
              BOOL v63 = (void *)*((void *)v38 + 52);
              if (v63 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v65 = *((void *)v38 + 58);
                if (v65) {
                  *((void *)v38 + 5_Block_object_dispose((const void *)(v20 - 192), 8) = v65 + 1;
                }
                char v64 = -1;
              }

              else
              {
                char v64 = 0;
              }

              uint64_t v128 = (uint64_t)v38 + 376;
              char v129 = v64;
              if (v46)
              {
                uint64_t v66 = *((void *)v41 + 3);
                if (v66)
                {
                  uint64_t v67 = *(void (**)(const char *, char *, id))(v66 + 168);
                  if (v67)
                  {
                    v67(v41, (char *)v38 + 376, v46);
LABEL_81:
                    if (v63 == &nw_protocol_ref_counted_handle) {
                      nw::release_if_needed<nw_protocol *>(&v128);
                    }
                    if (v48 == &nw_protocol_ref_counted_handle) {
                      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                    }

                    goto LABEL_107;
                  }
                }

                __nwlog_obj();
                nw_endpoint_t v93 = (void *)objc_claimAutoreleasedReturnValue();
                uint64_t v94 = (const char *)*((void *)v41 + 2);
                *(_DWORD *)tcp_info buf = 136446722;
                char v133 = "__nw_protocol_updated_path";
                if (!v94) {
                  uint64_t v94 = "invalid";
                }
                __int16 v134 = 2082;
                id_str = (void *)v94;
                __int16 v136 = 2048;
                os_log_type_t v137 = v41;
                uint64_t v95 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t v127 = OS_LOG_TYPE_ERROR;
                char v126 = 0;
                uint64_t v96 = v95;
                if (v127 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  id v97 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v98 = v127;
                  if (os_log_type_enabled(v97, v127))
                  {
                    __int16 v99 = (const char *)*((void *)v41 + 2);
                    if (!v99) {
                      __int16 v99 = "invalid";
                    }
                    *(_DWORD *)tcp_info buf = 136446722;
                    char v133 = "__nw_protocol_updated_path";
                    __int16 v134 = 2082;
                    id_str = (void *)v99;
                    __int16 v136 = 2048;
                    os_log_type_t v137 = v41;
                    _os_log_impl( &dword_181A5C000,  v97,  v98,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback",  buf,  0x20u);
                  }

void sub_182588470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_reset_traffic_class(void *a1, int a2)
{
  uint64_t v114 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    char v57 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    nw_endpoint_t v101 = "nw_endpoint_handler_reset_traffic_class";
    id v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v96) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v58 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        nw_endpoint_t v101 = "nw_endpoint_handler_reset_traffic_class";
        _os_log_impl(&dword_181A5C000, v23, v58, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if ((_BYTE)v96)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v60 = type[0];
      BOOL v61 = os_log_type_enabled(v23, type[0]);
      if (backtrace_string)
      {
        if (v61)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          nw_endpoint_t v101 = "nw_endpoint_handler_reset_traffic_class";
          __int16 v102 = 2082;
          nw_endpoint_t v103 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v23,  v60,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_74;
      }

      if (v61)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        nw_endpoint_t v101 = "nw_endpoint_handler_reset_traffic_class";
        _os_log_impl(&dword_181A5C000, v23, v60, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v75 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        nw_endpoint_t v101 = "nw_endpoint_handler_reset_traffic_class";
        _os_log_impl( &dword_181A5C000,  v23,  v75,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182589518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_flow_get_unsent_byte_count_block_invoke(uint64_t a1, int a2)
{
  socklen_t v4 = 4;
  int v5 = 0;
  if (!getsockopt(a2, 0xFFFF, 4132, &v5, &v4)) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v5;
  }
  return 1LL;
}

void nw_endpoint_flow_connected(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v105 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v66 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    uint64_t v67 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v92 = 0;
    if (__nwlog_fault(v67, &type, &v92))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        nw_endpoint_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v69 = type;
        if (os_log_type_enabled(v68, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v68, v69, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v92)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        nw_endpoint_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v71 = type;
        BOOL v72 = os_log_type_enabled(v68, type);
        if (backtrace_string)
        {
          if (v72)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v68,  v71,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_111;
        }

        if (v72)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v68, v71, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        nw_endpoint_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v73 = type;
        if (os_log_type_enabled(v68, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v68,  v73,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18258A47C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL45nw_endpoint_flow_enable_sleep_proxy_if_neededP30NWConcrete_nw_endpoint_handler_block_invoke( uint64_t a1, int a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 880LL));
  uint64_t v4 = *(void *)(a1 + 32);
  if (!*(void *)(v4 + 920))
  {
    DNSServiceErrorType v5 = DNSServiceSleepKeepalive( (DNSServiceRef *)(v4 + 920),  0,  a2,  *(_DWORD *)(a1 + 48),  (DNSServiceSleepKeepaliveReply)nw_endpoint_flow_sleep_proxy_callback,  *(void **)(a1 + 40));
    if (v5)
    {
      int v6 = v5;
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        char v7 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          char v9 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          nw_endpoint_t v10 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          logging_description = nw_endpoint_get_logging_description(v10);
          id v12 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          char v13 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v14 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          int v18 = 136448002;
          char v19 = "nw_endpoint_flow_enable_sleep_proxy_if_needed_block_invoke";
          __int16 v20 = 2082;
          id v21 = id_string;
          __int16 v22 = 2082;
          os_log_type_t v23 = v9;
          __int16 v24 = 2082;
          id v25 = logging_description;
          __int16 v26 = 2082;
          os_log_type_t v27 = v12;
          __int16 v28 = 2082;
          os_log_type_t v29 = v13;
          __int16 v30 = 2114;
          id v31 = v14;
          __int16 v32 = 2082;
          string_for_dns_service_error = nwlog_get_string_for_dns_service_error(v6);
          _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] DNSServiceSleepKeepalive fa iled: %{public}s",  (uint8_t *)&v18,  0x52u);
        }
      }
    }

    else
    {
      uint64_t v15 = *(_DNSServiceRef_t **)(*(void *)(a1 + 32) + 920LL);
      BOOL v16 = nw_queue_copy_current_workloop();
      DNSServiceSetDispatchQueue(v15, (dispatch_queue_t)v16);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 880LL));
  return 1LL;
}

void sub_18258A78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_flow_sleep_proxy_callback(_DNSServiceRef_t *a1, int a2, void *a3)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a3;
  DNSServiceErrorType v5 = v4;
  if (v4)
  {
    int v6 = v4;
    uint64_t mode = v6->mode;

    if ((_DWORD)mode == 2)
    {
      id v8 = nw_endpoint_handler_copy_flow(v6);
      char v9 = v6;
      char v10 = *((_BYTE *)v9 + 268);

      if (a2)
      {
        if ((v10 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          char v11 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            id v12 = v9;

            char v13 = v12;
            char v14 = *((_BYTE *)v9 + 268);

            if ((v14 & 1) != 0) {
              uint64_t v15 = "dry-run ";
            }
            else {
              uint64_t v15 = "";
            }
            nw_endpoint_t v16 = nw_endpoint_handler_copy_endpoint(v13);
            logging_description = nw_endpoint_get_logging_description(v16);
            id_str = v12->id_str;
            int v18 = v13;
            char v19 = v18;
            uint64_t v20 = v18[30];
            else {
              id v21 = off_189BBBBF0[v20];
            }
            id v56 = v21;

            uint64_t v34 = v19;
            __int16 v35 = v34;
            nw_endpoint_t v55 = v16;
            nw_endpoint_t v36 = "path";
            switch(v6->mode)
            {
              case 0:
                break;
              case 1:
                nw_endpoint_t v36 = "resolver";
                break;
              case 2:
                nw_endpoint_t v36 = nw_endpoint_flow_mode_string(v34[31]);
                break;
              case 3:
                nw_endpoint_t v36 = "proxy";
                break;
              case 4:
                nw_endpoint_t v36 = "fallback";
                break;
              case 5:
                nw_endpoint_t v36 = "transform";
                break;
              default:
                nw_endpoint_t v36 = "unknown-mode";
                break;
            }

            uint64_t v41 = v35;
            os_unfair_lock_lock((os_unfair_lock_t)v41 + 28);
            id v42 = v41[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v41 + 28);

            id v43 = v42;
            *(_DWORD *)tcp_info buf = 136448002;
            uint64_t v63 = "nw_endpoint_flow_sleep_proxy_callback";
            __int16 v64 = 2082;
            uint64_t v65 = id_str;
            __int16 v66 = 2082;
            uint64_t v67 = v15;
            __int16 v68 = 2082;
            os_log_type_t v69 = logging_description;
            __int16 v70 = 2082;
            os_log_type_t v71 = v56;
            __int16 v72 = 2082;
            os_log_type_t v73 = v36;
            __int16 v74 = 2114;
            id v75 = v43;
            __int16 v76 = 2082;
            string_for_dns_service_error = nwlog_get_string_for_dns_service_error(a2);
            _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Sleep proxy callback failed: %{public}s",  buf,  0x52u);
          }
        }

        BOOL v44 = (_DNSServiceRef_t *)*((void *)v8 + 115);
        if (v44)
        {
          DNSServiceRefDeallocate(v44);
          *((void *)v8 + 115) = 0LL;
        }
      }

      else if ((v10 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v23 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          __int16 v24 = v9;

          id v25 = v24;
          char v26 = *((_BYTE *)v9 + 268);

          if ((v26 & 1) != 0) {
            os_log_type_t v27 = "dry-run ";
          }
          else {
            os_log_type_t v27 = "";
          }
          nw_endpoint_t v28 = nw_endpoint_handler_copy_endpoint(v25);
          os_log_type_t v29 = nw_endpoint_get_logging_description(v28);
          os_log_type_t v58 = v24->id_str;
          uint64_t v59 = v27;
          __int16 v30 = v25;
          id v31 = v30;
          uint64_t v32 = v30[30];
          else {
            os_log_type_t v33 = off_189BBBBF0[v32];
          }

          BOOL v37 = v31;
          id v38 = v37;
          int v39 = v6->mode;
          uint64_t v40 = "path";
          switch(v39)
          {
            case 0:
              break;
            case 1:
              uint64_t v40 = "resolver";
              break;
            case 2:
              uint64_t v40 = nw_endpoint_flow_mode_string(v37[31]);
              break;
            case 3:
              uint64_t v40 = "proxy";
              break;
            case 4:
              uint64_t v40 = "fallback";
              break;
            case 5:
              uint64_t v40 = "transform";
              break;
            default:
              uint64_t v40 = "unknown-mode";
              break;
          }

          os_log_type_t v45 = v38;
          os_unfair_lock_lock((os_unfair_lock_t)v45 + 28);
          id v46 = v45[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v45 + 28);

          *(_DWORD *)tcp_info buf = 136447746;
          uint64_t v63 = "nw_endpoint_flow_sleep_proxy_callback";
          __int16 v64 = 2082;
          uint64_t v65 = v58;
          __int16 v66 = 2082;
          uint64_t v67 = v59;
          __int16 v68 = 2082;
          os_log_type_t v69 = v29;
          __int16 v70 = 2082;
          os_log_type_t v71 = v33;
          __int16 v72 = 2082;
          os_log_type_t v73 = v40;
          __int16 v74 = 2114;
          id v75 = v46;
          _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Sleep proxy callback, no error",  buf,  0x48u);
        }
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (NWConcrete_nw_endpoint_mode_handler *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        else {
          __int16 v22 = off_189BBBBC0[mode];
        }
        *(_DWORD *)tcp_info buf = 136446722;
        uint64_t v63 = "nw_endpoint_flow_sleep_proxy_callback";
        __int16 v64 = 2082;
        uint64_t v65 = (void *)v22;
        __int16 v66 = 2082;
        uint64_t v67 = "flow";
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }
    }

    goto LABEL_51;
  }

  __nwlog_obj();
  char v47 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v63 = "nw_endpoint_flow_sleep_proxy_callback";
  uint64_t v48 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v60 = 0;
  if (__nwlog_fault(v48, &type, &v60))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v63 = "nw_endpoint_flow_sleep_proxy_callback";
        _os_log_impl(&dword_181A5C000, v49, v50, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v52 = type;
      BOOL v53 = os_log_type_enabled(v49, type);
      if (backtrace_string)
      {
        if (v53)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v63 = "nw_endpoint_flow_sleep_proxy_callback";
          __int16 v64 = 2082;
          uint64_t v65 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v49,  v52,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_68;
      }

      if (v53)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v63 = "nw_endpoint_flow_sleep_proxy_callback";
        _os_log_impl(&dword_181A5C000, v49, v52, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v63 = "nw_endpoint_flow_sleep_proxy_callback";
        _os_log_impl( &dword_181A5C000,  v49,  v54,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18258AF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_flow_rebuild_stack(NWConcrete_nw_endpoint_handler *a1, nw_protocol *a2)
{
  uint64_t v236 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (a2)
  {
    os_log_type_t v207 = v3;
    DNSServiceErrorType v5 = nw_endpoint_handler_copy_flow(v3);
    if (v5)
    {
      int v6 = v4;
      char v7 = v6;
      if (v6)
      {
        int state = v6->state;

        if ((state & 0xFFFFFFFE) == 4)
        {
          char v9 = v7;
          char v10 = *((_BYTE *)v9 + 268);

          if ((v10 & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            char v11 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              id v12 = v9;

              char v13 = v12;
              char v14 = *((_BYTE *)v9 + 268);

              if ((v14 & 1) != 0) {
                uint64_t v15 = "dry-run ";
              }
              else {
                uint64_t v15 = "";
              }
              nw_endpoint_t v16 = nw_endpoint_handler_copy_endpoint(v13);
              logging_description = nw_endpoint_get_logging_description(v16);
              unsigned int log = v5;
              id_str = v12->id_str;
              char v19 = v13;
              uint64_t v20 = v19;
              uint64_t v21 = v7->state;
              else {
                __int16 v22 = off_189BBBBF0[v21];
              }

              int v39 = v20;
              uint64_t v40 = v39;
              uint64_t v41 = "path";
              switch(*((_DWORD *)v39 + 29))
              {
                case 0:
                  break;
                case 1:
                  uint64_t v41 = "resolver";
                  break;
                case 2:
                  uint64_t v41 = nw_endpoint_flow_mode_string(v39[31]);
                  break;
                case 3:
                  uint64_t v41 = "proxy";
                  break;
                case 4:
                  uint64_t v41 = "fallback";
                  break;
                case 5:
                  uint64_t v41 = "transform";
                  break;
                default:
                  uint64_t v41 = "unknown-mode";
                  break;
              }

              id v77 = v40;
              os_unfair_lock_lock((os_unfair_lock_t)v77 + 28);
              id v78 = v77[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v77 + 28);

              *(_DWORD *)tcp_info buf = 136447746;
              os_log_type_t v219 = "nw_endpoint_flow_rebuild_stack";
              __int16 v220 = 2082;
              BOOL v221 = id_str;
              __int16 v222 = 2082;
              os_log_type_t v223 = (nw_protocol *)v15;
              __int16 v224 = 2082;
              os_log_type_t v225 = (void *)logging_description;
              __int16 v226 = 2082;
              nw_endpoint_t v227 = v22;
              __int16 v228 = 2082;
              os_log_type_t v229 = v41;
              __int16 v230 = 2114;
              id v231 = v78;
              _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already cancelled, cann ot rebuild stack",  buf,  0x48u);

              DNSServiceErrorType v5 = log;
            }

void sub_18258CF3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z30nw_endpoint_flow_rebuild_stackP30NWConcrete_nw_endpoint_handlerP11nw_protocol_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v4 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      int v6 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v7 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      logging_description = nw_endpoint_get_logging_description(v7);
      char v9 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      char v10 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v11 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      int v13 = 136448002;
      char v14 = "nw_endpoint_flow_rebuild_stack_block_invoke";
      __int16 v15 = 2082;
      nw_endpoint_t v16 = id_string;
      __int16 v17 = 2082;
      int v18 = v6;
      __int16 v19 = 2082;
      uint64_t v20 = logging_description;
      __int16 v21 = 2082;
      __int16 v22 = v9;
      __int16 v23 = 2082;
      __int16 v24 = v10;
      __int16 v25 = 2114;
      id v26 = v11;
      __int16 v27 = 1024;
      int v28 = nw_frame_unclaimed_length(v3);
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Finalizing frame of size: %u",  (uint8_t *)&v13,  0x4Eu);
    }
  }

  nw_frame_finalize((uint64_t)v3);

  return 1LL;
}

void sub_18258D24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_flow_pre_attach_protocols(void *a1, nw_protocol *a2)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    nw_endpoint_t v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    BOOL v53 = "nw_endpoint_flow_pre_attach_protocols";
    int v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v13, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl(&dword_181A5C000, v14, v37, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v50)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            BOOL v53 = "nw_endpoint_flow_pre_attach_protocols";
            __int16 v54 = 2082;
            nw_endpoint_t v55 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v43,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v13) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }

        if (v44)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl(&dword_181A5C000, v14, v43, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl( &dword_181A5C000,  v14,  v48,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_53;
    }

void sub_18258DC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_listener_protocol_on_nw_queue(void *a1, void *a2)
{
  uint64_t v110 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v87 = a2;
  nw_endpoint_t v83 = v3;
  if (!v3)
  {
    __nwlog_obj();
    __int16 v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
    os_log_type_t v48 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v92 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v77 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v49, v77, "%{public}s called with null handler", buf, 0xCu);
      }

      goto LABEL_115;
    }

    if (!v92)
    {
      __nwlog_obj();
      os_log_type_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v81 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v49,  v81,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_115;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v79 = type;
    BOOL v80 = os_log_type_enabled(v53, type);
    if (backtrace_string)
    {
      if (v80)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        __int16 v96 = 2082;
        nw_endpoint_t v97 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v53,  v79,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      if (!v48) {
        goto LABEL_93;
      }
      goto LABEL_92;
    }

    if (v80)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
      _os_log_impl(&dword_181A5C000, v53, v79, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_90;
  }

  uint64_t v4 = (NWConcrete_nw_endpoint_handler *)v3;
  uint64_t mode = v4->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v46 = (id)gLogObj;
    else {
      BOOL v47 = off_189BBBBC0[mode];
    }
    *(_DWORD *)tcp_info buf = 136446722;
    os_log_type_t v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
    __int16 v96 = 2082;
    nw_endpoint_t v97 = (char *)v47;
    __int16 v98 = 2082;
    __int16 v99 = "flow";
    os_log_type_t v48 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v92 = 0;
    if (!__nwlog_fault(v48, &type, &v92))
    {
LABEL_91:
      if (!v48)
      {
LABEL_93:
        uint64_t v91 = 0LL;
        goto LABEL_94;
      }

void sub_18258E954( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_handler *nw_endpoint_flow_copy_joinable_clone_handler(void *a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  DNSServiceErrorType v5 = (NWConcrete_nw_endpoint_handler *)v3;
  uint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    nw_endpoint_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    nw_endpoint_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v17, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v41)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v18,  v21,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (v22)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18258F13C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_flow_copy_joinable_clone_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  char identifier = nw_protocol_definition_get_identifier(v4);
  if (*((_DWORD *)identifier + 9) != 2)
  {
LABEL_7:
    uint64_t v7 = 1LL;
    goto LABEL_8;
  }

  uint64_t v6 = identifier;
  if (!nw_parameters_has_protocol_in_stack(*(void **)(a1 + 32), identifier))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136446466;
      id v11 = "nw_endpoint_flow_copy_joinable_clone_handler_block_invoke";
      __int16 v12 = 2082;
      int v13 = v6;
      _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s Cannot join protocol %{public}s (not in request stack)",  (uint8_t *)&v10,  0x16u);
    }

    goto LABEL_7;
  }

  uint64_t v7 = 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
LABEL_8:

  return v7;
}

void sub_18258F2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_set_metadata_changed_handler(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    BOOL v32 = "nw_endpoint_handler_set_metadata_changed_handler";
    __int16 v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v12, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v32 = "nw_endpoint_handler_set_metadata_changed_handler";
          _os_log_impl(&dword_181A5C000, v13, v24, "%{public}s called with null handler", buf, 0xCu);
        }

        goto LABEL_37;
      }

      if (!v29)
      {
        __nwlog_obj();
        int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v32 = "nw_endpoint_handler_set_metadata_changed_handler";
          _os_log_impl( &dword_181A5C000,  v13,  v28,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_37;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v32 = "nw_endpoint_handler_set_metadata_changed_handler";
          _os_log_impl(&dword_181A5C000, v13, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }

        goto LABEL_37;
      }

      if (v27)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        BOOL v32 = "nw_endpoint_handler_set_metadata_changed_handler";
        __int16 v33 = 2082;
        os_log_type_t v34 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v26,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

void sub_18258F908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_inject_disconnect_error(void *a1, void *a2, uint64_t a3)
{
  uint64_t v90 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    nw_endpoint_t v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v75 = "nw_endpoint_handler_inject_disconnect_error";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v75 = "nw_endpoint_handler_inject_disconnect_error";
        _os_log_impl(&dword_181A5C000, v40, v65, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v72)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v67 = type;
      BOOL v68 = os_log_type_enabled(v40, type);
      if (backtrace_string)
      {
        if (v68)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v75 = "nw_endpoint_handler_inject_disconnect_error";
          __int16 v76 = 2082;
          os_log_type_t v77 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v40,  v67,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_86;
      }

      if (v68)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v75 = "nw_endpoint_handler_inject_disconnect_error";
        _os_log_impl(&dword_181A5C000, v40, v67, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v69 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v75 = "nw_endpoint_handler_inject_disconnect_error";
        _os_log_impl( &dword_181A5C000,  v40,  v69,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182590488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_http2_accept(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    nw_endpoint_t v36 = "nw_protocol_http2_accept";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      os_log_type_t v26 = "%{public}s called with null protocol";
      goto LABEL_78;
    }

    if (!v33)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_78;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v30 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (!v30) {
        goto LABEL_79;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_78;
    }

    if (v30)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      __int16 v37 = 2082;
      id v38 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_79:
    if (!v23) {
      return 0LL;
    }
LABEL_80:
    free(v23);
    return 0LL;
  }

  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    nw_endpoint_t v36 = "nw_protocol_http2_accept";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      os_log_type_t v26 = "%{public}s called with null http2";
      goto LABEL_78;
    }

    if (!v33)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      os_log_type_t v26 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_78;
    }

    nw_endpoint_t v31 = (char *)__nw_create_backtrace_string();
    os_log_type_t v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v32 = os_log_type_enabled(v24, type);
    if (v31)
    {
      if (v32)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        nw_endpoint_t v36 = "nw_protocol_http2_accept";
        __int16 v37 = 2082;
        id v38 = v31;
        _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v31);
      if (!v23) {
        return 0LL;
      }
      goto LABEL_80;
    }

    if (v32)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      os_log_type_t v26 = "%{public}s called with null http2, no backtrace";
LABEL_78:
      _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
      goto LABEL_79;
    }

    goto LABEL_79;
  }

  if ((*(__int16 *)(v1 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    BOOL v27 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v28 = *(_DWORD *)(v1 + 368);
      *(_DWORD *)tcp_info buf = 136446978;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      __int16 v37 = 2082;
      id v38 = (char *)(v1 + 390);
      __int16 v39 = 2080;
      uint64_t v40 = " ";
      __int16 v41 = 1024;
      int v42 = v28;
      _os_log_impl(&dword_181A5C000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }

  if ((*(_WORD *)(v1 + 388) & 4) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 64);
    if (v2)
    {
      uint64_t v3 = mach_continuous_time();
      uint64_t v4 = v3 <= 1 ? 1LL : v3;
      unint64_t v5 = nw_delta_nanos(v2, v4);
      int64_t int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_proxy_setup_threshold_seconds,  5LL);
      if (v5 > 1000000000 * int64_with_default)
      {
        if ((*(__int16 *)(v1 + 388) & 0x80000000) == 0)
        {
          int64_t v7 = int64_with_default;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v8 = gconnectionLogObj;
          BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
          if (result)
          {
            int v10 = *(_DWORD *)(v1 + 368);
            *(_DWORD *)tcp_info buf = 136447234;
            nw_endpoint_t v36 = "nw_protocol_http2_accept";
            __int16 v37 = 2082;
            id v38 = (char *)(v1 + 390);
            __int16 v39 = 2080;
            uint64_t v40 = " ";
            __int16 v41 = 1024;
            int v42 = v10;
            __int16 v43 = 2048;
            int64_t v44 = v7;
            id v11 = "%{public}s %{public}s%s<i%u> denying join attempt because http2 connection not ready within %lld seconds";
            __int16 v12 = (os_log_s *)v8;
            uint32_t v13 = 48;
LABEL_44:
            _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_INFO, v11, buf, v13);
            return 0LL;
          }

          return result;
        }

        return 0LL;
      }
    }
  }

  if (!*(_WORD *)(v1 + 372))
  {
    __int16 v15 = *(_WORD *)(v1 + 388);
LABEL_24:
    if ((v15 & 2) != 0)
    {
      if (v15 < 0) {
        return 0LL;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v19 = gconnectionLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      int v20 = *(_DWORD *)(v1 + 368);
      *(_DWORD *)tcp_info buf = 136446978;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      __int16 v37 = 2082;
      id v38 = (char *)(v1 + 390);
      __int16 v39 = 2080;
      uint64_t v40 = " ";
      __int16 v41 = 1024;
      int v42 = v20;
      id v11 = "%{public}s %{public}s%s<i%u> cannot accept new streams after receiving a goaway";
    }

    else if ((v15 & 8) != 0)
    {
      if (v15 < 0) {
        return 0LL;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v19 = gconnectionLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      int v21 = *(_DWORD *)(v1 + 368);
      *(_DWORD *)tcp_info buf = 136446978;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      __int16 v37 = 2082;
      id v38 = (char *)(v1 + 390);
      __int16 v39 = 2080;
      uint64_t v40 = " ";
      __int16 v41 = 1024;
      int v42 = v21;
      id v11 = "%{public}s %{public}s%s<i%u> cannot accept new streams after the tunnel is closed";
    }

    else
    {
      if ((v15 & 0x40) == 0) {
        return 1LL;
      }
      if (v15 < 0) {
        return 0LL;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v19 = gconnectionLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      int v22 = *(_DWORD *)(v1 + 368);
      *(_DWORD *)tcp_info buf = 136446978;
      nw_endpoint_t v36 = "nw_protocol_http2_accept";
      __int16 v37 = 2082;
      id v38 = (char *)(v1 + 390);
      __int16 v39 = 2080;
      uint64_t v40 = " ";
      __int16 v41 = 1024;
      int v42 = v22;
      id v11 = "%{public}s %{public}s%s<i%u> denying join attempt because http2 has a better alternate path";
    }

    __int16 v12 = (os_log_s *)v19;
    uint32_t v13 = 38;
    goto LABEL_44;
  }

  int64_t v14 = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_maximum_stall_count, 5LL);
  __int16 v15 = *(_WORD *)(v1 + 388);
  if ((*(_WORD *)(v1 + 388) & 0x8000) != 0) {
    return 0LL;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  uint64_t v16 = gconnectionLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
  if (result)
  {
    int v17 = *(_DWORD *)(v1 + 368);
    int v18 = *(unsigned __int16 *)(v1 + 372);
    *(_DWORD *)tcp_info buf = 136447234;
    nw_endpoint_t v36 = "nw_protocol_http2_accept";
    __int16 v37 = 2082;
    id v38 = (char *)(v1 + 390);
    __int16 v39 = 2080;
    uint64_t v40 = " ";
    __int16 v41 = 1024;
    int v42 = v17;
    __int16 v43 = 1024;
    LODWORD(v44) = v18;
    id v11 = "%{public}s %{public}s%s<i%u> denying join attempt because http2 connection has hit %u stalls";
    __int16 v12 = (os_log_s *)v16;
    uint32_t v13 = 44;
    goto LABEL_44;
  }

  return result;
}

BOOL nw_protocol_http2_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    id v47 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
      _os_log_impl(&dword_181A5C000, v47, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)buf, 0xCu);
    }
  }

  uint64_t v6 = (char *)calloc(1uLL, 0x1E0uLL);
  if (v6)
  {
LABEL_3:
    *((_OWORD *)v6 + 2_Block_object_dispose((const void *)(v20 - 192), 8) = 0u;
    *((_OWORD *)v6 + 29) = 0u;
    *((_OWORD *)v6 + 26) = 0u;
    *((_OWORD *)v6 + 27) = 0u;
    *((_OWORD *)v6 + 24) = 0u;
    *((_OWORD *)v6 + 25) = 0u;
    *((_OWORD *)v6 + 22) = 0u;
    *((_OWORD *)v6 + 23) = 0u;
    *((_OWORD *)v6 + 20) = 0u;
    *((_OWORD *)v6 + 21) = 0u;
    *((_OWORD *)v6 + 1_Block_object_dispose((const void *)(v20 - 192), 8) = 0u;
    *((_OWORD *)v6 + 19) = 0u;
    *((_OWORD *)v6 + 16) = 0u;
    *((_OWORD *)v6 + 17) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    *((_OWORD *)v6 + 15) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + _Block_object_dispose((const void *)(v20 - 192), 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_DWORD *)v6 + 86) = 1065353216;
    *((void *)v6 + 2) = a1;
    *((void *)v6 + 3) = &nw_protocol_http2_get_callbacks(void)::protocol_callbacks;
    *((void *)v6 + 5) = v6;
    *((_DWORD *)v6 + 91) = 0;
    *((void *)v6 + _Block_object_dispose((const void *)(v20 - 192), 8) = 0LL;
    *((_DWORD *)v6 + 93) = 0;
    *((_WORD *)v6 + 194) &= 0xFFE2u;
    *((void *)v6 + 10) = 240000LL;
    else {
      __int16 v7 = 0;
    }
    *((_WORD *)v6 + 194) = v7 & 0x8000 | *((_WORD *)v6 + 194) & 0x7FFF;
    *((_DWORD *)v6 + 90) = -1;
    else {
      __int16 v8 = 0;
    }
    *((_WORD *)v6 + 194) = *((_WORD *)v6 + 194) & 0xFF7F | v8;
    nw_frame_cache_init((uint64_t)(v6 + 200), (uint64_t)v6, 20, 0x1000000, 24);
    *((void *)v6 + 21) = 0LL;
    *((void *)v6 + 23) = 0LL;
    *((void *)v6 + 22) = v6 + 168;
    *((void *)v6 + 24) = v6 + 184;
    *((void *)v6 + 30) = 0LL;
    *((void *)v6 + 31) = v6 + 240;
    id v9 = nw_parameters_copy_context(a4);
    char v10 = v6[136];
    if ((v10 & 1) != 0)
    {
      id v11 = (void *)*((void *)v6 + 16);
      if (v11)
      {
        os_release(v11);
        char v10 = v6[136];
      }
    }

    *((void *)v6 + 16) = v9;
    v6[136] = v10 | 1;
    uint64_t v12 = MEMORY[0x1895F87A8];
    v56[4] = v6;
    v57[0] = MEMORY[0x1895F87A8];
    v57[1] = 0x40000000LL;
    v57[2] = __nw_protocol_http2_create_block_invoke;
    v57[3] = &__block_descriptor_tmp_81659;
    v57[4] = v6;
    v56[0] = MEMORY[0x1895F87A8];
    v56[1] = 0x40000000LL;
    v56[2] = __nw_protocol_http2_create_block_invoke_2;
    v56[3] = &__block_descriptor_tmp_6_81660;
    metadata = nw_http_connection_create_metadata(v9, v57, v56);
    *((void *)v6 + 32) = metadata;
    nw_http_connection_metadata_set_version(metadata, 4);
    buf[0] = 0LL;
    buf[1] = buf;
    buf[2] = 0x2000000000LL;
    uint64_t v59 = (uint64_t)v6;
    aBlock[0] = v12;
    aBlock[1] = 0x40000000LL;
    aBlock[2] = __nw_protocol_http2_create_block_invoke_3;
    aBlock[3] = &unk_189BC7AD0;
    aBlock[4] = buf;
    *((void *)v6 + 44) = _Block_copy(aBlock);
    _Block_object_dispose(buf, 8);
    if (nghttp2_session_callbacks_new())
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = nghttp2_strerror();
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v14;
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v53 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)gLogObj;
        os_log_type_t v17 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_49;
        }
        uint64_t v18 = nghttp2_strerror();
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v18;
        uint64_t v19 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed";
LABEL_47:
        char v33 = v16;
        os_log_type_t v34 = v17;
        uint32_t v35 = 22;
LABEL_48:
        _os_log_impl(&dword_181A5C000, v33, v34, v19, (uint8_t *)buf, v35);
        goto LABEL_49;
      }

      if (v53 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)gLogObj;
        os_log_type_t v17 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_49;
        }
        uint64_t v31 = nghttp2_strerror();
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v31;
        uint64_t v19 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed, backtrace limit exceeded";
        goto LABEL_47;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (os_log_s *)gLogObj;
      os_log_type_t v17 = type[0];
      BOOL v29 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!backtrace_string)
      {
        if (!v29) {
          goto LABEL_49;
        }
        uint64_t v32 = nghttp2_strerror();
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v32;
        uint64_t v19 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed, no backtrace";
        goto LABEL_47;
      }

      if (v29)
      {
        uint64_t v30 = nghttp2_strerror();
        LODWORD(buf[0]) = 136446722;
        *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v30;
        HIWORD(buf[2]) = 2082;
        uint64_t v59 = (uint64_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s nghttp2_session_callbacks_new: %{public}s failed, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x20u);
      }

      free(backtrace_string);
LABEL_49:
      if (v15) {
LABEL_50:
      }
        free(v15);
LABEL_51:
      std::__destroy_at[abi:nn180100]<nw_protocol_http2,0>((uint64_t)v6);
      free(v6);
      return 0LL;
    }

    nghttp2_session_callbacks_set_before_frame_send_callback();
    nghttp2_session_callbacks_set_on_header_callback();
    nghttp2_session_callbacks_set_on_begin_headers_callback();
    nghttp2_session_callbacks_set_on_frame_recv_callback();
    nghttp2_session_callbacks_set_on_data_chunk_recv_callback();
    nghttp2_session_callbacks_set_on_stream_close_callback();
    nghttp2_session_callbacks_set_on_frame_send_callback();
    nghttp2_session_callbacks_set_send_callback();
    nghttp2_session_callbacks_set_send_data_callback();
    nghttp2_session_callbacks_set_on_frame_not_send_callback();
    nghttp2_session_callbacks_set_on_invalid_frame_recv_callback();
    nghttp2_session_callbacks_set_error_callback2();
    nghttp2_set_debug_vprintf_callback();
    nghttp2_option_new();
    nghttp2_option_set_no_auto_window_update();
    nghttp2_option_set_no_rfc9113_leading_and_trailing_ws_validation();
    nghttp2_option_set_peer_max_concurrent_streams();
    nghttp2_option_set_no_closed_streams();
    if ((*((_WORD *)v6 + 194) & 0x80) != 0)
    {
      if ((nghttp2_session_server_new2() & 0x80000000) != 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        if (v6) {
          int v20 = " ";
        }
        else {
          int v20 = "";
        }
        if (v6) {
          int v21 = v6 + 390;
        }
        else {
          int v21 = "";
        }
        int v37 = *((_DWORD *)v6 + 92);
        uint64_t v38 = nghttp2_strerror();
        LODWORD(buf[0]) = 136447234;
        *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v21;
        HIWORD(buf[2]) = 2080;
        uint64_t v59 = (uint64_t)v20;
        __int16 v60 = 1024;
        int v61 = v37;
        __int16 v62 = 2082;
        uint64_t v63 = v38;
        __int16 v15 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v53 = OS_LOG_TYPE_ERROR;
        char v51 = 0;
        if (v53 == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v24 = (os_log_s *)gconnectionLogObj;
          os_log_type_t v25 = v53;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v53)) {
            goto LABEL_49;
          }
          goto LABEL_35;
        }

        if (v51)
        {
          __int16 v39 = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v24 = (os_log_s *)gconnectionLogObj;
          os_log_type_t v25 = v53;
          BOOL v41 = os_log_type_enabled((os_log_t)gconnectionLogObj, v53);
          if (v39)
          {
            if (!v41) {
              goto LABEL_80;
            }
            goto LABEL_79;
          }

          if (!v41) {
            goto LABEL_49;
          }
LABEL_93:
          int v45 = *((_DWORD *)v6 + 92);
          uint64_t v46 = nghttp2_strerror();
          LODWORD(buf[0]) = 136447234;
          *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v21;
          HIWORD(buf[2]) = 2080;
          uint64_t v59 = (uint64_t)v20;
          __int16 v60 = 1024;
          int v61 = v45;
          __int16 v62 = 2082;
          uint64_t v63 = v46;
          uint64_t v19 = "%{public}s %{public}s%s<i%u> nghttp2_session_server_new2 failed: %{public}s, no backtrace";
          goto LABEL_94;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v24 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v25 = v53;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v53)) {
          goto LABEL_49;
        }
LABEL_85:
        int v43 = *((_DWORD *)v6 + 92);
        uint64_t v44 = nghttp2_strerror();
        LODWORD(buf[0]) = 136447234;
        *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v21;
        HIWORD(buf[2]) = 2080;
        uint64_t v59 = (uint64_t)v20;
        __int16 v60 = 1024;
        int v61 = v43;
        __int16 v62 = 2082;
        uint64_t v63 = v44;
        uint64_t v19 = "%{public}s %{public}s%s<i%u> nghttp2_session_server_new2 failed: %{public}s, backtrace limit exceeded";
        goto LABEL_94;
      }
    }

    else if ((nghttp2_session_client_new2() & 0x80000000) != 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      if (v6) {
        int v20 = " ";
      }
      else {
        int v20 = "";
      }
      if (v6) {
        int v21 = v6 + 390;
      }
      else {
        int v21 = "";
      }
      int v22 = *((_DWORD *)v6 + 92);
      uint64_t v23 = nghttp2_strerror();
      LODWORD(buf[0]) = 136447234;
      *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v21;
      HIWORD(buf[2]) = 2080;
      uint64_t v59 = (uint64_t)v20;
      __int16 v60 = 1024;
      int v61 = v22;
      __int16 v62 = 2082;
      uint64_t v63 = v23;
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v53 = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (v53 == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v24 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v25 = v53;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v53)) {
          goto LABEL_49;
        }
LABEL_35:
        int v26 = *((_DWORD *)v6 + 92);
        uint64_t v27 = nghttp2_strerror();
        LODWORD(buf[0]) = 136447234;
        *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v21;
        HIWORD(buf[2]) = 2080;
        uint64_t v59 = (uint64_t)v20;
        __int16 v60 = 1024;
        int v61 = v26;
        __int16 v62 = 2082;
        uint64_t v63 = v27;
        uint64_t v19 = "%{public}s %{public}s%s<i%u> nghttp2_session_server_new2 failed: %{public}s";
LABEL_94:
        char v33 = v24;
        os_log_type_t v34 = v25;
        uint32_t v35 = 48;
        goto LABEL_48;
      }

      if (v51)
      {
        __int16 v39 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v24 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v25 = v53;
        BOOL v40 = os_log_type_enabled((os_log_t)gconnectionLogObj, v53);
        if (v39)
        {
          if (!v40) {
            goto LABEL_80;
          }
LABEL_79:
          int v50 = *((_DWORD *)v6 + 92);
          uint64_t v42 = nghttp2_strerror();
          LODWORD(buf[0]) = 136447490;
          *(void *)((char *)buf + 4) = "nw_protocol_http2_create";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v21;
          HIWORD(buf[2]) = 2080;
          uint64_t v59 = (uint64_t)v20;
          __int16 v60 = 1024;
          int v61 = v50;
          __int16 v62 = 2082;
          uint64_t v63 = v42;
          __int16 v64 = 2082;
          os_log_type_t v65 = v39;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s %{public}s%s<i%u> nghttp2_session_server_new2 failed: %{public}s, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x3Au);
LABEL_80:
          free(v39);
          if (!v15) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }

        if (!v40) {
          goto LABEL_49;
        }
        goto LABEL_93;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v24 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v25 = v53;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v53)) {
        goto LABEL_49;
      }
      goto LABEL_85;
    }

    MEMORY[0x186E10E0C](v54);
    MEMORY[0x186E10DA0](*(void *)type);
    return (BOOL)v6;
  }

  os_log_type_t v48 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
  LODWORD(buf[0]) = 136446722;
  *(void *)((char *)buf + 4) = "strict_calloc";
  WORD2(buf[1]) = 2048;
  *(void *)((char *)&buf[1] + 6) = 1LL;
  HIWORD(buf[2]) = 2048;
  uint64_t v59 = 480LL;
  os_log_type_t v49 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v49);
  if (!result)
  {
    free(v49);
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

void __nw_protocol_http2_create_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(nw_protocol **)(a1 + 32);
  if (v1)
  {
    nw_protocol_http2_error(*(nw_protocol **)(a1 + 32), v1, 89);
    nw_http2_connection_close((uint64_t)v1);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  id v11 = "nw_http2_cancel";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      id v11 = "nw_http2_cancel";
      unint64_t v5 = "%{public}s called with null http2";
      goto LABEL_16;
    }

    if (!v8)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      id v11 = "nw_http2_cancel";
      unint64_t v5 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_16;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        id v11 = "nw_http2_cancel";
        __int16 v12 = 2082;
        uint32_t v13 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_17;
    }

    if (v7)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      id v11 = "nw_http2_cancel";
      unint64_t v5 = "%{public}s called with null http2, no backtrace";
LABEL_16:
      _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
    }
  }

void __nw_protocol_http2_create_block_invoke_2(uint64_t a1, void *aBlock)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_129;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
      id v47 = "%{public}s called with null http2";
      goto LABEL_128;
    }

    if (!v55)
    {
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_129;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
      id v47 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_128;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type;
    BOOL v52 = os_log_type_enabled(v45, type);
    if (!backtrace_string)
    {
      if (!v52) {
        goto LABEL_129;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
      id v47 = "%{public}s called with null http2, no backtrace";
      goto LABEL_128;
    }

    if (v52)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
      __int16 v58 = 2082;
      uint64_t v59 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v45,  v46,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_129:
    if (!v44) {
      return;
    }
    goto LABEL_130;
  }

  if (!aBlock)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_129;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
      id v47 = "%{public}s called with null reply_handler";
      goto LABEL_128;
    }

    if (!v55)
    {
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_129;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
      id v47 = "%{public}s called with null reply_handler, backtrace limit exceeded";
      goto LABEL_128;
    }

    os_log_type_t v53 = (char *)__nw_create_backtrace_string();
    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type;
    BOOL v54 = os_log_type_enabled(v45, type);
    if (v53)
    {
      if (v54)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
        __int16 v58 = 2082;
        uint64_t v59 = v53;
        _os_log_impl( &dword_181A5C000,  v45,  v46,  "%{public}s called with null reply_handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v53);
      if (!v44) {
        return;
      }
LABEL_130:
      free(v44);
      return;
    }

    if (v54)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
      id v47 = "%{public}s called with null reply_handler, no backtrace";
LABEL_128:
      _os_log_impl(&dword_181A5C000, v45, v46, v47, buf, 0xCu);
      goto LABEL_129;
    }

    goto LABEL_129;
  }

  if ((*(__int16 *)(v3 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v48 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v49 = *(_DWORD *)(v3 + 368);
      uint64_t v50 = *(void *)(v3 + 72);
      *(_DWORD *)tcp_info buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_http2_send_ping";
      __int16 v58 = 2082;
      uint64_t v59 = (char *)(v3 + 390);
      __int16 v60 = 2080;
      int v61 = " ";
      __int16 v62 = 1024;
      int v63 = v49;
      __int16 v64 = 2048;
      uint64_t v65 = v50;
      _os_log_impl(&dword_181A5C000, v48, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> seq %llu", buf, 0x30u);
    }
  }

  unint64_t v5 = _Block_copy(aBlock);
  unint64_t v6 = *(void *)(v3 + 72);
  unint64_t v7 = *(void *)(v3 + 320);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = *(void *)(v3 + 72);
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
    }

    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }

    id v9 = *(void **)(*(void *)(v3 + 312) + 8 * v2);
    if (v9)
    {
      char v10 = (void *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                goto LABEL_86;
              }
            }

            else if ((v12 & (v7 - 1)) != v2)
            {
              goto LABEL_26;
            }

            char v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_26;
            }
          }
        }

        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              goto LABEL_86;
            }
          }

          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v2) {
              break;
            }
          }

          char v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

uint64_t __nw_protocol_http2_create_block_invoke_3(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

void std::__destroy_at[abi:nn180100]<nw_protocol_http2,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 328);
  while (v2)
  {
    unint64_t v6 = v2;
    unint64_t v2 = (void *)*v2;
    if ((v6[5] & 1) != 0)
    {
      unint64_t v7 = (const void *)v6[4];
      if (v7) {
        _Block_release(v7);
      }
    }

    operator delete(v6);
  }

  uint64_t v3 = *(void **)(a1 + 312);
  *(void *)(a1 + 312) = 0LL;
  if (v3) {
    operator delete(v3);
  }
  if ((*(_BYTE *)(a1 + 272) & 1) != 0)
  {
    os_log_type_t v4 = *(const void **)(a1 + 264);
    if (v4) {
      _Block_release(v4);
    }
  }

  *(void *)(a1 + 264) = 0LL;
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    unint64_t v5 = *(void **)(a1 + 128);
    if (v5) {
      os_release(v5);
    }
  }

  *(void *)(a1 + 12_Block_object_dispose((const void *)(v20 - 192), 8) = 0LL;
}

uint64_t on_header_callback( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, const char *a5, int64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    int v49 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)tcp_info buf = 136446722;
      int v63 = "on_header_callback";
      __int16 v64 = 2082;
      uint64_t v65 = a3;
      __int16 v66 = 2082;
      os_log_type_t v67 = a5;
      _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s called name %{public}s value %{public}s",  buf,  0x20u);
    }
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    int v63 = "on_header_callback";
    uint64_t v50 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v51 = (os_log_s *)__nwlog_obj();
      os_log_type_t v52 = type;
      if (!os_log_type_enabled(v51, type)) {
        goto LABEL_82;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      int v63 = "on_header_callback";
      os_log_type_t v53 = "%{public}s nghttp2 user data is NULL, not http2";
    }

    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v51 = (os_log_s *)__nwlog_obj();
      os_log_type_t v52 = type;
      BOOL v55 = os_log_type_enabled(v51, type);
      if (backtrace_string)
      {
        if (v55)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          int v63 = "on_header_callback";
          __int16 v64 = 2082;
          uint64_t v65 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_82;
      }

      if (!v55)
      {
LABEL_82:
        if (v50) {
          free(v50);
        }
        return 4294966394LL;
      }

      *(_DWORD *)tcp_info buf = 136446210;
      int v63 = "on_header_callback";
      os_log_type_t v53 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }

    else
    {
      char v51 = (os_log_s *)__nwlog_obj();
      os_log_type_t v52 = type;
      if (!os_log_type_enabled(v51, type)) {
        goto LABEL_82;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      int v63 = "on_header_callback";
      os_log_type_t v53 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v51, v52, v53, buf, 0xCu);
    goto LABEL_82;
  }

  int v14 = *(unsigned __int8 *)(a2 + 12);
  if (v14 == 5)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v19 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775LL;
    }
    int v20 = *(_DWORD *)(a8 + 368);
    *(_DWORD *)tcp_info buf = 136446978;
    int v63 = "on_header_callback";
    __int16 v64 = 2082;
    uint64_t v65 = a8 + 390;
    __int16 v66 = 2080;
    os_log_type_t v67 = " ";
    __int16 v68 = 1024;
    int v69 = v20;
    int v21 = "%{public}s %{public}s%s<i%u> push promise frames are currently not supported";
    uint64_t v22 = (os_log_s *)v19;
    uint32_t v23 = 38;
    goto LABEL_42;
  }

  if (v14 != 1)
  {
    if ((*(__int16 *)(a8 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v24 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        int v25 = *(_DWORD *)(a8 + 368);
        *(_DWORD *)tcp_info buf = 136446978;
        int v63 = "on_header_callback";
        __int16 v64 = 2082;
        uint64_t v65 = a8 + 390;
        __int16 v66 = 2080;
        os_log_type_t v67 = " ";
        __int16 v68 = 1024;
        int v69 = v25;
        _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> returning callback failure with unknown error",  buf,  0x26u);
      }
    }

    return 4294966394LL;
  }

  unsigned int v15 = *(_DWORD *)(a2 + 56);
  if (v15 > 3 || v15 == 2)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v34 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775LL;
    }
    int v35 = *(_DWORD *)(a8 + 368);
    int v36 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)tcp_info buf = 136447234;
    int v63 = "on_header_callback";
    __int16 v64 = 2082;
    uint64_t v65 = a8 + 390;
    __int16 v66 = 2080;
    os_log_type_t v67 = " ";
    __int16 v68 = 1024;
    int v69 = v35;
    __int16 v70 = 1024;
    int v71 = v36;
    int v21 = "%{public}s %{public}s%s<i%u> ERROR: Got headers for stream %d, a stream that doesn't exist.";
    uint64_t v22 = (os_log_s *)v34;
    uint32_t v23 = 44;
    goto LABEL_42;
  }

  uint64_t stream_from_id = nw_http2_get_stream_from_id(a8, *(_DWORD *)(a2 + 8), 0LL);
  if (stream_from_id)
  {
    uint64_t v17 = stream_from_id;
    if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0
      && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      __int16 v56 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v58 = *(_DWORD *)(v17 + 176);
        int v57 = *(_DWORD *)(v17 + 180);
        uint64_t v59 = "response";
        if (!*(_DWORD *)(a2 + 56)) {
          uint64_t v59 = "request";
        }
        *(_DWORD *)tcp_info buf = 136448258;
        int v63 = "on_header_callback";
        __int16 v64 = 2082;
        uint64_t v65 = v17 + 191;
        __int16 v66 = 2080;
        os_log_type_t v67 = " ";
        __int16 v68 = 1024;
        int v69 = v57;
        __int16 v70 = 1024;
        int v71 = v58;
        __int16 v72 = 2080;
        *(void *)os_log_type_t v73 = v59;
        *(_WORD *)&v73[8] = 1024;
        *(_DWORD *)&v73[10] = v58;
        __int16 v74 = 2082;
        unint64_t v75 = a3;
        __int16 v76 = 2082;
        os_log_type_t v77 = a5;
        _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> received header %s on stream %d: (%{public}s: %{public}s)",  buf,  0x50u);
      }
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v37 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775LL;
    }
    int v39 = *(_DWORD *)(v17 + 176);
    int v38 = *(_DWORD *)(v17 + 180);
    int v40 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)tcp_info buf = 136448002;
    int v63 = "on_header_callback";
    __int16 v64 = 2082;
    uint64_t v65 = v17 + 191;
    __int16 v66 = 2080;
    os_log_type_t v67 = " ";
    __int16 v68 = 1024;
    int v69 = v38;
    __int16 v70 = 1024;
    int v71 = v39;
    __int16 v72 = 1040;
    *(_DWORD *)os_log_type_t v73 = a4;
    *(_WORD *)&v73[4] = 2080;
    *(void *)&void v73[6] = a3;
    __int16 v74 = 1024;
    LODWORD(v75) = v40;
    int v21 = "%{public}s %{public}s%s<i%u:s%d> invalid header field %.*s received on stream %d";
    uint64_t v22 = (os_log_s *)v37;
    uint32_t v23 = 66;
LABEL_42:
    _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
    return 4294966775LL;
  }

  if ((*(__int16 *)(a8 + 388) & 0x80000000) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v26 = *(_DWORD *)(a8 + 368);
    int v27 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)tcp_info buf = 136447234;
    int v63 = "on_header_callback";
    __int16 v64 = 2082;
    uint64_t v65 = a8 + 390;
    __int16 v66 = 2080;
    os_log_type_t v67 = " ";
    __int16 v68 = 1024;
    int v69 = v26;
    __int16 v70 = 1024;
    int v71 = v27;
    int v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      size_t v29 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v30 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_58;
      }
      int v31 = *(_DWORD *)(a8 + 368);
      int v32 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)tcp_info buf = 136447234;
      int v63 = "on_header_callback";
      __int16 v64 = 2082;
      uint64_t v65 = a8 + 390;
      __int16 v66 = 2080;
      os_log_type_t v67 = " ";
      __int16 v68 = 1024;
      int v69 = v31;
      __int16 v70 = 1024;
      int v71 = v32;
      uint8x8_t v33 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
    }

    else if (v60)
    {
      uint64_t v41 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      size_t v29 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v30 = type;
      BOOL v42 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v41)
      {
        if (v42)
        {
          int v43 = *(_DWORD *)(a8 + 368);
          int v44 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)tcp_info buf = 136447490;
          int v63 = "on_header_callback";
          __int16 v64 = 2082;
          uint64_t v65 = a8 + 390;
          __int16 v66 = 2080;
          os_log_type_t v67 = " ";
          __int16 v68 = 1024;
          int v69 = v43;
          __int16 v70 = 1024;
          int v71 = v44;
          __int16 v72 = 2082;
          *(void *)os_log_type_t v73 = v41;
          _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s %{public}s%s<i%u> failed to find stream %d, dumping backtrace:%{public}s",  buf,  0x36u);
        }

        free(v41);
        goto LABEL_58;
      }

      if (!v42)
      {
LABEL_58:
        if (v28) {
          free(v28);
        }
        return 4294966775LL;
      }

      int v47 = *(_DWORD *)(a8 + 368);
      int v48 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)tcp_info buf = 136447234;
      int v63 = "on_header_callback";
      __int16 v64 = 2082;
      uint64_t v65 = a8 + 390;
      __int16 v66 = 2080;
      os_log_type_t v67 = " ";
      __int16 v68 = 1024;
      int v69 = v47;
      __int16 v70 = 1024;
      int v71 = v48;
      uint8x8_t v33 = "%{public}s %{public}s%s<i%u> failed to find stream %d, no backtrace";
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      size_t v29 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v30 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_58;
      }
      int v45 = *(_DWORD *)(a8 + 368);
      int v46 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)tcp_info buf = 136447234;
      int v63 = "on_header_callback";
      __int16 v64 = 2082;
      uint64_t v65 = a8 + 390;
      __int16 v66 = 2080;
      os_log_type_t v67 = " ";
      __int16 v68 = 1024;
      int v69 = v45;
      __int16 v70 = 1024;
      int v71 = v46;
      uint8x8_t v33 = "%{public}s %{public}s%s<i%u> failed to find stream %d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v29, v30, v33, buf, 0x2Cu);
    goto LABEL_58;
  }

  return 4294966775LL;
}

void sub_18259573C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t on_frame_recv_callback(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v248 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
    os_log_type_t v128 = (char *)_os_log_send_and_compose_impl();
    v238[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v128, v238, &type))
    {
      if (v238[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v129 = (os_log_s *)__nwlog_obj();
        os_log_type_t v130 = v238[0];
        if (os_log_type_enabled(v129, v238[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
          char v131 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_260:
          _os_log_impl(&dword_181A5C000, v129, v130, v131, buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v129 = (os_log_s *)__nwlog_obj();
        os_log_type_t v130 = v238[0];
        BOOL v137 = os_log_type_enabled(v129, v238[0]);
        if (backtrace_string)
        {
          if (v137)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            __int16 v240 = 2082;
            os_log_type_t v241 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v129,  v130,  "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_261;
        }

        if (v137)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
          char v131 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_260;
        }
      }

      else
      {
        BOOL v129 = (os_log_s *)__nwlog_obj();
        os_log_type_t v130 = v238[0];
        if (os_log_type_enabled(v129, v238[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
          char v131 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_260;
        }
      }
    }

uint64_t send_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v97 = *MEMORY[0x1895F89C0];
  if (!a5)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "send_callback";
    int v40 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v81) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type[0];
      if (!os_log_type_enabled(v41, type[0])) {
        goto LABEL_114;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "send_callback";
      int v43 = "%{public}s nghttp2 user data is NULL, not http2";
    }

    else if ((_BYTE)v81)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type[0];
      BOOL v50 = os_log_type_enabled(v41, type[0]);
      if (backtrace_string)
      {
        if (v50)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "send_callback";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
        }

        free(backtrace_string);
LABEL_114:
        if (v40)
        {
          int v58 = (char *)v40;
          goto LABEL_116;
        }

        return -902LL;
      }

      if (!v50) {
        goto LABEL_114;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "send_callback";
      int v43 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }

    else
    {
      int v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type[0];
      if (!os_log_type_enabled(v41, type[0])) {
        goto LABEL_114;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "send_callback";
      int v43 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v41, v42, v43, (uint8_t *)buf, 0xCu);
    goto LABEL_114;
  }

  if ((*(__int16 *)(a5 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v44 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v45 = *(_DWORD *)(a5 + 368);
      LODWORD(buf[0]) = 136446978;
      *(void *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = a5 + 390;
      HIWORD(buf[2]) = 2080;
      int v92 = " ";
      LOWORD(v93) = 1024;
      *(_DWORD *)((char *)&v93 + 2) = v45;
      _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called",  (uint8_t *)buf,  0x26u);
    }

    if ((*(__int16 *)(a5 + 388) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v46 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v47 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136447234;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a5 + 390;
        HIWORD(buf[2]) = 2080;
        int v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v47;
        HIWORD(v93) = 2048;
        v94[0] = a3;
        _os_log_impl( &dword_181A5C000,  v46,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> asked to write %lu bytes by nghttp2",  (uint8_t *)buf,  0x30u);
      }
    }
  }

  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81808);
  }
  v90[0] = 0LL;
  v90[1] = v90;
  v89[0] = 0LL;
  v89[1] = v89;
  uint64_t v8 = *(void *)(a5 + 240);
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (*(_WORD *)(a5 + 388) & 0x100) == 0;
  }
  if (v9) {
    uint64_t v10 = v89;
  }
  else {
    uint64_t v10 = (void *)(a5 + 240);
  }
  uint64_t v11 = *(void *)(a5 + 32);
  if (!v11
    || (uint64_t v12 = *(void *)(v11 + 24)) == 0
    || (int v13 = *(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void *))(v12 + 88)) == 0LL)
  {
    if ((*(_WORD *)(a5 + 388) & 0x8000) != 0) {
      return -902LL;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v31 = *(_DWORD *)(a5 + 368);
    LODWORD(buf[0]) = 136446978;
    *(void *)((char *)buf + 4) = "send_callback";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = a5 + 390;
    HIWORD(buf[2]) = 2080;
    int v92 = " ";
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v31;
    int v32 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v81) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unint64_t v33 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v34 = type[0];
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
      {
        int v35 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a5 + 390;
        HIWORD(buf[2]) = 2080;
        int v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v35;
        uint8x8_t v36 = "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback";
LABEL_91:
        _os_log_impl(&dword_181A5C000, v33, v34, v36, (uint8_t *)buf, 0x26u);
      }
    }

    else if ((_BYTE)v81)
    {
      unint64_t v37 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unint64_t v33 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v34 = type[0];
      BOOL v38 = os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]);
      if (!v37)
      {
        if (!v38) {
          goto LABEL_92;
        }
        int v57 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a5 + 390;
        HIWORD(buf[2]) = 2080;
        int v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v57;
        uint8x8_t v36 = "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback, no backtrace";
        goto LABEL_91;
      }

      if (v38)
      {
        int v39 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136447234;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a5 + 390;
        HIWORD(buf[2]) = 2080;
        int v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v39;
        HIWORD(v93) = 2082;
        v94[0] = v37;
        _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x30u);
      }

      free(v37);
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unint64_t v33 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v34 = type[0];
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
      {
        int v48 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a5 + 390;
        HIWORD(buf[2]) = 2080;
        int v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v48;
        uint8x8_t v36 = "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback, backtrace limit exceeded";
        goto LABEL_91;
      }
    }

uint64_t send_data_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5, uint64_t a6)
{
  uint64_t v243 = *MEMORY[0x1895F89C0];
  if (!a6)
  {
    __nwlog_obj();
    int buf = 136446210;
    int v231 = "send_data_callback";
    int v93 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v224) = 16;
    LOBYTE(v220) = 0;
    if (v224 == 17)
    {
      char v94 = (os_log_s *)__nwlog_obj();
      os_log_type_t v95 = v224;
      if (!os_log_type_enabled(v94, (os_log_type_t)v224)) {
        goto LABEL_265;
      }
      int buf = 136446210;
      int v231 = "send_data_callback";
      int v96 = "%{public}s nghttp2 user data is NULL, not http2";
    }

    else if ((_BYTE)v220)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v94 = (os_log_s *)__nwlog_obj();
      os_log_type_t v95 = v224;
      BOOL v110 = os_log_type_enabled(v94, (os_log_type_t)v224);
      if (backtrace_string)
      {
        if (v110)
        {
          int buf = 136446466;
          int v231 = "send_data_callback";
          __int16 v232 = 2082;
          unint64_t v233 = (unint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v94,  v95,  "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x16u);
        }

        free(backtrace_string);
LABEL_265:
        if (v93)
        {
          int v126 = (char *)v93;
LABEL_281:
          free(v126);
        }

        return 4294966394LL;
      }

      if (!v110) {
        goto LABEL_265;
      }
      int buf = 136446210;
      int v231 = "send_data_callback";
      int v96 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }

    else
    {
      char v94 = (os_log_s *)__nwlog_obj();
      os_log_type_t v95 = v224;
      if (!os_log_type_enabled(v94, (os_log_type_t)v224)) {
        goto LABEL_265;
      }
      int buf = 136446210;
      int v231 = "send_data_callback";
      int v96 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v94, v95, v96, (uint8_t *)&buf, 0xCu);
    goto LABEL_265;
  }

  if ((*(__int16 *)(a6 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v97 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v98 = *(_DWORD *)(a6 + 368);
      int buf = 136446978;
      int v231 = "send_data_callback";
      __int16 v232 = 2082;
      unint64_t v233 = a6 + 390;
      __int16 v234 = 2080;
      nw_endpoint_t v235 = " ";
      __int16 v236 = 1024;
      int v237 = v98;
      _os_log_impl( &dword_181A5C000,  v97,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called",  (uint8_t *)&buf,  0x26u);
    }
  }

  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81808);
  }
  if (!_nw_signposts_enabled || !kdebug_is_enabled())
  {
    if (a3) {
      goto LABEL_9;
    }
LABEL_205:
    __nwlog_obj();
    int buf = 136446210;
    int v231 = "send_data_callback";
    int v99 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v224) = 16;
    LOBYTE(v220) = 0;
    if (v224 == 17)
    {
      int v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = v224;
      if (os_log_type_enabled(v100, (os_log_type_t)v224))
      {
        int buf = 136446210;
        int v231 = "send_data_callback";
        int v102 = "%{public}s called with null framehd";
        goto LABEL_273;
      }

      goto LABEL_274;
    }

    if (!(_BYTE)v220)
    {
      int v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = v224;
      if (os_log_type_enabled(v100, (os_log_type_t)v224))
      {
        int buf = 136446210;
        int v231 = "send_data_callback";
        int v102 = "%{public}s called with null framehd, backtrace limit exceeded";
        goto LABEL_273;
      }

      goto LABEL_274;
    }

    int v111 = (char *)__nw_create_backtrace_string();
    int v100 = (os_log_s *)__nwlog_obj();
    os_log_type_t v101 = v224;
    BOOL v112 = os_log_type_enabled(v100, (os_log_type_t)v224);
    if (!v111)
    {
      if (v112)
      {
        int buf = 136446210;
        int v231 = "send_data_callback";
        int v102 = "%{public}s called with null framehd, no backtrace";
        goto LABEL_273;
      }

      goto LABEL_274;
    }

    if (!v112) {
      goto LABEL_227;
    }
    int buf = 136446466;
    int v231 = "send_data_callback";
    __int16 v232 = 2082;
    unint64_t v233 = (unint64_t)v111;
    int v113 = "%{public}s called with null framehd, dumping backtrace:%{public}s";
    goto LABEL_226;
  }

  kdebug_trace();
  if (!a3) {
    goto LABEL_205;
  }
LABEL_9:
  if (!a2)
  {
    __nwlog_obj();
    int buf = 136446210;
    int v231 = "send_data_callback";
    int v99 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v224) = 16;
    LOBYTE(v220) = 0;
    if (v224 == 17)
    {
      int v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = v224;
      if (os_log_type_enabled(v100, (os_log_type_t)v224))
      {
        int buf = 136446210;
        int v231 = "send_data_callback";
        int v102 = "%{public}s called with null frame";
LABEL_273:
        _os_log_impl(&dword_181A5C000, v100, v101, v102, (uint8_t *)&buf, 0xCu);
      }

void nghttp2_debug_logging_callback(char *a1, va_list a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  os_log_type_t v4 = 0LL;
  vasprintf(&v4, a1, a2);
  unint64_t v2 = v4;
  if (v4)
  {
    if (!gLogDatapath) {
      goto LABEL_3;
    }
    uint64_t v3 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v6 = "nghttp2_debug_logging_callback";
      __int16 v7 = 2082;
      uint64_t v8 = v4;
      _os_log_impl(&dword_181A5C000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s", buf, 0x16u);
    }

    unint64_t v2 = v4;
    if (v4) {
LABEL_3:
    }
      free(v2);
  }

uint64_t nw_http2_get_stream_from_id(uint64_t a1, int a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (a2 <= 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v10 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)int buf = 136447234;
    uint32_t v35 = "nw_http2_get_stream_from_id";
    __int16 v36 = 2082;
    uint64_t v37 = a1 + 390;
    __int16 v38 = 2080;
    int v39 = " ";
    __int16 v40 = 1024;
    int v41 = v11;
    __int16 v42 = 1024;
    *(_DWORD *)id v43 = a2;
    int v12 = "%{public}s %{public}s%s<i%u> requested stream id (%d) is not valid, returning NULL stream";
    int v13 = (os_log_s *)v10;
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_12;
  }

  uint64_t stream_node_from_id = nw_http2_get_stream_node_from_id(a1, a2);
  if (!stream_node_from_id)
  {
    uint64_t v8 = 0LL;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v15 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    int v16 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)int buf = 136447234;
    uint32_t v35 = "nw_http2_get_stream_from_id";
    __int16 v36 = 2082;
    uint64_t v37 = a1 + 390;
    __int16 v38 = 2080;
    int v39 = " ";
    __int16 v40 = 1024;
    int v41 = v16;
    __int16 v42 = 1024;
    *(_DWORD *)id v43 = a2;
    int v12 = "%{public}s %{public}s%s<i%u> stream %d not found in id based hash table";
    int v13 = (os_log_s *)v15;
    os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
LABEL_12:
    _os_log_impl(&dword_181A5C000, v13, v14, v12, buf, 0x2Cu);
    return 0LL;
  }

  uint64_t v7 = stream_node_from_id;
  uint64_t v8 = *(void *)(stream_node_from_id + 16);
  if (!v8)
  {
    if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v17 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)int buf = 136447234;
      uint32_t v35 = "nw_http2_get_stream_from_id";
      __int16 v36 = 2082;
      uint64_t v37 = a1 + 390;
      __int16 v38 = 2080;
      int v39 = " ";
      __int16 v40 = 1024;
      int v41 = v17;
      __int16 v42 = 2048;
      *(void *)id v43 = v7;
      os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v32 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v19 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v20 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_48;
        }
        int v21 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)int buf = 136447234;
        uint32_t v35 = "nw_http2_get_stream_from_id";
        __int16 v36 = 2082;
        uint64_t v37 = a1 + 390;
        __int16 v38 = 2080;
        int v39 = " ";
        __int16 v40 = 1024;
        int v41 = v21;
        __int16 v42 = 2048;
        *(void *)id v43 = v7;
        int v22 = "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra";
      }

      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v19 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v20 = type;
        BOOL v24 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (backtrace_string)
        {
          if (v24)
          {
            int v25 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)int buf = 136447490;
            uint32_t v35 = "nw_http2_get_stream_from_id";
            __int16 v36 = 2082;
            uint64_t v37 = a1 + 390;
            __int16 v38 = 2080;
            int v39 = " ";
            __int16 v40 = 1024;
            int v41 = v25;
            __int16 v42 = 2048;
            *(void *)id v43 = v7;
            *(_WORD *)&v43[8] = 2082;
            int v44 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra, dumping backtrace:%{public}s",  buf,  0x3Au);
          }

          free(backtrace_string);
          goto LABEL_48;
        }

        if (!v24)
        {
LABEL_48:
          if (v18) {
            free(v18);
          }
          return 0LL;
        }

        int v30 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)int buf = 136447234;
        uint32_t v35 = "nw_http2_get_stream_from_id";
        __int16 v36 = 2082;
        uint64_t v37 = a1 + 390;
        __int16 v38 = 2080;
        int v39 = " ";
        __int16 v40 = 1024;
        int v41 = v30;
        __int16 v42 = 2048;
        *(void *)id v43 = v7;
        int v22 = "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra, no backtrace";
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v19 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v20 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_48;
        }
        int v29 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)int buf = 136447234;
        uint32_t v35 = "nw_http2_get_stream_from_id";
        __int16 v36 = 2082;
        uint64_t v37 = a1 + 390;
        __int16 v38 = 2080;
        int v39 = " ";
        __int16 v40 = 1024;
        int v41 = v29;
        __int16 v42 = 2048;
        *(void *)id v43 = v7;
        int v22 = "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v19, v20, v22, buf, 0x30u);
      goto LABEL_48;
    }

    return 0LL;
  }

  if (a3)
  {
    uint64_t v9 = *(void *)(stream_node_from_id + 32);
    if (v9)
    {
      *a3 = v9;
    }

    else if (((*(unsigned __int16 *)(v8 + 188) | (*(unsigned __int8 *)(v8 + 190) << 16)) & 0x80000) == 0 {
           && gLogDatapath)
    }
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v26 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v28 = *(_DWORD *)(v8 + 176);
        int v27 = *(_DWORD *)(v8 + 180);
        *(_DWORD *)int buf = 136447490;
        uint32_t v35 = "nw_http2_get_stream_from_id";
        __int16 v36 = 2082;
        uint64_t v37 = v8 + 191;
        __int16 v38 = 2080;
        int v39 = " ";
        __int16 v40 = 1024;
        int v41 = v27;
        __int16 v42 = 1024;
        *(_DWORD *)id v43 = v28;
        *(_WORD *)&void v43[4] = 1024;
        *(_DWORD *)&v43[6] = v28;
        _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> no input handler attached to stream %d, ignoring",  buf,  0x32u);
      }
    }
  }

  return v8;
}

void nw_http2_connection_close(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (!a1 || (*(__int16 *)(a1 + 388) & 0x80000000) == 0)
  {
    if (gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v19 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v20 = " ";
        int v21 = *(_DWORD *)(a1 + 368);
        __int16 v36 = "nw_http2_connection_close";
        __int16 v37 = 2082;
        int v22 = (const char *)(a1 + 390);
        *(_DWORD *)int buf = 136446978;
        if (!a1) {
          int v22 = "";
        }
        __int16 v38 = (void *)v22;
        if (!a1) {
          os_log_type_t v20 = "";
        }
        __int16 v39 = 2080;
        __int16 v40 = v20;
        __int16 v41 = 1024;
        int v42 = v21;
        _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        __int16 v2 = *(_WORD *)(a1 + 388);
        if ((v2 & 8) != 0) {
          goto LABEL_48;
        }
        goto LABEL_6;
      }
    }

    if (!a1)
    {
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      __int16 v36 = "nw_http2_connection_close";
      BOOL v23 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v33 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v24 = (os_log_s *)__nwlog_obj();
        os_log_type_t v25 = type;
        if (!os_log_type_enabled(v24, type)) {
          goto LABEL_69;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_http2_connection_close";
        uint64_t v26 = "%{public}s called with null http2";
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v24 = (os_log_s *)__nwlog_obj();
        os_log_type_t v25 = type;
        BOOL v30 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v36 = "nw_http2_connection_close";
            __int16 v37 = 2082;
            __int16 v38 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_69;
        }

        if (!v30)
        {
LABEL_69:
          if (v23) {
            free(v23);
          }
          return;
        }

        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_http2_connection_close";
        uint64_t v26 = "%{public}s called with null http2, no backtrace";
      }

      else
      {
        BOOL v24 = (os_log_s *)__nwlog_obj();
        os_log_type_t v25 = type;
        if (!os_log_type_enabled(v24, type)) {
          goto LABEL_69;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_http2_connection_close";
        uint64_t v26 = "%{public}s called with null http2, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
      goto LABEL_69;
    }
  }

  __int16 v2 = *(_WORD *)(a1 + 388);
  if ((v2 & 8) != 0)
  {
LABEL_48:
    if ((v2 & 0x8000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v27 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v28 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)int buf = 136446978;
        __int16 v36 = "nw_http2_connection_close";
        __int16 v37 = 2082;
        __int16 v38 = (void *)(a1 + 390);
        __int16 v39 = 2080;
        __int16 v40 = " ";
        __int16 v41 = 1024;
        int v42 = v28;
        _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> tunnel is closed, returning",  buf,  0x26u);
      }
    }

    return;
  }

void nw_http2_stream_close(uint64_t a1, uint64_t a2)
{
  uint64_t v118 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v82 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v84 = *(_DWORD *)(a2 + 176);
        int v83 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)int buf = 136447234;
        int v107 = "nw_http2_stream_close";
        __int16 v108 = 2082;
        uint64_t v109 = (const char *)(a2 + 191);
        __int16 v110 = 2080;
        uint64_t v111 = (uint64_t)" ";
        __int16 v112 = 1024;
        *(_DWORD *)int v113 = v83;
        *(_WORD *)&v113[4] = 1024;
        *(_DWORD *)&v113[6] = v84;
        _os_log_impl(&dword_181A5C000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called", buf, 0x2Cu);
      }
    }
  }

  else
  {
    if (gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v74 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v75 = (const char *)(a1 + 390);
        int v76 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)int buf = 136446978;
        int v107 = "nw_http2_stream_close";
        __int16 v108 = 2082;
        if (!a1) {
          int v75 = "";
        }
        uint64_t v109 = v75;
        if (a1) {
          uint32_t v77 = " ";
        }
        else {
          uint32_t v77 = "";
        }
        __int16 v110 = 2080;
        uint64_t v111 = (uint64_t)v77;
        __int16 v112 = 1024;
        *(_DWORD *)int v113 = v76;
        _os_log_impl(&dword_181A5C000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        goto LABEL_129;
      }
    }
  }

  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v107 = "nw_http2_stream_close";
    int v78 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v104 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v79 = (os_log_s *)__nwlog_obj();
      os_log_type_t v80 = type;
      if (!os_log_type_enabled(v79, type)) {
        goto LABEL_180;
      }
      *(_DWORD *)int buf = 136446210;
      int v107 = "nw_http2_stream_close";
      char v81 = "%{public}s called with null http2";
      goto LABEL_179;
    }

    if (!v104)
    {
      int v79 = (os_log_s *)__nwlog_obj();
      os_log_type_t v80 = type;
      if (!os_log_type_enabled(v79, type)) {
        goto LABEL_180;
      }
      *(_DWORD *)int buf = 136446210;
      int v107 = "nw_http2_stream_close";
      char v81 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_179;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v79 = (os_log_s *)__nwlog_obj();
    os_log_type_t v80 = type;
    BOOL v86 = os_log_type_enabled(v79, type);
    if (!backtrace_string)
    {
      if (!v86) {
        goto LABEL_180;
      }
      *(_DWORD *)int buf = 136446210;
      int v107 = "nw_http2_stream_close";
      char v81 = "%{public}s called with null http2, no backtrace";
      goto LABEL_179;
    }

    if (v86)
    {
      *(_DWORD *)int buf = 136446466;
      int v107 = "nw_http2_stream_close";
      __int16 v108 = 2082;
      uint64_t v109 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v79,  v80,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
    goto LABEL_180;
  }

  if (!a2)
  {
LABEL_129:
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v107 = "nw_http2_stream_close";
    int v78 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v104 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v79 = (os_log_s *)__nwlog_obj();
      os_log_type_t v80 = type;
      if (!os_log_type_enabled(v79, type)) {
        goto LABEL_180;
      }
      *(_DWORD *)int buf = 136446210;
      int v107 = "nw_http2_stream_close";
      char v81 = "%{public}s called with null stream";
      goto LABEL_179;
    }

    if (!v104)
    {
      int v79 = (os_log_s *)__nwlog_obj();
      os_log_type_t v80 = type;
      if (!os_log_type_enabled(v79, type)) {
        goto LABEL_180;
      }
      *(_DWORD *)int buf = 136446210;
      int v107 = "nw_http2_stream_close";
      char v81 = "%{public}s called with null stream, backtrace limit exceeded";
      goto LABEL_179;
    }

    uint64_t v87 = (char *)__nw_create_backtrace_string();
    int v79 = (os_log_s *)__nwlog_obj();
    os_log_type_t v80 = type;
    BOOL v88 = os_log_type_enabled(v79, type);
    if (v87)
    {
      if (v88)
      {
        *(_DWORD *)int buf = 136446466;
        int v107 = "nw_http2_stream_close";
        __int16 v108 = 2082;
        uint64_t v109 = v87;
        _os_log_impl( &dword_181A5C000,  v79,  v80,  "%{public}s called with null stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v87);
      if (!v78) {
        return;
      }
LABEL_181:
      free(v78);
      return;
    }

    if (v88)
    {
      *(_DWORD *)int buf = 136446210;
      int v107 = "nw_http2_stream_close";
      char v81 = "%{public}s called with null stream, no backtrace";
LABEL_179:
      _os_log_impl(&dword_181A5C000, v79, v80, v81, buf, 0xCu);
    }

void nw_http2_session_send(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  if (a1 && *(__int16 *)(a1 + 388) < 0)
  {
LABEL_5:
    __int16 v2 = *(_WORD *)(a1 + 388);
    if ((v2 & 0x100) != 0) {
      goto LABEL_83;
    }
    goto LABEL_6;
  }

  if (!gLogDatapath) {
    goto LABEL_4;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  int v42 = (os_log_s *)gconnectionLogObj;
  if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    if (a1) {
      goto LABEL_5;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http2_session_send";
    int v46 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (__nwlog_fault(v46, &type, &v56))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = type;
        if (!os_log_type_enabled(v47, type)) {
          goto LABEL_109;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_session_send";
        int v49 = "%{public}s called with null http2";
        goto LABEL_108;
      }

      if (!v56)
      {
        uint64_t v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = type;
        if (!os_log_type_enabled(v47, type)) {
          goto LABEL_109;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_session_send";
        int v49 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_108;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v52 = os_log_type_enabled(v47, type);
      if (backtrace_string)
      {
        if (v52)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_session_send";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_109;
      }

      if (v52)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_session_send";
        int v49 = "%{public}s called with null http2, no backtrace";
LABEL_108:
        _os_log_impl(&dword_181A5C000, v47, v48, v49, buf, 0xCu);
      }
    }

void nw_http2_finalize_written_output_frames(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1 || (*(__int16 *)(a1 + 388) & 0x80000000) == 0)
  {
    if (!gLogDatapath) {
      goto LABEL_4;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v15 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = " ";
      int v17 = *(_DWORD *)(a1 + 368);
      __int16 v41 = "nw_http2_finalize_written_output_frames";
      __int16 v42 = 2082;
      int v18 = (const char *)(a1 + 390);
      *(_DWORD *)int buf = 136446978;
      if (!a1) {
        int v18 = "";
      }
      int v43 = (void *)v18;
      if (!a1) {
        uint64_t v16 = "";
      }
      __int16 v44 = 2080;
      int v45 = v16;
      __int16 v46 = 1024;
      int v47 = v17;
      _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }

    else
    {
LABEL_4:
      if (!a1)
      {
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        __int16 v41 = "nw_http2_finalize_written_output_frames";
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        v37[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (v37[0] == OS_LOG_TYPE_FAULT)
        {
          int v20 = (os_log_s *)__nwlog_obj();
          os_log_type_t v21 = v37[0];
          if (!os_log_type_enabled(v20, v37[0])) {
            goto LABEL_98;
          }
          *(_DWORD *)int buf = 136446210;
          __int16 v41 = "nw_http2_finalize_written_output_frames";
          os_log_type_t v22 = "%{public}s called with null http2";
          goto LABEL_97;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          int v20 = (os_log_s *)__nwlog_obj();
          os_log_type_t v21 = v37[0];
          if (!os_log_type_enabled(v20, v37[0])) {
            goto LABEL_98;
          }
          *(_DWORD *)int buf = 136446210;
          __int16 v41 = "nw_http2_finalize_written_output_frames";
          os_log_type_t v22 = "%{public}s called with null http2, backtrace limit exceeded";
          goto LABEL_97;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        int v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = v37[0];
        BOOL v29 = os_log_type_enabled(v20, v37[0]);
        if (!backtrace_string)
        {
          if (!v29) {
            goto LABEL_98;
          }
          *(_DWORD *)int buf = 136446210;
          __int16 v41 = "nw_http2_finalize_written_output_frames";
          os_log_type_t v22 = "%{public}s called with null http2, no backtrace";
          goto LABEL_97;
        }

        if (v29)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v41 = "nw_http2_finalize_written_output_frames";
          __int16 v42 = 2082;
          int v43 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_98:
        if (!v19) {
          return;
        }
        goto LABEL_99;
      }
    }
  }

  char v3 = (uint64_t *)(a1 + 240);
  uint64_t v2 = *(void *)(a1 + 240);
  *(_WORD *)(a1 + 374) = 0;
  if (!v2)
  {
    if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v30 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v31 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)int buf = 136446978;
        __int16 v41 = "nw_http2_finalize_written_output_frames";
        __int16 v42 = 2082;
        int v43 = (void *)(a1 + 390);
        __int16 v44 = 2080;
        int v45 = " ";
        __int16 v46 = 1024;
        int v47 = v31;
        _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> no written output frames, nothing to finalize",  buf,  0x26u);
      }
    }

    return;
  }

  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81808);
  }
  if (!_nw_signposts_enabled || !kdebug_is_enabled())
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      goto LABEL_11;
    }
LABEL_64:
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v41 = "nw_http2_finalize_written_output_frames";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    v37[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      int v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = v37[0];
      if (!os_log_type_enabled(v20, v37[0])) {
        goto LABEL_98;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v41 = "nw_http2_finalize_written_output_frames";
      os_log_type_t v22 = "%{public}s called with null output_handler";
      goto LABEL_97;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      int v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = v37[0];
      if (!os_log_type_enabled(v20, v37[0])) {
        goto LABEL_98;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v41 = "nw_http2_finalize_written_output_frames";
      os_log_type_t v22 = "%{public}s called with null output_handler, backtrace limit exceeded";
      goto LABEL_97;
    }

    int v32 = (char *)__nw_create_backtrace_string();
    int v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = v37[0];
    BOOL v33 = os_log_type_enabled(v20, v37[0]);
    if (v32)
    {
      if (v33)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v41 = "nw_http2_finalize_written_output_frames";
        __int16 v42 = 2082;
        int v43 = v32;
        _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v32);
      if (!v19) {
        return;
      }
LABEL_99:
      free(v19);
      return;
    }

    if (v33)
    {
      *(_DWORD *)int buf = 136446210;
      __int16 v41 = "nw_http2_finalize_written_output_frames";
      os_log_type_t v22 = "%{public}s called with null output_handler, no backtrace";
LABEL_97:
      _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
      goto LABEL_98;
    }

    goto LABEL_98;
  }

  kdebug_trace();
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    goto LABEL_64;
  }
LABEL_11:
  *(void *)uint64_t v37 = 0LL;
  int v38 = v37;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v5 + 40) = v37;
    int v6 = *(os_log_type_t **)(a1 + 248);
    *(void *)uint64_t v37 = v5;
    int v38 = v6;
  }

  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 24_Block_object_dispose((const void *)(v20 - 192), 8) = v3;
  uint64_t v7 = *(void *)(v4 + 24);
  if (!v7 || (int v8 = *(void (**)(uint64_t, os_log_type_t *))(v7 + 96)) == 0LL)
  {
    __nwlog_obj();
    int v9 = *(const char **)(v4 + 16);
    if (!v9) {
      int v9 = "invalid";
    }
    *(_DWORD *)int buf = 136446466;
    __int16 v41 = "nw_http2_finalize_written_output_frames";
    __int16 v42 = 2082;
    int v43 = (void *)v9;
    int v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_89;
      }
      uint64_t v13 = *(const char **)(v4 + 16);
      if (!v13) {
        uint64_t v13 = "invalid";
      }
      *(_DWORD *)int buf = 136446466;
      __int16 v41 = "nw_http2_finalize_written_output_frames";
      __int16 v42 = 2082;
      int v43 = (void *)v13;
      os_log_type_t v14 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
    }

    else if (v36)
    {
      uint64_t v25 = (char *)__nw_create_backtrace_string();
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v26 = os_log_type_enabled(v11, type);
      if (v25)
      {
        if (v26)
        {
          os_log_type_t v27 = *(const char **)(v4 + 16);
          if (!v27) {
            os_log_type_t v27 = "invalid";
          }
          *(_DWORD *)int buf = 136446722;
          __int16 v41 = "nw_http2_finalize_written_output_frames";
          __int16 v42 = 2082;
          int v43 = (void *)v27;
          __int16 v44 = 2082;
          int v45 = v25;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v25);
        goto LABEL_89;
      }

      if (!v26)
      {
LABEL_89:
        if (v10) {
          free(v10);
        }
        goto LABEL_16;
      }

      int v35 = *(const char **)(v4 + 16);
      if (!v35) {
        int v35 = "invalid";
      }
      *(_DWORD *)int buf = 136446466;
      __int16 v41 = "nw_http2_finalize_written_output_frames";
      __int16 v42 = 2082;
      int v43 = (void *)v35;
      os_log_type_t v14 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
    }

    else
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_89;
      }
      int v34 = *(const char **)(v4 + 16);
      if (!v34) {
        int v34 = "invalid";
      }
      *(_DWORD *)int buf = 136446466;
      __int16 v41 = "nw_http2_finalize_written_output_frames";
      __int16 v42 = 2082;
      int v43 = (void *)v34;
      os_log_type_t v14 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v11, v12, v14, buf, 0x16u);
    goto LABEL_89;
  }

  v8(v4, v37);
LABEL_16:
  if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v23 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)int buf = 136446978;
      __int16 v41 = "nw_http2_finalize_written_output_frames";
      __int16 v42 = 2082;
      int v43 = (void *)(a1 + 390);
      __int16 v44 = 2080;
      int v45 = " ";
      __int16 v46 = 1024;
      int v47 = v24;
      _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> finalized written output frames",  buf,  0x26u);
    }
  }

  if (_nw_signposts_once == -1)
  {
    if (!_nw_signposts_enabled) {
      return;
    }
  }

  else
  {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81808);
    if (!_nw_signposts_enabled) {
      return;
    }
  }

void ___ZL21nw_http2_session_sendP17nw_protocol_http2_block_invoke(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v1)
  {
    *(_WORD *)(v1 + 388) &= ~0x4000u;
    nw_http2_finalize_written_output_frames(v1);
  }

void nw_http2_drain_output_frames(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v4 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = " ";
      int v6 = *(_DWORD *)(a1 + 368);
      os_log_type_t v22 = "nw_http2_drain_output_frames";
      __int16 v23 = 2082;
      uint64_t v7 = (const char *)(a1 + 390);
      *(_DWORD *)int buf = 136446978;
      if (!a1) {
        uint64_t v7 = "";
      }
      int v24 = (void *)v7;
      if (!a1) {
        uint64_t v5 = "";
      }
      __int16 v25 = 2080;
      BOOL v26 = v5;
      __int16 v27 = 1024;
      int v28 = v6;
      _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      __int16 v2 = *(_WORD *)(a1 + 388);
      if ((v2 & 0x400) != 0) {
        goto LABEL_17;
      }
      goto LABEL_6;
    }
  }

  if (a1)
  {
LABEL_5:
    __int16 v2 = *(_WORD *)(a1 + 388);
    if ((v2 & 0x400) != 0)
    {
LABEL_17:
      if ((v2 & 0x8000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v14 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v15 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)int buf = 136446978;
          os_log_type_t v22 = "nw_http2_drain_output_frames";
          __int16 v23 = 2082;
          int v24 = (void *)(a1 + 390);
          __int16 v25 = 2080;
          BOOL v26 = " ";
          __int16 v27 = 1024;
          int v28 = v15;
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> already draining output frames, skipping",  buf,  0x26u);
        }
      }

      return;
    }

uint64_t ___ZL41nw_http2_deliver_pending_output_availableP17nw_protocol_http2_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  if (!object)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v12 = *(void *)(a1 + 32);
    int v13 = (const char *)(v12 + 390);
    BOOL v14 = v12 == 0;
    int v15 = *(_DWORD *)(v12 + 368);
    if (v14) {
      int v13 = "";
    }
    *(_DWORD *)int buf = 136447234;
    int v69 = "nw_http2_deliver_pending_output_available_block_invoke";
    if (v14) {
      uint64_t v16 = "";
    }
    else {
      uint64_t v16 = " ";
    }
    __int16 v70 = 2082;
    int v71 = v13;
    __int16 v72 = 2080;
    int v73 = v16;
    __int16 v74 = 1024;
    int v75 = v15;
    __int16 v76 = 2048;
    *(void *)uint32_t v77 = a2;
    BOOL v17 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v17, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v18 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v19 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_68;
        }
        uint64_t v20 = *(void *)(a1 + 32);
        os_log_type_t v21 = (const char *)(v20 + 390);
        BOOL v22 = v20 == 0;
        if (!v20) {
          os_log_type_t v21 = "";
        }
        int v23 = *(_DWORD *)(v20 + 368);
        if (v22) {
          int v24 = "";
        }
        else {
          int v24 = " ";
        }
        *(_DWORD *)int buf = 136447234;
        int v69 = "nw_http2_deliver_pending_output_available_block_invoke";
        __int16 v70 = 2082;
        int v71 = v21;
        __int16 v72 = 2080;
        int v73 = v24;
        __int16 v74 = 1024;
        int v75 = v23;
        __int16 v76 = 2048;
        *(void *)uint32_t v77 = a2;
        __int16 v25 = "%{public}s %{public}s%s<i%u> no object for hash node %p, not triggering output_available";
        goto LABEL_67;
      }

      if (!v66)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v18 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v19 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_68;
        }
        uint64_t v40 = *(void *)(a1 + 32);
        __int16 v41 = (const char *)(v40 + 390);
        BOOL v42 = v40 == 0;
        if (!v40) {
          __int16 v41 = "";
        }
        int v43 = *(_DWORD *)(v40 + 368);
        if (v42) {
          __int16 v44 = "";
        }
        else {
          __int16 v44 = " ";
        }
        *(_DWORD *)int buf = 136447234;
        int v69 = "nw_http2_deliver_pending_output_available_block_invoke";
        __int16 v70 = 2082;
        int v71 = v41;
        __int16 v72 = 2080;
        int v73 = v44;
        __int16 v74 = 1024;
        int v75 = v43;
        __int16 v76 = 2048;
        *(void *)uint32_t v77 = a2;
        __int16 v25 = "%{public}s %{public}s%s<i%u> no object for hash node %p, not triggering output_available, backtrace limit exceeded";
        goto LABEL_67;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v18 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v19 = type;
      BOOL v34 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (backtrace_string)
      {
        if (v34)
        {
          uint64_t v35 = *(void *)(a1 + 32);
          char v36 = (const char *)(v35 + 390);
          BOOL v37 = v35 == 0;
          if (!v35) {
            char v36 = "";
          }
          int v38 = *(_DWORD *)(v35 + 368);
          if (v37) {
            BOOL v39 = "";
          }
          else {
            BOOL v39 = " ";
          }
          *(_DWORD *)int buf = 136447490;
          int v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          __int16 v70 = 2082;
          int v71 = v36;
          __int16 v72 = 2080;
          int v73 = v39;
          __int16 v74 = 1024;
          int v75 = v38;
          __int16 v76 = 2048;
          *(void *)uint32_t v77 = a2;
          *(_WORD *)&v77[8] = 2082;
          *(void *)&v77[10] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s %{public}s%s<i%u> no object for hash node %p, not triggering output_available, dumping backtrace:%{public}s",  buf,  0x3Au);
        }

        free(backtrace_string);
        goto LABEL_68;
      }

      if (v34)
      {
        uint64_t v45 = *(void *)(a1 + 32);
        __int16 v46 = (const char *)(v45 + 390);
        BOOL v47 = v45 == 0;
        if (!v45) {
          __int16 v46 = "";
        }
        int v48 = *(_DWORD *)(v45 + 368);
        if (v47) {
          int v49 = "";
        }
        else {
          int v49 = " ";
        }
        *(_DWORD *)int buf = 136447234;
        int v69 = "nw_http2_deliver_pending_output_available_block_invoke";
        __int16 v70 = 2082;
        int v71 = v46;
        __int16 v72 = 2080;
        int v73 = v49;
        __int16 v74 = 1024;
        int v75 = v48;
        __int16 v76 = 2048;
        *(void *)uint32_t v77 = a2;
        __int16 v25 = "%{public}s %{public}s%s<i%u> no object for hash node %p, not triggering output_available, no backtrace";
LABEL_67:
        _os_log_impl(&dword_181A5C000, v18, v19, v25, buf, 0x30u);
      }
    }

uint64_t ___ZL28nw_http2_drain_output_framesP17nw_protocol_http2_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v5 = object;
    uint64_t v6 = *(void *)nw_hash_node_get_extra(a2);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 188) & 2) != 0)
      {
        while ((nw_http2_drain_next_frame_for_stream(*(void *)(a1 + 32), v5, v6, 1) & 1) != 0)
          ;
      }

      return 1LL;
    }

    uint64_t v17 = *(void *)(a1 + 32);
    if (!v17 || (*(__int16 *)(v17 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v18 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = (const char *)(v19 + 390);
        os_log_type_t v21 = "";
        BOOL v22 = v19 == 0;
        int v23 = *(_DWORD *)(v19 + 368);
        uint64_t v26 = "nw_http2_drain_output_frames_block_invoke";
        if (v22) {
          uint64_t v20 = "";
        }
        __int16 v27 = 2082;
        int v25 = 136447234;
        if (!v22) {
          os_log_type_t v21 = " ";
        }
        uint64_t v28 = v20;
        __int16 v29 = 2080;
        uint64_t v30 = v21;
        __int16 v31 = 1024;
        int v32 = v23;
        __int16 v33 = 2048;
        uint64_t v34 = v5;
        BOOL v14 = "%{public}s %{public}s%s<i%u> stream not found for input protocol %p, not draining output frames";
        int v15 = (os_log_s *)v18;
        os_log_type_t v16 = OS_LOG_TYPE_INFO;
LABEL_26:
        _os_log_impl(&dword_181A5C000, v15, v16, v14, (uint8_t *)&v25, 0x30u);
      }
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7 || (*(__int16 *)(v7 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v8 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        os_log_type_t v10 = (const char *)(v9 + 390);
        uint64_t v11 = "";
        BOOL v12 = v9 == 0;
        int v13 = *(_DWORD *)(v9 + 368);
        uint64_t v26 = "nw_http2_drain_output_frames_block_invoke";
        if (v12) {
          os_log_type_t v10 = "";
        }
        __int16 v27 = 2082;
        int v25 = 136447234;
        if (!v12) {
          uint64_t v11 = " ";
        }
        uint64_t v28 = v10;
        __int16 v29 = 2080;
        uint64_t v30 = v11;
        __int16 v31 = 1024;
        int v32 = v13;
        __int16 v33 = 2048;
        uint64_t v34 = a2;
        BOOL v14 = "%{public}s %{public}s%s<i%u> input protocol in node %p in protocol table is NULL, skipping";
        int v15 = (os_log_s *)v8;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        goto LABEL_26;
      }
    }
  }

  return 1LL;
}

uint64_t nw_http2_drain_next_frame_for_stream(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v163 = *MEMORY[0x1895F89C0];
  uint64_t v8 = &qword_18C45F000;
  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    unint64_t v58 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v60 = *(_DWORD *)(a3 + 176);
      int v59 = *(_DWORD *)(a3 + 180);
      *(_DWORD *)int buf = 136447234;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      __int16 v154 = 2082;
      uint64_t v155 = a3 + 191;
      __int16 v156 = 2080;
      *(void *)int v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v59;
      __int16 v158 = 1024;
      int v159 = v60;
      _os_log_impl(&dword_181A5C000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called", buf, 0x2Cu);
    }
  }

  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v153 = "nw_http2_drain_next_frame_for_stream";
    int v54 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v149[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v55 = (os_log_s *)__nwlog_obj();
      os_log_type_t v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0])) {
        goto LABEL_201;
      }
      *(_DWORD *)int buf = 136446210;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      int v57 = "%{public}s called with null http2";
      goto LABEL_200;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v55 = (os_log_s *)__nwlog_obj();
      os_log_type_t v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0])) {
        goto LABEL_201;
      }
      *(_DWORD *)int buf = 136446210;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      int v57 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v55 = (os_log_s *)__nwlog_obj();
    os_log_type_t v56 = v149[0];
    BOOL v69 = os_log_type_enabled(v55, v149[0]);
    if (!backtrace_string)
    {
      if (!v69) {
        goto LABEL_201;
      }
      *(_DWORD *)int buf = 136446210;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      int v57 = "%{public}s called with null http2, no backtrace";
      goto LABEL_200;
    }

    if (!v69) {
      goto LABEL_152;
    }
    *(_DWORD *)int buf = 136446466;
    int v153 = "nw_http2_drain_next_frame_for_stream";
    __int16 v154 = 2082;
    uint64_t v155 = (uint64_t)backtrace_string;
    __int16 v70 = "%{public}s called with null http2, dumping backtrace:%{public}s";
LABEL_151:
    _os_log_impl(&dword_181A5C000, v55, v56, v70, buf, 0x16u);
    goto LABEL_152;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v153 = "nw_http2_drain_next_frame_for_stream";
    int v54 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v149[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v55 = (os_log_s *)__nwlog_obj();
      os_log_type_t v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0])) {
        goto LABEL_201;
      }
      *(_DWORD *)int buf = 136446210;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      int v57 = "%{public}s called with null input_handler";
      goto LABEL_200;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v55 = (os_log_s *)__nwlog_obj();
      os_log_type_t v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0])) {
        goto LABEL_201;
      }
      *(_DWORD *)int buf = 136446210;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      int v57 = "%{public}s called with null input_handler, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v55 = (os_log_s *)__nwlog_obj();
    os_log_type_t v56 = v149[0];
    BOOL v71 = os_log_type_enabled(v55, v149[0]);
    if (!backtrace_string)
    {
      if (!v71) {
        goto LABEL_201;
      }
      *(_DWORD *)int buf = 136446210;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      int v57 = "%{public}s called with null input_handler, no backtrace";
      goto LABEL_200;
    }

    if (!v71) {
      goto LABEL_152;
    }
    *(_DWORD *)int buf = 136446466;
    int v153 = "nw_http2_drain_next_frame_for_stream";
    __int16 v154 = 2082;
    uint64_t v155 = (uint64_t)backtrace_string;
    __int16 v70 = "%{public}s called with null input_handler, dumping backtrace:%{public}s";
    goto LABEL_151;
  }

  uint64_t v9 = (uint64_t *)(a3 + 16);
  int v10 = (*(unsigned __int8 *)(a3 + 190) >> 3) & 1;
  if (!gLogDatapath) {
    LOBYTE(v10) = 1;
  }
  if (!*(void *)(a3 + 16))
  {
    if ((v10 & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v72 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v74 = *(_DWORD *)(a3 + 176);
        int v73 = *(_DWORD *)(a3 + 180);
        *(_DWORD *)int buf = 136447490;
        int v153 = "nw_http2_drain_next_frame_for_stream";
        __int16 v154 = 2082;
        uint64_t v155 = a3 + 191;
        __int16 v156 = 2080;
        *(void *)int v157 = " ";
        *(_WORD *)&v157[8] = 1024;
        *(_DWORD *)&v157[10] = v73;
        __int16 v158 = 1024;
        int v159 = v74;
        __int16 v160 = 1024;
        *(_DWORD *)BOOL v161 = v74;
        int v75 = "%{public}s %{public}s%s<i%u:s%d> no next frame to drain for stream %d";
        __int16 v76 = (os_log_s *)v72;
        os_log_type_t v77 = OS_LOG_TYPE_DEBUG;
        uint32_t v78 = 50;
LABEL_246:
        _os_log_impl(&dword_181A5C000, v76, v77, v75, buf, v78);
        return 0LL;
      }
    }

    return 0LL;
  }

  if ((v10 & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v61 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v63 = *(_DWORD *)(a3 + 176);
      int v62 = *(_DWORD *)(a3 + 180);
      *(_DWORD *)int buf = 136447490;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      __int16 v154 = 2082;
      uint64_t v155 = a3 + 191;
      __int16 v156 = 2080;
      *(void *)int v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v62;
      __int16 v158 = 1024;
      int v159 = v63;
      __int16 v160 = 1024;
      *(_DWORD *)BOOL v161 = v63;
      _os_log_impl( &dword_181A5C000,  v61,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> draining next frame for stream %d",  buf,  0x32u);
    }
  }

  uint64_t v11 = *v9;
  if (!*v9)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v153 = "nw_http2_drain_next_frame_for_stream";
    int v54 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v149[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v55 = (os_log_s *)__nwlog_obj();
      os_log_type_t v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0])) {
        goto LABEL_201;
      }
      *(_DWORD *)int buf = 136446210;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      int v57 = "%{public}s called with null frame";
      goto LABEL_200;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v55 = (os_log_s *)__nwlog_obj();
      os_log_type_t v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0])) {
        goto LABEL_201;
      }
      *(_DWORD *)int buf = 136446210;
      int v153 = "nw_http2_drain_next_frame_for_stream";
      int v57 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v55 = (os_log_s *)__nwlog_obj();
    os_log_type_t v56 = v149[0];
    BOOL v87 = os_log_type_enabled(v55, v149[0]);
    if (backtrace_string)
    {
      if (v87)
      {
        *(_DWORD *)int buf = 136446466;
        int v153 = "nw_http2_drain_next_frame_for_stream";
        __int16 v154 = 2082;
        uint64_t v155 = (uint64_t)backtrace_string;
        __int16 v70 = "%{public}s called with null frame, dumping backtrace:%{public}s";
        goto LABEL_151;
      }

uint64_t data_source_read_callback( uint64_t a1, int a2, uint64_t a3, unsigned int a4, _DWORD *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v83 = *MEMORY[0x1895F89C0];
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v72 = "data_source_read_callback";
    uint64_t v53 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v70 = 0;
    if (__nwlog_fault(v53, type, &v70))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        int v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v72 = "data_source_read_callback";
          os_log_type_t v56 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_119:
          _os_log_impl(&dword_181A5C000, v54, v55, v56, buf, 0xCu);
        }
      }

      else if (v70)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type[0];
        BOOL v63 = os_log_type_enabled(v54, type[0]);
        if (backtrace_string)
        {
          if (v63)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v72 = "data_source_read_callback";
            __int16 v73 = 2082;
            uint64_t v74 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_120;
        }

        if (v63)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v72 = "data_source_read_callback";
          os_log_type_t v56 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_119;
        }
      }

      else
      {
        int v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v72 = "data_source_read_callback";
          os_log_type_t v56 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_119;
        }
      }
    }

void nw_http2_send_end_stream(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v31 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v33 = *(_DWORD *)(a2 + 176);
      int v32 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)int buf = 136447234;
      int v47 = "nw_http2_send_end_stream";
      __int16 v48 = 2082;
      uint64_t v49 = a2 + 191;
      __int16 v50 = 2080;
      uint32_t v51 = " ";
      __int16 v52 = 1024;
      int v53 = v32;
      __int16 v54 = 1024;
      int v55 = v33;
      _os_log_impl(&dword_181A5C000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called", buf, 0x2Cu);
    }
  }

  int v4 = *(unsigned __int16 *)(a2 + 188);
  unsigned int v5 = v4 | (*(unsigned __int8 *)(a2 + 190) << 16);
  if ((v4 & 1) == 0)
  {
    if ((v5 & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        int v8 = *(_DWORD *)(a2 + 176);
        int v7 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)int buf = 136447234;
        int v47 = "nw_http2_send_end_stream";
        __int16 v48 = 2082;
        uint64_t v49 = a2 + 191;
        __int16 v50 = 2080;
        uint32_t v51 = " ";
        __int16 v52 = 1024;
        int v53 = v7;
        __int16 v54 = 1024;
        int v55 = v8;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> ERROR: Cannot send end stream on a closed stream",  buf,  0x2Cu);
      }
    }

    return;
  }

  int v9 = (v5 >> 19) & 1;
  if (!gLogDatapath) {
    LOBYTE(v9) = 1;
  }
  if (*(void *)(a2 + 16))
  {
    if ((v9 & 1) != 0) {
      goto LABEL_13;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v34 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_13;
    }
    int v36 = *(_DWORD *)(a2 + 176);
    int v35 = *(_DWORD *)(a2 + 180);
    *(_DWORD *)int buf = 0;
    nw_frame_array_get_frame_count((uint64_t *)(a2 + 16), 0, buf);
    int v37 = *(_DWORD *)buf;
    *(_DWORD *)int buf = 136447490;
    int v47 = "nw_http2_send_end_stream";
    __int16 v48 = 2082;
    uint64_t v49 = a2 + 191;
    __int16 v50 = 2080;
    uint32_t v51 = " ";
    __int16 v52 = 1024;
    int v53 = v35;
    __int16 v54 = 1024;
    int v55 = v36;
    __int16 v56 = 1024;
    int v57 = v37;
    uint64_t v17 = "%{public}s %{public}s%s<i%u:s%d> deferring end stream until all pending bytes (%u) are sent";
    uint64_t v18 = (os_log_s *)v34;
    uint32_t v19 = 50;
LABEL_51:
    _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_DEBUG, v17, buf, v19);
LABEL_13:
    *(_WORD *)(a2 + 188) |= 0x10u;
    return;
  }

  if ((v9 & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    unsigned int v38 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v40 = *(_DWORD *)(a2 + 176);
      int v39 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)int buf = 136447490;
      int v47 = "nw_http2_send_end_stream";
      __int16 v48 = 2082;
      uint64_t v49 = a2 + 191;
      __int16 v50 = 2080;
      uint32_t v51 = " ";
      __int16 v52 = 1024;
      int v53 = v39;
      __int16 v54 = 1024;
      int v55 = v40;
      __int16 v56 = 1024;
      int v57 = v40;
      _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> writing end stream on stream %d",  buf,  0x32u);
    }
  }

  int v10 = nghttp2_submit_data();
  if ((v10 & 0x80000000) == 0)
  {
    if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unsigned int v41 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v43 = *(_DWORD *)(a2 + 176);
        int v42 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)int buf = 136447490;
        int v47 = "nw_http2_send_end_stream";
        __int16 v48 = 2082;
        uint64_t v49 = a2 + 191;
        __int16 v50 = 2080;
        uint32_t v51 = " ";
        __int16 v52 = 1024;
        int v53 = v42;
        __int16 v54 = 1024;
        int v55 = v43;
        __int16 v56 = 1024;
        int v57 = v43;
        _os_log_impl( &dword_181A5C000,  v41,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> submitted end stream for stream %d",  buf,  0x32u);
      }
    }

    int v12 = *(unsigned __int16 *)(a2 + 188);
    uint64_t v11 = a2 + 188;
    unsigned int v13 = v12 & 0xFFFFFFEF | (*(unsigned __int8 *)(v11 + 2) << 16);
    *(_WORD *)uint64_t v11 = v12 & 0xBFEF | 0x4000;
    *(_BYTE *)(v11 + 2) = BYTE2(v13);
    nw_http2_session_send(a1);
    return;
  }

  if (v10 == -529)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v14 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_13;
    }
    int v16 = *(_DWORD *)(a2 + 176);
    int v15 = *(_DWORD *)(a2 + 180);
    *(_DWORD *)int buf = 136447234;
    int v47 = "nw_http2_send_end_stream";
    __int16 v48 = 2082;
    uint64_t v49 = a2 + 191;
    __int16 v50 = 2080;
    uint32_t v51 = " ";
    __int16 v52 = 1024;
    int v53 = v15;
    __int16 v54 = 1024;
    int v55 = v16;
    uint64_t v17 = "%{public}s %{public}s%s<i%u:s%d> continuing (or starting) to defer end stream until all pending bytes are sent";
    uint64_t v18 = (os_log_s *)v14;
    uint32_t v19 = 44;
    goto LABEL_51;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v20 = nghttp2_strerror();
  *(_DWORD *)int buf = 136446466;
  int v47 = "nw_http2_send_end_stream";
  __int16 v48 = 2082;
  uint64_t v49 = v20;
  unsigned int v21 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (__nwlog_fault(v21, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v22 = (os_log_s *)gLogObj;
      os_log_type_t v23 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_41;
      }
      uint64_t v24 = nghttp2_strerror();
      *(_DWORD *)int buf = 136446466;
      int v47 = "nw_http2_send_end_stream";
      __int16 v48 = 2082;
      uint64_t v49 = v24;
      unsigned int v25 = "%{public}s nghttp2_submit_data: %{public}s failed";
      goto LABEL_40;
    }

    if (!v44)
    {
      unint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_41;
      }
      uint64_t v29 = nghttp2_strerror();
      *(_DWORD *)int buf = 136446466;
      int v47 = "nw_http2_send_end_stream";
      __int16 v48 = 2082;
      uint64_t v49 = v29;
      unsigned int v25 = "%{public}s nghttp2_submit_data: %{public}s failed, backtrace limit exceeded";
      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v27 = os_log_type_enabled(v22, type);
    if (backtrace_string)
    {
      if (v27)
      {
        uint64_t v28 = nghttp2_strerror();
        *(_DWORD *)int buf = 136446722;
        int v47 = "nw_http2_send_end_stream";
        __int16 v48 = 2082;
        uint64_t v49 = v28;
        __int16 v50 = 2082;
        uint32_t v51 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s nghttp2_submit_data: %{public}s failed, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(backtrace_string);
      goto LABEL_41;
    }

    if (v27)
    {
      uint64_t v30 = nghttp2_strerror();
      *(_DWORD *)int buf = 136446466;
      int v47 = "nw_http2_send_end_stream";
      __int16 v48 = 2082;
      uint64_t v49 = v30;
      unsigned int v25 = "%{public}s nghttp2_submit_data: %{public}s failed, no backtrace";
LABEL_40:
      _os_log_impl(&dword_181A5C000, v22, v23, v25, buf, 0x16u);
    }
  }

void nw_http2_set_stream_output_available_pending(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v7 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *(_DWORD *)(a2 + 176);
      int v8 = *(_DWORD *)(a2 + 180);
      int v10 = 136447746;
      uint64_t v11 = "nw_http2_set_stream_output_available_pending";
      __int16 v12 = 2082;
      uint64_t v13 = a2 + 191;
      __int16 v14 = 2080;
      int v15 = " ";
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 1024;
      int v23 = a3;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called for stream %d, needs output available: %{BOOL}d",  (uint8_t *)&v10,  0x38u);
    }
  }

  int v6 = *(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16);
  *(_BYTE *)(a2 + 190) = BYTE2(v6);
  if (a3)
  {
    *(_WORD *)(a2 + 18_Block_object_dispose((const void *)(v20 - 192), 8) = v6 | 0x20;
    *(_WORD *)(a1 + 388) |= 0x800u;
  }

  else
  {
    *(_WORD *)(a2 + 18_Block_object_dispose((const void *)(v20 - 192), 8) = v6 & 0xFFDF;
  }

uint64_t nw_http2_empty_frame_data_source_callback( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a5)
  {
    *a5 = 1;
    return 0LL;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v15 = "nw_http2_empty_frame_data_source_callback";
  int v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)int buf = 136446210;
      int v15 = "nw_http2_empty_frame_data_source_callback";
      int v9 = "%{public}s called with null data_flags";
      goto LABEL_17;
    }

    if (!v12)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)int buf = 136446210;
      int v15 = "nw_http2_empty_frame_data_source_callback";
      int v9 = "%{public}s called with null data_flags, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)int buf = 136446466;
        int v15 = "nw_http2_empty_frame_data_source_callback";
        __int16 v16 = 2082;
        int v17 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null data_flags, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v11)
    {
      *(_DWORD *)int buf = 136446210;
      int v15 = "nw_http2_empty_frame_data_source_callback";
      int v9 = "%{public}s called with null data_flags, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    }
  }

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_81890()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

uint64_t ___ZL25nw_http2_connection_closeP17nw_protocol_http2_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v5 = object;
    uint64_t v6 = *(void *)nw_hash_node_get_extra(a2);
    int v7 = *(_DWORD *)(v5 + 176);
    if (((*(unsigned __int16 *)(v5 + 188) | (*(unsigned __int8 *)(v5 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v24 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(v5 + 176);
        int v25 = *(_DWORD *)(v5 + 180);
        int v30 = 136447490;
        int v31 = "nw_http2_connection_close_block_invoke";
        __int16 v32 = 2082;
        int v33 = (const char *)(v5 + 191);
        __int16 v34 = 2080;
        int v35 = " ";
        __int16 v36 = 1024;
        int v37 = v25;
        __int16 v38 = 1024;
        *(_DWORD *)int v39 = v26;
        *(_WORD *)&void v39[4] = 1024;
        *(_DWORD *)&v39[6] = v26;
        _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> closing stream %d",  (uint8_t *)&v30,  0x32u);
      }
    }

    nw_http2_stream_close(*(void *)(a1 + 32), v5);
    int v8 = (*(unsigned __int8 *)(v5 + 190) >> 3) & 1;
    if (!gLogDatapath) {
      LOBYTE(v_Block_object_dispose((const void *)(v20 - 192), 8) = 1;
    }
    if (v6)
    {
      if ((v8 & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v9 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v11 = *(_DWORD *)(v5 + 176);
          int v10 = *(_DWORD *)(v5 + 180);
          int v30 = 136447746;
          int v31 = "nw_http2_connection_close_block_invoke";
          __int16 v32 = 2082;
          int v33 = (const char *)(v5 + 191);
          __int16 v34 = 2080;
          int v35 = " ";
          __int16 v36 = 1024;
          int v37 = v10;
          __int16 v38 = 1024;
          *(_DWORD *)int v39 = v11;
          *(_WORD *)&void v39[4] = 1024;
          *(_DWORD *)&v39[6] = v7;
          __int16 v40 = 2048;
          uint64_t v41 = v5;
          char v12 = "%{public}s %{public}s%s<i%u:s%d> deferring release of stream %d (%p), has associated input handler";
          uint64_t v13 = (os_log_s *)v9;
          os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
          uint32_t v15 = 60;
LABEL_22:
          _os_log_impl(&dword_181A5C000, v13, v14, v12, (uint8_t *)&v30, v15);
        }
      }
    }

    else
    {
      if ((v8 & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v27 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v29 = *(_DWORD *)(v5 + 176);
          int v28 = *(_DWORD *)(v5 + 180);
          int v30 = 136447746;
          int v31 = "nw_http2_connection_close_block_invoke";
          __int16 v32 = 2082;
          int v33 = (const char *)(v5 + 191);
          __int16 v34 = 2080;
          int v35 = " ";
          __int16 v36 = 1024;
          int v37 = v28;
          __int16 v38 = 1024;
          *(_DWORD *)int v39 = v29;
          *(_WORD *)&void v39[4] = 1024;
          *(_DWORD *)&v39[6] = v7;
          __int16 v40 = 2048;
          uint64_t v41 = v5;
          _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> destroying stream %d (%p) immediately, no associated input handler",  (uint8_t *)&v30,  0x3Cu);
        }
      }

      nw_http2_stream_destroy((void **)v5);
    }
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 32);
    if (!v16 || (*(__int16 *)(v16 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v17 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        int v19 = (const char *)(v18 + 390);
        __int16 v20 = "";
        BOOL v21 = v18 == 0;
        int v22 = *(_DWORD *)(v18 + 368);
        int v31 = "nw_http2_connection_close_block_invoke";
        if (v21) {
          int v19 = "";
        }
        __int16 v32 = 2082;
        int v30 = 136447234;
        if (!v21) {
          __int16 v20 = " ";
        }
        int v33 = v19;
        __int16 v34 = 2080;
        int v35 = v20;
        __int16 v36 = 1024;
        int v37 = v22;
        __int16 v38 = 2048;
        *(void *)int v39 = a2;
        char v12 = "%{public}s %{public}s%s<i%u> stream in node %p in id table is NULL, skipping rst stream";
        uint64_t v13 = (os_log_s *)v17;
        os_log_type_t v14 = OS_LOG_TYPE_ERROR;
        uint32_t v15 = 48;
        goto LABEL_22;
      }
    }
  }

  return 1LL;
}

void nw_http2_send_goaway(uint64_t a1)
{
  *(void *)&v61[13] = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v25 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      if (a1) {
        int v26 = " ";
      }
      else {
        int v26 = "";
      }
      if (a1) {
        BOOL v27 = (const char *)(a1 + 390);
      }
      else {
        BOOL v27 = "";
      }
      int v28 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)int buf = 136447490;
      uint32_t v51 = "nw_http2_send_goaway";
      __int16 v52 = 2082;
      uint64_t v53 = (uint64_t)v27;
      __int16 v54 = 2080;
      int v55 = v26;
      __int16 v56 = 1024;
      int v57 = v28;
      __int16 v58 = 1024;
      int v59 = 0;
      __int16 v60 = 2082;
      *(void *)int v61 = nghttp2_http2_strerror();
      _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called with error %u (%{public}s)",  buf,  0x36u);
      __int16 v2 = *(_WORD *)(a1 + 388);
      if ((v2 & 1) != 0)
      {
LABEL_53:
        if ((v2 & 0x8000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v34 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            int v35 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)int buf = 136446978;
            uint32_t v51 = "nw_http2_send_goaway";
            __int16 v52 = 2082;
            uint64_t v53 = a1 + 390;
            __int16 v54 = 2080;
            int v55 = " ";
            __int16 v56 = 1024;
            int v57 = v35;
            _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> already sent goaway, skipping",  buf,  0x26u);
          }
        }

        return;
      }

uint64_t ___ZL25nw_http2_connection_closeP17nw_protocol_http2_block_invoke_20(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t v5 = *(void *)(a1 + 32);
  if (object)
  {
    uint64_t stream_from_protocol = nw_http2_get_stream_from_protocol(v5, object);
    nw_http2_protocol_close(*(void *)(a1 + 32), stream_from_protocol, object);
  }

  else if (!v5 || (*(__int16 *)(v5 + 388) & 0x80000000) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v7 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = (const char *)(v8 + 390);
      uint64_t v10 = "";
      BOOL v11 = v8 == 0;
      int v12 = *(_DWORD *)(v8 + 368);
      uint32_t v15 = "nw_http2_connection_close_block_invoke";
      if (v11) {
        uint64_t v9 = "";
      }
      __int16 v16 = 2082;
      int v14 = 136447234;
      if (!v11) {
        uint64_t v10 = " ";
      }
      BOOL v17 = v9;
      __int16 v18 = 2080;
      uint64_t v19 = v10;
      __int16 v20 = 1024;
      int v21 = v12;
      __int16 v22 = 2048;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> input protocol in node %p in protocol table is NULL, skipping",  (uint8_t *)&v14,  0x30u);
    }
  }

  return 1LL;
}

uint64_t nw_http2_get_stream_from_protocol(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v33 = "nw_http2_get_stream_from_protocol";
    uint64_t v24 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v24, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v33 = "nw_http2_get_stream_from_protocol";
          BOOL v27 = "%{public}s called with null http2";
LABEL_68:
          _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
        }
      }

      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v33 = "nw_http2_get_stream_from_protocol";
            __int16 v34 = 2082;
            int v35 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_69;
        }

        if (v29)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v33 = "nw_http2_get_stream_from_protocol";
          BOOL v27 = "%{public}s called with null http2, no backtrace";
          goto LABEL_68;
        }
      }

      else
      {
        int v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v33 = "nw_http2_get_stream_from_protocol";
          BOOL v27 = "%{public}s called with null http2, backtrace limit exceeded";
          goto LABEL_68;
        }
      }
    }

void nw_http2_protocol_close(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v80[4] = *MEMORY[0x1895F89C0];
  if (a2)
  {
    if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      __int16 v34 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v36 = *(_DWORD *)(a2 + 176);
        int v35 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)int buf = 136447234;
        uint64_t v72 = "nw_http2_protocol_close";
        __int16 v73 = 2082;
        uint64_t v74 = (void *)(a2 + 191);
        __int16 v75 = 2080;
        __int16 v76 = " ";
        __int16 v77 = 1024;
        int v78 = v35;
        __int16 v79 = 1024;
        LODWORD(v80[0]) = v36;
        _os_log_impl(&dword_181A5C000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called", buf, 0x2Cu);
      }
    }

    goto LABEL_4;
  }

  if (a1 && *(__int16 *)(a1 + 388) < 0)
  {
LABEL_47:
    if (a3) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }

  if (gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v26 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      BOOL v27 = " ";
      int v28 = *(_DWORD *)(a1 + 368);
      uint64_t v72 = "nw_http2_protocol_close";
      __int16 v73 = 2082;
      BOOL v29 = (const char *)(a1 + 390);
      *(_DWORD *)int buf = 136446978;
      if (!a1) {
        BOOL v29 = "";
      }
      uint64_t v74 = (void *)v29;
      if (!a1) {
        BOOL v27 = "";
      }
      __int16 v75 = 2080;
      __int16 v76 = v27;
      __int16 v77 = 1024;
      int v78 = v28;
      _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      goto LABEL_47;
    }
  }

void nw_http2_stream_destroy(void **a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    int v16 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v1_Block_object_dispose((const void *)(v20 - 192), 8) = 136446210;
      *(void *)((char *)&v18 + 4) = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v18, 0xCu);
    }
  }

  uint64_t v2 = MEMORY[0x1895F87A8];
  *(void *)&__int128 v18 = MEMORY[0x1895F87A8];
  *((void *)&v18 + 1) = 0x40000000LL;
  int v19 = (uint64_t (*)(__int128 *))___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_81998;
  int v20 = &__block_descriptor_tmp_30_81999;
  int v21 = a1;
  char v22 = 0;
  uint64_t v3 = *a1;
  do
  {
    if (!v3) {
      break;
    }
    int v4 = (void *)v3[4];
    char v5 = v19(&v18);
    uint64_t v3 = v4;
  }

  while ((v5 & 1) != 0);
  if (gLogDatapath)
  {
    uint64_t v17 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v1_Block_object_dispose((const void *)(v20 - 192), 8) = 136446210;
      *(void *)((char *)&v18 + 4) = "nw_protocol_release_master_frame_array";
      _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v18, 0xCu);
    }
  }

  *(void *)&__int128 v18 = v2;
  *((void *)&v18 + 1) = 0x40000000LL;
  int v19 = (uint64_t (*)(__int128 *))___ZL38nw_protocol_release_master_frame_arrayP16nw_frame_array_s_block_invoke;
  int v20 = &__block_descriptor_tmp_31_82001;
  int v21 = a1 + 2;
  int v6 = a1[2];
  do
  {
    if (!v6) {
      break;
    }
    uint64_t v7 = (void *)v6[2];
    char v8 = v19(&v18);
    int v6 = v7;
  }

  while ((v8 & 1) != 0);
  int v9 = a1[12];
  if (v9)
  {
    os_release(v9);
    a1[12] = 0LL;
  }

  uint64_t v10 = a1[13];
  if (v10)
  {
    os_release(v10);
    a1[13] = 0LL;
  }

  int v11 = a1[14];
  if (v11)
  {
    os_release(v11);
    a1[14] = 0LL;
  }

  __int16 v12 = *((_WORD *)a1 + 94);
  *((_DWORD *)a1 + 44) = -1;
  *((_WORD *)a1 + 94) = v12 & 0xEF66;
  if (((_BYTE)a1[21] & 1) != 0)
  {
    unsigned int v13 = a1[20];
    if (v13) {
      os_release(v13);
    }
  }

  a1[20] = 0LL;
  if (((_BYTE)a1[19] & 1) != 0)
  {
    uint64_t v14 = a1[18];
    if (v14) {
      os_release(v14);
    }
  }

  a1[18] = 0LL;
  int v15 = a1[15];
  if (v15)
  {
    a1[16] = v15;
    operator delete(v15);
  }

  free(a1);
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_81998( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v3;
  }

  void *v3 = v2;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return 1LL;
}

uint64_t ___ZL38nw_protocol_release_master_frame_arrayP16nw_frame_array_s_block_invoke( uint64_t a1, void *object)
{
  uint64_t v2 = object[2];
  uint64_t v3 = (void *)object[3];
  if (v2)
  {
    *(void *)(v2 + 24) = v3;
    uint64_t v3 = (void *)object[3];
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v3;
  }

  void *v3 = v2;
  object[2] = 0LL;
  object[3] = 0LL;
  os_release(object);
  return 1LL;
}

uint64_t nw_http2_get_stream_node_from_id(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v12 = a2;
  if (a2 <= 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v10 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)int buf = 136447234;
    uint64_t v14 = "nw_http2_get_stream_node_from_id";
    __int16 v15 = 2082;
    uint64_t v16 = a1 + 390;
    __int16 v17 = 2080;
    __int128 v18 = " ";
    __int16 v19 = 1024;
    int v20 = v11;
    __int16 v21 = 1024;
    int v22 = a2;
    int v6 = "%{public}s %{public}s%s<i%u> requested stream id (%d) is not valid, returning NULL hash node";
    uint64_t v7 = (os_log_s *)v10;
    os_log_type_t v8 = OS_LOG_TYPE_ERROR;
    goto LABEL_14;
  }

  uint64_t result = *(void *)(a1 + 160);
  if (result)
  {
    uint64_t result = nw_hash_table_get_node(result, (uint64_t)&v12, 4LL);
    if (!result)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v4 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      int v5 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)int buf = 136447234;
      uint64_t v14 = "nw_http2_get_stream_node_from_id";
      __int16 v15 = 2082;
      uint64_t v16 = a1 + 390;
      __int16 v17 = 2080;
      __int128 v18 = " ";
      __int16 v19 = 1024;
      int v20 = v5;
      __int16 v21 = 1024;
      int v22 = v12;
      int v6 = "%{public}s %{public}s%s<i%u> requested stream id (%d) not found, returning NULL";
      uint64_t v7 = (os_log_s *)v4;
      os_log_type_t v8 = OS_LOG_TYPE_DEBUG;
LABEL_14:
      _os_log_impl(&dword_181A5C000, v7, v8, v6, buf, 0x2Cu);
      return 0LL;
    }
  }

  return result;
}

uint64_t ___ZL18send_data_callbackP15nghttp2_sessionP13nghttp2_framePKhmP19nghttp2_data_sourcePv_block_invoke_82067( uint64_t a1, uint64_t a2)
{
  uint64_t v263 = *MEMORY[0x1895F89C0];
  unsigned int v254 = 0;
  uint64_t v4 = (_BYTE *)nw_frame_unclaimed_bytes(a2, &v254);
  int v6 = v4;
  uint64_t v7 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v7 > 8)
  {
    LODWORD(v_Block_object_dispose((const void *)(v20 - 192), 8) = 0;
  }

  else
  {
    if (!v254)
    {
      LODWORD(v_Block_object_dispose((const void *)(v20 - 192), 8) = 0;
      goto LABEL_278;
    }

    else {
      size_t v8 = (9 - v7);
    }
    memcpy(v4, (const void *)(*(void *)(a1 + 96) + v7), v8);
    uint64_t v9 = *(void *)(a1 + 104);
    if ((!v9 || (*(__int16 *)(v9 + 388) & 0x80000000) == 0) && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      char v172 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v173 = *(void *)(a1 + 104);
        int v174 = "";
        BOOL v175 = v173 == 0;
        int v176 = *(_DWORD *)(v173 + 368);
        int v177 = (const char *)(v173 + 390);
        os_log_type_t v256 = "send_data_callback_block_invoke";
        __int16 v257 = 2082;
        if (v175) {
          int v177 = "";
        }
        *(_DWORD *)int buf = 136447234;
        if (!v175) {
          int v174 = " ";
        }
        id v258 = v177;
        __int16 v259 = 2080;
        size_t v260 = (size_t)v174;
        __int16 v261 = 1024;
        *(_DWORD *)nw_endpoint_t v262 = v176;
        *(_WORD *)&v262[4] = 1024;
        *(_DWORD *)&v262[6] = v8;
        _os_log_impl( &dword_181A5C000,  v172,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> wrote %u bytes of frame header",  buf,  0x2Cu);
      }
    }

    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v8;
    LODWORD(v7) = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  unint64_t v10 = *(void *)(*(void *)(a1 + 112) + 16LL);
  if (!v10)
  {
    else {
      LODWORD(v21) = *(_DWORD *)(a1 + 120) - *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    }
    if (!*(void *)(a1 + 128)) {
      goto LABEL_269;
    }
    uint64_t v22 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    unsigned int v23 = *(unsigned __int8 *)(a1 + 204) - (_DWORD)v22;
    else {
      size_t v24 = v23;
    }
    if (!(_DWORD)v24)
    {
LABEL_99:
      uint64_t v45 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
      unsigned int v46 = *(unsigned __int8 *)(a1 + 205) - (_DWORD)v45;
      else {
        size_t v47 = v46;
      }
      if (!(_DWORD)v47) {
        goto LABEL_150;
      }
      memcpy(&v6[v8], (const void *)(a1 + v45 + 144), v47);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v47;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v47;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) += v47;
      BOOL v16 = v21 >= v47;
      uint64_t v48 = (v21 - v47);
      LODWORD(v21) = v21 - v47;
      if (v16)
      {
LABEL_146:
        LODWORD(v_Block_object_dispose((const void *)(v20 - 192), 8) = v47 + v8;
        uint64_t v66 = *(void *)(a1 + 104);
        if ((!v66 || (*(__int16 *)(v66 + 388) & 0x80000000) == 0) && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v221 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v222 = *(void *)(a1 + 104);
            int v223 = "";
            BOOL v224 = v222 == 0;
            int v225 = *(_DWORD *)(v222 + 368);
            uint64_t v226 = (const char *)(v222 + 390);
            os_log_type_t v256 = "send_data_callback_block_invoke";
            __int16 v257 = 2082;
            if (v224) {
              uint64_t v226 = "";
            }
            *(_DWORD *)int buf = 136447234;
            if (!v224) {
              int v223 = " ";
            }
            id v258 = v226;
            __int16 v259 = 2080;
            size_t v260 = (size_t)v223;
            __int16 v261 = 1024;
            *(_DWORD *)nw_endpoint_t v262 = v225;
            *(_WORD *)&v262[4] = 1024;
            *(_DWORD *)&v262[6] = v47;
            _os_log_impl( &dword_181A5C000,  v221,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> wrote %u bytes of capsule length",  buf,  0x2Cu);
          }
        }

void http2_output_frame_metadata_reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v26 = "__nw_frame_get_metadata";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int128 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v26 = "__nw_frame_get_metadata";
      int v20 = "%{public}s called with null frame";
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int128 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v26 = "__nw_frame_get_metadata";
          __int16 v27 = 2082;
          int v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_50;
      }

      if (!v22)
      {
LABEL_50:
        if (v17) {
          free(v17);
        }
        goto LABEL_3;
      }

      *(_DWORD *)int buf = 136446210;
      os_log_type_t v26 = "__nw_frame_get_metadata";
      int v20 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      __int128 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v26 = "__nw_frame_get_metadata";
      int v20 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
    goto LABEL_50;
  }

  if ((*(_WORD *)(a1 + 204) & 4) != 0)
  {
    *(void *)(a1 + 20_Block_object_dispose((const void *)(v20 - 192), 8) = a2;
    *(void *)(a1 + 216) = a3;
    return;
  }

uint64_t ___ZL13send_callbackP15nghttp2_sessionPKhmiPv_block_invoke_82172(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  unsigned int v23 = 0;
  uint64_t v4 = (void *)nw_frame_unclaimed_bytes(a2, &v23);
  uint64_t v5 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  unsigned int v6 = *(_DWORD *)(a1 + 48) - v5;
  if (v6 >= v23) {
    size_t v7 = v23;
  }
  else {
    size_t v7 = v6;
  }
  memcpy(v4, (const void *)(*(void *)(a1 + 56) + v5), v7);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v7;
  nw_frame_claim(a2, v8, v7, 0);
  nw_frame_collapse(a2);
  nw_frame_unclaim(a2, v9, v7, 0);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void **)(a2 + 40);
  int v10 = (void *)(a2 + 32);
  if (v11)
  {
    *(void *)(v11 + 40) = v12;
    uint64_t v12 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 72) + 8LL) = v12;
  }

  void *v12 = v11;
  void *v10 = 0LL;
  *(void *)(a2 + 40) = 0LL;
  uint64_t v13 = *(void *)(a1 + 80);
  int v14 = *(uint64_t **)(v13 + 8);
  *(void *)(a2 + 40) = v14;
  *int v14 = a2;
  *(void *)(v13 + _Block_object_dispose((const void *)(v20 - 192), 8) = v10;
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  uint64_t v15 = *(void *)(a1 + 64);
  if ((!v15 || (*(__int16 *)(v15 + 388) & 0x80000000) == 0) && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    __int16 v17 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 64);
      os_log_type_t v19 = "";
      BOOL v20 = v18 == 0;
      int v21 = *(_DWORD *)(v18 + 368);
      BOOL v22 = (const char *)(v18 + 390);
      int v25 = "send_callback_block_invoke";
      __int16 v26 = 2082;
      if (v20) {
        BOOL v22 = "";
      }
      *(_DWORD *)int buf = 136447234;
      if (!v20) {
        os_log_type_t v19 = " ";
      }
      __int16 v27 = v22;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 1024;
      int v31 = v21;
      __int16 v32 = 1024;
      int v33 = v7;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> copied %u bytes into output frame",  buf,  0x2Cu);
    }
  }

  return 1LL;
}

uint64_t http2_create_input_frame(uint64_t a1, uint64_t a2, size_t __size)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v28 = "http2_create_input_frame";
    int v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v28 = "http2_create_input_frame";
      uint64_t v13 = "%{public}s called with null http2";
LABEL_55:
      _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
      goto LABEL_56;
    }

    if (!v25)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "http2_create_input_frame";
        uint64_t v13 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "http2_create_input_frame";
        uint64_t v13 = "%{public}s called with null http2, no backtrace";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    if (!v21) {
      goto LABEL_42;
    }
    *(_DWORD *)int buf = 136446466;
    __int16 v28 = "http2_create_input_frame";
    __int16 v29 = 2082;
    __int16 v30 = backtrace_string;
    BOOL v22 = "%{public}s called with null http2, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_181A5C000, v11, v12, v22, buf, 0x16u);
    goto LABEL_42;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v28 = "http2_create_input_frame";
    int v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v28 = "http2_create_input_frame";
      uint64_t v13 = "%{public}s called with null stream";
      goto LABEL_55;
    }

    if (!v25)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "http2_create_input_frame";
        uint64_t v13 = "%{public}s called with null stream, backtrace limit exceeded";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v23 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "http2_create_input_frame";
        uint64_t v13 = "%{public}s called with null stream, no backtrace";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    if (!v23) {
      goto LABEL_42;
    }
    *(_DWORD *)int buf = 136446466;
    __int16 v28 = "http2_create_input_frame";
    __int16 v29 = 2082;
    __int16 v30 = backtrace_string;
    BOOL v22 = "%{public}s called with null stream, dumping backtrace:%{public}s";
    goto LABEL_41;
  }

  if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v14 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(_DWORD *)(a2 + 176);
      int v15 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)int buf = 136447490;
      __int16 v28 = "http2_create_input_frame";
      __int16 v29 = 2082;
      __int16 v30 = (char *)(a2 + 191);
      __int16 v31 = 2080;
      __int16 v32 = " ";
      __int16 v33 = 1024;
      int v34 = v15;
      __int16 v35 = 1024;
      int v36 = v16;
      __int16 v37 = 1024;
      LODWORD(v3_Block_object_dispose((const void *)(v20 - 192), 8) = __size;
      _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> requested input frame of length %u",  buf,  0x32u);
    }
  }

  uint64_t frame = nw_frame_cache_create_frame((uint64_t *)(a1 + 200), __size);
  if (frame)
  {
    uint64_t v7 = frame;
    *(void *)(frame + 16) = 0LL;
    uint64_t v8 = *(uint64_t **)(a1 + 176);
    *(void *)(frame + 24) = v8;
    uint64_t *v8 = frame;
    *(void *)(a1 + 176) = frame + 16;
    *(void *)(frame + 80) = nw_protocol_http2_frame_input_finalizer;
    *(void *)(frame + 8_Block_object_dispose((const void *)(v20 - 192), 8) = 0LL;
    http2_input_frame_metadata_reset(frame, a1, a2, __size);
    if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      __int16 v17 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v19 = *(_DWORD *)(a2 + 176);
        int v18 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)int buf = 136447746;
        __int16 v28 = "http2_create_input_frame";
        __int16 v29 = 2082;
        __int16 v30 = (char *)(a2 + 191);
        __int16 v31 = 2080;
        __int16 v32 = " ";
        __int16 v33 = 1024;
        int v34 = v18;
        __int16 v35 = 1024;
        int v36 = v19;
        __int16 v37 = 2048;
        uint64_t v38 = v7;
        __int16 v39 = 1024;
        int v40 = __size;
        _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> input_frame_create returning frame %p for requested length %u",  buf,  0x3Cu);
      }
    }

    return v7;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v28 = "http2_create_input_frame";
  int v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v25)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "http2_create_input_frame";
        uint64_t v13 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "http2_create_input_frame";
        uint64_t v13 = "%{public}s called with null frame, no backtrace";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    if (v24)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v28 = "http2_create_input_frame";
      __int16 v29 = 2082;
      __int16 v30 = backtrace_string;
      BOOL v22 = "%{public}s called with null frame, dumping backtrace:%{public}s";
      goto LABEL_41;
    }

void nw_protocol_http2_frame_input_finalizer(nw_frame *a1, int a2, void *a3)
{
  uint64_t v103 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    os_log_type_t v73 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446210;
      int v93 = "nw_protocol_http2_frame_input_finalizer";
      _os_log_impl(&dword_181A5C000, v73, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }

  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v93 = "nw_protocol_http2_frame_input_finalizer";
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v90)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v75 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v75)
          {
            *(_DWORD *)int buf = 136446466;
            int v93 = "nw_protocol_http2_frame_input_finalizer";
            __int16 v94 = 2082;
            BOOL v95 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
        }

        else if (v75)
        {
          *(_DWORD *)int buf = 136446210;
          int v93 = "nw_protocol_http2_frame_input_finalizer";
          uint64_t v9 = "%{public}s called with null frame, no backtrace";
          goto LABEL_41;
        }
      }

      else
      {
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v93 = "nw_protocol_http2_frame_input_finalizer";
          uint64_t v9 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_41;
        }
      }

      goto LABEL_42;
    }

    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)int buf = 136446210;
    int v93 = "nw_protocol_http2_frame_input_finalizer";
    uint64_t v9 = "%{public}s called with null frame";
LABEL_41:
    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_42;
  }

  if (a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    int v93 = "nw_protocol_http2_frame_input_finalizer";
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      int v93 = "nw_protocol_http2_frame_input_finalizer";
      uint64_t v9 = "%{public}s http2 input frame has nonnull context";
      goto LABEL_41;
    }

    if (!v90)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      int v93 = "nw_protocol_http2_frame_input_finalizer";
      uint64_t v9 = "%{public}s http2 input frame has nonnull context, backtrace limit exceeded";
      goto LABEL_41;
    }

    int v15 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (os_log_s *)gLogObj;
    os_log_type_t v8 = type;
    BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v15)
    {
      if (!v16) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      int v93 = "nw_protocol_http2_frame_input_finalizer";
      uint64_t v9 = "%{public}s http2 input frame has nonnull context, no backtrace";
      goto LABEL_41;
    }

    if (v16)
    {
      *(_DWORD *)int buf = 136446466;
      int v93 = "nw_protocol_http2_frame_input_finalizer";
      __int16 v94 = 2082;
      BOOL v95 = v15;
      __int16 v17 = "%{public}s http2 input frame has nonnull context, dumping backtrace:%{public}s";
LABEL_19:
      _os_log_impl(&dword_181A5C000, v7, v8, v17, buf, 0x16u);
      goto LABEL_20;
    }

    goto LABEL_20;
  }

  __int16 v10 = *((_WORD *)a1 + 102);
  if ((v10 & 4) != 0) {
    uint64_t v11 = (char *)a1 + 208;
  }
  else {
    uint64_t v11 = 0LL;
  }
  if ((v10 & 4) != 0)
  {
    uint64_t v12 = *(void *)v11;
    if (*(void *)v11)
    {
      uint64_t v13 = *((void *)a1 + 2);
      int v14 = (void *)*((void *)a1 + 3);
      if (v13)
      {
        *(void *)(v13 + 24) = v14;
        int v14 = (void *)*((void *)a1 + 3);
      }

      else
      {
        *(void *)(v12 + 176) = v14;
      }

      *int v14 = v13;
      *((void *)a1 + 2) = 0LL;
      *((void *)a1 + 3) = 0LL;
      if ((*(__int16 *)(v12 + 388) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v76 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v77 = *(_DWORD *)(v12 + 368);
          *(_DWORD *)int buf = 136447234;
          int v93 = "nw_protocol_http2_frame_input_finalizer";
          __int16 v94 = 2082;
          BOOL v95 = (const char *)(v12 + 390);
          __int16 v96 = 2080;
          uint64_t v97 = " ";
          __int16 v98 = 1024;
          *(_DWORD *)BOOL v99 = v77;
          *(_WORD *)&v99[4] = 2048;
          *(void *)&v99[6] = a1;
          _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> finalizing input frame %p",  buf,  0x30u);
        }
      }

      uint64_t v18 = *((void *)v11 + 1);
      if (v18)
      {
        int v19 = *(unsigned __int16 *)(v18 + 188);
        int v20 = v19 | (*(unsigned __int8 *)(v18 + 190) << 16);
        if ((v19 & 1) == 0 || *(_DWORD *)(v18 + 176) == -1)
        {
          if ((v20 & 0x80000) != 0 || !gLogDatapath) {
            goto LABEL_113;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v24 = gconnectionLogObj;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_113;
          }
          int v26 = *(_DWORD *)(v18 + 176);
          int v25 = *(_DWORD *)(v18 + 180);
          *(_DWORD *)int buf = 136447490;
          int v93 = "nw_protocol_http2_frame_input_finalizer";
          __int16 v94 = 2082;
          BOOL v95 = (const char *)(v18 + 191);
          __int16 v96 = 2080;
          uint64_t v97 = " ";
          __int16 v98 = 1024;
          *(_DWORD *)BOOL v99 = v25;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v26;
          *(_WORD *)&v99[10] = 1024;
          *(_DWORD *)&v99[12] = v26;
          __int16 v27 = "%{public}s %{public}s%s<i%u:s%d> skipping stream flow control update on closed stream %d";
          __int16 v28 = (os_log_s *)v24;
          uint32_t v29 = 50;
          goto LABEL_176;
        }

        BOOL v21 = (char *)*((unsigned int *)v11 + 4);
        int v22 = *((_DWORD *)a1 + 13);
        if (v22)
        {
          int v23 = v22 - (*((_DWORD *)a1 + 14) + *((_DWORD *)a1 + 15));
          if ((_DWORD)v21 == v23) {
            goto LABEL_50;
          }
        }

        else
        {
          int v23 = 0;
          if (!(_DWORD)v21) {
            goto LABEL_50;
          }
        }

        if ((v20 & 0x80000) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v30 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            int v32 = *(_DWORD *)(v18 + 176);
            int v31 = *(_DWORD *)(v18 + 180);
            *(_DWORD *)int buf = 136448002;
            int v93 = "nw_protocol_http2_frame_input_finalizer";
            __int16 v94 = 2082;
            BOOL v95 = (const char *)(v18 + 191);
            __int16 v96 = 2080;
            uint64_t v97 = " ";
            __int16 v98 = 1024;
            *(_DWORD *)BOOL v99 = v31;
            *(_WORD *)&v99[4] = 1024;
            *(_DWORD *)&v99[6] = v32;
            *(_WORD *)&v99[10] = 2048;
            *(void *)&v99[12] = a1;
            *(_WORD *)&v99[20] = 1024;
            int v100 = (int)v21;
            __int16 v101 = 1024;
            int v102 = v23;
            _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> http2 input frame %p original length (%u) does not match unclaimed length (%u) when finalized",  buf,  0x42u);
          }
        }

void http2_input_frame_metadata_reset(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v55[2] = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v47 = "http2_input_frame_metadata_reset";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v47 = "http2_input_frame_metadata_reset";
      uint64_t v13 = "%{public}s called with null frame";
    }

    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v33 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v47 = "http2_input_frame_metadata_reset";
          __int16 v48 = 2082;
          uint64_t v49 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_31;
      }

      if (!v33) {
        goto LABEL_31;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v47 = "http2_input_frame_metadata_reset";
      uint64_t v13 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      uint32_t v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v47 = "http2_input_frame_metadata_reset";
      uint64_t v13 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    int v26 = v29;
    os_log_type_t v27 = v30;
    uint32_t v28 = 12;
    goto LABEL_30;
  }

  if ((*(_WORD *)(a1 + 204) & 4) != 0)
  {
    *(void *)(a1 + 20_Block_object_dispose((const void *)(v20 - 192), 8) = a2;
    *(void *)(a1 + 216) = a3;
    *(_DWORD *)(a1 + 224) = a4;
    return;
  }

  if (a3)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v7 = *(_DWORD *)(a3 + 176);
    int v6 = *(_DWORD *)(a3 + 180);
    *(_DWORD *)int buf = 136447234;
    uint64_t v47 = "http2_input_frame_metadata_reset";
    __int16 v48 = 2082;
    uint64_t v49 = (void *)(a3 + 191);
    __int16 v50 = 2080;
    uint64_t v51 = " ";
    __int16 v52 = 1024;
    int v53 = v6;
    __int16 v54 = 1024;
    LODWORD(v55[0]) = v7;
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v9 = gconnectionLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        int v12 = *(_DWORD *)(a3 + 176);
        int v11 = *(_DWORD *)(a3 + 180);
        *(_DWORD *)int buf = 136447234;
        uint64_t v47 = "http2_input_frame_metadata_reset";
        __int16 v48 = 2082;
        uint64_t v49 = (void *)(a3 + 191);
        __int16 v50 = 2080;
        uint64_t v51 = " ";
        __int16 v52 = 1024;
        int v53 = v11;
        __int16 v54 = 1024;
        LODWORD(v55[0]) = v12;
        uint64_t v13 = "%{public}s %{public}s%s<i%u:s%d> frame has no metadata";
LABEL_29:
        int v26 = (os_log_s *)v9;
        os_log_type_t v27 = v10;
        uint32_t v28 = 44;
LABEL_30:
        _os_log_impl(&dword_181A5C000, v26, v27, v13, buf, v28);
        goto LABEL_31;
      }

      goto LABEL_31;
    }

    if (!v44)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v9 = gconnectionLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        int v23 = *(_DWORD *)(a3 + 176);
        int v22 = *(_DWORD *)(a3 + 180);
        *(_DWORD *)int buf = 136447234;
        uint64_t v47 = "http2_input_frame_metadata_reset";
        __int16 v48 = 2082;
        uint64_t v49 = (void *)(a3 + 191);
        __int16 v50 = 2080;
        uint64_t v51 = " ";
        __int16 v52 = 1024;
        int v53 = v22;
        __int16 v54 = 1024;
        LODWORD(v55[0]) = v23;
        uint64_t v13 = "%{public}s %{public}s%s<i%u:s%d> frame has no metadata, backtrace limit exceeded";
        goto LABEL_29;
      }

uint64_t ___ZL22on_frame_recv_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke( uint64_t result, char *__s1)
{
  uint64_t v2 = result;
  if (__s1)
  {
    uint64_t result = strcmp(__s1, "?1");
    int v3 = ((_DWORD)result == 0) << 17;
  }

  else
  {
    int v3 = 0;
  }

  uint64_t v4 = *(void *)(v2 + 32);
  int v5 = *(unsigned __int16 *)(v4 + 188);
  v4 += 188LL;
  unsigned int v6 = (v5 | (*(unsigned __int8 *)(v4 + 2) << 16)) & 0xFFFDFFFF | v3;
  *(_WORD *)uint64_t v4 = v6;
  *(_BYTE *)(v4 + 2) = BYTE2(v6);
  return result;
}

uint64_t ___ZL22on_frame_recv_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_2( uint64_t result, char *__s1)
{
  uint64_t v2 = result;
  if (__s1)
  {
    uint64_t result = strcmp(__s1, "connect-udp");
    if ((_DWORD)result)
    {
      uint64_t result = strcmp(__s1, "connect-ip");
      int v4 = ((_DWORD)result == 0) << 18;
    }

    else
    {
      int v4 = 0x40000;
    }
  }

  else
  {
    int v4 = 0;
  }

  uint64_t v5 = *(void *)(v2 + 32);
  int v6 = *(unsigned __int16 *)(v5 + 188);
  v5 += 188LL;
  unsigned int v7 = (v6 | (*(unsigned __int8 *)(v5 + 2) << 16)) & 0xFFFBFFFF | v4;
  *(_WORD *)uint64_t v5 = v7;
  *(_BYTE *)(v5 + 2) = BYTE2(v7);
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,nw::retained_ptr<void({block_pointer})(BOOL,unsigned long long)>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,nw::retained_ptr<void({block_pointer})(BOOL,unsigned long long)>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,nw::retained_ptr<void({block_pointer})(BOOL,unsigned long long)>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,nw::retained_ptr<void({block_pointer})(BOOL,unsigned long long)>>>>>::remove( uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  int v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    unsigned int v7 = v6;
    int v6 = (void *)*v6;
  }

  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }

  void *v7 = v10;
  *a3 = 0LL;
  --a2[3];
  *(void *)uint64_t result = a3;
  *(void *)(result + _Block_object_dispose((const void *)(v20 - 192), 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void nw_http2_connection_receive_goaway(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v6 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)int buf = 136447234;
      unint64_t v11 = "nw_http2_connection_receive_goaway";
      __int16 v12 = 2082;
      uint64_t v13 = a1 + 390;
      __int16 v14 = 2080;
      BOOL v15 = " ";
      __int16 v16 = 1024;
      int v17 = v7;
      __int16 v18 = 1024;
      int v19 = v2;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> received complete GOAWAY frame, last_stream_id %d",  buf,  0x2Cu);
    }
  }

  *(_WORD *)(a1 + 388) |= 2u;
  unint64_t v4 = *(char **)(a1 + 160);
  if (v4)
  {
    v8[0] = MEMORY[0x1895F87A8];
    v8[1] = 0x40000000LL;
    v8[2] = ___ZL34nw_http2_connection_receive_goawayP17nw_protocol_http2i_block_invoke;
    v8[3] = &__block_descriptor_tmp_54_82407;
    void v8[4] = a1;
    int v9 = v2;
    nw_hash_table_apply(v4, (uint64_t)v8);
  }

  uint64_t v5 = *(void *)(a1 + 88);
  if (v5)
  {
    if (*(void *)v5)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)v5, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    }

    else
    {
      *(_OWORD *)(v5 + 32) = xmmword_18272D790;
      if (*(_BYTE *)(v5 + 48))
      {
        if (*(_BYTE *)(v5 + 49)) {
          nw_queue_source_run_timer(v5, a2);
        }
      }
    }
  }

uint64_t ___ZL34nw_http2_connection_receive_goawayP17nw_protocol_http2i_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v5 = object;
    if (*(_DWORD *)(object + 176) <= *(_DWORD *)(a1 + 40))
    {
      if (((*(unsigned __int16 *)(object + 188) | (*(unsigned __int8 *)(object + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v23 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          int v25 = *(_DWORD *)(v5 + 176);
          int v24 = *(_DWORD *)(v5 + 180);
          int v26 = *(_DWORD *)(a1 + 40);
          int v34 = 136448002;
          int v35 = "nw_http2_connection_receive_goaway_block_invoke";
          __int16 v36 = 2082;
          os_log_type_t v37 = (const char *)(v5 + 191);
          __int16 v38 = 2080;
          uint64_t v39 = " ";
          __int16 v40 = 1024;
          int v41 = v24;
          __int16 v42 = 1024;
          *(_DWORD *)int v43 = v25;
          *(_WORD *)&void v43[4] = 2048;
          *(void *)&v43[6] = a2;
          *(_WORD *)&v43[14] = 1024;
          *(_DWORD *)&v43[16] = v25;
          __int16 v44 = 1024;
          int v45 = v26;
          __int16 v12 = "%{public}s %{public}s%s<i%u:s%d> stream in node %p in id table will remain active because its stream id "
                "(%d) is less than %d, skipping";
          uint64_t v13 = (os_log_s *)v23;
          os_log_type_t v14 = OS_LOG_TYPE_ERROR;
          uint32_t v15 = 66;
          goto LABEL_28;
        }
      }
    }

    else
    {
      uint64_t v6 = *(void *)nw_hash_node_get_extra(a2);
      int v7 = *(_DWORD *)(v5 + 176);
      if (((*(unsigned __int16 *)(v5 + 188) | (*(unsigned __int8 *)(v5 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint32_t v28 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v30 = *(_DWORD *)(v5 + 176);
          int v29 = *(_DWORD *)(v5 + 180);
          int v34 = 136447490;
          int v35 = "nw_http2_connection_receive_goaway_block_invoke";
          __int16 v36 = 2082;
          os_log_type_t v37 = (const char *)(v5 + 191);
          __int16 v38 = 2080;
          uint64_t v39 = " ";
          __int16 v40 = 1024;
          int v41 = v29;
          __int16 v42 = 1024;
          *(_DWORD *)int v43 = v30;
          *(_WORD *)&void v43[4] = 1024;
          *(_DWORD *)&v43[6] = v30;
          _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> closing stream %d",  (uint8_t *)&v34,  0x32u);
        }
      }

      nw_http2_stream_close(*(void *)(a1 + 32), v5);
      int v8 = (*(unsigned __int8 *)(v5 + 190) >> 3) & 1;
      if (!gLogDatapath) {
        LOBYTE(v_Block_object_dispose((const void *)(v20 - 192), 8) = 1;
      }
      if (v6)
      {
        if ((v8 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v9 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            int v11 = *(_DWORD *)(v5 + 176);
            int v10 = *(_DWORD *)(v5 + 180);
            int v34 = 136447746;
            int v35 = "nw_http2_connection_receive_goaway_block_invoke";
            __int16 v36 = 2082;
            os_log_type_t v37 = (const char *)(v5 + 191);
            __int16 v38 = 2080;
            uint64_t v39 = " ";
            __int16 v40 = 1024;
            int v41 = v10;
            __int16 v42 = 1024;
            *(_DWORD *)int v43 = v11;
            *(_WORD *)&void v43[4] = 1024;
            *(_DWORD *)&v43[6] = v7;
            *(_WORD *)&_BYTE v43[10] = 2048;
            *(void *)&v43[12] = v5;
            __int16 v12 = "%{public}s %{public}s%s<i%u:s%d> deferring release of stream %d (%p), has associated input handler";
            uint64_t v13 = (os_log_s *)v9;
            os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
            uint32_t v15 = 60;
LABEL_28:
            _os_log_impl(&dword_181A5C000, v13, v14, v12, (uint8_t *)&v34, v15);
          }
        }
      }

      else
      {
        if ((v8 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v31 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            int v33 = *(_DWORD *)(v5 + 176);
            int v32 = *(_DWORD *)(v5 + 180);
            int v34 = 136447746;
            int v35 = "nw_http2_connection_receive_goaway_block_invoke";
            __int16 v36 = 2082;
            os_log_type_t v37 = (const char *)(v5 + 191);
            __int16 v38 = 2080;
            uint64_t v39 = " ";
            __int16 v40 = 1024;
            int v41 = v32;
            __int16 v42 = 1024;
            *(_DWORD *)int v43 = v33;
            *(_WORD *)&void v43[4] = 1024;
            *(_DWORD *)&v43[6] = v7;
            *(_WORD *)&_BYTE v43[10] = 2048;
            *(void *)&v43[12] = v5;
            _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> destroying stream %d (%p) immediately, no associated input handler",  (uint8_t *)&v34,  0x3Cu);
          }
        }

        nw_http2_stream_destroy((void **)v5);
      }
    }
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 32);
    if (!v16 || (*(__int16 *)(v16 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v17 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        int v19 = (const char *)(v18 + 390);
        uint64_t v20 = "";
        BOOL v21 = v18 == 0;
        int v22 = *(_DWORD *)(v18 + 368);
        int v35 = "nw_http2_connection_receive_goaway_block_invoke";
        if (v21) {
          int v19 = "";
        }
        __int16 v36 = 2082;
        int v34 = 136447234;
        if (!v21) {
          uint64_t v20 = " ";
        }
        os_log_type_t v37 = v19;
        __int16 v38 = 2080;
        uint64_t v39 = v20;
        __int16 v40 = 1024;
        int v41 = v22;
        __int16 v42 = 2048;
        *(void *)int v43 = a2;
        __int16 v12 = "%{public}s %{public}s%s<i%u> stream in node %p in id table is NULL, skipping";
        uint64_t v13 = (os_log_s *)v17;
        os_log_type_t v14 = OS_LOG_TYPE_ERROR;
        uint32_t v15 = 48;
        goto LABEL_28;
      }
    }
  }

  return 1LL;
}

void std::destroy_at[abi:nn180100]<http2_stream,0>(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 168) & 1) != 0)
  {
    int v2 = *(void **)(a1 + 160);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 160) = 0LL;
  if ((*(_BYTE *)(a1 + 152) & 1) != 0)
  {
    int8x8_t v3 = *(void **)(a1 + 144);
    if (v3) {
      os_release(v3);
    }
  }

  *(void *)(a1 + 144) = 0LL;
  unint64_t v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(void *)(a1 + 12_Block_object_dispose((const void *)(v20 - 192), 8) = v4;
    operator delete(v4);
  }

void nw_http2_stream_init(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + _Block_object_dispose((const void *)(v20 - 192), 8) = a1;
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 24) = a1 + 16;
    *(void *)(a1 + 104) = 0LL;
    *(void *)(a1 + 112) = 0LL;
    int v2 = *(_WORD *)(a1 + 188) & 0xEFFF | (*(unsigned __int8 *)(a1 + 190) << 16);
    *(_WORD *)(a1 + 188) &= ~0x1000u;
    *(_BYTE *)(a1 + 190) = BYTE2(v2);
    uint64_t v3 = _nw_http_parsed_fields_create();
    char v4 = *(_BYTE *)(a1 + 152);
    if ((v4 & 1) != 0)
    {
      uint64_t v5 = *(void **)(a1 + 144);
      if (v5)
      {
        os_release(v5);
        char v4 = *(_BYTE *)(a1 + 152);
      }
    }

    *(void *)(a1 + 144) = v3;
    *(_BYTE *)(a1 + 152) = v4 | 1;
    BOOL v6 = nw_array_create();
    char v7 = *(_BYTE *)(a1 + 168);
    if ((v7 & 1) != 0)
    {
      int v8 = *(void **)(a1 + 160);
      if (v8)
      {
        os_release(v8);
        char v7 = *(_BYTE *)(a1 + 168);
      }
    }

    __int16 v10 = *(_WORD *)(a1 + 188);
    uint64_t v9 = (_WORD *)(a1 + 188);
    *(void *)(v9 - 14) = v6;
    *((_BYTE *)v9 - 20) = v7 | 1;
    *((_DWORD *)v9 - 3) = -1;
    *((_DWORD *)v9 - 1) = 0x200000;
    _WORD *v9 = v10 & 0xFE62 | 4;
    return;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v20 = "nw_http2_stream_init";
  int v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v20 = "nw_http2_stream_init";
      os_log_type_t v14 = "%{public}s called with null stream";
      goto LABEL_23;
    }

    if (!v17)
    {
      __int16 v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v20 = "nw_http2_stream_init";
      os_log_type_t v14 = "%{public}s called with null stream, backtrace limit exceeded";
      goto LABEL_23;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v12 = (os_log_s *)__nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v16 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v20 = "nw_http2_stream_init";
        __int16 v21 = 2082;
        int v22 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_24;
    }

    if (v16)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v20 = "nw_http2_stream_init";
      os_log_type_t v14 = "%{public}s called with null stream, no backtrace";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
    }
  }

uint64_t nw_http2_add_to_id_table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v49 = "nw_http2_add_to_id_table";
    int v22 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = v47;
      if (!os_log_type_enabled(v23, v47)) {
        goto LABEL_54;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v49 = "nw_http2_add_to_id_table";
      int v25 = "%{public}s called with null stream";
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = v47;
      BOOL v41 = os_log_type_enabled(v23, v47);
      if (backtrace_string)
      {
        if (!v41) {
          goto LABEL_39;
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v49 = "nw_http2_add_to_id_table";
        __int16 v50 = 2082;
        uint64_t v51 = backtrace_string;
        uint32_t v28 = "%{public}s called with null stream, dumping backtrace:%{public}s";
        goto LABEL_38;
      }

      if (!v41)
      {
LABEL_54:
        if (v22)
        {
          int v33 = (char *)v22;
          goto LABEL_56;
        }

        return 0LL;
      }

      *(_DWORD *)int buf = 136446210;
      uint64_t v49 = "nw_http2_add_to_id_table";
      int v25 = "%{public}s called with null stream, no backtrace";
    }

    else
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = v47;
      if (!os_log_type_enabled(v23, v47)) {
        goto LABEL_54;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v49 = "nw_http2_add_to_id_table";
      int v25 = "%{public}s called with null stream, backtrace limit exceeded";
    }

uint64_t stream_get_key(uint64_t a1, _DWORD *a2)
{
  *a2 = 4;
  return a1 + 176;
}

BOOL stream_matches_key(uint64_t a1, _DWORD *a2)
{
  return *(_DWORD *)(a1 + 176) == *a2;
}

void nw_protocol_http2_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v29 = "nw_protocol_http2_error";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      int v29 = "nw_protocol_http2_error";
      char v17 = "%{public}s called with null protocol";
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          int v29 = "nw_protocol_http2_error";
          __int16 v30 = 2082;
          int v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_61:
        if (!v14) {
          return;
        }
        goto LABEL_62;
      }

      if (!v19) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      int v29 = "nw_protocol_http2_error";
      char v17 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      int v29 = "nw_protocol_http2_error";
      char v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_60;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v29 = "nw_protocol_http2_error";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        int v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_61;
        }
        *(_DWORD *)int buf = 136446210;
        int v29 = "nw_protocol_http2_error";
        char v17 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_60;
      }

      int v20 = (char *)__nw_create_backtrace_string();
      int v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_61;
        }
        *(_DWORD *)int buf = 136446210;
        int v29 = "nw_protocol_http2_error";
        char v17 = "%{public}s called with null http2, no backtrace";
        goto LABEL_60;
      }

      if (v21)
      {
        *(_DWORD *)int buf = 136446466;
        int v29 = "nw_protocol_http2_error";
        __int16 v30 = 2082;
        int v31 = v20;
        int v22 = "%{public}s called with null http2, dumping backtrace:%{public}s";
LABEL_45:
        _os_log_impl(&dword_181A5C000, v15, v16, v22, buf, 0x16u);
      }

uint64_t ___ZL23nw_protocol_http2_errorP11nw_protocolS0_i_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v99 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t v5 = *(void *)nw_hash_node_get_extra(a2);
  if (!object)
  {
    if (v5)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v8 = *(_DWORD *)(v5 + 176);
      int v7 = *(_DWORD *)(v5 + 180);
      *(_DWORD *)int buf = 136447490;
      char v90 = "nw_protocol_http2_error_block_invoke";
      __int16 v91 = 2082;
      int v92 = (const char *)(v5 + 191);
      __int16 v93 = 2080;
      __int16 v94 = " ";
      __int16 v95 = 1024;
      int v96 = v7;
      __int16 v97 = 1024;
      *(_DWORD *)__int16 v98 = v8;
      *(_WORD *)&v98[4] = 2048;
      *(void *)&v98[6] = a2;
      uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v87 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v10 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_32;
        }
        int v13 = *(_DWORD *)(v5 + 176);
        int v12 = *(_DWORD *)(v5 + 180);
        *(_DWORD *)int buf = 136447490;
        char v90 = "nw_protocol_http2_error_block_invoke";
        __int16 v91 = 2082;
        int v92 = (const char *)(v5 + 191);
        __int16 v93 = 2080;
        __int16 v94 = " ";
        __int16 v95 = 1024;
        int v96 = v12;
        __int16 v97 = 1024;
        *(_DWORD *)__int16 v98 = v13;
        *(_WORD *)&v98[4] = 2048;
        *(void *)&v98[6] = a2;
        os_log_type_t v14 = "%{public}s %{public}s%s<i%u:s%d> node %p did not contain protocol";
      }

      else if (v87)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v10 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v11 = type;
        BOOL v16 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (backtrace_string)
        {
          if (v16)
          {
            int v18 = *(_DWORD *)(v5 + 176);
            int v17 = *(_DWORD *)(v5 + 180);
            *(_DWORD *)int buf = 136447746;
            char v90 = "nw_protocol_http2_error_block_invoke";
            __int16 v91 = 2082;
            int v92 = (const char *)(v5 + 191);
            __int16 v93 = 2080;
            __int16 v94 = " ";
            __int16 v95 = 1024;
            int v96 = v17;
            __int16 v97 = 1024;
            *(_DWORD *)__int16 v98 = v18;
            *(_WORD *)&v98[4] = 2048;
            *(void *)&v98[6] = a2;
            *(_WORD *)&v98[14] = 2082;
            *(void *)&v98[16] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s %{public}s%s<i%u:s%d> node %p did not contain protocol, dumping backtrace:%{public}s",  buf,  0x40u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (!v16)
        {
LABEL_32:
          if (!v9) {
            return 1LL;
          }
          BOOL v23 = (char *)v9;
LABEL_34:
          free(v23);
          return 1LL;
        }

        int v22 = *(_DWORD *)(v5 + 176);
        int v21 = *(_DWORD *)(v5 + 180);
        *(_DWORD *)int buf = 136447490;
        char v90 = "nw_protocol_http2_error_block_invoke";
        __int16 v91 = 2082;
        int v92 = (const char *)(v5 + 191);
        __int16 v93 = 2080;
        __int16 v94 = " ";
        __int16 v95 = 1024;
        int v96 = v21;
        __int16 v97 = 1024;
        *(_DWORD *)__int16 v98 = v22;
        *(_WORD *)&v98[4] = 2048;
        *(void *)&v98[6] = a2;
        os_log_type_t v14 = "%{public}s %{public}s%s<i%u:s%d> node %p did not contain protocol, no backtrace";
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v10 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_32;
        }
        int v20 = *(_DWORD *)(v5 + 176);
        int v19 = *(_DWORD *)(v5 + 180);
        *(_DWORD *)int buf = 136447490;
        char v90 = "nw_protocol_http2_error_block_invoke";
        __int16 v91 = 2082;
        int v92 = (const char *)(v5 + 191);
        __int16 v93 = 2080;
        __int16 v94 = " ";
        __int16 v95 = 1024;
        int v96 = v19;
        __int16 v97 = 1024;
        *(_DWORD *)__int16 v98 = v20;
        *(_WORD *)&v98[4] = 2048;
        *(void *)&v98[6] = a2;
        os_log_type_t v14 = "%{public}s %{public}s%s<i%u:s%d> node %p did not contain protocol, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v10, v11, v14, buf, 0x36u);
      goto LABEL_32;
    }

    uint64_t v47 = *(void *)(a1 + 32);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v48 = *(void *)(a1 + 32);
    uint64_t v49 = (const char *)(v48 + 390);
    BOOL v50 = v48 == 0;
    int v51 = *(_DWORD *)(v48 + 368);
    if (v50) {
      uint64_t v49 = "";
    }
    *(_DWORD *)int buf = 136447234;
    char v90 = "nw_protocol_http2_error_block_invoke";
    if (v50) {
      __int16 v52 = "";
    }
    else {
      __int16 v52 = " ";
    }
    __int16 v91 = 2082;
    int v92 = v49;
    __int16 v93 = 2080;
    __int16 v94 = v52;
    __int16 v95 = 1024;
    int v96 = v51;
    __int16 v97 = 2048;
    *(void *)__int16 v98 = a2;
    int v53 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v87 = 0;
    if (__nwlog_fault(v53, &type, &v87))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v54 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v55 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_109;
        }
        uint64_t v56 = *(void *)(a1 + 32);
        int v57 = (const char *)(v56 + 390);
        BOOL v58 = v56 == 0;
        if (!v56) {
          int v57 = "";
        }
        int v59 = *(_DWORD *)(v56 + 368);
        if (v58) {
          __int16 v60 = "";
        }
        else {
          __int16 v60 = " ";
        }
        *(_DWORD *)int buf = 136447234;
        char v90 = "nw_protocol_http2_error_block_invoke";
        __int16 v91 = 2082;
        int v92 = v57;
        __int16 v93 = 2080;
        __int16 v94 = v60;
        __int16 v95 = 1024;
        int v96 = v59;
        __int16 v97 = 2048;
        *(void *)__int16 v98 = a2;
        uint64_t v61 = "%{public}s %{public}s%s<i%u> node %p did not contain protocol";
        goto LABEL_108;
      }

      if (!v87)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v54 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v55 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_109;
        }
        uint64_t v69 = *(void *)(a1 + 32);
        uint64_t v70 = (const char *)(v69 + 390);
        BOOL v71 = v69 == 0;
        if (!v69) {
          uint64_t v70 = "";
        }
        int v72 = *(_DWORD *)(v69 + 368);
        if (v71) {
          os_log_type_t v73 = "";
        }
        else {
          os_log_type_t v73 = " ";
        }
        *(_DWORD *)int buf = 136447234;
        char v90 = "nw_protocol_http2_error_block_invoke";
        __int16 v91 = 2082;
        int v92 = v70;
        __int16 v93 = 2080;
        __int16 v94 = v73;
        __int16 v95 = 1024;
        int v96 = v72;
        __int16 v97 = 2048;
        *(void *)__int16 v98 = a2;
        uint64_t v61 = "%{public}s %{public}s%s<i%u> node %p did not contain protocol, backtrace limit exceeded";
        goto LABEL_108;
      }

      uint64_t v62 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      __int16 v54 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v55 = type;
      BOOL v63 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v62)
      {
        if (v63)
        {
          uint64_t v64 = *(void *)(a1 + 32);
          uint64_t v65 = (const char *)(v64 + 390);
          BOOL v66 = v64 == 0;
          if (!v64) {
            uint64_t v65 = "";
          }
          int v67 = *(_DWORD *)(v64 + 368);
          if (v66) {
            uint64_t v68 = "";
          }
          else {
            uint64_t v68 = " ";
          }
          *(_DWORD *)int buf = 136447490;
          char v90 = "nw_protocol_http2_error_block_invoke";
          __int16 v91 = 2082;
          int v92 = v65;
          __int16 v93 = 2080;
          __int16 v94 = v68;
          __int16 v95 = 1024;
          int v96 = v67;
          __int16 v97 = 2048;
          *(void *)__int16 v98 = a2;
          *(_WORD *)&v98[8] = 2082;
          *(void *)&v98[10] = v62;
          _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s %{public}s%s<i%u> node %p did not contain protocol, dumping backtrace:%{public}s",  buf,  0x3Au);
        }

        free(v62);
        goto LABEL_109;
      }

      if (v63)
      {
        uint64_t v74 = *(void *)(a1 + 32);
        BOOL v75 = (const char *)(v74 + 390);
        BOOL v76 = v74 == 0;
        if (!v74) {
          BOOL v75 = "";
        }
        int v77 = *(_DWORD *)(v74 + 368);
        if (v76) {
          BOOL v78 = "";
        }
        else {
          BOOL v78 = " ";
        }
        *(_DWORD *)int buf = 136447234;
        char v90 = "nw_protocol_http2_error_block_invoke";
        __int16 v91 = 2082;
        int v92 = v75;
        __int16 v93 = 2080;
        __int16 v94 = v78;
        __int16 v95 = 1024;
        int v96 = v77;
        __int16 v97 = 2048;
        *(void *)__int16 v98 = a2;
        uint64_t v61 = "%{public}s %{public}s%s<i%u> node %p did not contain protocol, no backtrace";
LABEL_108:
        _os_log_impl(&dword_181A5C000, v54, v55, v61, buf, 0x30u);
      }
    }

void ___ZL31nw_protocol_http2_get_callbacksv_block_invoke()
{
  qword_18C593C68 = (uint64_t)nw_protocol_default_reset;
  unk_18C593C70 = nw_protocol_default_input_flush;
  qword_18C593C38 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C593C40 = nw_protocol_default_waiting_for_output;
  qword_18C593BF8 = (uint64_t)nw_protocol_default_register_notification;
  unk_18C593C00 = nw_protocol_default_unregister_notification;
  qword_18C593B88 = (uint64_t)nw_protocol_http2_disconnect;
  unk_18C593B90 = nw_protocol_http2_connected;
  qword_18C593C28 = (uint64_t)nw_protocol_http2_output_finished;
  unk_18C593C30 = nw_protocol_default_get_output_local;
  qword_18C593C18 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_18C593C20 = nw_protocol_http2_input_finished;
  nw_protocol_http2_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http2_add_input_handler;
  unk_18C593B70 = nw_protocol_http2_remove_input_handler;
  qword_18C593B78 = (uint64_t)nw_protocol_http2_replace_input_handler;
  unk_18C593B80 = nw_protocol_http2_connect;
  qword_18C593BA8 = (uint64_t)nw_protocol_http2_input_available;
  unk_18C593BB0 = nw_protocol_http2_output_available;
  qword_18C593BB8 = (uint64_t)nw_protocol_http2_get_input_frames;
  unk_18C593BC0 = nw_protocol_http2_get_output_frames;
  qword_18C593BD8 = (uint64_t)nw_protocol_http2_get_parameters;
  unk_18C593BE0 = nw_protocol_default_get_path;
  qword_18C593BC8 = (uint64_t)nw_protocol_http2_finalize_output_frames;
  unk_18C593BD0 = nw_protocol_default_link_state;
  qword_18C593C58 = (uint64_t)nw_protocol_http2_remove_listen_handler;
  unk_18C593C60 = nw_protocol_http2_stream_get_message_properties;
  qword_18C593BE8 = (uint64_t)nw_protocol_default_get_local;
  unk_18C593BF0 = nw_protocol_http2_get_remote_endpoint;
  qword_18C593B98 = (uint64_t)nw_protocol_http2_disconnected;
  unk_18C593BA0 = nw_protocol_http2_error;
  qword_18C593C08 = (uint64_t)nw_protocol_http2_notify;
  unk_18C593C10 = nw_protocol_default_updated_path;
  qword_18C593C48 = (uint64_t)nw_protocol_http2_copy_info;
  unk_18C593C50 = nw_protocol_http2_add_listen_handler;
}

BOOL nw_protocol_http2_connect(nw_protocol *a1, nw_protocol *a2)
{
  *(void *)&v111[11] = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v102 = "nw_protocol_http2_connect";
    uint64_t v62 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v99 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v63 = (os_log_s *)__nwlog_obj();
      os_log_type_t v64 = type;
      if (!os_log_type_enabled(v63, type)) {
        goto LABEL_193;
      }
      *(_DWORD *)int buf = 136446210;
      int v102 = "nw_protocol_http2_connect";
      uint64_t v65 = "%{public}s called with null protocol";
LABEL_192:
      _os_log_impl(&dword_181A5C000, v63, v64, v65, buf, 0xCu);
      goto LABEL_193;
    }

    if (!v99)
    {
      BOOL v63 = (os_log_s *)__nwlog_obj();
      os_log_type_t v64 = type;
      if (os_log_type_enabled(v63, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v102 = "nw_protocol_http2_connect";
        uint64_t v65 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_192;
      }

      goto LABEL_193;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v63 = (os_log_s *)__nwlog_obj();
    os_log_type_t v64 = type;
    BOOL v79 = os_log_type_enabled(v63, type);
    if (!backtrace_string)
    {
      if (v79)
      {
        *(_DWORD *)int buf = 136446210;
        int v102 = "nw_protocol_http2_connect";
        uint64_t v65 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_192;
      }

      goto LABEL_193;
    }

    if (!v79) {
      goto LABEL_167;
    }
    *(_DWORD *)int buf = 136446466;
    int v102 = "nw_protocol_http2_connect";
    __int16 v103 = 2082;
    unsigned int v104 = backtrace_string;
    uint64_t v80 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_166:
    _os_log_impl(&dword_181A5C000, v63, v64, v80, buf, 0x16u);
    goto LABEL_167;
  }

  handle = (__int16 *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v102 = "nw_protocol_http2_connect";
    uint64_t v62 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v99 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v63 = (os_log_s *)__nwlog_obj();
      os_log_type_t v64 = type;
      if (!os_log_type_enabled(v63, type)) {
        goto LABEL_193;
      }
      *(_DWORD *)int buf = 136446210;
      int v102 = "nw_protocol_http2_connect";
      uint64_t v65 = "%{public}s called with null http2";
      goto LABEL_192;
    }

    if (!v99)
    {
      BOOL v63 = (os_log_s *)__nwlog_obj();
      os_log_type_t v64 = type;
      if (os_log_type_enabled(v63, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v102 = "nw_protocol_http2_connect";
        uint64_t v65 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_192;
      }

      goto LABEL_193;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v63 = (os_log_s *)__nwlog_obj();
    os_log_type_t v64 = type;
    BOOL v81 = os_log_type_enabled(v63, type);
    if (!backtrace_string)
    {
      if (v81)
      {
        *(_DWORD *)int buf = 136446210;
        int v102 = "nw_protocol_http2_connect";
        uint64_t v65 = "%{public}s called with null http2, no backtrace";
        goto LABEL_192;
      }

      goto LABEL_193;
    }

    if (!v81) {
      goto LABEL_167;
    }
    *(_DWORD *)int buf = 136446466;
    int v102 = "nw_protocol_http2_connect";
    __int16 v103 = 2082;
    unsigned int v104 = backtrace_string;
    uint64_t v80 = "%{public}s called with null http2, dumping backtrace:%{public}s";
    goto LABEL_166;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v102 = "nw_protocol_http2_connect";
    uint64_t v62 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v99 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v63 = (os_log_s *)__nwlog_obj();
      os_log_type_t v64 = type;
      if (os_log_type_enabled(v63, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v102 = "nw_protocol_http2_connect";
        uint64_t v65 = "%{public}s called with null other_protocol";
        goto LABEL_192;
      }

void nw_protocol_http2_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_connected";
    int v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_130;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_connected";
      int v18 = "%{public}s called with null protocol";
    }

    else if (v54)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v22 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_connected";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_130:
        if (!v15) {
          return;
        }
LABEL_131:
        free(v15);
        return;
      }

      if (!v22) {
        goto LABEL_130;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_connected";
      int v18 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_130;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_connected";
      int v18 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_129;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_connected";
    int v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v54)
      {
        uint64_t v16 = (os_log_s *)__nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_130;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_connected";
        int v18 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_129;
      }

      int v23 = (char *)__nw_create_backtrace_string();
      uint64_t v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (!v23)
      {
        if (!v24) {
          goto LABEL_130;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_connected";
        int v18 = "%{public}s called with null http2, no backtrace";
        goto LABEL_129;
      }

      if (v24)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_connected";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v23;
        uint64_t v25 = "%{public}s called with null http2, dumping backtrace:%{public}s";
LABEL_55:
        _os_log_impl(&dword_181A5C000, v16, v17, v25, buf, 0x16u);
      }

void nw_protocol_http2_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v45 = "nw_protocol_http2_disconnect";
    os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)int buf = 136446210;
      int v45 = "nw_protocol_http2_disconnect";
      int v20 = "%{public}s called with null protocol";
    }

    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v24 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)int buf = 136446466;
          int v45 = "nw_protocol_http2_disconnect";
          __int16 v46 = 2082;
          int v47 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_84:
        if (!v17) {
          return;
        }
        goto LABEL_85;
      }

      if (!v24) {
        goto LABEL_84;
      }
      *(_DWORD *)int buf = 136446210;
      int v45 = "nw_protocol_http2_disconnect";
      int v20 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)int buf = 136446210;
      int v45 = "nw_protocol_http2_disconnect";
      int v20 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_83;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v45 = "nw_protocol_http2_disconnect";
    os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v42)
      {
        int v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_84;
        }
        *(_DWORD *)int buf = 136446210;
        int v45 = "nw_protocol_http2_disconnect";
        int v20 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_83;
      }

      uint64_t v25 = (char *)__nw_create_backtrace_string();
      int v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (!v25)
      {
        if (!v26) {
          goto LABEL_84;
        }
        *(_DWORD *)int buf = 136446210;
        int v45 = "nw_protocol_http2_disconnect";
        int v20 = "%{public}s called with null http2, no backtrace";
        goto LABEL_83;
      }

      if (v26)
      {
        *(_DWORD *)int buf = 136446466;
        int v45 = "nw_protocol_http2_disconnect";
        __int16 v46 = 2082;
        int v47 = (nw_protocol_identifier *)v25;
        __int16 v27 = "%{public}s called with null http2, dumping backtrace:%{public}s";
LABEL_53:
        _os_log_impl(&dword_181A5C000, v18, v19, v27, buf, 0x16u);
      }

void nw_protocol_http2_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (((__int16)handle[97] & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v16 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v17 = handle[92];
          *(_DWORD *)int buf = 136446978;
          __int16 v30 = "nw_protocol_http2_disconnected";
          __int16 v31 = 2082;
          os_log_type_t v32 = (char *)handle + 390;
          __int16 v33 = 2080;
          int v34 = " ";
          __int16 v35 = 1024;
          int v36 = v17;
          _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }

      nw_protocol_remove_instance((uint64_t)a1);
      uint64_t v4 = *((void *)handle + 18);
      if (!v4) {
        goto LABEL_9;
      }
      if (*(void *)v4)
      {
        uint64_t v5 = *(void (**)(void))(*(void *)v4 + 8LL);
        if (v5)
        {
          v5();
LABEL_9:
          nw_http2_connection_close((uint64_t)handle);
          return;
        }
      }

      __nwlog_obj();
      int v6 = (char *)*((void *)handle + 18);
      *(_DWORD *)int buf = 136446466;
      __int16 v30 = "nw_protocol_http2_disconnected";
      __int16 v31 = 2048;
      os_log_type_t v32 = v6;
      int v7 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (__nwlog_fault(v7, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v8 = (os_log_s *)__nwlog_obj();
          os_log_type_t v9 = type;
          if (!os_log_type_enabled(v8, type)) {
            goto LABEL_52;
          }
          uint64_t v10 = (char *)*((void *)handle + 18);
          *(_DWORD *)int buf = 136446466;
          __int16 v30 = "nw_protocol_http2_disconnected";
          __int16 v31 = 2048;
          os_log_type_t v32 = v10;
          int v11 = "%{public}s listen protocol (%p) has invalid disconnected callback";
          goto LABEL_51;
        }

        if (!v27)
        {
          uint64_t v8 = (os_log_s *)__nwlog_obj();
          os_log_type_t v9 = type;
          if (!os_log_type_enabled(v8, type)) {
            goto LABEL_52;
          }
          uint64_t v25 = (char *)*((void *)handle + 18);
          *(_DWORD *)int buf = 136446466;
          __int16 v30 = "nw_protocol_http2_disconnected";
          __int16 v31 = 2048;
          os_log_type_t v32 = v25;
          int v11 = "%{public}s listen protocol (%p) has invalid disconnected callback, backtrace limit exceeded";
          goto LABEL_51;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v19 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v19)
          {
            int v20 = (char *)*((void *)handle + 18);
            *(_DWORD *)int buf = 136446722;
            __int16 v30 = "nw_protocol_http2_disconnected";
            __int16 v31 = 2048;
            os_log_type_t v32 = v20;
            __int16 v33 = 2082;
            int v34 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s listen protocol (%p) has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }

        if (v19)
        {
          BOOL v26 = (char *)*((void *)handle + 18);
          *(_DWORD *)int buf = 136446466;
          __int16 v30 = "nw_protocol_http2_disconnected";
          __int16 v31 = 2048;
          os_log_type_t v32 = v26;
          int v11 = "%{public}s listen protocol (%p) has invalid disconnected callback, no backtrace";
LABEL_51:
          _os_log_impl(&dword_181A5C000, v8, v9, v11, buf, 0x16u);
        }
      }

void nw_protocol_http2_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v28 = "nw_protocol_http2_output_finished";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v28 = "nw_protocol_http2_output_finished";
      int v13 = "%{public}s called with null protocol";
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v28 = "nw_protocol_http2_output_finished";
          __int16 v29 = 2082;
          __int16 v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v10) {
          return;
        }
        goto LABEL_73;
      }

      if (!v17) {
        goto LABEL_72;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v28 = "nw_protocol_http2_output_finished";
      int v13 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v28 = "nw_protocol_http2_output_finished";
      int v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_71;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v28 = "nw_protocol_http2_output_finished";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        int v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_72;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v28 = "nw_protocol_http2_output_finished";
        int v13 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_71;
      }

      int v18 = (char *)__nw_create_backtrace_string();
      int v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!v18)
      {
        if (!v19) {
          goto LABEL_72;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v28 = "nw_protocol_http2_output_finished";
        int v13 = "%{public}s called with null http2, no backtrace";
        goto LABEL_71;
      }

      if (v19)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v28 = "nw_protocol_http2_output_finished";
        __int16 v29 = 2082;
        __int16 v30 = v18;
        int v20 = "%{public}s called with null http2, dumping backtrace:%{public}s";
LABEL_52:
        _os_log_impl(&dword_181A5C000, v11, v12, v20, buf, 0x16u);
      }

void nw_protocol_http2_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v24 = "nw_protocol_http2_input_finished";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)int buf = 136446210;
      int v24 = "nw_protocol_http2_input_finished";
      int v11 = "%{public}s called with null protocol";
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          int v24 = "nw_protocol_http2_input_finished";
          __int16 v25 = 2082;
          BOOL v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_63:
        if (!v8) {
          return;
        }
        goto LABEL_64;
      }

      if (!v15) {
        goto LABEL_63;
      }
      *(_DWORD *)int buf = 136446210;
      int v24 = "nw_protocol_http2_input_finished";
      int v11 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)int buf = 136446210;
      int v24 = "nw_protocol_http2_input_finished";
      int v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_62;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v24 = "nw_protocol_http2_input_finished";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        int v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_63;
        }
        *(_DWORD *)int buf = 136446210;
        int v24 = "nw_protocol_http2_input_finished";
        int v11 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_62;
      }

      int v16 = (char *)__nw_create_backtrace_string();
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!v16)
      {
        if (!v17) {
          goto LABEL_63;
        }
        *(_DWORD *)int buf = 136446210;
        int v24 = "nw_protocol_http2_input_finished";
        int v11 = "%{public}s called with null http2, no backtrace";
        goto LABEL_62;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446466;
        int v24 = "nw_protocol_http2_input_finished";
        __int16 v25 = 2082;
        BOOL v26 = v16;
        int v18 = "%{public}s called with null http2, dumping backtrace:%{public}s";
LABEL_47:
        _os_log_impl(&dword_181A5C000, v9, v10, v18, buf, 0x16u);
      }

BOOL nw_protocol_http2_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v210 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unint64_t v191 = "nw_protocol_http2_add_input_handler";
    BOOL v157 = (char *)_os_log_send_and_compose_impl();
    v204[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v204[0] == OS_LOG_TYPE_FAULT)
    {
      int v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v204[0];
      if (!os_log_type_enabled(v158, v204[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v191 = "nw_protocol_http2_add_input_handler";
      BOOL v160 = "%{public}s called with null protocol";
      goto LABEL_280;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      int v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v204[0];
      if (!os_log_type_enabled(v158, v204[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v191 = "nw_protocol_http2_add_input_handler";
      BOOL v160 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_280;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v158 = (os_log_s *)__nwlog_obj();
    os_log_type_t v159 = v204[0];
    BOOL v167 = os_log_type_enabled(v158, v204[0]);
    if (!backtrace_string)
    {
      if (!v167) {
        goto LABEL_281;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v191 = "nw_protocol_http2_add_input_handler";
      BOOL v160 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_280;
    }

    if (!v167) {
      goto LABEL_261;
    }
    *(_DWORD *)int buf = 136446466;
    unint64_t v191 = "nw_protocol_http2_add_input_handler";
    __int16 v192 = 2082;
    uint64_t v193 = (uint64_t)backtrace_string;
    BOOL v168 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_260:
    _os_log_impl(&dword_181A5C000, v158, v159, v168, buf, 0x16u);
    goto LABEL_261;
  }

  handle = (__int16 *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unint64_t v191 = "nw_protocol_http2_add_input_handler";
    BOOL v157 = (char *)_os_log_send_and_compose_impl();
    v204[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v204[0] == OS_LOG_TYPE_FAULT)
    {
      int v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v204[0];
      if (!os_log_type_enabled(v158, v204[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v191 = "nw_protocol_http2_add_input_handler";
      BOOL v160 = "%{public}s called with null http2";
      goto LABEL_280;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      int v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v204[0];
      if (!os_log_type_enabled(v158, v204[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v191 = "nw_protocol_http2_add_input_handler";
      BOOL v160 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_280;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v158 = (os_log_s *)__nwlog_obj();
    os_log_type_t v159 = v204[0];
    BOOL v169 = os_log_type_enabled(v158, v204[0]);
    if (!backtrace_string)
    {
      if (!v169) {
        goto LABEL_281;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v191 = "nw_protocol_http2_add_input_handler";
      BOOL v160 = "%{public}s called with null http2, no backtrace";
      goto LABEL_280;
    }

    if (!v169) {
      goto LABEL_261;
    }
    *(_DWORD *)int buf = 136446466;
    unint64_t v191 = "nw_protocol_http2_add_input_handler";
    __int16 v192 = 2082;
    uint64_t v193 = (uint64_t)backtrace_string;
    BOOL v168 = "%{public}s called with null http2, dumping backtrace:%{public}s";
    goto LABEL_260;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unint64_t v191 = "nw_protocol_http2_add_input_handler";
    BOOL v157 = (char *)_os_log_send_and_compose_impl();
    v204[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v204[0] == OS_LOG_TYPE_FAULT)
    {
      int v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v204[0];
      if (!os_log_type_enabled(v158, v204[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v191 = "nw_protocol_http2_add_input_handler";
      BOOL v160 = "%{public}s called with null input_protocol";
      goto LABEL_280;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      int v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v204[0];
      if (!os_log_type_enabled(v158, v204[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v191 = "nw_protocol_http2_add_input_handler";
      BOOL v160 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_280;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v158 = (os_log_s *)__nwlog_obj();
    os_log_type_t v159 = v204[0];
    BOOL v170 = os_log_type_enabled(v158, v204[0]);
    if (backtrace_string)
    {
      if (v170)
      {
        *(_DWORD *)int buf = 136446466;
        unint64_t v191 = "nw_protocol_http2_add_input_handler";
        __int16 v192 = 2082;
        uint64_t v193 = (uint64_t)backtrace_string;
        BOOL v168 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
        goto LABEL_260;
      }

BOOL nw_protocol_http2_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v117 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v106 = "nw_protocol_http2_remove_input_handler";
    int v73 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v74 = (os_log_s *)__nwlog_obj();
      os_log_type_t v75 = type;
      if (!os_log_type_enabled(v74, type)) {
        goto LABEL_207;
      }
      *(_DWORD *)int buf = 136446210;
      int v106 = "nw_protocol_http2_remove_input_handler";
      int v76 = "%{public}s called with null protocol";
LABEL_206:
      _os_log_impl(&dword_181A5C000, v74, v75, v76, buf, 0xCu);
      goto LABEL_207;
    }

    if (!v103)
    {
      int v74 = (os_log_s *)__nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v74, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v106 = "nw_protocol_http2_remove_input_handler";
        int v76 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_206;
      }

      goto LABEL_207;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v74 = (os_log_s *)__nwlog_obj();
    os_log_type_t v75 = type;
    BOOL v86 = os_log_type_enabled(v74, type);
    if (!backtrace_string)
    {
      if (v86)
      {
        *(_DWORD *)int buf = 136446210;
        int v106 = "nw_protocol_http2_remove_input_handler";
        int v76 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_206;
      }

      goto LABEL_207;
    }

    if (!v86) {
      goto LABEL_163;
    }
    *(_DWORD *)int buf = 136446466;
    int v106 = "nw_protocol_http2_remove_input_handler";
    __int16 v107 = 2082;
    int v108 = backtrace_string;
    char v87 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_162:
    _os_log_impl(&dword_181A5C000, v74, v75, v87, buf, 0x16u);
    goto LABEL_163;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v106 = "nw_protocol_http2_remove_input_handler";
    int v73 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v74 = (os_log_s *)__nwlog_obj();
      os_log_type_t v75 = type;
      if (!os_log_type_enabled(v74, type)) {
        goto LABEL_207;
      }
      *(_DWORD *)int buf = 136446210;
      int v106 = "nw_protocol_http2_remove_input_handler";
      int v76 = "%{public}s called with null http2";
      goto LABEL_206;
    }

    if (!v103)
    {
      int v74 = (os_log_s *)__nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v74, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v106 = "nw_protocol_http2_remove_input_handler";
        int v76 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_206;
      }

      goto LABEL_207;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v74 = (os_log_s *)__nwlog_obj();
    os_log_type_t v75 = type;
    BOOL v88 = os_log_type_enabled(v74, type);
    if (!backtrace_string)
    {
      if (v88)
      {
        *(_DWORD *)int buf = 136446210;
        int v106 = "nw_protocol_http2_remove_input_handler";
        int v76 = "%{public}s called with null http2, no backtrace";
        goto LABEL_206;
      }

      goto LABEL_207;
    }

    if (!v88) {
      goto LABEL_163;
    }
    *(_DWORD *)int buf = 136446466;
    int v106 = "nw_protocol_http2_remove_input_handler";
    __int16 v107 = 2082;
    int v108 = backtrace_string;
    char v87 = "%{public}s called with null http2, dumping backtrace:%{public}s";
    goto LABEL_162;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v106 = "nw_protocol_http2_remove_input_handler";
    int v73 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v74 = (os_log_s *)__nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v74, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v106 = "nw_protocol_http2_remove_input_handler";
        int v76 = "%{public}s called with null input_protocol";
        goto LABEL_206;
      }

BOOL nw_protocol_http2_replace_input_handler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v51 = "nw_protocol_http2_replace_input_handler";
    int v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null protocol";
      goto LABEL_98;
    }

    if (!v48)
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_98;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v32 = (os_log_s *)__nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v38 = os_log_type_enabled(v32, type);
    if (!backtrace_string)
    {
      if (!v38) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_98;
    }

    if (!v38) {
      goto LABEL_76;
    }
    *(_DWORD *)int buf = 136446466;
    BOOL v51 = "nw_protocol_http2_replace_input_handler";
    __int16 v52 = 2082;
    int v53 = backtrace_string;
    int v39 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_75:
    _os_log_impl(&dword_181A5C000, v32, v33, v39, buf, 0x16u);
    goto LABEL_76;
  }

  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v51 = "nw_protocol_http2_replace_input_handler";
    int v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null http2";
      goto LABEL_98;
    }

    if (!v48)
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_98;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v32 = (os_log_s *)__nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v40 = os_log_type_enabled(v32, type);
    if (!backtrace_string)
    {
      if (!v40) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null http2, no backtrace";
      goto LABEL_98;
    }

    if (!v40) {
      goto LABEL_76;
    }
    *(_DWORD *)int buf = 136446466;
    BOOL v51 = "nw_protocol_http2_replace_input_handler";
    __int16 v52 = 2082;
    int v53 = backtrace_string;
    int v39 = "%{public}s called with null http2, dumping backtrace:%{public}s";
    goto LABEL_75;
  }

  if ((*(__int16 *)(v4 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v35 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v36 = *(_DWORD *)(v4 + 368);
      *(_DWORD *)int buf = 136446978;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      __int16 v52 = 2082;
      int v53 = (char *)(v4 + 390);
      __int16 v54 = 2080;
      uint64_t v55 = " ";
      __int16 v56 = 1024;
      int v57 = v36;
      _os_log_impl(&dword_181A5C000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v51 = "nw_protocol_http2_replace_input_handler";
    int v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null old_input_protocol";
      goto LABEL_98;
    }

    if (!v48)
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
      goto LABEL_98;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v32 = (os_log_s *)__nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v41 = os_log_type_enabled(v32, type);
    if (!backtrace_string)
    {
      if (!v41) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null old_input_protocol, no backtrace";
      goto LABEL_98;
    }

    if (!v41) {
      goto LABEL_76;
    }
    *(_DWORD *)int buf = 136446466;
    BOOL v51 = "nw_protocol_http2_replace_input_handler";
    __int16 v52 = 2082;
    int v53 = backtrace_string;
    int v39 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
    goto LABEL_75;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v51 = "nw_protocol_http2_replace_input_handler";
    int v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null new_input_protocol";
      goto LABEL_98;
    }

    if (!v48)
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_protocol_http2_replace_input_handler";
      uint64_t v34 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_98;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v32 = (os_log_s *)__nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v42 = os_log_type_enabled(v32, type);
    if (backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v51 = "nw_protocol_http2_replace_input_handler";
        __int16 v52 = 2082;
        int v53 = backtrace_string;
        int v39 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
        goto LABEL_75;
      }

void nw_protocol_http2_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v16 = "nw_protocol_http2_input_available";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "nw_protocol_http2_input_available";
      uint64_t v6 = "%{public}s called with null protocol";
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v16 = "nw_protocol_http2_input_available";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v3) {
          return;
        }
LABEL_41:
        free(v3);
        return;
      }

      if (!v10) {
        goto LABEL_40;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "nw_protocol_http2_input_available";
      uint64_t v6 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "nw_protocol_http2_input_available";
      uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_protocol_http2_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v20 = "nw_protocol_http2_output_available";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)int buf = 136446210;
      int v20 = "nw_protocol_http2_output_available";
      int v8 = "%{public}s called with null protocol";
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v14 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          int v20 = "nw_protocol_http2_output_available";
          __int16 v21 = 2082;
          int v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_51:
        if (!v5) {
          return;
        }
LABEL_52:
        free(v5);
        return;
      }

      if (!v14) {
        goto LABEL_51;
      }
      *(_DWORD *)int buf = 136446210;
      int v20 = "nw_protocol_http2_output_available";
      int v8 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)int buf = 136446210;
      int v20 = "nw_protocol_http2_output_available";
      int v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_http2_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  v326[2] = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    nw_endpoint_t v317 = "nw_protocol_http2_get_input_frames";
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v312) = 16;
    LOBYTE(v30_Block_object_dispose((const void *)(v20 - 192), 8) = 0;
    if (__nwlog_fault(v27, &v312, &v308))
    {
      if (v312 == 17)
      {
        uint64_t v28 = (os_log_s *)__nwlog_obj();
        os_log_type_t v29 = v312;
        if (os_log_type_enabled(v28, (os_log_type_t)v312))
        {
          *(_DWORD *)int buf = 136446210;
          nw_endpoint_t v317 = "nw_protocol_http2_get_input_frames";
          int v30 = "%{public}s called with null protocol";
LABEL_217:
          _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0xCu);
        }
      }

      else if ((_BYTE)v308)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v28 = (os_log_s *)__nwlog_obj();
        os_log_type_t v29 = v312;
        BOOL v208 = os_log_type_enabled(v28, (os_log_type_t)v312);
        if (backtrace_string)
        {
          if (!v208) {
            goto LABEL_38;
          }
          *(_DWORD *)int buf = 136446466;
          nw_endpoint_t v317 = "nw_protocol_http2_get_input_frames";
          __int16 v318 = 2082;
          os_log_type_t v319 = backtrace_string;
          os_log_type_t v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
          goto LABEL_37;
        }

        if (v208)
        {
          *(_DWORD *)int buf = 136446210;
          nw_endpoint_t v317 = "nw_protocol_http2_get_input_frames";
          int v30 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_217;
        }
      }

      else
      {
        uint64_t v28 = (os_log_s *)__nwlog_obj();
        os_log_type_t v29 = v312;
        if (os_log_type_enabled(v28, (os_log_type_t)v312))
        {
          *(_DWORD *)int buf = 136446210;
          nw_endpoint_t v317 = "nw_protocol_http2_get_input_frames";
          int v30 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_217;
        }
      }
    }

BOOL nw_protocol_http2_get_output_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v115 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v106 = "nw_protocol_http2_get_output_frames";
    unsigned int v56 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v57 = (os_log_s *)__nwlog_obj();
      os_log_type_t v58 = type;
      if (!os_log_type_enabled(v57, type)) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null protocol";
      goto LABEL_147;
    }

    if (!v103)
    {
      int v57 = (os_log_s *)__nwlog_obj();
      os_log_type_t v58 = type;
      if (!os_log_type_enabled(v57, type)) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_147;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v57 = (os_log_s *)__nwlog_obj();
    os_log_type_t v58 = type;
    BOOL v63 = os_log_type_enabled(v57, type);
    if (!backtrace_string)
    {
      if (!v63) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_147;
    }

    if (!v63) {
      goto LABEL_130;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v106 = "nw_protocol_http2_get_output_frames";
    __int16 v107 = 2082;
    os_log_type_t v108 = backtrace_string;
    int v64 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_129:
    _os_log_impl(&dword_181A5C000, v57, v58, v64, buf, 0x16u);
    goto LABEL_130;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v106 = "nw_protocol_http2_get_output_frames";
    unsigned int v56 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v57 = (os_log_s *)__nwlog_obj();
      os_log_type_t v58 = type;
      if (!os_log_type_enabled(v57, type)) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null http2";
      goto LABEL_147;
    }

    if (!v103)
    {
      int v57 = (os_log_s *)__nwlog_obj();
      os_log_type_t v58 = type;
      if (!os_log_type_enabled(v57, type)) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_147;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v57 = (os_log_s *)__nwlog_obj();
    os_log_type_t v58 = type;
    BOOL v65 = os_log_type_enabled(v57, type);
    if (!backtrace_string)
    {
      if (!v65) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null http2, no backtrace";
      goto LABEL_147;
    }

    if (!v65) {
      goto LABEL_130;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v106 = "nw_protocol_http2_get_output_frames";
    __int16 v107 = 2082;
    os_log_type_t v108 = backtrace_string;
    int v64 = "%{public}s called with null http2, dumping backtrace:%{public}s";
    goto LABEL_129;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v106 = "nw_protocol_http2_get_output_frames";
    unsigned int v56 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v57 = (os_log_s *)__nwlog_obj();
      os_log_type_t v58 = type;
      if (!os_log_type_enabled(v57, type)) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null input_protocol";
      goto LABEL_147;
    }

    if (!v103)
    {
      int v57 = (os_log_s *)__nwlog_obj();
      os_log_type_t v58 = type;
      if (!os_log_type_enabled(v57, type)) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_147;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v57 = (os_log_s *)__nwlog_obj();
    os_log_type_t v58 = type;
    BOOL v66 = os_log_type_enabled(v57, type);
    if (!backtrace_string)
    {
      if (!v66) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_147;
    }

    if (!v66) {
      goto LABEL_130;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v106 = "nw_protocol_http2_get_output_frames";
    __int16 v107 = 2082;
    os_log_type_t v108 = backtrace_string;
    int v64 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_129;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v106 = "nw_protocol_http2_get_output_frames";
    unsigned int v56 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v57 = (os_log_s *)__nwlog_obj();
      os_log_type_t v58 = type;
      if (!os_log_type_enabled(v57, type)) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null return_array";
      goto LABEL_147;
    }

    if (!v103)
    {
      int v57 = (os_log_s *)__nwlog_obj();
      os_log_type_t v58 = type;
      if (!os_log_type_enabled(v57, type)) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v106 = "nw_protocol_http2_get_output_frames";
      int v59 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_147;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v57 = (os_log_s *)__nwlog_obj();
    os_log_type_t v58 = type;
    BOOL v67 = os_log_type_enabled(v57, type);
    if (backtrace_string)
    {
      if (v67)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nw_protocol_http2_get_output_frames";
        __int16 v107 = 2082;
        os_log_type_t v108 = backtrace_string;
        int v64 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_129;
      }

uint64_t nw_protocol_http2_get_parameters(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[13];
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v14 = "nw_protocol_http2_get_parameters";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http2_get_parameters";
        uint64_t v6 = "%{public}s called with null http2";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http2_get_parameters";
        uint64_t v6 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http2_get_parameters";
        uint64_t v6 = "%{public}s called with null http2, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v14 = "nw_protocol_http2_get_parameters";
      __int16 v15 = 2082;
      int v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null http2, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v14 = "nw_protocol_http2_get_parameters";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http2_get_parameters";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http2_get_parameters";
        uint64_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v14 = "nw_protocol_http2_get_parameters";
      __int16 v15 = 2082;
      int v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

void nw_protocol_http2_stream_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v15 = "nw_protocol_http2_stream_get_message_properties";
    int v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v15 = "nw_protocol_http2_stream_get_message_properties";
      os_log_type_t v7 = "%{public}s called with null protocol";
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v15 = "nw_protocol_http2_stream_get_message_properties";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v4) {
          return;
        }
LABEL_35:
        free(v4);
        return;
      }

      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v15 = "nw_protocol_http2_stream_get_message_properties";
      os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v15 = "nw_protocol_http2_stream_get_message_properties";
      os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_http2_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (((__int16)handle[97] & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        char v12 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v13 = handle[92];
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = (char *)handle + 390;
          *(_WORD *)&_BYTE buf[22] = 2080;
          int v28 = " ";
          LOWORD(v29) = 1024;
          *(_DWORD *)((char *)&v29 + 2) = v13;
          _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }

      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81808);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled())
      {
        kdebug_trace();
        if (a2)
        {
LABEL_10:
          if (gLogDatapath)
          {
            uint64_t v14 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }

          *(void *)int buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_81998;
          int v28 = (const char *)&__block_descriptor_tmp_30_81999;
          uint64_t v29 = a2;
          char v30 = 1;
          tqh_first = a2->tqh_first;
          do
          {
            if (!tqh_first) {
              break;
            }
            os_log_type_t v5 = (nw_frame *)*((void *)tqh_first + 4);
            char v6 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            tqh_first = v5;
          }

          while ((v6 & 1) != 0);
LABEL_14:
          nw_http2_session_send((uint64_t)handle);
          return 1LL;
        }
      }

      else if (a2)
      {
        goto LABEL_10;
      }

      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v25 = 0;
      if (__nwlog_fault(v15, &type, &v25))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v16 = (os_log_s *)__nwlog_obj();
          os_log_type_t v17 = type;
          if (!os_log_type_enabled(v16, type)) {
            goto LABEL_66;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
          uint64_t v18 = "%{public}s called with null array";
          goto LABEL_65;
        }

        if (!v25)
        {
          __int16 v16 = (os_log_s *)__nwlog_obj();
          os_log_type_t v17 = type;
          if (!os_log_type_enabled(v16, type)) {
            goto LABEL_66;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
          uint64_t v18 = "%{public}s called with null array, backtrace limit exceeded";
          goto LABEL_65;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v16 = (os_log_s *)__nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v24 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s called with null array, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_66;
        }

        if (v24)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
          uint64_t v18 = "%{public}s called with null array, no backtrace";
LABEL_65:
          _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
        }
      }

BOOL nw_protocol_http2_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v76 = "nw_protocol_http2_add_listen_handler";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v74 = OS_LOG_TYPE_DEFAULT;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v74 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v23 = (os_log_s *)__nwlog_obj();
        os_log_type_t v24 = type[0];
        if (!os_log_type_enabled(v23, type[0])) {
          goto LABEL_97;
        }
        *(_DWORD *)int buf = 136446210;
        int v76 = "nw_protocol_http2_add_listen_handler";
        char v25 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_96;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type[0];
      BOOL v33 = os_log_type_enabled(v23, type[0]);
      if (!backtrace_string)
      {
        if (!v33) {
          goto LABEL_97;
        }
        *(_DWORD *)int buf = 136446210;
        int v76 = "nw_protocol_http2_add_listen_handler";
        char v25 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_96;
      }

      if (v33)
      {
        *(_DWORD *)int buf = 136446466;
        int v76 = "nw_protocol_http2_add_listen_handler";
        __int16 v77 = 2082;
        int v78 = backtrace_string;
        uint64_t v34 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_74:
        _os_log_impl(&dword_181A5C000, v23, v24, v34, buf, 0x16u);
      }

uint64_t nw_protocol_http2_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      if ((*((__int16 *)handle + 194) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v11 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v12 = *((_DWORD *)handle + 92);
          *(_DWORD *)int buf = 136447234;
          BOOL v22 = "nw_protocol_http2_remove_listen_handler";
          __int16 v23 = 2082;
          os_log_type_t v24 = handle + 390;
          __int16 v25 = 2080;
          uint64_t v26 = " ";
          __int16 v27 = 1024;
          int v28 = v12;
          __int16 v29 = 2048;
          int v30 = a2;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called with listen_protocol %p",  buf,  0x30u);
        }
      }

      if (*((nw_listen_protocol **)handle + 18) == a2)
      {
        *((void *)handle + 1_Block_object_dispose((const void *)(v20 - 192), 8) = 0LL;
        a2->uint64_t protocol_handler = 0LL;
        if (*((__int16 *)handle + 194) < 0)
        {
LABEL_10:
          __int16 v4 = *((_WORD *)handle + 194);
          if ((v4 & 0x80) != 0)
          {
            nw_http2_send_goaway((uint64_t)handle);
          }

          else
          {
            *((_WORD *)handle + 194) = v4 | 2;
            uint64_t v5 = *((void *)handle + 11);
            if (v5)
            {
              if (*(void *)v5)
              {
                dispatch_source_set_timer( *(dispatch_source_t *)v5,  0x8000000000000000LL,  0xFFFFFFFFFFFFFFFFLL,  0x3B9ACA00uLL);
              }

              else
              {
                *(_OWORD *)(v5 + 32) = xmmword_18272D790;
                if (*(_BYTE *)(v5 + 48))
                {
                  if (*(_BYTE *)(v5 + 49)) {
                    nw_queue_source_run_timer(v5, (uint64_t)a2);
                  }
                }
              }
            }
          }

          return 1LL;
        }
      }

      else if (*((__int16 *)handle + 194) < 0)
      {
        goto LABEL_10;
      }

      if (gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v13 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v14 = *((_DWORD *)handle + 92);
          *(_DWORD *)int buf = 136446978;
          BOOL v22 = "nw_protocol_http2_remove_listen_handler";
          __int16 v23 = 2082;
          os_log_type_t v24 = handle + 390;
          __int16 v25 = 2080;
          uint64_t v26 = " ";
          __int16 v27 = 1024;
          int v28 = v14;
          _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> removed protocol listen handler",  buf,  0x26u);
        }
      }

      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_protocol_http2_remove_listen_handler";
    __int16 v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_protocol_http2_remove_listen_handler";
        os_log_type_t v10 = "%{public}s called with null http2";
        goto LABEL_53;
      }

      goto LABEL_54;
    }

    if (!v19)
    {
      int v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_protocol_http2_remove_listen_handler";
        os_log_type_t v10 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_53;
      }

      goto LABEL_54;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v18 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_protocol_http2_remove_listen_handler";
        os_log_type_t v10 = "%{public}s called with null http2, no backtrace";
        goto LABEL_53;
      }

      goto LABEL_54;
    }

    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v22 = "nw_protocol_http2_remove_listen_handler";
      __int16 v23 = 2082;
      os_log_type_t v24 = backtrace_string;
      int v17 = "%{public}s called with null http2, dumping backtrace:%{public}s";
      goto LABEL_43;
    }

    goto LABEL_44;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v22 = "nw_protocol_http2_remove_listen_handler";
  __int16 v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      int v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_protocol_http2_remove_listen_handler";
        os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_53;
      }

      goto LABEL_54;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v16 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_protocol_http2_remove_listen_handler";
        os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_53;
      }

      goto LABEL_54;
    }

    if (v16)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v22 = "nw_protocol_http2_remove_listen_handler";
      __int16 v23 = 2082;
      os_log_type_t v24 = backtrace_string;
      int v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_43:
      _os_log_impl(&dword_181A5C000, v8, v9, v17, buf, 0x16u);
    }

uint64_t nw_protocol_http2_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      uint64_t v2 = handle[6];
      else {
        return handle[14];
      }
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v17 = "nw_protocol_http2_get_remote_endpoint";
    char v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_protocol_http2_get_remote_endpoint";
        os_log_type_t v9 = "%{public}s called with null http2";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    if (!v14)
    {
      __int16 v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_protocol_http2_get_remote_endpoint";
        os_log_type_t v9 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_protocol_http2_get_remote_endpoint";
        os_log_type_t v9 = "%{public}s called with null http2, no backtrace";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    if (v13)
    {
      *(_DWORD *)int buf = 136446466;
      int v17 = "nw_protocol_http2_get_remote_endpoint";
      __int16 v18 = 2082;
      char v19 = backtrace_string;
      int v12 = "%{public}s called with null http2, dumping backtrace:%{public}s";
      goto LABEL_24;
    }

    goto LABEL_25;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_protocol_http2_get_remote_endpoint";
  char v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v14)
    {
      __int16 v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_protocol_http2_get_remote_endpoint";
        os_log_type_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_protocol_http2_get_remote_endpoint";
        os_log_type_t v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    if (v11)
    {
      *(_DWORD *)int buf = 136446466;
      int v17 = "nw_protocol_http2_get_remote_endpoint";
      __int16 v18 = 2082;
      char v19 = backtrace_string;
      int v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    }

void nw_protocol_http2_notify(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v35 = "nw_protocol_http2_notify";
    int v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http2_notify";
      uint64_t v20 = "%{public}s called with null protocol";
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v24 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v35 = "nw_protocol_http2_notify";
          __int16 v36 = 2082;
          int v37 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_80:
        if (!v17) {
          return;
        }
        goto LABEL_81;
      }

      if (!v24) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http2_notify";
      uint64_t v20 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http2_notify";
      uint64_t v20 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_79;
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v35 = "nw_protocol_http2_notify";
    int v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        __int16 v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_80;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v35 = "nw_protocol_http2_notify";
        uint64_t v20 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_79;
      }

      __int16 v25 = (char *)__nw_create_backtrace_string();
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (!v25)
      {
        if (!v26) {
          goto LABEL_80;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v35 = "nw_protocol_http2_notify";
        uint64_t v20 = "%{public}s called with null http2, no backtrace";
        goto LABEL_79;
      }

      if (!v26) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v35 = "nw_protocol_http2_notify";
      __int16 v36 = 2082;
      int v37 = v25;
      __int16 v27 = "%{public}s called with null http2, dumping backtrace:%{public}s";
      goto LABEL_60;
    }

    __int16 v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_80;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v35 = "nw_protocol_http2_notify";
    uint64_t v20 = "%{public}s called with null http2";
LABEL_79:
    _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
    goto LABEL_80;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v35 = "nw_protocol_http2_notify";
    int v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http2_notify";
      uint64_t v20 = "%{public}s called with null other_protocol";
      goto LABEL_79;
    }

    if (!v32)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http2_notify";
      uint64_t v20 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_79;
    }

    __int16 v25 = (char *)__nw_create_backtrace_string();
    __int16 v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v28 = os_log_type_enabled(v18, type);
    if (!v25)
    {
      if (!v28) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http2_notify";
      uint64_t v20 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_79;
    }

    if (!v28) {
      goto LABEL_61;
    }
    *(_DWORD *)int buf = 136446466;
    BOOL v35 = "nw_protocol_http2_notify";
    __int16 v36 = 2082;
    int v37 = v25;
    __int16 v27 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_60:
    _os_log_impl(&dword_181A5C000, v18, v19, v27, buf, 0x16u);
    goto LABEL_61;
  }

  if (!*(void *)(v6 + 152))
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v35 = "nw_protocol_http2_notify";
    int v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http2_notify";
      uint64_t v20 = "%{public}s called with null http2->http2_streams_protocol";
      goto LABEL_79;
    }

    if (!v32)
    {
      __int16 v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http2_notify";
      uint64_t v20 = "%{public}s called with null http2->http2_streams_protocol, backtrace limit exceeded";
      goto LABEL_79;
    }

    __int16 v25 = (char *)__nw_create_backtrace_string();
    __int16 v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v29 = os_log_type_enabled(v18, type);
    if (!v25)
    {
      if (!v29) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http2_notify";
      uint64_t v20 = "%{public}s called with null http2->http2_streams_protocol, no backtrace";
      goto LABEL_79;
    }

    if (v29)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v35 = "nw_protocol_http2_notify";
      __int16 v36 = 2082;
      int v37 = v25;
      __int16 v27 = "%{public}s called with null http2->http2_streams_protocol, dumping backtrace:%{public}s";
      goto LABEL_60;
    }

uint64_t nw_protocol_http2_copy_info(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v32 = "nw_protocol_http2_copy_info";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v32 = "nw_protocol_http2_copy_info";
        BOOL v16 = "%{public}s called with null protocol";
LABEL_50:
        _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
      }

uint64_t ___ZL24nw_protocol_http2_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v68 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v57 = "nw_protocol_http2_notify_block_invoke";
    BOOL v48 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v48, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v49 = (os_log_s *)__nwlog_obj();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v57 = "nw_protocol_http2_notify_block_invoke";
          int v51 = "%{public}s called with null node";
LABEL_82:
          _os_log_impl(&dword_181A5C000, v49, v50, v51, buf, 0xCu);
        }
      }

      else if (v54)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v49 = (os_log_s *)__nwlog_obj();
        os_log_type_t v50 = type;
        BOOL v53 = os_log_type_enabled(v49, type);
        if (backtrace_string)
        {
          if (v53)
          {
            *(_DWORD *)int buf = 136446466;
            int v57 = "nw_protocol_http2_notify_block_invoke";
            __int16 v58 = 2082;
            int v59 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s called with null node, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_83;
        }

        if (v53)
        {
          *(_DWORD *)int buf = 136446210;
          int v57 = "nw_protocol_http2_notify_block_invoke";
          int v51 = "%{public}s called with null node, no backtrace";
          goto LABEL_82;
        }
      }

      else
      {
        BOOL v49 = (os_log_s *)__nwlog_obj();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v57 = "nw_protocol_http2_notify_block_invoke";
          int v51 = "%{public}s called with null node, backtrace limit exceeded";
          goto LABEL_82;
        }
      }
    }

void nw_http2_send_settings(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    BOOL v26 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v27 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)uint64_t v42 = 136446978;
      *(void *)&v42[4] = "nw_http2_send_settings";
      *(_WORD *)&v42[12] = 2082;
      *(void *)&v42[14] = a1 + 390;
      *(_WORD *)&v42[22] = 2080;
      *(void *)&__int128 v43 = " ";
      WORD4(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 10) = v27;
      _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", v42, 0x26u);
    }
  }

  *(_OWORD *)uint64_t v42 = xmmword_18272D810;
  int v2 = *(_DWORD *)(a1 + 376);
  *(_DWORD *)&v42[16] = 4;
  *(_DWORD *)&v42[20] = v2;
  __int128 v43 = xmmword_18272D820;
  int v3 = *(_DWORD *)(a1 + 384);
  if (v3)
  {
    int v44 = 11104;
    int v45 = v3;
  }

  if (nghttp2_submit_settings())
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = nghttp2_strerror();
    *(_DWORD *)int buf = 136446466;
    uint64_t v35 = "nw_http2_send_settings";
    __int16 v36 = 2082;
    uint64_t v37 = v4;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      uint64_t v8 = nghttp2_strerror();
      *(_DWORD *)int buf = 136446466;
      uint64_t v35 = "nw_http2_send_settings";
      __int16 v36 = 2082;
      uint64_t v37 = v8;
      uint64_t v9 = "%{public}s nghttp2_submit_settings: %{public}s failed";
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v11)
        {
          uint64_t v12 = nghttp2_strerror();
          *(_DWORD *)int buf = 136446722;
          uint64_t v35 = "nw_http2_send_settings";
          __int16 v36 = 2082;
          uint64_t v37 = v12;
          __int16 v38 = 2082;
          int v39 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s nghttp2_submit_settings: %{public}s failed, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (!v11)
      {
LABEL_20:
        if (v5) {
          free(v5);
        }
        goto LABEL_22;
      }

      uint64_t v14 = nghttp2_strerror();
      *(_DWORD *)int buf = 136446466;
      uint64_t v35 = "nw_http2_send_settings";
      __int16 v36 = 2082;
      uint64_t v37 = v14;
      uint64_t v9 = "%{public}s nghttp2_submit_settings: %{public}s failed, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      uint64_t v13 = nghttp2_strerror();
      *(_DWORD *)int buf = 136446466;
      uint64_t v35 = "nw_http2_send_settings";
      __int16 v36 = 2082;
      uint64_t v37 = v13;
      uint64_t v9 = "%{public}s nghttp2_submit_settings: %{public}s failed, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v6, v7, v9, buf, 0x16u);
    goto LABEL_20;
  }

void nw_protocol_http2_process_input(uint64_t a1)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v51 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v52 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_process_input";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = a1 + 390;
      *(_WORD *)&_BYTE buf[22] = 2080;
      uint64_t v69 = " ";
      LOWORD(v70) = 1024;
      *(_DWORD *)((char *)&v70 + 2) = v52;
      _os_log_impl(&dword_181A5C000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }

  *(_WORD *)(a1 + 388) |= 0x200u;
  uint64_t v2 = MEMORY[0x1895F87A8];
  while (1)
  {
    v67[0] = 0LL;
    v67[1] = v67;
    uint64_t v3 = *(void *)(a1 + 32);
    if (!v3) {
      break;
    }
    uint64_t v4 = *(void *)(v3 + 24);
    if (!v4) {
      break;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 80);
    if (!v5) {
      break;
    }
    int v6 = v5(v3, a1);
    if (!v6) {
      goto LABEL_78;
    }
    int v7 = v6;
    if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v35 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v36 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_process_input";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 390;
        *(_WORD *)&_BYTE buf[22] = 2080;
        uint64_t v69 = " ";
        LOWORD(v70) = 1024;
        *(_DWORD *)((char *)&v70 + 2) = v36;
        HIWORD(v70) = 1024;
        LODWORD(v71) = v7;
        _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> received %u frames from output_handler",  buf,  0x2Cu);
      }
    }

    *(void *)os_log_type_t type = 0LL;
    int v63 = type;
    int v65 = 0;
    uint64_t v64 = 0x2000000000LL;
    v57[0] = v2;
    v57[1] = 0x40000000LL;
    __int16 v58 = ___ZL31nw_protocol_http2_process_inputP17nw_protocol_http2_block_invoke;
    int v59 = &unk_189BC7D88;
    __int16 v60 = type;
    uint64_t v61 = a1;
    uint64_t v8 = v67[0];
    do
    {
      if (!v8) {
        break;
      }
      uint64_t v9 = *(void *)(v8 + 32);
      char v10 = ((uint64_t (*)(void *))v58)(v57);
      uint64_t v8 = v9;
    }

    while ((v10 & 1) != 0);
    if (nghttp2_session_consume_connection())
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = nghttp2_strerror();
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_process_input";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v11;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v66 = OS_LOG_TYPE_ERROR;
      char v56 = 0;
      if (v66 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = gLogObj;
        os_log_type_t v14 = v66;
        if (os_log_type_enabled((os_log_t)gLogObj, v66))
        {
          uint64_t v15 = nghttp2_strerror();
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_process_input";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v15;
          uint64_t v16 = (os_log_s *)v13;
          os_log_type_t v17 = v14;
          os_log_type_t v18 = "%{public}s nghttp2_session_consume_connection: %{public}s failed";
          goto LABEL_28;
        }

        goto LABEL_29;
      }

      if (v56)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v20 = (os_log_s *)gLogObj;
        os_log_type_t v21 = v66;
        BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, v66);
        if (backtrace_string)
        {
          if (v22)
          {
            uint64_t v23 = nghttp2_strerror();
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_http2_process_input";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v23;
            *(_WORD *)&_BYTE buf[22] = 2082;
            uint64_t v69 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s nghttp2_session_consume_connection: %{public}s failed, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (!v22)
        {
LABEL_29:
          if (v12) {
            free(v12);
          }
          goto LABEL_31;
        }

        uint64_t v27 = nghttp2_strerror();
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_process_input";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v27;
        uint64_t v16 = v20;
        os_log_type_t v17 = v21;
        os_log_type_t v18 = "%{public}s nghttp2_session_consume_connection: %{public}s failed, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v24 = gLogObj;
        os_log_type_t v25 = v66;
        if (!os_log_type_enabled((os_log_t)gLogObj, v66)) {
          goto LABEL_29;
        }
        uint64_t v26 = nghttp2_strerror();
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_process_input";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v26;
        uint64_t v16 = (os_log_s *)v24;
        os_log_type_t v17 = v25;
        os_log_type_t v18 = "%{public}s nghttp2_session_consume_connection: %{public}s failed, backtrace limit exceeded";
      }

uint64_t ___ZL35nw_protocol_http2_process_connectedP17nw_protocol_http2_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)nw_hash_node_get_extra(a2);
  if (!v4)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = (const char *)(v11 + 390);
    BOOL v13 = v11 == 0;
    int v14 = *(_DWORD *)(v11 + 368);
    if (v13) {
      uint64_t v12 = "";
    }
    *(_DWORD *)int buf = 136447234;
    uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
    if (v13) {
      uint64_t v15 = "";
    }
    else {
      uint64_t v15 = " ";
    }
    __int16 v70 = 2082;
    int v71 = v12;
    __int16 v72 = 2080;
    char v73 = v15;
    __int16 v74 = 1024;
    int v75 = v14;
    __int16 v76 = 2048;
    *(void *)__int16 v77 = a2;
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v17 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v18 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_79;
      }
      uint64_t v19 = *(void *)(a1 + 32);
      BOOL v20 = (const char *)(v19 + 390);
      BOOL v21 = v19 == 0;
      if (!v19) {
        BOOL v20 = "";
      }
      int v22 = *(_DWORD *)(v19 + 368);
      if (v21) {
        uint64_t v23 = "";
      }
      else {
        uint64_t v23 = " ";
      }
      *(_DWORD *)int buf = 136447234;
      uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
      __int16 v70 = 2082;
      int v71 = v20;
      __int16 v72 = 2080;
      char v73 = v23;
      __int16 v74 = 1024;
      int v75 = v22;
      __int16 v76 = 2048;
      *(void *)__int16 v77 = a2;
      uint64_t v24 = "%{public}s %{public}s%s<i%u> protocol hash node %p didn't have stream extra";
    }

    else if (v66)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v17 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v18 = type;
      BOOL v26 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (backtrace_string)
      {
        if (v26)
        {
          uint64_t v27 = *(void *)(a1 + 32);
          BOOL v28 = (const char *)(v27 + 390);
          BOOL v29 = v27 == 0;
          if (!v27) {
            BOOL v28 = "";
          }
          int v30 = *(_DWORD *)(v27 + 368);
          if (v29) {
            char v31 = "";
          }
          else {
            char v31 = " ";
          }
          *(_DWORD *)int buf = 136447490;
          uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
          __int16 v70 = 2082;
          int v71 = v28;
          __int16 v72 = 2080;
          char v73 = v31;
          __int16 v74 = 1024;
          int v75 = v30;
          __int16 v76 = 2048;
          *(void *)__int16 v77 = a2;
          *(_WORD *)&v77[8] = 2082;
          *(void *)&v77[10] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s %{public}s%s<i%u> protocol hash node %p didn't have stream extra, dumping backtrace:%{public}s",  buf,  0x3Au);
        }

        free(backtrace_string);
        goto LABEL_79;
      }

      if (!v26)
      {
LABEL_79:
        if (!v16) {
          return 1LL;
        }
        int v54 = (char *)v16;
LABEL_90:
        free(v54);
        return 1LL;
      }

      uint64_t v49 = *(void *)(a1 + 32);
      int v50 = (const char *)(v49 + 390);
      BOOL v51 = v49 == 0;
      if (!v49) {
        int v50 = "";
      }
      int v52 = *(_DWORD *)(v49 + 368);
      if (v51) {
        BOOL v53 = "";
      }
      else {
        BOOL v53 = " ";
      }
      *(_DWORD *)int buf = 136447234;
      uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
      __int16 v70 = 2082;
      int v71 = v50;
      __int16 v72 = 2080;
      char v73 = v53;
      __int16 v74 = 1024;
      int v75 = v52;
      __int16 v76 = 2048;
      *(void *)__int16 v77 = a2;
      uint64_t v24 = "%{public}s %{public}s%s<i%u> protocol hash node %p didn't have stream extra, no backtrace";
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v17 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v18 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_79;
      }
      uint64_t v40 = *(void *)(a1 + 32);
      int v41 = (const char *)(v40 + 390);
      BOOL v42 = v40 == 0;
      if (!v40) {
        int v41 = "";
      }
      int v43 = *(_DWORD *)(v40 + 368);
      if (v42) {
        int v44 = "";
      }
      else {
        int v44 = " ";
      }
      *(_DWORD *)int buf = 136447234;
      uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
      __int16 v70 = 2082;
      int v71 = v41;
      __int16 v72 = 2080;
      char v73 = v44;
      __int16 v74 = 1024;
      int v75 = v43;
      __int16 v76 = 2048;
      *(void *)__int16 v77 = a2;
      uint64_t v24 = "%{public}s %{public}s%s<i%u> protocol hash node %p didn't have stream extra, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v17, v18, v24, buf, 0x30u);
    goto LABEL_79;
  }

  if (((*(unsigned __int16 *)(v4 + 188) | (*(unsigned __int8 *)(v4 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    __int16 v60 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v62 = *(_DWORD *)(v4 + 176);
      int v61 = *(_DWORD *)(v4 + 180);
      *(_DWORD *)int buf = 136447490;
      uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
      __int16 v70 = 2082;
      int v71 = (const char *)(v4 + 191);
      __int16 v72 = 2080;
      char v73 = " ";
      __int16 v74 = 1024;
      int v75 = v61;
      __int16 v76 = 1024;
      *(_DWORD *)__int16 v77 = v62;
      *(_WORD *)&v77[4] = 1024;
      *(_DWORD *)&v77[6] = v62;
      _os_log_impl( &dword_181A5C000,  v60,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> checking existing stream %d to see if waiting_for_connect",  buf,  0x32u);
    }
  }

  int v5 = *(unsigned __int16 *)(v4 + 188);
  if ((v5 & 8) != 0)
  {
    if (((v5 | (*(unsigned __int8 *)(v4 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v63 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v65 = *(_DWORD *)(v4 + 176);
        int v64 = *(_DWORD *)(v4 + 180);
        *(_DWORD *)int buf = 136447490;
        uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
        __int16 v70 = 2082;
        int v71 = (const char *)(v4 + 191);
        __int16 v72 = 2080;
        char v73 = " ";
        __int16 v74 = 1024;
        int v75 = v64;
        __int16 v76 = 1024;
        *(_DWORD *)__int16 v77 = v65;
        *(_WORD *)&v77[4] = 1024;
        *(_DWORD *)&v77[6] = v65;
        _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> calling connect on waiting stream %d",  buf,  0x32u);
      }
    }

    uint64_t object = nw_hash_node_get_object(a2);
    if (object)
    {
      if (!nw_http2_stream_connect(*(void *)(a1 + 32), v4, object)
        && ((*(unsigned __int16 *)(v4 + 188) | (*(unsigned __int8 *)(v4 + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v7 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          int v9 = *(_DWORD *)(v4 + 176);
          int v8 = *(_DWORD *)(v4 + 180);
          *(_DWORD *)int buf = 136447746;
          uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
          __int16 v70 = 2082;
          int v71 = (const char *)(v4 + 191);
          __int16 v72 = 2080;
          char v73 = " ";
          __int16 v74 = 1024;
          int v75 = v8;
          __int16 v76 = 1024;
          *(_DWORD *)__int16 v77 = v9;
          *(_WORD *)&v77[4] = 1024;
          *(_DWORD *)&v77[6] = v9;
          *(_WORD *)&v77[10] = 2048;
          *(void *)&v77[12] = v4;
          _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> nw_http2_stream_connect failed for stream id %d (%p)",  buf,  0x3Cu);
        }
      }

      return 1LL;
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v33 = *(_DWORD *)(v4 + 176);
    int v32 = *(_DWORD *)(v4 + 180);
    *(_DWORD *)int buf = 136447490;
    uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
    __int16 v70 = 2082;
    int v71 = (const char *)(v4 + 191);
    __int16 v72 = 2080;
    char v73 = " ";
    __int16 v74 = 1024;
    int v75 = v32;
    __int16 v76 = 1024;
    *(_DWORD *)__int16 v77 = v33;
    *(_WORD *)&v77[4] = 2048;
    *(void *)&v77[6] = a2;
    uint64_t v34 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v35 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v36 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_88;
      }
      int v38 = *(_DWORD *)(v4 + 176);
      int v37 = *(_DWORD *)(v4 + 180);
      *(_DWORD *)int buf = 136447490;
      uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
      __int16 v70 = 2082;
      int v71 = (const char *)(v4 + 191);
      __int16 v72 = 2080;
      char v73 = " ";
      __int16 v74 = 1024;
      int v75 = v37;
      __int16 v76 = 1024;
      *(_DWORD *)__int16 v77 = v38;
      *(_WORD *)&v77[4] = 2048;
      *(void *)&v77[6] = a2;
      int v39 = "%{public}s %{public}s%s<i%u:s%d> protocol hash node %p didn't have object";
    }

    else if (v66)
    {
      int v45 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v35 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v36 = type;
      BOOL v46 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v45)
      {
        if (v46)
        {
          int v48 = *(_DWORD *)(v4 + 176);
          int v47 = *(_DWORD *)(v4 + 180);
          *(_DWORD *)int buf = 136447746;
          uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
          __int16 v70 = 2082;
          int v71 = (const char *)(v4 + 191);
          __int16 v72 = 2080;
          char v73 = " ";
          __int16 v74 = 1024;
          int v75 = v47;
          __int16 v76 = 1024;
          *(_DWORD *)__int16 v77 = v48;
          *(_WORD *)&v77[4] = 2048;
          *(void *)&v77[6] = a2;
          *(_WORD *)&v77[14] = 2082;
          *(void *)&v77[16] = v45;
          _os_log_impl( &dword_181A5C000,  v35,  v36,  "%{public}s %{public}s%s<i%u:s%d> protocol hash node %p didn't have object, dumping backtrace:%{public}s",  buf,  0x40u);
        }

        free(v45);
        goto LABEL_88;
      }

      if (!v46)
      {
LABEL_88:
        if (!v34) {
          return 1LL;
        }
        int v54 = (char *)v34;
        goto LABEL_90;
      }

      int v58 = *(_DWORD *)(v4 + 176);
      int v57 = *(_DWORD *)(v4 + 180);
      *(_DWORD *)int buf = 136447490;
      uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
      __int16 v70 = 2082;
      int v71 = (const char *)(v4 + 191);
      __int16 v72 = 2080;
      char v73 = " ";
      __int16 v74 = 1024;
      int v75 = v57;
      __int16 v76 = 1024;
      *(_DWORD *)__int16 v77 = v58;
      *(_WORD *)&v77[4] = 2048;
      *(void *)&v77[6] = a2;
      int v39 = "%{public}s %{public}s%s<i%u:s%d> protocol hash node %p didn't have object, no backtrace";
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v35 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v36 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_88;
      }
      int v56 = *(_DWORD *)(v4 + 176);
      int v55 = *(_DWORD *)(v4 + 180);
      *(_DWORD *)int buf = 136447490;
      uint64_t v69 = "nw_protocol_http2_process_connected_block_invoke";
      __int16 v70 = 2082;
      int v71 = (const char *)(v4 + 191);
      __int16 v72 = 2080;
      char v73 = " ";
      __int16 v74 = 1024;
      int v75 = v55;
      __int16 v76 = 1024;
      *(_DWORD *)__int16 v77 = v56;
      *(_WORD *)&v77[4] = 2048;
      *(void *)&v77[6] = a2;
      int v39 = "%{public}s %{public}s%s<i%u:s%d> protocol hash node %p didn't have object, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v35, v36, v39, buf, 0x36u);
    goto LABEL_88;
  }

  return 1LL;
}

BOOL nw_http2_stream_connect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v51 = "nw_http2_stream_connect";
    int v22 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_http2_stream_connect";
      os_log_type_t v25 = "%{public}s called with null http2";
    }

    else if (v48)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v51 = "nw_http2_stream_connect";
          __int16 v52 = 2082;
          BOOL v53 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_87:
        if (v22)
        {
          int v45 = (char *)v22;
LABEL_100:
          free(v45);
          return a1 != 0;
        }

        return a1 != 0;
      }

      if (!v31) {
        goto LABEL_87;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_http2_stream_connect";
      os_log_type_t v25 = "%{public}s called with null http2, no backtrace";
    }

    else
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v51 = "nw_http2_stream_connect";
      os_log_type_t v25 = "%{public}s called with null http2, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
    goto LABEL_87;
  }

  if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v27 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v29 = *(_DWORD *)(a2 + 176);
      int v28 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)int buf = 136447746;
      BOOL v51 = "nw_http2_stream_connect";
      __int16 v52 = 2082;
      BOOL v53 = (void *)(a2 + 191);
      __int16 v54 = 2080;
      int v55 = " ";
      __int16 v56 = 1024;
      int v57 = v28;
      __int16 v58 = 1024;
      int v59 = v29;
      __int16 v60 = 1024;
      int v61 = v29;
      __int16 v62 = 2048;
      uint64_t v63 = a2;
      _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called for stream %d (%p)",  buf,  0x3Cu);
    }
  }

  int v6 = *(unsigned __int16 *)(a2 + 188);
  int v7 = v6 | (*(unsigned __int8 *)(a2 + 190) << 16);
  if ((v6 & 1) == 0)
  {
    if (!*(void *)(a2 + 32))
    {
      uint64_t v8 = mach_continuous_approximate_time();
      if (v8 <= 1) {
        uint64_t v9 = 1LL;
      }
      else {
        uint64_t v9 = v8;
      }
      *(void *)(a2 + 32) = v9;
      int v7 = *(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16);
    }

    unsigned int v10 = v7 & 0xFFEFFFF6 | 0x100001;
    *(_WORD *)(a2 + 18_Block_object_dispose((const void *)(v20 - 192), 8) = v10;
    *(_BYTE *)(a2 + 190) = BYTE2(v10);
    uint64_t v11 = *(void **)(a2 + 96);
    v47[0] = MEMORY[0x1895F87A8];
    v47[1] = 0x40000000LL;
    v47[2] = ___ZL23nw_http2_stream_connectP17nw_protocol_http2P12http2_streamP11nw_protocol_block_invoke;
    v47[3] = &__block_descriptor_tmp_45_82717;
    v47[4] = a2;
    v47[5] = a1;
    nw_http_transaction_metadata_set_event_handler(v11, v47);
    if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v32 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v34 = *(_DWORD *)(a2 + 176);
        int v33 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)int buf = 136447490;
        BOOL v51 = "nw_http2_stream_connect";
        __int16 v52 = 2082;
        BOOL v53 = (void *)(a2 + 191);
        __int16 v54 = 2080;
        int v55 = " ";
        __int16 v56 = 1024;
        int v57 = v33;
        __int16 v58 = 1024;
        int v59 = v34;
        __int16 v60 = 1024;
        int v61 = v34;
        _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> connect complete for stream %d, calling connected",  buf,  0x32u);
      }
    }

    uint64_t v12 = *(void *)(a3 + 24);
    if (!v12 || (BOOL v13 = *(void (**)(uint64_t, uint64_t))(v12 + 40)) == 0LL)
    {
      __nwlog_obj();
      int v14 = *(const char **)(a3 + 16);
      if (!v14) {
        int v14 = "invalid";
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v51 = "nw_http2_stream_connect";
      __int16 v52 = 2082;
      BOOL v53 = (void *)v14;
      uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v48 = 0;
      if (__nwlog_fault(v15, &type, &v48))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v16 = (os_log_s *)__nwlog_obj();
          os_log_type_t v17 = type;
          if (!os_log_type_enabled(v16, type)) {
            goto LABEL_98;
          }
          os_log_type_t v18 = *(const char **)(a3 + 16);
          if (!v18) {
            os_log_type_t v18 = "invalid";
          }
LABEL_21:
          *(_DWORD *)int buf = 136446466;
          BOOL v51 = "nw_http2_stream_connect";
          __int16 v52 = 2082;
          BOOL v53 = (void *)v18;
          uint64_t v19 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_97:
          _os_log_impl(&dword_181A5C000, v16, v17, v19, buf, 0x16u);
          goto LABEL_98;
        }

        if (v48)
        {
          int v38 = (char *)__nw_create_backtrace_string();
          uint64_t v16 = (os_log_s *)__nwlog_obj();
          os_log_type_t v17 = type;
          BOOL v39 = os_log_type_enabled(v16, type);
          if (v38)
          {
            if (v39)
            {
              if (*(void *)(a3 + 16)) {
                uint64_t v40 = *(const char **)(a3 + 16);
              }
              else {
                uint64_t v40 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              BOOL v51 = "nw_http2_stream_connect";
              __int16 v52 = 2082;
              BOOL v53 = (void *)v40;
              __int16 v54 = 2082;
              int v55 = v38;
              _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v38);
            goto LABEL_98;
          }

          if (!v39) {
            goto LABEL_98;
          }
          BOOL v46 = *(const char **)(a3 + 16);
          if (!v46) {
            BOOL v46 = "invalid";
          }
LABEL_96:
          *(_DWORD *)int buf = 136446466;
          BOOL v51 = "nw_http2_stream_connect";
          __int16 v52 = 2082;
          BOOL v53 = (void *)v46;
          uint64_t v19 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
          goto LABEL_97;
        }

        uint64_t v16 = (os_log_s *)__nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_98;
        }
        int v44 = *(const char **)(a3 + 16);
        if (!v44) {
          int v44 = "invalid";
        }
LABEL_79:
        *(_DWORD *)int buf = 136446466;
        BOOL v51 = "nw_http2_stream_connect";
        __int16 v52 = 2082;
        BOOL v53 = (void *)v44;
        uint64_t v19 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_97;
      }

      goto LABEL_98;
    }

void ___ZL23nw_http2_stream_connectP17nw_protocol_http2P12http2_streamP11nw_protocol_block_invoke( uint64_t a1, void *a2, int a3)
{
  v111[2] = *MEMORY[0x1895F89C0];
  switch(a3)
  {
    case 0:
      id outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v100[0] = MEMORY[0x1895F87A8];
        v100[1] = 0x40000000LL;
        v100[2] = ___ZL23nw_http2_stream_connectP17nw_protocol_http2P12http2_streamP11nw_protocol_block_invoke_2;
        v100[3] = &__block_descriptor_tmp_36_82725;
        __int128 v101 = *(_OWORD *)(a1 + 32);
        id v8 = v6;
        uint64_t v9 = v100;
        _nw_http_request_access_method((uint64_t)v8, v9);
      }

      if (!v7) {
        goto LABEL_46;
      }
      id v10 = v7;
      int status_code = _nw_http_response_get_status_code();

      uint64_t v12 = *(void *)(a1 + 32);
      if (v12)
      {
        if (((*(unsigned __int16 *)(v12 + 188) | (*(unsigned __int8 *)(v12 + 190) << 16)) & 0x80000) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          uint64_t v13 = ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v14 = *(void *)(a1 + 32);
            uint64_t v15 = (const char *)(v14 + 191);
            uint64_t v16 = "";
            BOOL v17 = v14 == 0;
            if (!v14) {
              uint64_t v15 = "";
            }
            uint64_t v20 = v14 + 176;
            int v18 = *(_DWORD *)(v14 + 176);
            int v19 = *(_DWORD *)(v20 + 4);
            if (!v17) {
              uint64_t v16 = " ";
            }
            *(_DWORD *)int buf = 136447490;
            char v103 = "nw_http2_stream_connect_block_invoke";
            __int16 v104 = 2082;
            os_log_type_t v105 = v15;
            __int16 v106 = 2080;
            __int16 v107 = v16;
            __int16 v108 = 1024;
            int v109 = v19;
            __int16 v110 = 1024;
            LODWORD(v111[0]) = v18;
            WORD2(v111[0]) = 1024;
            *(_DWORD *)((char *)v111 + 6) = status_code;
            BOOL v21 = "%{public}s %{public}s%s<i%u:s%d> sending response header {status=%hu}";
            goto LABEL_43;
          }
        }
      }

      else
      {
        uint64_t v81 = *(void *)(a1 + 40);
        if (!v81 || (*(__int16 *)(v81 + 388) & 0x80000000) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          uint64_t v82 = ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v83 = *(void *)(a1 + 40);
            int v84 = "";
            BOOL v85 = v83 == 0;
            int v86 = *(_DWORD *)(v83 + 368);
            int v87 = (const char *)(v83 + 390);
            char v103 = "nw_http2_stream_connect_block_invoke";
            __int16 v104 = 2082;
            if (v85) {
              int v87 = "";
            }
            *(_DWORD *)int buf = 136447234;
            if (!v85) {
              int v84 = " ";
            }
            os_log_type_t v105 = v87;
            __int16 v106 = 2080;
            __int16 v107 = v84;
            __int16 v108 = 1024;
            int v109 = v86;
            __int16 v110 = 1024;
            LODWORD(v111[0]) = status_code;
            BOOL v21 = "%{public}s %{public}s%s<i%u> sending response header {status=%hu}";
            goto LABEL_123;
          }
        }
      }

      goto LABEL_45;
    case 1:
      outbound_body_size_t size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      uint64_t v29 = *(void *)(a1 + 32);
      if (v29)
      {
        if (((*(unsigned __int16 *)(v29 + 188) | (*(unsigned __int8 *)(v29 + 190) << 16)) & 0x80000) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          int v30 = (os_log_s *)ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v31 = *(void *)(a1 + 32);
            int v32 = (const char *)(v31 + 191);
            int v33 = "";
            BOOL v34 = v31 == 0;
            if (!v31) {
              int v32 = "";
            }
            uint64_t v37 = v31 + 176;
            int v35 = *(_DWORD *)(v31 + 176);
            int v36 = *(_DWORD *)(v37 + 4);
            if (!v34) {
              int v33 = " ";
            }
            *(_DWORD *)int buf = 136447490;
            char v103 = "nw_http2_stream_connect_block_invoke";
            __int16 v104 = 2082;
            os_log_type_t v105 = v32;
            __int16 v106 = 2080;
            __int16 v107 = v33;
            __int16 v108 = 1024;
            int v109 = v36;
            __int16 v110 = 1024;
            LODWORD(v111[0]) = v35;
            WORD2(v111[0]) = 2048;
            *(void *)((char *)v111 + 6) = outbound_body_size;
            int v38 = "%{public}s %{public}s%s<i%u:s%d> finished sending {body_bytes=%llu}";
            goto LABEL_60;
          }
        }
      }

      else
      {
        uint64_t v67 = *(void *)(a1 + 40);
        if (!v67 || (*(__int16 *)(v67 + 388) & 0x80000000) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          uint64_t v68 = (os_log_s *)ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v69 = *(void *)(a1 + 40);
            __int16 v70 = (const char *)(v69 + 390);
            int v71 = "";
            BOOL v72 = v69 == 0;
            int v73 = *(_DWORD *)(v69 + 368);
            char v103 = "nw_http2_stream_connect_block_invoke";
            if (v72) {
              __int16 v70 = "";
            }
            __int16 v104 = 2082;
            *(_DWORD *)int buf = 136447234;
            if (!v72) {
              int v71 = " ";
            }
            os_log_type_t v105 = v70;
            __int16 v106 = 2080;
            __int16 v107 = v71;
            __int16 v108 = 1024;
            int v109 = v73;
            __int16 v110 = 2048;
            v111[0] = outbound_body_size;
            __int16 v74 = "%{public}s %{public}s%s<i%u> finished sending {body_bytes=%llu}";
            goto LABEL_102;
          }
        }
      }

      return;
    case 2:
      id outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v39 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v98[0] = MEMORY[0x1895F87A8];
        v98[1] = 0x40000000LL;
        v98[2] = ___ZL23nw_http2_stream_connectP17nw_protocol_http2P12http2_streamP11nw_protocol_block_invoke_37;
        v98[3] = &__block_descriptor_tmp_38_82730;
        __int128 v99 = *(_OWORD *)(a1 + 32);
        id v40 = v6;
        int v41 = v98;
        _nw_http_request_access_method((uint64_t)v40, v41);
      }

      if (!v39) {
        goto LABEL_46;
      }
      id v10 = v39;
      int v42 = _nw_http_response_get_status_code();

      uint64_t v43 = *(void *)(a1 + 32);
      if (v43)
      {
        if (((*(unsigned __int16 *)(v43 + 188) | (*(unsigned __int8 *)(v43 + 190) << 16)) & 0x80000) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          uint64_t v13 = ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v44 = *(void *)(a1 + 32);
            int v45 = (const char *)(v44 + 191);
            BOOL v46 = "";
            BOOL v47 = v44 == 0;
            if (!v44) {
              int v45 = "";
            }
            uint64_t v50 = v44 + 176;
            int v48 = *(_DWORD *)(v44 + 176);
            int v49 = *(_DWORD *)(v50 + 4);
            if (!v47) {
              BOOL v46 = " ";
            }
            *(_DWORD *)int buf = 136447490;
            char v103 = "nw_http2_stream_connect_block_invoke";
            __int16 v104 = 2082;
            os_log_type_t v105 = v45;
            __int16 v106 = 2080;
            __int16 v107 = v46;
            __int16 v108 = 1024;
            int v109 = v49;
            __int16 v110 = 1024;
            LODWORD(v111[0]) = v48;
            WORD2(v111[0]) = 1024;
            *(_DWORD *)((char *)v111 + 6) = v42;
            BOOL v21 = "%{public}s %{public}s%s<i%u:s%d> receiving response header {status=%hu}";
LABEL_43:
            BOOL v51 = (os_log_s *)v13;
            uint32_t v52 = 50;
LABEL_44:
            _os_log_impl(&dword_181A5C000, v51, OS_LOG_TYPE_INFO, v21, buf, v52);
          }
        }
      }

      else
      {
        uint64_t v88 = *(void *)(a1 + 40);
        if (!v88 || (*(__int16 *)(v88 + 388) & 0x80000000) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          uint64_t v82 = ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v89 = *(void *)(a1 + 40);
            int v90 = "";
            BOOL v91 = v89 == 0;
            int v92 = *(_DWORD *)(v89 + 368);
            int v93 = (const char *)(v89 + 390);
            char v103 = "nw_http2_stream_connect_block_invoke";
            __int16 v104 = 2082;
            if (v91) {
              int v93 = "";
            }
            *(_DWORD *)int buf = 136447234;
            if (!v91) {
              int v90 = " ";
            }
            os_log_type_t v105 = v93;
            __int16 v106 = 2080;
            __int16 v107 = v90;
            __int16 v108 = 1024;
            int v109 = v92;
            __int16 v110 = 1024;
            LODWORD(v111[0]) = v42;
            BOOL v21 = "%{public}s %{public}s%s<i%u> receiving response header {status=%hu}";
LABEL_123:
            BOOL v51 = (os_log_s *)v82;
            uint32_t v52 = 44;
            goto LABEL_44;
          }
        }
      }

void ___ZL23nw_http2_stream_connectP17nw_protocol_http2P12http2_streamP11nw_protocol_block_invoke_2( uint64_t a1, uint64_t a2)
{
  v32[2] = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (((*(unsigned __int16 *)(v4 + 188) | (*(unsigned __int8 *)(v4 + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v5 = ghttpLogObj;
      if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        id v7 = (const char *)(v6 + 191);
        id v8 = "";
        BOOL v9 = v6 == 0;
        if (!v6) {
          id v7 = "";
        }
        uint64_t v12 = v6 + 176;
        int v10 = *(_DWORD *)(v6 + 176);
        int v11 = *(_DWORD *)(v12 + 4);
        if (!v9) {
          id v8 = " ";
        }
        int v23 = 136447490;
        os_log_type_t v24 = "nw_http2_stream_connect_block_invoke";
        __int16 v25 = 2082;
        id v26 = v7;
        __int16 v27 = 2080;
        int v28 = v8;
        __int16 v29 = 1024;
        int v30 = v11;
        __int16 v31 = 1024;
        LODWORD(v32[0]) = v10;
        WORD2(v32[0]) = 2082;
        *(void *)((char *)v32 + 6) = a2;
        uint64_t v13 = "%{public}s %{public}s%s<i%u:s%d> sending request header {method=%{public}s}";
        uint64_t v14 = (os_log_s *)v5;
        uint32_t v15 = 54;
LABEL_11:
        _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v23, v15);
      }
    }
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 40);
    if (!v16 || (*(__int16 *)(v16 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v17 = ghttpLogObj;
      if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(a1 + 40);
        int v19 = "";
        uint64_t v20 = (const char *)(v18 + 390);
        BOOL v21 = v18 == 0;
        int v22 = *(_DWORD *)(v18 + 368);
        if (v21) {
          uint64_t v20 = "";
        }
        int v23 = 136447234;
        os_log_type_t v24 = "nw_http2_stream_connect_block_invoke_2";
        if (!v21) {
          int v19 = " ";
        }
        __int16 v25 = 2082;
        id v26 = v20;
        __int16 v27 = 2080;
        int v28 = v19;
        __int16 v29 = 1024;
        int v30 = v22;
        __int16 v31 = 2082;
        v32[0] = a2;
        uint64_t v13 = "%{public}s %{public}s%s<i%u> sending request header {method=%{public}s}";
        uint64_t v14 = (os_log_s *)v17;
        uint32_t v15 = 48;
        goto LABEL_11;
      }
    }
  }

void ___ZL23nw_http2_stream_connectP17nw_protocol_http2P12http2_streamP11nw_protocol_block_invoke_37( uint64_t a1, uint64_t a2)
{
  v32[2] = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (((*(unsigned __int16 *)(v4 + 188) | (*(unsigned __int8 *)(v4 + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v5 = ghttpLogObj;
      if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        id v7 = (const char *)(v6 + 191);
        id v8 = "";
        BOOL v9 = v6 == 0;
        if (!v6) {
          id v7 = "";
        }
        uint64_t v12 = v6 + 176;
        int v10 = *(_DWORD *)(v6 + 176);
        int v11 = *(_DWORD *)(v12 + 4);
        if (!v9) {
          id v8 = " ";
        }
        int v23 = 136447490;
        os_log_type_t v24 = "nw_http2_stream_connect_block_invoke";
        __int16 v25 = 2082;
        id v26 = v7;
        __int16 v27 = 2080;
        int v28 = v8;
        __int16 v29 = 1024;
        int v30 = v11;
        __int16 v31 = 1024;
        LODWORD(v32[0]) = v10;
        WORD2(v32[0]) = 2082;
        *(void *)((char *)v32 + 6) = a2;
        uint64_t v13 = "%{public}s %{public}s%s<i%u:s%d> receiving request header {method=%{public}s}";
        uint64_t v14 = (os_log_s *)v5;
        uint32_t v15 = 54;
LABEL_11:
        _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v23, v15);
      }
    }
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 40);
    if (!v16 || (*(__int16 *)(v16 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v17 = ghttpLogObj;
      if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(a1 + 40);
        int v19 = "";
        uint64_t v20 = (const char *)(v18 + 390);
        BOOL v21 = v18 == 0;
        int v22 = *(_DWORD *)(v18 + 368);
        if (v21) {
          uint64_t v20 = "";
        }
        int v23 = 136447234;
        os_log_type_t v24 = "nw_http2_stream_connect_block_invoke";
        if (!v21) {
          int v19 = " ";
        }
        __int16 v25 = 2082;
        id v26 = v20;
        __int16 v27 = 2080;
        int v28 = v19;
        __int16 v29 = 1024;
        int v30 = v22;
        __int16 v31 = 2082;
        v32[0] = a2;
        uint64_t v13 = "%{public}s %{public}s%s<i%u> receiving request header {method=%{public}s}";
        uint64_t v14 = (os_log_s *)v17;
        uint32_t v15 = 48;
        goto LABEL_11;
      }
    }
  }

void ___ZL23nw_http2_stream_connectP17nw_protocol_http2P12http2_streamP11nw_protocol_block_invoke_39( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v89 = *MEMORY[0x1895F89C0];
  int start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  uint64_t start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  uint64_t end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_uint64_t start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_uint64_t end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_uint64_t start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_uint64_t end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  outbound_body_size_t size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  inbound_body_size_t size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12)
  {
    if (((*(unsigned __int16 *)(v12 + 188) | (*(unsigned __int8 *)(v12 + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v13 = ghttpLogObj;
      if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        uint32_t v15 = "";
        if (v14) {
          uint64_t v16 = (const char *)(v14 + 191);
        }
        else {
          uint64_t v16 = "";
        }
        if (v14) {
          uint32_t v15 = " ";
        }
        uint64_t v60 = outbound_body_size;
        uint64_t v62 = a2;
        uint64_t v56 = v16;
        __int16 v58 = v15;
        else {
          uint64_t v17 = off_189BC6838[start_reason - 1];
        }
        __int16 v54 = v17;
        int v18 = *(_DWORD *)(v14 + 180);
        int v53 = *(_DWORD *)(v14 + 176);
        int v19 = -1;
        if (start_time && end_time)
        {
          unint64_t v20 = nw_delta_nanos(start_time, end_time);
          if (v20 > 0xF423FFFFFFFFFLL) {
            int v19 = -1;
          }
          else {
            int v19 = v20 / 0xF4240;
          }
        }

        int v21 = -1;
        uint64_t v22 = outbound_message_end_time;
        if (start_time && outbound_message_start_time)
        {
          unint64_t v23 = nw_delta_nanos(start_time, outbound_message_start_time);
          if (v23 > 0xF423FFFFFFFFFLL) {
            int v21 = -1;
          }
          else {
            int v21 = v23 / 0xF4240;
          }
          uint64_t v22 = outbound_message_end_time;
        }

        int v24 = -1;
        if (outbound_message_start_time)
        {
          uint64_t v25 = inbound_message_start_time;
          if (v22)
          {
            unint64_t v26 = nw_delta_nanos(outbound_message_start_time, v22);
            if (v26 > 0xF423FFFFFFFFFLL) {
              int v24 = -1;
            }
            else {
              int v24 = v26 / 0xF4240;
            }
          }

          int v27 = -1;
          if (!start_time) {
            goto LABEL_37;
          }
        }

        else
        {
          uint64_t v25 = inbound_message_start_time;
          int v27 = -1;
          if (!start_time)
          {
LABEL_37:
            LODWORD(v29) = -1;
            if (v25 && inbound_message_end_time)
            {
              unint64_t v30 = nw_delta_nanos(v25, inbound_message_end_time);
              unint64_t v29 = v30 / 0xF4240;
              if (v30 > 0xF423FFFFFFFFFLL) {
                LODWORD(v29) = -1;
              }
            }

            *(_DWORD *)int buf = 136449794;
            uint64_t v68 = "nw_http2_stream_connect_block_invoke";
            __int16 v69 = 2082;
            __int16 v70 = v56;
            __int16 v71 = 2080;
            BOOL v72 = v58;
            __int16 v73 = 1024;
            int v74 = v18;
            __int16 v75 = 1024;
            *(_DWORD *)uint64_t v76 = v53;
            *(_WORD *)&v76[4] = 2080;
            *(void *)&v76[6] = v54;
            __int16 v77 = 1024;
            *(_DWORD *)uint64_t v78 = v19;
            *(_WORD *)&v78[4] = 2082;
            *(void *)&v78[6] = v62;
            __int16 v79 = 1024;
            int v80 = a3;
            __int16 v81 = 1024;
            int v82 = v21;
            __int16 v83 = 1024;
            int v84 = v24;
            __int16 v85 = 1024;
            int v86 = v27;
            __int16 v87 = 1024;
            *(_DWORD *)uint64_t v88 = v29;
            *(_WORD *)&v88[4] = 2048;
            *(void *)&v88[6] = v60;
            *(_WORD *)&v88[14] = 2048;
            *(void *)&v88[16] = inbound_body_size;
            __int16 v31 = "%{public}s %{public}s%s<i%u:s%d> transaction summary {start_reason=%s, duration_ms=%d, request_met"
                  "hod=%{public}s, response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_"
                  "ms=%d, inbound_duration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}";
            int v32 = (os_log_s *)v13;
            uint32_t v33 = 120;
LABEL_42:
            _os_log_impl(&dword_181A5C000, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
            return;
          }
        }

        if (v25)
        {
          unint64_t v28 = nw_delta_nanos(start_time, v25);
          if (v28 > 0xF423FFFFFFFFFLL) {
            int v27 = -1;
          }
          else {
            int v27 = v28 / 0xF4240;
          }
        }

        goto LABEL_37;
      }
    }
  }

  else
  {
    uint64_t v34 = *(void *)(a1 + 48);
    if (!v34 || (*(__int16 *)(v34 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v35 = ghttpLogObj;
      if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = *(void *)(a1 + 48);
        if (v36) {
          uint64_t v37 = (const char *)(v36 + 390);
        }
        else {
          uint64_t v37 = "";
        }
        int v38 = " ";
        if (!v36) {
          int v38 = "";
        }
        int v57 = v37;
        BOOL v59 = v38;
        uint64_t v61 = outbound_body_size;
        uint64_t v63 = a2;
        else {
          id v39 = off_189BC6838[start_reason - 1];
        }
        uint64_t v55 = v39;
        int v40 = *(_DWORD *)(v36 + 368);
        int v41 = -1;
        if (start_time && end_time)
        {
          unint64_t v42 = nw_delta_nanos(start_time, end_time);
          if (v42 > 0xF423FFFFFFFFFLL) {
            int v41 = -1;
          }
          else {
            int v41 = v42 / 0xF4240;
          }
        }

        int v43 = -1;
        uint64_t v44 = outbound_message_end_time;
        if (start_time && outbound_message_start_time)
        {
          unint64_t v45 = nw_delta_nanos(start_time, outbound_message_start_time);
          if (v45 > 0xF423FFFFFFFFFLL) {
            int v43 = -1;
          }
          else {
            int v43 = v45 / 0xF4240;
          }
          uint64_t v44 = outbound_message_end_time;
        }

        int v46 = -1;
        if (outbound_message_start_time)
        {
          uint64_t v47 = inbound_message_start_time;
          if (v44)
          {
            unint64_t v48 = nw_delta_nanos(outbound_message_start_time, v44);
            if (v48 > 0xF423FFFFFFFFFLL) {
              int v46 = -1;
            }
            else {
              int v46 = v48 / 0xF4240;
            }
          }
        }

        else
        {
          uint64_t v47 = inbound_message_start_time;
        }

        int v49 = -1;
        if (start_time && v47)
        {
          unint64_t v50 = nw_delta_nanos(start_time, v47);
          if (v50 > 0xF423FFFFFFFFFLL) {
            int v49 = -1;
          }
          else {
            int v49 = v50 / 0xF4240;
          }
        }

        LODWORD(v51) = -1;
        if (v47)
        {
          if (inbound_message_end_time)
          {
            unint64_t v52 = nw_delta_nanos(v47, inbound_message_end_time);
            unint64_t v51 = v52 / 0xF4240;
            if (v52 > 0xF423FFFFFFFFFLL) {
              LODWORD(v51) = -1;
            }
          }
        }

        *(_DWORD *)int buf = 136449538;
        uint64_t v68 = "nw_http2_stream_connect_block_invoke";
        __int16 v69 = 2082;
        __int16 v70 = v57;
        __int16 v71 = 2080;
        BOOL v72 = v59;
        __int16 v73 = 1024;
        int v74 = v40;
        __int16 v75 = 2080;
        *(void *)uint64_t v76 = v55;
        *(_WORD *)&v76[8] = 1024;
        *(_DWORD *)&v76[10] = v41;
        __int16 v77 = 2082;
        *(void *)uint64_t v78 = v63;
        *(_WORD *)&v78[8] = 1024;
        *(_DWORD *)&v78[10] = a3;
        __int16 v79 = 1024;
        int v80 = v43;
        __int16 v81 = 1024;
        int v82 = v46;
        __int16 v83 = 1024;
        int v84 = v49;
        __int16 v85 = 1024;
        int v86 = v51;
        __int16 v87 = 2048;
        *(void *)uint64_t v88 = v61;
        *(_WORD *)&v88[8] = 2048;
        *(void *)&v88[10] = inbound_body_size;
        __int16 v31 = "%{public}s %{public}s%s<i%u> transaction summary {start_reason=%s, duration_ms=%d, request_method=%{"
              "public}s, response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbou"
              "nd_duration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}";
        int v32 = (os_log_s *)v35;
        uint32_t v33 = 114;
        goto LABEL_42;
      }
    }
  }

uint64_t ___ZL23nw_http2_stream_connectP17nw_protocol_http2P12http2_streamP11nw_protocol_block_invoke_42( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(unsigned __int16 *)(a1 + 40));
}

uint64_t ___ZL31nw_protocol_http2_process_inputP17nw_protocol_http2_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  unsigned int v43 = 0;
  uint64_t v3 = nw_frame_unclaimed_bytes(a2, &v43);
  unsigned int v4 = v43;
  if (v3) {
    BOOL v5 = v43 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = !v5;
  if (!v5)
  {
    uint64_t v7 = v3;
    uint64_t v8 = *(void *)(a1 + 40);
    if ((!v8 || (*(__int16 *)(v8 + 388) & 0x80000000) == 0) && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v36 = (os_log_s *)gconnectionLogObj;
      BOOL v37 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      unsigned int v4 = v43;
      if (v37)
      {
        uint64_t v38 = *(void *)(a1 + 40);
        id v39 = (const char *)(v38 + 390);
        BOOL v40 = v38 == 0;
        int v41 = "";
        if (!v38) {
          id v39 = "";
        }
        int v42 = *(_DWORD *)(v38 + 368);
        if (!v40) {
          int v41 = " ";
        }
        *(_DWORD *)int buf = 136447234;
        unint64_t v45 = "nw_protocol_http2_process_input_block_invoke";
        __int16 v46 = 2082;
        uint64_t v47 = v39;
        __int16 v48 = 2080;
        int v49 = v41;
        __int16 v50 = 1024;
        int v51 = v42;
        __int16 v52 = 1024;
        int v53 = v43;
        _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> processing frame of length %u bytes",  buf,  0x2Cu);
        unsigned int v4 = v43;
      }

      if (!v4)
      {
        unsigned int v9 = 0;
        goto LABEL_55;
      }
    }

    unsigned int v9 = 0;
    while (1)
    {
      uint64_t v10 = MEMORY[0x186E10EFC](*(void *)(*(void *)(a1 + 40) + 96LL), v7 + v9, v4 - v9);
      int v11 = v10;
      if (v10 < 0) {
        break;
      }
      v9 += v10;
      uint64_t v12 = *(void *)(a1 + 40);
      if ((!v12 || (*(__int16 *)(v12 + 388) & 0x80000000) == 0) && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v13 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = *(void *)(a1 + 40);
          uint32_t v15 = (const char *)(v14 + 390);
          BOOL v16 = v14 == 0;
          uint64_t v17 = "";
          if (!v14) {
            uint32_t v15 = "";
          }
          int v18 = *(_DWORD *)(v14 + 368);
          if (!v16) {
            uint64_t v17 = " ";
          }
          *(_DWORD *)int buf = 136447234;
          unint64_t v45 = "nw_protocol_http2_process_input_block_invoke";
          __int16 v46 = 2082;
          uint64_t v47 = v15;
          __int16 v48 = 2080;
          int v49 = v17;
          __int16 v50 = 1024;
          int v51 = v18;
          __int16 v52 = 1024;
          int v53 = v9;
          _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> nghttp2_session_mem_recv consumed %u bytes",  buf,  0x2Cu);
        }
      }

      unsigned int v4 = v43;
      if (v9 >= v43) {
        goto LABEL_55;
      }
    }

    if (v10 != -902 || (*(_WORD *)(*(void *)(a1 + 40) + 388LL) & 0x10) == 0)
    {
      if ((*(_WORD *)(*(void *)(a1 + 40) + 388LL) & 0x8000) != 0) {
        goto LABEL_54;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v20 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21) {
        uint64_t v22 = (const char *)(v21 + 390);
      }
      else {
        uint64_t v22 = "";
      }
      if (v21) {
        unint64_t v23 = " ";
      }
      else {
        unint64_t v23 = "";
      }
      int v24 = *(_DWORD *)(v21 + 368);
      uint64_t v25 = nghttp2_strerror();
      *(_DWORD *)int buf = 136447490;
      unint64_t v45 = "nw_protocol_http2_process_input_block_invoke";
      __int16 v46 = 2082;
      uint64_t v47 = v22;
      __int16 v48 = 2080;
      int v49 = v23;
      __int16 v50 = 1024;
      int v51 = v24;
      __int16 v52 = 1024;
      int v53 = v11;
      __int16 v54 = 2082;
      uint64_t v55 = v25;
      unint64_t v26 = "%{public}s %{public}s%s<i%u> ERROR: Could not process incoming data: %d (%{public}s)";
      int v27 = (os_log_s *)v20;
      os_log_type_t v28 = OS_LOG_TYPE_ERROR;
    }

    else
    {
      if ((*(_WORD *)(*(void *)(a1 + 40) + 388LL) & 0x8000) != 0) {
        goto LABEL_54;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v29 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      uint64_t v30 = *(void *)(a1 + 40);
      if (v30) {
        __int16 v31 = (const char *)(v30 + 390);
      }
      else {
        __int16 v31 = "";
      }
      if (v30) {
        int v32 = " ";
      }
      else {
        int v32 = "";
      }
      int v33 = *(_DWORD *)(v30 + 368);
      uint64_t v34 = nghttp2_strerror();
      *(_DWORD *)int buf = 136447490;
      unint64_t v45 = "nw_protocol_http2_process_input_block_invoke";
      __int16 v46 = 2082;
      uint64_t v47 = v31;
      __int16 v48 = 2080;
      int v49 = v32;
      __int16 v50 = 1024;
      int v51 = v33;
      __int16 v52 = 1024;
      int v53 = -902;
      __int16 v54 = 2082;
      uint64_t v55 = v34;
      unint64_t v26 = "%{public}s %{public}s%s<i%u> Could not process incoming data: %d (%{public}s), closing";
      int v27 = (os_log_s *)v29;
      os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
    }

    _os_log_impl(&dword_181A5C000, v27, v28, v26, buf, 0x36u);
LABEL_54:
    nw_http2_connection_close(*(void *)(a1 + 40));
LABEL_55:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v9;
  }

  return v6;
}

uint64_t ___ZL31nw_protocol_http2_process_inputP17nw_protocol_http2_block_invoke_48(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)nw_hash_node_get_extra(a2);
  uint64_t object = nw_hash_node_get_object(a2);
  int v6 = *(unsigned __int16 *)(v4 + 188);
  if ((v6 & 1) == 0 || !*(void *)v4) {
    return 1LL;
  }
  uint64_t v7 = object;
  if (((v6 | (*(unsigned __int8 *)(v4 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v20 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v22 = *(_DWORD *)(v4 + 176);
      int v21 = *(_DWORD *)(v4 + 180);
      *(_DWORD *)int buf = 136447490;
      os_log_type_t v28 = "nw_protocol_http2_process_input_block_invoke";
      __int16 v29 = 2082;
      uint64_t v30 = (const char *)(v4 + 191);
      __int16 v31 = 2080;
      int v32 = " ";
      __int16 v33 = 1024;
      int v34 = v21;
      __int16 v35 = 1024;
      int v36 = v22;
      __int16 v37 = 1024;
      int v38 = v22;
      _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> calling input_available on stream %d",  buf,  0x32u);
    }
  }

  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8)
    {
      unsigned int v9 = *(void (**)(uint64_t, void))(v8 + 64);
      if (v9)
      {
        v9(v7, *(void *)(a1 + 32));
        return 1LL;
      }
    }

    __nwlog_obj();
    int v11 = *(const char **)(v7 + 16);
    if (!v11) {
      int v11 = "invalid";
    }
  }

  else
  {
    __nwlog_obj();
    int v11 = "invalid";
  }

  *(_DWORD *)int buf = 136446466;
  os_log_type_t v28 = "nw_protocol_http2_process_input_block_invoke";
  __int16 v29 = 2082;
  uint64_t v30 = v11;
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v12, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_44;
      }
      uint32_t v15 = "invalid";
      if (v7 && *(void *)(v7 + 16)) {
        uint32_t v15 = *(const char **)(v7 + 16);
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v28 = "nw_protocol_http2_process_input_block_invoke";
      __int16 v29 = 2082;
      uint64_t v30 = v15;
      BOOL v16 = "%{public}s protocol %{public}s has invalid input_available callback";
      goto LABEL_43;
    }

    if (!v25)
    {
      uint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_44;
      }
      unint64_t v23 = "invalid";
      if (v7 && *(void *)(v7 + 16)) {
        unint64_t v23 = *(const char **)(v7 + 16);
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v28 = "nw_protocol_http2_process_input_block_invoke";
      __int16 v29 = 2082;
      uint64_t v30 = v23;
      BOOL v16 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
      goto LABEL_43;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v18 = os_log_type_enabled(v13, type);
    if (backtrace_string)
    {
      if (v18)
      {
        int v19 = "invalid";
        if (v7 && *(void *)(v7 + 16)) {
          int v19 = *(const char **)(v7 + 16);
        }
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v28 = "nw_protocol_http2_process_input_block_invoke";
        __int16 v29 = 2082;
        uint64_t v30 = v19;
        __int16 v31 = 2082;
        int v32 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(backtrace_string);
      goto LABEL_44;
    }

    if (v18)
    {
      int v24 = "invalid";
      if (v7 && *(void *)(v7 + 16)) {
        int v24 = *(const char **)(v7 + 16);
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v28 = "nw_protocol_http2_process_input_block_invoke";
      __int16 v29 = 2082;
      uint64_t v30 = v24;
      BOOL v16 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_43:
      _os_log_impl(&dword_181A5C000, v13, v14, v16, buf, 0x16u);
    }
  }

void nw_protocol_http2_frame_output_finalizer(nw_frame *a1, int a2, void *a3)
{
  uint64_t v116 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v10_Block_object_dispose((const void *)(v20 - 192), 8) = 0;
    if (type != 17)
    {
      if ((_BYTE)v108)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v94 = os_log_type_enabled(v4, (os_log_type_t)type);
        if (backtrace_string)
        {
          if (v94)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
            __int16 v112 = 2082;
            *(void *)__int16 v113 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
        }

        else if (v94)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
          int v6 = "%{public}s called with null frame, no backtrace";
          goto LABEL_41;
        }
      }

      else
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (os_log_type_enabled(v4, (os_log_type_t)type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
          int v6 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_41;
        }
      }

      goto LABEL_42;
    }

    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, (os_log_type_t)type)) {
      goto LABEL_42;
    }
    *(_DWORD *)int buf = 136446210;
    __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
    int v6 = "%{public}s called with null frame";
LABEL_41:
    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_42;
  }

  if (a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v10_Block_object_dispose((const void *)(v20 - 192), 8) = 0;
    if (type == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
      int v6 = "%{public}s http2 output frames should no longer have nonnull context";
      goto LABEL_41;
    }

    if (!(_BYTE)v108)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
      int v6 = "%{public}s http2 output frames should no longer have nonnull context, backtrace limit exceeded";
      goto LABEL_41;
    }

    os_log_type_t v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (os_log_s *)gLogObj;
    os_log_type_t v5 = type;
    BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type);
    if (!v14)
    {
      if (!v15) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
      int v6 = "%{public}s http2 output frames should no longer have nonnull context, no backtrace";
      goto LABEL_41;
    }

    if (v15)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
      __int16 v112 = 2082;
      *(void *)__int16 v113 = v14;
      BOOL v16 = "%{public}s http2 output frames should no longer have nonnull context, dumping backtrace:%{public}s";
LABEL_16:
      _os_log_impl(&dword_181A5C000, v4, v5, v16, buf, 0x16u);
      goto LABEL_17;
    }

    goto LABEL_17;
  }

  if (gLogDatapath)
  {
    __int16 v95 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446978;
      __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
      __int16 v112 = 2048;
      *(void *)__int16 v113 = a1;
      *(_WORD *)&v113[8] = 1024;
      *(_DWORD *)&_BYTE v113[10] = a2;
      *(_WORD *)&v113[14] = 2048;
      *(void *)&v113[16] = 0LL;
      _os_log_impl( &dword_181A5C000,  v95,  OS_LOG_TYPE_DEBUG,  "%{public}s called with frame %p success %d context %p",  buf,  0x26u);
    }
  }

  __int16 v9 = *((_WORD *)a1 + 102);
  uint64_t v10 = (uint64_t *)((char *)a1 + 208);
  if ((v9 & 4) != 0)
  {
    uint64_t v11 = *v10;
    if (*v10)
    {
      uint64_t v12 = *((void *)a1 + 2);
      uint64_t v13 = (void *)*((void *)a1 + 3);
      if (v12)
      {
        *(void *)(v12 + 24) = v13;
        uint64_t v13 = (void *)*((void *)a1 + 3);
      }

      else
      {
        *(void *)(v11 + 192) = v13;
      }

      *uint64_t v13 = v12;
      *((void *)a1 + 2) = 0LL;
      *((void *)a1 + 3) = 0LL;
      if (!a2)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v28 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_142;
        }
        int v29 = *(_DWORD *)(v11 + 368);
        *(_DWORD *)int buf = 136446978;
        __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
        __int16 v112 = 2082;
        *(void *)__int16 v113 = v11 + 390;
        *(_WORD *)&v113[8] = 2080;
        *(void *)&_BYTE v113[10] = " ";
        *(_WORD *)&v113[18] = 1024;
        *(_DWORD *)&v113[20] = v29;
        int v24 = "%{public}s %{public}s%s<i%u> disposing of output frame, finalizer called with success == false";
        char v25 = (os_log_s *)v28;
        os_log_type_t v26 = OS_LOG_TYPE_DEBUG;
        uint32_t v27 = 38;
LABEL_30:
        _os_log_impl(&dword_181A5C000, v25, v26, v24, buf, v27);
        goto LABEL_142;
      }

      uint64_t v17 = (void *)*((void *)a1 + 27);
      if (v17)
      {
        uint64_t stream_from_protocol = nw_http2_get_stream_from_protocol(v11, *((void *)a1 + 27));
        if (stream_from_protocol)
        {
          uint64_t v19 = stream_from_protocol;
          int v20 = *(unsigned __int16 *)(stream_from_protocol + 188);
          if ((v20 & 1) == 0 && *(int *)(stream_from_protocol + 176) >= 1)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v21 = gconnectionLogObj;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_142;
            }
            int v23 = *(_DWORD *)(v19 + 176);
            int v22 = *(_DWORD *)(v19 + 180);
            *(_DWORD *)int buf = 136447234;
            __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
            __int16 v112 = 2082;
            *(void *)__int16 v113 = v19 + 191;
            *(_WORD *)&v113[8] = 2080;
            *(void *)&_BYTE v113[10] = " ";
            *(_WORD *)&v113[18] = 1024;
            *(_DWORD *)&v113[20] = v22;
            *(_WORD *)&v113[24] = 1024;
            *(_DWORD *)&v113[26] = v23;
            int v24 = "%{public}s %{public}s%s<i%u:s%d> Cannot send data on a stream that is not open but has a greater than zero stream id";
            char v25 = (os_log_s *)v21;
            os_log_type_t v26 = OS_LOG_TYPE_ERROR;
            uint32_t v27 = 44;
            goto LABEL_30;
          }

          uint64_t v36 = *(void *)(stream_from_protocol + 104);
          if (nw_protocol_copy_http_definition_onceToken != -1) {
            dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
          }
          id v37 = (id)nw_protocol_copy_http_definition_http_definition;
          int v38 = nw_frame_copy_metadata_for_protocol((uint64_t)a1, (uint64_t)v37);
          uint64_t v39 = v38;
          if (v36)
          {
            if (v37) {
              os_release(v37);
            }
            if (v39)
            {
              __int128 type = 0uLL;
              nw_protocol_metadata_copy_identifier(v39, &type);
              __int128 v108 = 0uLL;
              nw_protocol_metadata_copy_identifier(*(void **)(v19 + 104), &v108);
              if (v108 == type)
              {
                os_release(v39);
                goto LABEL_124;
              }

              __nwlog_obj();
              *(_DWORD *)int buf = 136447234;
              __int16 v111 = "nw_http2_save_metadata_from_frame";
              __int16 v112 = 1040;
              *(_DWORD *)__int16 v113 = 16;
              *(_WORD *)&v113[4] = 2096;
              *(void *)&v113[6] = &v108;
              *(_WORD *)&v113[14] = 1040;
              *(_DWORD *)&v113[16] = 16;
              *(_WORD *)&v113[20] = 2096;
              *(void *)&v113[22] = &type;
              uint64_t v60 = (char *)_os_log_send_and_compose_impl();
              os_log_type_t v107 = OS_LOG_TYPE_ERROR;
              char v106 = 0;
              if (v107 == OS_LOG_TYPE_FAULT)
              {
                uint64_t v61 = (os_log_s *)__nwlog_obj();
                os_log_type_t v62 = v107;
                if (os_log_type_enabled(v61, v107))
                {
                  *(_DWORD *)int buf = 136447234;
                  __int16 v111 = "nw_http2_save_metadata_from_frame";
                  __int16 v112 = 1040;
                  *(_DWORD *)__int16 v113 = 16;
                  *(_WORD *)&v113[4] = 2096;
                  *(void *)&v113[6] = &v108;
                  *(_WORD *)&v113[14] = 1040;
                  *(_DWORD *)&v113[16] = 16;
                  *(_WORD *)&v113[20] = 2096;
                  *(void *)&v113[22] = &type;
                  uint64_t v63 = "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_"
                        "t}.16P != new %{uuid_t}.16P)";
LABEL_176:
                  _os_log_impl(&dword_181A5C000, v61, v62, v63, buf, 0x2Cu);
                }
              }

              else if (v106)
              {
                __int16 v81 = (char *)__nw_create_backtrace_string();
                uint64_t v61 = (os_log_s *)__nwlog_obj();
                os_log_type_t v62 = v107;
                BOOL v82 = os_log_type_enabled(v61, v107);
                if (v81)
                {
                  if (v82)
                  {
                    *(_DWORD *)int buf = 136447490;
                    __int16 v111 = "nw_http2_save_metadata_from_frame";
                    __int16 v112 = 1040;
                    *(_DWORD *)__int16 v113 = 16;
                    *(_WORD *)&v113[4] = 2096;
                    *(void *)&v113[6] = &v108;
                    *(_WORD *)&v113[14] = 1040;
                    *(_DWORD *)&v113[16] = 16;
                    *(_WORD *)&v113[20] = 2096;
                    *(void *)&v113[22] = &type;
                    *(_WORD *)&v113[30] = 2082;
                    *(void *)&v113[32] = v81;
                    _os_log_impl( &dword_181A5C000,  v61,  v62,  "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_t} .16P != new %{uuid_t}.16P), dumping backtrace:%{public}s",  buf,  0x36u);
                  }

                  free(v81);
                  goto LABEL_177;
                }

                if (v82)
                {
                  *(_DWORD *)int buf = 136447234;
                  __int16 v111 = "nw_http2_save_metadata_from_frame";
                  __int16 v112 = 1040;
                  *(_DWORD *)__int16 v113 = 16;
                  *(_WORD *)&v113[4] = 2096;
                  *(void *)&v113[6] = &v108;
                  *(_WORD *)&v113[14] = 1040;
                  *(_DWORD *)&v113[16] = 16;
                  *(_WORD *)&v113[20] = 2096;
                  *(void *)&v113[22] = &type;
                  uint64_t v63 = "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_"
                        "t}.16P != new %{uuid_t}.16P), no backtrace";
                  goto LABEL_176;
                }
              }

              else
              {
                uint64_t v61 = (os_log_s *)__nwlog_obj();
                os_log_type_t v62 = v107;
                if (os_log_type_enabled(v61, v107))
                {
                  *(_DWORD *)int buf = 136447234;
                  __int16 v111 = "nw_http2_save_metadata_from_frame";
                  __int16 v112 = 1040;
                  *(_DWORD *)__int16 v113 = 16;
                  *(_WORD *)&v113[4] = 2096;
                  *(void *)&v113[6] = &v108;
                  *(_WORD *)&v113[14] = 1040;
                  *(_DWORD *)&v113[16] = 16;
                  *(_WORD *)&v113[20] = 2096;
                  *(void *)&v113[22] = &type;
                  uint64_t v63 = "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_"
                        "t}.16P != new %{uuid_t}.16P), backtrace limit exceeded";
                  goto LABEL_176;
                }
              }

BOOL nw_http2_submit_message(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v378 = *MEMORY[0x1895F89C0];
  uint64_t v8 = &qword_18C45F000;
  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v210 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v212 = *(_DWORD *)(a3 + 176);
      int v211 = *(_DWORD *)(a3 + 180);
      LODWORD(buf[0]) = 136447234;
      *(void *)((char *)buf + 4) = "nw_http2_submit_message";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = a3 + 191;
      HIWORD(buf[2]) = 2080;
      *(void *)&__int128 v370 = " ";
      WORD4(v370) = 1024;
      *(_DWORD *)((char *)&v370 + 10) = v211;
      HIWORD(v370) = 1024;
      LODWORD(v371[0]) = v212;
      _os_log_impl( &dword_181A5C000,  v210,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called",  (uint8_t *)buf,  0x2Cu);
    }
  }

  int v9 = *(unsigned __int16 *)(a3 + 188);
  int v10 = v9 | (*(unsigned __int8 *)(a3 + 190) << 16);
  if ((v9 & 1) == 0)
  {
    if ((v10 & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v11 = gconnectionLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v14 = *(_DWORD *)(a3 + 176);
        int v13 = *(_DWORD *)(a3 + 180);
        LODWORD(buf[0]) = 136447746;
        *(void *)((char *)buf + 4) = "nw_http2_submit_message";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a3 + 191;
        HIWORD(buf[2]) = 2080;
        *(void *)&__int128 v370 = " ";
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = v13;
        HIWORD(v370) = 1024;
        LODWORD(v371[0]) = v14;
        WORD2(v371[0]) = 2048;
        *(void **)((char *)v371 + 6) = a2;
        HIWORD(v371[1]) = 2048;
        v371[2] = (void *)a3;
        BOOL v15 = "%{public}s %{public}s%s<i%u:s%d> ERROR: Cannot send headers on a stream that is not considered open (proto"
              "col %p, stream %p)";
        BOOL v16 = (os_log_s *)v11;
        os_log_type_t v17 = OS_LOG_TYPE_ERROR;
        uint32_t v18 = 64;
LABEL_9:
        _os_log_impl(&dword_181A5C000, v16, v17, v15, (uint8_t *)buf, v18);
        return 0LL;
      }

      return result;
    }

    return 0LL;
  }

  if (!*(void *)(a3 + 104))
  {
    if ((v10 & 0x80000) != 0) {
      return 0LL;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v25 = *(_DWORD *)(a3 + 176);
    int v24 = *(_DWORD *)(a3 + 180);
    LODWORD(buf[0]) = 136447234;
    *(void *)((char *)buf + 4) = "nw_http2_submit_message";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = a3 + 191;
    HIWORD(buf[2]) = 2080;
    *(void *)&__int128 v370 = " ";
    WORD4(v370) = 1024;
    *(_DWORD *)((char *)&v370 + 10) = v24;
    HIWORD(v370) = 1024;
    LODWORD(v371[0]) = v25;
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v374[0]) = 0;
    if (__nwlog_fault(v26, type, v374))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint32_t v27 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v28 = type[0];
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type[0])) {
          goto LABEL_97;
        }
        int v30 = *(_DWORD *)(a3 + 176);
        int v29 = *(_DWORD *)(a3 + 180);
        LODWORD(buf[0]) = 136447234;
        *(void *)((char *)buf + 4) = "nw_http2_submit_message";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a3 + 191;
        HIWORD(buf[2]) = 2080;
        *(void *)&__int128 v370 = " ";
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = v29;
        HIWORD(v370) = 1024;
        LODWORD(v371[0]) = v30;
        __int16 v31 = "%{public}s %{public}s%s<i%u:s%d> Cannot send on a stream without outbound_metadata";
        goto LABEL_96;
      }

      if (!LOBYTE(v374[0]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint32_t v27 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v28 = type[0];
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type[0])) {
          goto LABEL_97;
        }
        int v64 = *(_DWORD *)(a3 + 176);
        int v63 = *(_DWORD *)(a3 + 180);
        LODWORD(buf[0]) = 136447234;
        *(void *)((char *)buf + 4) = "nw_http2_submit_message";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a3 + 191;
        HIWORD(buf[2]) = 2080;
        *(void *)&__int128 v370 = " ";
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = v63;
        HIWORD(v370) = 1024;
        LODWORD(v371[0]) = v64;
        __int16 v31 = "%{public}s %{public}s%s<i%u:s%d> Cannot send on a stream without outbound_metadata, backtrace limit exceeded";
        goto LABEL_96;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint32_t v27 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v28 = type[0];
      BOOL v35 = os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]);
      if (backtrace_string)
      {
        if (v35)
        {
          int v37 = *(_DWORD *)(a3 + 176);
          int v36 = *(_DWORD *)(a3 + 180);
          LODWORD(buf[0]) = 136447490;
          *(void *)((char *)buf + 4) = "nw_http2_submit_message";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = a3 + 191;
          HIWORD(buf[2]) = 2080;
          *(void *)&__int128 v370 = " ";
          WORD4(v370) = 1024;
          *(_DWORD *)((char *)&v370 + 10) = v36;
          HIWORD(v370) = 1024;
          LODWORD(v371[0]) = v37;
          WORD2(v371[0]) = 2082;
          *(void **)((char *)v371 + 6) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s %{public}s%s<i%u:s%d> Cannot send on a stream without outbound_metadata, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x36u);
        }

        free(backtrace_string);
        goto LABEL_97;
      }

      if (v35)
      {
        int v72 = *(_DWORD *)(a3 + 176);
        int v71 = *(_DWORD *)(a3 + 180);
        LODWORD(buf[0]) = 136447234;
        *(void *)((char *)buf + 4) = "nw_http2_submit_message";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a3 + 191;
        HIWORD(buf[2]) = 2080;
        *(void *)&__int128 v370 = " ";
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = v71;
        HIWORD(v370) = 1024;
        LODWORD(v371[0]) = v72;
        __int16 v31 = "%{public}s %{public}s%s<i%u:s%d> Cannot send on a stream without outbound_metadata, no backtrace";
LABEL_96:
        _os_log_impl(&dword_181A5C000, v27, v28, v31, (uint8_t *)buf, 0x2Cu);
      }
    }

LABEL_405:
                        if (v229) {
                          free(v229);
                        }
                        goto LABEL_37;
                      }

                      goto LABEL_632;
                    }

                    goto LABEL_637;
                  }

                  if (!v199) {
                    goto LABEL_342;
                  }
                  uint64_t v219 = nghttp2_strerror();
                  LODWORD(buf[0]) = 136446722;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = v219;
                  HIWORD(buf[2]) = 1024;
                  LODWORD(v370) = v143;
                  uint64_t v193 = "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed, no backtrace";
                }

                else
                {
                  char v190 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v191 = v366[0];
                  if (!os_log_type_enabled(v190, v366[0])) {
                    goto LABEL_342;
                  }
                  uint64_t v218 = nghttp2_strerror();
                  LODWORD(buf[0]) = 136446722;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = v218;
                  HIWORD(buf[2]) = 1024;
                  LODWORD(v370) = v143;
                  uint64_t v193 = "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed, backtrace limit exceeded";
                }

                _os_log_impl(&dword_181A5C000, v190, v191, v193, (uint8_t *)buf, 0x1Cu);
                goto LABEL_342;
              }

              __nwlog_obj();
              LODWORD(buf[0]) = 136446210;
              *(void *)((char *)buf + 4) = "nw_http2_submit_data";
              uint64_t v314 = (void *)_os_log_send_and_compose_impl();
              LOBYTE(v374[0]) = 16;
              LOBYTE(v366[0]) = 0;
              if (__nwlog_fault((const char *)v314, v374, v366))
              {
                if (LOBYTE(v374[0]) == 17)
                {
                  int v315 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v316 = v374[0];
                  if (!os_log_type_enabled(v315, v374[0])) {
                    goto LABEL_629;
                  }
                  LODWORD(buf[0]) = 136446210;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                  nw_endpoint_t v317 = "%{public}s called with null stream";
                  goto LABEL_628;
                }

                if (!LOBYTE(v366[0]))
                {
                  int v315 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v316 = v374[0];
                  if (!os_log_type_enabled(v315, v374[0])) {
                    goto LABEL_629;
                  }
                  LODWORD(buf[0]) = 136446210;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                  nw_endpoint_t v317 = "%{public}s called with null stream, backtrace limit exceeded";
                  goto LABEL_628;
                }

                BOOL v334 = (char *)__nw_create_backtrace_string();
                int v315 = (os_log_s *)__nwlog_obj();
                os_log_type_t v316 = v374[0];
                BOOL v338 = os_log_type_enabled(v315, v374[0]);
                if (!v334)
                {
                  if (!v338) {
                    goto LABEL_629;
                  }
                  LODWORD(buf[0]) = 136446210;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                  nw_endpoint_t v317 = "%{public}s called with null stream, no backtrace";
                  goto LABEL_628;
                }

                if (v338)
                {
                  LODWORD(buf[0]) = 136446466;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = v334;
                  uint64_t v336 = "%{public}s called with null stream, dumping backtrace:%{public}s";
                  goto LABEL_583;
                }

LABEL_637:
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  uint64_t v344 = gconnectionLogObj;
                  if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_37;
                  }
                  int v348 = *(_DWORD *)(a3 + 176);
                  int v347 = *(_DWORD *)(a3 + 180);
                  LODWORD(buf[0]) = 136447490;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_message";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = a3 + 191;
                  HIWORD(buf[2]) = 2080;
                  *(void *)&__int128 v370 = " ";
                  WORD4(v370) = 1024;
                  *(_DWORD *)((char *)&v370 + 10) = v347;
                  HIWORD(v370) = 1024;
                  LODWORD(v371[0]) = v348;
                  WORD2(v371[0]) = 2048;
                  *(void **)((char *)v371 + 6) = (void *)a4;
                  uint64_t v136 = "%{public}s %{public}s%s<i%u:s%d> tunnel is no longer connected or stream is closed, returning f"
                         "rame %p to cache";
LABEL_642:
                  uint64_t v137 = (os_log_s *)v344;
                  os_log_type_t v138 = OS_LOG_TYPE_ERROR;
                  uint32_t v139 = 54;
LABEL_643:
                  _os_log_impl(&dword_181A5C000, v137, v138, v136, (uint8_t *)buf, v139);
                  goto LABEL_37;
                }

LABEL_629:
              if (!v314) {
                goto LABEL_631;
              }
              goto LABEL_630;
            }

            __nwlog_obj();
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_http2_submit_data";
            uint64_t v314 = (void *)_os_log_send_and_compose_impl();
            LOBYTE(v374[0]) = 16;
            LOBYTE(v366[0]) = 0;
            if (LOBYTE(v374[0]) == 17)
            {
              int v315 = (os_log_s *)__nwlog_obj();
              os_log_type_t v316 = v374[0];
              if (!os_log_type_enabled(v315, v374[0])) {
                goto LABEL_629;
              }
              LODWORD(buf[0]) = 136446210;
              *(void *)((char *)buf + 4) = "nw_http2_submit_data";
              nw_endpoint_t v317 = "%{public}s called with null node";
              goto LABEL_628;
            }

            if (!LOBYTE(v366[0]))
            {
              int v315 = (os_log_s *)__nwlog_obj();
              os_log_type_t v316 = v374[0];
              if (!os_log_type_enabled(v315, v374[0])) {
                goto LABEL_629;
              }
              LODWORD(buf[0]) = 136446210;
              *(void *)((char *)buf + 4) = "nw_http2_submit_data";
              nw_endpoint_t v317 = "%{public}s called with null node, backtrace limit exceeded";
              goto LABEL_628;
            }

            BOOL v334 = (char *)__nw_create_backtrace_string();
            int v315 = (os_log_s *)__nwlog_obj();
            os_log_type_t v316 = v374[0];
            BOOL v337 = os_log_type_enabled(v315, v374[0]);
            if (!v334)
            {
              if (!v337) {
                goto LABEL_629;
              }
              LODWORD(buf[0]) = 136446210;
              *(void *)((char *)buf + 4) = "nw_http2_submit_data";
              nw_endpoint_t v317 = "%{public}s called with null node, no backtrace";
              goto LABEL_628;
            }

            if (!v337) {
              goto LABEL_584;
            }
            LODWORD(buf[0]) = 136446466;
            *(void *)((char *)buf + 4) = "nw_http2_submit_data";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v334;
            uint64_t v336 = "%{public}s called with null node, dumping backtrace:%{public}s";
LABEL_583:
            _os_log_impl(&dword_181A5C000, v315, v316, v336, (uint8_t *)buf, 0x16u);
            goto LABEL_584;
          }

          __nwlog_obj();
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_http2_submit_data";
          uint64_t v314 = (void *)_os_log_send_and_compose_impl();
          LOBYTE(v374[0]) = 16;
          LOBYTE(v366[0]) = 0;
          if (LOBYTE(v374[0]) != 17)
          {
            if (!LOBYTE(v366[0]))
            {
              int v315 = (os_log_s *)__nwlog_obj();
              os_log_type_t v316 = v374[0];
              if (!os_log_type_enabled(v315, v374[0])) {
                goto LABEL_629;
              }
              LODWORD(buf[0]) = 136446210;
              *(void *)((char *)buf + 4) = "nw_http2_submit_data";
              nw_endpoint_t v317 = "%{public}s called with null input_protocol, backtrace limit exceeded";
              goto LABEL_628;
            }

            BOOL v334 = (char *)__nw_create_backtrace_string();
            int v315 = (os_log_s *)__nwlog_obj();
            os_log_type_t v316 = v374[0];
            BOOL v335 = os_log_type_enabled(v315, v374[0]);
            if (!v334)
            {
              if (!v335) {
                goto LABEL_629;
              }
              LODWORD(buf[0]) = 136446210;
              *(void *)((char *)buf + 4) = "nw_http2_submit_data";
              nw_endpoint_t v317 = "%{public}s called with null input_protocol, no backtrace";
              goto LABEL_628;
            }

            if (!v335) {
              goto LABEL_584;
            }
            LODWORD(buf[0]) = 136446466;
            *(void *)((char *)buf + 4) = "nw_http2_submit_data";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v334;
            uint64_t v336 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
            goto LABEL_583;
          }

          int v315 = (os_log_s *)__nwlog_obj();
          os_log_type_t v316 = v374[0];
          if (!os_log_type_enabled(v315, v374[0])) {
            goto LABEL_629;
          }
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_http2_submit_data";
          nw_endpoint_t v317 = "%{public}s called with null input_protocol";
        }

        else
        {
          __nwlog_obj();
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_http2_submit_data";
          uint64_t v314 = (void *)_os_log_send_and_compose_impl();
          LOBYTE(v374[0]) = 16;
          LOBYTE(v366[0]) = 0;
          if (LOBYTE(v374[0]) != 17)
          {
            if (!LOBYTE(v366[0]))
            {
              int v315 = (os_log_s *)__nwlog_obj();
              os_log_type_t v316 = v374[0];
              if (!os_log_type_enabled(v315, v374[0])) {
                goto LABEL_629;
              }
              LODWORD(buf[0]) = 136446210;
              *(void *)((char *)buf + 4) = "nw_http2_submit_data";
              nw_endpoint_t v317 = "%{public}s called with null output_context, backtrace limit exceeded";
              goto LABEL_628;
            }

            uint64_t v332 = (char *)__nw_create_backtrace_string();
            int v315 = (os_log_s *)__nwlog_obj();
            os_log_type_t v316 = v374[0];
            BOOL v333 = os_log_type_enabled(v315, v374[0]);
            if (!v332)
            {
              if (!v333) {
                goto LABEL_629;
              }
              LODWORD(buf[0]) = 136446210;
              *(void *)((char *)buf + 4) = "nw_http2_submit_data";
              nw_endpoint_t v317 = "%{public}s called with null output_context, no backtrace";
              goto LABEL_628;
            }

            if (v333)
            {
              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_http2_submit_data";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v332;
              _os_log_impl( &dword_181A5C000,  v315,  v316,  "%{public}s called with null output_context, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
            }

            free(v332);
            goto LABEL_629;
          }

          int v315 = (os_log_s *)__nwlog_obj();
          os_log_type_t v316 = v374[0];
          if (!os_log_type_enabled(v315, v374[0])) {
            goto LABEL_629;
          }
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_http2_submit_data";
          nw_endpoint_t v317 = "%{public}s called with null output_context";
        }

LABEL_488:
  if (v257) {
    free(v257);
  }
  BOOL v23 = 0;
LABEL_55:
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81808);
  }
  uint64_t v367 = a3;
  uint64_t v46 = a3;
  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0)
  {
    uint64_t v46 = a3;
    if (gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v261 = (os_log_s *)gconnectionLogObj;
      BOOL v262 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      uint64_t v46 = v367;
      if (v262)
      {
        uint64_t v263 = "";
        int v265 = *(_DWORD *)(v367 + 176);
        int v264 = *(_DWORD *)(v367 + 180);
        os_log_type_t v266 = (const char *)(v367 + 191);
        *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
        WORD2(buf[1]) = 2082;
        if (!v367) {
          os_log_type_t v266 = "";
        }
        LODWORD(buf[0]) = 136447234;
        if (v367) {
          uint64_t v263 = " ";
        }
        *(void *)((char *)&buf[1] + 6) = v266;
        HIWORD(buf[2]) = 2080;
        *(void *)&__int128 v370 = v263;
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = v264;
        HIWORD(v370) = 1024;
        LODWORD(v371[0]) = v265;
        _os_log_impl( &dword_181A5C000,  v261,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called",  (uint8_t *)buf,  0x2Cu);
        uint64_t v46 = v367;
      }
    }
  }

  if (*(void *)(v46 + 120) == *(void *)(v46 + 128))
  {
    BOOL v350 = v23;
    id v65 = nw_http_metadata_copy_request(*(void **)(v46 + 104));
    os_log_type_t v66 = v65;
    uint64_t v67 = MEMORY[0x1895F87A8];
    if (v65)
    {
      BOOL has_method = nw_http_request_has_method(v65, (uint64_t)"CONNECT");
      uint64_t v69 = v367;
      if (has_method)
      {
        int v70 = *(unsigned __int16 *)(v367 + 188) | (*(unsigned __int8 *)(v367 + 190) << 16);
        if ((v70 & 0x10000) == 0)
        {
          v366[0] = v67;
          v366[1] = 0x40000000LL;
          v366[2] = ___ZL39nw_http2_stream_make_and_submit_headersP17nw_protocol_http2P12http2_streamP11nw_protocolb_block_invoke;
          v366[3] = &__block_descriptor_tmp_75_82977;
          v366[4] = v367;
          nw_http_fields_access_value_by_name(v66, (unint64_t)"Capsule-Protocol", v366);
          v365[0] = v67;
          v365[1] = 0x40000000LL;
          v365[2] = ___ZL39nw_http2_stream_make_and_submit_headersP17nw_protocol_http2P12http2_streamP11nw_protocolb_block_invoke_2;
          v365[3] = &__block_descriptor_tmp_78_82978;
          void v365[4] = v367;
          nw_http_request_access_extended_connect_protocol(v66, v365);
          uint64_t v69 = v367;
          int v70 = *(unsigned __int16 *)(v367 + 188) | (*(unsigned __int8 *)(v367 + 190) << 16);
        }

        *(_BYTE *)(v69 + 190) = BYTE2(v70);
        *(_WORD *)(v69 + 18_Block_object_dispose((const void *)(v20 - 192), 8) = v70 | 0x200;
      }
    }

    else
    {
      uint64_t v69 = v367;
    }

    id v75 = nw_http_metadata_copy_response(*(void **)(v69 + 104));
    uint64_t object = v75;
    if (v75)
    {
      __int16 v76 = (nw_http_response_get_status_code(v75) - 100) < 0x64;
      uint64_t v77 = v367;
      int v79 = *(unsigned __int16 *)(v367 + 188);
      uint64_t v78 = v367 + 188;
      unsigned int v80 = v79 & 0xFFFFDFFF | (*(unsigned __int8 *)(v367 + 190) << 16);
      *(_WORD *)(v367 + 18_Block_object_dispose((const void *)(v20 - 192), 8) = v79 & 0xDFFF | (v76 << 13);
      *(_BYTE *)(v78 + 2) = BYTE2(v80);
    }

    else
    {
      uint64_t v77 = v367;
    }

    buf[0] = 0LL;
    buf[1] = buf;
    buf[2] = 0x4002000000LL;
    *(void *)&__int128 v370 = __Block_byref_object_copy__82979;
    *((void *)&v370 + 1) = __Block_byref_object_dispose__82980;
    memset(v371, 0, sizeof(v371));
    uint64_t v363 = a1;
    v364[0] = 0LL;
    v364[1] = v364;
    v364[2] = 0x2000000000LL;
    v364[3] = 0LL;
    __int16 v81 = *(void **)(v77 + 104);
    *(void *)__int128 type = v67;
    uint64_t v357 = 0x40000000LL;
    __int16 v358 = ___ZL39nw_http2_stream_make_and_submit_headersP17nw_protocol_http2P12http2_streamP11nw_protocolb_block_invoke_79;
    __int16 v359 = &unk_189BC7FA8;
    __int16 v361 = v364;
    uint64_t v362 = v77;
    __int16 v360 = buf;
    id v82 = v81;
    __int16 v83 = type;
    if (v82)
    {
      BOOL v84 = (id *)v82;
      id v85 = v84[1];

      if (nw_protocol_copy_http_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
      }
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v85,  nw_protocol_copy_http_definition_http_definition);

      if (is_equal_unsafe)
      {
        v374[0] = MEMORY[0x1895F87A8];
        v374[1] = 3221225472LL;
        v374[2] = __nw_http_metadata_enumerate_modern_header_fields_block_invoke;
        uint64_t v375 = &unk_189BC6110;
        __int16 v87 = v83;
        char v376 = v87;
        if (v84[4])
        {
          ((void (*)(void *))v374[2])(v374);
          __int16 v87 = v376;
        }

        goto LABEL_115;
      }

      __nwlog_obj();
      uint64_t v284 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v374[0]) = 136446210;
      *(void *)((char *)v374 + 4) = "nw_http_metadata_enumerate_modern_header_fields";
      os_log_type_t v349 = (void *)_os_log_send_and_compose_impl();

      v354[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v368 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault((const char *)v349, v354, &v368))
      {
LABEL_593:
        if (v349) {
          free(v349);
        }
LABEL_115:

        BOOL v88 = *(char **)(buf[1] + 40LL);
        uint64_t v89 = *(char **)(buf[1] + 48LL);
        uint64_t v8 = &qword_18C45F000;
        if (v88 == v89) {
          goto LABEL_122;
        }
        uint64_t v90 = *(void *)(v367 + 120);
        unint64_t v91 = v89 - v88 - 40;
        if (v91 > 0x27)
        {
          unint64_t v92 = v91 / 0x28 + 1;
          int v93 = v88 + 48;
          uint64_t v94 = v92 & 0xFFFFFFFFFFFFFFELL;
          do
          {
            uint64_t v95 = *(v93 - 5);
            uint64_t v96 = *(v93 - 6) + v90;
            *(v93 - 1) += v90;
            uint64_t v97 = *v93 + v90;
            *(v93 - 6) = v96;
            *(v93 - 5) = v95 + v90;
            *int v93 = v97;
            v93 += 10;
            v94 -= 2LL;
          }

          while (v94);
          if (v92 == (v92 & 0xFFFFFFFFFFFFFFELL))
          {
LABEL_122:
            if (v350
              && (*(_WORD *)(v367 + 188) & 0x2000) == 0
              && ((*(unsigned __int16 *)(v367 + 188) | (*(unsigned __int8 *)(v367 + 190) << 16)) & 0x80000) == 0
              && gLogDatapath)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              int v99 = (os_log_s *)gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
              {
                int v100 = (const char *)(v367 + 191);
                __int128 v101 = "";
                if (!v367) {
                  int v100 = "";
                }
                int v102 = *(_DWORD *)(v367 + 176);
                int v103 = *(_DWORD *)(v367 + 180);
                if (v367) {
                  __int128 v101 = " ";
                }
                LODWORD(v374[0]) = 136447234;
                *(void *)((char *)v374 + 4) = "nw_http2_stream_make_and_submit_headers";
                WORD2(v374[1]) = 2082;
                *(void *)((char *)&v374[1] + 6) = v100;
                HIWORD(v374[2]) = 2080;
                uint64_t v375 = (void *)v101;
                LOWORD(v376) = 1024;
                *(_DWORD *)((char *)&v376 + 2) = v103;
                HIWORD(v376) = 1024;
                int v377 = v102;
                _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> setting end stream flag for headers",  (uint8_t *)v374,  0x2Cu);
              }

              uint64_t v8 = &qword_18C45F000;
            }

            int v355 = 0;
            *(void *)char v354 = 0LL;
            if ((*(_BYTE *)(a1 + 388) & 0x80) == 0)
            {
              v374[0] = 0LL;
              v374[1] = v374;
              LODWORD(v375) = 16;
              v374[2] = 0x2000000000LL;
              if (v66)
              {
                v353[0] = MEMORY[0x1895F87A8];
                v353[1] = 0x40000000LL;
                v353[2] = ___ZL39nw_http2_stream_make_and_submit_headersP17nw_protocol_http2P12http2_streamP11nw_protocolb_block_invoke_82;
                v353[3] = &unk_189BC7FD8;
                v353[4] = v374;
                nw_http_fields_access_value_by_name(v66, (unint64_t)"Priority", v353);
              }

              nghttp2_priority_spec_init();
              _Block_object_dispose(v374, 8);
            }

            int v104 = nghttp2_submit_headers();
            if ((v104 & 0x80000000) == 0)
            {
LABEL_167:
              _Block_object_dispose(v364, 8);
              _Block_object_dispose(buf, 8);
              if (v371[0])
              {
                v371[1] = v371[0];
                operator delete(v371[0]);
              }

              if (object) {
                os_release(object);
              }
              if (v66) {
                os_release(v66);
              }
              if (v104 < 0) {
                goto LABEL_149;
              }
              if (v104
                && ((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0
                && *((_BYTE *)v8 + 1537))
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                uint64_t v302 = (os_log_s *)gconnectionLogObj;
                uint64_t v8 = &qword_18C45F000;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                {
                  int v304 = *(_DWORD *)(a3 + 176);
                  int v303 = *(_DWORD *)(a3 + 180);
                  LODWORD(buf[0]) = 136447746;
                  *(void *)((char *)buf + 4) = "nw_http2_submit_headers";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = a3 + 191;
                  HIWORD(buf[2]) = 2080;
                  *(void *)&__int128 v370 = " ";
                  WORD4(v370) = 1024;
                  *(_DWORD *)((char *)&v370 + 10) = v303;
                  HIWORD(v370) = 1024;
                  LODWORD(v371[0]) = v304;
                  WORD2(v371[0]) = 2048;
                  *(void **)((char *)v371 + 6) = 0LL;
                  HIWORD(v371[1]) = 1024;
                  LODWORD(v371[2]) = v104;
                  _os_log_impl( &dword_181A5C000,  v302,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> submitted %llu headers, assigned stream %d",  (uint8_t *)buf,  0x3Cu);
                }
              }

              int v125 = *(_DWORD *)(a3 + 176);
              int v126 = *(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16);
              if (v125 == -1)
              {
                if ((*(_WORD *)(a3 + 188) & 0x80) != 0)
                {
                  if ((v126 & 0x80000) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    int v158 = *(_DWORD *)(a3 + 176);
                    int v157 = *(_DWORD *)(a3 + 180);
                    LODWORD(buf[0]) = 136447234;
                    *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                    WORD2(buf[1]) = 2082;
                    *(void *)((char *)&buf[1] + 6) = a3 + 191;
                    HIWORD(buf[2]) = 2080;
                    *(void *)&__int128 v370 = " ";
                    WORD4(v370) = 1024;
                    *(_DWORD *)((char *)&v370 + 10) = v157;
                    HIWORD(v370) = 1024;
                    LODWORD(v371[0]) = v158;
                    uint64_t v151 = (char *)_os_log_send_and_compose_impl();
                    LOBYTE(v374[0]) = 16;
                    LOBYTE(v366[0]) = 0;
                    if (__nwlog_fault(v151, v374, v366))
                    {
                      if (LOBYTE(v374[0]) == 17)
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        os_log_type_t v159 = (os_log_s *)gconnectionLogObj;
                        os_log_type_t v160 = v374[0];
                        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v374[0])) {
                          goto LABEL_328;
                        }
                        int v162 = *(_DWORD *)(a3 + 176);
                        int v161 = *(_DWORD *)(a3 + 180);
                        LODWORD(buf[0]) = 136447234;
                        *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = a3 + 191;
                        HIWORD(buf[2]) = 2080;
                        *(void *)&__int128 v370 = " ";
                        WORD4(v370) = 1024;
                        *(_DWORD *)((char *)&v370 + 10) = v161;
                        HIWORD(v370) = 1024;
                        LODWORD(v371[0]) = v162;
                        uint64_t v156 = "%{public}s %{public}s%s<i%u:s%d> Responder stream cannot have id of -1 after opening";
                      }

                      else if (LOBYTE(v366[0]))
                      {
                        uint64_t v171 = (char *)__nw_create_backtrace_string();
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        os_log_type_t v159 = (os_log_s *)gconnectionLogObj;
                        os_log_type_t v160 = v374[0];
                        BOOL v172 = os_log_type_enabled((os_log_t)gconnectionLogObj, v374[0]);
                        if (v171)
                        {
                          if (v172)
                          {
                            int v174 = *(_DWORD *)(a3 + 176);
                            int v173 = *(_DWORD *)(a3 + 180);
                            LODWORD(buf[0]) = 136447490;
                            *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                            WORD2(buf[1]) = 2082;
                            *(void *)((char *)&buf[1] + 6) = a3 + 191;
                            HIWORD(buf[2]) = 2080;
                            *(void *)&__int128 v370 = " ";
                            WORD4(v370) = 1024;
                            *(_DWORD *)((char *)&v370 + 10) = v173;
                            HIWORD(v370) = 1024;
                            LODWORD(v371[0]) = v174;
                            WORD2(v371[0]) = 2082;
                            *(void **)((char *)v371 + 6) = v171;
                            _os_log_impl( &dword_181A5C000,  v159,  v160,  "%{public}s %{public}s%s<i%u:s%d> Responder stream cannot have id of -1 after opening, dump ing backtrace:%{public}s",  (uint8_t *)buf,  0x36u);
                          }

                          free(v171);
                          goto LABEL_328;
                        }

                        if (!v172) {
                          goto LABEL_328;
                        }
                        int v214 = *(_DWORD *)(a3 + 176);
                        int v213 = *(_DWORD *)(a3 + 180);
                        LODWORD(buf[0]) = 136447234;
                        *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = a3 + 191;
                        HIWORD(buf[2]) = 2080;
                        *(void *)&__int128 v370 = " ";
                        WORD4(v370) = 1024;
                        *(_DWORD *)((char *)&v370 + 10) = v213;
                        HIWORD(v370) = 1024;
                        LODWORD(v371[0]) = v214;
                        uint64_t v156 = "%{public}s %{public}s%s<i%u:s%d> Responder stream cannot have id of -1 after opening, no backtrace";
                      }

                      else
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        os_log_type_t v159 = (os_log_s *)gconnectionLogObj;
                        os_log_type_t v160 = v374[0];
                        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v374[0])) {
                          goto LABEL_328;
                        }
                        int v204 = *(_DWORD *)(a3 + 176);
                        int v203 = *(_DWORD *)(a3 + 180);
                        LODWORD(buf[0]) = 136447234;
                        *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = a3 + 191;
                        HIWORD(buf[2]) = 2080;
                        *(void *)&__int128 v370 = " ";
                        WORD4(v370) = 1024;
                        *(_DWORD *)((char *)&v370 + 10) = v203;
                        HIWORD(v370) = 1024;
                        LODWORD(v371[0]) = v204;
                        uint64_t v156 = "%{public}s %{public}s%s<i%u:s%d> Responder stream cannot have id of -1 after opening, bac"
                               "ktrace limit exceeded";
                      }

                      __int128 v207 = v159;
                      os_log_type_t v208 = v160;
                      uint32_t v209 = 44;
                      goto LABEL_327;
                    }

LABEL_592:
        goto LABEL_593;
      }

      if (v368 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        os_log_type_t v282 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v329 = v354[0];
        if (os_log_type_enabled(v282, v354[0]))
        {
          LODWORD(v374[0]) = 136446210;
          *(void *)((char *)v374 + 4) = "nw_http_metadata_enumerate_modern_header_fields";
          _os_log_impl( &dword_181A5C000,  v282,  v329,  "%{public}s metadata must be http, backtrace limit exceeded",  (uint8_t *)v374,  0xCu);
        }

        goto LABEL_592;
      }

      os_log_type_t v297 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v282 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v300 = v354[0];
      BOOL v301 = os_log_type_enabled(v282, v354[0]);
      if (!v297)
      {
        if (v301)
        {
          LODWORD(v374[0]) = 136446210;
          *(void *)((char *)v374 + 4) = "nw_http_metadata_enumerate_modern_header_fields";
          _os_log_impl( &dword_181A5C000,  v282,  v300,  "%{public}s metadata must be http, no backtrace",  (uint8_t *)v374,  0xCu);
        }

        goto LABEL_592;
      }

      if (v301)
      {
        LODWORD(v374[0]) = 136446466;
        *(void *)((char *)v374 + 4) = "nw_http_metadata_enumerate_modern_header_fields";
        WORD2(v374[1]) = 2082;
        *(void *)((char *)&v374[1] + 6) = v297;
        _os_log_impl( &dword_181A5C000,  v282,  v300,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  (uint8_t *)v374,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v281 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v374[0]) = 136446210;
      *(void *)((char *)v374 + 4) = "nw_http_metadata_enumerate_modern_header_fields";
      os_log_type_t v349 = (void *)_os_log_send_and_compose_impl();

      v354[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v368 = OS_LOG_TYPE_DEFAULT;
      if (v354[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v282 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v283 = v354[0];
        if (os_log_type_enabled(v282, v354[0]))
        {
          LODWORD(v374[0]) = 136446210;
          *(void *)((char *)v374 + 4) = "nw_http_metadata_enumerate_modern_header_fields";
          _os_log_impl(&dword_181A5C000, v282, v283, "%{public}s called with null metadata", (uint8_t *)v374, 0xCu);
        }

        goto LABEL_592;
      }

      if (v368 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        os_log_type_t v282 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v328 = v354[0];
        if (os_log_type_enabled(v282, v354[0]))
        {
          LODWORD(v374[0]) = 136446210;
          *(void *)((char *)v374 + 4) = "nw_http_metadata_enumerate_modern_header_fields";
          _os_log_impl( &dword_181A5C000,  v282,  v328,  "%{public}s called with null metadata, backtrace limit exceeded",  (uint8_t *)v374,  0xCu);
        }

        goto LABEL_592;
      }

      os_log_type_t v297 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v282 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v298 = v354[0];
      BOOL v299 = os_log_type_enabled(v282, v354[0]);
      if (!v297)
      {
        if (v299)
        {
          LODWORD(v374[0]) = 136446210;
          *(void *)((char *)v374 + 4) = "nw_http_metadata_enumerate_modern_header_fields";
          _os_log_impl( &dword_181A5C000,  v282,  v298,  "%{public}s called with null metadata, no backtrace",  (uint8_t *)v374,  0xCu);
        }

        goto LABEL_592;
      }

      if (v299)
      {
        LODWORD(v374[0]) = 136446466;
        *(void *)((char *)v374 + 4) = "nw_http_metadata_enumerate_modern_header_fields";
        WORD2(v374[1]) = 2082;
        *(void *)((char *)&v374[1] + 6) = v297;
        _os_log_impl( &dword_181A5C000,  v282,  v298,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  (uint8_t *)v374,  0x16u);
      }
    }

    free(v297);
    goto LABEL_593;
  }

  if (((*(unsigned __int16 *)(v46 + 188) | (*(unsigned __int8 *)(v46 + 190) << 16)) & 0x80000) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v47 = (os_log_s *)gconnectionLogObj;
    BOOL v48 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
    uint64_t v46 = v367;
    if (v48)
    {
      int v49 = "";
      int v51 = *(_DWORD *)(v367 + 176);
      int v50 = *(_DWORD *)(v367 + 180);
      __int16 v52 = (const char *)(v367 + 191);
      *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
      WORD2(buf[1]) = 2082;
      if (!v367) {
        __int16 v52 = "";
      }
      LODWORD(buf[0]) = 136447234;
      if (v367) {
        int v49 = " ";
      }
      *(void *)((char *)&buf[1] + 6) = v52;
      HIWORD(buf[2]) = 2080;
      *(void *)&__int128 v370 = v49;
      WORD4(v370) = 1024;
      *(_DWORD *)((char *)&v370 + 10) = v50;
      HIWORD(v370) = 1024;
      LODWORD(v371[0]) = v51;
      _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> Already buffered header bytes",  (uint8_t *)buf,  0x2Cu);
      uint64_t v46 = v367;
    }
  }

  int v53 = *(unsigned __int16 *)(v46 + 188);
  int v54 = v53 | (*(unsigned __int8 *)(v46 + 190) << 16);
  if ((v53 & 0x40) != 0) {
    goto LABEL_149;
  }
  *(_BYTE *)(v46 + 190) = BYTE2(v54);
  *(_WORD *)(v46 + 18_Block_object_dispose((const void *)(v20 - 192), 8) = v54 | 0x40;
  uint64_t v55 = a2[3];
  if (!v55 || (int v56 = *(void (**)(void *, uint64_t, uint64_t))(v55 + 56)) == 0LL)
  {
    __nwlog_obj();
    os_log_type_t v273 = (const char *)a2[2];
    if (!v273) {
      os_log_type_t v273 = "invalid";
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = v273;
    BOOL v274 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v374[0]) = 0;
    if (__nwlog_fault(v274, type, v374))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v275 = (os_log_s *)__nwlog_obj();
        os_log_type_t v276 = type[0];
        if (!os_log_type_enabled(v275, type[0])) {
          goto LABEL_527;
        }
        os_log_type_t v277 = (const char *)a2[2];
        if (!v277) {
          os_log_type_t v277 = "invalid";
        }
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v277;
        os_log_type_t v278 = "%{public}s protocol %{public}s has invalid error callback";
LABEL_526:
        _os_log_impl(&dword_181A5C000, v275, v276, v278, (uint8_t *)buf, 0x16u);
        goto LABEL_527;
      }

      if (!LOBYTE(v374[0]))
      {
        BOOL v275 = (os_log_s *)__nwlog_obj();
        os_log_type_t v276 = type[0];
        if (!os_log_type_enabled(v275, type[0])) {
          goto LABEL_527;
        }
        BOOL v305 = (const char *)a2[2];
        if (!v305) {
          BOOL v305 = "invalid";
        }
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v305;
        os_log_type_t v278 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
        goto LABEL_526;
      }

      id v286 = (char *)__nw_create_backtrace_string();
      BOOL v275 = (os_log_s *)__nwlog_obj();
      os_log_type_t v276 = type[0];
      BOOL v287 = os_log_type_enabled(v275, type[0]);
      if (!v286)
      {
        if (!v287) {
          goto LABEL_527;
        }
        __int16 v318 = (const char *)a2[2];
        if (!v318) {
          __int16 v318 = "invalid";
        }
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v318;
        os_log_type_t v278 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
        goto LABEL_526;
      }

      if (v287)
      {
        uint64_t v288 = (const char *)a2[2];
        if (!v288) {
          uint64_t v288 = "invalid";
        }
        LODWORD(buf[0]) = 136446722;
        *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v288;
        HIWORD(buf[2]) = 2082;
        *(void *)&__int128 v370 = v286;
        _os_log_impl( &dword_181A5C000,  v275,  v276,  "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x20u);
      }

      free(v286);
    }

uint64_t ___ZL39nw_http2_stream_make_and_submit_headersP17nw_protocol_http2P12http2_streamP11nw_protocolb_block_invoke( uint64_t result, char *__s1)
{
  uint64_t v2 = result;
  if (__s1)
  {
    BOOL result = strcmp(__s1, "?1");
    int v3 = ((_DWORD)result == 0) << 17;
  }

  else
  {
    int v3 = 0;
  }

  uint64_t v4 = *(void *)(v2 + 32);
  int v5 = *(unsigned __int16 *)(v4 + 188);
  v4 += 188LL;
  unsigned int v6 = (v5 | (*(unsigned __int8 *)(v4 + 2) << 16)) & 0xFFFDFFFF | v3;
  *(_WORD *)uint64_t v4 = v6;
  *(_BYTE *)(v4 + 2) = BYTE2(v6);
  return result;
}

uint64_t ___ZL39nw_http2_stream_make_and_submit_headersP17nw_protocol_http2P12http2_streamP11nw_protocolb_block_invoke_2( uint64_t result, char *__s1)
{
  uint64_t v2 = result;
  if (__s1)
  {
    BOOL result = strcmp(__s1, "connect-udp");
    if ((_DWORD)result)
    {
      BOOL result = strcmp(__s1, "connect-ip");
      int v4 = ((_DWORD)result == 0) << 18;
    }

    else
    {
      int v4 = 0x40000;
    }
  }

  else
  {
    int v4 = 0;
  }

  uint64_t v5 = *(void *)(v2 + 32);
  int v6 = *(unsigned __int16 *)(v5 + 188);
  v5 += 188LL;
  unsigned int v7 = (v6 | (*(unsigned __int8 *)(v5 + 2) << 16)) & 0xFFFBFFFF | v4;
  *(_WORD *)uint64_t v5 = v7;
  *(_BYTE *)(v5 + 2) = BYTE2(v7);
  return result;
}

__n128 __Block_byref_object_copy__82979(void *a1, uint64_t a2)
{
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v20 - 192), 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  return result;
}

void __Block_byref_object_dispose__82980(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v20 - 192), 8) = v2;
    operator delete(v2);
  }

void ___ZL39nw_http2_stream_make_and_submit_headersP17nw_protocol_http2P12http2_streamP11nw_protocolb_block_invoke_79( void *a1, char *__src, int64_t a3, char *a4, int64_t a5, int a6)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  uint64_t v12 = a1[6];
  if (v12)
  {
    if (((*(unsigned __int16 *)(v12 + 188) | (*(unsigned __int8 *)(v12 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v39 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v40 = a1[6];
        int v41 = (const char *)(v40 + 191);
        os_log_type_t v42 = "";
        BOOL v43 = v40 == 0;
        if (!v40) {
          int v41 = "";
        }
        uint64_t v46 = v40 + 176;
        int v44 = *(_DWORD *)(v40 + 176);
        int v45 = *(_DWORD *)(v46 + 4);
        if (!v43) {
          os_log_type_t v42 = " ";
        }
        *(_DWORD *)int buf = 136447746;
        int v50 = "nw_http2_stream_make_and_submit_headers_block_invoke";
        __int16 v51 = 2082;
        __int16 v52 = v41;
        __int16 v53 = 2080;
        int v54 = v42;
        __int16 v55 = 1024;
        int v56 = v45;
        __int16 v57 = 1024;
        *(_DWORD *)int v58 = v44;
        *(_WORD *)&v58[4] = 2082;
        *(void *)&v58[6] = __src;
        *(_WORD *)&v58[14] = 2082;
        *(void *)&v58[16] = a4;
        int v36 = "%{public}s %{public}s%s<i%u:s%d> sending header field %{public}s: %{public}s";
        int v37 = (os_log_s *)v39;
        uint32_t v38 = 64;
LABEL_44:
        _os_log_impl(&dword_181A5C000, v37, OS_LOG_TYPE_DEBUG, v36, buf, v38);
      }
    }
  }

  else
  {
    uint64_t v29 = a1[7];
    if ((!v29 || (*(__int16 *)(v29 + 388) & 0x80000000) == 0) && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v30 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = a1[7];
        int v32 = (const char *)(v31 + 390);
        int v33 = *(_DWORD *)(v31 + 368);
        BOOL v34 = v31 == 0;
        *(_DWORD *)int buf = 136447490;
        if (!v31) {
          int v32 = "";
        }
        int v50 = "nw_http2_stream_make_and_submit_headers_block_invoke";
        BOOL v35 = " ";
        if (v34) {
          BOOL v35 = "";
        }
        __int16 v51 = 2082;
        __int16 v52 = v32;
        __int16 v53 = 2080;
        int v54 = v35;
        __int16 v55 = 1024;
        int v56 = v33;
        __int16 v57 = 2082;
        *(void *)int v58 = __src;
        *(_WORD *)&v58[8] = 2082;
        *(void *)&v58[10] = a4;
        int v36 = "%{public}s %{public}s%s<i%u> sending header field %{public}s: %{public}s";
        int v37 = (os_log_s *)v30;
        uint32_t v38 = 58;
        goto LABEL_44;
      }
    }
  }

  if ((a6 & 0xFFFFFFFE) == 2) {
    char v13 = 7;
  }
  else {
    char v13 = 6;
  }
  int v14 = *(void **)(a1[4] + 8LL);
  uint64_t v15 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
  uint64_t v16 = v15 + a3;
  uint32_t v18 = (void *)v14[6];
  unint64_t v17 = v14[7];
  if ((unint64_t)v18 >= v17)
  {
    uint64_t v47 = __src;
    int64_t v48 = a5;
    int v20 = (void *)v14[5];
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (v18 - v20) + 1;
    if (v21 > 0x666666666666666LL) {
      abort();
    }
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - (void)v20) >> 3);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x333333333333333LL) {
      unint64_t v23 = 0x666666666666666LL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 > 0x666666666666666LL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v24 = (char *)operator new(40 * v23);
    }

    else
    {
      int v24 = 0LL;
    }

    int v25 = &v24[8 * (v18 - v20)];
    *(void *)int v25 = v15;
    *((void *)v25 + 1) = v16;
    os_log_type_t v26 = &v24[40 * v23];
    a5 = v48;
    *((void *)v25 + 2) = a3;
    *((void *)v25 + 3) = v48;
    v25[32] = v13;
    int v19 = v25 + 40;
    if (v18 != v20)
    {
      do
      {
        __int128 v27 = *(_OWORD *)(v18 - 5);
        __int128 v28 = *(_OWORD *)(v18 - 3);
        *((void *)v25 - 1) = *(v18 - 1);
        *(_OWORD *)(v25 - 24) = v28;
        *(_OWORD *)(v25 - 40) = v27;
        v25 -= 40;
        v18 -= 5;
      }

      while (v18 != v20);
      uint32_t v18 = (void *)v14[5];
    }

    void v14[5] = v25;
    v14[6] = v19;
    v14[7] = v26;
    __src = v47;
    if (v18) {
      operator delete(v18);
    }
  }

  else
  {
    *uint32_t v18 = v15;
    v18[1] = v16;
    v18[2] = a3;
    v18[3] = a5;
    int v19 = v18 + 5;
    *((_BYTE *)v18 + 32) = v13;
  }

  v14[6] = v19;
  std::vector<char>::__insert_with_size[abi:nn180100]<char const*,char const*>( a1[6] + 120LL,  *(char **)(a1[6] + 128LL),  __src,  &__src[a3],  a3);
  std::vector<char>::__insert_with_size[abi:nn180100]<char const*,char const*>( a1[6] + 120LL,  *(char **)(a1[6] + 128LL),  a4,  &a4[a5],  a5);
  *(void *)(*(void *)(a1[5] + 8LL) + 24LL) += a5 + a3;
}

size_t ___ZL39nw_http2_stream_make_and_submit_headersP17nw_protocol_http2P12http2_streamP11nw_protocolb_block_invoke_82( size_t result, char *__s)
{
  uint64_t v2 = result;
  if (__s
    && (__n128 result = strlen(__s), result >= 3)
    && *__s == 117
    && __s[1] == 61
    && (char v4 = __s[2], (v4 - 56) >= 0xF8u))
  {
    int v5 = dword_18272D708[(v4 - 48)];
  }

  else
  {
    int v5 = 16;
  }

  *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 24LL) = v5;
  return result;
}

void nw_http2_enqueue_frame_for_stream(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (((*(unsigned __int16 *)(a1 + 188) | (*(unsigned __int8 *)(a1 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v6 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 176);
      int v7 = *(_DWORD *)(a1 + 180);
      int v19 = 136447746;
      int v20 = "nw_http2_enqueue_frame_for_stream";
      __int16 v21 = 2082;
      uint64_t v22 = a1 + 191;
      __int16 v23 = 2080;
      int v24 = " ";
      __int16 v25 = 1024;
      int v26 = v7;
      __int16 v27 = 1024;
      int v28 = v8;
      __int16 v29 = 1024;
      int v30 = v8;
      __int16 v31 = 2048;
      uint64_t v32 = a2;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called for stream %d, frame %p",  (uint8_t *)&v19,  0x3Cu);
    }
  }

  if (((*(unsigned __int16 *)(a1 + 188) | (*(unsigned __int8 *)(a1 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v9 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(_DWORD *)(a1 + 176);
      int v10 = *(_DWORD *)(a1 + 180);
      int v19 = 136447746;
      int v20 = "nw_http2_set_stream_output_available_pending";
      __int16 v21 = 2082;
      uint64_t v22 = a1 + 191;
      __int16 v23 = 2080;
      int v24 = " ";
      __int16 v25 = 1024;
      int v26 = v10;
      __int16 v27 = 1024;
      int v28 = v11;
      __int16 v29 = 1024;
      int v30 = v11;
      __int16 v31 = 1024;
      LODWORD(v32) = 0;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called for stream %d, needs output available: %{BOOL}d",  (uint8_t *)&v19,  0x38u);
    }
  }

  int v4 = *(_WORD *)(a1 + 188) & 0xFFDF | (*(unsigned __int8 *)(a1 + 190) << 16);
  *(_WORD *)(a1 + 188) &= ~0x20u;
  *(_BYTE *)(a1 + 190) = BYTE2(v4);
  *(void *)(a2 + 16) = 0LL;
  int v5 = *(void **)(a1 + 24);
  *(void *)(a2 + 24) = v5;
  void *v5 = a2;
  *(void *)(a1 + 24) = a2 + 16;
  if (((*(unsigned __int16 *)(a1 + 188) | (*(unsigned __int8 *)(a1 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v12 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      char v13 = (uint64_t *)(a1 + 16);
      uint64_t v14 = a1 + 191;
      uint64_t v17 = a1 + 176;
      int v15 = *(_DWORD *)(a1 + 176);
      int v16 = *(_DWORD *)(v17 + 4);
      int v19 = 0;
      nw_frame_array_get_frame_count(v13, 0, &v19);
      int v18 = v19;
      int v19 = 136447490;
      int v20 = "nw_http2_enqueue_frame_for_stream";
      __int16 v21 = 2082;
      uint64_t v22 = v14;
      __int16 v23 = 2080;
      int v24 = " ";
      __int16 v25 = 1024;
      int v26 = v16;
      __int16 v27 = 1024;
      int v28 = v15;
      __int16 v29 = 1024;
      int v30 = v18;
      _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> stream now has %u bytes pending",  (uint8_t *)&v19,  0x32u);
    }
  }

void std::vector<char>::__insert_with_size[abi:nn180100]<char const*,char const*>( uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  if (a5 < 1) {
    return;
  }
  int v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    int v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    char v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      size_t v15 = (size_t)operator new(v15);
    }

    else
    {
      size_t v16 = 0LL;
    }

    size_t v33 = v15;
    BOOL v34 = &v13[v15];
    memcpy(&v13[v15], __src, a5);
    if (v11 == __dst)
    {
      BOOL v35 = v34;
    }

    else
    {
      if ((unint64_t)v13 >= 0x20)
      {
        unint64_t v37 = __dst - v11;
        int v36 = __dst;
        BOOL v35 = v34;
        if ((unint64_t)&v11[-v33] >= 0x20)
        {
          int v36 = &__dst[-(v37 & 0xFFFFFFFFFFFFFFE0LL)];
          uint32_t v38 = __dst - 16;
          uint64_t v39 = (_OWORD *)(v33 + __dst - 16 - v11);
          unint64_t v40 = v37 & 0xFFFFFFFFFFFFFFE0LL;
          do
          {
            __int128 v41 = *(_OWORD *)v38;
            *(v39 - 1) = *((_OWORD *)v38 - 1);
            _OWORD *v39 = v41;
            v38 -= 32;
            v39 -= 2;
            v40 -= 32LL;
          }

          while (v40);
          BOOL v35 = &v34[-(v37 & 0xFFFFFFFFFFFFFFE0LL)];
          if (v37 == (v37 & 0xFFFFFFFFFFFFFFE0LL)) {
            goto LABEL_42;
          }
        }
      }

      else
      {
        int v36 = __dst;
        BOOL v35 = v34;
      }

      do
      {
        char v42 = *--v36;
        *--BOOL v35 = v42;
      }

      while (v36 != v11);
      int v10 = *(char **)(a1 + 8);
    }

BOOL ___ZL34nw_protocol_http2_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  unsigned int v54 = 0;
  int v4 = (const void *)nw_frame_unclaimed_bytes(a2, &v54);
  if (v4)
  {
    if (*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL)) {
      return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
    }
    uint64_t v8 = *(unsigned __int16 *)(*(void *)(a1[5] + 8LL) + 24LL);
    else {
      size_t v9 = 16 - v8;
    }
    memcpy((void *)(*(void *)(*(void *)(a1[6] + 8LL) + 24LL) + v8), v4, v9);
    *(_WORD *)(*(void *)(a1[5] + 8LL) + 24LL) += v9;
    int v10 = *(_DWORD **)(*(void *)(a1[6] + 8LL) + 24LL);
    if (v10)
    {
      uint64_t v11 = *(unsigned __int16 *)(*(void *)(a1[5] + 8LL) + 24LL);
      if (!*(_WORD *)(*(void *)(a1[5] + 8LL) + 24LL)) {
        return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
      }
      unint64_t v12 = *(unsigned __int8 *)v10;
      if (v12 > 0x3F)
      {
        unsigned int v19 = v12 >> 6;
        if (v19 == 2)
        {
          unint64_t v12 = bswap32(*v10 & 0xFFFFFF7F);
          unsigned int v13 = 4;
        }

        else if (v19 == 1)
        {
          unint64_t v12 = bswap32(*(_WORD *)v10 & 0xFFBF) >> 16;
          unsigned int v13 = 2;
        }

        else
        {
          unint64_t v12 = bswap64(*(void *)v10 & 0xFFFFFFFFFFFFFF3FLL);
          unsigned int v13 = 8;
        }
      }

      else
      {
        unsigned int v13 = 1;
      }

      *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = v12;
      *(_WORD *)(*(void *)(a1[8] + 8LL) + 24LL) = v13;
      unint64_t v14 = v11 - v13;
      if (!v14) {
        return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
      }
      size_t v15 = (_DWORD *)((char *)v10 + v13);
      unint64_t v16 = *(unsigned __int8 *)v15;
      if (v16 > 0x3F)
      {
        unsigned int v20 = v16 >> 6;
        if (v20 == 2)
        {
          if (v14 < 4) {
            return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
          }
          unint64_t v16 = bswap32(*v15 & 0xFFFFFF7F);
          unsigned int v17 = 4;
        }

        else if (v20 == 1)
        {
          if (v14 < 2) {
            return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
          }
          unint64_t v16 = bswap32(*(_WORD *)v15 & 0xFFBF) >> 16;
          unsigned int v17 = 2;
        }

        else
        {
          if (v14 < 8) {
            return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
          }
          unint64_t v16 = bswap64(*(void *)v15 & 0xFFFFFFFFFFFFFF3FLL);
          unsigned int v17 = 8;
        }
      }

      else
      {
        unsigned int v17 = 1;
      }

      *(void *)(*(void *)(a1[9] + 8LL) + 24LL) = v16;
      *(_WORD *)(*(void *)(a1[8] + 8LL) + 24LL) += v17;
      if (*(void *)(*(void *)(a1[7] + 8LL) + 24LL)) {
        goto LABEL_17;
      }
      uint64_t v21 = v17;
      if (v14 == v17) {
        return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
      }
      unint64_t v22 = *((unsigned __int8 *)v15 + v17);
      if (v22 > 0x3F)
      {
        unint64_t v34 = v14 - v21;
        unsigned int v35 = v22 >> 6;
        if (v35 == 2)
        {
          if (v34 < 4) {
            return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
          }
          unint64_t v22 = bswap32(*(_DWORD *)((char *)v15 + v21) & 0xFFFFFF7F);
          unsigned int v23 = 4;
        }

        else if (v35 == 1)
        {
          if (v34 < 2) {
            return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
          }
          unint64_t v22 = bswap32(*(_WORD *)((_BYTE *)v15 + v21) & 0xFFBF) >> 16;
          unsigned int v23 = 2;
        }

        else
        {
          if (v34 < 8) {
            return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
          }
          unint64_t v22 = bswap64(*(void *)((_BYTE *)v15 + v21) & 0xFFFFFFFFFFFFFF3FLL);
          unsigned int v23 = 8;
        }
      }

      else
      {
        unsigned int v23 = 1;
      }

      *(void *)(*(void *)(a1[10] + 8LL) + 24LL) = v22;
      *(_WORD *)(*(void *)(a1[8] + 8LL) + 24LL) += v23;
      uint64_t v24 = a1[11];
      if ((!v24 || (*(__int16 *)(v24 + 388) & 0x80000000) == 0) && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v47 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v48 = a1[11];
          int v49 = "";
          int v50 = (const char *)(v48 + 390);
          BOOL v51 = v48 == 0;
          if (!v48) {
            int v50 = "";
          }
          int v52 = *(_DWORD *)(v48 + 368);
          if (!v51) {
            int v49 = " ";
          }
          uint64_t v53 = *(void *)(*(void *)(a1[9] + 8LL) + 24LL);
          *(_DWORD *)int buf = 136447490;
          int v58 = "nw_protocol_http2_get_input_frames_block_invoke";
          __int16 v59 = 2082;
          BOOL v60 = v50;
          __int16 v61 = 2080;
          int v62 = v49;
          __int16 v63 = 1024;
          *(_DWORD *)int v64 = v52;
          *(_WORD *)&v64[4] = 2048;
          *(void *)&v64[6] = v53;
          *(_WORD *)&v64[14] = 1024;
          *(_DWORD *)&v64[16] = v23;
          _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Receiving capsule length %llu, adjusting by %u",  buf,  0x36u);
        }
      }

      uint64_t v25 = *(void *)(a1[9] + 8LL);
      unint64_t v26 = *(void *)(v25 + 24);
      unint64_t v27 = (const char *)v23;
      *(void *)(v25 + 24) = v26 - v23;
      if (v26 >= v23)
      {
LABEL_17:
        uint64_t v5 = 0LL;
        *(_WORD *)(*(void *)(a1[5] + 8LL) + 24LL) = 0;
        *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
        return v5;
      }

      __nwlog_obj();
      uint64_t v28 = *(void *)(*(void *)(a1[9] + 8LL) + 24LL);
      *(_DWORD *)int buf = 136446978;
      int v58 = "nw_protocol_http2_get_input_frames_block_invoke";
      __int16 v59 = 2082;
      BOOL v60 = "capsule_length";
      __int16 v61 = 2048;
      int v62 = (const char *)v23;
      __int16 v63 = 2048;
      *(void *)int v64 = v28;
      __int16 v29 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (__nwlog_fault(v29, &type, &v55))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          unint64_t v30 = (os_log_s *)__nwlog_obj();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v30, type))
          {
            uint64_t v32 = *(void *)(*(void *)(a1[9] + 8LL) + 24LL);
            *(_DWORD *)int buf = 136446978;
            int v58 = "nw_protocol_http2_get_input_frames_block_invoke";
            __int16 v59 = 2082;
            BOOL v60 = "capsule_length";
            __int16 v61 = 2048;
            int v62 = v27;
            __int16 v63 = 2048;
            *(void *)int v64 = v32;
            size_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_65:
            _os_log_impl(&dword_181A5C000, v30, v31, v33, buf, 0x2Au);
          }
        }

        else if (v55)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          unint64_t v30 = (os_log_s *)__nwlog_obj();
          os_log_type_t v31 = type;
          BOOL v37 = os_log_type_enabled(v30, type);
          if (backtrace_string)
          {
            if (v37)
            {
              uint64_t v38 = *(void *)(*(void *)(a1[9] + 8LL) + 24LL);
              *(_DWORD *)int buf = 136447234;
              int v58 = "nw_protocol_http2_get_input_frames_block_invoke";
              __int16 v59 = 2082;
              BOOL v60 = "capsule_length";
              __int16 v61 = 2048;
              int v62 = v27;
              __int16 v63 = 2048;
              *(void *)int v64 = v38;
              *(_WORD *)&v64[8] = 2082;
              *(void *)&v64[10] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(backtrace_string);
            goto LABEL_66;
          }

          if (v37)
          {
            uint64_t v40 = *(void *)(*(void *)(a1[9] + 8LL) + 24LL);
            *(_DWORD *)int buf = 136446978;
            int v58 = "nw_protocol_http2_get_input_frames_block_invoke";
            __int16 v59 = 2082;
            BOOL v60 = "capsule_length";
            __int16 v61 = 2048;
            int v62 = v27;
            __int16 v63 = 2048;
            *(void *)int v64 = v40;
            size_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_65;
          }
        }

        else
        {
          unint64_t v30 = (os_log_s *)__nwlog_obj();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v30, type))
          {
            uint64_t v39 = *(void *)(*(void *)(a1[9] + 8LL) + 24LL);
            *(_DWORD *)int buf = 136446978;
            int v58 = "nw_protocol_http2_get_input_frames_block_invoke";
            __int16 v59 = 2082;
            BOOL v60 = "capsule_length";
            __int16 v61 = 2048;
            int v62 = v27;
            __int16 v63 = 2048;
            *(void *)int v64 = v39;
            size_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_65;
          }
        }
      }