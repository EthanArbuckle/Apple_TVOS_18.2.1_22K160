void __nw_proxy_config_enumerate_endpoints_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  v3 = nw_protocol_options_copy_proxy_endpoint(a2);
  if (v3)
  {
    v4 = v3;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    v3 = v4;
  }
}

void sub_18213469C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_proxy_config_add_resolved_endpoint(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  v3 = a1;
  id v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_add_resolved_endpoint";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_add_resolved_endpoint";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_add_resolved_endpoint";
          __int16 v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v10) {
          goto LABEL_6;
        }
LABEL_41:
        free(v10);
        goto LABEL_6;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_add_resolved_endpoint";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_add_resolved_endpoint";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_proxy_config_enumerate_resolved_endpoints(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  v3 = a1;
  id v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_enumerate_resolved_endpoints";
    v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_resolved_endpoints";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_enumerate_resolved_endpoints";
          __int16 v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_resolved_endpoints";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_resolved_endpoints";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_proxy_config_enumerate_resolved_endpoints_block_invoke(uint64_t a1)
{
  return 1LL;
}

void nw_proxy_config_add_match_domain(nw_proxy_config_t config, const char *match_domain)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = config;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_proxy_config_add_match_domain";
    v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_match_domain";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_proxy_config_add_match_domain";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_match_domain";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_match_domain";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18213556C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_match_domains(nw_proxy_config_t config)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v1 = config;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    nw_proxy_config_t v3 = (void *)*((void *)v1 + 15);
    *((void *)v1 + 15) = 0LL;

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
  v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_enumerate_match_domains(nw_proxy_config_t config, nw_proxy_domain_enumerator_t enumerator)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = config;
  nw_proxy_domain_enumerator_t v4 = enumerator;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_proxy_config_enumerate_match_domains";
    v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_match_domains";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_proxy_config_enumerate_match_domains";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_match_domains";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_match_domains";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182135D0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_match_domains_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F92E8])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    (*(void (**)(uint64_t, const char *))(v5 + 16))(v5, string_ptr);
  }

  return 1LL;
}

void sub_182135D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_add_excluded_domain(nw_proxy_config_t config, const char *excluded_domain)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = config;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_proxy_config_add_excluded_domain";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_excluded_domain";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_proxy_config_add_excluded_domain";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_excluded_domain";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_excluded_domain";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182136264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_excluded_domains(nw_proxy_config_t config)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v1 = config;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    nw_proxy_config_t v3 = (void *)*((void *)v1 + 16);
    *((void *)v1 + 16) = 0LL;

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_enumerate_excluded_domains( nw_proxy_config_t config, nw_proxy_domain_enumerator_t enumerator)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = config;
  nw_proxy_domain_enumerator_t v4 = enumerator;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
    v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182136A04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_excluded_domains_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F92E8])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    (*(void (**)(uint64_t, const char *))(v5 + 16))(v5, string_ptr);
  }

  return 1LL;
}

void sub_182136A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_add_preferred_domain(void *a1, const char *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_proxy_config_add_preferred_domain";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_preferred_domain";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_proxy_config_add_preferred_domain";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_preferred_domain";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_preferred_domain";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182136F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_preferred_domains(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    nw_proxy_config_t v3 = (void *)*((void *)v1 + 17);
    *((void *)v1 + 17) = 0LL;

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_enumerate_preferred_domains(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
    v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_1821376FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_preferred_domains_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F92E8])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    (*(void (**)(uint64_t, const char *))(v5 + 16))(v5, string_ptr);
  }

  return 1LL;
}

void sub_182137778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_add_alternate_agent(void *a1, const unsigned __int8 *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)v3[18];
    if (!v5)
    {
      xpc_object_t v6 = xpc_array_create(0LL, 0LL);
      os_log_type_t v7 = (void *)v4[18];
      v4[18] = v6;

      uint64_t v5 = (void *)v4[18];
    }

    xpc_array_set_uuid(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    goto LABEL_5;
  }

  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182137A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_alternate_agents(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    nw_proxy_config_t v3 = (void *)*((void *)v1 + 18);
    *((void *)v1 + 18) = 0LL;

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_enumerate_alternate_agents(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
    v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_1821381E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_alternate_agents_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F92F8])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    bytes = xpc_uuid_get_bytes(v4);
    (*(void (**)(uint64_t, const uint8_t *))(v5 + 16))(v5, bytes);
  }

  return 1LL;
}

void sub_18213825C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_has_alternate_agents(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18213850C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_alternate_protocol_stack(void *a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  os_log_type_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  os_log_type_t v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v43 = "nw_proxy_config_set_alternate_protocol_stack";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_proxy_config_set_alternate_protocol_stack";
          __int16 v44 = 2082;
          v45 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v19) {
          goto LABEL_15;
        }
LABEL_60:
        free(v19);
        goto LABEL_15;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v20,  v34,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182138CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_listener_protocol_stack(void *a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  os_log_type_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  os_log_type_t v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)key = 136446210;
    *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
    os_log_type_t v19 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null config", key, 0xCu);
      }
    }

    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)key = 136446466;
          *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
          __int16 v40 = 2082;
          v41 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v27,  "%{public}s called with null config, dumping backtrace:%{public}s",  key,  0x16u);
        }

        free(backtrace_string);
LABEL_64:
        if (!v19) {
          goto LABEL_14;
        }
        goto LABEL_65;
      }

      if (v28)
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_181A5C000, v20, v27, "%{public}s called with null config, no backtrace", key, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v20,  v34,  "%{public}s called with null config, backtrace limit exceeded",  key,  0xCu);
      }
    }

void sub_182139468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_fallback_proxy_agent(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v22 = "nw_proxy_config_set_fallback_proxy_agent";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_set_fallback_proxy_agent";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          id v22 = "nw_proxy_config_set_fallback_proxy_agent";
          __int16 v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_set_fallback_proxy_agent";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_set_fallback_proxy_agent";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_proxy_config_copy_fallback_proxy_agent(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
          __int16 v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL nw_proxy_config_has_fallback_proxy_agent(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = (unsigned __int8 *)v1;
  if (v1)
  {
    BOOL v3 = uuid_is_null(v1 + 72) == 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18213A074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_fallback_proxy_config(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    xpc_object_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

id nw_proxy_config_copy_fallback_proxy_config(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    id v3 = v1[11];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_proxy_config_has_fallback_proxy_config(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 11) != 0LL;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_proxy_config_supports_listeners(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

BOOL __nw_proxy_config_supports_listeners_block_invoke(uint64_t a1, const char *a2)
{
  int v3 = strncmp("LISTEN-", a2, 7uLL);
  if (!v3) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return v3 != 0;
}

id *nw_proxy_config_copy_parameters_to_proxy(void *a1)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v57 = "nw_proxy_config_copy_parameters_to_proxy";
    char v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v18, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null config", buf, 0xCu);
        }
      }

      else if (v54)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "nw_proxy_config_copy_parameters_to_proxy";
            __int16 v58 = 2082;
            v59 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v19,  v34,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_60;
        }

        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_181A5C000, v19, v34, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl( &dword_181A5C000,  v19,  v45,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18213B7B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_proxy_config_copy_parameters_to_proxy_block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (nw_protocol_options_is_serializable_tls(v6))
  {
    options_from_serializable = nw_tls_create_options_from_serializable(v6, *(void *)(a1 + 32) + 56LL, 0LL);

    nw_parameters_t v4 = options_from_serializable;
  }

  else
  {
    nw_parameters_t v4 = v6;
  }

  uint64_t v7 = v4;
  if (nw_protocol_options_is_tls(v4)
    && nw_parameters_get_should_trust_invalid_certificates(*(void **)(a1 + 40)))
  {
    uint64_t v5 = v7;
    sec_protocol_options_set_peer_authentication_required(v5, 0);
  }

  nw_protocol_stack_append_application_protocol(*(void **)(a1 + 48), v7);
}

void sub_18213B864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_proxy_config_copy_authentication_credential(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    id v3 = v1[13];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_get_multipath_service(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[40];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_multipath_service(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 40) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_get_force_multipath(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[171] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_force_multipath";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_force_multipath";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_force_multipath";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_force_multipath";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_force_multipath";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_force_multipath(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xFD | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_force_multipath";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_force_multipath";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_force_multipath";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_force_multipath";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_force_multipath";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_get_apply_tfo(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[171] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_apply_tfo(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 4;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xFB | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_apply_tfo";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_apply_tfo";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_apply_tfo";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_apply_tfo";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_apply_tfo";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_get_force_tfo(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 171) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_force_tfo(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xFE | a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_get_disable_tfo_cookie(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[171] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_disable_tfo_cookie(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 8;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xF7 | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_proxy_config_copy_pac_script(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 38) == 3)
    {
      id v3 = v1[14];
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null (config->mode == nw_proxy_mode_pac_script)",  buf,  0xCu);
        }

id nw_proxy_configs_create_with_schema_array(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    if (object_getClass(v1) == (Class)MEMORY[0x1895F9220])
    {
      BOOL v3 = nw_array_create();
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = __nw_proxy_configs_create_with_schema_array_block_invoke;
      applier[3] = &unk_189BC8CB8;
      id v4 = (id)v3;
      id v20 = v4;
      xpc_array_apply(v2, applier);

      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_proxy_configs_create_with_schema_array";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array))",  buf,  0xCu);
        }

void sub_18213DEE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_configs_create_with_schema_array_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  char v5 = v4;
  if (!v4)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
    v63 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_181A5C000, v64, v65, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }

    else if (v80)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v69 = type;
      BOOL v70 = os_log_type_enabled(v64, type);
      if (backtrace_string)
      {
        if (v70)
        {
          *(_DWORD *)buf = 136446466;
          v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
          __int16 v84 = 2082;
          v85 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v64,  v69,  "%{public}s called with null dictionary, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v63) {
          goto LABEL_87;
        }
        goto LABEL_123;
      }

      if (v70)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_181A5C000, v64, v69, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v74 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl( &dword_181A5C000,  v64,  v74,  "%{public}s called with null dictionary, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_121;
  }

  if (object_getClass(v4) != (Class)MEMORY[0x1895F9250])
  {
    __nwlog_obj();
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
    v63 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v67 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl( &dword_181A5C000,  v64,  v67,  "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary))",  buf,  0xCu);
      }
    }

    else if (v80)
    {
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v72 = type;
      BOOL v73 = os_log_type_enabled(v64, type);
      if (v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446466;
          v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
          __int16 v84 = 2082;
          v85 = v71;
          _os_log_impl( &dword_181A5C000,  v64,  v72,  "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v71);
LABEL_122:
        if (!v63) {
          goto LABEL_87;
        }
LABEL_123:
        free(v63);
        goto LABEL_87;
      }

      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl( &dword_181A5C000,  v64,  v72,  "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl( &dword_181A5C000,  v64,  v75,  "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18213EC68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_get_int64(void *a1, uint64_t a2, BOOL a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  char v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  id v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_proxy_config_get_int64";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_proxy_config_get_int64";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v29 = "nw_proxy_config_get_int64";
          __int16 v30 = 2082;
          BOOL v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v11) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_proxy_config_get_int64";
        _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_proxy_config_get_int64";
        _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_28;
  }

  string_ptr = xpc_string_get_string_ptr(v5);
  if (!string_ptr)
  {
    __nwlog_obj();
    id v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_proxy_config_get_int64";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v11, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_proxy_config_get_int64";
          _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s called with null key_string", buf, 0xCu);
        }

void sub_18213F3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_proxy_config_get_string(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  BOOL v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_proxy_config_get_string";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_proxy_config_get_string";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v24 = "nw_proxy_config_get_string";
          __int16 v25 = 2082;
          char v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v7) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_proxy_config_get_string";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_proxy_config_get_string";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_20;
  }

  string_ptr = xpc_string_get_string_ptr(v2);
  if (!string_ptr)
  {
    __nwlog_obj();
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_proxy_config_get_string";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v24 = "nw_proxy_config_get_string";
          _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null key_string", buf, 0xCu);
        }

void sub_18213F8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_apply_common_keys(void *a1, void *a2, int a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  char v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v6)
  {
    string = xpc_dictionary_get_string(v6, "Identifier");
    if (string) {
      uuid_parse(string, v5 + 56);
    }
    uint64_t v9 = nw_proxy_config_get_array(v7);
    id v10 = (void *)*((void *)v5 + 16);
    *((void *)v5 + 16) = v9;

    v5[170] = v5[170] & 0xF7 | (8 * !nw_proxy_config_get_int64(v7, (uint64_t)@"FallBackAllowed", a3 != 1));
    v5[170] = v5[170] & 0x7F | (nw_proxy_config_get_int64(v7, (uint64_t)@"ExcludeSimpleHostnames", 0LL) << 7);
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v22 = "nw_proxy_config_apply_common_keys";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_proxy_config_apply_common_keys";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v22 = "nw_proxy_config_apply_common_keys";
          __int16 v23 = 2082;
          BOOL v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null dictionary, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_proxy_config_apply_common_keys";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_proxy_config_apply_common_keys";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null dictionary, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18213FC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_proxy_config_get_array(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  BOOL v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_proxy_config_get_array";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_get_array";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          char v26 = "nw_proxy_config_get_array";
          __int16 v27 = 2082;
          os_log_type_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v9) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_get_array";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_get_array";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_24;
  }

  string_ptr = xpc_string_get_string_ptr(v2);
  if (!string_ptr)
  {
    __nwlog_obj();
    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_proxy_config_get_array";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v9, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_proxy_config_get_array";
          _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null key_string", buf, 0xCu);
        }

void sub_18214019C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_configs_create_with_schema_array_block_invoke_90(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (string_ptr)
  {
    if (nw_protocol_tcpconverter_copy_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_tcpconverter_copy_definition::onceToken, &__block_literal_global_48562);
    }
    if (nw_protocol_tcpconverter_copy_definition::definition) {
      id v6 = (nw_protocol_definition *)os_retain((void *)nw_protocol_tcpconverter_copy_definition::definition);
    }
    else {
      id v6 = 0LL;
    }
    nw_protocol_options_t options = nw_framer_create_options(v6);

    unsigned __int16 int64 = nw_proxy_config_get_int64(*(void **)(a1 + 32), (uint64_t)@"TransportConverterPort", 0LL);
    BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(string_ptr, int64);
    os_log_type_t v11 = nw_proxy_config_create((void *)host_with_numeric_port, options);

    BOOL v7 = v11 != 0LL;
    if (v11)
    {
      v11->os_log_type_t type = 3005;
      nw_proxy_config_apply_common_keys(v11, *(void **)(a1 + 32), 1);
      *((_BYTE *)v11 + 170) |= 0x68u;
      *((_BYTE *)v11 + 171) = *((_BYTE *)v11 + 171) & 0xFB | (4
                                                            * nw_proxy_config_get_int64( *(void **)(a1 + 32),  (uint64_t)@"TransportConverterTFOMode",  0LL));
      *((_BYTE *)v11 + 171) = *((_BYTE *)v11 + 171) & 0xF7 | (8
                                                            * (nw_proxy_config_get_int64( *(void **)(a1 + 32),  (uint64_t)@"TransportConverterTFOMode",  0LL) == 2LL));
      v11->multipath_service = nw_proxy_config_get_int64( *(void **)(a1 + 32),  (uint64_t)@"TransportConverterMultipathServiceType",  0LL);
      nw_array_append(*(void *)(a1 + 40), v11);
    }
  }

  else
  {
    BOOL v7 = 0LL;
  }

  return v7;
}

void sub_182140384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_is_privacy_proxy(void *a1, char a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (v5)
  {
    if (a3) {
      char v7 = 2;
    }
    else {
      char v7 = 0;
    }
    *((_BYTE *)v5 + 170) = v7 | a2 | *((_BYTE *)v5 + 170) & 0xFC;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_proxy_config_set_is_privacy_proxy";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_proxy_config_set_is_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_proxy_config_set_is_privacy_proxy";
          __int16 v20 = 2082;
          BOOL v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_proxy_config_set_is_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_proxy_config_set_is_privacy_proxy";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_is_privacy_proxy(void *a1, BOOL *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      *a2 = (*((_BYTE *)v3 + 170) & 2) != 0;
    }
    uint64_t v5 = *((_BYTE *)v3 + 170) & 1;
    goto LABEL_5;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
          __int16 v19 = 2082;
          __int16 v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_get_ignore_privacy_stance(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[170] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_get_ignore_privacy_stance";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_get_ignore_privacy_stance";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_get_ignore_privacy_stance";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_get_ignore_privacy_stance";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_get_ignore_privacy_stance";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_ignore_privacy_stance(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 4;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 170) = *((_BYTE *)v3 + 170) & 0xFB | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_use_over_privacy_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 0x80;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 171) = v5 & 0x80 | *((_BYTE *)v3 + 171) & 0x7F;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_proxy_config_use_over_privacy_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[171] < 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_use_over_privacy_proxy";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_over_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_use_over_privacy_proxy";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_over_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_over_privacy_proxy";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_prohibit_direct(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 8;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 170) = *((_BYTE *)v3 + 170) & 0xF7 | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_prohibit_direct";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_prohibit_direct";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_prohibit_direct";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_prohibit_direct";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_prohibit_direct";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_prohibits_direct(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[170] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_prohibits_direct";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_prohibits_direct";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_prohibits_direct";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_prohibits_direct";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_prohibits_direct";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_use_fast_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[171] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_use_fast_fallback";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_fast_fallback";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_use_fast_fallback";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_fast_fallback";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_fast_fallback";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_use_fast_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 64;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xBF | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_add_required_protocol(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_proxy_config_add_required_protocol";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_required_protocol";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_proxy_config_add_required_protocol";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v11) {
          goto LABEL_6;
        }
LABEL_41:
        free(v11);
        goto LABEL_6;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_required_protocol";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_required_protocol";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182142308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_stack_requires_http_protocols(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null config", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182142670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_stack_requires_http_protocols_block_invoke(uint64_t a1, int a2, xpc_object_t xstring)
{
  id v4 = *(const char **)(a1 + 40);
  string_ptr = xpc_string_get_string_ptr(xstring);
  int v6 = strcmp(v4, string_ptr);
  if (!v6) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return v6 != 0;
}

void nw_proxy_config_add_protocol_to_remove(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v11) {
          goto LABEL_6;
        }
LABEL_41:
        free(v11);
        goto LABEL_6;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182142BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_remove_protocols_from_stack(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_proxy_config_remove_protocols_from_stack";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_remove_protocols_from_stack";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          char v26 = "nw_proxy_config_remove_protocols_from_stack";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_remove_protocols_from_stack";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_remove_protocols_from_stack";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_1821430E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_remove_protocols_from_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (*string_ptr)
  {
    uint64_t v10 = 0LL;
    os_log_type_t v11 = &v10;
    uint64_t v12 = 0x3032000000LL;
    os_log_type_t v13 = __Block_byref_object_copy__38597;
    os_log_type_t v14 = __Block_byref_object_dispose__38598;
    id v15 = 0LL;
    xpc_object_t v6 = *(nw_protocol_stack **)(a1 + 32);
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 3221225472LL;
    v9[2] = __nw_proxy_config_remove_protocols_from_stack_block_invoke_2;
    v9[3] = &unk_189BBD140;
    v9[4] = &v10;
    v9[5] = string_ptr;
    nw_protocol_stack_iterate_application_protocols(v6, v9);
    xpc_object_t v7 = (void *)v11[5];
    if (v7) {
      nw_protocol_stack_remove_protocol(*(void **)(a1 + 32), v7);
    }
    _Block_object_dispose(&v10, 8);
  }

  return 1LL;
}

void sub_1821431D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void __nw_proxy_config_remove_protocols_from_stack_block_invoke_2(uint64_t a1, void *a2)
{
  os_log_type_t v8 = a2;
  nw_protocol_definition_t v3 = nw_protocol_options_copy_definition(v8);
  identifier = nw_protocol_definition_get_identifier(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v7 = *(void *)(v5 + 40);
  xpc_object_t v6 = (id *)(v5 + 40);
}

BOOL nw_proxy_config_supports_connection(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v83 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = a4;
  if (!v7)
  {
    __nwlog_obj();
    nw_protocol_definition_t v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
    v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_181A5C000, v51, v52, "%{public}s called with null config", buf, 0xCu);
      }

      goto LABEL_120;
    }

    if (!v80)
    {
      __nwlog_obj();
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v64 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl( &dword_181A5C000,  v51,  v64,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_120;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v58 = type[0];
    BOOL v59 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_181A5C000, v51, v58, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }

      goto LABEL_120;
    }

    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v51,  v58,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_102;
  }

  if (!v8)
  {
    __nwlog_obj();
    nw_protocol_definition_t v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
    v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v54 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_181A5C000, v51, v54, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_120;
    }

    if (!v80)
    {
      __nwlog_obj();
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl( &dword_181A5C000,  v51,  v65,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_120;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v60 = type[0];
    BOOL v61 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_181A5C000, v51, v60, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_120;
    }

    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v51,  v60,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_102;
  }

  if (!v9)
  {
    __nwlog_obj();
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
    v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v56 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_181A5C000, v51, v56, "%{public}s called with null parameters", buf, 0xCu);
      }

void sub_182143EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_supports_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (*string_ptr)
  {
    uint64_t v10 = 0LL;
    int v11 = &v10;
    uint64_t v12 = 0x2020000000LL;
    char v13 = 0;
    xpc_object_t v6 = *(nw_protocol_stack **)(a1 + 32);
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 3221225472LL;
    v9[2] = __nw_proxy_config_supports_connection_block_invoke_2;
    v9[3] = &unk_189BBD140;
    v9[4] = &v10;
    v9[5] = string_ptr;
    nw_protocol_stack_iterate_application_protocols(v6, v9);
    BOOL v7 = *((_BYTE *)v11 + 24) != 0;
    if (!*((_BYTE *)v11 + 24)) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    }
    _Block_object_dispose(&v10, 8);
  }

  else
  {
    BOOL v7 = 1LL;
  }

  return v7;
}

void sub_182144040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_supports_connection_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4 && object_getClass(v4) == (Class)MEMORY[0x1895F92E8])
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    uint64_t v6 = 1LL;
    if (nw_endpoint_proxy_match_pattern_to_endpoint(*(void **)(a1 + 32), string_ptr))
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  return v6;
}

void sub_1821440D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_supports_connection_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4 && object_getClass(v4) == (Class)MEMORY[0x1895F92E8])
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    uint64_t v6 = 1LL;
    if (nw_endpoint_proxy_match_pattern_to_endpoint(*(void **)(a1 + 32), string_ptr))
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  return v6;
}

void sub_18214416C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_proxy_config_can_use_tcp_converterv_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  if ((result & 1) != 0 || (uint64_t result = MGGetBoolAnswer(), (_DWORD)result)) {
    nw_proxy_config_can_use_tcp_converter(void)::allowed = 1;
  }
  return result;
}

void __nw_proxy_config_supports_connection_block_invoke_2(uint64_t a1, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
}

uint64_t nw_proxy_config_get_is_companion_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[172] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_proxy_config_get_is_companion_proxy";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_proxy_config_get_is_companion_proxy";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_proxy_config_get_is_companion_proxy";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_proxy_config_get_is_companion_proxy";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_proxy_config_get_is_companion_proxy";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_proxy_config_supports_unsatisfied_paths(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*((_BYTE *)v1 + 170) & 0x40) == 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_proxy_config_supports_unsatisfied_paths";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_proxy_config_supports_unsatisfied_paths";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_proxy_config_supports_unsatisfied_paths";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_proxy_config_supports_unsatisfied_paths";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_proxy_config_supports_unsatisfied_paths";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_override_opaque_https(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[171] >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_proxy_config_override_opaque_https";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_proxy_config_override_opaque_https";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_proxy_config_override_opaque_https";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_proxy_config_override_opaque_https";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_proxy_config_override_opaque_https";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t *nw_proxy_config_create_with_agent_data(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  return nw_proxy_config_create_with_agent_data_extended(a1, a2, a3, 0LL);
}

uint64_t *nw_proxy_config_create_with_agent_data_extended( uint64_t a1, unint64_t a2, _OWORD *a3, _BYTE *a4)
{
  uint64_t v251 = *MEMORY[0x1895F89C0];
  nw_protocol_definition_t v4 = &unk_182665000;
  if (!a1)
  {
    __nwlog_obj();
    v191 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    v192 = (char *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    uu[0] = 0;
    if (v245[0] == 17)
    {
      __nwlog_obj();
      v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v194 = v245[0];
      if (os_log_type_enabled(v193, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_181A5C000, v193, v194, "%{public}s called with null bytes", buf, 0xCu);
      }
    }

    else if (uu[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v198 = v245[0];
      BOOL v199 = os_log_type_enabled(v193, (os_log_type_t)v245[0]);
      if (backtrace_string)
      {
        if (v199)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v193,  v198,  "%{public}s called with null bytes, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v192) {
          return 0LL;
        }
        goto LABEL_498;
      }

      if (v199)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_181A5C000, v193, v198, "%{public}s called with null bytes, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v217 = v245[0];
      if (os_log_type_enabled(v193, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl( &dword_181A5C000,  v193,  v217,  "%{public}s called with null bytes, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_496;
  }

  unint64_t v6 = a2 - 25;
  if (a2 <= 0x19)
  {
    __nwlog_obj();
    v195 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    v192 = (char *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    uu[0] = 0;
    if (v245[0] == 17)
    {
      __nwlog_obj();
      v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v196 = v245[0];
      if (os_log_type_enabled(v193, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl( &dword_181A5C000,  v193,  v196,  "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data))",  buf,  0xCu);
      }
    }

    else if (uu[0])
    {
      v200 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v201 = v245[0];
      BOOL v202 = os_log_type_enabled(v193, (os_log_type_t)v245[0]);
      if (v200)
      {
        if (v202)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v200;
          _os_log_impl( &dword_181A5C000,  v193,  v201,  "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data)), dump ing backtrace:%{public}s",  buf,  0x16u);
        }

        free(v200);
LABEL_497:
        if (!v192) {
          return 0LL;
        }
LABEL_498:
        free(v192);
        return 0LL;
      }

      if (v202)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl( &dword_181A5C000,  v193,  v201,  "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data)), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v218 = v245[0];
      if (os_log_type_enabled(v193, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl( &dword_181A5C000,  v193,  v218,  "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data)), backtr ace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_496:
    goto LABEL_497;
  }

  if (a4) {
    *a4 = 1;
  }
  *(_OWORD *)uu = *a3;
  if (a2 - 31 > 0xFFFFFFFFFFFFFFF9LL)
  {
    v235 = 0LL;
    keys = 0LL;
    id v240 = 0LL;
    stack = 0LL;
    v225 = 0LL;
    id v226 = 0LL;
    id v232 = 0LL;
    id v233 = 0LL;
    id v227 = 0LL;
    id v228 = 0LL;
    objects = 0LL;
    id obj = 0LL;
    v237 = 0LL;
    goto LABEL_388;
  }

  v222 = a4;
  nw_endpoint_t v234 = 0LL;
  v235 = 0LL;
  id v228 = 0LL;
  __s1 = 0LL;
  stack = 0LL;
  v225 = 0LL;
  id v226 = 0LL;
  char v223 = 0;
  keys = 0LL;
  v237 = 0LL;
  xpc_object_t v9 = 0LL;
  id v232 = 0LL;
  id v233 = 0LL;
  id v227 = 0LL;
  objects = 0LL;
  id obj = 0LL;
  unint64_t v10 = 0LL;
  unint64_t v242 = a2 - 30;
  do
  {
    int v11 = *(unsigned __int8 *)(a1 + 25 + v10);
    size_t v12 = *(unsigned int *)(a1 + 26 + v10);
    if (!(_DWORD)v12) {
      goto LABEL_35;
    }
    if (v12 <= 0xFFFFFFF9)
    {
      BOOL v13 = v6 >= v12 + 5 && v6 - (v12 + 5) >= v10;
      if (v13)
      {
        nw_protocol_options_t v22 = (char *)(a1 + 30 + v10);
        goto LABEL_36;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&_BYTE buf[24] = v6;
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v12;
    id v15 = (void *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    char v244 = 0;
    if (__nwlog_fault((const char *)v15, v245, &v244))
    {
      if (v245[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = v245[0];
        if (os_log_type_enabled(v16, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = v6;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v12;
          _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u",  buf,  0x26u);
        }
      }

      else
      {
        if (v244)
        {
          char v18 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v19 = (os_log_s *)(id)gLogObj;
          os_log_type_t v20 = v245[0];
          BOOL v21 = os_log_type_enabled(v19, (os_log_type_t)v245[0]);
          if (v18)
          {
            if (v21)
            {
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v10;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&_BYTE buf[24] = v6;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v12;
              *(_WORD *)&buf[38] = 2082;
              *(void *)&buf[40] = v18;
              _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s",  buf,  0x30u);
            }

            free(v18);
            if (!v15) {
              goto LABEL_35;
            }
LABEL_34:
            free(v15);
            goto LABEL_35;
          }

          if (v21)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v10;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = v6;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v12;
            _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace",  buf,  0x26u);
          }

          goto LABEL_33;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = v245[0];
        if (os_log_type_enabled(v16, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = v6;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v12;
          _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded",  buf,  0x26u);
        }
      }
    }

LABEL_381:
            }

        if (!v172)
        {
LABEL_383:
          os_log_type_t v123 = 0LL;
          unint64_t v6 = (os_log_s *)MEMORY[0x1895F87A8];
          __int16 v28 = (unint64_t)v222;
          nw_proxy_config_t v2 = v220;
          goto LABEL_197;
        }

        if ((*(_BYTE *)(v12 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            os_log_type_t v196 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v196, OS_LOG_TYPE_DEBUG))
            {
              v197 = *(void *)(v12 + 488);
              os_log_type_t v198 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
              BOOL v199 = *(_DWORD *)(v12 + 860);
              if (v197) {
                LODWORD(v197) = *(_DWORD *)(v197 + 424);
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_parser_signal_eof_if_needed";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v12 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&_BYTE buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v198;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v199;
              *(_WORD *)v236 = 1024;
              *(_DWORD *)&v236[2] = v197;
              _os_log_impl( &dword_181A5C000,  v196,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> signaled eof and terminated message successfully",  buf,  0x32u);
              v113 = (unsigned __int16 *)(v12 + 872);
            }
          }
        }

        *((_BYTE *)v113 + 2) = (*v113 | (*((unsigned __int8 *)v113 + 2) << 16) | 0x10000u) >> 16;
        goto LABEL_131;
      }

      v118 = llhttp_finish(v12 + 200);
      v113 = (unsigned __int16 *)(v12 + 872);
      if ((*v230 & 4) != 0) {
        goto LABEL_381;
      }
      unsigned int v114 = v118;
      if (!v118) {
        goto LABEL_381;
      }
      if (v118 != 14) {
        goto LABEL_196;
      }
      v119 = *(void *)(v12 + 488);
      if (v119)
      {
        unsigned int v114 = 14;
        if ((*v230 & 1) != 0
          && (*(_WORD *)(v119 + 428) & 1) == 0
          && !*(_DWORD *)(v12 + 848)
          && !*(_DWORD *)(v12 + 852)
          && !*(_DWORD *)(v12 + 856))
        {
          if ((*v230 & 2) != 0 && *(void *)(v12 + 800))
          {
            if (!*(void *)(v12 + 808))
            {
              v195 = strdup("");
              if (!v195)
              {
                id v226 = (os_log_s *)__nwlog_obj();
                os_log_type_enabled(v226, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "strict_strdup";
                id v227 = (void *)_os_log_send_and_compose_impl();
                if (__nwlog_abort((uint64_t)v227))
                {
                  __break(1u);
                  return;
                }

                free(v227);
              }

              *(void *)(v12 + 808) = v195;
            }

            nw_http1_on_header_value_complete(v12 + 200);
          }

          nw_http1_on_headers_complete(v12 + 200);
          nw_http1_on_message_complete(v12 + 200);
          v113 = (unsigned __int16 *)(v12 + 872);
          goto LABEL_381;
        }

    if (v171) {
      free(v171);
    }
LABEL_383:

    _Block_object_dispose(out, 8);
    v166 = *v114;
    uint64_t v116 = lock;
  }

  if (v166 == 15)
  {
    *(void *)out = 0LL;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000LL;
    *(void *)&out[24] = __Block_byref_object_copy__79337;
    *(void *)&out[32] = __Block_byref_object_dispose__79338;
    *(void *)&out[40] = 0LL;
    v360[0] = MEMORY[0x1895F87A8];
    v360[1] = 3221225472LL;
    v361 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_166;
    v362 = &unk_189BC9210;
    v364 = out;
    v363 = v298;
    unsigned int v187 = v363;
    unsigned int v188 = v360;
    os_unfair_lock_lock(v116);
    v361((uint64_t)v188);
    os_unfair_lock_unlock(v116);

    int v189 = *(void *)(*(void *)&out[8] + 40LL);
    if (v189)
    {
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v189 + 16))(v189, v296);
      goto LABEL_405;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v190 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v191 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v191, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v192 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v193 = type;
        if (os_log_type_enabled(v192, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v192, v193, "%{public}s No handler for CLIENT_UNASSERT", v413, 0xCu);
        }

        goto LABEL_402;
      }

      if (v405)
      {
        os_log_type_t v194 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v192 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v195 = type;
        os_log_type_t v196 = os_log_type_enabled(v192, type);
        if (v194)
        {
          if (v196)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v194;
            _os_log_impl( &dword_181A5C000,  v192,  v195,  "%{public}s No handler for CLIENT_UNASSERT, dumping backtrace:%{public}s",  v413,  0x16u);
          }

          free(v194);
          goto LABEL_403;
        }

        if (v196)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v192,  v195,  "%{public}s No handler for CLIENT_UNASSERT, no backtrace",  v413,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v192 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v197 = type;
        if (os_log_type_enabled(v192, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v192,  v197,  "%{public}s No handler for CLIENT_UNASSERT, backtrace limit exceeded",  v413,  0xCu);
        }
      }

  os_log_type_t v8 = v237;
LABEL_269:
  BOOL v168 = v8 != 0;
  BOOL v171 = v245;
  if (v8) {
    *(void *)(v245 + 400) = v8;
  }
  os_log_type_t v172 = *v5;
  v169 = v172 | (*((unsigned __int8 *)v5 + 2) << 16) | 0x8000;
  void *v5 = v172 | 0x8000;
  if (!v6)
  {
    os_log_type_t v170 = 1;
    v166 = v239;
    goto LABEL_357;
  }

  v173 = (void *)(v245 + 24);
  os_log_type_t v174 = v258;
  v175 = v6;
  v176 = v6;
  while (2)
  {
    int v178 = *v174;
    if (*v174)
    {
      unsigned int v179 = *(void *)(v178 + 56);
      if (v179 && ((*(_BYTE *)(v179 + 153) & 8) != 0 || (*v238 & 0x80) == 0))
      {
        unsigned int v180 = *(void *)(v178 + 24);
        if (v180)
        {
          unsigned int v181 = *(void (**)(uint64_t, void *))(v180 + 64);
          if (v181)
          {
            unsigned int v182 = *(void **)(v178 + 40);
            if (v182 == &nw_protocol_ref_counted_handle)
            {
              unsigned int v183 = *(void *)(v178 + 88);
              if (v183) {
                *(void *)(v178 + 88) = v183 + 1;
              }
            }

            if (*(_UNKNOWN **)(v171 + 64) == &nw_protocol_ref_counted_handle)
            {
              int v184 = *(void *)(v171 + 112);
              if (v184) {
                *(void *)(v171 + 112) = v184 + 1;
              }
              v181(v178, v173);
              if (*(_UNKNOWN **)(v171 + 64) == &nw_protocol_ref_counted_handle)
              {
                int v189 = *(void *)(v171 + 112);
                if (v189)
                {
                  v190 = v189 - 1;
                  *(void *)(v171 + 112) = v190;
                  if (!v190)
                  {
                    v191 = *(void (***)(void))(v171 + 88);
                    if (v191)
                    {
                      *(void *)(v171 + 88) = 0LL;
                      v191[2](v191);
                      _Block_release(v191);
                    }

                    if ((*(_BYTE *)(v171 + 96) & 1) != 0)
                    {
                      v192 = *(const void **)(v171 + 88);
                      if (v192) {
                        _Block_release(v192);
                      }
                    }

                    free(v173);
                  }
                }
              }
            }

            else
            {
              v181(v178, v173);
            }

            if (v182 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v178 + 40) == &nw_protocol_ref_counted_handle)
            {
              unsigned int v185 = *(void *)(v178 + 88);
              if (v185)
              {
                unsigned int v186 = v185 - 1;
                *(void *)(v178 + 88) = v186;
                if (!v186)
                {
                  unsigned int v187 = *(void (***)(void))(v178 + 64);
                  if (v187)
                  {
                    *(void *)(v178 + 64) = 0LL;
                    v187[2](v187);
                    _Block_release(v187);
                  }

                  if ((*(_BYTE *)(v178 + 72) & 1) != 0)
                  {
                    unsigned int v188 = *(const void **)(v178 + 64);
                    if (v188) {
                      _Block_release(v188);
                    }
                  }

                  v177 = (char *)v178;
LABEL_274:
                  free(v177);
                  goto LABEL_275;
                }
              }
            }
          }
        }
      }

      goto LABEL_276;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v254 = "__nw_protocol_get_output_handler_context";
    v193 = (const char *)_os_log_send_and_compose_impl();
    v257[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (v257[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v194 = (os_log_s *)__nwlog_obj();
      v195 = v257[0];
      if (os_log_type_enabled(v194, v257[0]))
      {
        *(_DWORD *)buf = 136446210;
        v254 = "__nw_protocol_get_output_handler_context";
        os_log_type_t v196 = v194;
        v197 = v195;
        os_log_type_t v198 = "%{public}s called with null protocol";
        goto LABEL_321;
      }

      goto LABEL_322;
    }

    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v203 = (os_log_s *)__nwlog_obj();
      v204 = v257[0];
      if (!os_log_type_enabled(v203, v257[0])) {
        goto LABEL_322;
      }
      *(_DWORD *)buf = 136446210;
      v254 = "__nw_protocol_get_output_handler_context";
      os_log_type_t v196 = v203;
      v197 = v204;
      os_log_type_t v198 = "%{public}s called with null protocol, backtrace limit exceeded";
LABEL_321:
      _os_log_impl(&dword_181A5C000, v196, v197, v198, buf, 0xCu);
      goto LABEL_322;
    }

    BOOL v199 = (char *)__nw_create_backtrace_string();
    v200 = (os_log_s *)__nwlog_obj();
    os_log_type_t v201 = v257[0];
    BOOL v202 = os_log_type_enabled(v200, v257[0]);
    if (v199)
    {
      if (v202)
      {
        *(_DWORD *)buf = 136446466;
        v254 = "__nw_protocol_get_output_handler_context";
        v255 = 2082;
        v256[0] = v199;
        _os_log_impl( &dword_181A5C000,  v200,  v201,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v199);
      goto LABEL_322;
    }

    if (v202)
    {
      *(_DWORD *)buf = 136446210;
      v254 = "__nw_protocol_get_output_handler_context";
      os_log_type_t v196 = v200;
      v197 = v201;
      os_log_type_t v198 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_321;
    }

LABEL_382:
            if (!v99) {
              goto LABEL_385;
            }
LABEL_383:
            v152 = (char *)v99;
LABEL_384:
            free(v152);
            goto LABEL_385;
          }

          int v57 = v93 - 2;
          if ((v93 - 2) <= 3)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v106 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v57;
            v99 = (const char *)_os_log_send_and_compose_impl();

            v245[0] = 16;
            char v244 = 0;
            if (v245[0] == 17)
            {
              __nwlog_obj();
              v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v107 = v245[0];
              if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57;
                _os_log_impl(&dword_181A5C000, v100, v107, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
              }

              goto LABEL_381;
            }

            if (!v244)
            {
              __nwlog_obj();
              v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v157 = v245[0];
              if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57;
                _os_log_impl( &dword_181A5C000,  v100,  v157,  "%{public}s invalid buffer, underflow %u, backtrace limit exceeded",  buf,  0x12u);
              }

              goto LABEL_381;
            }

            v143 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v153 = v245[0];
            BOOL v154 = os_log_type_enabled(v100, (os_log_type_t)v245[0]);
            if (!v143)
            {
              if (v154)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57;
                _os_log_impl( &dword_181A5C000,  v100,  v153,  "%{public}s invalid buffer, underflow %u, no backtrace",  buf,  0x12u);
              }

              goto LABEL_381;
            }

            if (v154)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v57;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v143;
              _os_log_impl( &dword_181A5C000,  v100,  v153,  "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

        free(v172);
        goto LABEL_383;
      }

      os_log_type_t v220 = v2;
      BOOL v168 = __nwlog_obj();
      v169 = v28;
      os_log_type_t v170 = (void *)v168;
      *(_DWORD *)v267 = 136447234;
      BOOL v171 = v111;
      v268 = "nw_necp_append_tlv";
      v269 = 2048;
      *(void *)v270 = v112;
      *(_WORD *)&v270[8] = 2048;
      *(void *)v271 = v169;
      *(_WORD *)&v271[8] = 1024;
      *(_DWORD *)v272 = v111;
      *(_WORD *)&v272[4] = 1024;
      *(_DWORD *)&v272[6] = v114;
      os_log_type_t v172 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v257) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v173 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v174 = type[0];
        if (os_log_type_enabled(v173, type[0]))
        {
          *(_DWORD *)v267 = 136447234;
          v268 = "nw_necp_append_tlv";
          v269 = 2048;
          *(void *)v270 = v112;
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v222;
          *(_WORD *)&v271[8] = 1024;
          *(_DWORD *)v272 = v171;
          *(_WORD *)&v272[4] = 1024;
          *(_DWORD *)&v272[6] = v114;
          _os_log_impl( &dword_181A5C000,  v173,  v174,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  v267,  0x2Cu);
        }
      }

      else if ((_BYTE)v257)
      {
        v192 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v173 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v193 = type[0];
        os_log_type_t v194 = os_log_type_enabled(v173, type[0]);
        if (v192)
        {
          if (v194)
          {
            *(_DWORD *)v267 = 136447490;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(void *)v270 = v112;
            *(_WORD *)&v270[8] = 2048;
            *(void *)v271 = v222;
            *(_WORD *)&v271[8] = 1024;
            *(_DWORD *)v272 = v171;
            *(_WORD *)&v272[4] = 1024;
            *(_DWORD *)&v272[6] = v114;
            *(_WORD *)v273 = 2082;
            *(void *)&v273[2] = v192;
            _os_log_impl( &dword_181A5C000,  v173,  v193,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  v267,  0x36u);
          }

          free(v192);
          goto LABEL_381;
        }

        if (v194)
        {
          *(_DWORD *)v267 = 136447234;
          v268 = "nw_necp_append_tlv";
          v269 = 2048;
          *(void *)v270 = v112;
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v222;
          *(_WORD *)&v271[8] = 1024;
          *(_DWORD *)v272 = v171;
          *(_WORD *)&v272[4] = 1024;
          *(_DWORD *)&v272[6] = v114;
          _os_log_impl( &dword_181A5C000,  v173,  v193,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  v267,  0x2Cu);
        }
      }

      else
      {
        __nwlog_obj();
        v173 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v208 = type[0];
        if (os_log_type_enabled(v173, type[0]))
        {
          *(_DWORD *)v267 = 136447234;
          v268 = "nw_necp_append_tlv";
          v269 = 2048;
          *(void *)v270 = v112;
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v222;
          *(_WORD *)&v271[8] = 1024;
          *(_DWORD *)v272 = v171;
          *(_WORD *)&v272[4] = 1024;
          *(_DWORD *)&v272[6] = v114;
          _os_log_impl( &dword_181A5C000,  v173,  v208,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  v267,  0x2Cu);
        }
      }

LABEL_509:
      if (v204) {
        free(v204);
      }
      v225 = 0LL;
      stack = 0LL;
      v173 = 0LL;
      goto LABEL_442;
    }
  }

  v175 = v235;
  if (v235)
  {
    nw_dictionary_set_value(v235[1], __s1, stack);
    goto LABEL_441;
  }

  if ((v223 & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v176 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      _os_log_impl( &dword_181A5C000,  v176,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to create proxy config, error in deserializing stack",  buf,  0xCu);
    }

    goto LABEL_436;
  }

  if (__s1) {
    v177 = nw_proxy_config_create_with_stack_internal(v234, stack, __s1);
  }
  else {
    v177 = (uint64_t *)nw_proxy_config_create_with_stack(v234, stack);
  }
  v175 = v177;
  if (v177)
  {
LABEL_441:
    objc_storeStrong((id *)v175 + 6, obj);
    objc_storeStrong((id *)v175 + 2, keys);
    objc_storeStrong((id *)v175 + 3, v9);
    objc_storeStrong((id *)v175 + 4, v233);
    *((_DWORD *)v175 + 38) = *(unsigned __int8 *)(a1 + 20);
    *((_DWORD *)v175 + 39) = *(unsigned __int16 *)(a1 + 16);
    *((_WORD *)v175 + 84) = *(_WORD *)(a1 + 18);
    *((_DWORD *)v175 + 40) = *(unsigned __int8 *)(a1 + 21);
    int v178 = *((_BYTE *)v175 + 170) & 0xFE | *(_BYTE *)(a1 + 22) & 1;
    *((_BYTE *)v175 + 170) = v178;
    unsigned int v179 = v178 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a1 + 22) >> 1) & 1));
    *((_BYTE *)v175 + 170) = v179;
    unsigned int v180 = v179 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a1 + 22) >> 13) & 1));
    *((_BYTE *)v175 + 170) = v180;
    unsigned int v181 = v180 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a1 + 22) >> 2) & 1));
    *((_BYTE *)v175 + 170) = v181;
    unsigned int v182 = v181 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a1 + 22) >> 3) & 1));
    *((_BYTE *)v175 + 170) = v182;
    unsigned int v183 = v182 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 22) >> 4) & 1));
    *((_BYTE *)v175 + 170) = v183;
    LOBYTE(v183) = v183 & 0xBF | (((*(_BYTE *)(a1 + 22) & 0x20) != 0) << 6);
    *((_BYTE *)v175 + 170) = v183;
    *((_BYTE *)v175 + 170) = (2 * *(_BYTE *)(a1 + 22)) & 0x80 | v183 & 0x7F;
    int v184 = *((_BYTE *)v175 + 171) & 0xFE | (*(unsigned __int8 *)(a1 + 22) >> 7);
    *((_BYTE *)v175 + 171) = v184;
    unsigned int v185 = v184 & 0xFFFFFFFD | (2 * (HIBYTE(*(unsigned __int16 *)(a1 + 22)) & 1));
    *((_BYTE *)v175 + 171) = v185;
    unsigned int v186 = v185 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a1 + 22) >> 9) & 1));
    *((_BYTE *)v175 + 171) = v186;
    unsigned int v187 = v186 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a1 + 22) >> 10) & 1));
    *((_BYTE *)v175 + 171) = v187;
    unsigned int v188 = v187 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a1 + 22) >> 11) & 1));
    *((_BYTE *)v175 + 171) = v188;
    LOBYTE(v188) = v188 & 0xBF | (((*(_WORD *)(a1 + 22) & 0x1000) != 0) << 6);
    *((_BYTE *)v175 + 171) = v188;
    *((_BYTE *)v175 + 171) = (*(unsigned __int16 *)(a1 + 22) >> 7) & 0x80 | v188 & 0x7F;
    int v189 = *((_BYTE *)v175 + 172) & 0xFE | (*(unsigned __int16 *)(a1 + 22) >> 15);
    *((_BYTE *)v175 + 172) = v189;
    *((_BYTE *)v175 + 172) = (2 * (*(_BYTE *)(a1 + 24) & 1)) | v189 & 0xFD;
    *(_OWORD *)(v175 + 9) = *(_OWORD *)a1;
    *(_OWORD *)(v175 + 7) = *(_OWORD *)uu;
    objc_storeStrong((id *)v175 + 15, v226);
    objc_storeStrong((id *)v175 + 16, v227);
    objc_storeStrong((id *)v175 + 17, v228);
    objc_storeStrong((id *)v175 + 13, v232);
    objc_storeStrong((id *)v175 + 18, objects);
    v173 = v175;
    v235 = v173;
    goto LABEL_442;
  }

  __nwlog_obj();
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
  v208 = (char *)_os_log_send_and_compose_impl();

  v245[0] = 16;
  char v244 = 0;
  if (__nwlog_fault(v208, v245, &v244))
  {
    if (v245[0] == 17)
    {
      __nwlog_obj();
      v209 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v210 = v245[0];
      if (os_log_type_enabled(v209, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_181A5C000, v209, v210, "%{public}s called with null config", buf, 0xCu);
      }

      goto LABEL_514;
    }

    if (v244)
    {
      v214 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v209 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v215 = v245[0];
      BOOL v216 = os_log_type_enabled(v209, (os_log_type_t)v245[0]);
      if (v214)
      {
        if (v216)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v214;
          _os_log_impl( &dword_181A5C000,  v209,  v215,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v214);
        goto LABEL_515;
      }

      if (v216)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_181A5C000, v209, v215, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v209 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v220 = v245[0];
      if (os_log_type_enabled(v209, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl( &dword_181A5C000,  v209,  v220,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

          free(v132);
          goto LABEL_510;
        }

        if (v152)
        {
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v135 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_507:
          _os_log_impl(&dword_181A5C000, v133, v134, v135, buf, 0xCu);
        }
      }
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v132 = (void *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v178[0] = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v133 = (os_log_s *)__nwlog_obj();
        BOOL v134 = type[0];
        if (!os_log_type_enabled(v133, type[0])) {
          goto LABEL_508;
        }
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v135 = "%{public}s called with null buffer";
        goto LABEL_507;
      }

      if (v178[0] == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v133 = (os_log_s *)__nwlog_obj();
        BOOL v134 = type[0];
        if (!os_log_type_enabled(v133, type[0])) {
          goto LABEL_508;
        }
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v135 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_507;
      }

      BOOL v149 = (char *)__nw_create_backtrace_string();
      os_log_type_t v133 = (os_log_s *)__nwlog_obj();
      BOOL v134 = type[0];
      os_log_type_t v150 = os_log_type_enabled(v133, type[0]);
      if (!v149)
      {
        if (!v150) {
          goto LABEL_508;
        }
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v135 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_507;
      }

      if (v150)
      {
        *(_DWORD *)buf = 136446466;
        v205 = "_http_safe_append";
        os_log_type_t v206 = 2082;
        v207 = v149;
        _os_log_impl( &dword_181A5C000,  v133,  v134,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v149);
    }

void sub_1821483F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *a25, void *a26, void *a27, uint64_t a28, void *a29, void *a30, void *a31, void *a32, void *a33, void *a34, void *a35, void *a36, void *a37, void *a38)
{
  _Unwind_Resume(a1);
}

uint64_t *nw_proxy_config_create_with_stack_internal(void *a1, void *a2, const char *a3)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  id v6 = a1;
  id v7 = a2;
  os_log_type_t v8 = v7;
  if (v6)
  {
    if (v7)
    {
      xpc_object_t v9 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_proxy_config);
      unint64_t v10 = (uint64_t *)v9;
      if (v9)
      {
        v9->mode = 1;
        objc_storeStrong((id *)&v9->endpoint, a1);
        int v11 = nw_dictionary_create();
        size_t v12 = (void *)v10[1];
        v10[1] = (uint64_t)v11;

        nw_dictionary_set_value(v10[1], a3, v8);
        BOOL v13 = v10;
LABEL_24:

        goto LABEL_25;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      xpc_object_t v39 = "nw_proxy_config_create_with_stack_internal";
      id v15 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v36 = 0;
      if (__nwlog_fault(v15, &type, &v36))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v16 = (os_log_s *)(id)gLogObj;
          os_log_type_t v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446210;
            xpc_object_t v39 = "nw_proxy_config_create_with_stack_internal";
            _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
          }
        }

        else if (v36)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v16 = (os_log_s *)(id)gLogObj;
          os_log_type_t v19 = type;
          BOOL v20 = os_log_type_enabled(v16, type);
          if (backtrace_string)
          {
            if (v20)
            {
              *(_DWORD *)buf = 136446466;
              xpc_object_t v39 = "nw_proxy_config_create_with_stack_internal";
              __int16 v40 = 2082;
              id v41 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            if (!v15) {
              goto LABEL_24;
            }
            goto LABEL_23;
          }

          if (v20)
          {
            *(_DWORD *)buf = 136446210;
            xpc_object_t v39 = "nw_proxy_config_create_with_stack_internal";
            _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s [nw_proxy_config init] failed, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v16 = (os_log_s *)(id)gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446210;
            xpc_object_t v39 = "nw_proxy_config_create_with_stack_internal";
            _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v15) {
        goto LABEL_24;
      }
LABEL_23:
      free(v15);
      goto LABEL_24;
    }

    __nwlog_obj();
    id v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    xpc_object_t v39 = "nw_proxy_config_create_with_stack_internal";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v24, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          xpc_object_t v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_181A5C000, v25, v28, "%{public}s called with null stack", buf, 0xCu);
        }

void sub_182148C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL42nw_proxy_config_initialize_known_protocolsv_block_invoke()
{
  if (nw_protocol_socksv4_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_socksv4_copy_definition::onceToken, &__block_literal_global_44241);
  }
  v0 = (void *)nw_protocol_socksv4_copy_definition::definition;
  if (nw_protocol_socksv4_copy_definition::definition) {
    v0 = os_retain((void *)nw_protocol_socksv4_copy_definition::definition);
  }

  if (nw_protocol_socksv5_copy_definition::onceToken[0] != -1) {
    dispatch_once(nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_83827);
  }
  id v1 = (void *)nw_protocol_socksv5_copy_definition::definition;
  if (nw_protocol_socksv5_copy_definition::definition) {
    id v1 = os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
  }

  nw_proxy_config_t v2 = (void *)nw_protocol_masque_get_definition(void)::definition;
  if (nw_protocol_masque_get_definition(void)::definition)
  {
    nw_proxy_config_t v2 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
    if (v2) {
      nw_proxy_config_t v2 = os_retain(v2);
    }
  }

  uint64_t v3 = (void *)nw_protocol_masque_listener_get_definition(void)::definition;
  if (nw_protocol_masque_listener_get_definition(void)::definition)
  {
    uint64_t v3 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
    if (v3) {
      uint64_t v3 = os_retain(v3);
    }
  }

  if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72237);
  }

  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }

  if (nw_protocol_copy_http1_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72463);
  }

  if (nw_protocol_copy_http2_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
  }

  if (nw_protocol_copy_http3_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72547);
  }

  if (nw_protocol_demux_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25952);
  }
  nw_protocol_definition_t v4 = (void *)nw_protocol_demux_copy_definition::definition;
  if (nw_protocol_demux_copy_definition::definition) {
    nw_protocol_definition_t v4 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
  }

  if (nw_protocol_copy_oblivious_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_36_73823);
  }

  if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_37_73860);
  }

  if (nw_protocol_copy_qpod_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_28_56380);
  }

  if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
    dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
  }
}

BOOL nw_proxy_config_copy_agent_data(uint64_t a1)
{
  uint64_t v3 = (void *)MEMORY[0x1895F8858](a1);
  uint64_t v276 = *MEMORY[0x1895F89C0];
  nw_protocol_definition_t v4 = v3;
  uint64_t v5 = (uint64_t)v4;
  if (!v4)
  {
    __nwlog_obj();
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v264 = "nw_proxy_config_copy_agent_data";
    v142 = (char *)_os_log_send_and_compose_impl();

    v267[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (v267[0] == 17)
    {
      __nwlog_obj();
      v143 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v144 = v267[0];
      if (os_log_type_enabled(v143, (os_log_type_t)v267[0]))
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_181A5C000, v143, v144, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v143 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v148 = v267[0];
      BOOL v149 = os_log_type_enabled(v143, (os_log_type_t)v267[0]);
      if (backtrace_string)
      {
        if (v149)
        {
          *(_DWORD *)buf = 136446466;
          v264 = "nw_proxy_config_copy_agent_data";
          __int16 v265 = 2082;
          v266 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v143,  v148,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_322:
        if (!v142)
        {
LABEL_13:
          dispatch_data_t v32 = 0LL;
LABEL_216:

          return (BOOL)v32;
        }

LABEL_323:
        free(v142);
        goto LABEL_13;
      }

      if (v149)
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_181A5C000, v143, v148, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v143 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v175 = v267[0];
      if (os_log_type_enabled(v143, (os_log_type_t)v267[0]))
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl( &dword_181A5C000,  v143,  v175,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }

                os_release(v225);
                goto LABEL_324;
              }

    uint64_t v51 = v163;
    if (!v104) {
      goto LABEL_334;
    }
    os_log_type_t v159 = (char *)v104;
    goto LABEL_333;
  }

  __nwlog_obj();
  os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v84, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  int v171 = "strict_calloc";
  os_log_type_t v172 = 2048;
  *(void *)v173 = 1LL;
  *(_WORD *)&v173[8] = 2048;
  *(void *)&v173[10] = v19;
  v85 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v85);
  if (!result)
  {
    free(v85);
    __nwlog_obj();
    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v171 = "nw_necp_append_tlv";
    os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v165 = 0;
    if (__nwlog_fault(v87, &type, &v165))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v89 = type;
        if (os_log_type_enabled(v88, type))
        {
          *(_DWORD *)buf = 136446210;
          int v171 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v88, v89, "%{public}s called with null tlv_start", buf, 0xCu);
        }
      }

      else if (v165)
      {
        v109 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v110 = type;
        unsigned __int8 v111 = os_log_type_enabled(v88, type);
        if (v109)
        {
          if (v111)
          {
            *(_DWORD *)buf = 136446466;
            int v171 = "nw_necp_append_tlv";
            os_log_type_t v172 = 2082;
            *(void *)v173 = v109;
            _os_log_impl( &dword_181A5C000,  v88,  v110,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v109);
          goto LABEL_276;
        }

        if (v111)
        {
          *(_DWORD *)buf = 136446210;
          int v171 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v88, v110, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v149 = type;
        if (os_log_type_enabled(v88, type))
        {
          *(_DWORD *)buf = 136446210;
          int v171 = "nw_necp_append_tlv";
          _os_log_impl( &dword_181A5C000,  v88,  v149,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    _os_log_impl(&dword_181A5C000, v85, v86, v87, buf, 0xCu);
    goto LABEL_324;
  }

  v85 = (os_log_s *)__nwlog_obj();
  uint64_t v86 = type;
  if (os_log_type_enabled(v85, (os_log_type_t)type))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
    os_log_type_t v87 = "%{public}s nw_frame_create failed";
    goto LABEL_323;
  }

LABEL_321:
    goto LABEL_322;
  }

  if (v4[38] != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v31 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v264 = "nw_proxy_config_copy_agent_data";
      _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s Only protocol proxies can be serialized",  buf,  0xCu);
    }

    goto LABEL_13;
  }

  if (!*((void *)v4 + 1))
  {
    __nwlog_obj();
    BOOL v145 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v264 = "nw_proxy_config_copy_agent_data";
    v142 = (char *)_os_log_send_and_compose_impl();

    v267[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (v267[0] == 17)
    {
      __nwlog_obj();
      v143 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v146 = v267[0];
      if (os_log_type_enabled(v143, (os_log_type_t)v267[0]))
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_181A5C000, v143, v146, "%{public}s called with null config->stacks", buf, 0xCu);
      }
    }

    else if (type[0])
    {
      id v158 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v143 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v159 = v267[0];
      BOOL v160 = os_log_type_enabled(v143, (os_log_type_t)v267[0]);
      if (v158)
      {
        if (v160)
        {
          *(_DWORD *)buf = 136446466;
          v264 = "nw_proxy_config_copy_agent_data";
          __int16 v265 = 2082;
          v266 = v158;
          _os_log_impl( &dword_181A5C000,  v143,  v159,  "%{public}s called with null config->stacks, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v158);
        if (!v142) {
          goto LABEL_13;
        }
        goto LABEL_323;
      }

      if (v160)
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl( &dword_181A5C000,  v143,  v159,  "%{public}s called with null config->stacks, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v143 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v195 = v267[0];
      if (os_log_type_enabled(v143, (os_log_type_t)v267[0]))
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl( &dword_181A5C000,  v143,  v195,  "%{public}s called with null config->stacks, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_321;
  }

  uint64_t v248 = 0LL;
  v249 = &v248;
  uint64_t v250 = 0x2020000000LL;
  id v6 = (os_log_s *)MEMORY[0x1895F87A8];
  uint64_t v251 = 0LL;
  enumerator[0] = MEMORY[0x1895F87A8];
  enumerator[1] = 3221225472LL;
  enumerator[2] = __nw_proxy_config_copy_agent_data_block_invoke;
  enumerator[3] = &unk_189BC6448;
  enumerator[4] = &v248;
  nw_proxy_config_enumerate_match_domains((nw_proxy_config_t)v4, enumerator);
  v246[0] = v6;
  v246[1] = 3221225472LL;
  v246[2] = __nw_proxy_config_copy_agent_data_block_invoke_2;
  v246[3] = &unk_189BC6448;
  v246[4] = &v248;
  nw_proxy_config_enumerate_excluded_domains((nw_proxy_config_t)v5, v246);
  v245[0] = v6;
  v245[1] = 3221225472LL;
  v245[2] = __nw_proxy_config_copy_agent_data_block_invoke_3;
  v245[3] = &unk_189BC6448;
  uint8_t v245[4] = &v248;
  nw_proxy_config_enumerate_preferred_domains((void *)v5, v245);
  uint64_t v241 = 0LL;
  unint64_t v242 = &v241;
  uint64_t v243 = 0x2020000000LL;
  uint64_t v244 = 0LL;
  v240[0] = v6;
  v240[1] = 3221225472LL;
  v240[2] = __nw_proxy_config_copy_agent_data_block_invoke_4;
  v240[3] = &unk_189BC6448;
  v240[4] = &v241;
  nw_proxy_config_enumerate_alternate_agents((void *)v5, v240);
  size_t v7 = 4028LL;
  os_log_type_t v8 = buf;
  bzero(buf, 0xFBCuLL);
  uint64_t v9 = v249[3];
  uint64_t v10 = v242[3];
  BOOL v217 = (v9 | v10) != 0;
  if (v9 | v10)
  {
    uint64_t v11 = v9 + v10;
    size_t v7 = v11 + 4028;
    if (v11 == -4028)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v267 = 136446210;
      v268 = "strict_calloc";
      os_log_type_t v161 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v161);
      if (result) {
        goto LABEL_384;
      }
      free(v161);
    }

    os_log_type_t v8 = calloc(1uLL, v7);
    if (!v8)
    {
      __nwlog_obj();
      id v162 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v162, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v267 = 136446722;
      v268 = "strict_calloc";
      __int16 v269 = 2048;
      *(void *)v270 = 1LL;
      *(_WORD *)&v270[8] = 2048;
      *(void *)v271 = v7;
      uint64_t v5 = _os_log_send_and_compose_impl();

      __nwlog_abort(v5);
      __break(1u);
      goto LABEL_254;
    }
  }

  v8[20] = *(_DWORD *)(v5 + 152);
  *((_WORD *)v8 + 8) = *(_DWORD *)(v5 + 156);
  *((_WORD *)v8 + 9) = *(_WORD *)(v5 + 168);
  v8[21] = *(_DWORD *)(v5 + 160);
  int v12 = *((_WORD *)v8 + 11) & 0xFFFE | (v8[24] << 16) | *(_BYTE *)(v5 + 170) & 1;
  *((_WORD *)v8 + 11) = *((_WORD *)v8 + 11) & 0xFFFE | *(_BYTE *)(v5 + 170) & 1;
  unsigned int v13 = v12 & 0xFFFFDFFD | *(_BYTE *)(v5 + 170) & 2 | (((*(unsigned __int8 *)(v5 + 170) >> 2) & 1) << 13);
  *((_WORD *)v8 + 11) = v13;
  unsigned int v14 = v13 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(v5 + 170) >> 3) & 1));
  *((_WORD *)v8 + 11) = v14;
  unsigned int v15 = v14 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(v5 + 170) >> 4) & 1));
  *((_WORD *)v8 + 11) = v15;
  unsigned int v16 = v15 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(v5 + 170) >> 5) & 1));
  *((_WORD *)v8 + 11) = v16;
  unsigned int v17 = v16 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v5 + 170) >> 6) & 1));
  *((_WORD *)v8 + 11) = v17;
  unsigned int v18 = v17 & 0xFFFFFFBF | (((*(unsigned __int8 *)(v5 + 170) >> 7) & 1) << 6);
  *((_WORD *)v8 + 11) = v18;
  unsigned int v19 = v18 & 0xFFFFFE7F | ((*(_BYTE *)(v5 + 171) & 1) << 7) | (((*(unsigned __int8 *)(v5 + 171) >> 1) & 1) << 8);
  *((_WORD *)v8 + 11) = v19;
  unsigned int v20 = v19 & 0xFFFFFDFF | (((*(unsigned __int8 *)(v5 + 171) >> 2) & 1) << 9);
  *((_WORD *)v8 + 11) = v20;
  unsigned int v21 = v20 & 0xFFFFFBFF | (((*(unsigned __int8 *)(v5 + 171) >> 3) & 1) << 10);
  *((_WORD *)v8 + 11) = v21;
  unsigned int v22 = v21 & 0xFFFFF7FF | (((*(unsigned __int8 *)(v5 + 171) >> 4) & 1) << 11);
  *((_WORD *)v8 + 11) = v22;
  unsigned int v23 = v22 & 0xFFFFEFFF | (((*(unsigned __int8 *)(v5 + 171) >> 6) & 1) << 12);
  *((_WORD *)v8 + 11) = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | (((*(unsigned __int8 *)(v5 + 171) >> 7) & 1) << 14);
  *((_WORD *)v8 + 11) = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | ((*(_BYTE *)(v5 + 172) & 1) << 15);
  *((_WORD *)v8 + 11) = v25;
  unsigned int v26 = v25 & 0xFFFEFFFF | (((*(unsigned __int8 *)(v5 + 172) >> 1) & 1) << 16);
  *((_WORD *)v8 + 11) = v25;
  v8[24] = BYTE2(v26);
  *(_OWORD *)os_log_type_t v8 = *(_OWORD *)(v5 + 72);
  uint64_t v236 = 0LL;
  v237 = &v236;
  uint64_t v238 = 0x2020000000LL;
  id v239 = v8 + 25;
  int is_null = uuid_is_null((const unsigned __int8 *)(v5 + 56));
  unint64_t v28 = (unint64_t)&v8[v7];
  unint64_t v29 = v237[3];
  buffer = v8;
  v222 = &v8[v7];
  if (!is_null)
  {
    if (v29)
    {
      if (v29 < v28)
      {
        if (v28 - v29 > 0x14)
        {
          *(_BYTE *)unint64_t v29 = 15;
          *(_DWORD *)(v29 + 1) = 16;
          *(_OWORD *)(v29 + 5) = *(_OWORD *)(v5 + 56);
          v29 += 21LL;
          goto LABEL_38;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v33 = (id)gLogObj;
        *(_DWORD *)v267 = 136447490;
        v268 = "nw_necp_append_tlv";
        __int16 v269 = 2048;
        *(void *)v270 = v29;
        *(_WORD *)&v270[8] = 2048;
        *(void *)v271 = 21LL;
        *(_WORD *)&v271[8] = 2048;
        *(void *)v272 = &v8[v7];
        *(_WORD *)&v272[8] = 1024;
        *(_DWORD *)v273 = 15;
        *(_WORD *)&v273[4] = 1024;
        *(_DWORD *)&v273[6] = 16;
        os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v257) = 0;
        if (__nwlog_fault(v34, type, &v257))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v35 = (os_log_s *)(id)gLogObj;
            os_log_type_t v36 = type[0];
            if (os_log_type_enabled(v35, type[0]))
            {
              *(_DWORD *)v267 = 136447490;
              v268 = "nw_necp_append_tlv";
              __int16 v269 = 2048;
              *(void *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(void *)v271 = 21LL;
              *(_WORD *)&v271[8] = 2048;
              *(void *)v272 = &v8[v7];
              *(_WORD *)&v272[8] = 1024;
              *(_DWORD *)v273 = 15;
              *(_WORD *)&v273[4] = 1024;
              *(_DWORD *)&v273[6] = 16;
              _os_log_impl( &dword_181A5C000,  v35,  v36,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  v267,  0x36u);
            }
          }

          else if ((_BYTE)v257)
          {
            os_log_type_t v37 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v38 = type[0];
            BOOL v39 = os_log_type_enabled(v35, type[0]);
            if (v37)
            {
              if (v39)
              {
                *(_DWORD *)v267 = 136447746;
                v268 = "nw_necp_append_tlv";
                __int16 v269 = 2048;
                *(void *)v270 = v29;
                *(_WORD *)&v270[8] = 2048;
                *(void *)v271 = 21LL;
                *(_WORD *)&v271[8] = 2048;
                *(void *)v272 = &v8[v7];
                *(_WORD *)&v272[8] = 1024;
                *(_DWORD *)v273 = 15;
                *(_WORD *)&v273[4] = 1024;
                *(_DWORD *)&v273[6] = 16;
                __int16 v274 = 2082;
                v275 = v37;
                _os_log_impl( &dword_181A5C000,  v35,  v38,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  v267,  0x40u);
              }

              free(v37);
              unint64_t v28 = (unint64_t)&v8[v7];
              if (!v34) {
                goto LABEL_37;
              }
              goto LABEL_36;
            }

            if (v39)
            {
              *(_DWORD *)v267 = 136447490;
              v268 = "nw_necp_append_tlv";
              __int16 v269 = 2048;
              *(void *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(void *)v271 = 21LL;
              *(_WORD *)&v271[8] = 2048;
              *(void *)v272 = &v8[v7];
              *(_WORD *)&v272[8] = 1024;
              *(_DWORD *)v273 = 15;
              *(_WORD *)&v273[4] = 1024;
              *(_DWORD *)&v273[6] = 16;
              _os_log_impl( &dword_181A5C000,  v35,  v38,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  v267,  0x36u);
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v40 = type[0];
            if (os_log_type_enabled(v35, type[0]))
            {
              *(_DWORD *)v267 = 136447490;
              v268 = "nw_necp_append_tlv";
              __int16 v269 = 2048;
              *(void *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(void *)v271 = 21LL;
              *(_WORD *)&v271[8] = 2048;
              *(void *)v272 = &v8[v7];
              *(_WORD *)&v272[8] = 1024;
              *(_DWORD *)v273 = 15;
              *(_WORD *)&v273[4] = 1024;
              *(_DWORD *)&v273[6] = 16;
              _os_log_impl( &dword_181A5C000,  v35,  v40,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  v267,  0x36u);
            }
          }
        }

        unint64_t v28 = (unint64_t)&v8[v7];
        if (!v34)
        {
LABEL_37:
          unint64_t v29 = 0LL;
          goto LABEL_38;
        }

                                goto LABEL_327;
                              }

                              if (!(_BYTE)v353)
                              {
                                if (__nwlog_connection_log::onceToken != -1) {
                                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                                }
                                unsigned int v183 = (os_log_s *)(id)gconnectionLogObj;
                                v268 = type[0];
                                if (os_log_type_enabled(v183, type[0]))
                                {
                                  __int16 v269 = nw_endpoint_handler_get_id_string(v48);
                                  v270 = nw_endpoint_handler_dry_run_string(v48);
                                  logk = v183;
                                  v271 = nw_endpoint_handler_copy_endpoint(v48);
                                  v272 = nw_endpoint_get_logging_description(v271);
                                  v273 = v48;
                                  __int16 v274 = nw_endpoint_handler_state_string(v48);
                                  v275 = nw_endpoint_handler_mode_string(v273);
                                  uint64_t v276 = nw_endpoint_handler_copy_current_path(v273);
                                  *(_DWORD *)buf = 136447746;
                                  v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                                  v359 = 2082;
                                  v360 = (char *)v269;
                                  v361 = 2082;
                                  v362 = v270;
                                  v363 = 2082;
                                  v364 = (void *)v272;
                                  v365 = 2082;
                                  v366 = v274;
                                  v367 = 2082;
                                  v368 = v275;
                                  v369 = 2114;
                                  v370 = v276;
                                  _os_log_impl( &dword_181A5C000,  logk,  v268,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Fai led to repair protocol stack: Could not add old input_protocol, backtrace limit exceeded",  buf,  0x48u);

                                  unsigned int v183 = logk;
                                }

                                goto LABEL_321;
                              }

                              v260 = __nw_create_backtrace_string();
                              if (!v260)
                              {
                                if (__nwlog_connection_log::onceToken != -1) {
                                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                                }
                                v277 = (os_log_s *)(id)gconnectionLogObj;
                                v278 = type[0];
                                if (os_log_type_enabled(v277, type[0]))
                                {
                                  logl = v277;
                                  v279 = nw_endpoint_handler_get_id_string(v48);
                                  v280 = nw_endpoint_handler_dry_run_string(v48);
                                  v281 = nw_endpoint_handler_copy_endpoint(v48);
                                  v282 = nw_endpoint_get_logging_description(v281);
                                  v283 = v48;
                                  v284 = nw_endpoint_handler_state_string(v48);
                                  v285 = nw_endpoint_handler_mode_string(v283);
                                  v286 = nw_endpoint_handler_copy_current_path(v283);
                                  *(_DWORD *)buf = 136447746;
                                  v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                                  v359 = 2082;
                                  v360 = (char *)v279;
                                  v361 = 2082;
                                  v362 = v280;
                                  v363 = 2082;
                                  v364 = (void *)v282;
                                  v365 = 2082;
                                  v366 = v284;
                                  v367 = 2082;
                                  v368 = v285;
                                  v369 = 2114;
                                  v370 = v286;
                                  _os_log_impl( &dword_181A5C000,  logl,  v278,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Fai led to repair protocol stack: Could not add old input_protocol, no backtrace",  buf,  0x48u);

                                  v277 = logl;
                                }

                                goto LABEL_327;
                              }

                              BOOL v194 = (char *)v260;
                              if (__nwlog_connection_log::onceToken != -1) {
                                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                              }
                              os_log_type_t v195 = (os_log_s *)(id)gconnectionLogObj;
                              char v261 = type[0];
                              if (os_log_type_enabled(v195, type[0]))
                              {
                                os_log_type_t v262 = nw_endpoint_handler_get_id_string(v48);
                                logj = nw_endpoint_handler_dry_run_string(v48);
                                v328 = nw_endpoint_handler_copy_endpoint(v48);
                                v263 = nw_endpoint_get_logging_description(v328);
                                v264 = v48;
                                __int16 v265 = nw_endpoint_handler_state_string(v48);
                                v266 = nw_endpoint_handler_mode_string(v264);
                                v267 = nw_endpoint_handler_copy_current_path(v264);
                                *(_DWORD *)buf = 136448002;
                                v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                                v359 = 2082;
                                v360 = (char *)v262;
                                v361 = 2082;
                                v362 = logj;
                                v363 = 2082;
                                v364 = (void *)v263;
                                v365 = 2082;
                                v366 = v265;
                                v367 = 2082;
                                v368 = v266;
                                v369 = 2114;
                                v370 = v267;
                                v371 = 2082;
                                v372 = (nw_protocol_definition_t)v194;
                                _os_log_impl( &dword_181A5C000,  v195,  v261,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Faile d to repair protocol stack: Could not add old input_protocol, dumping backtrace:%{public}s",  buf,  0x52u);
                              }

LABEL_373:
      free(v177);
      goto LABEL_374;
    }

    __nwlog_obj();
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v267 = 136446210;
    v268 = "nw_necp_append_tlv";
    v177 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v257) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v178 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v179 = type[0];
      if (os_log_type_enabled(v178, type[0]))
      {
        *(_DWORD *)v267 = 136446210;
        v268 = "nw_necp_append_tlv";
        _os_log_impl(&dword_181A5C000, v178, v179, "%{public}s called with null tlv_start", v267, 0xCu);
      }
    }

    else if ((_BYTE)v257)
    {
      os_log_type_t v196 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v178 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v197 = type[0];
      BOOL v198 = os_log_type_enabled(v178, type[0]);
      if (v196)
      {
        if (v198)
        {
          *(_DWORD *)v267 = 136446466;
          v268 = "nw_necp_append_tlv";
          __int16 v269 = 2082;
          *(void *)v270 = v196;
          _os_log_impl( &dword_181A5C000,  v178,  v197,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  v267,  0x16u);
        }

        free(v196);
        goto LABEL_372;
      }

      if (v198)
      {
        *(_DWORD *)v267 = 136446210;
        v268 = "nw_necp_append_tlv";
        _os_log_impl(&dword_181A5C000, v178, v197, "%{public}s called with null tlv_start, no backtrace", v267, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v178 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v209 = type[0];
      if (os_log_type_enabled(v178, type[0]))
      {
        *(_DWORD *)v267 = 136446210;
        v268 = "nw_necp_append_tlv";
        _os_log_impl( &dword_181A5C000,  v178,  v209,  "%{public}s called with null tlv_start, backtrace limit exceeded",  v267,  0xCu);
      }
    }

    goto LABEL_372;
  }

  os_log_type_t v30 = *(void **)(v5 + 104);
  if (!v30)
  {
LABEL_155:
    BOOL v108 = nw_path_evaluator_add_endpoint_to_necp_message(*(void **)(v5 + 40), 1, v29, v28, 0);
    v237[3] = v108;
    if (!v108)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v122 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v267 = 136446210;
        v268 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_181A5C000, v122, OS_LOG_TYPE_ERROR, "%{public}s Failed to serialize endpoint", v267, 0xCu);
      }

      if (v217) {
        free(buffer);
      }
      dispatch_data_t v32 = 0LL;
      goto LABEL_215;
    }

    id v6 = (os_log_s *)MEMORY[0x1895F87A8];
    id v1 = (const char *)nw_proxy_config_default_transport(void)::default_transport_string;
    nw_proxy_config_t v2 = nw_dictionary_copy_value( *(void *)(v5 + 8),  nw_proxy_config_default_transport(void)::default_transport_string);
    if (!v2)
    {
LABEL_198:
      uint64_t v129 = *(void *)(v5 + 8);
      v230[0] = v6;
      v230[1] = 3221225472LL;
      v230[2] = __nw_proxy_config_copy_agent_data_block_invoke_102;
      v230[3] = &unk_189BBD168;
      nw_endpoint_t v234 = v1;
      id v130 = (id)v5;
      id v231 = v130;
      id v233 = &v236;
      unint64_t v235 = v28;
      id v131 = v2;
      id v232 = v131;
      nw_dictionary_apply(v129, (uint64_t)v230);
      v132 = (void *)v130[3];
      if (v132)
      {
        applier[0] = v6;
        applier[1] = 3221225472LL;
        applier[2] = __nw_proxy_config_copy_agent_data_block_invoke_2_103;
        applier[3] = &unk_189BC5538;
        void applier[4] = &v236;
        applier[5] = v28;
        xpc_array_apply(v132, applier);
      }

      os_log_type_t v133 = (void *)v130[4];
      if (v133)
      {
        v228[0] = v6;
        v228[1] = 3221225472LL;
        v228[2] = __nw_proxy_config_copy_agent_data_block_invoke_3_104;
        v228[3] = &unk_189BC5538;
        v228[4] = &v236;
        v228[5] = v28;
        xpc_array_apply(v133, v228);
      }

      if (v237[3])
      {
        BOOL v134 = (unsigned __int8 *)v130[6];
        if (v134)
        {
          v227[0] = v6;
          v227[1] = 3221225472LL;
          v227[2] = __nw_proxy_config_copy_agent_data_block_invoke_105;
          v227[3] = &unk_189BC93C8;
          v227[4] = &v236;
          v227[5] = v28;
          nw_array_apply(v134, (uint64_t)v227);
        }

        v226[0] = v6;
        v226[1] = 3221225472LL;
        v226[2] = __nw_proxy_config_copy_agent_data_block_invoke_106;
        v226[3] = &unk_189BBD190;
        v226[4] = &v236;
        v226[5] = v28;
        nw_proxy_config_enumerate_match_domains((nw_proxy_config_t)v130, v226);
        v225[0] = v6;
        v225[1] = 3221225472LL;
        v225[2] = __nw_proxy_config_copy_agent_data_block_invoke_2_107;
        v225[3] = &unk_189BBD190;
        v225[4] = &v236;
        v225[5] = v28;
        nw_proxy_config_enumerate_excluded_domains((nw_proxy_config_t)v130, v225);
        v224[0] = v6;
        v224[1] = 3221225472LL;
        v224[2] = __nw_proxy_config_copy_agent_data_block_invoke_3_108;
        v224[3] = &unk_189BBD190;
        v224[4] = &v236;
        v224[5] = v28;
        nw_proxy_config_enumerate_preferred_domains(v130, v224);
        v223[0] = v6;
        v223[1] = 3221225472LL;
        v223[2] = __nw_proxy_config_copy_agent_data_block_invoke_4_109;
        v223[3] = &unk_189BBD190;
        v223[4] = &v236;
        v223[5] = v28;
        nw_proxy_config_enumerate_alternate_agents(v130, v223);
        size_t v135 = v237[3] - (void)buffer;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v136 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v267 = 136446466;
          v268 = "nw_proxy_config_copy_agent_data";
          __int16 v269 = 2048;
          *(void *)v270 = v135;
          _os_log_impl( &dword_181A5C000,  v136,  OS_LOG_TYPE_INFO,  "%{public}s Serialized %zu bytes of agent data",  v267,  0x16u);
        }

        if (v249[3] || v242[3])
        {
          BOOL v137 = (void *)*MEMORY[0x1895F8A88];
          os_log_type_t v138 = buffer;
          size_t v139 = v135;
        }

        else
        {
          os_log_type_t v138 = buffer;
          size_t v139 = v135;
          BOOL v137 = 0LL;
        }

        dispatch_data_t v32 = dispatch_data_create(v138, v139, 0LL, v137);
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v140 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_proxy_config_copy_agent_data";
          _os_log_impl( &dword_181A5C000,  v140,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to serialize protocols",  v267,  0xCu);
        }

        dispatch_data_t v32 = 0LL;
      }

LABEL_215:
      _Block_object_dispose(&v236, 8);
      _Block_object_dispose(&v241, 8);
      _Block_object_dispose(&v248, 8);
      goto LABEL_216;
    }

    int should_proxy_transport_at_level = nw_proxy_config_should_proxy_transport_at_level( (NWConcrete_nw_proxy_config *)v5,  v1,  0LL);
    if (should_proxy_transport_at_level == 2) {
      char v110 = 10;
    }
    else {
      char v110 = 2;
    }
    if (should_proxy_transport_at_level == 3) {
      unsigned __int8 v111 = 3;
    }
    else {
      unsigned __int8 v111 = v110;
    }
    unint64_t v112 = v237[3];
    int v113 = strlen(v1);
    if (v112)
    {
      size_t v114 = (v113 + 1);
      if (v112 < v28)
      {
        if (v28 - v112 < v114 + 5)
        {
          os_log_type_t v219 = v2;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v115 = (id)gLogObj;
          unint64_t v116 = v28;
          id v117 = v115;
          int v118 = v111;
          *(_DWORD *)v267 = 136447490;
          v268 = "nw_necp_append_tlv";
          __int16 v269 = 2048;
          *(void *)v270 = v112;
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v114 + 5;
          *(_WORD *)&v271[8] = 2048;
          *(void *)v272 = v116;
          *(_WORD *)&v272[8] = 1024;
          *(_DWORD *)v273 = v111;
          *(_WORD *)&v273[4] = 1024;
          *(_DWORD *)&v273[6] = v114;
          v119 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v257) = 0;
          if (__nwlog_fault(v119, type, &v257))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v120 = (os_log_s *)(id)gLogObj;
              os_log_type_t v121 = type[0];
              if (os_log_type_enabled(v120, type[0]))
              {
                *(_DWORD *)v267 = 136447490;
                v268 = "nw_necp_append_tlv";
                __int16 v269 = 2048;
                *(void *)v270 = v112;
                *(_WORD *)&v270[8] = 2048;
                *(void *)v271 = v114 + 5;
                *(_WORD *)&v271[8] = 2048;
                *(void *)v272 = v222;
                *(_WORD *)&v272[8] = 1024;
                *(_DWORD *)v273 = v118;
                *(_WORD *)&v273[4] = 1024;
                *(_DWORD *)&v273[6] = v114;
                _os_log_impl( &dword_181A5C000,  v120,  v121,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  v267,  0x36u);
              }
            }

            else if ((_BYTE)v257)
            {
              BOOL v124 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              os_log_type_t v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v125 = type[0];
              BOOL v126 = os_log_type_enabled(v120, type[0]);
              if (v124)
              {
                if (v126)
                {
                  *(_DWORD *)v267 = 136447746;
                  v268 = "nw_necp_append_tlv";
                  __int16 v269 = 2048;
                  *(void *)v270 = v112;
                  *(_WORD *)&v270[8] = 2048;
                  *(void *)v271 = v114 + 5;
                  *(_WORD *)&v271[8] = 2048;
                  *(void *)v272 = v222;
                  *(_WORD *)&v272[8] = 1024;
                  *(_DWORD *)v273 = v118;
                  *(_WORD *)&v273[4] = 1024;
                  *(_DWORD *)&v273[6] = v114;
                  __int16 v274 = 2082;
                  v275 = v124;
                  _os_log_impl( &dword_181A5C000,  v120,  v125,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  v267,  0x40u);
                }

                free(v124);
                unint64_t v28 = (unint64_t)v222;
                if (!v119) {
                  goto LABEL_196;
                }
                goto LABEL_195;
              }

              if (v126)
              {
                *(_DWORD *)v267 = 136447490;
                v268 = "nw_necp_append_tlv";
                __int16 v269 = 2048;
                *(void *)v270 = v112;
                *(_WORD *)&v270[8] = 2048;
                *(void *)v271 = v114 + 5;
                *(_WORD *)&v271[8] = 2048;
                *(void *)v272 = v222;
                *(_WORD *)&v272[8] = 1024;
                *(_DWORD *)v273 = v118;
                *(_WORD *)&v273[4] = 1024;
                *(_DWORD *)&v273[6] = v114;
                _os_log_impl( &dword_181A5C000,  v120,  v125,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  v267,  0x36u);
              }
            }

            else
            {
              __nwlog_obj();
              os_log_type_t v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v127 = type[0];
              if (os_log_type_enabled(v120, type[0]))
              {
                *(_DWORD *)v267 = 136447490;
                v268 = "nw_necp_append_tlv";
                __int16 v269 = 2048;
                *(void *)v270 = v112;
                *(_WORD *)&v270[8] = 2048;
                *(void *)v271 = v114 + 5;
                *(_WORD *)&v271[8] = 2048;
                *(void *)v272 = v222;
                *(_WORD *)&v272[8] = 1024;
                *(_DWORD *)v273 = v118;
                *(_WORD *)&v273[4] = 1024;
                *(_DWORD *)&v273[6] = v114;
                _os_log_impl( &dword_181A5C000,  v120,  v127,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  v267,  0x36u);
              }
            }
          }

          unint64_t v28 = (unint64_t)v222;
          if (!v119)
          {
LABEL_196:
            uint64_t v123 = 0LL;
            id v6 = (os_log_s *)MEMORY[0x1895F87A8];
            nw_proxy_config_t v2 = v219;
            goto LABEL_197;
          }

LABEL_380:
      goto LABEL_381;
    }
    }

    nw_channel_check_defunct(v17);
  }

void sub_18214CA0C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x258], 8);
  _Block_object_dispose(&STACK[0x2F0], 8);

  _Unwind_Resume(a1);
}

size_t __nw_proxy_config_copy_agent_data_block_invoke(uint64_t a1, char *__s)
{
  size_t result = strlen(__s);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result + 6;
  return result;
}

size_t __nw_proxy_config_copy_agent_data_block_invoke_2(uint64_t a1, char *__s)
{
  size_t result = strlen(__s);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result + 6;
  return result;
}

size_t __nw_proxy_config_copy_agent_data_block_invoke_3(uint64_t a1, char *__s)
{
  size_t result = strlen(__s);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result + 6;
  return result;
}

uint64_t __nw_proxy_config_copy_agent_data_block_invoke_4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += 21LL;
  return result;
}

BOOL nw_proxy_config_serialize_one_stack(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v126 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    int v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unint64_t v116 = "nw_proxy_config_serialize_one_stack";
    unsigned int v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v106) = 0;
    if (__nwlog_fault(v50, type, &v106))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v116 = "nw_proxy_config_serialize_one_stack";
          _os_log_impl(&dword_181A5C000, v51, v52, "%{public}s called with null protocol_stack", buf, 0xCu);
        }
      }

      else if ((_BYTE)v106)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v54 = type[0];
        BOOL v55 = os_log_type_enabled(v51, type[0]);
        if (backtrace_string)
        {
          if (v55)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v116 = "nw_proxy_config_serialize_one_stack";
            __int16 v117 = 2082;
            size_t v118 = (size_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v51,  v54,  "%{public}s called with null protocol_stack, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_153;
        }

        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v116 = "nw_proxy_config_serialize_one_stack";
          _os_log_impl( &dword_181A5C000,  v51,  v54,  "%{public}s called with null protocol_stack, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v76 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v116 = "nw_proxy_config_serialize_one_stack";
          _os_log_impl( &dword_181A5C000,  v51,  v76,  "%{public}s called with null protocol_stack, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18214E828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_102(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  size_t v6 = strlen(a2);
  if (!v6 || (int v7 = v6, !strcmp(*(const char **)(a1 + 56), a2)))
  {
    BOOL v19 = 1LL;
    goto LABEL_41;
  }

  int should_proxy_transport_at_level = nw_proxy_config_should_proxy_transport_at_level( *(NWConcrete_nw_proxy_config **)(a1 + 32),  a2,  0LL);
  if (should_proxy_transport_at_level == 2) {
    char v9 = 10;
  }
  else {
    char v9 = 2;
  }
  if (should_proxy_transport_at_level == 3) {
    unsigned __int8 v10 = 3;
  }
  else {
    unsigned __int8 v10 = v9;
  }
  unint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (!v11)
  {
    id v26 = v5;
    __nwlog_obj();
    id v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_necp_append_tlv";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_181A5C000, v29, v30, "%{public}s called with null tlv_start", buf, 0xCu);
      }
    }

    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v63 = "nw_necp_append_tlv";
          __int16 v64 = 2082;
          *(void *)id v65 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v29,  v39,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_98:
        if (!v28)
        {
LABEL_100:
          size_t v20 = 0LL;
          id v5 = v26;
          goto LABEL_38;
        }

void sub_18214F6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_2_103(uint64_t a1, int a2, xpc_object_t xstring)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  string_ptr = xpc_string_get_string_ptr(xstring);
  size_t v5 = strlen(string_ptr);
  if (!v5) {
    return 1LL;
  }
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (!v6)
  {
    __nwlog_obj();
    size_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v47 = "nw_necp_append_tlv";
    unsigned int v21 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null tlv_start", buf, 0xCu);
        }

        goto LABEL_87;
      }

      if (!v44)
      {
        __nwlog_obj();
        os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v47 = "nw_necp_append_tlv";
          _os_log_impl( &dword_181A5C000,  v22,  v38,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_87;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v22, v29, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }

        goto LABEL_87;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2082;
        *(void *)int v49 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v22,  v29,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
      }

BOOL __nw_proxy_config_copy_agent_data_block_invoke_3_104(uint64_t a1, int a2, xpc_object_t xstring)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  string_ptr = xpc_string_get_string_ptr(xstring);
  size_t v5 = strlen(string_ptr);
  if (!v5) {
    return 1LL;
  }
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (!v6)
  {
    __nwlog_obj();
    size_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v47 = "nw_necp_append_tlv";
    unsigned int v21 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null tlv_start", buf, 0xCu);
        }

        goto LABEL_87;
      }

      if (!v44)
      {
        __nwlog_obj();
        os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v47 = "nw_necp_append_tlv";
          _os_log_impl( &dword_181A5C000,  v22,  v38,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_87;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v22, v29, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }

        goto LABEL_87;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2082;
        *(void *)int v49 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v22,  v29,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
      }

BOOL __nw_proxy_config_copy_agent_data_block_invoke_105(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  BOOL v5 = nw_path_evaluator_add_endpoint_to_necp_message( v4,  11,  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  *(void *)(a1 + 40),  0);
  BOOL v6 = v5;
  if (v5)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136446210;
      unsigned __int8 v10 = "nw_proxy_config_copy_agent_data_block_invoke";
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to serialize resolved endpoint",  (uint8_t *)&v9,  0xCu);
    }
  }

  return v6;
}

void sub_182151390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_proxy_config_copy_agent_data_block_invoke_106(uint64_t a1, char *__s)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  int v6 = strlen(__s);
  if (!v5)
  {
    __nwlog_obj();
    unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_necp_append_tlv";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start";
LABEL_75:
          _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
        }

void __nw_proxy_config_copy_agent_data_block_invoke_2_107(uint64_t a1, char *__s)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  int v6 = strlen(__s);
  if (!v5)
  {
    __nwlog_obj();
    unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_necp_append_tlv";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start";
LABEL_75:
          _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
        }

void __nw_proxy_config_copy_agent_data_block_invoke_3_108(uint64_t a1, char *__s)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  int v6 = strlen(__s);
  if (!v5)
  {
    __nwlog_obj();
    unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_necp_append_tlv";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start";
LABEL_75:
          _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
        }

void __nw_proxy_config_copy_agent_data_block_invoke_4_109(uint64_t a1, _OWORD *a2)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (!v3)
  {
    __nwlog_obj();
    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v35 = "nw_necp_append_tlv";
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_necp_append_tlv";
      uint32_t v19 = "%{public}s called with null tlv_start";
      goto LABEL_71;
    }

    if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v23 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v23) {
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446466;
        BOOL v35 = "nw_necp_append_tlv";
        __int16 v36 = 2082;
        *(void *)BOOL v37 = backtrace_string;
        size_t v13 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
        goto LABEL_48;
      }

      if (!v23) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_necp_append_tlv";
      uint32_t v19 = "%{public}s called with null tlv_start, no backtrace";
    }

    else
    {
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_necp_append_tlv";
      uint32_t v19 = "%{public}s called with null tlv_start, backtrace limit exceeded";
    }

void ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v105 = *MEMORY[0x1895F89C0];
  size_t __n = 0LL;
  nw_protocol_options_t options = a2;
  unint64_t v3 = (void *)nw_protocol_options_copy_serialized_bytes(options, (uint64_t)&__n, 0);
  os_log_type_t v84 = v3;
  if (!v3 || !__n)
  {
    nw_protocol_definition_t v16 = nw_protocol_options_copy_definition(options);
    identifier = nw_protocol_definition_get_identifier(v16);
    *(_OWORD *)os_log_type_t type = *(_OWORD *)identifier;
    __int128 v92 = *((_OWORD *)identifier + 1);
    uint64_t v93 = *((void *)identifier + 4);
    size_t v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (v18)
    {
      unint64_t v19 = *(void *)(a1 + 40);
      if (v19)
      {
        if (v18 < v19)
        {
          if (v19 - v18 > 0x2E)
          {
            *(_BYTE *)size_t v18 = 4;
            *(_DWORD *)(v18 + 1) = 42;
            *(_OWORD *)(v18 + 5) = *(_OWORD *)type;
            *(_OWORD *)(v18 + 21) = v92;
            *(void *)(v18 + 37) = v93;
            *(_WORD *)(v18 + 45) = 0;
            size_t v24 = v18 + 47;
            goto LABEL_51;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v20 = (id)gLogObj;
          *(_DWORD *)buf = 136447490;
          os_log_type_t v95 = "nw_necp_append_tlv";
          __int16 v96 = 2048;
          size_t v97 = v18;
          __int16 v98 = 2048;
          uint64_t v99 = 47LL;
          __int16 v100 = 2048;
          *(void *)id v101 = v19;
          *(_WORD *)&v101[8] = 1024;
          *(_DWORD *)id v102 = 4;
          *(_WORD *)&v102[4] = 1024;
          *(_DWORD *)&v102[6] = 42;
          unsigned int v21 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v90 = OS_LOG_TYPE_ERROR;
          char v89 = 0;
          if (__nwlog_fault(v21, &v90, &v89))
          {
            if (v90 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v22 = (os_log_s *)(id)gLogObj;
              os_log_type_t v23 = v90;
              if (os_log_type_enabled(v22, v90))
              {
                *(_DWORD *)buf = 136447490;
                os_log_type_t v95 = "nw_necp_append_tlv";
                __int16 v96 = 2048;
                size_t v97 = v18;
                __int16 v98 = 2048;
                uint64_t v99 = 47LL;
                __int16 v100 = 2048;
                *(void *)id v101 = v19;
                *(_WORD *)&v101[8] = 1024;
                *(_DWORD *)id v102 = 4;
                *(_WORD *)&v102[4] = 1024;
                *(_DWORD *)&v102[6] = 42;
                _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
              }
            }

            else if (v89)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v22 = (os_log_s *)(id)gLogObj;
              os_log_type_t v27 = v90;
              BOOL v28 = os_log_type_enabled(v22, v90);
              if (backtrace_string)
              {
                if (v28)
                {
                  *(_DWORD *)buf = 136447746;
                  os_log_type_t v95 = "nw_necp_append_tlv";
                  __int16 v96 = 2048;
                  size_t v97 = v18;
                  __int16 v98 = 2048;
                  uint64_t v99 = 47LL;
                  __int16 v100 = 2048;
                  *(void *)id v101 = v19;
                  *(_WORD *)&v101[8] = 1024;
                  *(_DWORD *)id v102 = 4;
                  *(_WORD *)&v102[4] = 1024;
                  *(_DWORD *)&v102[6] = 42;
                  __int16 v103 = 2082;
                  os_log_type_t v104 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
                }

                free(backtrace_string);
                if (!v21) {
                  goto LABEL_50;
                }
                goto LABEL_49;
              }

              if (v28)
              {
                *(_DWORD *)buf = 136447490;
                os_log_type_t v95 = "nw_necp_append_tlv";
                __int16 v96 = 2048;
                size_t v97 = v18;
                __int16 v98 = 2048;
                uint64_t v99 = 47LL;
                __int16 v100 = 2048;
                *(void *)id v101 = v19;
                *(_WORD *)&v101[8] = 1024;
                *(_DWORD *)id v102 = 4;
                *(_WORD *)&v102[4] = 1024;
                *(_DWORD *)&v102[6] = 42;
                _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
              }
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v22 = (os_log_s *)(id)gLogObj;
              os_log_type_t v32 = v90;
              if (os_log_type_enabled(v22, v90))
              {
                *(_DWORD *)buf = 136447490;
                os_log_type_t v95 = "nw_necp_append_tlv";
                __int16 v96 = 2048;
                size_t v97 = v18;
                __int16 v98 = 2048;
                uint64_t v99 = 47LL;
                __int16 v100 = 2048;
                *(void *)id v101 = v19;
                *(_WORD *)&v101[8] = 1024;
                *(_DWORD *)id v102 = 4;
                *(_WORD *)&v102[4] = 1024;
                *(_DWORD *)&v102[6] = 42;
                _os_log_impl( &dword_181A5C000,  v22,  v32,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
              }
            }

            goto LABEL_47;
          }

void sub_182155F2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke_234( uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = nw_path_evaluator_add_endpoint_to_necp_message( v3,  12,  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL)
                                                                            + 24LL),
                                                                  *(void *)(a1 + 40),
                                                                  0);
}

void sub_182155FA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_proxy_config_set_identifier(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    *(_OWORD *)(v3 + 56) = *a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  nw_protocol_definition_t v16 = "nw_proxy_config_set_identifier";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v16 = "nw_proxy_config_set_identifier";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          nw_protocol_definition_t v16 = "nw_proxy_config_set_identifier";
          __int16 v17 = 2082;
          size_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v16 = "nw_proxy_config_set_identifier";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v16 = "nw_proxy_config_set_identifier";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_get_identifier(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(v3 + 56);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  nw_protocol_definition_t v16 = "nw_proxy_config_get_identifier";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v16 = "nw_proxy_config_get_identifier";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          nw_protocol_definition_t v16 = "nw_proxy_config_get_identifier";
          __int16 v17 = 2082;
          size_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v16 = "nw_proxy_config_get_identifier";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v16 = "nw_proxy_config_get_identifier";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_proxy_config_get_agent_domain()
{
  return "Network";
}

const char *nw_proxy_config_get_agent_type()
{
  return "Proxy";
}

void nw_proxy_config_set_is_companion_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 172) = *((_BYTE *)v3 + 172) & 0xFD | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  int v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
  __int128 v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_publish(void *a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = (uint64_t)v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    size_t v25 = "nw_proxy_config_publish";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v14, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          size_t v25 = "nw_proxy_config_publish";
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null config", buf, 0xCu);
        }
      }

      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            size_t v25 = "nw_proxy_config_publish";
            __int16 v26 = 2082;
            os_log_type_t v27 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          size_t v25 = "nw_proxy_config_publish";
          _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          size_t v25 = "nw_proxy_config_publish";
          _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182156B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_proxy_config_publish_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v4 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136446466;
    id v6 = "nw_proxy_config_publish_block_invoke";
    __int16 v7 = 1024;
    int v8 = a3;
    _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s Proxy config received error %d",  (uint8_t *)&v5,  0x12u);
  }
}

void nw_proxy_config_unpublish(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_agent_change_state(*((void **)v1 + 12), 0, 0, 0LL);
    id v3 = (void *)v2[12];
    v2[12] = 0LL;

    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_unpublish";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_unpublish";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_proxy_config_unpublish";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_unpublish";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_unpublish";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_get_generation(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[41];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_proxy_config_get_generation";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_get_generation";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_proxy_config_get_generation";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_get_generation";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_get_generation";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_generation(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  BOOL v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 41) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_proxy_config_set_generation";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_set_generation";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_proxy_config_set_generation";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_set_generation";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_set_generation";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_proxy_config_get_epoch(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[84];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_proxy_config_get_epoch";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_get_epoch";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_proxy_config_get_epoch";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_get_epoch";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_get_epoch";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_proxy_config_set_epoch(void *a1, __int16 a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  BOOL v4 = v3;
  if (v3)
  {
    *((_WORD *)v3 + 84) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_proxy_config_set_epoch";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_set_epoch";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_proxy_config_set_epoch";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_set_epoch";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_proxy_config_set_epoch";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_relay_hop_t nw_relay_hop_create( nw_endpoint_t http3_relay_endpoint, nw_endpoint_t http2_relay_endpoint, nw_protocol_options_t relay_tls_options)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  unint64_t v5 = http3_relay_endpoint;
  unint64_t v6 = http2_relay_endpoint;
  os_log_type_t v7 = relay_tls_options;
  if (v5 | v6)
  {
    if (v5)
    {
      masque = nw_proxy_hop_create_masque((void *)v5);
      nw_proxy_hop_set_masque_version(masque, 2);
      if (!v6) {
        goto LABEL_10;
      }
      masque = masque;
      os_log_type_t v9 = (nw_endpoint *)(id)v6;
      if (masque)
      {
        objc_storeStrong((id *)&masque->fallback_endpoint, http2_relay_endpoint);
LABEL_6:

LABEL_9:
LABEL_10:
        os_log_type_t v12 = masque;
        char v13 = v7;
        if (v12)
        {
          objc_storeStrong(v12 + 6, relay_tls_options);
LABEL_12:

          goto LABEL_13;
        }

        __nwlog_obj();
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        __int16 v50 = "nw_proxy_hop_set_tls_options";
        os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v47 = 0;
        if (__nwlog_fault(v20, &type, &v47))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            unsigned int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v22 = type;
            if (os_log_type_enabled(v21, type))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v50 = "nw_proxy_hop_set_tls_options";
              _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null hop", buf, 0xCu);
            }
          }

          else if (v47)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            unsigned int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v27 = type;
            BOOL v28 = os_log_type_enabled(v21, type);
            if (backtrace_string)
            {
              if (v28)
              {
                *(_DWORD *)buf = 136446466;
                __int16 v50 = "nw_proxy_hop_set_tls_options";
                __int16 v51 = 2082;
                uint64_t v52 = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v21,  v27,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(backtrace_string);
              goto LABEL_69;
            }

            if (v28)
            {
              *(_DWORD *)buf = 136446210;
              __int16 v50 = "nw_proxy_hop_set_tls_options";
              _os_log_impl(&dword_181A5C000, v21, v27, "%{public}s called with null hop, no backtrace", buf, 0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            unsigned int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v41 = type;
            if (os_log_type_enabled(v21, type))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v50 = "nw_proxy_hop_set_tls_options";
              _os_log_impl( &dword_181A5C000,  v21,  v41,  "%{public}s called with null hop, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

void sub_1821582AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_relay_hop_add_additional_http_header_field( nw_relay_hop_t relay_hop, const char *field_name, const char *field_value)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  unint64_t v5 = relay_hop;
  unint64_t v6 = v5;
  if (v5)
  {
    nw_proxy_hop_add_extra_header(v5, (uint64_t)field_name, (uint64_t)field_value);
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_relay_hop_add_additional_http_header_field";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_relay_hop_add_additional_http_header_field";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null proxy_hop", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_relay_hop_add_additional_http_header_field";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null proxy_hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_relay_hop_add_additional_http_header_field";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null proxy_hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_relay_hop_add_additional_http_header_field";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null proxy_hop, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_proxy_config_t nw_proxy_config_create_relay(nw_relay_hop_t first_hop, nw_relay_hop_t second_hop)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v3 = first_hop;
  BOOL v4 = second_hop;
  if (v3)
  {
    unint64_t v5 = v3;
    char v6 = *((_BYTE *)v5 + 80);

    BOOL v7 = nw_array_create();
    nw_array_append(v7, v5);
    if ((v6 & 0x20) == 0)
    {
      if (!v4) {
        goto LABEL_6;
      }
      os_log_type_t v8 = v4;
      char v9 = *((_BYTE *)v8 + 80);

      if ((v9 & 0x20) == 0)
      {
        nw_array_append(v7, v8);
LABEL_6:
        privacy_proxy_internal = nw_proxy_config_create_privacy_proxy_internal((void *)v7);
        nw_proxy_config_set_is_privacy_proxy(privacy_proxy_internal, 0, 0);
        *((_BYTE *)privacy_proxy_internal + 170) |= 0xCu;
        *((_BYTE *)privacy_proxy_internal + 171) |= 0x80u;
        BOOL v11 = v5;
        id v12 = v11[4];

        if (v12)
        {
          if (v4)
          {
            BOOL v13 = v4;
            id v14 = v13[4];

            if (!v14) {
              goto LABEL_20;
            }
          }

          else
          {
          }

          fallback_privacy_proxy = nw_proxy_config_create_fallback_privacy_proxy((void *)v7);
          nw_proxy_config_set_is_privacy_proxy(fallback_privacy_proxy, 0, 0);
          *((_BYTE *)fallback_privacy_proxy + 170) |= 0xCu;
          *((_BYTE *)fallback_privacy_proxy + 171) |= 0x80u;
          privacy_proxy_internal = privacy_proxy_internal;
          uint64_t v21 = fallback_privacy_proxy;
          objc_storeStrong((id *)&privacy_proxy_internal->fallback_config, fallback_privacy_proxy);
        }

void sub_182158A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_proxy_config_t nw_proxy_config_create_oblivious_http( nw_relay_hop_t relay, const char *relay_resource_path, const uint8_t *gateway_key_config, size_t gateway_key_config_length)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  BOOL v7 = relay;
  if (!v7)
  {
    __nwlog_obj();
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null relay", buf, 0xCu);
      }

      goto LABEL_90;
    }

    if (!v51)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl( &dword_181A5C000,  v21,  v46,  "%{public}s called with null relay, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_181A5C000, v21, v34, "%{public}s called with null relay, no backtrace", buf, 0xCu);
      }

      goto LABEL_90;
    }

    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
      __int16 v55 = 2082;
      os_log_type_t v56 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v34,  "%{public}s called with null relay, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_52;
  }

  if (!relay_resource_path)
  {
    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s called with null relay_resource_path", buf, 0xCu);
      }

      goto LABEL_90;
    }

    if (!v51)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl( &dword_181A5C000,  v21,  v47,  "%{public}s called with null relay_resource_path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v36 = type;
    BOOL v37 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl( &dword_181A5C000,  v21,  v36,  "%{public}s called with null relay_resource_path, no backtrace",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
      __int16 v55 = 2082;
      os_log_type_t v56 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v36,  "%{public}s called with null relay_resource_path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_52;
  }

  if (!gateway_key_config)
  {
    __nwlog_obj();
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_181A5C000, v21, v26, "%{public}s called with null gateway_key_config", buf, 0xCu);
      }

      goto LABEL_90;
    }

    if (!v51)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v48 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl( &dword_181A5C000,  v21,  v48,  "%{public}s called with null gateway_key_config, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v38 = type;
    BOOL v39 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl( &dword_181A5C000,  v21,  v38,  "%{public}s called with null gateway_key_config, no backtrace",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v54 = "nw_proxy_config_create_oblivious_http";
      __int16 v55 = 2082;
      os_log_type_t v56 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v38,  "%{public}s called with null gateway_key_config, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_18215969C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_proxy_config_t nw_proxy_config_create_socksv5(nw_endpoint_t proxy_endpoint)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = proxy_endpoint;
  if (v1)
  {
    if (nw_protocol_socksv5_copy_definition::onceToken[0] != -1) {
      dispatch_once(nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_83827);
    }
    if (nw_protocol_socksv5_copy_definition::definition) {
      uint64_t v2 = (nw_protocol_definition *)os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
    }
    else {
      uint64_t v2 = 0LL;
    }
    nw_protocol_options_t options = nw_framer_create_options(v2);
    BOOL v4 = nw_proxy_config_create(v1, options);

    if (v4)
    {
      v4->os_log_type_t type = 3002;
      *((_BYTE *)v4 + 170) |= 8u;
      unint64_t v5 = v4;
LABEL_9:

      goto LABEL_10;
    }

    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_proxy_config_create_socksv5";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v26 = "nw_proxy_config_create_socksv5";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null config", buf, 0xCu);
        }
      }

      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v26 = "nw_proxy_config_create_socksv5";
            __int16 v27 = 2082;
            os_log_type_t v28 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_46;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v26 = "nw_proxy_config_create_socksv5";
          _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v26 = "nw_proxy_config_create_socksv5";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182159BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_proxy_config_t nw_proxy_config_create_http_connect( nw_endpoint_t proxy_endpoint, nw_protocol_options_t proxy_tls_options)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v3 = proxy_endpoint;
  BOOL v4 = proxy_tls_options;
  if (v3)
  {
    unint64_t v5 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_stack);
    if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
      dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
    }
    id v6 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
    nw_protocol_options_t options = nw_proxy_create_options(v6);

    nw_protocol_options_set_proxy_endpoint(options, v3, 0);
    nw_protocol_stack_append_application_protocol(v5, options);
    if (v4 && nw_protocol_options_is_tls(v4))
    {
      nw_protocol_stack_append_application_protocol(v5, v4);
      int v8 = 4002;
    }

    else
    {
      int v8 = 3004;
    }

    char v9 = nw_proxy_config_create_with_stack(v3, v5);
    os_log_type_t v10 = v9;
    if (v9)
    {
      v9->os_log_type_t type = v8;
      *((_BYTE *)v9 + 170) |= 8u;
      else {
        char v11 = 0x80;
      }
      *((_BYTE *)v10 + 171) = v11 & 0x80 | *((_BYTE *)v10 + 171) & 0x7F;
      id v12 = v10;
LABEL_13:

      goto LABEL_14;
    }

    __nwlog_obj();
    id v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v33 = "nw_proxy_config_create_http_connect";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v19, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_proxy_config_create_http_connect";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null config", buf, 0xCu);
        }
      }

      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v33 = "nw_proxy_config_create_http_connect";
            __int16 v34 = 2082;
            BOOL v35 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v20,  v26,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }

        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_proxy_config_create_http_connect";
          _os_log_impl(&dword_181A5C000, v20, v26, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_proxy_config_create_http_connect";
          _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18215A1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18215A1F4()
{
}

void nw_proxy_config_set_failover_allowed(nw_proxy_config_t proxy_config, BOOL failover_allowed)
{
  BOOL v2 = failover_allowed;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v3 = proxy_config;
  nw_proxy_config_t v4 = v3;
  if (v3)
  {
    if (v2) {
      char v5 = 0;
    }
    else {
      char v5 = 8;
    }
    *((_BYTE *)v3 + 170) = *((_BYTE *)v3 + 170) & 0xF7 | v5;
    id v6 = (nw_proxy_config *)*((void *)v3 + 11);
    if (v6) {
      nw_proxy_config_set_failover_allowed(v6, v2);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v18 = "nw_proxy_config_set_failover_allowed";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_proxy_config_set_failover_allowed";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null proxy_config", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          id v18 = "nw_proxy_config_set_failover_allowed";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null proxy_config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_proxy_config_set_failover_allowed";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null proxy_config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_proxy_config_set_failover_allowed";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null proxy_config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18215A4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_get_failover_allowed(nw_proxy_config_t proxy_config)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_proxy_config_t v1 = proxy_config;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*((_BYTE *)v1 + 170) & 8) == 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_failover_allowed";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_failover_allowed";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null proxy_config", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_failover_allowed";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null proxy_config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_failover_allowed";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null proxy_config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_failover_allowed";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null proxy_config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_protocol_http1_accept(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_http1_get_http1_protocol";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v38 = "nw_http1_get_http1_protocol";
      char v15 = "%{public}s called with null protocol";
    }

    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_http1_get_http1_protocol";
          __int16 v39 = 2082;
          os_log_type_t v40 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_98:
        if (!v12) {
          goto LABEL_100;
        }
LABEL_99:
        free(v12);
        goto LABEL_100;
      }

      if (!v21) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v38 = "nw_http1_get_http1_protocol";
      char v15 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v38 = "nw_http1_get_http1_protocol";
      char v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_97;
  }

  BOOL v3 = *(uint64_t **)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_http1_get_http1_protocol";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        char v13 = (os_log_s *)__nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v38 = "nw_http1_get_http1_protocol";
        char v15 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_97;
      }

      os_log_type_t v22 = (char *)__nw_create_backtrace_string();
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v23 = os_log_type_enabled(v13, type);
      if (!v22)
      {
        if (!v23) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v38 = "nw_http1_get_http1_protocol";
        char v15 = "%{public}s called with null handle, no backtrace";
        goto LABEL_97;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v38 = "nw_http1_get_http1_protocol";
        __int16 v39 = 2082;
        os_log_type_t v40 = v22;
        BOOL v24 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_78:
        _os_log_impl(&dword_181A5C000, v13, v14, v24, buf, 0x16u);
      }

BOOL nw_protocol_http1_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
    BOOL v33 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
      uint64_t v36 = "%{public}s called with null identifier";
LABEL_74:
      _os_log_impl(&dword_181A5C000, v34, v35, v36, buf, 0xCu);
      goto LABEL_75;
    }

    if (!v45)
    {
      BOOL v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
        uint64_t v36 = "%{public}s called with null identifier, backtrace limit exceeded";
        goto LABEL_74;
      }

      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type;
    BOOL v40 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
        uint64_t v36 = "%{public}s called with null identifier, no backtrace";
        goto LABEL_74;
      }

      goto LABEL_75;
    }

    if (!v40) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    __int16 v41 = "%{public}s called with null identifier, dumping backtrace:%{public}s";
LABEL_60:
    _os_log_impl(&dword_181A5C000, v34, v35, v41, buf, 0x16u);
    goto LABEL_61;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
    BOOL v33 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
      uint64_t v36 = "%{public}s called with null endpoint";
      goto LABEL_74;
    }

    if (!v45)
    {
      BOOL v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
        uint64_t v36 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_74;
      }

      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type;
    BOOL v42 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
        uint64_t v36 = "%{public}s called with null endpoint, no backtrace";
        goto LABEL_74;
      }

      goto LABEL_75;
    }

    if (!v42) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    __int16 v41 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
    goto LABEL_60;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
    BOOL v33 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_create";
        uint64_t v36 = "%{public}s called with null parameters";
        goto LABEL_74;
      }

uint64_t __nw_protocol_http1_create_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

void ___ZL31nw_protocol_http1_get_callbacksv_block_invoke()
{
  qword_18C5A3CA8 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C5A3CB0 = nw_protocol_default_waiting_for_output;
  qword_18C5A3C68 = (uint64_t)nw_protocol_default_register_notification;
  unk_18C5A3C70 = nw_protocol_default_unregister_notification;
  qword_18C5A3BF8 = (uint64_t)nw_protocol_http1_disconnect;
  unk_18C5A3C00 = nw_protocol_http1_connected;
  nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks = (uint64_t)nw_protocol_http1_add_input_handler;
  unk_18C5A3BE0 = nw_protocol_http1_remove_input_handler;
  qword_18C5A3BE8 = (uint64_t)nw_protocol_http1_replace_input_handler;
  unk_18C5A3BF0 = nw_protocol_http1_connect;
  qword_18C5A3CD8 = (uint64_t)nw_protocol_http1_reset;
  unk_18C5A3CE0 = nw_protocol_default_input_flush;
  qword_18C5A3C18 = (uint64_t)nw_protocol_http1_input_available;
  unk_18C5A3C20 = nw_protocol_http1_output_available;
  qword_18C5A3C88 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_18C5A3C90 = nw_protocol_http1_input_finished;
  qword_18C5A3C98 = (uint64_t)nw_protocol_http1_output_finished;
  unk_18C5A3CA0 = nw_protocol_default_get_output_local;
  qword_18C5A3C28 = (uint64_t)nw_protocol_http1_get_input_frames;
  unk_18C5A3C30 = nw_protocol_http1_get_output_frames;
  qword_18C5A3C38 = (uint64_t)nw_protocol_http1_finalize_output_frames;
  unk_18C5A3C40 = nw_protocol_default_link_state;
  qword_18C5A3C48 = (uint64_t)nw_protocol_http1_get_parameters;
  unk_18C5A3C50 = nw_protocol_default_get_path;
  qword_18C5A3C58 = (uint64_t)nw_protocol_default_get_local;
  unk_18C5A3C60 = nw_protocol_http1_get_remote_endpoint;
  qword_18C5A3CC8 = (uint64_t)nw_protocol_http1_remove_listen_handler;
  unk_18C5A3CD0 = nw_protocol_http1_stream_get_message_properties;
  qword_18C5A3C08 = (uint64_t)nw_protocol_http1_disconnected;
  unk_18C5A3C10 = nw_protocol_http1_error;
  qword_18C5A3CB8 = (uint64_t)nw_protocol_http1_copy_info;
  unk_18C5A3CC0 = nw_protocol_http1_add_listen_handler;
  qword_18C5A3C78 = (uint64_t)nw_protocol_http1_notify;
  unk_18C5A3C80 = nw_protocol_http1_updated_path;
}

BOOL nw_protocol_http1_connect(nw_protocol *a1, nw_protocol *a2, __n128 a3)
{
  uint64_t v785 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    v252 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v253 = (os_log_s *)__nwlog_obj();
      os_log_type_t v254 = type[0];
      if (!os_log_type_enabled(v253, type[0])) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null protocol";
      goto LABEL_835;
    }

    if (!(_BYTE)aBlock)
    {
      uint64_t v253 = (os_log_s *)__nwlog_obj();
      os_log_type_t v254 = type[0];
      if (!os_log_type_enabled(v253, type[0])) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_835;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v253 = (os_log_s *)__nwlog_obj();
    os_log_type_t v254 = type[0];
    BOOL v280 = os_log_type_enabled(v253, type[0]);
    if (!backtrace_string)
    {
      if (!v280) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_835;
    }

    if (v280)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v253,  v254,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_836:
    if (!v252) {
      goto LABEL_838;
    }
LABEL_837:
    free(v252);
    goto LABEL_838;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    v252 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v253 = (os_log_s *)__nwlog_obj();
      os_log_type_t v254 = type[0];
      if (!os_log_type_enabled(v253, type[0])) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null handle";
      goto LABEL_835;
    }

    if (!(_BYTE)aBlock)
    {
      uint64_t v253 = (os_log_s *)__nwlog_obj();
      os_log_type_t v254 = type[0];
      if (!os_log_type_enabled(v253, type[0])) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null handle, backtrace limit exceeded";
      goto LABEL_835;
    }

    v281 = (char *)__nw_create_backtrace_string();
    uint64_t v253 = (os_log_s *)__nwlog_obj();
    os_log_type_t v254 = type[0];
    BOOL v282 = os_log_type_enabled(v253, type[0]);
    if (v281)
    {
      if (v282)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v281;
        _os_log_impl( &dword_181A5C000,  v253,  v254,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v281);
      if (!v252) {
        goto LABEL_838;
      }
      goto LABEL_837;
    }

    if (v282)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null handle, no backtrace";
LABEL_835:
      _os_log_impl(&dword_181A5C000, v253, v254, v255, buf, 0xCu);
      goto LABEL_836;
    }

    goto LABEL_836;
  }

  int v6 = handle[6];
  if (v6 == 1) {
    goto LABEL_10;
  }
  if (v6 != 2)
  {
    if (v6 != 3)
    {
LABEL_838:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
      uint64_t v259 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(aBlock) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v260 = (os_log_s *)gLogObj;
        os_log_type_t v261 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_874;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
        os_log_type_t v262 = "%{public}s called with null http1";
        goto LABEL_873;
      }

      if (!(_BYTE)aBlock)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v260 = (os_log_s *)gLogObj;
        os_log_type_t v261 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_874;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
        os_log_type_t v262 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_873;
      }

      v317 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v260 = (os_log_s *)gLogObj;
      os_log_type_t v261 = type[0];
      BOOL v517 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!v317)
      {
        if (!v517) {
          goto LABEL_874;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
        os_log_type_t v262 = "%{public}s called with null http1, no backtrace";
        goto LABEL_873;
      }

      if (!v517) {
        goto LABEL_868;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v317;
      v319 = "%{public}s called with null http1, dumping backtrace:%{public}s";
      goto LABEL_867;
    }

    uint64_t v7 = *((void *)handle + 2);
    if (v7)
    {
      handle = (_DWORD *)(v7 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    v252 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v253 = (os_log_s *)__nwlog_obj();
      os_log_type_t v254 = type[0];
      if (!os_log_type_enabled(v253, type[0])) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null handle->http1_connection";
      goto LABEL_835;
    }

    if (!(_BYTE)aBlock)
    {
      uint64_t v253 = (os_log_s *)__nwlog_obj();
      os_log_type_t v254 = type[0];
      if (!os_log_type_enabled(v253, type[0])) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_835;
    }

    v388 = (char *)__nw_create_backtrace_string();
    uint64_t v253 = (os_log_s *)__nwlog_obj();
    os_log_type_t v254 = type[0];
    BOOL v389 = os_log_type_enabled(v253, type[0]);
    if (!v388)
    {
      if (!v389) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_835;
    }

    if (v389)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v388;
      v390 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
LABEL_616:
      _os_log_impl(&dword_181A5C000, v253, v254, v390, buf, 0x16u);
      goto LABEL_617;
    }

    goto LABEL_617;
  }

  uint64_t v8 = *((void *)handle + 1);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    v252 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v253 = (os_log_s *)__nwlog_obj();
      os_log_type_t v254 = type[0];
      if (!os_log_type_enabled(v253, type[0])) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null handle->http1_stream";
      goto LABEL_835;
    }

    if (!(_BYTE)aBlock)
    {
      uint64_t v253 = (os_log_s *)__nwlog_obj();
      os_log_type_t v254 = type[0];
      if (!os_log_type_enabled(v253, type[0])) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_835;
    }

    v388 = (char *)__nw_create_backtrace_string();
    uint64_t v253 = (os_log_s *)__nwlog_obj();
    os_log_type_t v254 = type[0];
    BOOL v391 = os_log_type_enabled(v253, type[0]);
    if (!v388)
    {
      if (!v391) {
        goto LABEL_836;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      v255 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_835;
    }

    if (v391)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v388;
      v390 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_616;
    }

LABEL_617:
    free(v388);
    if (!v252) {
      goto LABEL_838;
    }
    goto LABEL_837;
  }

  handle = (_DWORD *)(v8 + 248);
LABEL_10:
  uint64_t v9 = *(void *)handle;
  if (!*(void *)handle) {
    goto LABEL_838;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
    uint64_t v259 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v260 = (os_log_s *)__nwlog_obj();
      os_log_type_t v261 = type[0];
      if (!os_log_type_enabled(v260, type[0])) {
        goto LABEL_874;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
      os_log_type_t v262 = "%{public}s called with null other_protocol";
LABEL_873:
      _os_log_impl(&dword_181A5C000, v260, v261, v262, buf, 0xCu);
      goto LABEL_874;
    }

    if (!(_BYTE)aBlock)
    {
      v260 = (os_log_s *)__nwlog_obj();
      os_log_type_t v261 = type[0];
      if (!os_log_type_enabled(v260, type[0])) {
        goto LABEL_874;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
      os_log_type_t v262 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_873;
    }

    v317 = (char *)__nw_create_backtrace_string();
    v260 = (os_log_s *)__nwlog_obj();
    os_log_type_t v261 = type[0];
    BOOL v318 = os_log_type_enabled(v260, type[0]);
    if (!v317)
    {
      if (!v318) {
        goto LABEL_874;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
      os_log_type_t v262 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_873;
    }

    if (!v318) {
      goto LABEL_868;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v317;
    v319 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_867:
    _os_log_impl(&dword_181A5C000, v260, v261, v319, buf, 0x16u);
    goto LABEL_868;
  }

  os_log_type_t v10 = &qword_18C45F000;
  if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v267 = (os_log_s *)__nwlog_obj();
      BOOL v268 = os_log_type_enabled(v267, OS_LOG_TYPE_DEBUG);
      os_log_type_t v10 = &qword_18C45F000;
      if (v268)
      {
        int v269 = *(_DWORD *)(v9 + 372);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v9 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v783 = (uint64_t)" ";
        *(_WORD *)v784 = 1024;
        *(_DWORD *)&v784[2] = v269;
        *(_WORD *)&v784[6] = 2048;
        *(void *)&v784[8] = a2;
        _os_log_impl( &dword_181A5C000,  v267,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called by protocol %p",  buf,  0x30u);
        os_log_type_t v10 = &qword_18C45F000;
      }
    }
  }

  int v11 = (char *)a1->handle;
  if (!v11)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
    v263 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v264 = (os_log_s *)__nwlog_obj();
      os_log_type_t v265 = type[0];
      if (!os_log_type_enabled(v264, type[0])) {
        goto LABEL_857;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
      v266 = "%{public}s called with null handle";
      goto LABEL_856;
    }

    if (!(_BYTE)aBlock)
    {
      v264 = (os_log_s *)__nwlog_obj();
      os_log_type_t v265 = type[0];
      if (!os_log_type_enabled(v264, type[0])) {
        goto LABEL_857;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
      v266 = "%{public}s called with null handle, backtrace limit exceeded";
      goto LABEL_856;
    }

    v320 = (char *)__nw_create_backtrace_string();
    v264 = (os_log_s *)__nwlog_obj();
    os_log_type_t v265 = type[0];
    BOOL v321 = os_log_type_enabled(v264, type[0]);
    if (!v320)
    {
      if (!v321) {
        goto LABEL_857;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
      v266 = "%{public}s called with null handle, no backtrace";
      goto LABEL_856;
    }

    if (v321)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v320;
      _os_log_impl( &dword_181A5C000,  v264,  v265,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v320);
LABEL_857:
    if (!v263) {
      goto LABEL_859;
    }
    goto LABEL_858;
  }

  int v12 = *((_DWORD *)v11 + 6);
  if (v12 != 2)
  {
    if (v12 != 3) {
      goto LABEL_859;
    }
    uint64_t v13 = *((void *)v11 + 2);
    if (v13)
    {
      os_log_type_t v14 = (uint64_t *)(v13 + 488);
      goto LABEL_20;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
    v263 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (__nwlog_fault(v263, type, &aBlock))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v264 = (os_log_s *)__nwlog_obj();
        os_log_type_t v265 = type[0];
        if (!os_log_type_enabled(v264, type[0])) {
          goto LABEL_857;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
        v266 = "%{public}s called with null handle->http1_connection";
        goto LABEL_856;
      }

      if (!(_BYTE)aBlock)
      {
        v264 = (os_log_s *)__nwlog_obj();
        os_log_type_t v265 = type[0];
        if (!os_log_type_enabled(v264, type[0])) {
          goto LABEL_857;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
        v266 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_856;
      }

      v392 = (char *)__nw_create_backtrace_string();
      v264 = (os_log_s *)__nwlog_obj();
      os_log_type_t v265 = type[0];
      BOOL v393 = os_log_type_enabled(v264, type[0]);
      if (v392)
      {
        if (v393)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v392;
          _os_log_impl( &dword_181A5C000,  v264,  v265,  "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v392);
        if (!v263)
        {
LABEL_859:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
          uint64_t v259 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v260 = (os_log_s *)gLogObj;
            os_log_type_t v261 = type[0];
            if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
              os_log_type_t v262 = "%{public}s called with null http1_stream";
              goto LABEL_873;
            }

                          if (v327) {
                            free(v327);
                          }
                          LODWORD(v325) = -1;
                          int v205 = v326;
                          int v208 = v623;
                          goto LABEL_620;
                        }

                        BOOL v391 = v208;
                        v392 = v205;
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_trailer";
                        BOOL v393 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v643) = 16;
                        LOBYTE(v647) = 0;
                        if (__nwlog_fault(v393, &v643, &v647))
                        {
                          if (v643 == 17)
                          {
                            v394 = (os_log_s *)__nwlog_obj();
                            uint64_t v395 = v643;
                            if (os_log_type_enabled(v394, (os_log_type_t)v643))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_trailer";
                              int v396 = v394;
                              int v397 = v395;
                              uint64_t v398 = "%{public}s called with null buffer";
LABEL_724:
                              _os_log_impl(&dword_181A5C000, v396, v397, v398, buf, 0xCu);
                            }
                          }

                          else if ((_BYTE)v647)
                          {
                            uint64_t v412 = (char *)__nw_create_backtrace_string();
                            v413 = (os_log_s *)__nwlog_obj();
                            uint64_t v414 = v643;
                            char v415 = os_log_type_enabled(v413, (os_log_type_t)v643);
                            if (v412)
                            {
                              if (v415)
                              {
                                *(_DWORD *)buf = 136446466;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_trailer";
                                int v638 = 2082;
                                *(void *)int v639 = v412;
                                _os_log_impl( &dword_181A5C000,  v413,  v414,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
                              }

                              free(v412);
                              goto LABEL_725;
                            }

                            if (v415)
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_trailer";
                              int v396 = v413;
                              int v397 = v414;
                              uint64_t v398 = "%{public}s called with null buffer, no backtrace";
                              goto LABEL_724;
                            }
                          }

                          else
                          {
                            id v428 = (os_log_s *)__nwlog_obj();
                            v429 = v643;
                            if (os_log_type_enabled(v428, (os_log_type_t)v643))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_trailer";
                              int v396 = v428;
                              int v397 = v429;
                              uint64_t v398 = "%{public}s called with null buffer, backtrace limit exceeded";
                              goto LABEL_724;
                            }
                          }
                        }

                if (v306) {
                  free(v306);
                }
                uint64_t v8 = &qword_18C45F000;
                goto LABEL_35;
              }

              if ((v126 & 0x80000) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                id v150 = *(_DWORD *)(a3 + 176);
                BOOL v149 = *(_DWORD *)(a3 + 180);
                LODWORD(buf[0]) = 136447490;
                *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                WORD2(buf[1]) = 2082;
                *(void *)((char *)&buf[1] + 6) = a3 + 191;
                HIWORD(buf[2]) = 2080;
                *(void *)&uint64_t v370 = " ";
                WORD4(v370) = 1024;
                *(_DWORD *)((char *)&v370 + 10) = v149;
                HIWORD(v370) = 1024;
                LODWORD(v371[0]) = v150;
                WORD2(v371[0]) = 2048;
                *(void **)((char *)v371 + 6) = (void *)a3;
                id v151 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(v374[0]) = 16;
                LOBYTE(v366[0]) = 0;
                if (__nwlog_fault(v151, v374, v366))
                {
                  if (LOBYTE(v374[0]) == 17)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    id v152 = (os_log_s *)gconnectionLogObj;
                    os_log_type_t v153 = v374[0];
                    if (os_log_type_enabled((os_log_t)gconnectionLogObj, v374[0]))
                    {
                      os_log_type_t v155 = *(_DWORD *)(a3 + 176);
                      nw_path_t v154 = *(_DWORD *)(a3 + 180);
                      LODWORD(buf[0]) = 136447490;
                      *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                      WORD2(buf[1]) = 2082;
                      *(void *)((char *)&buf[1] + 6) = a3 + 191;
                      HIWORD(buf[2]) = 2080;
                      *(void *)&uint64_t v370 = " ";
                      WORD4(v370) = 1024;
                      *(_DWORD *)((char *)&v370 + 10) = v154;
                      HIWORD(v370) = 1024;
                      LODWORD(v371[0]) = v155;
                      WORD2(v371[0]) = 2048;
                      *(void **)((char *)v371 + 6) = (void *)a3;
                      __int16 v156 = "%{public}s %{public}s%s<i%u:s%d> Stream %p has invalid id after opening";
LABEL_319:
                      uint64_t v207 = v152;
                      int v208 = v153;
                      int v209 = 54;
LABEL_327:
                      _os_log_impl(&dword_181A5C000, v207, v208, v156, (uint8_t *)buf, v209);
                      goto LABEL_328;
                    }
                  }

                  else if (LOBYTE(v366[0]))
                  {
                    os_log_type_t v167 = (char *)__nw_create_backtrace_string();
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    id v152 = (os_log_s *)gconnectionLogObj;
                    os_log_type_t v153 = v374[0];
                    uint64_t v168 = os_log_type_enabled((os_log_t)gconnectionLogObj, v374[0]);
                    if (v167)
                    {
                      if (v168)
                      {
                        int v170 = *(_DWORD *)(a3 + 176);
                        BOOL v169 = *(_DWORD *)(a3 + 180);
                        LODWORD(buf[0]) = 136447746;
                        *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = a3 + 191;
                        HIWORD(buf[2]) = 2080;
                        *(void *)&uint64_t v370 = " ";
                        WORD4(v370) = 1024;
                        *(_DWORD *)((char *)&v370 + 10) = v169;
                        HIWORD(v370) = 1024;
                        LODWORD(v371[0]) = v170;
                        WORD2(v371[0]) = 2048;
                        *(void **)((char *)v371 + 6) = (void *)a3;
                        HIWORD(v371[1]) = 2082;
                        v371[2] = v167;
                        _os_log_impl( &dword_181A5C000,  v152,  v153,  "%{public}s %{public}s%s<i%u:s%d> Stream %p has invalid id after opening, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x40u);
                      }

                      free(v167);
                      if (!v151) {
                        goto LABEL_330;
                      }
                      goto LABEL_329;
                    }

                    if (v168)
                    {
                      os_log_type_t v206 = *(_DWORD *)(a3 + 176);
                      int v205 = *(_DWORD *)(a3 + 180);
                      LODWORD(buf[0]) = 136447490;
                      *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                      WORD2(buf[1]) = 2082;
                      *(void *)((char *)&buf[1] + 6) = a3 + 191;
                      HIWORD(buf[2]) = 2080;
                      *(void *)&uint64_t v370 = " ";
                      WORD4(v370) = 1024;
                      *(_DWORD *)((char *)&v370 + 10) = v205;
                      HIWORD(v370) = 1024;
                      LODWORD(v371[0]) = v206;
                      WORD2(v371[0]) = 2048;
                      *(void **)((char *)v371 + 6) = (void *)a3;
                      __int16 v156 = "%{public}s %{public}s%s<i%u:s%d> Stream %p has invalid id after opening, no backtrace";
                      goto LABEL_319;
                    }
                  }

                  else
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    id v152 = (os_log_s *)gconnectionLogObj;
                    os_log_type_t v153 = v374[0];
                    if (os_log_type_enabled((os_log_t)gconnectionLogObj, v374[0]))
                    {
                      BOOL v202 = *(_DWORD *)(a3 + 176);
                      __int128 v201 = *(_DWORD *)(a3 + 180);
                      LODWORD(buf[0]) = 136447490;
                      *(void *)((char *)buf + 4) = "nw_http2_stream_submitted_headers";
                      WORD2(buf[1]) = 2082;
                      *(void *)((char *)&buf[1] + 6) = a3 + 191;
                      HIWORD(buf[2]) = 2080;
                      *(void *)&uint64_t v370 = " ";
                      WORD4(v370) = 1024;
                      *(_DWORD *)((char *)&v370 + 10) = v201;
                      HIWORD(v370) = 1024;
                      LODWORD(v371[0]) = v202;
                      WORD2(v371[0]) = 2048;
                      *(void **)((char *)v371 + 6) = (void *)a3;
                      __int16 v156 = "%{public}s %{public}s%s<i%u:s%d> Stream %p has invalid id after opening, backtrace limit exceeded";
                      goto LABEL_319;
                    }
                  }
                }

                goto LABEL_328;
              }

              goto LABEL_331;
            }

            __nwlog_obj();
            uint64_t v105 = nghttp2_strerror();
            LODWORD(v374[0]) = 136446466;
            *(void *)((char *)v374 + 4) = "nw_http2_stream_make_and_submit_headers";
            WORD2(v374[1]) = 2082;
            *(void *)((char *)&v374[1] + 6) = v105;
            uint64_t v106 = (char *)_os_log_send_and_compose_impl();
            uint64_t v368 = OS_LOG_TYPE_ERROR;
            __int128 v352 = 0;
            if (__nwlog_fault(v106, &v368, &v352))
            {
              if (v368 == OS_LOG_TYPE_FAULT)
              {
                uint64_t v107 = (os_log_s *)__nwlog_obj();
                uint64_t v108 = v368;
                if (os_log_type_enabled(v107, v368))
                {
                  uint64_t v109 = nghttp2_strerror();
                  LODWORD(v374[0]) = 136446466;
                  *(void *)((char *)v374 + 4) = "nw_http2_stream_make_and_submit_headers";
                  WORD2(v374[1]) = 2082;
                  *(void *)((char *)&v374[1] + 6) = v109;
                  char v110 = "%{public}s nghttp2_submit_headers: %{public}s failed";
LABEL_162:
                  __int16 v124 = v107;
LABEL_163:
                  _os_log_impl(&dword_181A5C000, v124, v108, v110, (uint8_t *)v374, 0x16u);
                }
              }

              else if (v352)
              {
                __int16 v119 = (char *)__nw_create_backtrace_string();
                os_log_type_t v120 = (os_log_s *)__nwlog_obj();
                uint64_t v108 = v368;
                __int16 v121 = os_log_type_enabled(v120, v368);
                if (v119)
                {
                  if (v121)
                  {
                    v122 = nghttp2_strerror();
                    LODWORD(v374[0]) = 136446722;
                    *(void *)((char *)v374 + 4) = "nw_http2_stream_make_and_submit_headers";
                    WORD2(v374[1]) = 2082;
                    *(void *)((char *)&v374[1] + 6) = v122;
                    HIWORD(v374[2]) = 2082;
                    uint64_t v375 = v119;
                    _os_log_impl( &dword_181A5C000,  v120,  v108,  "%{public}s nghttp2_submit_headers: %{public}s failed, dumping backtrace:%{public}s",  (uint8_t *)v374,  0x20u);
                  }

                  free(v119);
                  goto LABEL_164;
                }

                if (v121)
                {
                  os_log_type_t v197 = nghttp2_strerror();
                  LODWORD(v374[0]) = 136446466;
                  *(void *)((char *)v374 + 4) = "nw_http2_stream_make_and_submit_headers";
                  WORD2(v374[1]) = 2082;
                  *(void *)((char *)&v374[1] + 6) = v197;
                  char v110 = "%{public}s nghttp2_submit_headers: %{public}s failed, no backtrace";
                  __int16 v124 = v120;
                  goto LABEL_163;
                }
              }

              else
              {
                uint64_t v107 = (os_log_s *)__nwlog_obj();
                uint64_t v108 = v368;
                if (os_log_type_enabled(v107, v368))
                {
                  uint64_t v123 = nghttp2_strerror();
                  LODWORD(v374[0]) = 136446466;
                  *(void *)((char *)v374 + 4) = "nw_http2_stream_make_and_submit_headers";
                  WORD2(v374[1]) = 2082;
                  *(void *)((char *)&v374[1] + 6) = v123;
                  char v110 = "%{public}s nghttp2_submit_headers: %{public}s failed, backtrace limit exceeded";
                  goto LABEL_162;
                }
              }
            }

LABEL_874:
            if (v259) {
              free(v259);
            }
            return 0LL;
          }

          if (!(_BYTE)aBlock)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v260 = (os_log_s *)gLogObj;
            os_log_type_t v261 = type[0];
            if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
              os_log_type_t v262 = "%{public}s called with null http1_stream, backtrace limit exceeded";
              goto LABEL_873;
            }

            goto LABEL_874;
          }

          v317 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v260 = (os_log_s *)gLogObj;
          os_log_type_t v261 = type[0];
          BOOL v523 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (!v317)
          {
            if (v523)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
              os_log_type_t v262 = "%{public}s called with null http1_stream, no backtrace";
              goto LABEL_873;
            }

            goto LABEL_874;
          }

          if (v523)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v317;
            v319 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
            goto LABEL_867;
          }

LABEL_868:
          free(v317);
          goto LABEL_874;
        }

LABEL_858:
        free(v263);
        goto LABEL_859;
      }

      if (v393)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
        v266 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_856:
        _os_log_impl(&dword_181A5C000, v264, v265, v266, buf, 0xCu);
        goto LABEL_857;
      }
    }

    goto LABEL_857;
  }

  os_log_type_t v14 = (uint64_t *)(v11 + 8);
LABEL_20:
  uint64_t v15 = *v14;
  if (!*v14) {
    goto LABEL_859;
  }
  if ((*(_BYTE *)(v15 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v283 = (os_log_s *)__nwlog_obj();
      BOOL v284 = os_log_type_enabled(v283, OS_LOG_TYPE_DEBUG);
      os_log_type_t v10 = &qword_18C45F000;
      if (v284)
      {
        uint64_t v285 = *(void *)(v15 + 256);
        int v286 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
        if (v285) {
          LODWORD(v285) = *(_DWORD *)(v285 + 860);
        }
        int v287 = *(_DWORD *)(v15 + 424);
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v15 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v783 = (uint64_t)" ";
        *(_WORD *)v784 = 1024;
        *(_DWORD *)&v784[2] = v286;
        *(_WORD *)&v784[6] = 1024;
        *(_DWORD *)&v784[8] = v285;
        *(_WORD *)&v784[12] = 1024;
        *(_DWORD *)&v784[14] = v287;
        *(_WORD *)&v784[18] = 2048;
        *(void *)&v784[20] = v15;
        _os_log_impl( &dword_181A5C000,  v283,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream %p",  buf,  0x3Cu);
        os_log_type_t v10 = &qword_18C45F000;
      }
    }
  }

  __int16 v16 = *(_WORD *)(v15 + 428);
  if ((v16 & 0x1000) != 0)
  {
    BOOL result = 1LL;
    if ((*(_BYTE *)(v15 + 158) & 1) != 0 || !gLogDatapath) {
      return result;
    }
    uint64_t v19 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      return 1LL;
    }
    uint64_t v20 = *(void *)(v15 + 256);
    int v21 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
    if (v20) {
      LODWORD(v20) = *(_DWORD *)(v20 + 860);
    }
    int v22 = *(_DWORD *)(v15 + 424);
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v15 + 74;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v783 = (uint64_t)" ";
    *(_WORD *)v784 = 1024;
    *(_DWORD *)&v784[2] = v21;
    *(_WORD *)&v784[6] = 1024;
    *(_DWORD *)&v784[8] = v20;
    *(_WORD *)&v784[12] = 1024;
    *(_DWORD *)&v784[14] = v22;
    BOOL v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> ignoring duplicate call to connect";
    goto LABEL_42;
  }

  if ((v16 & 8) != 0)
  {
    if (*(void *)(v15 + 256))
    {
      if ((*(_BYTE *)(v15 + 158) & 1) != 0) {
        return 1LL;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (os_log_s *)gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
        return 1LL;
      }
      uint64_t v24 = *(void *)(v15 + 256);
      int v25 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
      if (v24) {
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      }
      int v26 = *(_DWORD *)(v15 + 424);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v783 = (uint64_t)" ";
      *(_WORD *)v784 = 1024;
      *(_DWORD *)&v784[2] = v25;
      *(_WORD *)&v784[6] = 1024;
      *(_DWORD *)&v784[8] = v24;
      *(_WORD *)&v784[12] = 1024;
      *(_DWORD *)&v784[14] = v26;
      BOOL v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> stream already has current connection, ignoring";
LABEL_42:
      id v27 = v19;
      uint32_t v28 = 50;
LABEL_43:
      _os_log_impl(&dword_181A5C000, v27, OS_LOG_TYPE_DEBUG, v23, buf, v28);
      return 1LL;
    }

    if (!*(void *)(v15 + 32))
    {
      if (*(_BYTE *)(v15 + 158) & 1 | (gLogDatapath == 0)) {
        return 1LL;
      }
      BOOL v85 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG)) {
        return 1LL;
      }
      uint64_t v86 = *(void *)(v15 + 256);
      int v87 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
      if (v86) {
        LODWORD(v86) = *(_DWORD *)(v86 + 860);
      }
      int v88 = *(_DWORD *)(v15 + 424);
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v783 = (uint64_t)" ";
      *(_WORD *)v784 = 1024;
      *(_DWORD *)&v784[2] = v87;
      *(_WORD *)&v784[6] = 1024;
      *(_DWORD *)&v784[8] = v86;
      *(_WORD *)&v784[12] = 1024;
      *(_DWORD *)&v784[14] = v88;
      *(_WORD *)&v784[18] = 2048;
      *(void *)&v784[20] = v15;
      BOOL v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> Stream %p still awaiting new output handler";
      id v27 = v85;
      uint32_t v28 = 60;
      goto LABEL_43;
    }

    if (!(*(_BYTE *)(v15 + 158) & 1 | (gLogDatapath == 0)))
    {
      v524 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v524, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v525 = *(void *)(v15 + 256);
        int v526 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
        if (v525) {
          LODWORD(v525) = *(_DWORD *)(v525 + 860);
        }
        int v527 = *(_DWORD *)(v15 + 424);
        uint64_t v528 = *(void *)(v15 + 32);
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v15 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v783 = (uint64_t)" ";
        *(_WORD *)v784 = 1024;
        *(_DWORD *)&v784[2] = v526;
        *(_WORD *)&v784[6] = 1024;
        *(_DWORD *)&v784[8] = v525;
        *(_WORD *)&v784[12] = 1024;
        *(_DWORD *)&v784[14] = v527;
        *(_WORD *)&v784[18] = 2048;
        *(void *)&v784[20] = v15;
        *(_WORD *)&v784[28] = 2048;
        *(void *)&v784[30] = v528;
        _os_log_impl( &dword_181A5C000,  v524,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> creating connection for stream %p with new output_handler %p",  buf,  0x46u);
      }
    }

    BOOL v31 = *(_OWORD **)(v15 + 32);
    if (v31)
    {
      BOOL v32 = *(void **)(v15 + 336);
      if (v32)
      {
        BOOL v33 = *(void **)(v15 + 320);
        if (v33)
        {
          BOOL v34 = calloc(1uLL, 0x370uLL);
          if (!v34)
          {
            v529 = (os_log_s *)__nwlog_obj();
            os_log_type_enabled(v529, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = 1LL;
            *(_WORD *)&buf[22] = 2048;
            uint64_t v783 = 880LL;
            v530 = (void *)_os_log_send_and_compose_impl();
            BOOL result = __nwlog_abort((uint64_t)v530);
            if (result) {
              goto LABEL_1391;
            }
            free(v530);
          }

          bzero(v34, 0x370uLL);
          if (nw_protocol_http1_identifier::onceToken != -1) {
            dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
          }
          *((void *)v34 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
          *((void *)v34 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
          *((_DWORD *)v34 + 46) = 3;
          *((void *)v34 + 22) = v34;
          *((void *)v34 + 5) = v34 + 10;
          *((void *)v34 + 60) = v9;
          nw_protocol_set_output_handler((uint64_t)v34, (uint64_t)v31);
          os_log_type_t v35 = os_retain(v32);
          char v36 = *((_BYTE *)v34 + 760);
          if ((v36 & 1) != 0)
          {
            BOOL v37 = (void *)*((void *)v34 + 94);
            if (v37)
            {
              os_release(v37);
              char v36 = *((_BYTE *)v34 + 760);
            }
          }

          *((void *)v34 + 94) = v35;
          *((_BYTE *)v34 + 760) = v36 | 1;
          os_log_type_t v38 = os_retain(v33);
          char v39 = *((_BYTE *)v34 + 744);
          if ((v39 & 1) != 0)
          {
            BOOL v40 = (void *)*((void *)v34 + 92);
            if (v40)
            {
              os_release(v40);
              char v39 = *((_BYTE *)v34 + 744);
            }
          }

          *((void *)v34 + 92) = v38;
          *((_BYTE *)v34 + 744) = v39 | 1;
          __int16 v41 = v33;
          id v42 = *(id *)(v41[13] + 136LL);

          char v43 = *((_BYTE *)v34 + 504);
          if ((v43 & 1) != 0)
          {
            int v44 = (void *)*((void *)v34 + 62);
            if (v44)
            {
              os_release(v44);
              char v43 = *((_BYTE *)v34 + 504);
            }
          }

          *((void *)v34 + 62) = v42;
          *((_BYTE *)v34 + 504) = v43 | 1;
          uint64_t v45 = MEMORY[0x1895F87A8];
          *((void *)v34 + 24) = *(void *)(v9 + 192);
          *(void *)os_log_type_t type = v45;
          uint64_t v767 = 0x40000000LL;
          uint64_t v768 = (uint64_t)___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
          v769 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39882;
          v770 = (void (*)(uint64_t))v34;
          metadata = nw_http_connection_create_metadata(v42, type, 0LL);
          char v47 = *((_BYTE *)v34 + 776);
          if ((v47 & 1) != 0)
          {
            uint64_t v48 = (void *)*((void *)v34 + 96);
            if (v48)
            {
              os_release(v48);
              char v47 = *((_BYTE *)v34 + 776);
            }
          }

          *((void *)v34 + 96) = metadata;
          *((_BYTE *)v34 + 776) = v47 | 1;
          nw_http_connection_metadata_set_version(metadata, 3);
          nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v34 + 96), *(void **)(v9 + 312));
          *((void *)v34 + 77) = 0LL;
          *((void *)v34 + 7_Block_object_dispose(&STACK[0x338], 8) = (char *)v34 + 616;
          *((void *)v34 + 79) = 0LL;
          *((void *)v34 + 80) = (char *)v34 + 632;
          *((void *)v34 + 81) = 0LL;
          *((void *)v34 + 82) = (char *)v34 + 648;
          *((void *)v34 + 83) = 0LL;
          *((void *)v34 + 84) = (char *)v34 + 664;
          *((void *)v34 + 86) = (char *)v34 + 680;
          *((void *)v34 + 85) = 0LL;
          nw_frame_cache_init((uint64_t)v34 + 696, (uint64_t)v34, 256, 0x40000, 16);
          uint64_t v49 = *((void *)v34 + 60);
          if (v49)
          {
            *(_OWORD *)((char *)v34 + 360) = 0u;
            *(_OWORD *)((char *)v34 + 376) = 0u;
            *(_OWORD *)((char *)v34 + 392) = 0u;
            *(_OWORD *)((char *)v34 + 40_Block_object_dispose(&STACK[0x338], 8) = 0u;
            *(_OWORD *)((char *)v34 + 424) = 0u;
            *(_OWORD *)((char *)v34 + 440) = 0u;
            *(_OWORD *)((char *)v34 + 32_Block_object_dispose(&STACK[0x338], 8) = 0u;
            *(_OWORD *)((char *)v34 + 344) = 0u;
            *((void *)v34 + 59) = nw_http1_on_reset;
            *((void *)v34 + 37) = nw_http1_on_message_begin;
            *((void *)v34 + 3_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_url;
            *((void *)v34 + 4_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_message_complete;
            *((void *)v34 + 49) = nw_http1_on_url_complete;
            *((void *)v34 + 39) = nw_http1_on_status;
            *((void *)v34 + 40) = nw_http1_on_method;
            *((void *)v34 + 50) = nw_http1_on_status_complete;
            *((void *)v34 + 51) = nw_http1_on_method_complete;
            *((void *)v34 + 42) = nw_http1_on_header_field;
            *((void *)v34 + 43) = nw_http1_on_header_value;
            *((void *)v34 + 53) = nw_http1_on_header_field_complete;
            *((void *)v34 + 54) = nw_http1_on_header_value_complete;
            *((void *)v34 + 46) = nw_http1_on_headers_complete;
            *((void *)v34 + 47) = nw_http1_on_body;
            *((void *)v34 + 57) = nw_http1_on_chunk_header;
            *((void *)v34 + 5_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_chunk_complete;
            char v50 = *(_BYTE *)(v49 + 376);
            *(_OWORD *)((char *)v34 + 24_Block_object_dispose(&STACK[0x338], 8) = 0u;
            *(_OWORD *)((char *)v34 + 200) = 0u;
            *(_OWORD *)((char *)v34 + 264) = 0u;
            *(_OWORD *)((char *)v34 + 232) = 0u;
            *(_OWORD *)((char *)v34 + 216) = 0u;
            if ((v50 & 1) != 0) {
              char v51 = 1;
            }
            else {
              char v51 = 2;
            }
            *((_BYTE *)v34 + 272) = v51;
            *((void *)v34 + 35) = 0LL;
            *((void *)v34 + 36) = (char *)v34 + 296;
            *((_WORD *)v34 + 139) = 16131;
            *((void *)v34 + 31) = v34;
            *((void *)v34 + 32) = 238LL;
            if ((*((_BYTE *)v34 + 158) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v52 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v53 = *((void *)v34 + 61);
                int v54 = *(_DWORD *)(*((void *)v34 + 60) + 372LL);
                int v55 = *((_DWORD *)v34 + 215);
                if (v53) {
                  LODWORD(v53) = *(_DWORD *)(v53 + 424);
                }
                *(_DWORD *)buf = 136448258;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_log_parser_version";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = (char *)v34 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v783 = (uint64_t)" ";
                *(_WORD *)v784 = 1024;
                *(_DWORD *)&v784[2] = v54;
                *(_WORD *)&v784[6] = 1024;
                *(_DWORD *)&v784[8] = v55;
                *(_WORD *)&v784[12] = 1024;
                *(_DWORD *)&v784[14] = v53;
                *(_WORD *)&v784[18] = 1024;
                *(_DWORD *)&v784[20] = 9;
                *(_WORD *)&v784[24] = 1024;
                *(_DWORD *)&v784[26] = 2;
                *(_WORD *)&v784[30] = 1024;
                *(_DWORD *)&v784[32] = 1;
                _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u",  buf,  0x44u);
              }
            }

            goto LABEL_79;
          }

          v531 = v31;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
          v532 = (char *)_os_log_send_and_compose_impl();
          v777[0] = 16;
          LOBYTE(v758[0]) = 0;
          if (__nwlog_fault(v532, v777, v758))
          {
            if (v777[0] == 17)
            {
              v533 = (os_log_s *)__nwlog_obj();
              os_log_type_t v534 = v777[0];
              if (os_log_type_enabled(v533, (os_log_type_t)v777[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                v535 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_1042:
                _os_log_impl(&dword_181A5C000, v533, v534, v535, buf, 0xCu);
              }
            }

            else if (LOBYTE(v758[0]))
            {
              v562 = (char *)__nw_create_backtrace_string();
              v533 = (os_log_s *)__nwlog_obj();
              os_log_type_t v534 = v777[0];
              BOOL v563 = os_log_type_enabled(v533, (os_log_type_t)v777[0]);
              if (v562)
              {
                if (v563)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v562;
                  _os_log_impl( &dword_181A5C000,  v533,  v534,  "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v562);
                goto LABEL_1043;
              }

              if (v563)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                v535 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                goto LABEL_1042;
              }
            }

            else
            {
              v533 = (os_log_s *)__nwlog_obj();
              os_log_type_t v534 = v777[0];
              if (os_log_type_enabled(v533, (os_log_type_t)v777[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                v535 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                goto LABEL_1042;
              }
            }
          }

              if (v357) {
                free(v357);
              }
              uint64_t v71 = 0LL;
              goto LABEL_875;
            }
          }

          if (!v68) {
            goto LABEL_875;
          }
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(v71, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_avoided_netagent_classes(parameters, v68, v71);
            goto LABEL_875;
          }

          __nwlog_obj();
          uint64_t v344 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v345 = strnlen((const char *)buf, 0x20uLL);
          uint64_t v346 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)uu = 136446722;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(void *)&uu[14] = v345;
          *(_WORD *)&uu[22] = 2048;
          BOOL v565 = v346;
          BOOL v321 = (char *)_os_log_send_and_compose_impl();

          BOOL v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v347 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v348 = v561;
            if (os_log_type_enabled(v347, v561))
            {
              os_log_type_t v349 = strnlen((const char *)buf, 0x20uLL);
              uint64_t v350 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v349;
              *(_WORD *)&uu[22] = 2048;
              BOOL v565 = v350;
              _os_log_impl( &dword_181A5C000,  v347,  v348,  "%{public}s invalid avoided netagent string lengths %zu %zu",  uu,  0x20u);
            }

LABEL_1043:
          if (v532) {
            free(v532);
          }
          BOOL v31 = v531;
LABEL_79:
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000LL;
          uint64_t v783 = (uint64_t)v34;
          uint64_t aBlock = v45;
          uint64_t v760 = 0x40000000LL;
          v761 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
          v762 = &unk_189BBD4F0;
          v763 = (uint64_t *)buf;
          *((void *)v34 + 76) = _Block_copy(&aBlock);
          _Block_object_dispose(buf, 8);
          if ((*((_BYTE *)v34 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v545 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v545, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v546 = *((void *)v34 + 61);
                int v547 = *(_DWORD *)(*((void *)v34 + 60) + 372LL);
                int v548 = *((_DWORD *)v34 + 215);
                if (v546) {
                  LODWORD(v546) = *(_DWORD *)(v546 + 424);
                }
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = (char *)v34 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v783 = (uint64_t)" ";
                *(_WORD *)v784 = 1024;
                *(_DWORD *)&v784[2] = v547;
                *(_WORD *)&v784[6] = 1024;
                *(_DWORD *)&v784[8] = v548;
                *(_WORD *)&v784[12] = 1024;
                *(_DWORD *)&v784[14] = v546;
                *(_WORD *)&v784[18] = 2048;
                *(void *)&v784[20] = v34;
                _os_log_impl( &dword_181A5C000,  v545,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created %p",  buf,  0x3Cu);
              }
            }
          }

          os_log_type_t v56 = (nw_path **)(v34 + 32);
          nw_protocol_replace_input_handler((uint64_t)v31, v15, (uint64_t)v34);
          *BOOL v34 = *v31;
          uint64_t v57 = (void *)*((void *)v34 + 92);
          if (v57)
          {
            if (!*((void *)v34 + 66))
            {
              v750 = v31;
              os_log_type_t v58 = (void **)(v34 + 35);
              id v59 = nw_parameters_copy_context(v57);
              *(void *)buf = nw_path_copy_flow_registration(v59, (uint64_t)v34);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 35), buf);
              char v60 = (void *)*((void *)v34 + 70);
              if (v60)
              {
                id v61 = nw_path_flow_registration_copy_endpoint(v60);
                id v62 = nw_path_flow_registration_copy_parameters(*v58);
                *(void *)buf = nw_endpoint_copy_association_with_evaluator(v61, v62, 0LL);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 33), buf);
                if (*((void *)v34 + 66))
                {
                  *(void *)buf = nw_protocol_instance_stub_create((nw_protocol *)v34);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 34), buf);
                  nw_association_register_internal( *((void **)v34 + 66),  v57,  *((void **)v34 + 68),  0,  0,  &__block_literal_global_65);
                  id v63 = nw_association_copy_current_path(*((void **)v34 + 66), v62);
                  if (v63)
                  {
                    os_log_type_t v64 = v63;
                    BOOL v65 = (nw_path *)nw_path_copy_for_flow_registration(v63, *v58);
                    if (v65)
                    {
                      os_log_type_t v66 = v65;
                      if (*v56 != v65)
                      {
                        *(void *)buf = os_retain(v65);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 32), buf);
                      }

                      if (nw_path_has_flows(v66)) {
                        __int16 v67 = 4096;
                      }
                      else {
                        __int16 v67 = 0;
                      }
                      int v68 = *((_WORD *)v34 + 436) & 0xEFFF | (*((unsigned __int8 *)v34 + 874) << 16);
                      *((_WORD *)v34 + 436) = *((_WORD *)v34 + 436) & 0xEFFF | v67;
                      *((_BYTE *)v34 + 874) = BYTE2(v68);
                      id v69 = nw_parameters_copy_effective_proxy_config(v57);
                      if (v69)
                      {
                        BOOL v70 = v69;
                        if (nw_path_has_proxy_config(v64, v69))
                        {
                          *(void *)buf = os_retain(v70);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 36), buf);
                        }

                        os_release(v70);
                      }

                      os_release(v66);
                    }

                    os_release(v64);
                  }
                }

                if (v62) {
                  os_release(v62);
                }
                if (v61) {
                  os_release(v61);
                }
              }

              BOOL v31 = v750;
              if (v59) {
                os_release(v59);
              }
            }

            uint64_t v71 = *v56;
            if (*v56)
            {
LABEL_105:
            }

LABEL_992:
                if (v404) {
                  free(v404);
                }
                nw_protocol_connect(v403, 0LL);
                if (!v225)
                {
LABEL_324:
                  if (v221) {
                    os_release(v221);
                  }
                  nw_protocol_set_output_handler(v9, 0LL);
                  *(_WORD *)(v15 + 428) &= ~8u;
                  int v226 = *(_DWORD *)(v9 + 352);
                  *(_DWORD *)(v9 + 352) = v226 - 1;
                  if (v226) {
                    return 1LL;
                  }
                  __nwlog_obj();
                  uint64_t v227 = *(unsigned int *)(v9 + 352);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->pending_output_handler_count";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v227;
                  id v228 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v228, type, &aBlock))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT) {
                      goto LABEL_329;
                    }
                    if (!(_BYTE)aBlock)
                    {
LABEL_584:
                      v229 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v230 = type[0];
                      if (!os_log_type_enabled(v229, type[0])) {
                        goto LABEL_589;
                      }
                      uint64_t v383 = *(unsigned int *)(v9 + 352);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v783 = 1LL;
                      *(_WORD *)v784 = 2048;
                      *(void *)&v784[2] = v383;
                      id v232 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_588;
                    }

                    id v233 = (char *)__nw_create_backtrace_string();
                    v229 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v230 = type[0];
                    BOOL v234 = os_log_type_enabled(v229, type[0]);
                    if (!v233)
                    {
LABEL_586:
                      if (!v234) {
                        goto LABEL_589;
                      }
                      uint64_t v384 = *(unsigned int *)(v9 + 352);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v783 = 1LL;
                      *(_WORD *)v784 = 2048;
                      *(void *)&v784[2] = v384;
                      id v232 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                      goto LABEL_588;
                    }

                    if (v234)
                    {
                      uint64_t v235 = *(unsigned int *)(v9 + 352);
                      *(_DWORD *)buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v783 = 1LL;
                      *(_WORD *)v784 = 2048;
                      *(void *)&v784[2] = v235;
                      *(_WORD *)&v784[10] = 2082;
                      *(void *)&v784[12] = v233;
                      _os_log_impl( &dword_181A5C000,  v229,  v230,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                    }

                    free(v233);
                  }

LABEL_589:
                  if (!v228)
                  {
LABEL_591:
                    *(_DWORD *)(v9 + 352) = 0;
                    return 1LL;
                  }

                      if (v350) {
                        free(v350);
                      }
                      uint64_t v86 = 0LL;
                      os_log_type_t v159 = 1;
LABEL_252:
                      uint64_t v160 = v374;
                      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                      {
                        if (gLogDatapath)
                        {
                          v283 = (os_log_s *)__nwlog_obj();
                          if (os_log_type_enabled(v283, OS_LOG_TYPE_DEBUG))
                          {
                            BOOL v284 = *(void *)(v11 + 256);
                            uint64_t v285 = *(_DWORD *)(*(void *)(v11 + 248) + 372LL);
                            if (v284) {
                              LODWORD(v284) = *(_DWORD *)(v284 + 860);
                            }
                            int v286 = *(_DWORD *)(v11 + 424);
                            *(_DWORD *)buf = 136447746;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_destroy";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v11 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            *(void *)&_BYTE buf[24] = " ";
                            *(_WORD *)&buf[32] = 1024;
                            *(_DWORD *)&buf[34] = v285;
                            *(_WORD *)&buf[38] = 1024;
                            *(_DWORD *)&buf[40] = v284;
                            *(_WORD *)&buf[44] = 1024;
                            *(_DWORD *)&buf[46] = v286;
                            *(_WORD *)&buf[50] = 2048;
                            *(void *)&_BYTE buf[52] = v11;
                            _os_log_impl( &dword_181A5C000,  v283,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p",  buf,  0x3Cu);
                          }
                        }
                      }

                      if ((*(_WORD *)(v11 + 428) & 0x4000) != 0) {
                        nw_http_transaction_metadata_set_event_handler(*(void **)(v11 + 352), 0LL);
                      }
                      uint64_t v161 = *(_BYTE *)(v11 + 344);
                      if ((v161 & 1) != 0)
                      {
                        uint64_t v162 = *(void **)(v11 + 336);
                        if (v162)
                        {
                          os_release(v162);
                          uint64_t v161 = *(_BYTE *)(v11 + 344);
                        }
                      }

                      *(void *)(v11 + 336) = 0LL;
                      *(_BYTE *)(v11 + 344) = v161 | 1;
                      v163 = *(_BYTE *)(v11 + 328);
                      if ((v163 & 1) != 0)
                      {
                        v164 = *(void **)(v11 + 320);
                        if (v164)
                        {
                          os_release(v164);
                          v163 = *(_BYTE *)(v11 + 328);
                        }
                      }

                      *(void *)(v11 + 320) = 0LL;
                      *(_BYTE *)(v11 + 32_Block_object_dispose(&STACK[0x338], 8) = v163 | 1;
                      os_log_type_t v165 = *(_BYTE *)(v11 + 376);
                      if ((v165 & 1) != 0)
                      {
                        uint64_t v166 = *(void **)(v11 + 368);
                        if (v166)
                        {
                          os_release(v166);
                          os_log_type_t v165 = *(_BYTE *)(v11 + 376);
                        }
                      }

                      *(void *)(v11 + 36_Block_object_dispose(&STACK[0x338], 8) = 0LL;
                      *(_BYTE *)(v11 + 376) = v165 | 1;
                      os_log_type_t v167 = *(_BYTE *)(v11 + 392);
                      if ((v167 & 1) != 0)
                      {
                        uint64_t v168 = *(void **)(v11 + 384);
                        if (v168)
                        {
                          os_release(v168);
                          os_log_type_t v167 = *(_BYTE *)(v11 + 392);
                        }
                      }

                      *(void *)(v11 + 384) = 0LL;
                      *(_BYTE *)(v11 + 392) = v167 | 1;
                      BOOL v169 = *(void *)(v11 + 256);
                      if (v169 && *(void *)(v169 + 488) == v11) {
                        *(void *)(v169 + 48_Block_object_dispose(&STACK[0x338], 8) = 0LL;
                      }
                      *(void *)(v11 + 256) = 0LL;
                      int v170 = *(void *)(v11 + 48);
                      if (v170 && *(void *)(v170 + 56) == v11) {
                        *(void *)(v170 + 56) = 0LL;
                      }
                      (*(void (**)(void, void))(*(void *)(v11 + 312) + 16LL))( *(void *)(v11 + 312),  0LL);
                      uint64_t v171 = *(const void **)(v11 + 312);
                      if (v171)
                      {
                        _Block_release(v171);
                        *(void *)(v11 + 312) = 0LL;
                      }

                      nw_http1_stream::~nw_http1_stream((nw_http1_stream *)v11);
                      free(v172);
                      if (!v374) {
                        goto LABEL_339;
                      }
                      v173 = *(void *)(v374 + 488);
                      if (!v173 || (*(_WORD *)(v173 + 428) & 0x2000) != 0)
                      {
                        if ((*(_WORD *)(v374 + 872) & 4) == 0)
                        {
                          if ((*(_BYTE *)(v374 + 158) & 1) != 0) {
                            goto LABEL_338;
                          }
                          if (!gLogDatapath) {
                            goto LABEL_338;
                          }
                          uint64_t v178 = (os_log_s *)__nwlog_obj();
                          if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG)) {
                            goto LABEL_338;
                          }
                          uint64_t v179 = *(void *)(v374 + 488);
                          uint64_t v180 = *(_DWORD *)(*(void *)(v374 + 480) + 372LL);
                          unsigned int v181 = *(_DWORD *)(v374 + 860);
                          if (v179) {
                            LODWORD(v179) = *(_DWORD *)(v179 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v374 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          *(void *)&_BYTE buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v180;
                          *(_WORD *)&buf[38] = 1024;
                          *(_DWORD *)&buf[40] = v181;
                          *(_WORD *)&buf[44] = 1024;
                          *(_DWORD *)&buf[46] = v179;
                          os_log_type_t v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the message is not complete";
                          goto LABEL_654;
                        }

                        if ((*(_WORD *)(v374 + 872) & 0x20) == 0)
                        {
                          if ((*(_BYTE *)(v374 + 158) & 1) != 0) {
                            goto LABEL_338;
                          }
                          if (!gLogDatapath) {
                            goto LABEL_338;
                          }
                          uint64_t v178 = (os_log_s *)__nwlog_obj();
                          if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG)) {
                            goto LABEL_338;
                          }
                          os_log_type_t v183 = *(void *)(v374 + 488);
                          uint64_t v184 = *(_DWORD *)(*(void *)(v374 + 480) + 372LL);
                          BOOL v185 = *(_DWORD *)(v374 + 860);
                          if (v183) {
                            LODWORD(v183) = *(_DWORD *)(v183 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v374 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          *(void *)&_BYTE buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v184;
                          *(_WORD *)&buf[38] = 1024;
                          *(_DWORD *)&buf[40] = v185;
                          *(_WORD *)&buf[44] = 1024;
                          *(_DWORD *)&buf[46] = v183;
                          os_log_type_t v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the outbound m"
                                 "essage is not complete";
                          goto LABEL_654;
                        }

                        if ((*(_WORD *)(v374 + 872) & 8) == 0)
                        {
                          if ((*(_BYTE *)(v374 + 158) & 1) != 0) {
                            goto LABEL_338;
                          }
                          if (!gLogDatapath) {
                            goto LABEL_338;
                          }
                          uint64_t v178 = (os_log_s *)__nwlog_obj();
                          if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG)) {
                            goto LABEL_338;
                          }
                          unsigned int v186 = *(void *)(v374 + 488);
                          os_log_type_t v187 = *(_DWORD *)(*(void *)(v374 + 480) + 372LL);
                          BOOL v188 = *(_DWORD *)(v374 + 860);
                          if (v186) {
                            LODWORD(v186) = *(_DWORD *)(v186 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v374 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          *(void *)&_BYTE buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v187;
                          *(_WORD *)&buf[38] = 1024;
                          *(_DWORD *)&buf[40] = v188;
                          *(_WORD *)&buf[44] = 1024;
                          *(_DWORD *)&buf[46] = v186;
                          os_log_type_t v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because keep alive is false";
                          goto LABEL_654;
                        }
                      }

                      else if ((*(_BYTE *)(v374 + 158) & 1) == 0)
                      {
                        if (gLogDatapath)
                        {
                          os_log_type_t v174 = (os_log_s *)__nwlog_obj();
                          if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
                          {
                            uint64_t v175 = *(void *)(v374 + 488);
                            v176 = *(_DWORD *)(*(void *)(v374 + 480) + 372LL);
                            uint64_t v177 = *(_DWORD *)(v374 + 860);
                            if (v175) {
                              LODWORD(v175) = *(_DWORD *)(v175 + 424);
                            }
                            *(_DWORD *)buf = 136447490;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v374 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            *(void *)&_BYTE buf[24] = " ";
                            *(_WORD *)&buf[32] = 1024;
                            *(_DWORD *)&buf[34] = v176;
                            *(_WORD *)&buf[38] = 1024;
                            *(_DWORD *)&buf[40] = v177;
                            *(_WORD *)&buf[44] = 1024;
                            *(_DWORD *)&buf[46] = v175;
                            _os_log_impl( &dword_181A5C000,  v174,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection may be reusable because the current stream didn't use it",  buf,  0x32u);
                            uint64_t v160 = v374;
                          }
                        }
                      }

                      if ((*(_BYTE *)(*(void *)(v160 + 480) + 376LL) & 8) != 0)
                      {
                        if ((*(_BYTE *)(v160 + 158) & 1) != 0) {
                          goto LABEL_338;
                        }
                        if (!gLogDatapath) {
                          goto LABEL_338;
                        }
                        uint64_t v178 = (os_log_s *)__nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_338;
                        }
                        os_log_type_t v193 = *(void *)(v160 + 488);
                        BOOL v194 = *(_DWORD *)(*(void *)(v160 + 480) + 372LL);
                        os_log_type_t v195 = *(_DWORD *)(v160 + 860);
                        if (v193) {
                          LODWORD(v193) = *(_DWORD *)(v193 + 424);
                        }
                        *(_DWORD *)buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(void *)&_BYTE buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v194;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v195;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v193;
                        os_log_type_t v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because pool is closed f"
                               "or new connections";
                        goto LABEL_654;
                      }

                      uint64_t v189 = *(_WORD *)(v160 + 872);
                      if ((v189 & 0x200) != 0)
                      {
                        if ((*(_BYTE *)(v160 + 158) & 1) != 0) {
                          goto LABEL_338;
                        }
                        if (!gLogDatapath) {
                          goto LABEL_338;
                        }
                        uint64_t v178 = (os_log_s *)__nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_338;
                        }
                        uint64_t v196 = *(void *)(v160 + 488);
                        os_log_type_t v197 = *(_DWORD *)(*(void *)(v160 + 480) + 372LL);
                        __int128 v198 = *(_DWORD *)(v160 + 860);
                        if (v196) {
                          LODWORD(v196) = *(_DWORD *)(v196 + 424);
                        }
                        *(_DWORD *)buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(void *)&_BYTE buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v197;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v198;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v196;
                        os_log_type_t v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was upgraded";
                        goto LABEL_654;
                      }

                      if ((v189 & 0x40) == 0)
                      {
                        if ((*(_BYTE *)(v160 + 158) & 1) != 0) {
                          goto LABEL_338;
                        }
                        if (!gLogDatapath) {
                          goto LABEL_338;
                        }
                        uint64_t v178 = (os_log_s *)__nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_338;
                        }
                        uint64_t v190 = *(void *)(v160 + 488);
                        uint64_t v191 = *(_DWORD *)(*(void *)(v160 + 480) + 372LL);
                        uint64_t v192 = *(_DWORD *)(v160 + 860);
                        if (v190) {
                          LODWORD(v190) = *(_DWORD *)(v190 + 424);
                        }
                        *(_DWORD *)buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(void *)&_BYTE buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v191;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v192;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v190;
                        os_log_type_t v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was never connected";
LABEL_654:
                        _os_log_impl(&dword_181A5C000, v178, OS_LOG_TYPE_DEBUG, v182, buf, 0x32u);
                        uint64_t v160 = v374;
LABEL_338:
                        uint64_t v203 = *(void *)(v160 + 608);
                        int v204 = *(void **)(v160 + 496);
                        v377[0] = MEMORY[0x1895F87A8];
                        v377[1] = 0x40000000LL;
                        v377[2] = ___ZL23nw_protocol_http1_resetP11nw_protocolS0__block_invoke;
                        v377[3] = &unk_189BBD890;
                        v377[4] = v203;
                        nw_queue_context_async(v204, v377);
LABEL_339:
                        if (object) {
                          os_release(object);
                        }
                        if (v13) {
                          os_release(v13);
                        }
                        return 1LL;
                      }

                      if ((*(_WORD *)(v160 + 872) & 0x100) != 0)
                      {
                        if ((*(_BYTE *)(v160 + 158) & 1) != 0) {
                          goto LABEL_338;
                        }
                        if (!gLogDatapath) {
                          goto LABEL_338;
                        }
                        uint64_t v178 = (os_log_s *)__nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_338;
                        }
                        int v358 = *(void *)(v160 + 488);
                        int v359 = *(_DWORD *)(*(void *)(v160 + 480) + 372LL);
                        v360 = *(_DWORD *)(v160 + 860);
                        if (v358) {
                          LODWORD(v35_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v358 + 424);
                        }
                        *(_DWORD *)buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(void *)&_BYTE buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v359;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v360;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v358;
                        os_log_type_t v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it has been closed";
                        goto LABEL_654;
                      }

                      if (*(_DWORD *)(v160 + 864) == 4)
                      {
                        if (*(_BYTE *)(v160 + 158) & 1 | (gLogDatapath == 0)) {
                          goto LABEL_338;
                        }
                        uint64_t v178 = (os_log_s *)__nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_338;
                        }
                        __int128 v199 = *(void *)(v160 + 488);
                        __int128 v200 = *(_DWORD *)(*(void *)(v160 + 480) + 372LL);
                        __int128 v201 = *(_DWORD *)(v160 + 860);
                        if (v199) {
                          LODWORD(v199) = *(_DWORD *)(v199 + 424);
                        }
                        *(_DWORD *)buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(void *)&_BYTE buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v200;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v201;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v199;
                        os_log_type_t v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because input has finished from below";
                        goto LABEL_654;
                      }

                      uint64_t v207 = (unsigned __int16 *)(v160 + 872);
                      if (!(*(_BYTE *)(v160 + 158) & 1 | (gLogDatapath == 0)))
                      {
                        int v363 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v363, OS_LOG_TYPE_DEBUG))
                        {
                          v364 = *(void *)(v160 + 488);
                          BOOL v365 = *(_DWORD *)(*(void *)(v160 + 480) + 372LL);
                          uint64_t v366 = *(_DWORD *)(v160 + 860);
                          if (v364) {
                            LODWORD(v364) = *(_DWORD *)(v364 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v160 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          *(void *)&_BYTE buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v365;
                          *(_WORD *)&buf[38] = 1024;
                          *(_DWORD *)&buf[40] = v366;
                          *(_WORD *)&buf[44] = 1024;
                          *(_DWORD *)&buf[46] = v364;
                          _os_log_impl( &dword_181A5C000,  v363,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection can be reused",  buf,  0x32u);
                          uint64_t v160 = v374;
                        }
                      }

                      *v207 &= 0xFFFAu;
                      int v208 = *(void **)(v160 + 800);
                      if (v208)
                      {
                        free(v208);
                        *(void *)(v160 + 800) = 0LL;
                      }

                      *(_DWORD *)(v160 + 840) = 0;
                      int v209 = *(void **)(v160 + 808);
                      if (v209)
                      {
                        free(v209);
                        *(void *)(v160 + 80_Block_object_dispose(&STACK[0x338], 8) = 0LL;
                      }

                      *(_DWORD *)(v160 + 844) = 0;
                      os_log_type_t v210 = *(void **)(v160 + 816);
                      if (v210)
                      {
                        free(v210);
                        *(void *)(v160 + 816) = 0LL;
                      }

                      *(_DWORD *)(v160 + 84_Block_object_dispose(&STACK[0x338], 8) = 0;
                      v211 = *(void **)(v160 + 824);
                      if (v211)
                      {
                        free(v211);
                        *(void *)(v160 + 824) = 0LL;
                      }

                      *(_DWORD *)(v160 + 852) = 0;
                      BOOL v212 = *(void **)(v160 + 832);
                      if (v212)
                      {
                        free(v212);
                        *(void *)(v160 + 832) = 0LL;
                      }

                      *(_DWORD *)(v160 + 856) = 0;
                      uint64_t v213 = *v207;
                      uint64_t v214 = v213 | (*((unsigned __int8 *)v207 + 2) << 16);
                      if ((v213 & 0x10) != 0)
                      {
                        if (*(_DWORD *)(v160 + 224) == 21) {
                          *(_DWORD *)(v160 + 224) = 0;
                        }
                        char v223 = v214 & 0xFFFFFFEF;
                        void *v207 = v223;
                        *((_BYTE *)v207 + 2) = BYTE2(v223);
                        if ((*(_BYTE *)(v160 + 158) & 1) == 0)
                        {
                          if (gLogDatapath)
                          {
                            int v218 = (os_log_s *)__nwlog_obj();
                            if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
                            {
                              uint64_t v367 = *(void *)(v160 + 488);
                              uint64_t v368 = *(_DWORD *)(*(void *)(v160 + 480) + 372LL);
                              v369 = *(_DWORD *)(v160 + 860);
                              if (v367) {
                                LODWORD(v367) = *(_DWORD *)(v367 + 424);
                              }
                              *(_DWORD *)buf = 136447490;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_reset_for_new_message";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v160 + 74;
                              *(_WORD *)&buf[22] = 2080;
                              *(void *)&_BYTE buf[24] = " ";
                              *(_WORD *)&buf[32] = 1024;
                              *(_DWORD *)&buf[34] = v368;
                              *(_WORD *)&buf[38] = 1024;
                              *(_DWORD *)&buf[40] = v369;
                              *(_WORD *)&buf[44] = 1024;
                              *(_DWORD *)&buf[46] = v367;
                              uint64_t v222 = "%{public}s %{public}s%s<i%u:c%u:s%u> Unpausing parser, input for next stream available";
                              goto LABEL_671;
                            }
                          }
                        }
                      }

                      else
                      {
                        *(_OWORD *)(v160 + 200) = 0u;
                        uint64_t v215 = *(_BYTE *)(v160 + 272);
                        unsigned int v216 = *(void *)(v160 + 248);
                        uint64_t v217 = *(_WORD *)(v160 + 278);
                        *(_OWORD *)(v160 + 24_Block_object_dispose(&STACK[0x338], 8) = 0u;
                        *(_OWORD *)(v160 + 264) = 0u;
                        *(_OWORD *)(v160 + 216) = 0u;
                        *(_OWORD *)(v160 + 232) = 0u;
                        *(void *)(v160 + 280) = 0LL;
                        *(_BYTE *)(v160 + 272) = v215;
                        *(void *)(v160 + 24_Block_object_dispose(&STACK[0x338], 8) = v216;
                        *(void *)(v160 + 256) = 238LL;
                        *(_WORD *)(v160 + 27_Block_object_dispose(&STACK[0x338], 8) = v217;
                        if ((*(_BYTE *)(v160 + 158) & 1) == 0)
                        {
                          if (gLogDatapath)
                          {
                            int v218 = (os_log_s *)__nwlog_obj();
                            if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
                            {
                              int v219 = *(void *)(v160 + 488);
                              uint64_t v220 = *(_DWORD *)(*(void *)(v160 + 480) + 372LL);
                              v221 = *(_DWORD *)(v160 + 860);
                              if (v219) {
                                LODWORD(v219) = *(_DWORD *)(v219 + 424);
                              }
                              *(_DWORD *)buf = 136447490;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_reset_for_new_message";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v160 + 74;
                              *(_WORD *)&buf[22] = 2080;
                              *(void *)&_BYTE buf[24] = " ";
                              *(_WORD *)&buf[32] = 1024;
                              *(_DWORD *)&buf[34] = v220;
                              *(_WORD *)&buf[38] = 1024;
                              *(_DWORD *)&buf[40] = v221;
                              *(_WORD *)&buf[44] = 1024;
                              *(_DWORD *)&buf[46] = v219;
                              uint64_t v222 = "%{public}s %{public}s%s<i%u:c%u:s%u> Resetting parser, no current available input for next stream";
LABEL_671:
                              _os_log_impl(&dword_181A5C000, v218, OS_LOG_TYPE_DEBUG, v222, buf, 0x32u);
                              uint64_t v160 = v374;
                            }
                          }
                        }
                      }

                      if (v159)
                      {
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        v225 = (char *)_os_log_send_and_compose_impl();
                        aBlock[0] = 16;
                        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                        if (aBlock[0] == 17)
                        {
                          uint64_t v361 = (os_log_s *)__nwlog_obj();
                          int v362 = aBlock[0];
                          if (!os_log_type_enabled(v361, (os_log_type_t)aBlock[0])) {
                            goto LABEL_410;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream";
                        }

                        else if (type)
                        {
                          uint64_t v370 = (char *)__nw_create_backtrace_string();
                          uint64_t v361 = (os_log_s *)__nwlog_obj();
                          int v362 = aBlock[0];
                          int v371 = os_log_type_enabled(v361, (os_log_type_t)aBlock[0]);
                          if (v370)
                          {
                            if (v371)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v370;
                              _os_log_impl( &dword_181A5C000,  v361,  v362,  "%{public}s called with null http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
                            }

                            free(v370);
                            goto LABEL_410;
                          }

                          if (!v371) {
                            goto LABEL_410;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream, no backtrace";
                        }

                        else
                        {
                          uint64_t v361 = (os_log_s *)__nwlog_obj();
                          int v362 = aBlock[0];
                          if (!os_log_type_enabled(v361, (os_log_type_t)aBlock[0])) {
                            goto LABEL_410;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream, backtrace limit exceeded";
                        }
                      }

                      else
                      {
                        if (*((void *)v86 + 31))
                        {
                          if (!*(void *)(v160 + 488))
                          {
                            *((void *)v86 + 32) = v160;
                            *(void *)(v160 + 48_Block_object_dispose(&STACK[0x338], 8) = v86;
                            nw_protocol_set_output_handler((uint64_t)v86, *(void *)(v160 + 32));
                            nw_protocol_set_input_handler(v160, *((void *)v86 + 6));
                            *(_OWORD *)uint64_t v86 = *(_OWORD *)v160;
                            os_log_type_t v230 = *((_OWORD *)v86 + 9);
                            id v232 = *((_OWORD *)v86 + 6);
                            uint64_t v231 = *((_OWORD *)v86 + 7);
                            *(_OWORD *)(v160 + 12_Block_object_dispose(&STACK[0x338], 8) = *((_OWORD *)v86 + 8);
                            *(_OWORD *)(v160 + 144) = v230;
                            *(_OWORD *)(v160 + 96) = v232;
                            *(_OWORD *)(v160 + 112) = v231;
                            id v233 = *((_OWORD *)v86 + 5);
                            *(_OWORD *)(v160 + 64) = *((_OWORD *)v86 + 4);
                            *(_OWORD *)(v160 + 80) = v233;
                            nw_http_transaction_metadata_set_connection_metadata( *((void **)v86 + 44),  *(void **)(v160 + 768));
                            *v207 &= 0xFFD7u;
                            *(_DWORD *)(v160 + 864) = 1;
                            if ((*(_BYTE *)(v160 + 158) & 1) == 0)
                            {
                              BOOL v234 = (os_log_s *)__nwlog_obj();
                              if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
                              {
                                uint64_t v235 = *(void *)(v160 + 488);
                                uint64_t v236 = *(_DWORD *)(*(void *)(v160 + 480) + 372LL);
                                BOOL v237 = *(_DWORD *)(v160 + 860);
                                if (v235) {
                                  LODWORD(v235) = *(_DWORD *)(v235 + 424);
                                }
                                *(_DWORD *)buf = 136447490;
                                *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                                *(_WORD *)&buf[12] = 2082;
                                *(void *)&buf[14] = v160 + 74;
                                *(_WORD *)&buf[22] = 2080;
                                *(void *)&_BYTE buf[24] = " ";
                                *(_WORD *)&buf[32] = 1024;
                                *(_DWORD *)&buf[34] = v236;
                                *(_WORD *)&buf[38] = 1024;
                                *(_DWORD *)&buf[40] = v237;
                                *(_WORD *)&buf[44] = 1024;
                                *(_DWORD *)&buf[46] = v235;
                                _os_log_impl( &dword_181A5C000,  v234,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                              }
                            }

                            if ((v86[158] & 1) == 0)
                            {
                              uint64_t v238 = (os_log_s *)__nwlog_obj();
                              if (os_log_type_enabled(v238, OS_LOG_TYPE_INFO))
                              {
                                id v239 = *((void *)v86 + 32);
                                uint64_t v240 = *(_DWORD *)(*((void *)v86 + 31) + 372LL);
                                if (v239) {
                                  LODWORD(v239) = *(_DWORD *)(v239 + 860);
                                }
                                int v241 = *((_DWORD *)v86 + 106);
                                *(_DWORD *)buf = 136448002;
                                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                *(_WORD *)&buf[12] = 2082;
                                *(void *)&buf[14] = v86 + 74;
                                *(_WORD *)&buf[22] = 2080;
                                *(void *)&_BYTE buf[24] = " ";
                                *(_WORD *)&buf[32] = 1024;
                                *(_DWORD *)&buf[34] = v240;
                                *(_WORD *)&buf[38] = 1024;
                                *(_DWORD *)&buf[40] = v239;
                                *(_WORD *)&buf[44] = 1024;
                                *(_DWORD *)&buf[46] = v241;
                                *(_WORD *)&buf[50] = 2048;
                                *(void *)&_BYTE buf[52] = v86;
                                *(_WORD *)&buf[60] = 2048;
                                *(void *)&buf[62] = v160;
                                _os_log_impl( &dword_181A5C000,  v238,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                              }
                            }

                            goto LABEL_339;
                          }

                          __nwlog_obj();
                          v224 = *(void *)(v160 + 488);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v160;
                          *(_WORD *)&buf[22] = 2048;
                          *(void *)&_BYTE buf[24] = v224;
                          v225 = (char *)_os_log_send_and_compose_impl();
                          aBlock[0] = 16;
                          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                          if (__nwlog_fault(v225, aBlock, &type))
                          {
                            if (aBlock[0] == 17)
                            {
                              int v226 = (os_log_s *)__nwlog_obj();
                              uint64_t v227 = aBlock[0];
                              if (!os_log_type_enabled(v226, (os_log_type_t)aBlock[0])) {
                                goto LABEL_410;
                              }
                              id v228 = *(void *)(v160 + 488);
                              *(_DWORD *)buf = 136446722;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v160;
                              *(_WORD *)&buf[22] = 2048;
                              *(void *)&_BYTE buf[24] = v228;
                              v229 = "%{public}s Connection %p already has a stream (%p)";
LABEL_408:
                              uint64_t v259 = v226;
                              v260 = v227;
                              os_log_type_t v261 = 32;
LABEL_409:
                              _os_log_impl(&dword_181A5C000, v259, v260, v229, buf, v261);
                              goto LABEL_410;
                            }

                            if (type == OS_LOG_TYPE_DEFAULT)
                            {
                              int v226 = (os_log_s *)__nwlog_obj();
                              uint64_t v227 = aBlock[0];
                              if (!os_log_type_enabled(v226, (os_log_type_t)aBlock[0])) {
                                goto LABEL_410;
                              }
                              uint64_t v253 = *(void *)(v160 + 488);
                              *(_DWORD *)buf = 136446722;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v160;
                              *(_WORD *)&buf[22] = 2048;
                              *(void *)&_BYTE buf[24] = v253;
                              v229 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                              goto LABEL_408;
                            }

                            int v242 = (char *)__nw_create_backtrace_string();
                            int v226 = (os_log_s *)__nwlog_obj();
                            uint64_t v227 = aBlock[0];
                            int v243 = os_log_type_enabled(v226, (os_log_type_t)aBlock[0]);
                            if (!v242)
                            {
                              if (!v243) {
                                goto LABEL_410;
                              }
                              uint64_t v258 = *(void *)(v160 + 488);
                              *(_DWORD *)buf = 136446722;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v160;
                              *(_WORD *)&buf[22] = 2048;
                              *(void *)&_BYTE buf[24] = v258;
                              v229 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                              goto LABEL_408;
                            }

                            if (v243)
                            {
                              uint64_t v244 = *(void *)(v160 + 488);
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v160;
                              *(_WORD *)&buf[22] = 2048;
                              *(void *)&_BYTE buf[24] = v244;
                              *(_WORD *)&buf[32] = 2082;
                              *(void *)&buf[34] = v242;
                              uint64_t v245 = "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s";
                              int v246 = v226;
                              int v247 = v227;
                              uint64_t v248 = 42;
LABEL_389:
                              _os_log_impl(&dword_181A5C000, v246, v247, v245, buf, v248);
                              goto LABEL_390;
                            }

                            goto LABEL_390;
                          }

                          goto LABEL_410;
                        }

                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        v225 = (char *)_os_log_send_and_compose_impl();
                        aBlock[0] = 16;
                        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                        if (aBlock[0] == 17)
                        {
                          uint64_t v361 = (os_log_s *)__nwlog_obj();
                          int v362 = aBlock[0];
                          if (!os_log_type_enabled(v361, (os_log_type_t)aBlock[0])) {
                            goto LABEL_410;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream->protocol_http1";
                        }

                        else if (type)
                        {
                          int v242 = (char *)__nw_create_backtrace_string();
                          uint64_t v361 = (os_log_s *)__nwlog_obj();
                          int v362 = aBlock[0];
                          int v372 = os_log_type_enabled(v361, (os_log_type_t)aBlock[0]);
                          if (v242)
                          {
                            if (v372)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v242;
                              uint64_t v245 = "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s";
                              int v246 = v361;
                              int v247 = v362;
                              uint64_t v248 = 22;
                              goto LABEL_389;
                            }

    goto LABEL_590;
  }

  int v25 = *v24;
  if (v25 <= 0x12 && ((1 << v25) & 0x44400) != 0)
  {
    char v18 = *(void *)&v298[184]._os_unfair_lock_opaque;
    uint64_t v19 = v296;
    goto LABEL_35;
  }

          if (v241) {
            free(v241);
          }
          goto LABEL_591;
        }

        BOOL v23 = *(void **)(v21 + 24);
        if (!v23 || !*v23)
        {
          __nwlog_obj();
          int v247 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v378 = "nw_protocol_utilities_add_input_handler";
            int v379 = 2048;
            uint64_t v380 = (char *)v21;
            _os_log_impl( &dword_181A5C000,  v247,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
          }

          goto LABEL_591;
        }

        if ((nw_protocol_add_input_handler(v21, v359) & 1) == 0) {
          goto LABEL_591;
        }
        if (*(_UNKNOWN **)(v10 + 40) == &nw_protocol_ref_counted_handle)
        {
          BOOL v33 = *(void *)(v10 + 88);
          if (v33) {
            *(void *)(v10 + 8_Block_object_dispose(&STACK[0x338], 8) = v33 + 1;
          }
          *(void *)uint64_t v375 = v10;
          uint64_t v24 = v376 | 1;
        }

        else
        {
          *(void *)uint64_t v375 = v10;
          uint64_t v24 = v376 & 0xFE;
        }

        v376 = v24;
        if (*(_UNKNOWN **)(v359 + 40) == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v35 = *(void *)(v359 + 88);
          if (v35) {
            *(void *)(v359 + 8_Block_object_dispose(&STACK[0x338], 8) = v35 + 1;
          }
          *(void *)uint64_t v373 = v359;
          BOOL v34 = v374 | 1;
        }

        else
        {
          *(void *)uint64_t v373 = v359;
          BOOL v34 = v374 & 0xFE;
        }

        v374 = v34;
        if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
        {
          BOOL v37 = *(void *)(v21 + 88);
          if (v37) {
            *(void *)(v21 + 8_Block_object_dispose(&STACK[0x338], 8) = v37 + 1;
          }
          *(void *)uint64_t v370 = v21;
          char v36 = v371 | 1;
        }

        else
        {
          *(void *)uint64_t v370 = v21;
          char v36 = v371 & 0xFE;
        }

        int v371 = v36;
        os_log_type_t v38 = *(void *)(v10 + 24);
        if (v38)
        {
          char v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
          if (v39)
          {
            BOOL v40 = v39(v10, v359, v21);
            if ((v371 & 1) == 0) {
              goto LABEL_57;
            }
LABEL_56:
            nw::release_if_needed<nw_protocol *>((uint64_t *)v370);
            goto LABEL_57;
          }
        }

        __nwlog_obj();
        uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue();
        uint32_t v100 = *(const char **)(v10 + 16);
        if (!v100) {
          uint32_t v100 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v378 = "__nw_protocol_replace_input_handler";
        int v379 = 2082;
        uint64_t v380 = (char *)v100;
        v381 = 2048;
        uint64_t v382 = (const char *)v10;
        id v101 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v369 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          int v103 = type;
          if (os_log_type_enabled(v102, type))
          {
            int v104 = *(const char **)(v10 + 16);
            if (!v104) {
              int v104 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_replace_input_handler";
            int v379 = 2082;
            uint64_t v380 = (char *)v104;
            v381 = 2048;
            uint64_t v382 = (const char *)v10;
            _os_log_impl( &dword_181A5C000,  v102,  v103,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback",  buf,  0x20u);
          }

LABEL_590:
                  free(v228);
                  goto LABEL_591;
                }

                if (v251) {
                  free(v251);
                }
                int v246 = 0;
                int v241 = v537;
                id v150 = v533;
LABEL_660:
                is_multicast = nw_endpoint_is_multicast(v241);
                BOOL v188 = v534;
                if (!is_multicast) {
                  goto LABEL_730;
                }
                disable_multicast_loopback = nw_ip_options_get_disable_multicast_loopback(v190);
                if (v192 == 2 && v191 && nw_protocol_options_is_udp(v191))
                {
                  if (disable_multicast_loopback) {
                    unsigned int v289 = &v550;
                  }
                  else {
                    unsigned int v289 = &v551;
                  }
                  if (!setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0, 11, v289, 4u)) {
                    goto LABEL_730;
                  }
                  v290 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  uint64_t v291 = (os_log_s *)gconnectionLogObj;
                  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446722;
                    int v553 = "nw_socket_set_common_sockopts";
                    v554 = 2080;
                    *(void *)BOOL v555 = (char *)a1 + 404;
                    *(_WORD *)&v555[8] = 1024;
                    *(_DWORD *)&v555[10] = v290;
                    _os_log_impl( &dword_181A5C000,  v291,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt IP_MULTICAST_LOOP failed %{darwin.errno}d",  buf,  0x1Cu);
                  }

                  v292 = (os_log_s *)__nwlog_obj();
                  v293 = v292;
                  if (v290 == 22)
                  {
                    if (os_log_type_enabled(v292, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446466;
                      int v553 = "nw_socket_set_common_sockopts";
                      v554 = 1024;
                      *(_DWORD *)BOOL v555 = 22;
                      os_log_type_t v294 = "%{public}s setsockopt IP_MULTICAST_LOOP failed %{darwin.errno}d";
                      uint64_t v295 = v293;
                      v296 = OS_LOG_TYPE_ERROR;
                      __int128 v297 = 18;
LABEL_729:
                      _os_log_impl(&dword_181A5C000, v295, v296, v294, buf, v297);
                      goto LABEL_730;
                    }

                    goto LABEL_730;
                  }

                  int v304 = v150;
                  *(_DWORD *)buf = 136446466;
                  int v553 = "nw_socket_set_common_sockopts";
                  v554 = 1024;
                  *(_DWORD *)BOOL v555 = v290;
                  v305 = (char *)_os_log_send_and_compose_impl();
                  v547[0] = OS_LOG_TYPE_ERROR;
                  v545[0] = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v305, v547, v545))
                  {
                    if (v547[0] == OS_LOG_TYPE_FAULT)
                    {
                      uint64_t v306 = (os_log_s *)__nwlog_obj();
                      int v307 = v547[0];
                      if (os_log_type_enabled(v306, v547[0]))
                      {
                        *(_DWORD *)buf = 136446466;
                        int v553 = "nw_socket_set_common_sockopts";
                        v554 = 1024;
                        *(_DWORD *)BOOL v555 = v290;
                        int v308 = "%{public}s setsockopt IP_MULTICAST_LOOP failed %{darwin.errno}d";
LABEL_715:
                        _os_log_impl(&dword_181A5C000, v306, v307, v308, buf, 0x12u);
                      }
                    }

                    else if (v545[0])
                    {
                      v314 = (char *)__nw_create_backtrace_string();
                      uint64_t v306 = (os_log_s *)__nwlog_obj();
                      int v307 = v547[0];
                      os_log_type_t v315 = os_log_type_enabled(v306, v547[0]);
                      if (v314)
                      {
                        if (v315)
                        {
                          *(_DWORD *)buf = 136446722;
                          int v553 = "nw_socket_set_common_sockopts";
                          v554 = 1024;
                          *(_DWORD *)BOOL v555 = v290;
                          *(_WORD *)&v555[4] = 2082;
                          *(void *)&v555[6] = v314;
                          _os_log_impl( &dword_181A5C000,  v306,  v307,  "%{public}s setsockopt IP_MULTICAST_LOOP failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                        }

                        free(v314);
                        goto LABEL_716;
                      }

                      if (v315)
                      {
                        *(_DWORD *)buf = 136446466;
                        int v553 = "nw_socket_set_common_sockopts";
                        v554 = 1024;
                        *(_DWORD *)BOOL v555 = v290;
                        int v308 = "%{public}s setsockopt IP_MULTICAST_LOOP failed %{darwin.errno}d, no backtrace";
                        goto LABEL_715;
                      }
                    }

                    else
                    {
                      uint64_t v306 = (os_log_s *)__nwlog_obj();
                      int v307 = v547[0];
                      if (os_log_type_enabled(v306, v547[0]))
                      {
                        *(_DWORD *)buf = 136446466;
                        int v553 = "nw_socket_set_common_sockopts";
                        v554 = 1024;
                        *(_DWORD *)BOOL v555 = v290;
                        int v308 = "%{public}s setsockopt IP_MULTICAST_LOOP failed %{darwin.errno}d, backtrace limit exceeded";
                        goto LABEL_715;
                      }
                    }
                  }

LABEL_310:
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              unsigned int v216 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v217 = *(void *)(v15 + 256);
                int v218 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
                if (v217) {
                  LODWORD(v217) = *(_DWORD *)(v217 + 860);
                }
                int v219 = *(_DWORD *)(v15 + 424);
                *(_DWORD *)buf = 136448258;
                *(void *)&uint8_t buf[4] = "nw_http1_start_new_connection_for_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v15 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v783 = (uint64_t)" ";
                *(_WORD *)v784 = 1024;
                *(_DWORD *)&v784[2] = v218;
                *(_WORD *)&v784[6] = 1024;
                *(_DWORD *)&v784[8] = v217;
                *(_WORD *)&v784[12] = 1024;
                *(_DWORD *)&v784[14] = v219;
                *(_WORD *)&v784[18] = 2048;
                *(void *)&v784[20] = v34;
                *(_WORD *)&v784[28] = 1024;
                *(_DWORD *)&v784[30] = v219;
                *(_WORD *)&v784[34] = 2048;
                *(void *)&v784[36] = v15;
                _os_log_impl( &dword_181A5C000,  v216,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)",  buf,  0x4Cu);
              }

              goto LABEL_314;
            }

            v518 = v31;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
            v541 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v542 = (os_log_s *)__nwlog_obj();
              os_log_type_t v543 = type[0];
              if (!os_log_type_enabled(v542, type[0])) {
                goto LABEL_1056;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v544 = "%{public}s called with null http1_stream->protocol_http1";
            }

            else if ((_BYTE)aBlock)
            {
              v566 = (char *)__nw_create_backtrace_string();
              v542 = (os_log_s *)__nwlog_obj();
              os_log_type_t v543 = type[0];
              BOOL v567 = os_log_type_enabled(v542, type[0]);
              if (v566)
              {
                if (v567)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v566;
                  _os_log_impl( &dword_181A5C000,  v542,  v543,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v566);
                goto LABEL_1056;
              }

              if (!v567)
              {
LABEL_1056:
                if (v541) {
                  free(v541);
                }
                goto LABEL_1038;
              }

              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v544 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
            }

            else
            {
              v542 = (os_log_s *)__nwlog_obj();
              os_log_type_t v543 = type[0];
              if (!os_log_type_enabled(v542, type[0])) {
                goto LABEL_1056;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v544 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
            }

            _os_log_impl(&dword_181A5C000, v542, v543, v544, buf, 0xCu);
            goto LABEL_1056;
          }

          v536 = v31;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
          v537 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v537, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v538 = (os_log_s *)__nwlog_obj();
              os_log_type_t v539 = type[0];
              if (!os_log_type_enabled(v538, type[0])) {
                goto LABEL_1049;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v540 = "%{public}s called with null parameters";
LABEL_1048:
              _os_log_impl(&dword_181A5C000, v538, v539, v540, buf, 0xCu);
              goto LABEL_1049;
            }

            if (!(_BYTE)aBlock)
            {
              v538 = (os_log_s *)__nwlog_obj();
              os_log_type_t v539 = type[0];
              if (!os_log_type_enabled(v538, type[0])) {
                goto LABEL_1049;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v540 = "%{public}s called with null parameters, backtrace limit exceeded";
              goto LABEL_1048;
            }

            v564 = (char *)__nw_create_backtrace_string();
            v538 = (os_log_s *)__nwlog_obj();
            os_log_type_t v539 = type[0];
            BOOL v565 = os_log_type_enabled(v538, type[0]);
            if (!v564)
            {
              if (!v565) {
                goto LABEL_1049;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v540 = "%{public}s called with null parameters, no backtrace";
              goto LABEL_1048;
            }

            if (v565)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v564;
              _os_log_impl( &dword_181A5C000,  v538,  v539,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v564);
          }

  if (v110) {
    free(v110);
  }
  char v43 = a1[4];
  if (v43)
  {
    int v44 = 0LL;
    goto LABEL_60;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
  os_log_type_t v193 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v213) = 0;
  if (__nwlog_fault(v193, &type, &v213))
  {
    if (type == 17)
    {
      BOOL v194 = (os_log_s *)__nwlog_obj();
      os_log_type_t v195 = type;
      if (os_log_type_enabled(v194, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
        uint64_t v196 = "%{public}s called with null connection";
LABEL_328:
        _os_log_impl(&dword_181A5C000, v194, v195, v196, buf, 0xCu);
      }
    }

    else if ((_BYTE)v213)
    {
      os_log_type_t v197 = (char *)__nw_create_backtrace_string();
      BOOL v194 = (os_log_s *)__nwlog_obj();
      os_log_type_t v195 = type;
      __int128 v198 = os_log_type_enabled(v194, (os_log_type_t)type);
      if (v197)
      {
        if (v198)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v197;
          _os_log_impl( &dword_181A5C000,  v194,  v195,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v197);
        int v12 = &qword_18C45F000;
        goto LABEL_329;
      }

      int v12 = &qword_18C45F000;
      if (v198)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
        uint64_t v196 = "%{public}s called with null connection, no backtrace";
        goto LABEL_328;
      }
    }

    else
    {
      BOOL v194 = (os_log_s *)__nwlog_obj();
      os_log_type_t v195 = type;
      if (os_log_type_enabled(v194, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
        uint64_t v196 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_328;
      }
    }
  }

                  _Block_object_dispose(&v390, 8);
                  _Block_object_dispose(&v394, 8);
                  _Block_object_dispose(v398, 8);
                  _Block_object_dispose(v399, 8);
                  _Block_object_dispose(&v400, 8);
                  _Block_object_dispose(&v404, 8);
                  _Block_object_dispose(v408, 8);
                  _Block_object_dispose(v409, 8);
                  _Block_object_dispose(&v413, 8);
                  _Block_object_dispose(type, 8);
                  if (!v64)
                  {
LABEL_312:
                    int v84 = 0;
                    goto LABEL_313;
                  }

LABEL_1049:
          if (v537) {
            free(v537);
          }
          BOOL v31 = v536;
          uint64_t v71 = *v56;
          if (*v56) {
            goto LABEL_105;
          }
          goto LABEL_107;
        }

        v518 = *(_OWORD **)(v15 + 32);
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
        v519 = (char *)_os_log_send_and_compose_impl();
        v777[0] = 16;
        LOBYTE(v758[0]) = 0;
        if (__nwlog_fault(v519, v777, v758))
        {
          if (v777[0] == 17)
          {
            v520 = (os_log_s *)__nwlog_obj();
            os_log_type_t v521 = v777[0];
            if (!os_log_type_enabled(v520, (os_log_type_t)v777[0])) {
              goto LABEL_1003;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v522 = "%{public}s called with null parameters";
            goto LABEL_1002;
          }

          if (!LOBYTE(v758[0]))
          {
            v520 = (os_log_s *)__nwlog_obj();
            os_log_type_t v521 = v777[0];
            if (!os_log_type_enabled(v520, (os_log_type_t)v777[0])) {
              goto LABEL_1003;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v522 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_1002;
          }

          v558 = (char *)__nw_create_backtrace_string();
          v520 = (os_log_s *)__nwlog_obj();
          os_log_type_t v521 = v777[0];
          BOOL v561 = os_log_type_enabled(v520, (os_log_type_t)v777[0]);
          if (!v558)
          {
            if (!v561) {
              goto LABEL_1003;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v522 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_1002;
          }

          if (v561)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v558;
            v560 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
            goto LABEL_930;
          }

          goto LABEL_931;
        }

LABEL_1003:
        if (!v519) {
          goto LABEL_1005;
        }
        goto LABEL_1004;
      }

      v518 = *(_OWORD **)(v15 + 32);
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v519 = (char *)_os_log_send_and_compose_impl();
      v777[0] = 16;
      LOBYTE(v758[0]) = 0;
      if (v777[0] != 17)
      {
        if (!LOBYTE(v758[0]))
        {
          v520 = (os_log_s *)__nwlog_obj();
          os_log_type_t v521 = v777[0];
          if (!os_log_type_enabled(v520, (os_log_type_t)v777[0])) {
            goto LABEL_1003;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v522 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_1002;
        }

        v558 = (char *)__nw_create_backtrace_string();
        v520 = (os_log_s *)__nwlog_obj();
        os_log_type_t v521 = v777[0];
        BOOL v559 = os_log_type_enabled(v520, (os_log_type_t)v777[0]);
        if (!v558)
        {
          if (!v559) {
            goto LABEL_1003;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v522 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_1002;
        }

        if (v559)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v558;
          v560 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_930:
          _os_log_impl(&dword_181A5C000, v520, v521, v560, buf, 0x16u);
        }

LABEL_931:
        free(v558);
        if (!v519)
        {
LABEL_1005:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          v593 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v594 = (os_log_s *)__nwlog_obj();
            os_log_type_t v595 = type[0];
            if (!os_log_type_enabled(v594, type[0])) {
              goto LABEL_1019;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v596 = "%{public}s called with null http1_connection";
          }

          else if ((_BYTE)aBlock)
          {
            v597 = (char *)__nw_create_backtrace_string();
            v594 = (os_log_s *)__nwlog_obj();
            os_log_type_t v595 = type[0];
            BOOL v598 = os_log_type_enabled(v594, type[0]);
            if (v597)
            {
              if (v598)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v597;
                _os_log_impl( &dword_181A5C000,  v594,  v595,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v597);
LABEL_1019:
              if (v593) {
                free(v593);
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v599 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v600 = (os_log_s *)__nwlog_obj();
                os_log_type_t v601 = type[0];
                if (os_log_type_enabled(v600, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v602 = "%{public}s called with null http1_connection";
LABEL_1034:
                  _os_log_impl(&dword_181A5C000, v600, v601, v602, buf, 0xCu);
                }
              }

              else if ((_BYTE)aBlock)
              {
                v603 = (char *)__nw_create_backtrace_string();
                v600 = (os_log_s *)__nwlog_obj();
                os_log_type_t v601 = type[0];
                BOOL v604 = os_log_type_enabled(v600, type[0]);
                if (v603)
                {
                  if (v604)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v603;
                    _os_log_impl( &dword_181A5C000,  v600,  v601,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v603);
                  goto LABEL_1035;
                }

                if (v604)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v602 = "%{public}s called with null http1_connection, no backtrace";
                  goto LABEL_1034;
                }
              }

              else
              {
                v600 = (os_log_s *)__nwlog_obj();
                os_log_type_t v601 = type[0];
                if (os_log_type_enabled(v600, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v602 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_1034;
                }
              }

LABEL_1035:
              if (v599) {
                free(v599);
              }
              BOOL v34 = 0LL;
LABEL_1038:
              BOOL v31 = v518;
              if ((*(_BYTE *)(v15 + 158) & 1) != 0) {
                goto LABEL_314;
              }
              goto LABEL_310;
            }

            if (!v598) {
              goto LABEL_1019;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v596 = "%{public}s called with null http1_connection, no backtrace";
          }

          else
          {
            v594 = (os_log_s *)__nwlog_obj();
            os_log_type_t v595 = type[0];
            if (!os_log_type_enabled(v594, type[0])) {
              goto LABEL_1019;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v596 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          }

          _os_log_impl(&dword_181A5C000, v594, v595, v596, buf, 0xCu);
          goto LABEL_1019;
        }

LABEL_1004:
        free(v519);
        goto LABEL_1005;
      }

      v520 = (os_log_s *)__nwlog_obj();
      os_log_type_t v521 = v777[0];
      if (!os_log_type_enabled(v520, (os_log_type_t)v777[0])) {
        goto LABEL_1003;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v522 = "%{public}s called with null endpoint";
    }

    else
    {
      v518 = 0LL;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v519 = (char *)_os_log_send_and_compose_impl();
      v777[0] = 16;
      LOBYTE(v758[0]) = 0;
      if (v777[0] != 17)
      {
        if (!LOBYTE(v758[0]))
        {
          v520 = (os_log_s *)__nwlog_obj();
          os_log_type_t v521 = v777[0];
          if (!os_log_type_enabled(v520, (os_log_type_t)v777[0])) {
            goto LABEL_1003;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v522 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_1002;
        }

        v556 = (char *)__nw_create_backtrace_string();
        v520 = (os_log_s *)__nwlog_obj();
        os_log_type_t v521 = v777[0];
        BOOL v557 = os_log_type_enabled(v520, (os_log_type_t)v777[0]);
        if (!v556)
        {
          if (!v557) {
            goto LABEL_1003;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v522 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_1002;
        }

        if (v557)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v556;
          _os_log_impl( &dword_181A5C000,  v520,  v521,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v556);
        goto LABEL_1003;
      }

      v520 = (os_log_s *)__nwlog_obj();
      os_log_type_t v521 = v777[0];
      if (!os_log_type_enabled(v520, (os_log_type_t)v777[0])) {
        goto LABEL_1003;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v522 = "%{public}s called with null output_handler";
    }

LABEL_1002:
    _os_log_impl(&dword_181A5C000, v520, v521, v522, buf, 0xCu);
    goto LABEL_1003;
  }

  if ((v16 & 4) != 0)
  {
    if ((*(_BYTE *)(v15 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v394 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v394, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v395 = *(void *)(v15 + 256);
          int v396 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
          if (v395) {
            LODWORD(v395) = *(_DWORD *)(v395 + 860);
          }
          int v397 = *(_DWORD *)(v15 + 424);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v783 = (uint64_t)" ";
          *(_WORD *)v784 = 1024;
          *(_DWORD *)&v784[2] = v396;
          *(_WORD *)&v784[6] = 1024;
          *(_DWORD *)&v784[8] = v395;
          *(_WORD *)&v784[12] = 1024;
          *(_DWORD *)&v784[14] = v397;
          _os_log_impl( &dword_181A5C000,  v394,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> new flow stream already attached, sending connected immediately",  buf,  0x32u);
        }
      }
    }

    *(_WORD *)(v15 + 42_Block_object_dispose(&STACK[0x338], 8) = *(_WORD *)(v15 + 428) & 0xBFFB | 0x4000;
    int v29 = *(void **)(v15 + 352);
    v755[0] = MEMORY[0x1895F87A8];
    v755[1] = 0x40000000LL;
    v755[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke;
    v755[3] = &__block_descriptor_tmp_28_41105;
    v755[4] = v15;
    char v30 = v755;
    goto LABEL_47;
  }

  uint64_t v17 = *(void *)(v15 + 256);
  if (v17)
  {
    if ((*(_BYTE *)(v15 + 158) & 1) != 0 || !gLogDatapath) {
      goto LABEL_29;
    }
    v399 = (os_log_s *)__nwlog_obj();
    BOOL v400 = os_log_type_enabled(v399, OS_LOG_TYPE_DEBUG);
    uint64_t v17 = *(void *)(v15 + 256);
    if (v400)
    {
      int v401 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
      if (v17) {
        int v402 = *(_DWORD *)(v17 + 860);
      }
      else {
        int v402 = 0;
      }
      int v584 = *(_DWORD *)(v15 + 424);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_connect";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v783 = (uint64_t)" ";
      *(_WORD *)v784 = 1024;
      *(_DWORD *)&v784[2] = v401;
      *(_WORD *)&v784[6] = 1024;
      *(_DWORD *)&v784[8] = v402;
      *(_WORD *)&v784[12] = 1024;
      *(_DWORD *)&v784[14] = v584;
      _os_log_impl( &dword_181A5C000,  v399,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already associated with connection, forwarding connect",  buf,  0x32u);
      uint64_t v17 = *(void *)(v15 + 256);
    }

    if (v17) {
LABEL_29:
    }
      nw_protocol_connect(*(void *)(v17 + 32), v17);
    else {
      nw_protocol_connect(0LL, 0LL);
    }
    return 1LL;
  }

  uint64_t v80 = *(void *)(v9 + 208);
  v753 = (_OWORD *)(v15 + 64);
  if (v80)
  {
    uint64_t v81 = 0LL;
    a3.n128_u64[0] = 136447234LL;
    do
    {
      uint64_t v82 = v80;
      uint64_t v80 = *(void *)(v80 + 592);
      if ((*(_WORD *)(v82 + 872) & 0x800) == 0)
      {
        if ((*(_BYTE *)(v9 + 158) & 1) != 0 || !*((_BYTE *)v10 + 1537))
        {
          uint64_t v81 = v82;
        }

        else
        {
          __n128 v747 = a3;
          nw_protocol_definition_t v83 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
          {
            int v84 = *(_DWORD *)(v9 + 372);
            *(_DWORD *)buf = v747.n128_u32[0];
            *(void *)&uint8_t buf[4] = "nw_http1_get_next_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v9 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v783 = (uint64_t)" ";
            *(_WORD *)v784 = 1024;
            *(_DWORD *)&v784[2] = v84;
            *(_WORD *)&v784[6] = 2048;
            *(void *)&v784[8] = v82;
            _os_log_impl( &dword_181A5C000,  v83,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> found idle connection connection %p",  buf,  0x30u);
            a3 = v747;
            uint64_t v81 = v82;
            os_log_type_t v10 = &qword_18C45F000;
          }

          else
          {
            uint64_t v81 = v82;
            os_log_type_t v10 = &qword_18C45F000;
            a3 = v747;
          }
        }
      }
    }

    while (v80);
    if (v81)
    {
      if ((*(_BYTE *)(v81 + 158) & 1) == 0)
      {
        if (*((_BYTE *)v10 + 1537))
        {
          v578 = v10;
          unsigned __int32 v749 = a3.n128_u32[0];
          v579 = (os_log_s *)__nwlog_obj();
          BOOL v580 = os_log_type_enabled(v579, OS_LOG_TYPE_DEBUG);
          a3.n128_u32[0] = v749;
          os_log_type_t v10 = v578;
          if (v580)
          {
            uint64_t v581 = *(void *)(v81 + 488);
            int v582 = *(_DWORD *)(*(void *)(v81 + 480) + 372LL);
            int v583 = *(_DWORD *)(v81 + 860);
            if (v581) {
              LODWORD(v581) = *(_DWORD *)(v581 + 424);
            }
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v81 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v783 = (uint64_t)" ";
            *(_WORD *)v784 = 1024;
            *(_DWORD *)&v784[2] = v582;
            *(_WORD *)&v784[6] = 1024;
            *(_DWORD *)&v784[8] = v583;
            *(_WORD *)&v784[12] = 1024;
            *(_DWORD *)&v784[14] = v581;
            *(_WORD *)&v784[18] = 2048;
            *(void *)&v784[20] = v81;
            _os_log_impl( &dword_181A5C000,  v579,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p",  buf,  0x3Cu);
            os_log_type_t v10 = v578;
            a3.n128_u32[0] = v749;
          }
        }
      }

      char v89 = (_WORD *)(v81 + 872);
      if (((*(unsigned __int16 *)(v81 + 872) | (*(unsigned __int8 *)(v81 + 874) << 16)) & 0x80000) == 0)
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v81;
        os_log_type_t v90 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          BOOL v91 = (os_log_s *)__nwlog_obj();
          os_log_type_t v92 = type[0];
          if (!os_log_type_enabled(v91, type[0])) {
            goto LABEL_368;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v81;
          uint64_t v93 = "%{public}s connection %p not in idle list, cannot remove";
        }

        else if ((_BYTE)aBlock)
        {
          uint64_t v168 = (char *)__nw_create_backtrace_string();
          BOOL v91 = (os_log_s *)__nwlog_obj();
          os_log_type_t v92 = type[0];
          BOOL v169 = os_log_type_enabled(v91, type[0]);
          if (v168)
          {
            if (v169)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v81;
              *(_WORD *)&buf[22] = 2082;
              uint64_t v783 = (uint64_t)v168;
              _os_log_impl( &dword_181A5C000,  v91,  v92,  "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v168);
            goto LABEL_368;
          }

          if (!v169)
          {
LABEL_368:
            if (v90) {
              free(v90);
            }
            goto LABEL_438;
          }

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v81;
          uint64_t v93 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
        }

        else
        {
          BOOL v91 = (os_log_s *)__nwlog_obj();
          os_log_type_t v92 = type[0];
          if (!os_log_type_enabled(v91, type[0])) {
            goto LABEL_368;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v81;
          uint64_t v93 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v91, v92, v93, buf, 0x16u);
        goto LABEL_368;
      }

      os_log_type_t v127 = v10;
      uint64_t v128 = *(void *)(v81 + 592);
      uint64_t v129 = *(void **)(v81 + 600);
      if (v128)
      {
        *(void *)(v128 + 600) = v129;
        uint64_t v129 = *(void **)(v81 + 600);
      }

      else
      {
        *(void *)(v9 + 216) = v129;
      }

      *uint64_t v129 = v128;
      *(void *)(v81 + 592) = 0LL;
      *(void *)(v81 + 600) = 0LL;
      int v170 = *(_DWORD *)(v9 + 340);
      *(_DWORD *)(v9 + 340) = v170 - 1;
      if (v170)
      {
LABEL_432:
        unsigned int v289 = (*(unsigned __int16 *)(v81 + 872) | (*(unsigned __int8 *)(v81 + 874) << 16)) & 0xFFF7FFFF;
        _WORD *v89 = *v89;
        *(_BYTE *)(v81 + 874) = BYTE2(v289);
        v290 = v127;
        if ((*(_BYTE *)(v81 + 158) & 1) == 0)
        {
          if (*((_BYTE *)v127 + 1537))
          {
            v585 = (os_log_s *)__nwlog_obj();
            BOOL v586 = os_log_type_enabled(v585, OS_LOG_TYPE_DEBUG);
            v290 = v127;
            if (v586)
            {
              uint64_t v587 = *(void *)(v81 + 488);
              int v588 = *(_DWORD *)(*(void *)(v81 + 480) + 372LL);
              int v589 = *(_DWORD *)(v81 + 860);
              if (v587) {
                LODWORD(v587) = *(_DWORD *)(v587 + 424);
              }
              int v590 = *(_DWORD *)(v9 + 340);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v81 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v783 = (uint64_t)" ";
              *(_WORD *)v784 = 1024;
              *(_DWORD *)&v784[2] = v588;
              *(_WORD *)&v784[6] = 1024;
              *(_DWORD *)&v784[8] = v589;
              *(_WORD *)&v784[12] = 1024;
              *(_DWORD *)&v784[14] = v587;
              *(_WORD *)&v784[18] = 2048;
              *(void *)&v784[20] = v81;
              *(_WORD *)&v784[28] = 1024;
              *(_DWORD *)&v784[30] = v590;
              _os_log_impl( &dword_181A5C000,  v585,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removed idle connection %p, now have %u idle connections",  buf,  0x42u);
              v290 = v127;
            }
          }
        }

        if (*(void *)(v81 + 784))
        {
          if ((*(_BYTE *)(v81 + 158) & 1) == 0)
          {
            if (*((_BYTE *)v290 + 1537))
            {
              v605 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v605, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v606 = *(void *)(v81 + 488);
                int v607 = *(_DWORD *)(*(void *)(v81 + 480) + 372LL);
                int v608 = *(_DWORD *)(v81 + 860);
                if (v606) {
                  LODWORD(v606) = *(_DWORD *)(v606 + 424);
                }
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v81 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v783 = (uint64_t)" ";
                *(_WORD *)v784 = 1024;
                *(_DWORD *)&v784[2] = v607;
                *(_WORD *)&v784[6] = 1024;
                *(_DWORD *)&v784[8] = v608;
                *(_WORD *)&v784[12] = 1024;
                *(_DWORD *)&v784[14] = v606;
                *(_WORD *)&v784[18] = 2048;
                *(void *)&v784[20] = v81;
                _os_log_impl( &dword_181A5C000,  v605,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> deactivating destroy timer for connection %p",  buf,  0x3Cu);
              }
            }
          }

          nw_queue_cancel_source(*(void *)(v81 + 784), v17);
          *(void *)(v81 + 784) = 0LL;
        }

LABEL_466:
          if (!v292)
          {
LABEL_468:
            *(_WORD *)(v15 + 428) |= 0x4000u;
            int v29 = *(void **)(v15 + 352);
            v754[0] = MEMORY[0x1895F87A8];
            v754[1] = 0x40000000LL;
            v754[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_29;
            v754[3] = &__block_descriptor_tmp_38_41107;
            v754[4] = v15;
            char v30 = v754;
LABEL_47:
            nw_http_transaction_metadata_set_event_handler(v29, v30);
            nw_protocol_connected(*(void **)(v15 + 48), v15);
            return 1LL;
          }

LABEL_467:
          free(v292);
          goto LABEL_468;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
        v292 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v576 = (os_log_s *)__nwlog_obj();
          os_log_type_t v577 = type[0];
          if (!os_log_type_enabled(v576, type[0])) {
            goto LABEL_466;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
          v296 = "%{public}s called with null http1_stream->protocol_http1";
        }

        else if ((_BYTE)aBlock)
        {
          v591 = (char *)__nw_create_backtrace_string();
          v576 = (os_log_s *)__nwlog_obj();
          os_log_type_t v577 = type[0];
          BOOL v592 = os_log_type_enabled(v576, type[0]);
          if (v591)
          {
            if (v592)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v591;
              _os_log_impl( &dword_181A5C000,  v576,  v577,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v591);
            goto LABEL_466;
          }

          if (!v592) {
            goto LABEL_466;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
          v296 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
        }

        else
        {
          v576 = (os_log_s *)__nwlog_obj();
          os_log_type_t v577 = type[0];
          if (!os_log_type_enabled(v576, type[0])) {
            goto LABEL_466;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
          v296 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
        }

        v314 = v576;
        os_log_type_t v315 = v577;
        uint32_t v316 = 12;
        goto LABEL_465;
      }

      unsigned __int32 v748 = a3.n128_u32[0];
      __nwlog_obj();
      uint64_t v171 = *(unsigned int *)(v9 + 340);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "http1->idle_connections_count";
      *(_WORD *)&buf[22] = 2048;
      uint64_t v783 = 1LL;
      *(_WORD *)v784 = 2048;
      *(void *)&v784[2] = v171;
      os_log_type_t v172 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(aBlock) = 0;
      if (__nwlog_fault(v172, type, &aBlock))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v173 = (os_log_s *)__nwlog_obj();
          os_log_type_t v174 = type[0];
          if (os_log_type_enabled(v173, type[0]))
          {
            uint64_t v175 = *(unsigned int *)(v9 + 340);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->idle_connections_count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v783 = 1LL;
            *(_WORD *)v784 = 2048;
            *(void *)&v784[2] = v175;
            v176 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_428:
            _os_log_impl(&dword_181A5C000, v173, v174, v176, buf, 0x2Au);
          }
        }

        else if ((_BYTE)aBlock)
        {
          uint64_t v248 = (char *)__nw_create_backtrace_string();
          v173 = (os_log_s *)__nwlog_obj();
          os_log_type_t v174 = type[0];
          BOOL v249 = os_log_type_enabled(v173, type[0]);
          if (v248)
          {
            if (v249)
            {
              uint64_t v250 = *(unsigned int *)(v9 + 340);
              *(_DWORD *)buf = v748;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v783 = 1LL;
              *(_WORD *)v784 = 2048;
              *(void *)&v784[2] = v250;
              *(_WORD *)&v784[10] = 2082;
              *(void *)&v784[12] = v248;
              _os_log_impl( &dword_181A5C000,  v173,  v174,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(v248);
            goto LABEL_429;
          }

          if (v249)
          {
            uint64_t v288 = *(unsigned int *)(v9 + 340);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->idle_connections_count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v783 = 1LL;
            *(_WORD *)v784 = 2048;
            *(void *)&v784[2] = v288;
            v176 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_428;
          }
        }

        else
        {
          v173 = (os_log_s *)__nwlog_obj();
          os_log_type_t v174 = type[0];
          if (os_log_type_enabled(v173, type[0]))
          {
            uint64_t v278 = *(unsigned int *)(v9 + 340);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->idle_connections_count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v783 = 1LL;
            *(_WORD *)v784 = 2048;
            *(void *)&v784[2] = v278;
            v176 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_428;
          }
        }
      }

        if (v186) {
          free(v186);
        }
        int v25 = v940;
        *(_DWORD *)(v940 + 340) = 0;
        uint64_t v107 = v183;
        goto LABEL_470;
      }
    }

    if ((*(_BYTE *)(v25 + 158) & 1) == 0)
    {
      if (*((_BYTE *)v107 + 1537))
      {
        uint64_t v621 = v108;
        v622 = v107;
        v623 = (os_log_s *)__nwlog_obj();
        v624 = os_log_type_enabled(v623, OS_LOG_TYPE_DEBUG);
        uint64_t v107 = v622;
        uint64_t v108 = v621;
        int v25 = v940;
        if (v624)
        {
          v625 = *(_DWORD *)(v940 + 372);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_get_next_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v940 + 74;
          *(_WORD *)&buf[22] = 2080;
          v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v625;
          _os_log_impl( &dword_181A5C000,  v623,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> no idle connections",  buf,  0x26u);
          uint64_t v107 = v622;
          uint64_t v108 = v621;
          int v25 = v940;
        }
      }
    }

    if (*(void *)(v106 + 256))
    {
      if ((*(_BYTE *)(v106 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v121 = gLogObj;
        v122 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
        int v25 = v940;
        if (v122)
        {
          uint64_t v123 = *(void *)(v106 + 256);
          __int16 v124 = *(_DWORD *)(*(void *)(v106 + 248) + 372LL);
          if (v123) {
            LODWORD(v123) = *(_DWORD *)(v123 + 860);
          }
          os_log_type_t v125 = *(_DWORD *)(v106 + 424);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v106 + 74;
          *(_WORD *)&buf[22] = 2080;
          v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v124;
          *(_WORD *)&v962[6] = 1024;
          *(_DWORD *)&v962[8] = v123;
          *(_WORD *)&v962[12] = 1024;
          *(_DWORD *)&v962[14] = v125;
          uint64_t v126 = "%{public}s %{public}s%s<i%u:c%u:s%u> stream already has current connection, ignoring";
          os_log_type_t v127 = (os_log_s *)v121;
          uint64_t v128 = 50;
LABEL_249:
          _os_log_impl(&dword_181A5C000, v127, OS_LOG_TYPE_DEBUG, v126, buf, v128);
          int v25 = v940;
          goto LABEL_250;
        }
      }

      goto LABEL_250;
    }

    v938 = v108;
    if ((*(_WORD *)(v106 + 428) & 8) == 0)
    {
      if (*(_DWORD *)(v25 + 336) + *(_DWORD *)(v25 + 352) >= (*(_DWORD *)(v25 + 368)
                                                                           + *(_DWORD *)(v25 + 364)))
      {
        if ((*(_BYTE *)(v106 + 158) & 1) == 0)
        {
          os_log_type_t v195 = (os_log_s *)__nwlog_obj();
          uint64_t v196 = os_log_type_enabled(v195, OS_LOG_TYPE_DEBUG);
          int v25 = v940;
          if (v196)
          {
            os_log_type_t v197 = *(void *)(v106 + 256);
            __int128 v198 = *(_DWORD *)(*(void *)(v106 + 248) + 372LL);
            if (v197) {
              LODWORD(v197) = *(_DWORD *)(v197 + 860);
            }
            __int128 v199 = *(_DWORD *)(v106 + 424);
            __int128 v200 = *(_DWORD *)(v940 + 364);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v106 + 74;
            *(_WORD *)&buf[22] = 2080;
            v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v198;
            *(_WORD *)&v962[6] = 1024;
            *(_DWORD *)&v962[8] = v197;
            *(_WORD *)&v962[12] = 1024;
            *(_DWORD *)&v962[14] = v199;
            *(_WORD *)&v962[18] = 1024;
            *(_DWORD *)&v962[20] = v200;
            uint64_t v126 = "%{public}s %{public}s%s<i%u:c%u:s%u> already at max connection width %u, cannot create new connection";
            os_log_type_t v127 = v195;
            uint64_t v128 = 56;
            goto LABEL_249;
          }
        }

LABEL_1299:
          if (v624) {
            free(v624);
          }
LABEL_208:
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000LL;
          uint64_t v783 = (uint64_t)v135;
          uint64_t aBlock = v136;
          uint64_t v760 = 0x40000000LL;
          v761 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
          v762 = &unk_189BBD4F0;
          v763 = (uint64_t *)buf;
          *((void *)v135 + 76) = _Block_copy(&aBlock);
          _Block_object_dispose(buf, 8);
          if ((*((_BYTE *)v135 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v636 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v636, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v637 = *((void *)v135 + 61);
                int v638 = *(_DWORD *)(*((void *)v135 + 60) + 372LL);
                int v639 = *((_DWORD *)v135 + 215);
                if (v637) {
                  LODWORD(v637) = *(_DWORD *)(v637 + 424);
                }
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = (char *)v135 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v783 = (uint64_t)" ";
                *(_WORD *)v784 = 1024;
                *(_DWORD *)&v784[2] = v638;
                *(_WORD *)&v784[6] = 1024;
                *(_DWORD *)&v784[8] = v639;
                *(_WORD *)&v784[12] = 1024;
                *(_DWORD *)&v784[14] = v637;
                *(_WORD *)&v784[18] = 2048;
                *(void *)&v784[20] = v135;
                _os_log_impl( &dword_181A5C000,  v636,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created %p",  buf,  0x3Cu);
              }
            }
          }

          BOOL v145 = (nw_path_t *)(v135 + 32);
          nw_protocol_replace_input_handler((uint64_t)v751, v15, (uint64_t)v135);
          _OWORD *v135 = *v751;
          os_log_type_t v146 = (void *)*((void *)v135 + 92);
          if (v146)
          {
            if (!*((void *)v135 + 66))
            {
              v147 = (void **)(v135 + 35);
              id v148 = nw_parameters_copy_context(*((void **)v135 + 92));
              *(void *)buf = nw_path_copy_flow_registration(v148, (uint64_t)v135);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 35), buf);
              BOOL v149 = (void *)*((void *)v135 + 70);
              if (v149)
              {
                id v150 = nw_path_flow_registration_copy_endpoint(v149);
                id v151 = nw_path_flow_registration_copy_parameters(*v147);
                *(void *)buf = nw_endpoint_copy_association_with_evaluator(v150, v151, 0LL);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 33), buf);
                if (*((void *)v135 + 66))
                {
                  *(void *)buf = nw_protocol_instance_stub_create((nw_protocol *)v135);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 34), buf);
                  nw_association_register_internal( *((void **)v135 + 66),  v146,  *((void **)v135 + 68),  0,  0,  &__block_literal_global_65);
                  id v152 = nw_association_copy_current_path(*((void **)v135 + 66), v151);
                  if (v152)
                  {
                    os_log_type_t v153 = v152;
                    nw_path_t v154 = (nw_path_t)nw_path_copy_for_flow_registration(v152, *v147);
                    if (v154)
                    {
                      os_log_type_t v155 = v154;
                      if (*v145 != v154)
                      {
                        *(void *)buf = os_retain(v154);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 32), buf);
                      }

                      if (nw_path_has_flows(v155)) {
                        __int16 v156 = 4096;
                      }
                      else {
                        __int16 v156 = 0;
                      }
                      int v157 = *((_WORD *)v135 + 436) & 0xEFFF | (*((unsigned __int8 *)v135 + 874) << 16);
                      *((_WORD *)v135 + 436) = *((_WORD *)v135 + 436) & 0xEFFF | v156;
                      *((_BYTE *)v135 + 874) = BYTE2(v157);
                      id v158 = nw_parameters_copy_effective_proxy_config(v146);
                      if (v158)
                      {
                        os_log_type_t v159 = v158;
                        if (nw_path_has_proxy_config(v153, v158))
                        {
                          *(void *)buf = os_retain(v159);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 36), buf);
                        }

                        os_release(v159);
                      }

                      os_release(v155);
                    }

                    os_release(v153);
                  }
                }

                if (v151) {
                  os_release(v151);
                }
                if (v150) {
                  os_release(v150);
                }
              }

              if (v148) {
                os_release(v148);
              }
            }

            goto LABEL_233;
          }

          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
          v628 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v628, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v629 = (os_log_s *)__nwlog_obj();
              os_log_type_t v630 = type[0];
              if (!os_log_type_enabled(v629, type[0])) {
                goto LABEL_1304;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v631 = "%{public}s called with null parameters";
              goto LABEL_1303;
            }

            if (!(_BYTE)aBlock)
            {
              v629 = (os_log_s *)__nwlog_obj();
              os_log_type_t v630 = type[0];
              if (!os_log_type_enabled(v629, type[0])) {
                goto LABEL_1304;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v631 = "%{public}s called with null parameters, backtrace limit exceeded";
              goto LABEL_1303;
            }

            v696 = (char *)__nw_create_backtrace_string();
            v629 = (os_log_s *)__nwlog_obj();
            os_log_type_t v630 = type[0];
            BOOL v697 = os_log_type_enabled(v629, type[0]);
            if (v696)
            {
              if (v697)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v696;
                _os_log_impl( &dword_181A5C000,  v629,  v630,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v696);
              goto LABEL_1304;
            }

            if (v697)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v631 = "%{public}s called with null parameters, no backtrace";
LABEL_1303:
              _os_log_impl(&dword_181A5C000, v629, v630, v631, buf, 0xCu);
            }
          }

LABEL_1304:
          if (v628) {
            free(v628);
          }
LABEL_233:
          uint64_t v160 = *(unsigned int *)(v9 + 336) + 1LL;
          uint64_t v161 = v160 << 31 >> 31;
          *(_DWORD *)(v9 + 336) = v160;
          if (v161 == v160 && (v161 & 0x8000000000000000LL) == 0)
          {
LABEL_509:
            uint64_t v333 = *(unsigned int *)(v9 + 360) + 1LL;
            uint64_t v334 = v333 << 31 >> 31;
            *(_DWORD *)(v9 + 360) = v333;
            if (v334 == v333 && (v334 & 0x8000000000000000LL) == 0) {
              goto LABEL_528;
            }
            __nwlog_obj();
            uint64_t v335 = *(unsigned int *)(v9 + 360);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->next_connection_log_num";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v783 = 1LL;
            *(_WORD *)v784 = 2048;
            *(void *)&v784[2] = v335;
            v336 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v336, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v337 = (os_log_s *)__nwlog_obj();
                os_log_type_t v338 = type[0];
                if (os_log_type_enabled(v337, type[0]))
                {
                  uint64_t v339 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v339;
                  v340 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_524:
                  _os_log_impl(&dword_181A5C000, v337, v338, v340, buf, 0x2Au);
                }
              }

              else if ((_BYTE)aBlock)
              {
                v341 = (char *)__nw_create_backtrace_string();
                v337 = (os_log_s *)__nwlog_obj();
                os_log_type_t v338 = type[0];
                BOOL v342 = os_log_type_enabled(v337, type[0]);
                if (v341)
                {
                  if (v342)
                  {
                    uint64_t v343 = *(unsigned int *)(v9 + 360);
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v783 = 1LL;
                    *(_WORD *)v784 = 2048;
                    *(void *)&v784[2] = v343;
                    *(_WORD *)&v784[10] = 2082;
                    *(void *)&v784[12] = v341;
                    _os_log_impl( &dword_181A5C000,  v337,  v338,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                  }

                  free(v341);
                  goto LABEL_525;
                }

                if (v342)
                {
                  uint64_t v345 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v345;
                  v340 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_524;
                }
              }

              else
              {
                v337 = (os_log_s *)__nwlog_obj();
                os_log_type_t v338 = type[0];
                if (os_log_type_enabled(v337, type[0]))
                {
                  uint64_t v344 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v344;
                  v340 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_524;
                }
              }
            }

LABEL_525:
            if (v336) {
              free(v336);
            }
            LODWORD(v333) = -1;
            *(_DWORD *)(v9 + 360) = -1;
LABEL_528:
            *((_DWORD *)v135 + 215) = v333;
            if ((*((_BYTE *)v135 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v640 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v640, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v641 = *((void *)v135 + 61);
                  int v642 = *(_DWORD *)(*((void *)v135 + 60) + 372LL);
                  int v643 = *((_DWORD *)v135 + 215);
                  if (v641) {
                    LODWORD(v641) = *(_DWORD *)(v641 + 424);
                  }
                  int v644 = *(_DWORD *)(v9 + 336);
                  *(_DWORD *)buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v135 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v783 = (uint64_t)" ";
                  *(_WORD *)v784 = 1024;
                  *(_DWORD *)&v784[2] = v642;
                  *(_WORD *)&v784[6] = 1024;
                  *(_DWORD *)&v784[8] = v643;
                  *(_WORD *)&v784[12] = 1024;
                  *(_DWORD *)&v784[14] = v641;
                  *(_WORD *)&v784[18] = 2048;
                  *(void *)&v784[20] = v135;
                  *(_WORD *)&v784[28] = 1024;
                  *(_DWORD *)&v784[30] = v644;
                  _os_log_impl( &dword_181A5C000,  v640,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections",  buf,  0x42u);
                }
              }
            }

            if (*(void *)(v15 + 248))
            {
              if (*((void *)v135 + 61))
              {
                __nwlog_obj();
                uint64_t v346 = *((void *)v135 + 61);
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v135;
                *(_WORD *)&buf[22] = 2048;
                uint64_t v783 = v346;
                v347 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v348 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v349 = type[0];
                  if (!os_log_type_enabled(v348, type[0])) {
                    goto LABEL_556;
                  }
                  uint64_t v350 = *((void *)v135 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v135;
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v783 = v350;
                  v351 = "%{public}s Connection %p already has a stream (%p)";
                }

                else if ((_BYTE)aBlock)
                {
                  v364 = (char *)__nw_create_backtrace_string();
                  v348 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v349 = type[0];
                  BOOL v365 = os_log_type_enabled(v348, type[0]);
                  if (v364)
                  {
                    if (v365)
                    {
                      uint64_t v366 = *((void *)v135 + 61);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v135;
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v783 = v366;
                      *(_WORD *)v784 = 2082;
                      *(void *)&v784[2] = v364;
                      _os_log_impl( &dword_181A5C000,  v348,  v349,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                    }

                    free(v364);
                    goto LABEL_556;
                  }

                  if (!v365)
                  {
LABEL_556:
                    if (v347) {
                      free(v347);
                    }
                    goto LABEL_558;
                  }

                  uint64_t v368 = *((void *)v135 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v135;
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v783 = v368;
                  v351 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                }

                else
                {
                  v348 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v349 = type[0];
                  if (!os_log_type_enabled(v348, type[0])) {
                    goto LABEL_556;
                  }
                  uint64_t v367 = *((void *)v135 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v135;
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v783 = v367;
                  v351 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                }

                _os_log_impl(&dword_181A5C000, v348, v349, v351, buf, 0x20u);
                goto LABEL_556;
              }

              *(void *)(v15 + 256) = v135;
              *((void *)v135 + 61) = v15;
              nw_protocol_set_output_handler(v15, *((void *)v135 + 4));
              nw_protocol_set_input_handler((uint64_t)v135, *(void *)(v15 + 48));
              *(_OWORD *)uint64_t v15 = *v135;
              __int128 v352 = *(_OWORD *)(v15 + 144);
              __int128 v354 = *(_OWORD *)(v15 + 96);
              __int128 v353 = *(_OWORD *)(v15 + 112);
              v135[8] = *(_OWORD *)(v15 + 128);
              v135[9] = v352;
              v135[6] = v354;
              v135[7] = v353;
              __int128 v355 = *(_OWORD *)(v15 + 80);
              v135[4] = *v753;
              v135[5] = v355;
              nw_http_transaction_metadata_set_connection_metadata(*(void **)(v15 + 352), *((void **)v135 + 96));
              *((_WORD *)v135 + 436) &= 0xFFD7u;
              *((_DWORD *)v135 + 216) = 1;
              if ((*((_BYTE *)v135 + 158) & 1) == 0)
              {
                v356 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v356, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v357 = *((void *)v135 + 61);
                  int v358 = *(_DWORD *)(*((void *)v135 + 60) + 372LL);
                  int v359 = *((_DWORD *)v135 + 215);
                  if (v357) {
                    LODWORD(v357) = *(_DWORD *)(v357 + 424);
                  }
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v135 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v783 = (uint64_t)" ";
                  *(_WORD *)v784 = 1024;
                  *(_DWORD *)&v784[2] = v358;
                  *(_WORD *)&v784[6] = 1024;
                  *(_DWORD *)&v784[8] = v359;
                  *(_WORD *)&v784[12] = 1024;
                  *(_DWORD *)&v784[14] = v357;
                  _os_log_impl( &dword_181A5C000,  v356,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                }
              }

              if ((*(_BYTE *)(v15 + 158) & 1) == 0)
              {
                v360 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v360, OS_LOG_TYPE_INFO))
                {
                  uint64_t v361 = *(void *)(v15 + 256);
                  int v362 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
                  if (v361) {
                    LODWORD(v361) = *(_DWORD *)(v361 + 860);
                  }
                  int v363 = *(_DWORD *)(v15 + 424);
                  *(_DWORD *)buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v15 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v783 = (uint64_t)" ";
                  *(_WORD *)v784 = 1024;
                  *(_DWORD *)&v784[2] = v362;
                  *(_WORD *)&v784[6] = 1024;
                  *(_DWORD *)&v784[8] = v361;
                  *(_WORD *)&v784[12] = 1024;
                  *(_DWORD *)&v784[14] = v363;
                  *(_WORD *)&v784[18] = 2048;
                  *(void *)&v784[20] = v15;
                  *(_WORD *)&v784[28] = 2048;
                  *(void *)&v784[30] = v135;
                  _os_log_impl( &dword_181A5C000,  v360,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                }
              }

                    goto LABEL_526;
                  }

                  __nwlog_obj();
                  int v209 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v210;
                    _os_log_impl( &dword_181A5C000,  v209,  OS_LOG_TYPE_ERROR,  "%{public}s connect failed %{darwin.errno}d",  buf,  0x12u);
                  }
                }

                goto LABEL_528;
              }

              if (address[1] == 30) {
                goto LABEL_440;
              }
              if (address[1] != 2) {
                goto LABEL_441;
              }
LABEL_439:
              *(_DWORD *)&address[4] = 0;
              goto LABEL_441;
            }

            if (v188)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v178;
              _os_log_impl( &dword_181A5C000,  v176,  v266,  "%{public}s IP_RECVTOS failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
            }
          }

          else
          {
            __nwlog_obj();
            v176 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v203 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v178;
              _os_log_impl( &dword_181A5C000,  v176,  v203,  "%{public}s IP_RECVTOS failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
            }
          }
        }

        else
        {
          if (v167 != 30 || (setsockopt(v97, 41, 35, type, 4u) & 0x80000000) == 0) {
            goto LABEL_424;
          }
          v173 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          __nwlog_obj();
          os_log_type_t v174 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v173;
          uint64_t v175 = (char *)_os_log_send_and_compose_impl();

          v283.sa_len = 16;
          LOBYTE(v286) = 0;
          if (v283.sa_len == 17)
          {
            __nwlog_obj();
            v176 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v177 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v173;
              _os_log_impl( &dword_181A5C000,  v176,  v177,  "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d",  buf,  0x12u);
            }
          }

          else if ((_BYTE)v286)
          {
            BOOL v185 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v176 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v265 = v283.sa_len;
            unsigned int v186 = os_log_type_enabled(v176, (os_log_type_t)v283.sa_len);
            if (v185)
            {
              if (v186)
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v173;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v185;
                _os_log_impl( &dword_181A5C000,  v176,  v265,  "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v185);
              if (v175) {
                goto LABEL_423;
              }
              goto LABEL_424;
            }

            if (v186)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v173;
              _os_log_impl( &dword_181A5C000,  v176,  v265,  "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
            }
          }

          else
          {
            __nwlog_obj();
            v176 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v202 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v173;
              _os_log_impl( &dword_181A5C000,  v176,  v202,  "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
            }
          }
        }

        goto LABEL_422;
      }

      os_log_type_t v125 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      __nwlog_obj();
      uint64_t v126 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
      *(_WORD *)&buf[12] = 1024;
      uint64_t v270 = v125;
      *(_DWORD *)&buf[14] = v125;
      os_log_type_t v127 = (char *)_os_log_send_and_compose_impl();

      v283.sa_len = 16;
      LOBYTE(v286) = 0;
      if (__nwlog_fault(v127, &v283, &v286))
      {
        if (v283.sa_len == 17)
        {
          __nwlog_obj();
          uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v129 = v283.sa_len;
          if (os_log_type_enabled(v128, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v270;
            _os_log_impl( &dword_181A5C000,  v128,  v129,  "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d",  buf,  0x12u);
          }
        }

        else if ((_BYTE)v286)
        {
          int v157 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v262 = v283.sa_len;
          id v158 = os_log_type_enabled(v128, (os_log_type_t)v283.sa_len);
          if (v157)
          {
            if (v158)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v270;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v157;
              _os_log_impl( &dword_181A5C000,  v128,  v262,  "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v157);
            goto LABEL_309;
          }

          if (v158)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v270;
            _os_log_impl( &dword_181A5C000,  v128,  v262,  "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
          }
        }

        else
        {
          __nwlog_obj();
          uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v162 = v283.sa_len;
          if (os_log_type_enabled(v128, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v270;
            _os_log_impl( &dword_181A5C000,  v128,  v162,  "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
          }
        }
      }

      if (v229) {
        free(v229);
      }
      goto LABEL_527;
    }

    unsigned int v181 = (nw_endpoint *)nw_agent_client_copy_endpoint(v296);
    os_log_type_t v182 = v181;
    if (!v181) {
      goto LABEL_586;
    }
    os_log_type_t v183 = nw_endpoint_get_type(v181);
    if (!LOBYTE(v298[178]._os_unfair_lock_opaque)) {
      goto LABEL_586;
    }
    uint64_t v184 = 0LL;
    BOOL v185 = 88LL;
    while (v298[v185]._os_unfair_lock_opaque != v183)
    {
      ++v184;
      v185 += 6LL;
      if (LOBYTE(v298[178]._os_unfair_lock_opaque) == v184) {
        goto LABEL_586;
      }
    }

    v224 = *v114;
    if (v224 != 14)
    {
LABEL_564:
      if (v224 == 15)
      {
        *(void *)out = 0LL;
        *(void *)&out[8] = out;
        *(void *)&out[16] = 0x3032000000LL;
        *(void *)&out[24] = __Block_byref_object_copy__79337;
        *(void *)&out[32] = __Block_byref_object_dispose__79338;
        *(void *)&out[40] = 0LL;
        v345[0] = MEMORY[0x1895F87A8];
        v345[1] = 3221225472LL;
        uint64_t v346 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_169;
        v347 = &unk_189BC77A8;
        os_log_type_t v349 = out;
        v348 = v298;
        uint64_t v350 = v184;
        v279 = v348;
        BOOL v280 = v345;
        os_unfair_lock_lock(lock);
        v346((uint64_t)v280);
        os_unfair_lock_unlock(lock);

        v281 = *(void *)(*(void *)&out[8] + 40LL);
        if (v281)
        {
          (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v281 + 16))(v281, v296);
LABEL_585:

          _Block_object_dispose(out, 8);
          goto LABEL_586;
        }

        __nwlog_obj();
        BOOL v282 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v413 = 136446210;
        uint64_t v414 = "nw_agent_read_message_on_queue";
        v283 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v405 = 0;
        if (__nwlog_fault(v283, &type, &v405))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            BOOL v284 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v285 = type;
            if (os_log_type_enabled(v284, type))
            {
              *(_DWORD *)v413 = 136446210;
              uint64_t v414 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_181A5C000, v284, v285, "%{public}s No handler for CLIENT_UNASSERT", v413, 0xCu);
            }
          }

          else if (v405)
          {
            int v286 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v284 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            int v287 = type;
            uint64_t v288 = os_log_type_enabled(v284, type);
            if (v286)
            {
              if (v288)
              {
                *(_DWORD *)v413 = 136446466;
                uint64_t v414 = "nw_agent_read_message_on_queue";
                char v415 = 2082;
                char v416 = v286;
                _os_log_impl( &dword_181A5C000,  v284,  v287,  "%{public}s No handler for CLIENT_UNASSERT, dumping backtrace:%{public}s",  v413,  0x16u);
              }

              free(v286);
              goto LABEL_583;
            }

            if (v288)
            {
              *(_DWORD *)v413 = 136446210;
              uint64_t v414 = "nw_agent_read_message_on_queue";
              _os_log_impl( &dword_181A5C000,  v284,  v287,  "%{public}s No handler for CLIENT_UNASSERT, no backtrace",  v413,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            BOOL v284 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unsigned int v289 = type;
            if (os_log_type_enabled(v284, type))
            {
              *(_DWORD *)v413 = 136446210;
              uint64_t v414 = "nw_agent_read_message_on_queue";
              _os_log_impl( &dword_181A5C000,  v284,  v289,  "%{public}s No handler for CLIENT_UNASSERT, backtrace limit exceeded",  v413,  0xCu);
            }
          }
        }

LABEL_558:
              if ((*(_BYTE *)(v15 + 158) & 1) == 0)
              {
                v369 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v369, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v370 = *(void *)(v15 + 256);
                  int v371 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
                  if (v370) {
                    LODWORD(v370) = *(_DWORD *)(v370 + 860);
                  }
                  int v372 = *(_DWORD *)(v15 + 424);
                  *(_DWORD *)buf = 136448258;
                  *(void *)&uint8_t buf[4] = "nw_http1_start_new_connection_for_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v15 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v783 = (uint64_t)" ";
                  *(_WORD *)v784 = 1024;
                  *(_DWORD *)&v784[2] = v371;
                  *(_WORD *)&v784[6] = 1024;
                  *(_DWORD *)&v784[8] = v370;
                  *(_WORD *)&v784[12] = 1024;
                  *(_DWORD *)&v784[14] = v372;
                  *(_WORD *)&v784[18] = 2048;
                  *(void *)&v784[20] = v135;
                  *(_WORD *)&v784[28] = 1024;
                  *(_DWORD *)&v784[30] = v372;
                  *(_WORD *)&v784[34] = 2048;
                  *(void *)&v784[36] = v15;
                  _os_log_impl( &dword_181A5C000,  v369,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)",  buf,  0x4Cu);
                }
              }

              nw_http_transaction_metadata_set_first_on_connection(*(void **)(v15 + 352));
              uint64_t v373 = nw_protocol_copy_info((uint64_t)v751, 255);
              v374 = (void *)v373;
              if (v373
                && (uint64_t v375 = *(void *)(v373 + 24), *(void *)(v373 + 16) != v375)
                && (v376 = *(void **)(v375 - 8)) != 0LL)
              {
                v377 = (nw_protocol_metadata *)os_retain(v376);
                v378 = v377;
                if (v377 && nw_protocol_metadata_is_tls(v377))
                {
                  v378 = v378;
                  nw_http_connection_metadata_set_sec_metadata(*((void **)v135 + 96), v378);
                  os_release(v378);
                  nw_protocol_connect((uint64_t)v751, (uint64_t)v135);
                  goto LABEL_572;
                }
              }

              else
              {
                v378 = 0LL;
              }

              if (v135)
              {
                nw_protocol_connect((uint64_t)v751, (uint64_t)v135);
                if (!v378) {
                  goto LABEL_573;
                }
                goto LABEL_572;
              }

              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
              v609 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v609, type, &aBlock))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v610 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v611 = type[0];
                  if (!os_log_type_enabled(v610, type[0])) {
                    goto LABEL_1250;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                  v612 = "%{public}s called with null connection";
LABEL_1249:
                  _os_log_impl(&dword_181A5C000, v610, v611, v612, buf, 0xCu);
                  goto LABEL_1250;
                }

                if (!(_BYTE)aBlock)
                {
                  v610 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v611 = type[0];
                  if (!os_log_type_enabled(v610, type[0])) {
                    goto LABEL_1250;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                  v612 = "%{public}s called with null connection, backtrace limit exceeded";
                  goto LABEL_1249;
                }

                v654 = (char *)__nw_create_backtrace_string();
                v610 = (os_log_s *)__nwlog_obj();
                os_log_type_t v611 = type[0];
                BOOL v655 = os_log_type_enabled(v610, type[0]);
                if (!v654)
                {
                  if (!v655) {
                    goto LABEL_1250;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                  v612 = "%{public}s called with null connection, no backtrace";
                  goto LABEL_1249;
                }

                if (v655)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v654;
                  _os_log_impl( &dword_181A5C000,  v610,  v611,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v654);
              }

                free(v267);
                goto LABEL_559;
              }

              if (v329)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
                uint64_t v270 = "%{public}s called with null parameters, no backtrace";
LABEL_556:
                _os_log_impl(&dword_181A5C000, v268, v269, v270, buf, 0xCu);
              }
            }
          }

          else
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
            v267 = (void *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v378 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              BOOL v268 = (os_log_s *)__nwlog_obj();
              int v269 = type;
              if (!os_log_type_enabled(v268, type)) {
                goto LABEL_557;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
              uint64_t v270 = "%{public}s called with null endpoint";
              goto LABEL_556;
            }

            if (!v378)
            {
              BOOL v268 = (os_log_s *)__nwlog_obj();
              int v269 = type;
              if (!os_log_type_enabled(v268, type)) {
                goto LABEL_557;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
              uint64_t v270 = "%{public}s called with null endpoint, backtrace limit exceeded";
              goto LABEL_556;
            }

            uint64_t v326 = (char *)__nw_create_backtrace_string();
            BOOL v268 = (os_log_s *)__nwlog_obj();
            int v269 = type;
            v327 = os_log_type_enabled(v268, type);
            if (!v326)
            {
              if (!v327) {
                goto LABEL_557;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
              uint64_t v270 = "%{public}s called with null endpoint, no backtrace";
              goto LABEL_556;
            }

            if (v327)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v326;
              _os_log_impl( &dword_181A5C000,  v268,  v269,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v326);
          }

      if (v162) {
        free(v162);
      }
      int v26 = 0LL;
      int v25 = v200;
      goto LABEL_64;
    }

    char v30 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
LABEL_515:
    *(_DWORD *)buf = 136446722;
    int v204 = "nw_http_copy_metadata_from_binary_message";
    int v205 = 2048;
    os_log_type_t v206 = (const char *)v27;
    uint64_t v207 = 2048;
    int v208 = 0xFFFFLL;
    uint64_t v19 = "%{public}s _output %llu > _max %llu";
    goto LABEL_172;
  }

  if (a2 == v8)
  {
LABEL_14:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v18 = (os_log_s *)gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)buf = 136446210;
    int v204 = "nw_http_copy_metadata_from_binary_message";
    uint64_t v19 = "%{public}s Failed to decode integer";
    goto LABEL_25;
  }

  uint64_t v24 = *(unsigned __int8 *)v13;
  if (v24 > 0x3F)
  {
    if (v24 >> 6 == 2)
    {
      if (v14 < 4) {
        goto LABEL_14;
      }
      uint64_t v24 = bswap32(*v13 & 0xFFFFFF7F);
      BOOL v31 = 4LL;
    }

    else if (v24 >> 6 == 1)
    {
      if (v14 < 2) {
        goto LABEL_14;
      }
      uint64_t v24 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
      BOOL v31 = 2LL;
    }

    else
    {
      if (v14 < 8) {
        goto LABEL_14;
      }
      uint64_t v24 = bswap64(*(void *)v13 & 0xFFFFFFFFFFFFFF3FLL);
      BOOL v31 = 8LL;
    }

    if (v24 >= 0x3E9)
    {
      char v30 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v204 = "nw_http_copy_metadata_from_binary_message";
        int v205 = 2048;
        os_log_type_t v206 = (const char *)v24;
        uint64_t v207 = 2048;
        int v208 = 1000LL;
        uint64_t v19 = "%{public}s _output %llu > _max %llu";
        goto LABEL_172;
      }

      goto LABEL_27;
    }

    int v25 = (char *)v13 + v31;
    int v26 = v14 - v31;
  }

  else
  {
    int v25 = (char *)v13 + 1;
    int v26 = v14 - 1;
  }

  if (v24 - 601 <= 0xFFFFFFFFFFFFFE6ELL)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v39 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v204 = "nw_http_copy_metadata_from_binary_message";
      int v205 = 2048;
      os_log_type_t v206 = (const char *)v24;
      uint64_t v19 = "%{public}s Informational statuses not supported: %llu";
      int v22 = (os_log_s *)v39;
      BOOL v23 = 22;
      goto LABEL_26;
    }

    goto LABEL_27;
  }

  snprintf((char *)buf, 4uLL, "%llu", v24);
  nw_http_parsed_fields_add(v17, (unint64_t)":status", -1LL, (const char *)buf, -1LL, 1);
LABEL_64:
  BOOL v40 = v7 & 2;
  if (a4) {
    *a4 = v40 == 2;
  }
  if (v40 != 2)
  {
    if (v26)
    {
      int v54 = *(unsigned __int8 *)v25;
      if (v54 <= 0x3F)
      {
        int v55 = 1LL;
LABEL_102:
        os_log_type_t v56 = &v25[v55];
LABEL_103:
        uint64_t v57 = v26 - v55;
        if (v54 > v26 - v55)
        {
          char v30 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            int v204 = "nw_http_copy_metadata_from_binary_message";
            int v205 = 2048;
            os_log_type_t v206 = (const char *)v54;
            uint64_t v207 = 2048;
            int v208 = v57;
            uint64_t v19 = "%{public}s _length %llu > remaining %zu";
            goto LABEL_172;
          }

          goto LABEL_27;
        }

        char v60 = &v56[v54];
        while (1)
        {
          if (v56 >= v60)
          {
            if (v56)
            {
              if (!v57) {
                goto LABEL_361;
              }
              int v54 = *(unsigned __int8 *)v56;
              if (v54 <= 0x3F)
              {
                BOOL v85 = 1LL;
                goto LABEL_231;
              }

              if (v54 >> 6 == 2)
              {
                if (v57 < 4) {
                  goto LABEL_361;
                }
                int v54 = bswap32(*(_DWORD *)v56 & 0xFFFFFF7F);
                BOOL v85 = 4LL;
              }

              else
              {
                if (v54 >> 6 == 1)
                {
                  if (v57 >= 2)
                  {
                    int v54 = bswap32(*(_WORD *)v56 & 0xFFBF) >> 16;
                    BOOL v85 = 2LL;
                    goto LABEL_231;
                  }

LABEL_1250:
              if (v609) {
                free(v609);
              }
              nw_protocol_connect((uint64_t)v751, 0LL);
              if (!v378)
              {
LABEL_573:
                if (v374) {
                  os_release(v374);
                }
                nw_protocol_set_output_handler(v9, 0LL);
                *(_WORD *)(v15 + 428) &= ~8u;
                int v379 = *(_DWORD *)(v9 + 352);
                *(_DWORD *)(v9 + 352) = v379 - 1;
                if (v379) {
                  return 1LL;
                }
                __nwlog_obj();
                uint64_t v380 = *(unsigned int *)(v9 + 352);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_output_handler_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v783 = 1LL;
                *(_WORD *)v784 = 2048;
                *(void *)&v784[2] = v380;
                id v228 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v228, type, &aBlock))
                {
                  if (type[0] != OS_LOG_TYPE_FAULT)
                  {
                    if ((_BYTE)aBlock)
                    {
                      v381 = (char *)__nw_create_backtrace_string();
                      v229 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v230 = type[0];
                      BOOL v234 = os_log_type_enabled(v229, type[0]);
                      if (v381)
                      {
                        if (v234)
                        {
                          uint64_t v382 = *(unsigned int *)(v9 + 352);
                          *(_DWORD *)buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v783 = 1LL;
                          *(_WORD *)v784 = 2048;
                          *(void *)&v784[2] = v382;
                          *(_WORD *)&v784[10] = 2082;
                          *(void *)&v784[12] = v381;
                          _os_log_impl( &dword_181A5C000,  v229,  v230,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                        }

                        free(v381);
                        if (!v228) {
                          goto LABEL_591;
                        }
                        goto LABEL_590;
                      }

                      goto LABEL_586;
                    }

                    goto LABEL_584;
                  }

LABEL_572:
              os_release(v378);
              goto LABEL_573;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
            v632 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v632, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v633 = (os_log_s *)__nwlog_obj();
                os_log_type_t v634 = type[0];
                if (!os_log_type_enabled(v633, type[0])) {
                  goto LABEL_1309;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                v635 = "%{public}s called with null http1_stream->protocol_http1";
                goto LABEL_1308;
              }

              if (!(_BYTE)aBlock)
              {
                v633 = (os_log_s *)__nwlog_obj();
                os_log_type_t v634 = type[0];
                if (!os_log_type_enabled(v633, type[0])) {
                  goto LABEL_1309;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                v635 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                goto LABEL_1308;
              }

              v698 = (char *)__nw_create_backtrace_string();
              v633 = (os_log_s *)__nwlog_obj();
              os_log_type_t v634 = type[0];
              BOOL v699 = os_log_type_enabled(v633, type[0]);
              if (v698)
              {
                if (v699)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v698;
                  _os_log_impl( &dword_181A5C000,  v633,  v634,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v698);
                goto LABEL_1309;
              }

              if (v699)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                v635 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
LABEL_1308:
                _os_log_impl(&dword_181A5C000, v633, v634, v635, buf, 0xCu);
              }
            }

LABEL_1309:
            if (v632) {
              free(v632);
            }
            goto LABEL_558;
          }

          __nwlog_obj();
          uint64_t v162 = *(unsigned int *)(v9 + 336);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->connections_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v783 = 1LL;
          *(_WORD *)v784 = 2048;
          *(void *)&v784[2] = v162;
          v163 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v163, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v164 = (os_log_s *)__nwlog_obj();
              os_log_type_t v165 = type[0];
              if (os_log_type_enabled(v164, type[0]))
              {
                uint64_t v166 = *(unsigned int *)(v9 + 336);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->connections_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v783 = 1LL;
                *(_WORD *)v784 = 2048;
                *(void *)&v784[2] = v166;
                os_log_type_t v167 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_505:
                _os_log_impl(&dword_181A5C000, v164, v165, v167, buf, 0x2Au);
              }
            }

            else if ((_BYTE)aBlock)
            {
              v256 = (char *)__nw_create_backtrace_string();
              v164 = (os_log_s *)__nwlog_obj();
              os_log_type_t v165 = type[0];
              BOOL v257 = os_log_type_enabled(v164, type[0]);
              if (v256)
              {
                if (v257)
                {
                  uint64_t v258 = *(unsigned int *)(v9 + 336);
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v258;
                  *(_WORD *)&v784[10] = 2082;
                  *(void *)&v784[12] = v256;
                  _os_log_impl( &dword_181A5C000,  v164,  v165,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v256);
                goto LABEL_506;
              }

              if (v257)
              {
                uint64_t v332 = *(unsigned int *)(v9 + 336);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->connections_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v783 = 1LL;
                *(_WORD *)v784 = 2048;
                *(void *)&v784[2] = v332;
                os_log_type_t v167 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_505;
              }
            }

            else
            {
              v164 = (os_log_s *)__nwlog_obj();
              os_log_type_t v165 = type[0];
              if (os_log_type_enabled(v164, type[0]))
              {
                uint64_t v324 = *(unsigned int *)(v9 + 336);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->connections_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v783 = 1LL;
                *(_WORD *)v784 = 2048;
                *(void *)&v784[2] = v324;
                os_log_type_t v167 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_505;
              }
            }
          }

LABEL_506:
          if (v163) {
            free(v163);
          }
          *(_DWORD *)(v9 + 336) = -1;
          goto LABEL_509;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
        v613 = (char *)_os_log_send_and_compose_impl();
        v777[0] = 16;
        LOBYTE(v758[0]) = 0;
        if (__nwlog_fault(v613, v777, v758))
        {
          if (v777[0] == 17)
          {
            v614 = (os_log_s *)__nwlog_obj();
            os_log_type_t v615 = v777[0];
            if (!os_log_type_enabled(v614, (os_log_type_t)v777[0])) {
              goto LABEL_1261;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v616 = "%{public}s called with null parameters";
            goto LABEL_1260;
          }

          if (!LOBYTE(v758[0]))
          {
            v614 = (os_log_s *)__nwlog_obj();
            os_log_type_t v615 = v777[0];
            if (!os_log_type_enabled(v614, (os_log_type_t)v777[0])) {
              goto LABEL_1261;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v616 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_1260;
          }

          v667 = (char *)__nw_create_backtrace_string();
          v614 = (os_log_s *)__nwlog_obj();
          os_log_type_t v615 = v777[0];
          BOOL v684 = os_log_type_enabled(v614, (os_log_type_t)v777[0]);
          if (!v667)
          {
            if (!v684) {
              goto LABEL_1261;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v616 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_1260;
          }

          if (v684)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v667;
            v669 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
            goto LABEL_1165;
          }

          goto LABEL_1166;
        }

LABEL_1261:
        if (!v613) {
          goto LABEL_1263;
        }
        goto LABEL_1262;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v613 = (char *)_os_log_send_and_compose_impl();
      v777[0] = 16;
      LOBYTE(v758[0]) = 0;
      if (v777[0] != 17)
      {
        if (!LOBYTE(v758[0]))
        {
          v614 = (os_log_s *)__nwlog_obj();
          os_log_type_t v615 = v777[0];
          if (!os_log_type_enabled(v614, (os_log_type_t)v777[0])) {
            goto LABEL_1261;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v616 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_1260;
        }

        v667 = (char *)__nw_create_backtrace_string();
        v614 = (os_log_s *)__nwlog_obj();
        os_log_type_t v615 = v777[0];
        BOOL v668 = os_log_type_enabled(v614, (os_log_type_t)v777[0]);
        if (!v667)
        {
          if (!v668) {
            goto LABEL_1261;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v616 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_1260;
        }

        if (v668)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v667;
          v669 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1165:
          _os_log_impl(&dword_181A5C000, v614, v615, v669, buf, 0x16u);
        }

LABEL_1166:
        free(v667);
        if (!v613)
        {
LABEL_1263:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          v723 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v724 = (os_log_s *)__nwlog_obj();
            os_log_type_t v725 = type[0];
            if (!os_log_type_enabled(v724, type[0])) {
              goto LABEL_1277;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v726 = "%{public}s called with null http1_connection";
          }

          else if ((_BYTE)aBlock)
          {
            v727 = (char *)__nw_create_backtrace_string();
            v724 = (os_log_s *)__nwlog_obj();
            os_log_type_t v725 = type[0];
            BOOL v728 = os_log_type_enabled(v724, type[0]);
            if (v727)
            {
              if (v728)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v727;
                _os_log_impl( &dword_181A5C000,  v724,  v725,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v727);
LABEL_1277:
              if (v723) {
                free(v723);
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v729 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v730 = (os_log_s *)__nwlog_obj();
                os_log_type_t v731 = type[0];
                if (os_log_type_enabled(v730, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v732 = "%{public}s called with null http1_connection";
LABEL_1292:
                  _os_log_impl(&dword_181A5C000, v730, v731, v732, buf, 0xCu);
                }
              }

              else if ((_BYTE)aBlock)
              {
                v733 = (char *)__nw_create_backtrace_string();
                v730 = (os_log_s *)__nwlog_obj();
                os_log_type_t v731 = type[0];
                BOOL v734 = os_log_type_enabled(v730, type[0]);
                if (v733)
                {
                  if (v734)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v733;
                    _os_log_impl( &dword_181A5C000,  v730,  v731,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v733);
                  goto LABEL_1293;
                }

                if (v734)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v732 = "%{public}s called with null http1_connection, no backtrace";
                  goto LABEL_1292;
                }
              }

              else
              {
                v730 = (os_log_s *)__nwlog_obj();
                os_log_type_t v731 = type[0];
                if (os_log_type_enabled(v730, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v732 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_1292;
                }
              }

      BOOL result = 113LL;
      if (a2 == a3) {
        return result;
      }
      while (1)
      {
        a4 = *a2;
        if (a4 != 32) {
          break;
        }
        if (++a2 == a3) {
          return result;
        }
      }

      switch(a4)
      {
        case 'H':
          ++a2;
LABEL_1193:
          if (a2 == a3) {
            return 110LL;
          }
          os_log_type_t v294 = *(_DWORD *)a1;
          while (1)
          {
            uint64_t v295 = *a2;
            v296 = llparse_blob13[v294];
            if (v294 == 3)
            {
              a4 = 0;
              __int128 v297 = 5;
            }

            else
            {
              __int128 v297 = 0;
            }

            if (v295 != v296)
            {
              a4 = 2;
              __int128 v297 = 5;
            }

            if (v297) {
              break;
            }
            if (v295 == v296) {
              ++v294;
            }
            if (++a2 == a3)
            {
              a4 = 1;
              a2 = a3;
              goto LABEL_1206;
            }
          }

          os_log_type_t v294 = 0;
LABEL_1206:
          *(_DWORD *)a1 = v294;
          if (!a4)
          {
            ++a2;
            __int128 v298 = *(unsigned __int8 *)(a1 + 73);
            if (v298 >= 0x23 && v298 != 46)
            {
              BOOL result = 0LL;
              *(_DWORD *)(a1 + 24) = 8;
              uint64_t v8 = "Invalid method for HTTP/x.x request";
              goto LABEL_2272;
            }

            goto LABEL_1226;
          }

          if (a4 == 1) {
            return 110LL;
          }
          break;
        case 'I':
          ++a2;
LABEL_1211:
          if (a2 == a3) {
            return 111LL;
          }
          __int128 v299 = *(_DWORD *)a1;
          while (1)
          {
            __int128 v300 = *a2;
            v301 = llparse_blob15[v299];
            if (v299 == 2)
            {
              a4 = 0;
              uint64_t v302 = 5;
            }

            else
            {
              uint64_t v302 = 0;
            }

            if (v300 != v301)
            {
              a4 = 2;
              uint64_t v302 = 5;
            }

            if (v302) {
              break;
            }
            if (v300 == v301) {
              ++v299;
            }
            if (++a2 == a3)
            {
              a4 = 1;
              a2 = a3;
              goto LABEL_1224;
            }
          }

          __int128 v299 = 0;
LABEL_1224:
          *(_DWORD *)a1 = v299;
          if (!a4)
          {
            ++a2;
            if (*(_BYTE *)(a1 + 73) != 33)
            {
              BOOL result = 0LL;
              *(_DWORD *)(a1 + 24) = 8;
              uint64_t v8 = "Expected SOURCE method for ICE/x.x request";
              goto LABEL_2272;
            }

            goto LABEL_1226;
          }

          if (a4 == 1) {
            return 111LL;
          }
          break;
        case 'R':
          ++a2;
LABEL_1174:
          if (a2 == a3) {
            return 112LL;
          }
          unsigned int v289 = *(_DWORD *)a1;
          while (1)
          {
            v290 = *a2;
            uint64_t v291 = llparse_blob16[v289];
            if (v289 == 3)
            {
              a4 = 0;
              v292 = 5;
            }

            else
            {
              v292 = 0;
            }

            if (v290 != v291)
            {
              a4 = 2;
              v292 = 5;
            }

            if (v292) {
              break;
            }
            if (v290 == v291) {
              ++v289;
            }
            if (++a2 == a3)
            {
              a4 = 1;
              a2 = a3;
              goto LABEL_1187;
            }
          }

          unsigned int v289 = 0;
LABEL_1187:
          *(_DWORD *)a1 = v289;
          if (!a4)
          {
            ++a2;
            v293 = *(unsigned __int8 *)(a1 + 73);
            if (v293 - 35 >= 0xB && (v293 > 6 || ((1 << v293) & 0x4A) == 0))
            {
              BOOL result = 0LL;
              *(_DWORD *)(a1 + 24) = 8;
              uint64_t v8 = "Invalid method for RTSP/x.x request";
              goto LABEL_2272;
            }

LABEL_1293:
              if (v729) {
                free(v729);
              }
              size_t v135 = 0LL;
              goto LABEL_558;
            }

            if (!v728) {
              goto LABEL_1277;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v726 = "%{public}s called with null http1_connection, no backtrace";
          }

          else
          {
            v724 = (os_log_s *)__nwlog_obj();
            os_log_type_t v725 = type[0];
            if (!os_log_type_enabled(v724, type[0])) {
              goto LABEL_1277;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v726 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          }

          _os_log_impl(&dword_181A5C000, v724, v725, v726, buf, 0xCu);
          goto LABEL_1277;
        }

LABEL_1262:
        free(v613);
        goto LABEL_1263;
      }

      v614 = (os_log_s *)__nwlog_obj();
      os_log_type_t v615 = v777[0];
      if (!os_log_type_enabled(v614, (os_log_type_t)v777[0])) {
        goto LABEL_1261;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v616 = "%{public}s called with null endpoint";
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v613 = (char *)_os_log_send_and_compose_impl();
      v777[0] = 16;
      LOBYTE(v758[0]) = 0;
      if (v777[0] != 17)
      {
        if (!LOBYTE(v758[0]))
        {
          v614 = (os_log_s *)__nwlog_obj();
          os_log_type_t v615 = v777[0];
          if (!os_log_type_enabled(v614, (os_log_type_t)v777[0])) {
            goto LABEL_1261;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v616 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_1260;
        }

        v665 = (char *)__nw_create_backtrace_string();
        v614 = (os_log_s *)__nwlog_obj();
        os_log_type_t v615 = v777[0];
        BOOL v666 = os_log_type_enabled(v614, (os_log_type_t)v777[0]);
        if (!v665)
        {
          if (!v666) {
            goto LABEL_1261;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v616 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_1260;
        }

        if (v666)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v665;
          _os_log_impl( &dword_181A5C000,  v614,  v615,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v665);
        goto LABEL_1261;
      }

      v614 = (os_log_s *)__nwlog_obj();
      os_log_type_t v615 = v777[0];
      if (!os_log_type_enabled(v614, (os_log_type_t)v777[0])) {
        goto LABEL_1261;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v616 = "%{public}s called with null output_handler";
    }

LABEL_1260:
    _os_log_impl(&dword_181A5C000, v614, v615, v616, buf, 0xCu);
    goto LABEL_1261;
  }

  if (*(_DWORD *)(v9 + 336) + *(_DWORD *)(v9 + 352) < (*(_DWORD *)(v9 + 368) + *(_DWORD *)(v9 + 364)))
  {
    v122 = &qword_18C45F000;
    if ((*(_BYTE *)(v15 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v645 = (os_log_s *)__nwlog_obj();
        BOOL v646 = os_log_type_enabled(v645, OS_LOG_TYPE_DEBUG);
        v122 = &qword_18C45F000;
        if (v646)
        {
          uint64_t v647 = *(void *)(v15 + 256);
          int v648 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
          if (v647) {
            LODWORD(v647) = *(_DWORD *)(v647 + 860);
          }
          int v649 = *(_DWORD *)(v15 + 424);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v783 = (uint64_t)" ";
          *(_WORD *)v784 = 1024;
          *(_DWORD *)&v784[2] = v648;
          *(_WORD *)&v784[6] = 1024;
          *(_DWORD *)&v784[8] = v647;
          *(_WORD *)&v784[12] = 1024;
          *(_DWORD *)&v784[14] = v649;
          _os_log_impl( &dword_181A5C000,  v645,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> width allows new connection, creating",  buf,  0x32u);
          v122 = &qword_18C45F000;
        }
      }
    }

    if ((*(_WORD *)(v15 + 428) & 0x1000) == 0) {
      goto LABEL_666;
    }
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (*((_BYTE *)v122 + 1537))
      {
        v700 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v700, OS_LOG_TYPE_DEBUG))
        {
          int v701 = *(_DWORD *)(v9 + 372);
          int v702 = *(_DWORD *)(v15 + 424);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v783 = (uint64_t)" ";
          *(_WORD *)v784 = 1024;
          *(_DWORD *)&v784[2] = v701;
          *(_WORD *)&v784[6] = 1024;
          *(_DWORD *)&v784[8] = v702;
          *(_WORD *)&v784[12] = 2048;
          *(void *)&v784[14] = v15;
          _os_log_impl( &dword_181A5C000,  v700,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
        }
      }
    }

    if ((*(_WORD *)(v15 + 428) & 0x1000) == 0)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v15;
      uint64_t v123 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(aBlock) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v124 = (os_log_s *)__nwlog_obj();
        os_log_type_t v125 = type[0];
        if (!os_log_type_enabled(v124, type[0])) {
          goto LABEL_636;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v15;
        uint64_t v126 = "%{public}s stream %p not in pending list, cannot remove";
      }

      else if ((_BYTE)aBlock)
      {
        v322 = (char *)__nw_create_backtrace_string();
        __int16 v124 = (os_log_s *)__nwlog_obj();
        os_log_type_t v125 = type[0];
        BOOL v323 = os_log_type_enabled(v124, type[0]);
        if (v322)
        {
          if (v323)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v15;
            *(_WORD *)&buf[22] = 2082;
            uint64_t v783 = (uint64_t)v322;
            _os_log_impl( &dword_181A5C000,  v124,  v125,  "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v322);
          goto LABEL_636;
        }

        if (!v323)
        {
LABEL_636:
          if (v123) {
            free(v123);
          }
LABEL_638:
          v122 = &qword_18C45F000;
          goto LABEL_666;
        }

        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v15;
        uint64_t v126 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }

      else
      {
        __int16 v124 = (os_log_s *)__nwlog_obj();
        os_log_type_t v125 = type[0];
        if (!os_log_type_enabled(v124, type[0])) {
          goto LABEL_636;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v15;
        uint64_t v126 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v124, v125, v126, buf, 0x16u);
      goto LABEL_636;
    }

    uint64_t v270 = *(void *)(v15 + 296);
    v271 = *(void **)(v15 + 304);
    if (v270)
    {
      *(void *)(v270 + 304) = v271;
      v271 = *(void **)(v15 + 304);
    }

    else
    {
      *(void *)(v9 + 256) = v271;
    }

    void *v271 = v270;
    *(void *)(v15 + 296) = 0LL;
    *(void *)(v15 + 304) = 0LL;
    int v325 = *(_DWORD *)(v9 + 348);
    *(_DWORD *)(v9 + 34_Block_object_dispose(&STACK[0x338], 8) = v325 - 1;
    if (v325)
    {
LABEL_664:
      *(_WORD *)(v15 + 428) &= ~0x1000u;
      v122 = &qword_18C45F000;
      if ((*(_BYTE *)(v15 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v717 = (os_log_s *)__nwlog_obj();
          BOOL v718 = os_log_type_enabled(v717, OS_LOG_TYPE_DEBUG);
          v122 = &qword_18C45F000;
          if (v718)
          {
            uint64_t v719 = *(void *)(v15 + 256);
            int v720 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
            if (v719) {
              LODWORD(v719) = *(_DWORD *)(v719 + 860);
            }
            int v721 = *(_DWORD *)(v15 + 424);
            int v722 = *(_DWORD *)(v9 + 348);
            *(_DWORD *)buf = 136448258;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v15 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v783 = (uint64_t)" ";
            *(_WORD *)v784 = 1024;
            *(_DWORD *)&v784[2] = v720;
            *(_WORD *)&v784[6] = 1024;
            *(_DWORD *)&v784[8] = v719;
            *(_WORD *)&v784[12] = 1024;
            *(_DWORD *)&v784[14] = v721;
            *(_WORD *)&v784[18] = 1024;
            *(_DWORD *)&v784[20] = v721;
            *(_WORD *)&v784[24] = 2048;
            *(void *)&v784[26] = v15;
            *(_WORD *)&v784[34] = 1024;
            *(_DWORD *)&v784[36] = v722;
            _os_log_impl( &dword_181A5C000,  v717,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams",  buf,  0x48u);
            goto LABEL_638;
          }
        }
      }

LABEL_666:
      if (*(void *)(v15 + 32))
      {
        if ((*(_BYTE *)(v15 + 158) & 1) == 0)
        {
          if (*((_BYTE *)v122 + 1537))
          {
            v660 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v660, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v661 = *(void *)(v15 + 256);
              int v662 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
              if (v661) {
                LODWORD(v661) = *(_DWORD *)(v661 + 860);
              }
              int v663 = *(_DWORD *)(v15 + 424);
              uint64_t v664 = *(void *)(v15 + 32);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v15 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v783 = (uint64_t)" ";
              *(_WORD *)v784 = 1024;
              *(_DWORD *)&v784[2] = v662;
              *(_WORD *)&v784[6] = 1024;
              *(_DWORD *)&v784[8] = v661;
              *(_WORD *)&v784[12] = 1024;
              *(_DWORD *)&v784[14] = v663;
              *(_WORD *)&v784[18] = 2048;
              *(void *)&v784[20] = v664;
              _os_log_impl( &dword_181A5C000,  v660,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using already established output handler %p",  buf,  0x3Cu);
            }
          }
        }

        v752 = *(_OWORD **)(v15 + 32);
        if (v752)
        {
          v409 = *(void **)(v15 + 336);
          if (v409)
          {
            v410 = *(void **)(v15 + 320);
            if (v410)
            {
              v411 = calloc(1uLL, 0x370uLL);
              if (v411) {
                goto LABEL_673;
              }
              v670 = (os_log_s *)__nwlog_obj();
              os_log_type_enabled(v670, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "strict_calloc";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = 1LL;
              *(_WORD *)&buf[22] = 2048;
              uint64_t v783 = 880LL;
              v671 = (void *)_os_log_send_and_compose_impl();
              BOOL result = __nwlog_abort((uint64_t)v671);
              if (!result)
              {
                free(v671);
LABEL_673:
                bzero(v411, 0x370uLL);
                if (nw_protocol_http1_identifier::onceToken != -1) {
                  dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
                }
                *((void *)v411 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                *((void *)v411 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                *((_DWORD *)v411 + 46) = 3;
                *((void *)v411 + 22) = v411;
                *((void *)v411 + 5) = v411 + 10;
                *((void *)v411 + 60) = v9;
                nw_protocol_set_output_handler((uint64_t)v411, (uint64_t)v752);
                *(void *)buf = os_retain(v409);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v411 + 47), buf);
                *(void *)buf = os_retain(v410);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v411 + 46), buf);
                *(void *)buf = nw_parameters_copy_context(v410);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v411 + 31), buf);
                *((void *)v411 + 24) = *(void *)(v9 + 192);
                uint64_t v412 = MEMORY[0x1895F87A8];
                v413 = (void *)*((void *)v411 + 62);
                *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
                uint64_t v767 = 0x40000000LL;
                uint64_t v768 = (uint64_t)___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                v769 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39882;
                v770 = (void (*)(uint64_t))v411;
                *(void *)buf = nw_http_connection_create_metadata(v413, type, 0LL);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v411 + 48), buf);
                nw_http_connection_metadata_set_version(*((void **)v411 + 96), 3);
                nw_http_connection_metadata_set_shared_connection_pool_metadata( *((void **)v411 + 96),  *(void **)(v9 + 312));
                *((void *)v411 + 77) = 0LL;
                *((void *)v411 + 7_Block_object_dispose(&STACK[0x338], 8) = (char *)v411 + 616;
                *((void *)v411 + 79) = 0LL;
                *((void *)v411 + 80) = (char *)v411 + 632;
                *((void *)v411 + 81) = 0LL;
                *((void *)v411 + 82) = (char *)v411 + 648;
                *((void *)v411 + 83) = 0LL;
                *((void *)v411 + 84) = (char *)v411 + 664;
                *((void *)v411 + 86) = (char *)v411 + 680;
                *((void *)v411 + 85) = 0LL;
                nw_frame_cache_init((uint64_t)v411 + 696, (uint64_t)v411, 256, 0x40000, 16);
                uint64_t v414 = *((void *)v411 + 60);
                if (v414)
                {
                  *(_OWORD *)((char *)v411 + 360) = 0u;
                  *(_OWORD *)((char *)v411 + 376) = 0u;
                  *(_OWORD *)((char *)v411 + 392) = 0u;
                  *(_OWORD *)((char *)v411 + 40_Block_object_dispose(&STACK[0x338], 8) = 0u;
                  *(_OWORD *)((char *)v411 + 424) = 0u;
                  *(_OWORD *)((char *)v411 + 440) = 0u;
                  *(_OWORD *)((char *)v411 + 32_Block_object_dispose(&STACK[0x338], 8) = 0u;
                  *(_OWORD *)((char *)v411 + 344) = 0u;
                  *((void *)v411 + 59) = nw_http1_on_reset;
                  *((void *)v411 + 37) = nw_http1_on_message_begin;
                  *((void *)v411 + 3_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_url;
                  *((void *)v411 + 4_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_message_complete;
                  *((void *)v411 + 49) = nw_http1_on_url_complete;
                  *((void *)v411 + 39) = nw_http1_on_status;
                  *((void *)v411 + 40) = nw_http1_on_method;
                  *((void *)v411 + 50) = nw_http1_on_status_complete;
                  *((void *)v411 + 51) = nw_http1_on_method_complete;
                  *((void *)v411 + 42) = nw_http1_on_header_field;
                  *((void *)v411 + 43) = nw_http1_on_header_value;
                  *((void *)v411 + 53) = nw_http1_on_header_field_complete;
                  *((void *)v411 + 54) = nw_http1_on_header_value_complete;
                  *((void *)v411 + 46) = nw_http1_on_headers_complete;
                  *((void *)v411 + 47) = nw_http1_on_body;
                  *((void *)v411 + 57) = nw_http1_on_chunk_header;
                  *((void *)v411 + 5_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_chunk_complete;
                  char v415 = *(_BYTE *)(v414 + 376);
                  *(_OWORD *)((char *)v411 + 24_Block_object_dispose(&STACK[0x338], 8) = 0u;
                  *(_OWORD *)((char *)v411 + 200) = 0u;
                  *(_OWORD *)((char *)v411 + 264) = 0u;
                  *(_OWORD *)((char *)v411 + 232) = 0u;
                  *(_OWORD *)((char *)v411 + 216) = 0u;
                  if ((v415 & 1) != 0) {
                    char v416 = 1;
                  }
                  else {
                    char v416 = 2;
                  }
                  *((_BYTE *)v411 + 272) = v416;
                  *((void *)v411 + 35) = 0LL;
                  *((void *)v411 + 36) = (char *)v411 + 296;
                  *((_WORD *)v411 + 139) = 16131;
                  *((void *)v411 + 31) = v411;
                  *((void *)v411 + 32) = 238LL;
                  if ((*((_BYTE *)v411 + 158) & 1) == 0)
                  {
                    v417 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v417, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v418 = *((void *)v411 + 61);
                      int v419 = *(_DWORD *)(*((void *)v411 + 60) + 372LL);
                      int v420 = *((_DWORD *)v411 + 215);
                      if (v418) {
                        LODWORD(v41_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v418 + 424);
                      }
                      *(_DWORD *)buf = 136448258;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_log_parser_version";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = (char *)v411 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      uint64_t v783 = (uint64_t)" ";
                      *(_WORD *)v784 = 1024;
                      *(_DWORD *)&v784[2] = v419;
                      *(_WORD *)&v784[6] = 1024;
                      *(_DWORD *)&v784[8] = v420;
                      *(_WORD *)&v784[12] = 1024;
                      *(_DWORD *)&v784[14] = v418;
                      *(_WORD *)&v784[18] = 1024;
                      *(_DWORD *)&v784[20] = 9;
                      *(_WORD *)&v784[24] = 1024;
                      *(_DWORD *)&v784[26] = 2;
                      *(_WORD *)&v784[30] = 1024;
                      *(_DWORD *)&v784[32] = 1;
                      _os_log_impl( &dword_181A5C000,  v417,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u",  buf,  0x44u);
                    }
                  }

                  goto LABEL_686;
                }

                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                v672 = (char *)_os_log_send_and_compose_impl();
                v777[0] = 16;
                LOBYTE(v758[0]) = 0;
                if (__nwlog_fault(v672, v777, v758))
                {
                  if (v777[0] == 17)
                  {
                    v673 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v674 = v777[0];
                    if (!os_log_type_enabled(v673, (os_log_type_t)v777[0])) {
                      goto LABEL_1378;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                    v675 = "%{public}s called with null http1_connection->protocol_http1";
                    goto LABEL_1377;
                  }

                  if (!LOBYTE(v758[0]))
                  {
                    v673 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v674 = v777[0];
                    if (!os_log_type_enabled(v673, (os_log_type_t)v777[0])) {
                      goto LABEL_1378;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                    v675 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                    goto LABEL_1377;
                  }

                  v711 = (char *)__nw_create_backtrace_string();
                  v673 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v674 = v777[0];
                  BOOL v712 = os_log_type_enabled(v673, (os_log_type_t)v777[0]);
                  if (v711)
                  {
                    if (v712)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v711;
                      _os_log_impl( &dword_181A5C000,  v673,  v674,  "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(v711);
                    goto LABEL_1378;
                  }

                  if (v712)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                    v675 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
LABEL_1377:
                    _os_log_impl(&dword_181A5C000, v673, v674, v675, buf, 0xCu);
                  }
                }

LABEL_1378:
                if (v672) {
                  free(v672);
                }
LABEL_686:
                *(void *)buf = 0LL;
                *(void *)&buf[8] = buf;
                *(void *)&buf[16] = 0x2000000000LL;
                uint64_t v783 = (uint64_t)v411;
                uint64_t aBlock = v412;
                uint64_t v760 = 0x40000000LL;
                v761 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                v762 = &unk_189BBD4F0;
                v763 = (uint64_t *)buf;
                *((void *)v411 + 76) = _Block_copy(&aBlock);
                _Block_object_dispose(buf, 8);
                if ((*((_BYTE *)v411 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v685 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v685, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v686 = *((void *)v411 + 61);
                      int v687 = *(_DWORD *)(*((void *)v411 + 60) + 372LL);
                      int v688 = *((_DWORD *)v411 + 215);
                      if (v686) {
                        LODWORD(v686) = *(_DWORD *)(v686 + 424);
                      }
                      *(_DWORD *)buf = 136447746;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = (char *)v411 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      uint64_t v783 = (uint64_t)" ";
                      *(_WORD *)v784 = 1024;
                      *(_DWORD *)&v784[2] = v687;
                      *(_WORD *)&v784[6] = 1024;
                      *(_DWORD *)&v784[8] = v688;
                      *(_WORD *)&v784[12] = 1024;
                      *(_DWORD *)&v784[14] = v686;
                      *(_WORD *)&v784[18] = 2048;
                      *(void *)&v784[20] = v411;
                      _os_log_impl( &dword_181A5C000,  v685,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created %p",  buf,  0x3Cu);
                    }
                  }
                }

                v421 = (nw_path_t *)(v411 + 32);
                nw_protocol_replace_input_handler((uint64_t)v752, v15, (uint64_t)v411);
                _OWORD *v411 = *v752;
                v422 = (void *)*((void *)v411 + 92);
                if (v422)
                {
                  if (!*((void *)v411 + 66))
                  {
                    v423 = (void **)(v411 + 35);
                    id v424 = nw_parameters_copy_context(*((void **)v411 + 92));
                    *(void *)buf = nw_path_copy_flow_registration(v424, (uint64_t)v411);
                    nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v411 + 35), buf);
                    v425 = (void *)*((void *)v411 + 70);
                    if (v425)
                    {
                      id v426 = nw_path_flow_registration_copy_endpoint(v425);
                      id v427 = nw_path_flow_registration_copy_parameters(*v423);
                      *(void *)buf = nw_endpoint_copy_association_with_evaluator(v426, v427, 0LL);
                      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v411 + 33), buf);
                      if (*((void *)v411 + 66))
                      {
                        *(void *)buf = nw_protocol_instance_stub_create((nw_protocol *)v411);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v411 + 34), buf);
                        nw_association_register_internal( *((void **)v411 + 66),  v422,  *((void **)v411 + 68),  0,  0,  &__block_literal_global_65);
                        id v428 = nw_association_copy_current_path(*((void **)v411 + 66), v427);
                        if (v428)
                        {
                          v429 = v428;
                          nw_path_t v430 = (nw_path_t)nw_path_copy_for_flow_registration(v428, *v423);
                          if (v430)
                          {
                            v431 = v430;
                            if (*v421 != v430)
                            {
                              *(void *)buf = os_retain(v430);
                              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v411 + 32), buf);
                            }

                            if (nw_path_has_flows(v431)) {
                              __int16 v432 = 4096;
                            }
                            else {
                              __int16 v432 = 0;
                            }
                            int v433 = *((_WORD *)v411 + 436) & 0xEFFF | (*((unsigned __int8 *)v411 + 874) << 16);
                            *((_WORD *)v411 + 436) = *((_WORD *)v411 + 436) & 0xEFFF | v432;
                            *((_BYTE *)v411 + 874) = BYTE2(v433);
                            id v434 = nw_parameters_copy_effective_proxy_config(v422);
                            if (v434)
                            {
                              v435 = v434;
                              if (nw_path_has_proxy_config(v429, v434))
                              {
                                *(void *)buf = os_retain(v435);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v411 + 36), buf);
                              }

                              os_release(v435);
                            }

                            os_release(v431);
                          }

                          os_release(v429);
                        }
                      }

                      if (v427) {
                        os_release(v427);
                      }
                      if (v426) {
                        os_release(v426);
                      }
                    }

                    if (v424) {
                      os_release(v424);
                    }
                  }

                  goto LABEL_711;
                }

                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                v676 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v676, type, &aBlock))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    v677 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v678 = type[0];
                    if (!os_log_type_enabled(v677, type[0])) {
                      goto LABEL_1383;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                    v679 = "%{public}s called with null parameters";
                    goto LABEL_1382;
                  }

                  if (!(_BYTE)aBlock)
                  {
                    v677 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v678 = type[0];
                    if (!os_log_type_enabled(v677, type[0])) {
                      goto LABEL_1383;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                    v679 = "%{public}s called with null parameters, backtrace limit exceeded";
                    goto LABEL_1382;
                  }

                  v713 = (char *)__nw_create_backtrace_string();
                  v677 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v678 = type[0];
                  BOOL v714 = os_log_type_enabled(v677, type[0]);
                  if (v713)
                  {
                    if (v714)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v713;
                      _os_log_impl( &dword_181A5C000,  v677,  v678,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(v713);
                    goto LABEL_1383;
                  }

                  if (v714)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                    v679 = "%{public}s called with null parameters, no backtrace";
LABEL_1382:
                    _os_log_impl(&dword_181A5C000, v677, v678, v679, buf, 0xCu);
                  }
                }

        free(v702);
        goto LABEL_1379;
      }

      v703 = (os_log_s *)__nwlog_obj();
      BOOL v704 = v955[0];
      if (!os_log_type_enabled(v703, (os_log_type_t)v955[0])) {
        goto LABEL_1377;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v705 = "%{public}s called with null endpoint";
    }

    else
    {
      int v701 = 0LL;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      int v702 = (char *)_os_log_send_and_compose_impl();
      v955[0] = 16;
      LOBYTE(v943[0]) = 0;
      if (v955[0] != 17)
      {
        if (!LOBYTE(v943[0]))
        {
          v703 = (os_log_s *)__nwlog_obj();
          BOOL v704 = v955[0];
          if (!os_log_type_enabled(v703, (os_log_type_t)v955[0])) {
            goto LABEL_1377;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v705 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_1376;
        }

        uint64_t v767 = (char *)__nw_create_backtrace_string();
        v703 = (os_log_s *)__nwlog_obj();
        BOOL v704 = v955[0];
        uint64_t v768 = os_log_type_enabled(v703, (os_log_type_t)v955[0]);
        if (!v767)
        {
          if (!v768) {
            goto LABEL_1377;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v705 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_1376;
        }

        if (v768)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v767;
          _os_log_impl( &dword_181A5C000,  v703,  v704,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v767);
        goto LABEL_1377;
      }

      v703 = (os_log_s *)__nwlog_obj();
      BOOL v704 = v955[0];
      if (!os_log_type_enabled(v703, (os_log_type_t)v955[0])) {
        goto LABEL_1377;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v705 = "%{public}s called with null output_handler";
    }

LABEL_1383:
                if (v676) {
                  free(v676);
                }
LABEL_711:
                uint64_t v436 = *(unsigned int *)(v9 + 336) + 1LL;
                uint64_t v437 = v436 << 31 >> 31;
                *(_DWORD *)(v9 + 336) = v436;
                if (v437 == v436 && (v437 & 0x8000000000000000LL) == 0)
                {
LABEL_752:
                  uint64_t v468 = *(unsigned int *)(v9 + 360) + 1LL;
                  uint64_t v469 = v468 << 31 >> 31;
                  *(_DWORD *)(v9 + 360) = v468;
                  if (v469 == v468 && (v469 & 0x8000000000000000LL) == 0) {
                    goto LABEL_771;
                  }
                  __nwlog_obj();
                  uint64_t v470 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v470;
                  v471 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v471, type, &aBlock))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v472 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v473 = type[0];
                      if (os_log_type_enabled(v472, type[0]))
                      {
                        uint64_t v474 = *(unsigned int *)(v9 + 360);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->next_connection_log_num";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v783 = 1LL;
                        *(_WORD *)v784 = 2048;
                        *(void *)&v784[2] = v474;
                        v475 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_767:
                        _os_log_impl(&dword_181A5C000, v472, v473, v475, buf, 0x2Au);
                      }
                    }

                    else if ((_BYTE)aBlock)
                    {
                      v476 = (char *)__nw_create_backtrace_string();
                      v472 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v473 = type[0];
                      BOOL v477 = os_log_type_enabled(v472, type[0]);
                      if (v476)
                      {
                        if (v477)
                        {
                          uint64_t v478 = *(unsigned int *)(v9 + 360);
                          *(_DWORD *)buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v783 = 1LL;
                          *(_WORD *)v784 = 2048;
                          *(void *)&v784[2] = v478;
                          *(_WORD *)&v784[10] = 2082;
                          *(void *)&v784[12] = v476;
                          _os_log_impl( &dword_181A5C000,  v472,  v473,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                        }

                        free(v476);
                        goto LABEL_768;
                      }

                      if (v477)
                      {
                        uint64_t v480 = *(unsigned int *)(v9 + 360);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->next_connection_log_num";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v783 = 1LL;
                        *(_WORD *)v784 = 2048;
                        *(void *)&v784[2] = v480;
                        v475 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                        goto LABEL_767;
                      }
                    }

                    else
                    {
                      v472 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v473 = type[0];
                      if (os_log_type_enabled(v472, type[0]))
                      {
                        uint64_t v479 = *(unsigned int *)(v9 + 360);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->next_connection_log_num";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v783 = 1LL;
                        *(_WORD *)v784 = 2048;
                        *(void *)&v784[2] = v479;
                        v475 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_767;
                      }
                    }
                  }

LABEL_768:
                  if (v471) {
                    free(v471);
                  }
                  LODWORD(v46_Block_object_dispose(&STACK[0x338], 8) = -1;
                  *(_DWORD *)(v9 + 360) = -1;
LABEL_771:
                  *((_DWORD *)v411 + 215) = v468;
                  if ((*((_BYTE *)v411 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v689 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v689, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v690 = *((void *)v411 + 61);
                        int v691 = *(_DWORD *)(*((void *)v411 + 60) + 372LL);
                        int v692 = *((_DWORD *)v411 + 215);
                        if (v690) {
                          LODWORD(v690) = *(_DWORD *)(v690 + 424);
                        }
                        int v693 = *(_DWORD *)(v9 + 336);
                        *(_DWORD *)buf = 136448002;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = (char *)v411 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v783 = (uint64_t)" ";
                        *(_WORD *)v784 = 1024;
                        *(_DWORD *)&v784[2] = v691;
                        *(_WORD *)&v784[6] = 1024;
                        *(_DWORD *)&v784[8] = v692;
                        *(_WORD *)&v784[12] = 1024;
                        *(_DWORD *)&v784[14] = v690;
                        *(_WORD *)&v784[18] = 2048;
                        *(void *)&v784[20] = v411;
                        *(_WORD *)&v784[28] = 1024;
                        *(_DWORD *)&v784[30] = v693;
                        _os_log_impl( &dword_181A5C000,  v689,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections",  buf,  0x42u);
                      }
                    }
                  }

                  if (*(void *)(v15 + 248))
                  {
                    if (*((void *)v411 + 61))
                    {
                      __nwlog_obj();
                      uint64_t v481 = *((void *)v411 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v411;
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v783 = v481;
                      v482 = (char *)_os_log_send_and_compose_impl();
                      type[0] = OS_LOG_TYPE_ERROR;
                      LOBYTE(aBlock) = 0;
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v483 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v484 = type[0];
                        if (!os_log_type_enabled(v483, type[0])) {
                          goto LABEL_799;
                        }
                        uint64_t v485 = *((void *)v411 + 61);
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v411;
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v783 = v485;
                        v486 = "%{public}s Connection %p already has a stream (%p)";
                      }

                      else if ((_BYTE)aBlock)
                      {
                        v499 = (char *)__nw_create_backtrace_string();
                        v483 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v484 = type[0];
                        BOOL v500 = os_log_type_enabled(v483, type[0]);
                        if (v499)
                        {
                          if (v500)
                          {
                            uint64_t v501 = *((void *)v411 + 61);
                            *(_DWORD *)buf = 136446978;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2048;
                            *(void *)&buf[14] = v411;
                            *(_WORD *)&buf[22] = 2048;
                            uint64_t v783 = v501;
                            *(_WORD *)v784 = 2082;
                            *(void *)&v784[2] = v499;
                            _os_log_impl( &dword_181A5C000,  v483,  v484,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                          }

                          free(v499);
                          goto LABEL_799;
                        }

                        if (!v500)
                        {
LABEL_799:
                          if (v482) {
                            free(v482);
                          }
                          goto LABEL_801;
                        }

                        uint64_t v503 = *((void *)v411 + 61);
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v411;
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v783 = v503;
                        v486 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                      }

                      else
                      {
                        v483 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v484 = type[0];
                        if (!os_log_type_enabled(v483, type[0])) {
                          goto LABEL_799;
                        }
                        uint64_t v502 = *((void *)v411 + 61);
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v411;
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v783 = v502;
                        v486 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                      }

                      _os_log_impl(&dword_181A5C000, v483, v484, v486, buf, 0x20u);
                      goto LABEL_799;
                    }

                    *(void *)(v15 + 256) = v411;
                    *((void *)v411 + 61) = v15;
                    nw_protocol_set_output_handler(v15, *((void *)v411 + 4));
                    nw_protocol_set_input_handler((uint64_t)v411, *(void *)(v15 + 48));
                    *(_OWORD *)uint64_t v15 = *v411;
                    __int128 v487 = *(_OWORD *)(v15 + 144);
                    __int128 v489 = *(_OWORD *)(v15 + 96);
                    __int128 v488 = *(_OWORD *)(v15 + 112);
                    v411[8] = *(_OWORD *)(v15 + 128);
                    v411[9] = v487;
                    v411[6] = v489;
                    v411[7] = v488;
                    __int128 v490 = *(_OWORD *)(v15 + 80);
                    v411[4] = *v753;
                    v411[5] = v490;
                    nw_http_transaction_metadata_set_connection_metadata(*(void **)(v15 + 352), *((void **)v411 + 96));
                    *((_WORD *)v411 + 436) &= 0xFFD7u;
                    *((_DWORD *)v411 + 216) = 1;
                    if ((*((_BYTE *)v411 + 158) & 1) == 0)
                    {
                      v491 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v491, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v492 = *((void *)v411 + 61);
                        int v493 = *(_DWORD *)(*((void *)v411 + 60) + 372LL);
                        int v494 = *((_DWORD *)v411 + 215);
                        if (v492) {
                          LODWORD(v492) = *(_DWORD *)(v492 + 424);
                        }
                        *(_DWORD *)buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = (char *)v411 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v783 = (uint64_t)" ";
                        *(_WORD *)v784 = 1024;
                        *(_DWORD *)&v784[2] = v493;
                        *(_WORD *)&v784[6] = 1024;
                        *(_DWORD *)&v784[8] = v494;
                        *(_WORD *)&v784[12] = 1024;
                        *(_DWORD *)&v784[14] = v492;
                        _os_log_impl( &dword_181A5C000,  v491,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                      }
                    }

                    if ((*(_BYTE *)(v15 + 158) & 1) == 0)
                    {
                      v495 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v495, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v496 = *(void *)(v15 + 256);
                        int v497 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
                        if (v496) {
                          LODWORD(v496) = *(_DWORD *)(v496 + 860);
                        }
                        int v498 = *(_DWORD *)(v15 + 424);
                        *(_DWORD *)buf = 136448002;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v15 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v783 = (uint64_t)" ";
                        *(_WORD *)v784 = 1024;
                        *(_DWORD *)&v784[2] = v497;
                        *(_WORD *)&v784[6] = 1024;
                        *(_DWORD *)&v784[8] = v496;
                        *(_WORD *)&v784[12] = 1024;
                        *(_DWORD *)&v784[14] = v498;
                        *(_WORD *)&v784[18] = 2048;
                        *(void *)&v784[20] = v15;
                        *(_WORD *)&v784[28] = 2048;
                        *(void *)&v784[30] = v411;
                        _os_log_impl( &dword_181A5C000,  v495,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                      }
                    }

LABEL_801:
                    if ((*(_BYTE *)(v15 + 158) & 1) == 0)
                    {
                      v504 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v504, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v505 = *(void *)(v15 + 256);
                        int v506 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
                        if (v505) {
                          LODWORD(v505) = *(_DWORD *)(v505 + 860);
                        }
                        int v507 = *(_DWORD *)(v15 + 424);
                        *(_DWORD *)buf = 136448258;
                        *(void *)&uint8_t buf[4] = "nw_http1_start_new_connection_for_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v15 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v783 = (uint64_t)" ";
                        *(_WORD *)v784 = 1024;
                        *(_DWORD *)&v784[2] = v506;
                        *(_WORD *)&v784[6] = 1024;
                        *(_DWORD *)&v784[8] = v505;
                        *(_WORD *)&v784[12] = 1024;
                        *(_DWORD *)&v784[14] = v507;
                        *(_WORD *)&v784[18] = 2048;
                        *(void *)&v784[20] = v411;
                        *(_WORD *)&v784[28] = 1024;
                        *(_DWORD *)&v784[30] = v507;
                        *(_WORD *)&v784[34] = 2048;
                        *(void *)&v784[36] = v15;
                        _os_log_impl( &dword_181A5C000,  v504,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)",  buf,  0x4Cu);
                      }
                    }

                    nw_http_transaction_metadata_set_first_on_connection(*(void **)(v15 + 352));
                    uint64_t v508 = nw_protocol_copy_info((uint64_t)v752, 255);
                    v444 = (nw_protocol_stack *)v508;
                    if (v508
                      && (uint64_t v509 = *(void *)(v508 + 24), *(void *)(v508 + 16) != v509)
                      && (v510 = *(void **)(v509 - 8)) != 0LL)
                    {
                      v511 = (nw_protocol_metadata *)os_retain(v510);
                      v512 = v511;
                      if (v511 && nw_protocol_metadata_is_tls(v511))
                      {
                        v512 = v512;
                        nw_http_connection_metadata_set_sec_metadata(*((void **)v411 + 96), v512);
                        os_release(v512);
                        nw_protocol_connect((uint64_t)v752, (uint64_t)v411);
                        goto LABEL_815;
                      }
                    }

                    else
                    {
                      v512 = 0LL;
                    }

                    if (v411)
                    {
                      nw_protocol_connect((uint64_t)v752, (uint64_t)v411);
                      if (!v512) {
                        goto LABEL_816;
                      }
                      goto LABEL_815;
                    }

                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v650 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v650, type, &aBlock))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v651 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v652 = type[0];
                        if (!os_log_type_enabled(v651, type[0])) {
                          goto LABEL_1329;
                        }
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                        v653 = "%{public}s called with null connection";
LABEL_1328:
                        _os_log_impl(&dword_181A5C000, v651, v652, v653, buf, 0xCu);
                        goto LABEL_1329;
                      }

                      if (!(_BYTE)aBlock)
                      {
                        v651 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v652 = type[0];
                        if (!os_log_type_enabled(v651, type[0])) {
                          goto LABEL_1329;
                        }
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                        v653 = "%{public}s called with null connection, backtrace limit exceeded";
                        goto LABEL_1328;
                      }

                      v703 = (char *)__nw_create_backtrace_string();
                      v651 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v652 = type[0];
                      BOOL v704 = os_log_type_enabled(v651, type[0]);
                      if (!v703)
                      {
                        if (!v704) {
                          goto LABEL_1329;
                        }
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                        v653 = "%{public}s called with null connection, no backtrace";
                        goto LABEL_1328;
                      }

                      if (v704)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v703;
                        _os_log_impl( &dword_181A5C000,  v651,  v652,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v703);
                    }

LABEL_1329:
                    if (v650) {
                      free(v650);
                    }
                    nw_protocol_connect((uint64_t)v752, 0LL);
                    if (!v512)
                    {
LABEL_816:
                      if (!v444) {
                        return 1LL;
                      }
                      goto LABEL_830;
                    }

LABEL_815:
                    os_release(v512);
                    goto LABEL_816;
                  }

                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v680 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v680, type, &aBlock))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v681 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v682 = type[0];
                      if (!os_log_type_enabled(v681, type[0])) {
                        goto LABEL_1388;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v683 = "%{public}s called with null http1_stream->protocol_http1";
                      goto LABEL_1387;
                    }

                    if (!(_BYTE)aBlock)
                    {
                      v681 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v682 = type[0];
                      if (!os_log_type_enabled(v681, type[0])) {
                        goto LABEL_1388;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v683 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                      goto LABEL_1387;
                    }

                    v715 = (char *)__nw_create_backtrace_string();
                    v681 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v682 = type[0];
                    BOOL v716 = os_log_type_enabled(v681, type[0]);
                    if (v715)
                    {
                      if (v716)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v715;
                        _os_log_impl( &dword_181A5C000,  v681,  v682,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v715);
                      goto LABEL_1388;
                    }

                    if (v716)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v683 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
LABEL_1387:
                      _os_log_impl(&dword_181A5C000, v681, v682, v683, buf, 0xCu);
                    }
                  }

LABEL_1388:
                  if (v680) {
                    free(v680);
                  }
                  goto LABEL_801;
                }

                __nwlog_obj();
                uint64_t v438 = *(unsigned int *)(v9 + 336);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->connections_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v783 = 1LL;
                *(_WORD *)v784 = 2048;
                *(void *)&v784[2] = v438;
                v439 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v439, type, &aBlock))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    v440 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v441 = type[0];
                    if (os_log_type_enabled(v440, type[0]))
                    {
                      uint64_t v442 = *(unsigned int *)(v9 + 336);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v783 = 1LL;
                      *(_WORD *)v784 = 2048;
                      *(void *)&v784[2] = v442;
                      v443 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_748:
                      _os_log_impl(&dword_181A5C000, v440, v441, v443, buf, 0x2Au);
                    }
                  }

                  else if ((_BYTE)aBlock)
                  {
                    v460 = (char *)__nw_create_backtrace_string();
                    v440 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v441 = type[0];
                    BOOL v461 = os_log_type_enabled(v440, type[0]);
                    if (v460)
                    {
                      if (v461)
                      {
                        uint64_t v462 = *(unsigned int *)(v9 + 336);
                        *(_DWORD *)buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v783 = 1LL;
                        *(_WORD *)v784 = 2048;
                        *(void *)&v784[2] = v462;
                        *(_WORD *)&v784[10] = 2082;
                        *(void *)&v784[12] = v460;
                        _os_log_impl( &dword_181A5C000,  v440,  v441,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                      }

                      free(v460);
                      goto LABEL_749;
                    }

                    if (v461)
                    {
                      uint64_t v467 = *(unsigned int *)(v9 + 336);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v783 = 1LL;
                      *(_WORD *)v784 = 2048;
                      *(void *)&v784[2] = v467;
                      v443 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                      goto LABEL_748;
                    }
                  }

                  else
                  {
                    v440 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v441 = type[0];
                    if (os_log_type_enabled(v440, type[0]))
                    {
                      uint64_t v466 = *(unsigned int *)(v9 + 336);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v783 = 1LL;
                      *(_WORD *)v784 = 2048;
                      *(void *)&v784[2] = v466;
                      v443 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_748;
                    }
                  }
                }

LABEL_749:
                if (v439) {
                  free(v439);
                }
                *(_DWORD *)(v9 + 336) = -1;
                goto LABEL_752;
              }

LABEL_1391:
              __break(1u);
              return result;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v656 = (char *)_os_log_send_and_compose_impl();
            v777[0] = 16;
            LOBYTE(v758[0]) = 0;
            if (__nwlog_fault(v656, v777, v758))
            {
              if (v777[0] == 17)
              {
                v657 = (os_log_s *)__nwlog_obj();
                os_log_type_t v658 = v777[0];
                if (!os_log_type_enabled(v657, (os_log_type_t)v777[0])) {
                  goto LABEL_1340;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                v659 = "%{public}s called with null parameters";
                goto LABEL_1339;
              }

              if (!LOBYTE(v758[0]))
              {
                v657 = (os_log_s *)__nwlog_obj();
                os_log_type_t v658 = v777[0];
                if (!os_log_type_enabled(v657, (os_log_type_t)v777[0])) {
                  goto LABEL_1340;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                v659 = "%{public}s called with null parameters, backtrace limit exceeded";
                goto LABEL_1339;
              }

              v707 = (char *)__nw_create_backtrace_string();
              v657 = (os_log_s *)__nwlog_obj();
              os_log_type_t v658 = v777[0];
              BOOL v710 = os_log_type_enabled(v657, (os_log_type_t)v777[0]);
              if (!v707)
              {
                if (!v710) {
                  goto LABEL_1340;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                v659 = "%{public}s called with null parameters, no backtrace";
                goto LABEL_1339;
              }

              if (v710)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v707;
                v709 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                goto LABEL_1211;
              }

              goto LABEL_1212;
            }

LABEL_1340:
            if (!v656) {
              goto LABEL_1342;
            }
            goto LABEL_1341;
          }

          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v656 = (char *)_os_log_send_and_compose_impl();
          v777[0] = 16;
          LOBYTE(v758[0]) = 0;
          if (v777[0] != 17)
          {
            if (!LOBYTE(v758[0]))
            {
              v657 = (os_log_s *)__nwlog_obj();
              os_log_type_t v658 = v777[0];
              if (!os_log_type_enabled(v657, (os_log_type_t)v777[0])) {
                goto LABEL_1340;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              v659 = "%{public}s called with null endpoint, backtrace limit exceeded";
              goto LABEL_1339;
            }

            v707 = (char *)__nw_create_backtrace_string();
            v657 = (os_log_s *)__nwlog_obj();
            os_log_type_t v658 = v777[0];
            BOOL v708 = os_log_type_enabled(v657, (os_log_type_t)v777[0]);
            if (!v707)
            {
              if (!v708) {
                goto LABEL_1340;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              v659 = "%{public}s called with null endpoint, no backtrace";
              goto LABEL_1339;
            }

            if (v708)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v707;
              v709 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1211:
              _os_log_impl(&dword_181A5C000, v657, v658, v709, buf, 0x16u);
            }

LABEL_1212:
            free(v707);
            if (!v656)
            {
LABEL_1342:
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
              v735 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v736 = (os_log_s *)__nwlog_obj();
                os_log_type_t v737 = type[0];
                if (!os_log_type_enabled(v736, type[0])) {
                  goto LABEL_1356;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                v738 = "%{public}s called with null http1_connection";
              }

              else if ((_BYTE)aBlock)
              {
                v739 = (char *)__nw_create_backtrace_string();
                v736 = (os_log_s *)__nwlog_obj();
                os_log_type_t v737 = type[0];
                BOOL v740 = os_log_type_enabled(v736, type[0]);
                if (v739)
                {
                  if (v740)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v739;
                    _os_log_impl( &dword_181A5C000,  v736,  v737,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v739);
LABEL_1356:
                  if (v735) {
                    free(v735);
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v741 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    v742 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v743 = type[0];
                    if (os_log_type_enabled(v742, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v744 = "%{public}s called with null http1_connection";
LABEL_1371:
                      _os_log_impl(&dword_181A5C000, v742, v743, v744, buf, 0xCu);
                    }
                  }

                  else if ((_BYTE)aBlock)
                  {
                    v745 = (char *)__nw_create_backtrace_string();
                    v742 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v743 = type[0];
                    BOOL v746 = os_log_type_enabled(v742, type[0]);
                    if (v745)
                    {
                      if (v746)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v745;
                        _os_log_impl( &dword_181A5C000,  v742,  v743,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v745);
                      goto LABEL_1372;
                    }

                    if (v746)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v744 = "%{public}s called with null http1_connection, no backtrace";
                      goto LABEL_1371;
                    }
                  }

                  else
                  {
                    v742 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v743 = type[0];
                    if (os_log_type_enabled(v742, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v744 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                      goto LABEL_1371;
                    }
                  }

LABEL_1372:
                  if (v741) {
                    free(v741);
                  }
                  v411 = 0LL;
                  goto LABEL_801;
                }

                if (!v740) {
                  goto LABEL_1356;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                v738 = "%{public}s called with null http1_connection, no backtrace";
              }

              else
              {
                v736 = (os_log_s *)__nwlog_obj();
                os_log_type_t v737 = type[0];
                if (!os_log_type_enabled(v736, type[0])) {
                  goto LABEL_1356;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                v738 = "%{public}s called with null http1_connection, backtrace limit exceeded";
              }

              _os_log_impl(&dword_181A5C000, v736, v737, v738, buf, 0xCu);
              goto LABEL_1356;
            }

LABEL_1341:
            free(v656);
            goto LABEL_1342;
          }

          v657 = (os_log_s *)__nwlog_obj();
          os_log_type_t v658 = v777[0];
          if (!os_log_type_enabled(v657, (os_log_type_t)v777[0])) {
            goto LABEL_1340;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v659 = "%{public}s called with null endpoint";
        }

        else
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v656 = (char *)_os_log_send_and_compose_impl();
          v777[0] = 16;
          LOBYTE(v758[0]) = 0;
          if (v777[0] != 17)
          {
            if (!LOBYTE(v758[0]))
            {
              v657 = (os_log_s *)__nwlog_obj();
              os_log_type_t v658 = v777[0];
              if (!os_log_type_enabled(v657, (os_log_type_t)v777[0])) {
                goto LABEL_1340;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              v659 = "%{public}s called with null output_handler, backtrace limit exceeded";
              goto LABEL_1339;
            }

            v705 = (char *)__nw_create_backtrace_string();
            v657 = (os_log_s *)__nwlog_obj();
            os_log_type_t v658 = v777[0];
            BOOL v706 = os_log_type_enabled(v657, (os_log_type_t)v777[0]);
            if (!v705)
            {
              if (!v706) {
                goto LABEL_1340;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              v659 = "%{public}s called with null output_handler, no backtrace";
              goto LABEL_1339;
            }

            if (v706)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v705;
              _os_log_impl( &dword_181A5C000,  v657,  v658,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v705);
            goto LABEL_1340;
          }

          v657 = (os_log_s *)__nwlog_obj();
          os_log_type_t v658 = v777[0];
          if (!os_log_type_enabled(v657, (os_log_type_t)v777[0])) {
            goto LABEL_1340;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v659 = "%{public}s called with null output_handler";
        }

LABEL_1339:
        _os_log_impl(&dword_181A5C000, v657, v658, v659, buf, 0xCu);
        goto LABEL_1340;
      }

      v444 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v15 + 320));
      uint64_t v773 = 0LL;
      v774 = &v773;
      uint64_t v775 = 0x2000000000LL;
      char v776 = 0;
      *(void *)os_log_type_t type = 0LL;
      uint64_t v767 = (uint64_t)type;
      uint64_t v768 = 0x3802000000LL;
      v769 = __Block_byref_object_copy__39933;
      v770 = __Block_byref_object_dispose__39934;
      object = 0LL;
      v772 |= 1u;
      uint64_t v445 = MEMORY[0x1895F87A8];
      uint64_t aBlock = MEMORY[0x1895F87A8];
      uint64_t v760 = 0x40000000LL;
      v761 = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke;
      v762 = &unk_189BBD6B0;
      v763 = &v773;
      v764 = type;
      uint64_t v765 = v15;
      nw_protocol_stack_iterate_application_protocols(v444, &aBlock);
      if (*(void *)(v767 + 40)) {
        goto LABEL_725;
      }
      v446 = nw_protocol_stack_copy_transport_protocol(v444);
      BOOL is_quic = nw_protocol_options_is_quic(v446);
      if (v446) {
        os_release(v446);
      }
      if (!is_quic)
      {
LABEL_725:
        *(void *)buf = nw_parameters_shallow_copy(*(void **)(v15 + 320));
        nw::retained_ptr<nw_endpoint *>::operator=(v15 + 320, buf);
      }

      else
      {
        v448 = *(void **)(v15 + 320);
        *(void *)buf = v445;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2;
        uint64_t v783 = (uint64_t)&unk_189BBD700;
        *(void *)v784 = type;
        *(void *)&v784[8] = &v773;
        *(void *)&v784[16] = v15;
        *(void *)&v784[24] = v9;
        nw_parameters_enumerate_transformed_parameters(v448, buf);
      }

      v449 = *(void **)(v767 + 40);
      if (v449)
      {
        v450 = v449;
        sec_protocol_options_clear_tls_application_protocols();
        sec_protocol_options_add_tls_application_protocol(v450, "http/1.1");
        os_release(v450);
      }

      *((_BYTE *)v774 + 24) = 0;
      v451 = *(void **)(v15 + 320);
      v758[0] = v445;
      v758[1] = 0x40000000LL;
      v758[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_73;
      v758[3] = &unk_189BBD728;
      v758[4] = &v773;
      v758[5] = v15;
      nw_parameters_remove_application_protocol_options_from_protocol_stack(v451, v758);
      *(_WORD *)(v15 + 428) |= 8u;
      uint64_t v452 = *(unsigned int *)(v9 + 352) + 1LL;
      uint64_t v453 = v452 << 31 >> 31;
      *(_DWORD *)(v9 + 352) = v452;
      if (v453 == v452 && (v453 & 0x8000000000000000LL) == 0)
      {
LABEL_826:
        uint64_t v515 = *(void *)(v15 + 312);
        v516 = *(void **)(v15 + 264);
        *(void *)v777 = v445;
        *(void *)&v777[8] = 0x40000000LL;
        *(void *)&v777[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_76;
        uint64_t v778 = (uint64_t)&unk_189BBD750;
        *(void *)v779 = v515;
        nw_queue_context_async(v516, v777);
        _Block_object_dispose(type, 8);
        if ((v772 & 1) != 0 && object) {
          os_release(object);
        }
        _Block_object_dispose(&v773, 8);
        if (!v444) {
          return 1LL;
        }
LABEL_830:
        os_release(v444);
        return 1LL;
      }

      __nwlog_obj();
      uint64_t v454 = *(unsigned int *)(v9 + 352);
      *(_DWORD *)v777 = 136446978;
      *(void *)&v777[4] = "nw_http1_establish_new_connection_for_stream";
      *(_WORD *)&v777[12] = 2082;
      *(void *)&v777[14] = "http1->pending_output_handler_count";
      *(_WORD *)&v777[22] = 2048;
      uint64_t v778 = 1LL;
      *(_WORD *)v779 = 2048;
      *(void *)&v779[2] = v454;
      v455 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v757 = OS_LOG_TYPE_ERROR;
      char v756 = 0;
      if (__nwlog_fault(v455, &v757, &v756))
      {
        if (v757 == OS_LOG_TYPE_FAULT)
        {
          v456 = (os_log_s *)__nwlog_obj();
          os_log_type_t v457 = v757;
          if (os_log_type_enabled(v456, v757))
          {
            uint64_t v458 = *(unsigned int *)(v9 + 352);
            *(_DWORD *)v777 = 136446978;
            *(void *)&v777[4] = "nw_http1_establish_new_connection_for_stream";
            *(_WORD *)&v777[12] = 2082;
            *(void *)&v777[14] = "http1->pending_output_handler_count";
            *(_WORD *)&v777[22] = 2048;
            uint64_t v778 = 1LL;
            *(_WORD *)v779 = 2048;
            *(void *)&v779[2] = v458;
            v459 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_822:
            _os_log_impl(&dword_181A5C000, v456, v457, v459, v777, 0x2Au);
          }
        }

        else if (v756)
        {
          v463 = (char *)__nw_create_backtrace_string();
          v456 = (os_log_s *)__nwlog_obj();
          os_log_type_t v457 = v757;
          BOOL v464 = os_log_type_enabled(v456, v757);
          if (v463)
          {
            if (v464)
            {
              uint64_t v465 = *(unsigned int *)(v9 + 352);
              *(_DWORD *)v777 = 136447234;
              *(void *)&v777[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v777[12] = 2082;
              *(void *)&v777[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v777[22] = 2048;
              uint64_t v778 = 1LL;
              *(_WORD *)v779 = 2048;
              *(void *)&v779[2] = v465;
              __int16 v780 = 2082;
              v781 = v463;
              _os_log_impl( &dword_181A5C000,  v456,  v457,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  v777,  0x34u);
            }

            free(v463);
            goto LABEL_823;
          }

          if (v464)
          {
            uint64_t v514 = *(unsigned int *)(v9 + 352);
            *(_DWORD *)v777 = 136446978;
            *(void *)&v777[4] = "nw_http1_establish_new_connection_for_stream";
            *(_WORD *)&v777[12] = 2082;
            *(void *)&v777[14] = "http1->pending_output_handler_count";
            *(_WORD *)&v777[22] = 2048;
            uint64_t v778 = 1LL;
            *(_WORD *)v779 = 2048;
            *(void *)&v779[2] = v514;
            v459 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_822;
          }
        }

        else
        {
          v456 = (os_log_s *)__nwlog_obj();
          os_log_type_t v457 = v757;
          if (os_log_type_enabled(v456, v757))
          {
            uint64_t v513 = *(unsigned int *)(v9 + 352);
            *(_DWORD *)v777 = 136446978;
            *(void *)&v777[4] = "nw_http1_establish_new_connection_for_stream";
            *(_WORD *)&v777[12] = 2082;
            *(void *)&v777[14] = "http1->pending_output_handler_count";
            *(_WORD *)&v777[22] = 2048;
            uint64_t v778 = 1LL;
            *(_WORD *)v779 = 2048;
            *(void *)&v779[2] = v513;
            v459 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_822;
          }
        }
      }

LABEL_661:
    if (v327) {
      free(v327);
    }
    *(_DWORD *)(v9 + 34_Block_object_dispose(&STACK[0x338], 8) = 0;
    goto LABEL_664;
  }

  if ((*(_BYTE *)(v15 + 158) & 1) == 0)
  {
    id v239 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v239, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v240 = *(void *)(v15 + 256);
      int v241 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
      if (v240) {
        LODWORD(v240) = *(_DWORD *)(v240 + 860);
      }
      int v242 = *(_DWORD *)(v15 + 424);
      int v243 = *(_DWORD *)(v9 + 364);
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v783 = (uint64_t)" ";
      *(_WORD *)v784 = 1024;
      *(_DWORD *)&v784[2] = v241;
      *(_WORD *)&v784[6] = 1024;
      *(_DWORD *)&v784[8] = v240;
      *(_WORD *)&v784[12] = 1024;
      *(_DWORD *)&v784[14] = v242;
      *(_WORD *)&v784[18] = 1024;
      *(_DWORD *)&v784[20] = v243;
      __int16 v98 = "%{public}s %{public}s%s<i%u:c%u:s%u> already at max connection width %u, cannot create new connection";
      uint64_t v99 = v239;
      uint32_t v100 = 56;
      goto LABEL_144;
    }
  }

LABEL_400:
  if (v109) {
    free(v109);
  }
  *(_DWORD *)(v9 + 34_Block_object_dispose(&STACK[0x338], 8) = -1;
LABEL_403:
  *(_WORD *)(v15 + 428) |= 0x1000u;
  BOOL result = 1LL;
  if ((*(_BYTE *)(v15 + 158) & 1) == 0 && gLogDatapath)
  {
    v273 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v273, OS_LOG_TYPE_DEBUG)) {
      return 1LL;
    }
    uint64_t v274 = *(void *)(v15 + 256);
    int v275 = *(_DWORD *)(*(void *)(v15 + 248) + 372LL);
    if (v274) {
      LODWORD(v274) = *(_DWORD *)(v274 + 860);
    }
    int v276 = *(_DWORD *)(v15 + 424);
    int v277 = *(_DWORD *)(v9 + 348);
    *(_DWORD *)buf = 136448258;
    *(void *)&uint8_t buf[4] = "nw_http1_add_pending_stream";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v15 + 74;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v783 = (uint64_t)" ";
    *(_WORD *)v784 = 1024;
    *(_DWORD *)&v784[2] = v275;
    *(_WORD *)&v784[6] = 1024;
    *(_DWORD *)&v784[8] = v274;
    *(_WORD *)&v784[12] = 1024;
    *(_DWORD *)&v784[14] = v276;
    *(_WORD *)&v784[18] = 1024;
    *(_DWORD *)&v784[20] = v276;
    *(_WORD *)&v784[24] = 2048;
    *(void *)&v784[26] = v15;
    *(_WORD *)&v784[34] = 1024;
    *(_DWORD *)&v784[36] = v277;
    BOOL v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> added stream %u (%p), now have %u pending streams";
    id v27 = v273;
    uint32_t v28 = 72;
    goto LABEL_43;
  }

  return result;
}

      free(v145);
      goto LABEL_401;
    }

    os_log_type_t v146 = (os_log_s *)__nwlog_obj();
    v147 = type[0];
    if (!os_log_type_enabled(v146, type[0])) {
      goto LABEL_399;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    id v148 = "%{public}s called with null handle";
    goto LABEL_398;
  }

  nw_proxy_config_t v4 = a2;
  int v5 = *((_DWORD *)handle + 6);
  int v6 = (uint64_t *)a1->handle;
  if (v5 == 1) {
    goto LABEL_10;
  }
  if (v5 != 2)
  {
    if (v5 != 3) {
      goto LABEL_401;
    }
    uint64_t v7 = *((void *)handle + 2);
    if (v7)
    {
      int v6 = (uint64_t *)(v7 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    BOOL v145 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (__nwlog_fault(v145, type, aBlock))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v146 = (os_log_s *)__nwlog_obj();
        v147 = type[0];
        if (!os_log_type_enabled(v146, type[0])) {
          goto LABEL_399;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        id v148 = "%{public}s called with null handle->http1_connection";
        goto LABEL_398;
      }

      if (!LOBYTE(aBlock[0]))
      {
        os_log_type_t v146 = (os_log_s *)__nwlog_obj();
        v147 = type[0];
        if (!os_log_type_enabled(v146, type[0])) {
          goto LABEL_399;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        id v148 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_398;
      }

      uint64_t v180 = (char *)__nw_create_backtrace_string();
      os_log_type_t v146 = (os_log_s *)__nwlog_obj();
      v147 = type[0];
      unsigned int v181 = os_log_type_enabled(v146, type[0]);
      if (!v180)
      {
        if (!v181) {
          goto LABEL_399;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        id v148 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_398;
      }

      if (v181)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v180;
        os_log_type_t v182 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
LABEL_290:
        _os_log_impl(&dword_181A5C000, v146, v147, v182, buf, 0x16u);
        goto LABEL_291;
      }

      goto LABEL_291;
    }

            if (!nw_frame_unclaimed_length(a1))
            {
              *((void *)a1 + 10) = 0LL;
              *((void *)a1 + 11) = 0LL;
              nw_frame_cache_return_frame(v6 + 696, (uint64_t)a1);
              goto LABEL_779;
            }

                  goto LABEL_429;
                }

                if (!v278)
                {
                  __nwlog_obj();
                  int v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  int v103 = v279;
                  if (os_log_type_enabled(v84, v279))
                  {
                    int v104 = "on";
                    if (!*(_DWORD *)type) {
                      int v104 = "off";
                    }
                    *(_DWORD *)address = 136446722;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2082;
                    *(void *)&address[7] = v104;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v80;
                    _os_log_impl( &dword_181A5C000,  v84,  v103,  "%{public}s IPV6_V6ONLY %{public}s failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x1Cu);
                  }

                  goto LABEL_400;
                }

                uint64_t v95 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                int v97 = v279;
                __int16 v98 = os_log_type_enabled(v96, v279);
                if (v95)
                {
                  if (v98)
                  {
                    uint64_t v99 = "on";
                    if (!*(_DWORD *)type) {
                      uint64_t v99 = "off";
                    }
                    *(_DWORD *)address = 136446978;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2082;
                    *(void *)&address[7] = v99;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v80;
                    address[14] = 2082;
                    *(void *)&address[15] = v95;
                    _os_log_impl( &dword_181A5C000,  v96,  v97,  "%{public}s IPV6_V6ONLY %{public}s failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x26u);
                  }

                  goto LABEL_195;
                }

                if (v98)
                {
                  uint64_t v105 = "on";
                  if (!*(_DWORD *)type) {
                    uint64_t v105 = "off";
                  }
                  *(_DWORD *)address = 136446722;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 2082;
                  *(void *)&address[7] = v105;
                  address[11] = 1024;
                  *(_DWORD *)&address[12] = v80;
                  _os_log_impl( &dword_181A5C000,  v96,  v97,  "%{public}s IPV6_V6ONLY %{public}s failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x1Cu);
                }

                goto LABEL_428;
              }

void nw_protocol_http1_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v274 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    BOOL v145 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(aBlock[0]))
      {
        os_log_type_t v146 = (os_log_s *)__nwlog_obj();
        os_log_type_t v147 = type[0];
        if (!os_log_type_enabled(v146, type[0])) {
          goto LABEL_399;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        id v148 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_398;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v146 = (os_log_s *)__nwlog_obj();
      os_log_type_t v147 = type[0];
      BOOL v158 = os_log_type_enabled(v146, type[0]);
      if (!backtrace_string)
      {
        if (!v158) {
          goto LABEL_399;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        id v148 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_398;
      }

      if (v158)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v146,  v147,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_399;
    }

    os_log_type_t v146 = (os_log_s *)__nwlog_obj();
    os_log_type_t v147 = type[0];
    if (!os_log_type_enabled(v146, type[0])) {
      goto LABEL_399;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    id v148 = "%{public}s called with null protocol";
LABEL_398:
    _os_log_impl(&dword_181A5C000, v146, v147, v148, buf, 0xCu);
    goto LABEL_399;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    BOOL v145 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(aBlock[0]))
      {
        os_log_type_t v146 = (os_log_s *)__nwlog_obj();
        os_log_type_t v147 = type[0];
        if (!os_log_type_enabled(v146, type[0])) {
          goto LABEL_399;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        id v148 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_398;
      }

      os_log_type_t v159 = (char *)__nw_create_backtrace_string();
      os_log_type_t v146 = (os_log_s *)__nwlog_obj();
      os_log_type_t v147 = type[0];
      BOOL v160 = os_log_type_enabled(v146, type[0]);
      if (!v159)
      {
        if (!v160) {
          goto LABEL_399;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        id v148 = "%{public}s called with null handle, no backtrace";
        goto LABEL_398;
      }

      if (v160)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v159;
        _os_log_impl( &dword_181A5C000,  v146,  v147,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v159);
      if (!v145)
      {
LABEL_401:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
        BOOL v149 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock[0]) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v150 = (os_log_s *)gLogObj;
          os_log_type_t v151 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_440;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
          id v152 = "%{public}s called with null http1";
        }

        else if (LOBYTE(aBlock[0]))
        {
          uint64_t v240 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v150 = (os_log_s *)gLogObj;
          os_log_type_t v151 = type[0];
          BOOL v241 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v240)
          {
            if (v241)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v240;
              _os_log_impl( &dword_181A5C000,  v150,  v151,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v240);
LABEL_440:
            if (!v149) {
              return;
            }
            goto LABEL_441;
          }

          if (!v241) {
            goto LABEL_440;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
          id v152 = "%{public}s called with null http1, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v150 = (os_log_s *)gLogObj;
          os_log_type_t v151 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_440;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
          id v152 = "%{public}s called with null http1, backtrace limit exceeded";
        }

        goto LABEL_439;
      }

LABEL_526:
    if (v222) {
      free(v222);
    }
    nw_proxy_config_t v4 = a2;
    goto LABEL_23;
  }

  if (*(void *)(v12 + 256)) {
    goto LABEL_193;
  }
LABEL_23:
  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v175 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v176 = *(void *)(v11 + 256);
        int v177 = *(_DWORD *)(*(void *)(v11 + 248) + 372LL);
        if (v176) {
          LODWORD(v176) = *(_DWORD *)(v176 + 860);
        }
        int v178 = *(_DWORD *)(v11 + 424);
        output_handler = a1->output_handler;
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_connected";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v11 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v268 = (uint64_t)" ";
        __int16 v269 = 1024;
        *(_DWORD *)uint64_t v270 = v177;
        *(_WORD *)&v270[4] = 1024;
        *(_DWORD *)&v270[6] = v176;
        LOWORD(v271) = 1024;
        *(_DWORD *)((char *)&v271 + 2) = v178;
        HIWORD(v271) = 2048;
        *(void *)uint64_t v272 = output_handler;
        _os_log_impl( &dword_181A5C000,  v175,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> associating connected output handler %p",  buf,  0x3Cu);
      }
    }
  }

  uint64_t v13 = a1->output_handler;
  if (!v13) {
    goto LABEL_193;
  }
  os_log_type_t v14 = *(void **)(v11 + 336);
  BOOL v257 = a1->output_handler;
  if (!v14)
  {
    os_log_type_t v193 = v4;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
    BOOL v194 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v266 = OS_LOG_TYPE_ERROR;
    char v265 = 0;
    if (v266 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v195 = (os_log_s *)__nwlog_obj();
      os_log_type_t v196 = v266;
      if (!os_log_type_enabled(v195, v266)) {
        goto LABEL_469;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      os_log_type_t v197 = "%{public}s called with null endpoint";
      goto LABEL_468;
    }

    if (!v265)
    {
      os_log_type_t v195 = (os_log_s *)__nwlog_obj();
      os_log_type_t v196 = v266;
      if (!os_log_type_enabled(v195, v266)) {
        goto LABEL_469;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      os_log_type_t v197 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_468;
    }

    id v228 = (char *)__nw_create_backtrace_string();
    os_log_type_t v195 = (os_log_s *)__nwlog_obj();
    os_log_type_t v196 = v266;
    BOOL v229 = os_log_type_enabled(v195, v266);
    if (!v228)
    {
      if (!v229) {
        goto LABEL_469;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      os_log_type_t v197 = "%{public}s called with null endpoint, no backtrace";
      goto LABEL_468;
    }

    if (v229)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v228;
      _os_log_impl( &dword_181A5C000,  v195,  v196,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v228);
LABEL_469:
    if (!v194) {
      goto LABEL_471;
    }
    goto LABEL_470;
  }

  uint64_t v15 = *(void **)(v11 + 320);
  if (!v15)
  {
    os_log_type_t v193 = v4;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
    BOOL v194 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v266 = OS_LOG_TYPE_ERROR;
    char v265 = 0;
    if (v266 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v195 = (os_log_s *)__nwlog_obj();
      os_log_type_t v196 = v266;
      if (!os_log_type_enabled(v195, v266)) {
        goto LABEL_469;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      os_log_type_t v197 = "%{public}s called with null parameters";
      goto LABEL_468;
    }

    if (!v265)
    {
      os_log_type_t v195 = (os_log_s *)__nwlog_obj();
      os_log_type_t v196 = v266;
      if (!os_log_type_enabled(v195, v266)) {
        goto LABEL_469;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      os_log_type_t v197 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_468;
    }

    os_log_type_t v230 = (char *)__nw_create_backtrace_string();
    os_log_type_t v195 = (os_log_s *)__nwlog_obj();
    os_log_type_t v196 = v266;
    BOOL v231 = os_log_type_enabled(v195, v266);
    if (v230)
    {
      if (v231)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v230;
        _os_log_impl( &dword_181A5C000,  v195,  v196,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v230);
      if (!v194)
      {
LABEL_471:
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
        int v243 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock[0]) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v244 = (os_log_s *)__nwlog_obj();
          os_log_type_t v245 = type[0];
          if (!os_log_type_enabled(v244, type[0])) {
            goto LABEL_485;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          int v246 = "%{public}s called with null http1_connection";
        }

        else if (LOBYTE(aBlock[0]))
        {
          int v247 = (char *)__nw_create_backtrace_string();
          uint64_t v244 = (os_log_s *)__nwlog_obj();
          os_log_type_t v245 = type[0];
          BOOL v248 = os_log_type_enabled(v244, type[0]);
          if (v247)
          {
            if (v248)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v247;
              _os_log_impl( &dword_181A5C000,  v244,  v245,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v247);
LABEL_485:
            if (v243) {
              free(v243);
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
            BOOL v249 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock[0]) = 0;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              uint64_t v250 = (os_log_s *)__nwlog_obj();
              os_log_type_t v251 = type[0];
              if (os_log_type_enabled(v250, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                v252 = "%{public}s called with null http1_connection";
LABEL_500:
                _os_log_impl(&dword_181A5C000, v250, v251, v252, buf, 0xCu);
              }
            }

            else if (LOBYTE(aBlock[0]))
            {
              uint64_t v253 = (char *)__nw_create_backtrace_string();
              uint64_t v250 = (os_log_s *)__nwlog_obj();
              os_log_type_t v251 = type[0];
              BOOL v254 = os_log_type_enabled(v250, type[0]);
              if (v253)
              {
                if (v254)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v253;
                  _os_log_impl( &dword_181A5C000,  v250,  v251,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v253);
                goto LABEL_501;
              }

              if (v254)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                v252 = "%{public}s called with null http1_connection, no backtrace";
                goto LABEL_500;
              }
            }

            else
            {
              uint64_t v250 = (os_log_s *)__nwlog_obj();
              os_log_type_t v251 = type[0];
              if (os_log_type_enabled(v250, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                v252 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                goto LABEL_500;
              }
            }

      if (v236) {
        free(v236);
      }
      uint64_t v106 = 14;
      uint64_t v10 = (unsigned __int16 *)(v9 + 872);
      if ((*(_BYTE *)(v9 + 158) & 1) != 0) {
        goto LABEL_117;
      }
LABEL_191:
      id v115 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
      {
        BOOL v116 = *(void *)(v9 + 488);
        if (v116) {
          LODWORD(v116) = *(_DWORD *)(v116 + 424);
        }
        if (v106 >= 0x24) {
          abort();
        }
        __int16 v117 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
        int v118 = *(_DWORD *)(v9 + 860);
        uint64_t v119 = off_189BC0D50[v106];
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http1_parser_signal_eof_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v9 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v117;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v118;
        LOWORD(v262) = 1024;
        *(_DWORD *)((char *)&v262 + 2) = v116;
        WORD3(v262) = 2080;
        *((void *)&v262 + 1) = v119;
        _os_log_impl( &dword_181A5C000,  v115,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> parser eof did not terminate full message with errno: %s, deferring input error",  buf,  0x3Cu);
      }

      goto LABEL_117;
    }

    if ((v76 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          int v131 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v132 = *(void *)(v9 + 488);
            uint64_t v133 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
            uint64_t v134 = *(_DWORD *)(v9 + 860);
            if (v132) {
              LODWORD(v132) = *(_DWORD *)(v132 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v9 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v133;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v134;
            LOWORD(v262) = 1024;
            *(_DWORD *)((char *)&v262 + 2) = v132;
            _os_log_impl( &dword_181A5C000,  v131,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already closed",  buf,  0x32u);
            uint64_t v10 = (unsigned __int16 *)(v9 + 872);
          }
        }
      }

      goto LABEL_117;
    }

    *(_BYTE *)(v9 + 874) = BYTE2(v76);
    nw_protocol *v256 = v76 | 0x4100;
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        id v232 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v232, OS_LOG_TYPE_DEBUG))
        {
          BOOL v233 = *(void *)(v9 + 488);
          BOOL v234 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
          BOOL v235 = *(_DWORD *)(v9 + 860);
          if (v233) {
            LODWORD(v233) = *(_DWORD *)(v233 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v234;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v235;
          LOWORD(v262) = 1024;
          *(_DWORD *)((char *)&v262 + 2) = v233;
          _os_log_impl( &dword_181A5C000,  v232,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
          uint64_t v10 = (unsigned __int16 *)(v9 + 872);
        }
      }
    }

    os_log_type_t v120 = *(void *)(v9 + 480);
    if (!v120)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
      id v228 = (char *)_os_log_send_and_compose_impl();
      v265[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (v265[0] == 17)
      {
        BOOL v229 = (os_log_s *)__nwlog_obj();
        os_log_type_t v230 = v265[0];
        if (!os_log_type_enabled(v229, (os_log_type_t)v265[0])) {
          goto LABEL_536;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        BOOL v231 = "%{public}s called with null http1";
      }

      else if (type)
      {
        uint64_t v240 = (char *)__nw_create_backtrace_string();
        BOOL v229 = (os_log_s *)__nwlog_obj();
        os_log_type_t v230 = v265[0];
        BOOL v241 = os_log_type_enabled(v229, (os_log_type_t)v265[0]);
        if (v240)
        {
          if (v241)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v240;
            _os_log_impl( &dword_181A5C000,  v229,  v230,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v240);
          goto LABEL_536;
        }

        if (!v241) {
          goto LABEL_536;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        BOOL v231 = "%{public}s called with null http1, no backtrace";
      }

      else
      {
        BOOL v229 = (os_log_s *)__nwlog_obj();
        os_log_type_t v230 = v265[0];
        if (!os_log_type_enabled(v229, (os_log_type_t)v265[0])) {
          goto LABEL_536;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        BOOL v231 = "%{public}s called with null http1, backtrace limit exceeded";
      }

      uint64_t v253 = buf;
LABEL_535:
      _os_log_impl(&dword_181A5C000, v229, v230, v231, v253, 0xCu);
      goto LABEL_536;
    }

    __int16 v121 = *v10;
    os_log_type_t v122 = v121 | (*((unsigned __int8 *)v10 + 2) << 16);
    if ((v121 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v9 + 158) & 1) != 0
        || !gLogDatapath
        || (os_log_type_t v147 = (os_log_s *)__nwlog_obj(), !os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG)))
      {
LABEL_294:
        if (*(void *)(v9 + 488)) {
          goto LABEL_117;
        }
LABEL_295:
        uint64_t v180 = *(void *)(v9 + 784);
        if (v180)
        {
          nw_queue_set_timer_values(v180, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }

        else
        {
          if ((*(_BYTE *)(v9 + 158) & 1) == 0)
          {
            BOOL v181 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
            {
              os_log_type_t v182 = *(void *)(v9 + 488);
              BOOL v183 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
              uint64_t v184 = *(_DWORD *)(v9 + 860);
              if (v182) {
                LODWORD(v182) = *(_DWORD *)(v182 + 424);
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&_BYTE buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v183;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v184;
              LOWORD(v262) = 1024;
              *(_DWORD *)((char *)&v262 + 2) = v182;
              _os_log_impl( &dword_181A5C000,  v181,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
            }
          }

          BOOL v185 = *(void *)(v9 + 608);
          unsigned int v186 = *(void **)(v9 + 496);
          *(void *)buf = v71;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
          *(void *)&_BYTE buf[24] = &unk_189BBD518;
          *(void *)&buf[32] = v185;
          nw_queue_context_async(v186, buf);
        }

        goto LABEL_117;
      }

      id v148 = *(void *)(v9 + 488);
      BOOL v149 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
      id v150 = *(_DWORD *)(v9 + 860);
      if (v148) {
        LODWORD(v14_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v148 + 424);
      }
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v9 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v149;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v150;
      LOWORD(v262) = 1024;
      *(_DWORD *)((char *)&v262 + 2) = v148;
      _os_log_impl( &dword_181A5C000,  v147,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
      goto LABEL_538;
    }

    *((_BYTE *)v10 + 2) = BYTE2(v122);
    uint64_t *v10 = v122 | 0x800;
    uint64_t v123 = *(unsigned int *)(v120 + 368) + 1LL;
    __int16 v124 = v123 << 31 >> 31;
    *(_DWORD *)(v120 + 36_Block_object_dispose(&STACK[0x338], 8) = v123;
    if (v124 == v123 && (v124 & 0x8000000000000000LL) == 0)
    {
LABEL_289:
      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          BOOL v242 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG))
          {
            int v243 = *(void *)(v9 + 488);
            uint64_t v244 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
            os_log_type_t v245 = *(_DWORD *)(v9 + 860);
            if (v243) {
              LODWORD(v243) = *(_DWORD *)(v243 + 424);
            }
            int v246 = *(_DWORD *)(v120 + 368) + *(_DWORD *)(v120 + 364);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v9 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v244;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v245;
            LOWORD(v262) = 1024;
            *(_DWORD *)((char *)&v262 + 2) = v243;
            WORD3(v262) = 1024;
            DWORD2(v262) = v246;
            _os_log_impl( &dword_181A5C000,  v242,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
            uint64_t v10 = (unsigned __int16 *)(v9 + 872);
          }
        }
      }

      int v177 = *(void **)(v9 + 496);
      if (!v177)
      {
        __nwlog_obj();
        *(_DWORD *)char v265 = 136446210;
        *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        id v228 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v259 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v229 = (os_log_s *)__nwlog_obj();
          os_log_type_t v230 = type;
          if (!os_log_type_enabled(v229, type)) {
            goto LABEL_536;
          }
          *(_DWORD *)char v265 = 136446210;
          *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v231 = "%{public}s called with null http1_connection->context";
LABEL_534:
          uint64_t v253 = v265;
          goto LABEL_535;
        }

        if (!v259)
        {
          BOOL v229 = (os_log_s *)__nwlog_obj();
          os_log_type_t v230 = type;
          if (!os_log_type_enabled(v229, type)) {
            goto LABEL_536;
          }
          *(_DWORD *)char v265 = 136446210;
          *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v231 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_534;
        }

        BOOL v249 = (char *)__nw_create_backtrace_string();
        BOOL v229 = (os_log_s *)__nwlog_obj();
        os_log_type_t v230 = type;
        uint64_t v250 = os_log_type_enabled(v229, type);
        if (!v249)
        {
          if (!v250) {
            goto LABEL_536;
          }
          *(_DWORD *)char v265 = 136446210;
          *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v231 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_534;
        }

        if (!v250) {
          goto LABEL_510;
        }
        *(_DWORD *)char v265 = 136446466;
        *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v265[12] = 2082;
        *(void *)&v265[14] = v249;
        os_log_type_t v251 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
        goto LABEL_509;
      }

      int v178 = *(void *)(v9 + 480);
      if (v178)
      {
        uint64_t v179 = *(void *)(v178 + 200);
        *(void *)buf = v71;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        *(void *)&_BYTE buf[24] = &unk_189BBD540;
        *(void *)&buf[32] = v179;
        nw_queue_context_async(v177, buf);
        goto LABEL_294;
      }

      __nwlog_obj();
      *(_DWORD *)char v265 = 136446210;
      *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      id v228 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v259 = 0;
      if (__nwlog_fault(v228, &type, &v259))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v229 = (os_log_s *)__nwlog_obj();
          os_log_type_t v230 = type;
          if (!os_log_type_enabled(v229, type)) {
            goto LABEL_536;
          }
          *(_DWORD *)char v265 = 136446210;
          *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v231 = "%{public}s called with null http1";
          goto LABEL_534;
        }

        if (!v259)
        {
          BOOL v229 = (os_log_s *)__nwlog_obj();
          os_log_type_t v230 = type;
          if (!os_log_type_enabled(v229, type)) {
            goto LABEL_536;
          }
          *(_DWORD *)char v265 = 136446210;
          *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v231 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_534;
        }

        BOOL v249 = (char *)__nw_create_backtrace_string();
        BOOL v229 = (os_log_s *)__nwlog_obj();
        os_log_type_t v230 = type;
        v252 = os_log_type_enabled(v229, type);
        if (!v249)
        {
          if (!v252) {
            goto LABEL_536;
          }
          *(_DWORD *)char v265 = 136446210;
          *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v231 = "%{public}s called with null http1, no backtrace";
          goto LABEL_534;
        }

        if (!v252) {
          goto LABEL_510;
        }
        *(_DWORD *)char v265 = 136446466;
        *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v265[12] = 2082;
        *(void *)&v265[14] = v249;
        os_log_type_t v251 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_509:
        _os_log_impl(&dword_181A5C000, v229, v230, v251, v265, 0x16u);
LABEL_510:
        free(v249);
        if (v228) {
LABEL_537:
        }
          free(v228);
LABEL_538:
        uint64_t v10 = (unsigned __int16 *)(v9 + 872);
        if (*(void *)(v9 + 488)) {
          goto LABEL_117;
        }
        goto LABEL_295;
      }

LABEL_501:
            if (v249) {
              free(v249);
            }
            __int16 v16 = 0LL;
            nw_proxy_config_t v4 = v193;
            uint64_t v13 = v257;
            goto LABEL_157;
          }

          if (!v248) {
            goto LABEL_485;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          int v246 = "%{public}s called with null http1_connection, no backtrace";
        }

        else
        {
          uint64_t v244 = (os_log_s *)__nwlog_obj();
          os_log_type_t v245 = type[0];
          if (!os_log_type_enabled(v244, type[0])) {
            goto LABEL_485;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          int v246 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v244, v245, v246, buf, 0xCu);
        goto LABEL_485;
      }

    if (v247) {
      free(v247);
    }
LABEL_503:

    _Block_object_dispose(out, 8);
  }

  BOOL v254 = (void *)v402[3];
  if (v254)
  {
    free(v254);
    v402[3] = 0LL;
  }

LABEL_507:
  _Block_object_dispose(buf, 8);

LABEL_508:
  _Block_object_dispose(&v401, 8);

  return v297;
}

LABEL_507:
  if (v200) {
    free(v200);
  }
  uint64_t v13 = v257;
LABEL_54:
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000LL;
  uint64_t v268 = (uint64_t)v16;
  aBlock[0] = v27;
  aBlock[1] = 0x40000000LL;
  aBlock[2] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
  aBlock[3] = &unk_189BBD4F0;
  aBlock[4] = buf;
  *((void *)v16 + 76) = _Block_copy(aBlock);
  _Block_object_dispose(buf, 8);
  if ((*((_BYTE *)v16 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v212 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v212, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v213 = *((void *)v16 + 61);
        int v214 = *(_DWORD *)(*((void *)v16 + 60) + 372LL);
        int v215 = *((_DWORD *)v16 + 215);
        if (v213) {
          LODWORD(v213) = *(_DWORD *)(v213 + 424);
        }
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v16 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v268 = (uint64_t)" ";
        __int16 v269 = 1024;
        *(_DWORD *)uint64_t v270 = v214;
        *(_WORD *)&v270[4] = 1024;
        *(_DWORD *)&v270[6] = v215;
        LOWORD(v271) = 1024;
        *(_DWORD *)((char *)&v271 + 2) = v213;
        HIWORD(v271) = 2048;
        *(void *)uint64_t v272 = v16;
        _os_log_impl( &dword_181A5C000,  v212,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created %p",  buf,  0x3Cu);
        uint64_t v13 = v257;
      }
    }
  }

  os_log_type_t v38 = (nw_path **)(v16 + 32);
  nw_protocol_replace_input_handler((uint64_t)v13, v11, (uint64_t)v16);
  *__int16 v16 = *(_OWORD *)v13->flow_id;
  char v39 = (void *)*((void *)v16 + 92);
  if (!v39)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
    int v204 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v205 = (os_log_s *)__nwlog_obj();
      os_log_type_t v206 = type[0];
      if (!os_log_type_enabled(v205, type[0])) {
        goto LABEL_513;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
      uint64_t v207 = "%{public}s called with null parameters";
    }

    else if (LOBYTE(aBlock[0]))
    {
      BOOL v234 = (char *)__nw_create_backtrace_string();
      int v205 = (os_log_s *)__nwlog_obj();
      os_log_type_t v206 = type[0];
      BOOL v235 = os_log_type_enabled(v205, type[0]);
      if (v234)
      {
        if (v235)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v234;
          _os_log_impl( &dword_181A5C000,  v205,  v206,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v234);
LABEL_513:
        if (v204) {
          free(v204);
        }
        uint64_t v13 = v257;
        uint64_t v57 = *v38;
        if (*v38) {
          goto LABEL_86;
        }
        goto LABEL_88;
      }

      if (!v235) {
        goto LABEL_513;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
      uint64_t v207 = "%{public}s called with null parameters, no backtrace";
    }

    else
    {
      int v205 = (os_log_s *)__nwlog_obj();
      os_log_type_t v206 = type[0];
      if (!os_log_type_enabled(v205, type[0])) {
        goto LABEL_513;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
      uint64_t v207 = "%{public}s called with null parameters, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v205, v206, v207, buf, 0xCu);
    goto LABEL_513;
  }

  if (!*((void *)v16 + 66))
  {
    BOOL v40 = v39;
    id v41 = *(id *)(v40[13] + 136LL);

    id v42 = nw_path_copy_flow_registration(v41, (uint64_t)v16);
    char v43 = *((_BYTE *)v16 + 568);
    if ((v43 & 1) != 0)
    {
      int v44 = (void *)*((void *)v16 + 70);
      if (v44)
      {
        os_release(v44);
        char v43 = *((_BYTE *)v16 + 568);
      }
    }

    *((void *)v16 + 70) = v42;
    *((_BYTE *)v16 + 56_Block_object_dispose(&STACK[0x338], 8) = v43 | 1;
    if (v42)
    {
      id v45 = nw_path_flow_registration_copy_endpoint(v42);
      id v46 = nw_path_flow_registration_copy_parameters(*((void **)v16 + 70));
      char v47 = nw_endpoint_copy_association_with_evaluator(v45, v46, 0LL);
      char v48 = *((_BYTE *)v16 + 536);
      if ((v48 & 1) != 0)
      {
        uint64_t v49 = (void *)*((void *)v16 + 66);
        if (v49)
        {
          os_release(v49);
          char v48 = *((_BYTE *)v16 + 536);
        }
      }

      *((void *)v16 + 66) = v47;
      *((_BYTE *)v16 + 536) = v48 | 1;
      if (v47)
      {
        *(void *)buf = nw_protocol_instance_stub_create((nw_protocol *)v16);
        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v16 + 34), buf);
        nw_association_register_internal( *((void **)v16 + 66),  v40,  *((void **)v16 + 68),  0,  0,  &__block_literal_global_65);
        id v50 = nw_association_copy_current_path(*((void **)v16 + 66), v46);
        if (v50)
        {
          char v51 = v50;
          uint64_t v52 = (nw_path *)nw_path_copy_for_flow_registration(v50, *((void **)v16 + 70));
          if (v52)
          {
            object = v52;
            if (*v38 != v52)
            {
              *(void *)buf = os_retain(v52);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v16 + 32), buf);
              uint64_t v52 = object;
            }

            if (nw_path_has_flows(v52)) {
              __int16 v53 = 4096;
            }
            else {
              __int16 v53 = 0;
            }
            int v54 = *((_WORD *)v16 + 436) & 0xEFFF | (*((unsigned __int8 *)v16 + 874) << 16);
            *((_WORD *)v16 + 436) = *((_WORD *)v16 + 436) & 0xEFFF | v53;
            *((_BYTE *)v16 + 874) = BYTE2(v54);
            id v55 = nw_parameters_copy_effective_proxy_config(v40);
            if (v55)
            {
              os_log_type_t v56 = v55;
              if (nw_path_has_proxy_config(v51, v55))
              {
                *(void *)buf = os_retain(v56);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v16 + 36), buf);
              }

              os_release(v56);
            }

            os_release(object);
          }

          os_release(v51);
        }
      }

      if (v46) {
        os_release(v46);
      }
      uint64_t v13 = v257;
      if (v45) {
        os_release(v45);
      }
    }

    if (v41) {
      os_release(v41);
    }
  }

  uint64_t v57 = *v38;
  if (*v38)
  {
LABEL_86:
  }

void nw_protocol_http1_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v968 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    BOOL v67 = (char *)_os_log_send_and_compose_impl();
    v963[0] = 16;
    LOBYTE(aBlock) = 0;
    if (v963[0] != 17)
    {
      if (!(_BYTE)aBlock)
      {
        uint64_t v68 = (os_log_s *)__nwlog_obj();
        os_log_type_t v69 = v963[0];
        if (!os_log_type_enabled(v68, (os_log_type_t)v963[0])) {
          goto LABEL_1058;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v70 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_1057;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = v963[0];
      BOOL v76 = os_log_type_enabled(v68, (os_log_type_t)v963[0]);
      if (!backtrace_string)
      {
        if (!v76) {
          goto LABEL_1058;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v70 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_1057;
      }

      if (v76)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_1058;
    }

    uint64_t v68 = (os_log_s *)__nwlog_obj();
    os_log_type_t v69 = v963[0];
    if (!os_log_type_enabled(v68, (os_log_type_t)v963[0])) {
      goto LABEL_1058;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v70 = "%{public}s called with null protocol";
LABEL_1057:
    _os_log_impl(&dword_181A5C000, v68, v69, v70, buf, 0xCu);
    goto LABEL_1058;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    BOOL v67 = (char *)_os_log_send_and_compose_impl();
    v963[0] = 16;
    LOBYTE(aBlock) = 0;
    if (v963[0] != 17)
    {
      if (!(_BYTE)aBlock)
      {
        uint64_t v68 = (os_log_s *)__nwlog_obj();
        os_log_type_t v69 = v963[0];
        if (!os_log_type_enabled(v68, (os_log_type_t)v963[0])) {
          goto LABEL_1058;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v70 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_1057;
      }

      uint64_t v77 = (char *)__nw_create_backtrace_string();
      uint64_t v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = v963[0];
      BOOL v78 = os_log_type_enabled(v68, (os_log_type_t)v963[0]);
      if (!v77)
      {
        if (!v78) {
          goto LABEL_1058;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v70 = "%{public}s called with null handle, no backtrace";
        goto LABEL_1057;
      }

      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v77;
        _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v77);
      if (!v67)
      {
LABEL_1060:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
        uint64_t v71 = (char *)_os_log_send_and_compose_impl();
        v963[0] = 16;
        LOBYTE(aBlock) = 0;
        if (v963[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v72 = (os_log_s *)gLogObj;
          os_log_type_t v73 = v963[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v963[0])) {
            goto LABEL_1094;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
          uint64_t v74 = "%{public}s called with null http1";
        }

        else if ((_BYTE)aBlock)
        {
          int v693 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v72 = (os_log_s *)gLogObj;
          os_log_type_t v73 = v963[0];
          BOOL v694 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v963[0]);
          if (v693)
          {
            if (v694)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v693;
              _os_log_impl( &dword_181A5C000,  v72,  v73,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v693);
LABEL_1094:
            if (!v71) {
              return;
            }
            goto LABEL_1095;
          }

          if (!v694) {
            goto LABEL_1094;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
          uint64_t v74 = "%{public}s called with null http1, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v72 = (os_log_s *)gLogObj;
          os_log_type_t v73 = v963[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v963[0])) {
            goto LABEL_1094;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
          uint64_t v74 = "%{public}s called with null http1, backtrace limit exceeded";
        }

        goto LABEL_1093;
      }

LABEL_1059:
      free(v67);
      goto LABEL_1060;
    }

    uint64_t v68 = (os_log_s *)__nwlog_obj();
    os_log_type_t v69 = v963[0];
    if (!os_log_type_enabled(v68, (os_log_type_t)v963[0])) {
      goto LABEL_1058;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v70 = "%{public}s called with null handle";
    goto LABEL_1057;
  }

  int v3 = *((_DWORD *)handle + 6);
  nw_proxy_config_t v4 = (uint64_t *)a1->handle;
  if (v3 == 1) {
    goto LABEL_10;
  }
  if (v3 != 2)
  {
    if (v3 != 3) {
      goto LABEL_1060;
    }
    uint64_t v5 = *((void *)handle + 2);
    if (v5)
    {
      nw_proxy_config_t v4 = (uint64_t *)(v5 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    BOOL v67 = (char *)_os_log_send_and_compose_impl();
    v963[0] = 16;
    LOBYTE(aBlock) = 0;
    if (__nwlog_fault(v67, v963, &aBlock))
    {
      if (v963[0] == 17)
      {
        uint64_t v68 = (os_log_s *)__nwlog_obj();
        os_log_type_t v69 = v963[0];
        if (!os_log_type_enabled(v68, (os_log_type_t)v963[0])) {
          goto LABEL_1058;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v70 = "%{public}s called with null handle->http1_connection";
        goto LABEL_1057;
      }

      if (!(_BYTE)aBlock)
      {
        uint64_t v68 = (os_log_s *)__nwlog_obj();
        os_log_type_t v69 = v963[0];
        if (!os_log_type_enabled(v68, (os_log_type_t)v963[0])) {
          goto LABEL_1058;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v70 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_1057;
      }

      __int128 v93 = (char *)__nw_create_backtrace_string();
      uint64_t v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = v963[0];
      BOOL v94 = os_log_type_enabled(v68, (os_log_type_t)v963[0]);
      if (!v93)
      {
        if (!v94) {
          goto LABEL_1058;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v70 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_1057;
      }

      if (v94)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v93;
        uint64_t v95 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
LABEL_184:
        _os_log_impl(&dword_181A5C000, v68, v69, v95, buf, 0x16u);
        goto LABEL_185;
      }

      goto LABEL_185;
    }

              if (v556) {
                free(v556);
              }
              goto LABEL_155;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
            int v62 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(v643) = 16;
            LOBYTE(v647) = 0;
            if (__nwlog_fault(v62, &v643, &v647))
            {
              if (v643 == 17)
              {
                int v63 = (os_log_s *)__nwlog_obj();
                uint64_t v64 = v643;
                if (!os_log_type_enabled(v63, (os_log_type_t)v643)) {
                  goto LABEL_175;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                BOOL v65 = "%{public}s did not find response on frame";
                goto LABEL_173;
              }

              if (!(_BYTE)v647)
              {
                int v63 = (os_log_s *)__nwlog_obj();
                uint64_t v64 = v643;
                if (!os_log_type_enabled(v63, (os_log_type_t)v643)) {
                  goto LABEL_175;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                BOOL v65 = "%{public}s did not find response on frame, backtrace limit exceeded";
                goto LABEL_173;
              }

              os_log_type_t v75 = (char *)__nw_create_backtrace_string();
              BOOL v76 = (os_log_s *)__nwlog_obj();
              uint64_t v77 = v643;
              BOOL v80 = os_log_type_enabled(v76, (os_log_type_t)v643);
              if (v75)
              {
                if (!v80) {
                  goto LABEL_165;
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                int v638 = 2082;
                *(void *)BOOL v639 = v75;
                os_log_type_t v79 = "%{public}s did not find response on frame, dumping backtrace:%{public}s";
LABEL_164:
                _os_log_impl(&dword_181A5C000, v76, v77, v79, buf, 0x16u);
LABEL_165:
                free(v75);
                if (!v62) {
                  goto LABEL_177;
                }
                goto LABEL_176;
              }

              if (v80)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                BOOL v65 = "%{public}s did not find response on frame, no backtrace";
                goto LABEL_310;
              }
            }
          }

          else
          {
            uint64_t v27 = nw_http_metadata_copy_request(v21);
            if (v27)
            {
              int v28 = v27;
              int v29 = nw_http_request_copy(v27);
              metadata_for_response = nw_http_create_metadata_for_request((void *)v29);
              goto LABEL_72;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
            int v62 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(v643) = 16;
            LOBYTE(v647) = 0;
            if (__nwlog_fault(v62, &v643, &v647))
            {
              if (v643 == 17)
              {
                int v63 = (os_log_s *)__nwlog_obj();
                uint64_t v64 = v643;
                if (!os_log_type_enabled(v63, (os_log_type_t)v643)) {
                  goto LABEL_175;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                BOOL v65 = "%{public}s did not find request on frame";
                goto LABEL_173;
              }

              if (!(_BYTE)v647)
              {
                int v63 = (os_log_s *)__nwlog_obj();
                uint64_t v64 = v643;
                if (!os_log_type_enabled(v63, (os_log_type_t)v643)) {
                  goto LABEL_175;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                BOOL v65 = "%{public}s did not find request on frame, backtrace limit exceeded";
                goto LABEL_173;
              }

              os_log_type_t v75 = (char *)__nw_create_backtrace_string();
              BOOL v76 = (os_log_s *)__nwlog_obj();
              uint64_t v77 = v643;
              BOOL v78 = os_log_type_enabled(v76, (os_log_type_t)v643);
              if (v75)
              {
                if (!v78) {
                  goto LABEL_165;
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                int v638 = 2082;
                *(void *)BOOL v639 = v75;
                os_log_type_t v79 = "%{public}s did not find request on frame, dumping backtrace:%{public}s";
                goto LABEL_164;
              }

              if (v78)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                BOOL v65 = "%{public}s did not find request on frame, no backtrace";
LABEL_310:
                uint64_t v81 = v76;
                uint64_t v82 = v77;
                goto LABEL_174;
              }
            }
          }

  uint64_t v466 = v188;
  uint64_t v467 = (v150[12] & 0x100LL) == 0;

  if (!v467)
  {
    if (setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 4, &v551, 4u) < 0)
    {
      id v45 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v480 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v553 = "nw_socket_set_common_sockopts";
        os_log_type_t v554 = 2080;
        *(void *)uint64_t v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v45;
        _os_log_impl( &dword_181A5C000,  v480,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_REUSEADDR failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      int v481 = (os_log_s *)__nwlog_obj();
      int v474 = v481;
      if ((_DWORD)v45 == 22)
      {
        if (os_log_type_enabled(v481, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          int v553 = "nw_socket_set_common_sockopts";
          os_log_type_t v554 = 1024;
          *(_DWORD *)uint64_t v555 = 22;
          int v475 = "%{public}s setsockopt SO_REUSEADDR failed %{darwin.errno}d";
          goto LABEL_1131;
        }

LABEL_1058:
    if (!v67) {
      goto LABEL_1060;
    }
    goto LABEL_1059;
  }

  uint64_t v6 = *((void *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    BOOL v67 = (char *)_os_log_send_and_compose_impl();
    v963[0] = 16;
    LOBYTE(aBlock) = 0;
    if (v963[0] == 17)
    {
      uint64_t v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = v963[0];
      if (!os_log_type_enabled(v68, (os_log_type_t)v963[0])) {
        goto LABEL_1058;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint64_t v70 = "%{public}s called with null handle->http1_stream";
      goto LABEL_1057;
    }

    if (!(_BYTE)aBlock)
    {
      uint64_t v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = v963[0];
      if (!os_log_type_enabled(v68, (os_log_type_t)v963[0])) {
        goto LABEL_1058;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint64_t v70 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_1057;
    }

    __int128 v93 = (char *)__nw_create_backtrace_string();
    uint64_t v68 = (os_log_s *)__nwlog_obj();
    os_log_type_t v69 = v963[0];
    BOOL v96 = os_log_type_enabled(v68, (os_log_type_t)v963[0]);
    if (!v93)
    {
      if (!v96) {
        goto LABEL_1058;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint64_t v70 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_1057;
    }

    if (v96)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v93;
      uint64_t v95 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_184;
    }

          os_release(v321);
          goto LABEL_1059;
        }

        os_log_type_t v369 = v150;
        *(_DWORD *)buf = 136446466;
        int v553 = "nw_socket_set_common_sockopts";
        os_log_type_t v554 = 1024;
        *(_DWORD *)uint64_t v555 = v367;
        uint64_t v370 = (char *)_os_log_send_and_compose_impl();
        v548[0] = OS_LOG_TYPE_ERROR;
        v547[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v370, v548, v547))
        {
          if (v548[0] == OS_LOG_TYPE_FAULT)
          {
            int v371 = (os_log_s *)__nwlog_obj();
            int v372 = v548[0];
            if (!os_log_type_enabled(v371, v548[0])) {
              goto LABEL_988;
            }
            *(_DWORD *)buf = 136446466;
            int v553 = "nw_socket_set_common_sockopts";
            os_log_type_t v554 = 1024;
            *(_DWORD *)uint64_t v555 = v367;
            uint64_t v373 = "%{public}s setsockopt IPV6_RECVTCLASS failed %{darwin.errno}d";
            goto LABEL_987;
          }

          if (v547[0] == OS_LOG_TYPE_DEFAULT)
          {
            int v371 = (os_log_s *)__nwlog_obj();
            int v372 = v548[0];
            if (!os_log_type_enabled(v371, v548[0])) {
              goto LABEL_988;
            }
            *(_DWORD *)buf = 136446466;
            int v553 = "nw_socket_set_common_sockopts";
            os_log_type_t v554 = 1024;
            *(_DWORD *)uint64_t v555 = v367;
            uint64_t v373 = "%{public}s setsockopt IPV6_RECVTCLASS failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_987;
          }

          uint64_t v376 = (char *)__nw_create_backtrace_string();
          int v371 = (os_log_s *)__nwlog_obj();
          int v372 = v548[0];
          uint64_t v377 = os_log_type_enabled(v371, v548[0]);
          if (!v376)
          {
            if (!v377) {
              goto LABEL_988;
            }
            *(_DWORD *)buf = 136446466;
            int v553 = "nw_socket_set_common_sockopts";
            os_log_type_t v554 = 1024;
            *(_DWORD *)uint64_t v555 = v367;
            uint64_t v373 = "%{public}s setsockopt IPV6_RECVTCLASS failed %{darwin.errno}d, no backtrace";
            goto LABEL_987;
          }

          if (v377)
          {
            *(_DWORD *)buf = 136446722;
            int v553 = "nw_socket_set_common_sockopts";
            os_log_type_t v554 = 1024;
            *(_DWORD *)uint64_t v555 = v367;
            *(_WORD *)&v555[4] = 2082;
            *(void *)&v555[6] = v376;
            _os_log_impl( &dword_181A5C000,  v371,  v372,  "%{public}s setsockopt IPV6_RECVTCLASS failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v376);
        }
      }

LABEL_1076:
    if (v84) {
      free(v84);
    }
LABEL_1078:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
    uint64_t v71 = (char *)_os_log_send_and_compose_impl();
    v963[0] = 16;
    LOBYTE(aBlock) = 0;
    if (v963[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v72 = (os_log_s *)gLogObj;
      os_log_type_t v73 = v963[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v963[0])) {
        goto LABEL_1094;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
      uint64_t v74 = "%{public}s called with null http1_stream";
      goto LABEL_1093;
    }

    if (!(_BYTE)aBlock)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v72 = (os_log_s *)gLogObj;
      os_log_type_t v73 = v963[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v963[0])) {
        goto LABEL_1094;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
      uint64_t v74 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_1093;
    }

    os_log_type_t v79 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v72 = (os_log_s *)gLogObj;
    os_log_type_t v73 = v963[0];
    BOOL v695 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v963[0]);
    if (!v79)
    {
      if (!v695) {
        goto LABEL_1094;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
      uint64_t v74 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_1093;
    }

    if (v695)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v79;
      uint64_t v81 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
      goto LABEL_1086;
    }

    goto LABEL_1087;
  }

  uint64_t v9 = (uint64_t *)(handle + 8);
LABEL_17:
  uint64_t v10 = *v9;
  if (!*v9) {
    goto LABEL_1078;
  }
  if (!*(void *)(v10 + 248))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
    uint64_t v71 = (char *)_os_log_send_and_compose_impl();
    v963[0] = 16;
    LOBYTE(aBlock) = 0;
    if (v963[0] == 17)
    {
      uint64_t v72 = (os_log_s *)__nwlog_obj();
      os_log_type_t v73 = v963[0];
      if (!os_log_type_enabled(v72, (os_log_type_t)v963[0])) {
        goto LABEL_1094;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
      uint64_t v74 = "%{public}s called with null http1_stream->protocol_http1";
    }

    else
    {
      if ((_BYTE)aBlock)
      {
        os_log_type_t v79 = (char *)__nw_create_backtrace_string();
        uint64_t v72 = (os_log_s *)__nwlog_obj();
        os_log_type_t v73 = v963[0];
        BOOL v88 = os_log_type_enabled(v72, (os_log_type_t)v963[0]);
        if (!v79)
        {
          if (!v88) {
            goto LABEL_1094;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
          uint64_t v74 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
          goto LABEL_1093;
        }

        if (v88)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v79;
          uint64_t v81 = "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s";
LABEL_1086:
          _os_log_impl(&dword_181A5C000, v72, v73, v81, buf, 0x16u);
        }

LABEL_1087:
        free(v79);
        if (!v71) {
          return;
        }
LABEL_1095:
        free(v71);
        return;
      }

      uint64_t v72 = (os_log_s *)__nwlog_obj();
      os_log_type_t v73 = v963[0];
      if (!os_log_type_enabled(v72, (os_log_type_t)v963[0])) {
        goto LABEL_1094;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
      uint64_t v74 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
    }

LABEL_1093:
    _os_log_impl(&dword_181A5C000, v72, v73, v74, buf, 0xCu);
    goto LABEL_1094;
  }

  __int16 v11 = *(_WORD *)(v10 + 428);
  *(_WORD *)(v10 + 42_Block_object_dispose(&STACK[0x338], 8) = v11 | 0x10;
  uint64_t v12 = *(void *)(v10 + 256);
  uint64_t v940 = v7;
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 480);
    if (v13)
    {
      uint64_t v14 = *(void *)(v12 + 488);
      if (v14)
      {
        if ((*(_WORD *)(v14 + 428) & 0x2000) != 0)
        {
          if ((*(_WORD *)(v12 + 872) & 4) == 0)
          {
            if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
              goto LABEL_217;
            }
            if (!gLogDatapath) {
              goto LABEL_217;
            }
            int v26 = (os_log_s *)__nwlog_obj();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_217;
            }
            uint64_t v27 = *(void *)(v12 + 488);
            int v28 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            int v29 = *(_DWORD *)(v12 + 860);
            if (v27) {
              LODWORD(v27) = *(_DWORD *)(v27 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v28;
            *(_WORD *)&v962[6] = 1024;
            *(_DWORD *)&v962[8] = v29;
            *(_WORD *)&v962[12] = 1024;
            *(_DWORD *)&v962[14] = v27;
            char v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the message is not complete";
            goto LABEL_1035;
          }

          if ((*(_WORD *)(v12 + 872) & 0x20) == 0)
          {
            if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
              goto LABEL_217;
            }
            if (!gLogDatapath) {
              goto LABEL_217;
            }
            int v26 = (os_log_s *)__nwlog_obj();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_217;
            }
            uint64_t v31 = *(void *)(v12 + 488);
            int v32 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            int v33 = *(_DWORD *)(v12 + 860);
            if (v31) {
              LODWORD(v31) = *(_DWORD *)(v31 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v32;
            *(_WORD *)&v962[6] = 1024;
            *(_DWORD *)&v962[8] = v33;
            *(_WORD *)&v962[12] = 1024;
            *(_DWORD *)&v962[14] = v31;
            char v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the outbound message is not complete";
            goto LABEL_1035;
          }

          if ((*(_WORD *)(v12 + 872) & 8) == 0)
          {
            if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
              goto LABEL_217;
            }
            if (!gLogDatapath) {
              goto LABEL_217;
            }
            int v26 = (os_log_s *)__nwlog_obj();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_217;
            }
            uint64_t v38 = *(void *)(v12 + 488);
            int v39 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            int v40 = *(_DWORD *)(v12 + 860);
            if (v38) {
              LODWORD(v3_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v38 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v39;
            *(_WORD *)&v962[6] = 1024;
            *(_DWORD *)&v962[8] = v40;
            *(_WORD *)&v962[12] = 1024;
            *(_DWORD *)&v962[14] = v38;
            char v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because keep alive is false";
            goto LABEL_1035;
          }
        }

        else if ((*(_BYTE *)(v12 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            uint64_t v15 = (os_log_s *)__nwlog_obj();
            BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
            uint64_t v13 = *(void *)(v12 + 480);
            if (v16)
            {
              int v17 = *(_DWORD *)(v13 + 372);
              int v18 = *(_DWORD *)(v12 + 860);
              uint64_t v19 = *(void *)(v12 + 488);
              if (v19) {
                LODWORD(v19) = *(_DWORD *)(v19 + 424);
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v12 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v961 = (uint64_t)" ";
              *(_WORD *)v962 = 1024;
              *(_DWORD *)&v962[2] = v17;
              *(_WORD *)&v962[6] = 1024;
              *(_DWORD *)&v962[8] = v18;
              *(_WORD *)&v962[12] = 1024;
              *(_DWORD *)&v962[14] = v19;
              _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection may be reusable because the current stream didn't use it",  buf,  0x32u);
              uint64_t v13 = *(void *)(v12 + 480);
            }
          }
        }

        if ((*(_BYTE *)(v13 + 376) & 8) != 0)
        {
          if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
            goto LABEL_217;
          }
          if (!gLogDatapath) {
            goto LABEL_217;
          }
          int v26 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_217;
          }
          uint64_t v103 = *(void *)(v12 + 488);
          int v104 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
          int v105 = *(_DWORD *)(v12 + 860);
          if (v103) {
            LODWORD(v103) = *(_DWORD *)(v103 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v104;
          *(_WORD *)&v962[6] = 1024;
          *(_DWORD *)&v962[8] = v105;
          *(_WORD *)&v962[12] = 1024;
          *(_DWORD *)&v962[14] = v103;
          char v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because pool is closed for new connections";
          goto LABEL_1035;
        }

        __int16 v99 = *(_WORD *)(v12 + 872);
        if ((v99 & 0x200) != 0)
        {
          if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
            goto LABEL_217;
          }
          if (!gLogDatapath) {
            goto LABEL_217;
          }
          int v26 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_217;
          }
          uint64_t v677 = *(void *)(v12 + 488);
          int v678 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
          int v679 = *(_DWORD *)(v12 + 860);
          if (v677) {
            LODWORD(v677) = *(_DWORD *)(v677 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v678;
          *(_WORD *)&v962[6] = 1024;
          *(_DWORD *)&v962[8] = v679;
          *(_WORD *)&v962[12] = 1024;
          *(_DWORD *)&v962[14] = v677;
          char v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was upgraded";
          goto LABEL_1035;
        }

        if ((v99 & 0x40) == 0)
        {
          if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
            goto LABEL_217;
          }
          if (!gLogDatapath) {
            goto LABEL_217;
          }
          int v26 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_217;
          }
          uint64_t v100 = *(void *)(v12 + 488);
          int v101 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
          int v102 = *(_DWORD *)(v12 + 860);
          if (v100) {
            LODWORD(v100) = *(_DWORD *)(v100 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v101;
          *(_WORD *)&v962[6] = 1024;
          *(_DWORD *)&v962[8] = v102;
          *(_WORD *)&v962[12] = 1024;
          *(_DWORD *)&v962[14] = v100;
          char v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was never connected";
LABEL_1035:
          _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_DEBUG, v30, buf, 0x32u);
LABEL_217:
          nw_protocol_disconnect(*(void **)(v12 + 32), v12);
          uint64_t v25 = v940;
          goto LABEL_218;
        }

        if ((*(_WORD *)(v12 + 872) & 0x100) != 0)
        {
          if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
            goto LABEL_217;
          }
          if (!gLogDatapath) {
            goto LABEL_217;
          }
          int v26 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_217;
          }
          uint64_t v203 = *(void *)(v12 + 488);
          int v204 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
          int v205 = *(_DWORD *)(v12 + 860);
          if (v203) {
            LODWORD(v203) = *(_DWORD *)(v203 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v204;
          *(_WORD *)&v962[6] = 1024;
          *(_DWORD *)&v962[8] = v205;
          *(_WORD *)&v962[12] = 1024;
          *(_DWORD *)&v962[14] = v203;
          char v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it has been closed";
          goto LABEL_1035;
        }

        if (*(_DWORD *)(v12 + 864) == 4)
        {
          if (*(_BYTE *)(v12 + 158) & 1 | (gLogDatapath == 0)) {
            goto LABEL_217;
          }
          int v26 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_217;
          }
          uint64_t v179 = *(void *)(v12 + 488);
          int v180 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
          int v181 = *(_DWORD *)(v12 + 860);
          if (v179) {
            LODWORD(v179) = *(_DWORD *)(v179 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v180;
          *(_WORD *)&v962[6] = 1024;
          *(_DWORD *)&v962[8] = v181;
          *(_WORD *)&v962[12] = 1024;
          *(_DWORD *)&v962[14] = v179;
          char v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because input has finished from below";
          goto LABEL_1035;
        }

        if (!(*(_BYTE *)(v12 + 158) & 1 | (gLogDatapath == 0)))
        {
          v819 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v819, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v820 = *(void *)(v12 + 488);
            int v821 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            int v822 = *(_DWORD *)(v12 + 860);
            if (v820) {
              LODWORD(v820) = *(_DWORD *)(v820 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v821;
            *(_WORD *)&v962[6] = 1024;
            *(_DWORD *)&v962[8] = v822;
            *(_WORD *)&v962[12] = 1024;
            *(_DWORD *)&v962[14] = v820;
            _os_log_impl( &dword_181A5C000,  v819,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection can be reused",  buf,  0x32u);
          }
        }

        uint64_t v261 = *(void *)(v12 + 488);
        if (v261)
        {
          if (*(void *)(v261 + 248))
          {
            uint64_t v262 = *(void *)(v261 + 256);
            if (v262)
            {
              if (*(void *)(v262 + 488) == v261)
              {
                if ((*(_BYTE *)(v261 + 158) & 1) == 0)
                {
                  uint64_t v333 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v333, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v334 = *(void *)(v261 + 256);
                    int v335 = *(_DWORD *)(*(void *)(v261 + 248) + 372LL);
                    if (v334) {
                      LODWORD(v334) = *(_DWORD *)(v334 + 860);
                    }
                    int v336 = *(_DWORD *)(v261 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v261 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v961 = (uint64_t)" ";
                    *(_WORD *)v962 = 1024;
                    *(_DWORD *)&v962[2] = v335;
                    *(_WORD *)&v962[6] = 1024;
                    *(_DWORD *)&v962[8] = v334;
                    *(_WORD *)&v962[12] = 1024;
                    *(_DWORD *)&v962[14] = v336;
                    *(_WORD *)&v962[18] = 2048;
                    *(void *)&v962[20] = v261;
                    *(_WORD *)&v962[28] = 2048;
                    *(void *)&v962[30] = v262;
                    _os_log_impl( &dword_181A5C000,  v333,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p",  buf,  0x46u);
                  }
                }

                if (gLogDatapath)
                {
                  v885 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v885, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_181A5C000, v885, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                  }
                }

                *(void *)buf = MEMORY[0x1895F87A8];
                *(void *)&buf[8] = 0x40000000LL;
                *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
                uint64_t v961 = (uint64_t)&__block_descriptor_tmp_55_39717;
                *(void *)v962 = v262 + 632;
                v962[8] = 0;
                uint64_t v337 = *(void *)(v262 + 632);
                do
                {
                  if (!v337) {
                    break;
                  }
                  uint64_t v338 = *(void *)(v337 + 32);
                  char v339 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  uint64_t v337 = v338;
                }

                while ((v339 & 1) != 0);
                *(void *)(v261 + 256) = 0LL;
                *(void *)(v262 + 48_Block_object_dispose(&STACK[0x338], 8) = 0LL;
                nw_protocol_set_output_handler(v261, 0LL);
                nw_protocol_set_input_handler(v262, 0LL);
                uint64_t v340 = *(void *)(v12 + 480);
                if (v340) {
                  goto LABEL_693;
                }
                goto LABEL_559;
              }

              __nwlog_obj();
              uint64_t v263 = *(void *)(v262 + 488);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v262;
              *(_WORD *)&buf[22] = 2048;
              uint64_t v961 = v261;
              *(_WORD *)v962 = 2048;
              *(void *)&v962[2] = v263;
              v264 = (char *)_os_log_send_and_compose_impl();
              v963[0] = 16;
              LOBYTE(aBlock) = 0;
              if (v963[0] == 17)
              {
                os_log_type_t v266 = (os_log_s *)__nwlog_obj();
                os_log_type_t v267 = v963[0];
                if (!os_log_type_enabled(v266, (os_log_type_t)v963[0])) {
                  goto LABEL_690;
                }
                uint64_t v268 = *(void *)(v262 + 488);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v262;
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = v261;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v268;
                __int16 v269 = "%{public}s Connection %p does not already have stream %p, has %p";
              }

              else
              {
                if ((_BYTE)aBlock)
                {
                  v347 = (char *)__nw_create_backtrace_string();
                  v348 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v349 = v963[0];
                  BOOL v350 = os_log_type_enabled(v348, (os_log_type_t)v963[0]);
                  if (v347)
                  {
                    if (v350)
                    {
                      uint64_t v351 = *(void *)(v262 + 488);
                      *(_DWORD *)buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v262;
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v961 = v261;
                      *(_WORD *)v962 = 2048;
                      *(void *)&v962[2] = v351;
                      *(_WORD *)&v962[10] = 2082;
                      *(void *)&v962[12] = v347;
                      _os_log_impl( &dword_181A5C000,  v348,  v349,  "%{public}s Connection %p does not already have stream %p, has %p, dumping backtrace:%{public}s",  buf,  0x34u);
                    }

                    free(v347);
                  }

                  else if (v350)
                  {
                    uint64_t v449 = *(void *)(v262 + 488);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v262;
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v961 = v261;
                    *(_WORD *)v962 = 2048;
                    *(void *)&v962[2] = v449;
                    __int16 v269 = "%{public}s Connection %p does not already have stream %p, has %p, no backtrace";
                    v431 = v348;
                    os_log_type_t v432 = v349;
                    goto LABEL_689;
                  }

LABEL_1583:
            if (!v815) {
              goto LABEL_1585;
            }
            goto LABEL_1584;
          }

          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
          v815 = (char *)_os_log_send_and_compose_impl();
          v963[0] = 16;
          LOBYTE(aBlock) = 0;
          if (v963[0] != 17)
          {
            if (!(_BYTE)aBlock)
            {
              v816 = (os_log_s *)__nwlog_obj();
              os_log_type_t v817 = v963[0];
              if (!os_log_type_enabled(v816, (os_log_type_t)v963[0])) {
                goto LABEL_1583;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              v818 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
              goto LABEL_1582;
            }

            v865 = (char *)__nw_create_backtrace_string();
            v816 = (os_log_s *)__nwlog_obj();
            os_log_type_t v817 = v963[0];
            BOOL v866 = os_log_type_enabled(v816, (os_log_type_t)v963[0]);
            if (!v865)
            {
              if (!v866) {
                goto LABEL_1583;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              v818 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
              goto LABEL_1582;
            }

            if (v866)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v865;
              v867 = "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s";
LABEL_1358:
              _os_log_impl(&dword_181A5C000, v816, v817, v867, buf, 0x16u);
            }

LABEL_1359:
            free(v865);
            if (!v815)
            {
LABEL_1585:
              uint64_t v340 = *(void *)(v12 + 480);
              if (v340)
              {
LABEL_693:
                int v433 = (_WORD *)(v12 + 872);
                if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v823 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v823, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v824 = *(void *)(v12 + 488);
                      int v825 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                      int v826 = *(_DWORD *)(v12 + 860);
                      if (v824) {
                        LODWORD(v824) = *(_DWORD *)(v824 + 424);
                      }
                      *(_DWORD *)buf = 136447746;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v12 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      uint64_t v961 = (uint64_t)" ";
                      *(_WORD *)v962 = 1024;
                      *(_DWORD *)&v962[2] = v825;
                      *(_WORD *)&v962[6] = 1024;
                      *(_DWORD *)&v962[8] = v826;
                      *(_WORD *)&v962[12] = 1024;
                      *(_DWORD *)&v962[14] = v824;
                      *(_WORD *)&v962[18] = 2048;
                      *(void *)&v962[20] = v12;
                      _os_log_impl( &dword_181A5C000,  v823,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection (%p)",  buf,  0x3Cu);
                    }
                  }
                }

                if ((((unsigned __int16)*v433 | (*(unsigned __int8 *)(v12 + 874) << 16)) & 0x80000) == 0)
                {
                  v435 = (uint64_t *)(v340 + 208);
                  uint64_t v434 = *(void *)(v340 + 208);
                  *(void *)(v12 + 592) = v434;
                  if (v434) {
                    uint64_t v436 = (void *)(v434 + 600);
                  }
                  else {
                    uint64_t v436 = (void *)(v340 + 216);
                  }
                  *uint64_t v436 = v12 + 592;
                  uint64_t *v435 = v12;
                  *(void *)(v12 + 600) = v435;
                  uint64_t v437 = *(unsigned int *)(v340 + 340) + 1LL;
                  uint64_t v438 = v437 << 31 >> 31;
                  *(_DWORD *)(v340 + 340) = v437;
                  if (v438 == v437 && (v438 & 0x8000000000000000LL) == 0) {
                    goto LABEL_770;
                  }
                  __nwlog_obj();
                  uint64_t v439 = *(unsigned int *)(v340 + 340);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->idle_connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v439;
                  v440 = (char *)_os_log_send_and_compose_impl();
                  v963[0] = 16;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v440, v963, &aBlock))
                  {
                    if (v963[0] == 17)
                    {
                      os_log_type_t v441 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v442 = v963[0];
                      if (os_log_type_enabled(v441, (os_log_type_t)v963[0]))
                      {
                        uint64_t v443 = *(unsigned int *)(v340 + 340);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->idle_connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v961 = 1LL;
                        *(_WORD *)v962 = 2048;
                        *(void *)&v962[2] = v443;
                        v444 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_766:
                        _os_log_impl(&dword_181A5C000, v441, v442, v444, buf, 0x2Au);
                      }
                    }

                    else if ((_BYTE)aBlock)
                    {
                      v446 = (char *)__nw_create_backtrace_string();
                      os_log_type_t v441 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v442 = v963[0];
                      BOOL v447 = os_log_type_enabled(v441, (os_log_type_t)v963[0]);
                      if (v446)
                      {
                        if (v447)
                        {
                          uint64_t v448 = *(unsigned int *)(v340 + 340);
                          *(_DWORD *)buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->idle_connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = 1LL;
                          *(_WORD *)v962 = 2048;
                          *(void *)&v962[2] = v448;
                          *(_WORD *)&v962[10] = 2082;
                          *(void *)&v962[12] = v446;
                          _os_log_impl( &dword_181A5C000,  v441,  v442,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                        }

                        free(v446);
                        goto LABEL_767;
                      }

                      if (v447)
                      {
                        uint64_t v467 = *(unsigned int *)(v340 + 340);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->idle_connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v961 = 1LL;
                        *(_WORD *)v962 = 2048;
                        *(void *)&v962[2] = v467;
                        v444 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                        goto LABEL_766;
                      }
                    }

                    else
                    {
                      os_log_type_t v441 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v442 = v963[0];
                      if (os_log_type_enabled(v441, (os_log_type_t)v963[0]))
                      {
                        uint64_t v454 = *(unsigned int *)(v340 + 340);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->idle_connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v961 = 1LL;
                        *(_WORD *)v962 = 2048;
                        *(void *)&v962[2] = v454;
                        v444 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_766;
                      }
                    }
                  }

LABEL_767:
                  if (v440) {
                    free(v440);
                  }
                  *(_DWORD *)(v340 + 340) = -1;
LABEL_770:
                  int v468 = (*(unsigned __int16 *)(v12 + 872) | (*(unsigned __int8 *)(v12 + 874) << 16)) & 0xF7FFFA | 0x80000;
                  *v433 &= 0xFFFAu;
                  *(_BYTE *)(v12 + 874) = BYTE2(v468);
                  uint64_t v469 = *(void **)(v12 + 800);
                  if (v469)
                  {
                    free(v469);
                    *(void *)(v12 + 800) = 0LL;
                  }

                  *(_DWORD *)(v12 + 840) = 0;
                  uint64_t v470 = *(void **)(v12 + 808);
                  if (v470)
                  {
                    free(v470);
                    *(void *)(v12 + 80_Block_object_dispose(&STACK[0x338], 8) = 0LL;
                  }

                  *(_DWORD *)(v12 + 844) = 0;
                  v471 = *(void **)(v12 + 816);
                  if (v471)
                  {
                    free(v471);
                    *(void *)(v12 + 816) = 0LL;
                  }

                  *(_DWORD *)(v12 + 84_Block_object_dispose(&STACK[0x338], 8) = 0;
                  v472 = *(void **)(v12 + 824);
                  if (v472)
                  {
                    free(v472);
                    *(void *)(v12 + 824) = 0LL;
                  }

                  *(_DWORD *)(v12 + 852) = 0;
                  os_log_type_t v473 = *(void **)(v12 + 832);
                  if (v473)
                  {
                    free(v473);
                    *(void *)(v12 + 832) = 0LL;
                  }

                  *(_DWORD *)(v12 + 856) = 0;
                  int v474 = (unsigned __int16)*v433;
                  int v475 = v474 | (*(unsigned __int8 *)(v12 + 874) << 16);
                  if ((v474 & 0x10) != 0)
                  {
                    if (*(_DWORD *)(v12 + 224) == 21) {
                      *(_DWORD *)(v12 + 224) = 0;
                    }
                    unsigned int v484 = v475 & 0xFFFFFFEF;
                    *int v433 = v484;
                    *(_BYTE *)(v12 + 874) = BYTE2(v484);
                    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        uint64_t v479 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v479, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v887 = *(void *)(v12 + 488);
                          int v888 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                          int v889 = *(_DWORD *)(v12 + 860);
                          if (v887) {
                            LODWORD(v887) = *(_DWORD *)(v887 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_reset_for_new_message";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v12 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v961 = (uint64_t)" ";
                          *(_WORD *)v962 = 1024;
                          *(_DWORD *)&v962[2] = v888;
                          *(_WORD *)&v962[6] = 1024;
                          *(_DWORD *)&v962[8] = v889;
                          *(_WORD *)&v962[12] = 1024;
                          *(_DWORD *)&v962[14] = v887;
                          v483 = "%{public}s %{public}s%s<i%u:c%u:s%u> Unpausing parser, input for next stream available";
                          goto LABEL_1466;
                        }
                      }
                    }
                  }

                  else
                  {
                    *(_OWORD *)(v12 + 200) = 0u;
                    char v476 = *(_BYTE *)(v12 + 272);
                    uint64_t v477 = *(void *)(v12 + 248);
                    __int16 v478 = *(_WORD *)(v12 + 278);
                    *(_OWORD *)(v12 + 24_Block_object_dispose(&STACK[0x338], 8) = 0u;
                    *(_OWORD *)(v12 + 264) = 0u;
                    *(_OWORD *)(v12 + 216) = 0u;
                    *(_OWORD *)(v12 + 232) = 0u;
                    *(void *)(v12 + 280) = 0LL;
                    *(_BYTE *)(v12 + 272) = v476;
                    *(void *)(v12 + 24_Block_object_dispose(&STACK[0x338], 8) = v477;
                    *(void *)(v12 + 256) = 238LL;
                    *(_WORD *)(v12 + 27_Block_object_dispose(&STACK[0x338], 8) = v478;
                    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        uint64_t v479 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v479, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v480 = *(void *)(v12 + 488);
                          int v481 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                          int v482 = *(_DWORD *)(v12 + 860);
                          if (v480) {
                            LODWORD(v480) = *(_DWORD *)(v480 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_reset_for_new_message";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v12 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v961 = (uint64_t)" ";
                          *(_WORD *)v962 = 1024;
                          *(_DWORD *)&v962[2] = v481;
                          *(_WORD *)&v962[6] = 1024;
                          *(_DWORD *)&v962[8] = v482;
                          *(_WORD *)&v962[12] = 1024;
                          *(_DWORD *)&v962[14] = v480;
                          v483 = "%{public}s %{public}s%s<i%u:c%u:s%u> Resetting parser, no current available input for next stream";
LABEL_1466:
                          _os_log_impl(&dword_181A5C000, v479, OS_LOG_TYPE_DEBUG, v483, buf, 0x32u);
                        }
                      }
                    }
                  }

                  uint64_t v485 = *(void *)(v12 + 784);
                  if (v485) {
                    nw_queue_cancel_source(v485, v265);
                  }
                  v486 = *(void **)(v12 + 192);
                  *(void *)v963 = MEMORY[0x1895F87A8];
                  *(void *)&v963[8] = 0x40000000LL;
                  *(void *)&v963[16] = ___ZL28nw_http1_add_idle_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
                  v964 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_87_40933;
                  v965 = (void (*)(uint64_t))v12;
                  v966 = v486;
                  uint64_t v967 = v340;
                  BOOL source = nw_queue_context_create_source(0LL, 2, 3, 0, v963, 0LL);
                  *(void *)(v12 + 784) = source;
                  dispatch_time_t v488 = dispatch_time(0x8000000000000000LL, 1000000LL * (void)v486);
                  nw_queue_set_timer_values(source, v488, 0xFFFFFFFFFFFFFFFFLL, 1000LL * (void)v486);
                  nw_queue_activate_source(*(void *)(v12 + 784), v489);
                  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      __int128 v490 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v490, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v491 = *(void *)(v12 + 488);
                        int v492 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                        int v493 = *(_DWORD *)(v12 + 860);
                        if (v491) {
                          LODWORD(v491) = *(_DWORD *)(v491 + 424);
                        }
                        int v494 = *(_DWORD *)(v340 + 340);
                        *(_DWORD *)buf = 136448258;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v12 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v961 = (uint64_t)" ";
                        *(_WORD *)v962 = 1024;
                        *(_DWORD *)&v962[2] = v492;
                        *(_WORD *)&v962[6] = 1024;
                        *(_DWORD *)&v962[8] = v493;
                        *(_WORD *)&v962[12] = 1024;
                        *(_DWORD *)&v962[14] = v491;
                        *(_WORD *)&v962[18] = 2048;
                        *(void *)&v962[20] = v12;
                        *(_WORD *)&v962[28] = 2048;
                        *(void *)&v962[30] = v486;
                        *(_WORD *)&v962[38] = 1024;
                        *(_DWORD *)&v962[40] = v494;
                        uint64_t v64 = "%{public}s %{public}s%s<i%u:c%u:s%u> added idle connection %p and started destroy timer fo"
                              "r %lldms, now have %u idle connections";
                        BOOL v65 = v490;
                        uint32_t v66 = 76;
LABEL_103:
                        _os_log_impl(&dword_181A5C000, v65, OS_LOG_TYPE_DEBUG, v64, buf, v66);
                        goto LABEL_736;
                      }
                    }
                  }

                  goto LABEL_736;
                }

                __nwlog_obj();
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v12;
                BOOL v34 = (char *)_os_log_send_and_compose_impl();
                v963[0] = 16;
                LOBYTE(aBlock) = 0;
                if (v963[0] == 17)
                {
                  uint64_t v35 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v36 = v963[0];
                  if (!os_log_type_enabled(v35, (os_log_type_t)v963[0])) {
                    goto LABEL_734;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v12;
                  int v37 = "%{public}s connection %p already in idle list, cannot add twice";
                  goto LABEL_732;
                }

                if (!(_BYTE)aBlock)
                {
                  uint64_t v35 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v36 = v963[0];
                  if (!os_log_type_enabled(v35, (os_log_type_t)v963[0])) {
                    goto LABEL_734;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v12;
                  int v37 = "%{public}s connection %p already in idle list, cannot add twice, backtrace limit exceeded";
                  goto LABEL_732;
                }

                char v43 = (char *)__nw_create_backtrace_string();
                uint64_t v35 = (os_log_s *)__nwlog_obj();
                os_log_type_t v36 = v963[0];
                BOOL v445 = os_log_type_enabled(v35, (os_log_type_t)v963[0]);
                if (!v43)
                {
                  if (!v445) {
                    goto LABEL_734;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v12;
                  int v37 = "%{public}s connection %p already in idle list, cannot add twice, no backtrace";
                  goto LABEL_732;
                }

                if (!v445) {
                  goto LABEL_72;
                }
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v12;
                *(_WORD *)&buf[22] = 2082;
                uint64_t v961 = (uint64_t)v43;
                id v45 = "%{public}s connection %p already in idle list, cannot add twice, dumping backtrace:%{public}s";
                goto LABEL_71;
              }

                if (v424) {
                  free(v424);
                }
                nw_protocol_connect(v423, 0LL);
                os_log_type_t v87 = v579;
                if (!v238)
                {
LABEL_331:
                  if (v234) {
                    os_release(v234);
                  }
                  nw_protocol_set_output_handler(v580, 0LL);
                  *(_WORD *)(v87 + 428) &= ~8u;
                  BOOL v239 = *(_DWORD *)(v580 + 352);
                  *(_DWORD *)(v580 + 352) = v239 - 1;
                  if (v239) {
                    return;
                  }
                  __nwlog_obj();
                  __int16 v240 = *(unsigned int *)(v580 + 352);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->pending_output_handler_count";
                  *(_WORD *)&buf[22] = 2048;
                  int v608 = 1LL;
                  *(_WORD *)v609 = 2048;
                  *(void *)&v609[2] = v240;
                  int v241 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v241, type, &aBlock))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      id v242 = (os_log_s *)__nwlog_obj();
                      int v243 = type[0];
                      if (os_log_type_enabled(v242, type[0]))
                      {
                        uint64_t v244 = *(unsigned int *)(v580 + 352);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&buf[22] = 2048;
                        int v608 = 1LL;
                        *(_WORD *)v609 = 2048;
                        *(void *)&v609[2] = v244;
                        BOOL v245 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_347:
                        _os_log_impl(&dword_181A5C000, v242, v243, v245, buf, 0x2Au);
                      }
                    }

                    else if ((_BYTE)aBlock)
                    {
                      uint64_t v246 = (char *)__nw_create_backtrace_string();
                      id v242 = (os_log_s *)__nwlog_obj();
                      int v243 = type[0];
                      uint64_t v247 = os_log_type_enabled(v242, type[0]);
                      if (v246)
                      {
                        if (v247)
                        {
                          uint64_t v248 = *(unsigned int *)(v580 + 352);
                          *(_DWORD *)buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&buf[22] = 2048;
                          int v608 = 1LL;
                          *(_WORD *)v609 = 2048;
                          *(void *)&v609[2] = v248;
                          *(_WORD *)&v609[10] = 2082;
                          *(void *)&v609[12] = v246;
                          _os_log_impl( &dword_181A5C000,  v242,  v243,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                        }

                        free(v246);
                        goto LABEL_348;
                      }

                      if (v247)
                      {
                        uint64_t v250 = *(unsigned int *)(v580 + 352);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&buf[22] = 2048;
                        int v608 = 1LL;
                        *(_WORD *)v609 = 2048;
                        *(void *)&v609[2] = v250;
                        BOOL v245 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                        goto LABEL_347;
                      }
                    }

                    else
                    {
                      id v242 = (os_log_s *)__nwlog_obj();
                      int v243 = type[0];
                      if (os_log_type_enabled(v242, type[0]))
                      {
                        uint64_t v249 = *(unsigned int *)(v580 + 352);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&buf[22] = 2048;
                        int v608 = 1LL;
                        *(_WORD *)v609 = 2048;
                        *(void *)&v609[2] = v249;
                        BOOL v245 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_347;
                      }
                    }
                  }

LABEL_559:
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
              v341 = (char *)_os_log_send_and_compose_impl();
              v963[0] = 16;
              LOBYTE(aBlock) = 0;
              if (v963[0] == 17)
              {
                BOOL v342 = (os_log_s *)__nwlog_obj();
                os_log_type_t v343 = v963[0];
                if (!os_log_type_enabled(v342, (os_log_type_t)v963[0])) {
                  goto LABEL_1573;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                uint64_t v344 = "%{public}s called with null http1";
              }

              else if ((_BYTE)aBlock)
              {
                v861 = (char *)__nw_create_backtrace_string();
                BOOL v342 = (os_log_s *)__nwlog_obj();
                os_log_type_t v343 = v963[0];
                BOOL v862 = os_log_type_enabled(v342, (os_log_type_t)v963[0]);
                if (v861)
                {
                  if (v862)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v861;
                    _os_log_impl( &dword_181A5C000,  v342,  v343,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v861);
                  goto LABEL_1573;
                }

                if (!v862)
                {
LABEL_1573:
                  if (v341) {
                    free(v341);
                  }
                  goto LABEL_736;
                }

                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                uint64_t v344 = "%{public}s called with null http1, no backtrace";
              }

              else
              {
                BOOL v342 = (os_log_s *)__nwlog_obj();
                os_log_type_t v343 = v963[0];
                if (!os_log_type_enabled(v342, (os_log_type_t)v963[0])) {
                  goto LABEL_1573;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                uint64_t v344 = "%{public}s called with null http1, backtrace limit exceeded";
              }

              _os_log_impl(&dword_181A5C000, v342, v343, v344, buf, 0xCu);
              goto LABEL_1573;
            }

LABEL_1584:
            free(v815);
            goto LABEL_1585;
          }

          v816 = (os_log_s *)__nwlog_obj();
          os_log_type_t v817 = v963[0];
          if (!os_log_type_enabled(v816, (os_log_type_t)v963[0])) {
            goto LABEL_1583;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
          v818 = "%{public}s called with null http1_stream->protocol_http1";
        }

        else
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
          v815 = (char *)_os_log_send_and_compose_impl();
          v963[0] = 16;
          LOBYTE(aBlock) = 0;
          if (v963[0] != 17)
          {
            if (!(_BYTE)aBlock)
            {
              v816 = (os_log_s *)__nwlog_obj();
              os_log_type_t v817 = v963[0];
              if (!os_log_type_enabled(v816, (os_log_type_t)v963[0])) {
                goto LABEL_1583;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              v818 = "%{public}s called with null http1_stream, backtrace limit exceeded";
              goto LABEL_1582;
            }

            v863 = (char *)__nw_create_backtrace_string();
            v816 = (os_log_s *)__nwlog_obj();
            os_log_type_t v817 = v963[0];
            BOOL v864 = os_log_type_enabled(v816, (os_log_type_t)v963[0]);
            if (!v863)
            {
              if (!v864) {
                goto LABEL_1583;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              v818 = "%{public}s called with null http1_stream, no backtrace";
              goto LABEL_1582;
            }

            if (v864)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v863;
              _os_log_impl( &dword_181A5C000,  v816,  v817,  "%{public}s called with null http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v863);
            goto LABEL_1583;
          }

          v816 = (os_log_s *)__nwlog_obj();
          os_log_type_t v817 = v963[0];
          if (!os_log_type_enabled(v816, (os_log_type_t)v963[0])) {
            goto LABEL_1583;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
          v818 = "%{public}s called with null http1_stream";
        }

LABEL_1582:
        _os_log_impl(&dword_181A5C000, v816, v817, v818, buf, 0xCu);
        goto LABEL_1583;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
      BOOL v34 = (char *)_os_log_send_and_compose_impl();
      v963[0] = 16;
      LOBYTE(aBlock) = 0;
      if (v963[0] == 17)
      {
        uint64_t v82 = (os_log_s *)__nwlog_obj();
        os_log_type_t v83 = v963[0];
        if (!os_log_type_enabled(v82, (os_log_type_t)v963[0])) {
          goto LABEL_734;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
        int v37 = "%{public}s called with null http1_connection->current_stream";
        goto LABEL_1040;
      }

      if ((_BYTE)aBlock)
      {
        __int128 v91 = (char *)__nw_create_backtrace_string();
        uint64_t v82 = (os_log_s *)__nwlog_obj();
        os_log_type_t v83 = v963[0];
        BOOL v92 = os_log_type_enabled(v82, (os_log_type_t)v963[0]);
        if (v91)
        {
          if (v92)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v91;
            _os_log_impl( &dword_181A5C000,  v82,  v83,  "%{public}s called with null http1_connection->current_stream, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v91);
          if (!v34) {
            goto LABEL_736;
          }
LABEL_735:
          free(v34);
          goto LABEL_736;
        }

        if (v92)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
          int v37 = "%{public}s called with null http1_connection->current_stream, no backtrace";
          goto LABEL_1040;
        }

LABEL_734:
        if (!v34) {
          goto LABEL_736;
        }
        goto LABEL_735;
      }

      uint64_t v82 = (os_log_s *)__nwlog_obj();
      os_log_type_t v83 = v963[0];
      if (!os_log_type_enabled(v82, (os_log_type_t)v963[0])) {
        goto LABEL_734;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
      int v37 = "%{public}s called with null http1_connection->current_stream, backtrace limit exceeded";
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
      BOOL v34 = (char *)_os_log_send_and_compose_impl();
      v963[0] = 16;
      LOBYTE(aBlock) = 0;
      if (v963[0] == 17)
      {
        uint64_t v82 = (os_log_s *)__nwlog_obj();
        os_log_type_t v83 = v963[0];
        if (!os_log_type_enabled(v82, (os_log_type_t)v963[0])) {
          goto LABEL_734;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
        int v37 = "%{public}s called with null http1_connection->protocol_http1";
        goto LABEL_1040;
      }

      if ((_BYTE)aBlock)
      {
        char v89 = (char *)__nw_create_backtrace_string();
        uint64_t v82 = (os_log_s *)__nwlog_obj();
        os_log_type_t v83 = v963[0];
        BOOL v90 = os_log_type_enabled(v82, (os_log_type_t)v963[0]);
        if (v89)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v89;
            _os_log_impl( &dword_181A5C000,  v82,  v83,  "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v89);
          goto LABEL_734;
        }

        if (!v90) {
          goto LABEL_734;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
        int v37 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
      }

      else
      {
        uint64_t v82 = (os_log_s *)__nwlog_obj();
        os_log_type_t v83 = v963[0];
        if (!os_log_type_enabled(v82, (os_log_type_t)v963[0])) {
          goto LABEL_734;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_disconnect";
        int v37 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
      }
    }

    if (v136) {
      free(v136);
    }
    *(_DWORD *)(v11 + 34_Block_object_dispose(&STACK[0x338], 8) = 0;
    goto LABEL_737;
  }

LABEL_1040:
    v451 = v82;
    os_log_type_t v452 = v83;
    uint32_t v453 = 12;
    goto LABEL_733;
  }

  if (!*(void *)(v10 + 32))
  {
    if ((v11 & 0x1000) == 0) {
      goto LABEL_736;
    }
    if ((*(_BYTE *)(v7 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v680 = (os_log_s *)__nwlog_obj();
        BOOL v681 = os_log_type_enabled(v680, OS_LOG_TYPE_DEBUG);
        uint64_t v7 = v940;
        if (v681)
        {
          int v682 = *(_DWORD *)(v940 + 372);
          int v683 = *(_DWORD *)(v10 + 424);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v940 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v682;
          *(_WORD *)&v962[6] = 1024;
          *(_DWORD *)&v962[8] = v683;
          *(_WORD *)&v962[12] = 2048;
          *(void *)&v962[14] = v10;
          _os_log_impl( &dword_181A5C000,  v680,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
          uint64_t v7 = v940;
        }
      }
    }

    if ((*(_WORD *)(v10 + 428) & 0x1000) == 0)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v10;
      BOOL v34 = (char *)_os_log_send_and_compose_impl();
      v963[0] = 16;
      LOBYTE(aBlock) = 0;
      if (v963[0] == 17)
      {
        uint64_t v35 = (os_log_s *)__nwlog_obj();
        os_log_type_t v36 = v963[0];
        if (!os_log_type_enabled(v35, (os_log_type_t)v963[0])) {
          goto LABEL_734;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v10;
        int v37 = "%{public}s stream %p not in pending list, cannot remove";
      }

      else if ((_BYTE)aBlock)
      {
        char v43 = (char *)__nw_create_backtrace_string();
        uint64_t v35 = (os_log_s *)__nwlog_obj();
        os_log_type_t v36 = v963[0];
        BOOL v44 = os_log_type_enabled(v35, (os_log_type_t)v963[0]);
        if (v43)
        {
          if (!v44) {
            goto LABEL_72;
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 2082;
          uint64_t v961 = (uint64_t)v43;
          id v45 = "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s";
LABEL_71:
          _os_log_impl(&dword_181A5C000, v35, v36, v45, buf, 0x20u);
LABEL_72:
          free(v43);
          if (!v34) {
            goto LABEL_736;
          }
          goto LABEL_735;
        }

        if (!v44) {
          goto LABEL_734;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v10;
        int v37 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }

      else
      {
        uint64_t v35 = (os_log_s *)__nwlog_obj();
        os_log_type_t v36 = v963[0];
        if (!os_log_type_enabled(v35, (os_log_type_t)v963[0])) {
          goto LABEL_734;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v10;
        int v37 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }

LABEL_732:
      v451 = v35;
      os_log_type_t v452 = v36;
      uint32_t v453 = 22;
LABEL_733:
      _os_log_impl(&dword_181A5C000, v451, v452, v37, buf, v453);
      goto LABEL_734;
    }

    uint64_t v41 = *(void *)(v10 + 296);
    id v42 = *(void **)(v10 + 304);
    if (v41)
    {
      *(void *)(v41 + 304) = v42;
      id v42 = *(void **)(v10 + 304);
    }

    else
    {
      *(void *)(v7 + 256) = v42;
    }

    *id v42 = v41;
    *(void *)(v10 + 296) = 0LL;
    *(void *)(v10 + 304) = 0LL;
    int v46 = *(_DWORD *)(v7 + 348);
    *(_DWORD *)(v7 + 34_Block_object_dispose(&STACK[0x338], 8) = v46 - 1;
    if (v46)
    {
LABEL_97:
      *(_WORD *)(v10 + 428) &= ~0x1000u;
      if ((*(_BYTE *)(v10 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v59 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v60 = *(void *)(v10 + 256);
            int v61 = *(_DWORD *)(*(void *)(v10 + 248) + 372LL);
            if (v60) {
              LODWORD(v60) = *(_DWORD *)(v60 + 860);
            }
            int v62 = *(_DWORD *)(v10 + 424);
            int v63 = *(_DWORD *)(v940 + 348);
            *(_DWORD *)buf = 136448258;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v10 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v61;
            *(_WORD *)&v962[6] = 1024;
            *(_DWORD *)&v962[8] = v60;
            *(_WORD *)&v962[12] = 1024;
            *(_DWORD *)&v962[14] = v62;
            *(_WORD *)&v962[18] = 1024;
            *(_DWORD *)&v962[20] = v62;
            *(_WORD *)&v962[24] = 2048;
            *(void *)&v962[26] = v10;
            *(_WORD *)&v962[34] = 1024;
            *(_DWORD *)&v962[36] = v63;
            uint64_t v64 = "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams";
            BOOL v65 = v59;
            uint32_t v66 = 72;
            goto LABEL_103;
          }
        }
      }

LABEL_736:
      nw_protocol_disconnected(*(void **)(v10 + 48), v10);
      uint64_t v25 = v940;
      if (!v12) {
        goto LABEL_220;
      }
LABEL_218:
      if ((*(_BYTE *)(v25 + 376) & 1) == 0
        || ((*(unsigned __int16 *)(v12 + 872) | (*(unsigned __int8 *)(v12 + 874) << 16)) & 0x20000) == 0)
      {
        goto LABEL_220;
      }

      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          int v642 = (os_log_s *)__nwlog_obj();
          BOOL v643 = os_log_type_enabled(v642, OS_LOG_TYPE_DEBUG);
          uint64_t v25 = v940;
          if (v643)
          {
            uint64_t v644 = *(void *)(v12 + 488);
            int v645 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            int v646 = *(_DWORD *)(v12 + 860);
            if (v644) {
              LODWORD(v644) = *(_DWORD *)(v644 + 424);
            }
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v645;
            *(_WORD *)&v962[6] = 1024;
            *(_DWORD *)&v962[8] = v646;
            *(_WORD *)&v962[12] = 1024;
            *(_DWORD *)&v962[14] = v644;
            *(_WORD *)&v962[18] = 2048;
            *(void *)&v962[20] = v12;
            _os_log_impl( &dword_181A5C000,  v642,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> triggering new flow on server connection %p, more input available",  buf,  0x3Cu);
            uint64_t v25 = v940;
          }
        }
      }

      if ((*(_BYTE *)(v25 + 376) & 1) == 0)
      {
        if ((*(_BYTE *)(v25 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            uint64_t v129 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
            {
              int v135 = *(_DWORD *)(v940 + 372);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v940 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v961 = (uint64_t)" ";
              *(_WORD *)v962 = 1024;
              *(_DWORD *)&v962[2] = v135;
              int v131 = "%{public}s %{public}s%s<i%u> called when not in server mode, ignoring";
              goto LABEL_256;
            }
          }
        }

        return;
      }

      uint64_t v143 = *(void ***)(v25 + 328);
      if (v143)
      {
        int v144 = (unsigned __int16 *)(v12 + 872);
        BOOL v145 = *v143;
        if (v145 && *v145)
        {
          os_log_type_t v146 = *(nw_parameters **)(v25 + 264);
          if (v146)
          {
            nw_parameters_t v147 = nw_parameters_copy(v146);
            *(void *)(v940 + 224) = v12;
            if ((***(unsigned int (****)(void, void, nw_parameters_t))(v940 + 328))( *(void *)(v940 + 328),  *(void *)(v940 + 280),  v147)
              && *(void *)(v12 + 488)
              && !*(void *)(v940 + 224))
            {
              if ((*(_BYTE *)(v940 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v869 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v869, OS_LOG_TYPE_DEBUG))
                  {
                    int v870 = *(_DWORD *)(v940 + 372);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v940 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v961 = (uint64_t)" ";
                    *(_WORD *)v962 = 1024;
                    *(_DWORD *)&v962[2] = v870;
                    _os_log_impl( &dword_181A5C000,  v869,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> sucessfully associated new flow stream with connection, awaiting connected",  buf,  0x26u);
                  }
                }
              }

              int v281 = *v144;
              unsigned int v282 = (v281 | (*((unsigned __int8 *)v144 + 2) << 16)) & 0xFFFDFFFF;
              *int v144 = v281;
              *((_BYTE *)v144 + 2) = BYTE2(v282);
              goto LABEL_762;
            }

            if ((*(_BYTE *)(v940 + 158) & 1) == 0)
            {
              id v148 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
              {
                int v149 = *(_DWORD *)(v940 + 372);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v940 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v961 = (uint64_t)" ";
                *(_WORD *)v962 = 1024;
                *(_DWORD *)&v962[2] = v149;
                *(_WORD *)&v962[6] = 2048;
                *(void *)&v962[8] = v12;
                _os_log_impl( &dword_181A5C000,  v148,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> listen handler didn't accept the new flow, closing connection %p",  buf,  0x30u);
              }
            }

            int v150 = *v144;
            int v151 = v150 | (*(unsigned __int8 *)(v12 + 874) << 16);
            if ((v150 & 0x100) != 0)
            {
              if ((*(_BYTE *)(v12 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v256 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v257 = *(void *)(v12 + 488);
                    int v258 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                    int v259 = *(_DWORD *)(v12 + 860);
                    if (v257) {
                      LODWORD(v257) = *(_DWORD *)(v257 + 424);
                    }
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v12 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v961 = (uint64_t)" ";
                    *(_WORD *)v962 = 1024;
                    *(_DWORD *)&v962[2] = v258;
                    *(_WORD *)&v962[6] = 1024;
                    *(_DWORD *)&v962[8] = v259;
                    *(_WORD *)&v962[12] = 1024;
                    *(_DWORD *)&v962[14] = v257;
                    _os_log_impl( &dword_181A5C000,  v256,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already closed",  buf,  0x32u);
                  }
                }
              }

              goto LABEL_762;
            }

            *(_BYTE *)(v12 + 874) = BYTE2(v151);
            *int v144 = v151 | 0x100;
            if ((*(_BYTE *)(v12 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v806 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v806, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v807 = *(void *)(v12 + 488);
                  int v808 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                  int v809 = *(_DWORD *)(v12 + 860);
                  if (v807) {
                    LODWORD(v807) = *(_DWORD *)(v807 + 424);
                  }
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v12 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v961 = (uint64_t)" ";
                  *(_WORD *)v962 = 1024;
                  *(_DWORD *)&v962[2] = v808;
                  *(_WORD *)&v962[6] = 1024;
                  *(_DWORD *)&v962[8] = v809;
                  *(_WORD *)&v962[12] = 1024;
                  *(_DWORD *)&v962[14] = v807;
                  _os_log_impl( &dword_181A5C000,  v806,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
                }
              }
            }

            uint64_t v152 = *(void *)(v12 + 480);
            if (!v152)
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              v802 = (char *)_os_log_send_and_compose_impl();
              v963[0] = 16;
              LOBYTE(aBlock) = 0;
              if (v963[0] == 17)
              {
                v803 = (os_log_s *)__nwlog_obj();
                os_log_type_t v804 = v963[0];
                if (!os_log_type_enabled(v803, (os_log_type_t)v963[0])) {
                  goto LABEL_1593;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                v805 = "%{public}s called with null http1";
              }

              else if ((_BYTE)aBlock)
              {
                v841 = (char *)__nw_create_backtrace_string();
                v803 = (os_log_s *)__nwlog_obj();
                os_log_type_t v804 = v963[0];
                BOOL v842 = os_log_type_enabled(v803, (os_log_type_t)v963[0]);
                if (v841)
                {
                  if (v842)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v841;
                    v843 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                    v844 = buf;
LABEL_1440:
                    _os_log_impl(&dword_181A5C000, v803, v804, v843, v844, 0x16u);
                    goto LABEL_1441;
                  }

                  goto LABEL_1441;
                }

                if (!v842) {
                  goto LABEL_1593;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                v805 = "%{public}s called with null http1, no backtrace";
              }

              else
              {
                v803 = (os_log_s *)__nwlog_obj();
                os_log_type_t v804 = v963[0];
                if (!os_log_type_enabled(v803, (os_log_type_t)v963[0])) {
                  goto LABEL_1593;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                v805 = "%{public}s called with null http1, backtrace limit exceeded";
              }

              v902 = buf;
LABEL_1592:
              _os_log_impl(&dword_181A5C000, v803, v804, v805, v902, 0xCu);
              goto LABEL_1593;
            }

            int v153 = *v144;
            int v154 = v153 | (*(unsigned __int8 *)(v12 + 874) << 16);
            if ((v153 & 0x800) != 0)
            {
              if ((*(_BYTE *)(v12 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  uint64_t v274 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v274, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v275 = *(void *)(v12 + 488);
                    int v276 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                    int v277 = *(_DWORD *)(v12 + 860);
                    if (v275) {
                      LODWORD(v275) = *(_DWORD *)(v275 + 424);
                    }
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v12 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v961 = (uint64_t)" ";
                    *(_WORD *)v962 = 1024;
                    *(_DWORD *)&v962[2] = v276;
                    *(_WORD *)&v962[6] = 1024;
                    *(_DWORD *)&v962[8] = v277;
                    *(_WORD *)&v962[12] = 1024;
                    *(_DWORD *)&v962[14] = v275;
                    _os_log_impl( &dword_181A5C000,  v274,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
                    if (*(void *)(v12 + 488)) {
                      goto LABEL_762;
                    }
                    goto LABEL_754;
                  }
                }
              }

LABEL_754:
              uint64_t v460 = *(void *)(v12 + 784);
              if (v460)
              {
                nw_queue_set_timer_values(v460, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
              }

              else
              {
                if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                {
                  BOOL v461 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v461, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v462 = *(void *)(v12 + 488);
                    int v463 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                    int v464 = *(_DWORD *)(v12 + 860);
                    if (v462) {
                      LODWORD(v462) = *(_DWORD *)(v462 + 424);
                    }
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v12 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v961 = (uint64_t)" ";
                    *(_WORD *)v962 = 1024;
                    *(_DWORD *)&v962[2] = v463;
                    *(_WORD *)&v962[6] = 1024;
                    *(_DWORD *)&v962[8] = v464;
                    *(_WORD *)&v962[12] = 1024;
                    *(_DWORD *)&v962[14] = v462;
                    _os_log_impl( &dword_181A5C000,  v461,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
                  }
                }

                uint64_t v465 = *(void *)(v12 + 608);
                uint64_t v466 = *(void **)(v12 + 496);
                *(void *)buf = MEMORY[0x1895F87A8];
                *(void *)&buf[8] = 0x40000000LL;
                *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                uint64_t v961 = (uint64_t)&unk_189BBD518;
                *(void *)v962 = v465;
                nw_queue_context_async(v466, buf);
              }

              goto LABEL_762;
            }

            *(_BYTE *)(v12 + 874) = BYTE2(v154);
            *int v144 = v154 | 0x800;
            uint64_t v155 = *(unsigned int *)(v152 + 368) + 1LL;
            uint64_t v156 = v155 << 31 >> 31;
            *(_DWORD *)(v152 + 36_Block_object_dispose(&STACK[0x338], 8) = v155;
            if (v156 == v155 && (v156 & 0x8000000000000000LL) == 0)
            {
LABEL_748:
              if ((*(_BYTE *)(v12 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v845 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v845, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v846 = *(void *)(v12 + 488);
                    int v847 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                    int v848 = *(_DWORD *)(v12 + 860);
                    if (v846) {
                      LODWORD(v846) = *(_DWORD *)(v846 + 424);
                    }
                    int v849 = *(_DWORD *)(v152 + 368) + *(_DWORD *)(v152 + 364);
                    *(_DWORD *)buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v12 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v961 = (uint64_t)" ";
                    *(_WORD *)v962 = 1024;
                    *(_DWORD *)&v962[2] = v847;
                    *(_WORD *)&v962[6] = 1024;
                    *(_DWORD *)&v962[8] = v848;
                    *(_WORD *)&v962[12] = 1024;
                    *(_DWORD *)&v962[14] = v846;
                    *(_WORD *)&v962[18] = 1024;
                    *(_DWORD *)&v962[20] = v849;
                    _os_log_impl( &dword_181A5C000,  v845,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
                  }
                }
              }

              os_log_type_t v457 = *(void **)(v12 + 496);
              if (v457)
              {
                uint64_t v458 = *(void *)(v12 + 480);
                if (v458)
                {
                  uint64_t v459 = *(void *)(v458 + 200);
                  *(void *)buf = MEMORY[0x1895F87A8];
                  *(void *)&buf[8] = 0x40000000LL;
                  *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
                  uint64_t v961 = (uint64_t)&unk_189BBD540;
                  *(void *)v962 = v459;
                  nw_queue_context_async(v457, buf);
                  goto LABEL_753;
                }

                __nwlog_obj();
                *(_DWORD *)v963 = 136446210;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v802 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(aBlock) = 16;
                v955[0] = 0;
                if (!__nwlog_fault(v802, &aBlock, v955))
                {
LABEL_1593:
                  if (v802) {
                    free(v802);
                  }
                  if (*(void *)(v12 + 488)) {
                    goto LABEL_762;
                  }
                  goto LABEL_754;
                }

                if (aBlock == 17)
                {
                  v803 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v804 = aBlock;
                  if (!os_log_type_enabled(v803, (os_log_type_t)aBlock)) {
                    goto LABEL_1593;
                  }
                  *(_DWORD *)v963 = 136446210;
                  *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v805 = "%{public}s called with null http1";
                  goto LABEL_1591;
                }

                if (!v955[0])
                {
                  v803 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v804 = aBlock;
                  if (!os_log_type_enabled(v803, (os_log_type_t)aBlock)) {
                    goto LABEL_1593;
                  }
                  *(_DWORD *)v963 = 136446210;
                  *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v805 = "%{public}s called with null http1, backtrace limit exceeded";
                  goto LABEL_1591;
                }

                v841 = (char *)__nw_create_backtrace_string();
                v803 = (os_log_s *)__nwlog_obj();
                os_log_type_t v804 = aBlock;
                BOOL v884 = os_log_type_enabled(v803, (os_log_type_t)aBlock);
                if (!v841)
                {
                  if (!v884) {
                    goto LABEL_1593;
                  }
                  *(_DWORD *)v963 = 136446210;
                  *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v805 = "%{public}s called with null http1, no backtrace";
                  goto LABEL_1591;
                }

                if (v884)
                {
                  *(_DWORD *)v963 = 136446466;
                  *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  *(_WORD *)&v963[12] = 2082;
                  *(void *)&v963[14] = v841;
                  v843 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                  goto LABEL_1439;
                }
              }

              else
              {
                __nwlog_obj();
                *(_DWORD *)v963 = 136446210;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v802 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(aBlock) = 16;
                v955[0] = 0;
                if (aBlock == 17)
                {
                  v803 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v804 = aBlock;
                  if (!os_log_type_enabled(v803, (os_log_type_t)aBlock)) {
                    goto LABEL_1593;
                  }
                  *(_DWORD *)v963 = 136446210;
                  *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v805 = "%{public}s called with null http1_connection->context";
LABEL_1591:
                  v902 = v963;
                  goto LABEL_1592;
                }

                if (!v955[0])
                {
                  v803 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v804 = aBlock;
                  if (!os_log_type_enabled(v803, (os_log_type_t)aBlock)) {
                    goto LABEL_1593;
                  }
                  *(_DWORD *)v963 = 136446210;
                  *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v805 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
                  goto LABEL_1591;
                }

                v841 = (char *)__nw_create_backtrace_string();
                v803 = (os_log_s *)__nwlog_obj();
                os_log_type_t v804 = aBlock;
                BOOL v883 = os_log_type_enabled(v803, (os_log_type_t)aBlock);
                if (!v841)
                {
                  if (!v883) {
                    goto LABEL_1593;
                  }
                  *(_DWORD *)v963 = 136446210;
                  *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v805 = "%{public}s called with null http1_connection->context, no backtrace";
                  goto LABEL_1591;
                }

                if (v883)
                {
                  *(_DWORD *)v963 = 136446466;
                  *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  *(_WORD *)&v963[12] = 2082;
                  *(void *)&v963[14] = v841;
                  v843 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_1439:
                  v844 = v963;
                  goto LABEL_1440;
                }
              }

LABEL_1441:
              free(v841);
              goto LABEL_1593;
            }

            __nwlog_obj();
            uint64_t v157 = *(unsigned int *)(v152 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v961 = 1LL;
            *(_WORD *)v962 = 2048;
            *(void *)&v962[2] = v157;
            BOOL v158 = (char *)_os_log_send_and_compose_impl();
            v963[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v158, v963, &aBlock))
            {
              if (v963[0] == 17)
              {
                os_log_type_t v159 = (os_log_s *)__nwlog_obj();
                os_log_type_t v160 = v963[0];
                if (os_log_type_enabled(v159, (os_log_type_t)v963[0]))
                {
                  uint64_t v161 = *(unsigned int *)(v152 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v161;
                  BOOL v162 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_744:
                  _os_log_impl(&dword_181A5C000, v159, v160, v162, buf, 0x2Au);
                }
              }

              else if ((_BYTE)aBlock)
              {
                v423 = (char *)__nw_create_backtrace_string();
                os_log_type_t v159 = (os_log_s *)__nwlog_obj();
                os_log_type_t v160 = v963[0];
                BOOL v424 = os_log_type_enabled(v159, (os_log_type_t)v963[0]);
                if (v423)
                {
                  if (v424)
                  {
                    uint64_t v425 = *(unsigned int *)(v152 + 368);
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v961 = 1LL;
                    *(_WORD *)v962 = 2048;
                    *(void *)&v962[2] = v425;
                    *(_WORD *)&v962[10] = 2082;
                    *(void *)&v962[12] = v423;
                    _os_log_impl( &dword_181A5C000,  v159,  v160,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                  }

                  free(v423);
                  goto LABEL_745;
                }

                if (v424)
                {
                  uint64_t v456 = *(unsigned int *)(v152 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v456;
                  BOOL v162 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_744;
                }
              }

              else
              {
                os_log_type_t v159 = (os_log_s *)__nwlog_obj();
                os_log_type_t v160 = v963[0];
                if (os_log_type_enabled(v159, (os_log_type_t)v963[0]))
                {
                  uint64_t v450 = *(unsigned int *)(v152 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v450;
                  BOOL v162 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_744;
                }
              }
            }

LABEL_745:
            if (v158) {
              free(v158);
            }
            *(_DWORD *)(v152 + 36_Block_object_dispose(&STACK[0x338], 8) = -1;
            goto LABEL_748;
          }

          if ((*(_BYTE *)(v25 + 158) & 1) == 0)
          {
            __int128 v201 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
            {
              int v202 = *(_DWORD *)(v940 + 372);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v940 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v961 = (uint64_t)" ";
              *(_WORD *)v962 = 1024;
              *(_DWORD *)&v962[2] = v202;
              _os_log_impl( &dword_181A5C000,  v201,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> http1->parameters is NULL when opening responder stream",  buf,  0x26u);
            }
          }

          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
          uint64_t v71 = (char *)_os_log_send_and_compose_impl();
          v963[0] = 16;
          LOBYTE(aBlock) = 0;
          if (v963[0] == 17)
          {
            uint64_t v72 = (os_log_s *)__nwlog_obj();
            os_log_type_t v73 = v963[0];
            if (!os_log_type_enabled(v72, (os_log_type_t)v963[0])) {
              goto LABEL_1094;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
            uint64_t v74 = "%{public}s http1->parameters is NULL when opening responder stream";
            goto LABEL_1093;
          }

          if (!(_BYTE)aBlock)
          {
            uint64_t v72 = (os_log_s *)__nwlog_obj();
            os_log_type_t v73 = v963[0];
            if (!os_log_type_enabled(v72, (os_log_type_t)v963[0])) {
              goto LABEL_1094;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
            uint64_t v74 = "%{public}s http1->parameters is NULL when opening responder stream, backtrace limit exceeded";
            goto LABEL_1093;
          }

          os_log_type_t v79 = (char *)__nw_create_backtrace_string();
          uint64_t v72 = (os_log_s *)__nwlog_obj();
          os_log_type_t v73 = v963[0];
          BOOL v260 = os_log_type_enabled(v72, (os_log_type_t)v963[0]);
          if (!v79)
          {
            if (!v260) {
              goto LABEL_1094;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
            uint64_t v74 = "%{public}s http1->parameters is NULL when opening responder stream, no backtrace";
            goto LABEL_1093;
          }

          if (v260)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v79;
            uint64_t v81 = "%{public}s http1->parameters is NULL when opening responder stream, dumping backtrace:%{public}s";
            goto LABEL_1086;
          }

          goto LABEL_1087;
        }

        if ((*(_BYTE *)(v25 + 158) & 1) == 0)
        {
          uint64_t v647 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v647, OS_LOG_TYPE_ERROR))
          {
            int v648 = *(_DWORD *)(v940 + 372);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v940 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v648;
            _os_log_impl( &dword_181A5C000,  v647,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow",  buf,  0x26u);
          }
        }

        int v649 = *v144;
        int v650 = v649 | (*(unsigned __int8 *)(v12 + 874) << 16);
        if ((v649 & 0x100) == 0)
        {
          *(_BYTE *)(v12 + 874) = BYTE2(v650);
          *int v144 = v650 | 0x100;
          if ((*(_BYTE *)(v12 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v918 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v918, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v919 = *(void *)(v12 + 488);
                int v920 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                int v921 = *(_DWORD *)(v12 + 860);
                if (v919) {
                  LODWORD(v919) = *(_DWORD *)(v919 + 424);
                }
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v12 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v961 = (uint64_t)" ";
                *(_WORD *)v962 = 1024;
                *(_DWORD *)&v962[2] = v920;
                *(_WORD *)&v962[6] = 1024;
                *(_DWORD *)&v962[8] = v921;
                *(_WORD *)&v962[12] = 1024;
                *(_DWORD *)&v962[14] = v919;
                _os_log_impl( &dword_181A5C000,  v918,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
              }
            }
          }

          uint64_t v651 = *(void *)(v12 + 480);
          if (!v651)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v914 = (char *)_os_log_send_and_compose_impl();
            v963[0] = 16;
            LOBYTE(aBlock) = 0;
            if (v963[0] == 17)
            {
              v915 = (os_log_s *)__nwlog_obj();
              os_log_type_t v916 = v963[0];
              if (!os_log_type_enabled(v915, (os_log_type_t)v963[0])) {
                goto LABEL_1648;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              v917 = "%{public}s called with null http1";
            }

            else if ((_BYTE)aBlock)
            {
              v922 = (char *)__nw_create_backtrace_string();
              v915 = (os_log_s *)__nwlog_obj();
              os_log_type_t v916 = v963[0];
              BOOL v923 = os_log_type_enabled(v915, (os_log_type_t)v963[0]);
              if (v922)
              {
                if (v923)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v922;
                  _os_log_impl( &dword_181A5C000,  v915,  v916,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v922);
                goto LABEL_1648;
              }

              if (!v923) {
                goto LABEL_1648;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              v917 = "%{public}s called with null http1, no backtrace";
            }

            else
            {
              v915 = (os_log_s *)__nwlog_obj();
              os_log_type_t v916 = v963[0];
              if (!os_log_type_enabled(v915, (os_log_type_t)v963[0])) {
                goto LABEL_1648;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              v917 = "%{public}s called with null http1, backtrace limit exceeded";
            }

            v933 = buf;
LABEL_1647:
            _os_log_impl(&dword_181A5C000, v915, v916, v917, v933, 0xCu);
            goto LABEL_1648;
          }

          int v652 = *v144;
          int v653 = v652 | (*(unsigned __int8 *)(v12 + 874) << 16);
          if ((v652 & 0x800) != 0)
          {
            if ((*(_BYTE *)(v12 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v738 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v738, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v739 = *(void *)(v12 + 488);
                  int v740 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                  int v741 = *(_DWORD *)(v12 + 860);
                  if (v739) {
                    LODWORD(v739) = *(_DWORD *)(v739 + 424);
                  }
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v12 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v961 = (uint64_t)" ";
                  *(_WORD *)v962 = 1024;
                  *(_DWORD *)&v962[2] = v740;
                  *(_WORD *)&v962[6] = 1024;
                  *(_DWORD *)&v962[8] = v741;
                  *(_WORD *)&v962[12] = 1024;
                  *(_DWORD *)&v962[14] = v739;
                  _os_log_impl( &dword_181A5C000,  v738,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
                }
              }
            }

            goto LABEL_1557;
          }

          *(_BYTE *)(v12 + 874) = BYTE2(v653);
          *int v144 = v653 | 0x800;
          uint64_t v654 = *(unsigned int *)(v651 + 368) + 1LL;
          uint64_t v655 = v654 << 31 >> 31;
          *(_DWORD *)(v651 + 36_Block_object_dispose(&STACK[0x338], 8) = v654;
          if (v655 == v654 && (v655 & 0x8000000000000000LL) == 0)
          {
LABEL_1552:
            if ((*(_BYTE *)(v12 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v924 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v924, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v925 = *(void *)(v12 + 488);
                  int v926 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                  int v927 = *(_DWORD *)(v12 + 860);
                  if (v925) {
                    LODWORD(v925) = *(_DWORD *)(v925 + 424);
                  }
                  int v928 = *(_DWORD *)(v651 + 368) + *(_DWORD *)(v651 + 364);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v12 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v961 = (uint64_t)" ";
                  *(_WORD *)v962 = 1024;
                  *(_DWORD *)&v962[2] = v926;
                  *(_WORD *)&v962[6] = 1024;
                  *(_DWORD *)&v962[8] = v927;
                  *(_WORD *)&v962[12] = 1024;
                  *(_DWORD *)&v962[14] = v925;
                  *(_WORD *)&v962[18] = 1024;
                  *(_DWORD *)&v962[20] = v928;
                  _os_log_impl( &dword_181A5C000,  v924,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
                }
              }
            }

            v904 = *(void **)(v12 + 496);
            if (!v904)
            {
              __nwlog_obj();
              *(_DWORD *)v963 = 136446210;
              *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v914 = (char *)_os_log_send_and_compose_impl();
              LOBYTE(aBlock) = 16;
              v955[0] = 0;
              if (aBlock == 17)
              {
                v915 = (os_log_s *)__nwlog_obj();
                os_log_type_t v916 = aBlock;
                if (!os_log_type_enabled(v915, (os_log_type_t)aBlock)) {
                  goto LABEL_1648;
                }
                *(_DWORD *)v963 = 136446210;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v917 = "%{public}s called with null http1_connection->context";
LABEL_1646:
                v933 = v963;
                goto LABEL_1647;
              }

              if (!v955[0])
              {
                v915 = (os_log_s *)__nwlog_obj();
                os_log_type_t v916 = aBlock;
                if (!os_log_type_enabled(v915, (os_log_type_t)aBlock)) {
                  goto LABEL_1648;
                }
                *(_DWORD *)v963 = 136446210;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v917 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
                goto LABEL_1646;
              }

              v929 = (char *)__nw_create_backtrace_string();
              v915 = (os_log_s *)__nwlog_obj();
              os_log_type_t v916 = aBlock;
              BOOL v930 = os_log_type_enabled(v915, (os_log_type_t)aBlock);
              if (!v929)
              {
                if (!v930) {
                  goto LABEL_1648;
                }
                *(_DWORD *)v963 = 136446210;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v917 = "%{public}s called with null http1_connection->context, no backtrace";
                goto LABEL_1646;
              }

              if (v930)
              {
                *(_DWORD *)v963 = 136446466;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                *(_WORD *)&v963[12] = 2082;
                *(void *)&v963[14] = v929;
                v931 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_1630:
                _os_log_impl(&dword_181A5C000, v915, v916, v931, v963, 0x16u);
              }

LABEL_1631:
              free(v929);
              if (!v914)
              {
LABEL_1557:
                if (!*(void *)(v12 + 488))
                {
                  uint64_t v907 = *(void *)(v12 + 784);
                  if (v907)
                  {
                    nw_queue_set_timer_values(v907, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                  }

                  else
                  {
                    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                    {
                      v908 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v908, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v909 = *(void *)(v12 + 488);
                        int v910 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
                        int v911 = *(_DWORD *)(v12 + 860);
                        if (v909) {
                          LODWORD(v909) = *(_DWORD *)(v909 + 424);
                        }
                        *(_DWORD *)buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v12 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v961 = (uint64_t)" ";
                        *(_WORD *)v962 = 1024;
                        *(_DWORD *)&v962[2] = v910;
                        *(_WORD *)&v962[6] = 1024;
                        *(_DWORD *)&v962[8] = v911;
                        *(_WORD *)&v962[12] = 1024;
                        *(_DWORD *)&v962[14] = v909;
                        _os_log_impl( &dword_181A5C000,  v908,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
                      }
                    }

                    uint64_t v912 = *(void *)(v12 + 608);
                    v913 = *(void **)(v12 + 496);
                    *(void *)buf = MEMORY[0x1895F87A8];
                    *(void *)&buf[8] = 0x40000000LL;
                    *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                    uint64_t v961 = (uint64_t)&unk_189BBD518;
                    *(void *)v962 = v912;
                    nw_queue_context_async(v913, buf);
                  }
                }

                return;
              }

LABEL_1649:
              free(v914);
              goto LABEL_1557;
            }

            uint64_t v905 = *(void *)(v12 + 480);
            if (v905)
            {
              uint64_t v906 = *(void *)(v905 + 200);
              *(void *)buf = MEMORY[0x1895F87A8];
              *(void *)&buf[8] = 0x40000000LL;
              *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
              uint64_t v961 = (uint64_t)&unk_189BBD540;
              *(void *)v962 = v906;
              nw_queue_context_async(v904, buf);
              goto LABEL_1557;
            }

            __nwlog_obj();
            *(_DWORD *)v963 = 136446210;
            *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            v914 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(aBlock) = 16;
            v955[0] = 0;
            if (__nwlog_fault(v914, &aBlock, v955))
            {
              if (aBlock == 17)
              {
                v915 = (os_log_s *)__nwlog_obj();
                os_log_type_t v916 = aBlock;
                if (!os_log_type_enabled(v915, (os_log_type_t)aBlock)) {
                  goto LABEL_1648;
                }
                *(_DWORD *)v963 = 136446210;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v917 = "%{public}s called with null http1";
                goto LABEL_1646;
              }

              if (!v955[0])
              {
                v915 = (os_log_s *)__nwlog_obj();
                os_log_type_t v916 = aBlock;
                if (!os_log_type_enabled(v915, (os_log_type_t)aBlock)) {
                  goto LABEL_1648;
                }
                *(_DWORD *)v963 = 136446210;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v917 = "%{public}s called with null http1, backtrace limit exceeded";
                goto LABEL_1646;
              }

              v929 = (char *)__nw_create_backtrace_string();
              v915 = (os_log_s *)__nwlog_obj();
              os_log_type_t v916 = aBlock;
              BOOL v932 = os_log_type_enabled(v915, (os_log_type_t)aBlock);
              if (!v929)
              {
                if (!v932) {
                  goto LABEL_1648;
                }
                *(_DWORD *)v963 = 136446210;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v917 = "%{public}s called with null http1, no backtrace";
                goto LABEL_1646;
              }

              if (v932)
              {
                *(_DWORD *)v963 = 136446466;
                *(void *)&v963[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                *(_WORD *)&v963[12] = 2082;
                *(void *)&v963[14] = v929;
                v931 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                goto LABEL_1630;
              }

              goto LABEL_1631;
            }

            _os_log_impl(&dword_181A5C000, v833, v834, v835, buf, 0xCu);
            goto LABEL_1650;
          }

          if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
            goto LABEL_715;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v263 = (os_log_s *)gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_715;
          }
          os_log_type_t v266 = *(_DWORD *)(v11 + 372);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1051 = (uint64_t)" ";
          *(_WORD *)v1052 = 1024;
          *(_DWORD *)&v1052[2] = v266;
          uint64_t v265 = "%{public}s %{public}s%s<i%u> no pending streams, nothing to do";
LABEL_456:
          os_log_type_t v267 = v263;
          uint64_t v268 = 38;
LABEL_457:
          _os_log_impl(&dword_181A5C000, v267, OS_LOG_TYPE_DEBUG, v265, buf, v268);
LABEL_715:
          if (!*(_DWORD *)(v11 + 336) && !*(_DWORD *)(v11 + 344)) {
            nw_protocol_http1_destroy(v11, v11);
          }
          return 1LL;
        }

        if ((*(_BYTE *)(v16 + 158) & 1) == 0)
        {
          if (*((_BYTE *)v15 + 1537))
          {
            v751 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v751, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v752 = *(void *)(v16 + 488);
              v753 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
              v754 = *(_DWORD *)(v16 + 860);
              if (v752) {
                LODWORD(v752) = *(_DWORD *)(v752 + 424);
              }
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v16 + 74;
              *(_WORD *)&buf[22] = 2080;
              v1051 = (uint64_t)" ";
              *(_WORD *)v1052 = 1024;
              *(_DWORD *)&v1052[2] = v753;
              *(_WORD *)&v1052[6] = 1024;
              *(_DWORD *)&v1052[8] = v754;
              *(_WORD *)&v1052[12] = 1024;
              *(_DWORD *)&v1052[14] = v752;
              *(_WORD *)&v1052[18] = 2048;
              *(void *)&v1052[20] = v16;
              _os_log_impl( &dword_181A5C000,  v751,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> triggering new flow on server connection %p, more input available",  buf,  0x3Cu);
              __int16 v11 = v1042;
              uint64_t v15 = &qword_18C45F000;
            }
          }
        }

        if ((*(_BYTE *)(v11 + 376) & 1) == 0)
        {
          if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
            goto LABEL_715;
          }
          if (!*((_BYTE *)v15 + 1537)) {
            goto LABEL_715;
          }
          uint64_t v263 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v263, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_715;
          }
          __int16 v269 = *(_DWORD *)(v11 + 372);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1051 = (uint64_t)" ";
          *(_WORD *)v1052 = 1024;
          *(_DWORD *)&v1052[2] = v269;
          uint64_t v265 = "%{public}s %{public}s%s<i%u> called when not in server mode, ignoring";
          goto LABEL_456;
        }

        uint64_t v270 = *(void ***)(v11 + 328);
        if (!v270)
        {
          if ((*(_BYTE *)(v16 + 158) & 1) != 0) {
            goto LABEL_715;
          }
          uint64_t v333 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v333, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_715;
          }
          uint64_t v334 = *(void *)(v16 + 488);
          int v335 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
          int v336 = *(_DWORD *)(v16 + 860);
          if (v334) {
            LODWORD(v334) = *(_DWORD *)(v334 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v16 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1051 = (uint64_t)" ";
          *(_WORD *)v1052 = 1024;
          *(_DWORD *)&v1052[2] = v335;
          *(_WORD *)&v1052[6] = 1024;
          *(_DWORD *)&v1052[8] = v336;
          *(_WORD *)&v1052[12] = 1024;
          *(_DWORD *)&v1052[14] = v334;
          uint64_t v265 = "%{public}s %{public}s%s<i%u:c%u:s%u> called without listen handler, ignoring";
          os_log_type_t v267 = v333;
          uint64_t v268 = 50;
          goto LABEL_457;
        }

        v271 = (unsigned __int16 *)(v16 + 872);
        BOOL v272 = *v270;
        if (v272 && *v272)
        {
          uint64_t v273 = *(nw_parameters **)(v11 + 264);
          if (v273)
          {
            uint64_t v274 = nw_parameters_copy(v273);
            *(void *)(v11 + 224) = v16;
            if ((***(unsigned int (****)(void, void, nw_parameters_t))(v11 + 328))( *(void *)(v11 + 328),  *(void *)(v11 + 280),  v274)
              && *(void *)(v16 + 488)
              && !*(void *)(v11 + 224))
            {
              if ((*(_BYTE *)(v11 + 158) & 1) == 0)
              {
                if (*((_BYTE *)v15 + 1537))
                {
                  v969 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v969, OS_LOG_TYPE_DEBUG))
                  {
                    v970 = *(_DWORD *)(v11 + 372);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v11 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v1051 = (uint64_t)" ";
                    *(_WORD *)v1052 = 1024;
                    *(_DWORD *)&v1052[2] = v970;
                    _os_log_impl( &dword_181A5C000,  v969,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> sucessfully associated new flow stream with connection, awaiting connected",  buf,  0x26u);
                  }
                }
              }

              uint64_t v380 = *v271;
              os_log_type_t v381 = (v380 | (*((unsigned __int8 *)v271 + 2) << 16)) & 0xFFFDFFFF;
              char *v271 = v380;
              *((_BYTE *)v271 + 2) = BYTE2(v381);
              goto LABEL_921;
            }

            if ((*(_BYTE *)(v11 + 158) & 1) == 0)
            {
              uint64_t v275 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
              {
                int v276 = *(_DWORD *)(v11 + 372);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v11 + 74;
                *(_WORD *)&buf[22] = 2080;
                v1051 = (uint64_t)" ";
                *(_WORD *)v1052 = 1024;
                *(_DWORD *)&v1052[2] = v276;
                *(_WORD *)&v1052[6] = 2048;
                *(void *)&v1052[8] = v16;
                _os_log_impl( &dword_181A5C000,  v275,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> listen handler didn't accept the new flow, closing connection %p",  buf,  0x30u);
              }
            }

            int v277 = *v271;
            uint64_t v278 = v277 | (*(unsigned __int8 *)(v16 + 874) << 16);
            if ((v277 & 0x100) != 0)
            {
              if ((*(_BYTE *)(v16 + 158) & 1) == 0)
              {
                if (*((_BYTE *)v15 + 1537))
                {
                  uint64_t v357 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v357, OS_LOG_TYPE_DEBUG))
                  {
                    int v358 = *(void *)(v16 + 488);
                    os_log_type_t v359 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                    uint64_t v360 = *(_DWORD *)(v16 + 860);
                    if (v358) {
                      LODWORD(v35_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v358 + 424);
                    }
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v16 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v1051 = (uint64_t)" ";
                    *(_WORD *)v1052 = 1024;
                    *(_DWORD *)&v1052[2] = v359;
                    *(_WORD *)&v1052[6] = 1024;
                    *(_DWORD *)&v1052[8] = v360;
                    *(_WORD *)&v1052[12] = 1024;
                    *(_DWORD *)&v1052[14] = v358;
                    _os_log_impl( &dword_181A5C000,  v357,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already closed",  buf,  0x32u);
                    __int16 v11 = v1042;
                  }
                }
              }

              goto LABEL_921;
            }

            *(_BYTE *)(v16 + 874) = BYTE2(v278);
            char *v271 = v278 | 0x100;
            if ((*(_BYTE *)(v16 + 158) & 1) == 0)
            {
              if (*((_BYTE *)v15 + 1537))
              {
                v874 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v874, OS_LOG_TYPE_DEBUG))
                {
                  v875 = *(void *)(v16 + 488);
                  BOOL v876 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                  v877 = *(_DWORD *)(v16 + 860);
                  if (v875) {
                    LODWORD(v875) = *(_DWORD *)(v875 + 424);
                  }
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v16 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v1051 = (uint64_t)" ";
                  *(_WORD *)v1052 = 1024;
                  *(_DWORD *)&v1052[2] = v876;
                  *(_WORD *)&v1052[6] = 1024;
                  *(_DWORD *)&v1052[8] = v877;
                  *(_WORD *)&v1052[12] = 1024;
                  *(_DWORD *)&v1052[14] = v875;
                  _os_log_impl( &dword_181A5C000,  v874,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
                  uint64_t v15 = &qword_18C45F000;
                }
              }
            }

            v279 = *(void *)(v16 + 480);
            if (!v279)
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              int v870 = (char *)_os_log_send_and_compose_impl();
              v1065[0] = 16;
              aBlock[0] = 0;
              if (v1065[0] == 17)
              {
                v871 = (os_log_s *)__nwlog_obj();
                v872 = v1065[0];
                if (!os_log_type_enabled(v871, (os_log_type_t)v1065[0])) {
                  goto LABEL_1824;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                os_log_type_t v873 = "%{public}s called with null http1";
              }

              else if (aBlock[0])
              {
                uint64_t v939 = (char *)__nw_create_backtrace_string();
                v871 = (os_log_s *)__nwlog_obj();
                v872 = v1065[0];
                uint64_t v940 = os_log_type_enabled(v871, (os_log_type_t)v1065[0]);
                if (v939)
                {
                  if (v940)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v939;
                    _os_log_impl( &dword_181A5C000,  v871,  v872,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v939);
                  goto LABEL_1824;
                }

                if (!v940) {
                  goto LABEL_1824;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                os_log_type_t v873 = "%{public}s called with null http1, no backtrace";
              }

              else
              {
                v871 = (os_log_s *)__nwlog_obj();
                v872 = v1065[0];
                if (!os_log_type_enabled(v871, (os_log_type_t)v1065[0])) {
                  goto LABEL_1824;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                os_log_type_t v873 = "%{public}s called with null http1, backtrace limit exceeded";
              }

              v988 = buf;
LABEL_1823:
              _os_log_impl(&dword_181A5C000, v871, v872, v873, v988, 0xCu);
              goto LABEL_1824;
            }

            uint64_t v280 = *v271;
            int v281 = v280 | (*(unsigned __int8 *)(v16 + 874) << 16);
            if ((v280 & 0x800) != 0)
            {
              __int16 v11 = v1042;
              if ((*(_BYTE *)(v16 + 158) & 1) == 0)
              {
                if (*((_BYTE *)v15 + 1537))
                {
                  uint64_t v370 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v370, OS_LOG_TYPE_DEBUG))
                  {
                    int v371 = *(void *)(v16 + 488);
                    int v372 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                    uint64_t v373 = *(_DWORD *)(v16 + 860);
                    if (v371) {
                      LODWORD(v371) = *(_DWORD *)(v371 + 424);
                    }
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v16 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v1051 = (uint64_t)" ";
                    *(_WORD *)v1052 = 1024;
                    *(_DWORD *)&v1052[2] = v372;
                    *(_WORD *)&v1052[6] = 1024;
                    *(_DWORD *)&v1052[8] = v373;
                    *(_WORD *)&v1052[12] = 1024;
                    *(_DWORD *)&v1052[14] = v371;
                    _os_log_impl( &dword_181A5C000,  v370,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
                    __int16 v11 = v1042;
                    if (*(void *)(v16 + 488)) {
                      goto LABEL_921;
                    }
                    goto LABEL_913;
                  }
                }
              }

LABEL_1648:
            if (!v914) {
              goto LABEL_1557;
            }
            goto LABEL_1649;
          }

          __nwlog_obj();
          uint64_t v656 = *(unsigned int *)(v651 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v961 = 1LL;
          *(_WORD *)v962 = 2048;
          *(void *)&v962[2] = v656;
          v657 = (char *)_os_log_send_and_compose_impl();
          v963[0] = 16;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v657, v963, &aBlock))
          {
            if (v963[0] == 17)
            {
              os_log_type_t v658 = (os_log_s *)__nwlog_obj();
              os_log_type_t v659 = v963[0];
              if (os_log_type_enabled(v658, (os_log_type_t)v963[0]))
              {
                uint64_t v660 = *(unsigned int *)(v651 + 368);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = 1LL;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v660;
                uint64_t v661 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1548:
                _os_log_impl(&dword_181A5C000, v658, v659, v661, buf, 0x2Au);
              }
            }

            else if ((_BYTE)aBlock)
            {
              v850 = (char *)__nw_create_backtrace_string();
              os_log_type_t v658 = (os_log_s *)__nwlog_obj();
              os_log_type_t v659 = v963[0];
              BOOL v851 = os_log_type_enabled(v658, (os_log_type_t)v963[0]);
              if (v850)
              {
                if (v851)
                {
                  uint64_t v852 = *(unsigned int *)(v651 + 368);
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v852;
                  *(_WORD *)&v962[10] = 2082;
                  *(void *)&v962[12] = v850;
                  _os_log_impl( &dword_181A5C000,  v658,  v659,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v850);
                goto LABEL_1549;
              }

              if (v851)
              {
                uint64_t v903 = *(unsigned int *)(v651 + 368);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = 1LL;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v903;
                uint64_t v661 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_1548;
              }
            }

            else
            {
              os_log_type_t v658 = (os_log_s *)__nwlog_obj();
              os_log_type_t v659 = v963[0];
              if (os_log_type_enabled(v658, (os_log_type_t)v963[0]))
              {
                uint64_t v886 = *(unsigned int *)(v651 + 368);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = 1LL;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v886;
                uint64_t v661 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_1548;
              }
            }
          }

LABEL_1549:
          if (v657) {
            free(v657);
          }
          *(_DWORD *)(v651 + 36_Block_object_dispose(&STACK[0x338], 8) = -1;
          goto LABEL_1552;
        }

        if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
          return;
        }
        if (!gLogDatapath) {
          return;
        }
        os_log_type_t v191 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        uint64_t v690 = *(void *)(v12 + 488);
        int v691 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
        int v692 = *(_DWORD *)(v12 + 860);
        if (v690) {
          LODWORD(v690) = *(_DWORD *)(v690 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v961 = (uint64_t)" ";
        *(_WORD *)v962 = 1024;
        *(_DWORD *)&v962[2] = v691;
        *(_WORD *)&v962[6] = 1024;
        *(_DWORD *)&v962[8] = v692;
        *(_WORD *)&v962[12] = 1024;
        *(_DWORD *)&v962[14] = v690;
        int v131 = "%{public}s %{public}s%s<i%u:c%u:s%u> already closed";
      }

      else
      {
        if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
          return;
        }
        os_log_type_t v191 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        uint64_t v192 = *(void *)(v12 + 488);
        int v193 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
        int v194 = *(_DWORD *)(v12 + 860);
        if (v192) {
          LODWORD(v192) = *(_DWORD *)(v192 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v961 = (uint64_t)" ";
        *(_WORD *)v962 = 1024;
        *(_DWORD *)&v962[2] = v193;
        *(_WORD *)&v962[6] = 1024;
        *(_DWORD *)&v962[8] = v194;
        *(_WORD *)&v962[12] = 1024;
        *(_DWORD *)&v962[14] = v192;
        int v131 = "%{public}s %{public}s%s<i%u:c%u:s%u> called without listen handler, ignoring";
      }

      uint64_t v133 = v191;
      uint32_t v134 = 50;
      goto LABEL_257;
    }

    uint64_t v47 = v7;
    __nwlog_obj();
    uint64_t v48 = *(unsigned int *)(v47 + 348);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->pending_stream_count";
    *(_WORD *)&buf[22] = 2048;
    uint64_t v961 = 1LL;
    *(_WORD *)v962 = 2048;
    *(void *)&v962[2] = v48;
    uint64_t v49 = (char *)_os_log_send_and_compose_impl();
    v963[0] = 16;
    LOBYTE(aBlock) = 0;
    if (__nwlog_fault(v49, v963, &aBlock))
    {
      if (v963[0] == 17)
      {
        id v50 = (os_log_s *)__nwlog_obj();
        os_log_type_t v51 = v963[0];
        if (os_log_type_enabled(v50, (os_log_type_t)v963[0]))
        {
          uint64_t v52 = *(unsigned int *)(v940 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v961 = 1LL;
          *(_WORD *)v962 = 2048;
          *(void *)&v962[2] = v52;
          __int16 v53 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_93:
          _os_log_impl(&dword_181A5C000, v50, v51, v53, buf, 0x2Au);
        }
      }

      else if ((_BYTE)aBlock)
      {
        int v54 = (char *)__nw_create_backtrace_string();
        id v50 = (os_log_s *)__nwlog_obj();
        os_log_type_t v51 = v963[0];
        BOOL v55 = os_log_type_enabled(v50, (os_log_type_t)v963[0]);
        if (v54)
        {
          if (v55)
          {
            uint64_t v56 = *(unsigned int *)(v940 + 348);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v961 = 1LL;
            *(_WORD *)v962 = 2048;
            *(void *)&v962[2] = v56;
            *(_WORD *)&v962[10] = 2082;
            *(void *)&v962[12] = v54;
            _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v54);
          goto LABEL_94;
        }

        if (v55)
        {
          uint64_t v58 = *(unsigned int *)(v940 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v961 = 1LL;
          *(_WORD *)v962 = 2048;
          *(void *)&v962[2] = v58;
          __int16 v53 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_93;
        }
      }

      else
      {
        id v50 = (os_log_s *)__nwlog_obj();
        os_log_type_t v51 = v963[0];
        if (os_log_type_enabled(v50, (os_log_type_t)v963[0]))
        {
          uint64_t v57 = *(unsigned int *)(v940 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v961 = 1LL;
          *(_WORD *)v962 = 2048;
          *(void *)&v962[2] = v57;
          __int16 v53 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_93;
        }
      }
    }

LABEL_476:
          if ((*(_BYTE *)(v25 + 158) & 1) == 0)
          {
            if (*((_BYTE *)v107 + 1537))
            {
              uint64_t v637 = v107;
              int v638 = (os_log_s *)__nwlog_obj();
              BOOL v639 = os_log_type_enabled(v638, OS_LOG_TYPE_DEBUG);
              uint64_t v107 = v637;
              uint64_t v25 = v940;
              if (v639)
              {
                int v640 = *(_DWORD *)(v940 + 372);
                int v641 = *(_DWORD *)(v106 + 424);
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v935;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v961 = (uint64_t)" ";
                *(_WORD *)v962 = 1024;
                *(_DWORD *)&v962[2] = v640;
                *(_WORD *)&v962[6] = 1024;
                *(_DWORD *)&v962[8] = v641;
                *(_WORD *)&v962[12] = 2048;
                *(void *)&v962[14] = v106;
                _os_log_impl( &dword_181A5C000,  v638,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
                uint64_t v107 = v637;
                uint64_t v25 = v940;
              }
            }
          }

          if ((*(_WORD *)(v106 + 428) & 0x1000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v106;
            int v287 = (char *)_os_log_send_and_compose_impl();
            v963[0] = 16;
            LOBYTE(aBlock) = 0;
            if (v963[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v288 = (os_log_s *)gLogObj;
              os_log_type_t v289 = v963[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v963[0])) {
                goto LABEL_506;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v106;
              v290 = "%{public}s stream %p not in pending list, cannot remove";
            }

            else if ((_BYTE)aBlock)
            {
              v293 = (char *)__nw_create_backtrace_string();
              uint64_t v288 = (os_log_s *)__nwlog_obj();
              os_log_type_t v289 = v963[0];
              BOOL v294 = os_log_type_enabled(v288, (os_log_type_t)v963[0]);
              if (v293)
              {
                if (v294)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v106;
                  *(_WORD *)&buf[22] = 2082;
                  uint64_t v961 = (uint64_t)v293;
                  _os_log_impl( &dword_181A5C000,  v288,  v289,  "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
                }

                free(v293);
                goto LABEL_506;
              }

              if (!v294)
              {
LABEL_506:
                if (v287) {
                  free(v287);
                }
                goto LABEL_518;
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v106;
              v290 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
            }

            else
            {
              uint64_t v288 = (os_log_s *)__nwlog_obj();
              os_log_type_t v289 = v963[0];
              if (!os_log_type_enabled(v288, (os_log_type_t)v963[0])) {
                goto LABEL_506;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v106;
              v290 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
            }

            _os_log_impl(&dword_181A5C000, v288, v289, v290, buf, 0x16u);
            goto LABEL_506;
          }

          uint64_t v291 = *(void *)(v106 + 296);
          v292 = *(void **)(v106 + 304);
          if (v291)
          {
            *(void *)(v291 + 304) = v292;
            v292 = *(void **)(v106 + 304);
          }

          else
          {
            *(void *)(v25 + 256) = v292;
          }

          void *v292 = v291;
          *(void *)(v106 + 296) = 0LL;
          *(void *)(v106 + 304) = 0LL;
          int v295 = *(_DWORD *)(v25 + 348);
          *(_DWORD *)(v25 + 34_Block_object_dispose(&STACK[0x338], 8) = v295 - 1;
          if (v295)
          {
LABEL_516:
            *(_WORD *)(v106 + 428) &= ~0x1000u;
            if ((*(_BYTE *)(v106 + 158) & 1) == 0)
            {
              if (*((_BYTE *)v107 + 1537))
              {
                v669 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v669, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v670 = v106 + 74;
                  uint64_t v671 = *(void *)(v106 + 256);
                  int v672 = *(_DWORD *)(*(void *)(v106 + 248) + 372LL);
                  if (v671) {
                    LODWORD(v671) = *(_DWORD *)(v671 + 860);
                  }
                  uint64_t v106 = v939;
                  int v673 = *(_DWORD *)(v939 + 424);
                  int v674 = *(_DWORD *)(v940 + 348);
                  *(_DWORD *)buf = 136448258;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v670;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v961 = (uint64_t)" ";
                  *(_WORD *)v962 = 1024;
                  *(_DWORD *)&v962[2] = v672;
                  *(_WORD *)&v962[6] = 1024;
                  *(_DWORD *)&v962[8] = v671;
                  *(_WORD *)&v962[12] = 1024;
                  *(_DWORD *)&v962[14] = v673;
                  *(_WORD *)&v962[18] = 1024;
                  *(_DWORD *)&v962[20] = v673;
                  *(_WORD *)&v962[24] = 2048;
                  *(void *)&v962[26] = v939;
                  *(_WORD *)&v962[34] = 1024;
                  *(_DWORD *)&v962[36] = v674;
                  _os_log_impl( &dword_181A5C000,  v669,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams",  buf,  0x48u);
                }
              }
            }

              if (v261) {
                free(v261);
              }
              os_log_type_t v36 = v273;
              uint64_t v49 = MEMORY[0x1895F87A8];
LABEL_122:
              os_log_type_t v79 = a1->output_handler;
              if (v79)
              {
                if (v79->handle == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v81 = v79[1].callbacks;
                  if (v81) {
                    v79[1].callbacks = (nw_protocol_callbacks *)((char *)&v81->add_input_handler + 1);
                  }
                  *(void *)uint64_t v330 = v79;
                  BOOL v80 = v330[8] | 1;
                }

                else
                {
                  *(void *)uint64_t v330 = a1->output_handler;
                  BOOL v80 = v330[8] & 0xFE;
                }

                v330[8] = v80;
                if (a1->handle == &nw_protocol_ref_counted_handle)
                {
                  os_log_type_t v83 = a1[1].callbacks;
                  if (v83) {
                    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v83->add_input_handler + 1);
                  }
                  *(void *)int v321 = a1;
                  uint64_t v82 = v322 | 1;
                }

                else
                {
                  *(void *)int v321 = a1;
                  uint64_t v82 = v322 & 0xFE;
                }

                int v322 = v82;
                uint64_t v84 = v79->callbacks;
                if (v84)
                {
                  disconnect = (void (*)(nw_protocol *, nw_protocol *))v84->disconnect;
                  if (disconnect)
                  {
                    disconnect(v79, a1);
LABEL_136:
                    nw::retained_ptr<nw_protocol *>::~retained_ptr((uint64_t *)v321);
                    nw::retained_ptr<nw_protocol *>::~retained_ptr((uint64_t *)v330);
                    goto LABEL_137;
                  }
                }

                int v205 = v36;
                __nwlog_obj();
                name = v79->identifier->name;
                *(_DWORD *)BOOL v323 = 136446722;
                *(void *)&v323[4] = "__nw_protocol_disconnect";
                if (!name) {
                  name = "invalid";
                }
                *(_WORD *)&v323[12] = 2082;
                *(void *)&v323[14] = name;
                *(_WORD *)&v323[22] = 2048;
                *(void *)uint64_t v324 = v79;
                BOOL v207 = (char *)_os_log_send_and_compose_impl();
                uint64_t v320 = OS_LOG_TYPE_ERROR;
                v319 = 0;
                if (__nwlog_fault(v207, &v320, &v319))
                {
                  if (v320 == OS_LOG_TYPE_FAULT)
                  {
                    uint64_t v208 = (os_log_s *)__nwlog_obj();
                    int v209 = v320;
                    if (os_log_type_enabled(v208, v320))
                    {
                      int v210 = v79->identifier->name;
                      if (!v210) {
                        int v210 = "invalid";
                      }
                      *(_DWORD *)BOOL v323 = 136446722;
                      *(void *)&v323[4] = "__nw_protocol_disconnect";
                      *(_WORD *)&v323[12] = 2082;
                      *(void *)&v323[14] = v210;
                      *(_WORD *)&v323[22] = 2048;
                      *(void *)uint64_t v324 = v79;
                      v211 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback";
LABEL_429:
                      uint64_t v257 = v208;
LABEL_430:
                      _os_log_impl(&dword_181A5C000, v257, v209, v211, v323, 0x20u);
                    }
                  }

                  else if (v319)
                  {
                    __int16 v240 = (char *)__nw_create_backtrace_string();
                    int v241 = (os_log_s *)__nwlog_obj();
                    int v209 = v320;
                    int v276 = v241;
                    id v242 = os_log_type_enabled(v241, v320);
                    if (v240)
                    {
                      if (v242)
                      {
                        int v243 = v79->identifier->name;
                        if (!v243) {
                          int v243 = "invalid";
                        }
                        *(_DWORD *)BOOL v323 = 136446978;
                        *(void *)&v323[4] = "__nw_protocol_disconnect";
                        *(_WORD *)&v323[12] = 2082;
                        *(void *)&v323[14] = v243;
                        *(_WORD *)&v323[22] = 2048;
                        *(void *)uint64_t v324 = v79;
                        *(_WORD *)&v324[8] = 2082;
                        *(void *)&v324[10] = v240;
                        _os_log_impl( &dword_181A5C000,  v276,  v209,  "%{public}s protocol %{public}s (%p) has invalid disconnect callback, dumping backtrace:%{public}s",  v323,  0x2Au);
                      }

                      free(v240);
                      goto LABEL_431;
                    }

                    if (v242)
                    {
                      BOOL v260 = v79->identifier->name;
                      if (!v260) {
                        BOOL v260 = "invalid";
                      }
                      *(_DWORD *)BOOL v323 = 136446722;
                      *(void *)&v323[4] = "__nw_protocol_disconnect";
                      *(_WORD *)&v323[12] = 2082;
                      *(void *)&v323[14] = v260;
                      *(_WORD *)&v323[22] = 2048;
                      *(void *)uint64_t v324 = v79;
                      v211 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, no backtrace";
                      uint64_t v257 = v276;
                      goto LABEL_430;
                    }
                  }

                  else
                  {
                    uint64_t v208 = (os_log_s *)__nwlog_obj();
                    int v209 = v320;
                    if (os_log_type_enabled(v208, v320))
                    {
                      v256 = v79->identifier->name;
                      if (!v256) {
                        v256 = "invalid";
                      }
                      *(_DWORD *)BOOL v323 = 136446722;
                      *(void *)&v323[4] = "__nw_protocol_disconnect";
                      *(_WORD *)&v323[12] = 2082;
                      *(void *)&v323[14] = v256;
                      *(_WORD *)&v323[22] = 2048;
                      *(void *)uint64_t v324 = v79;
                      v211 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, backtrace limit exceeded";
                      goto LABEL_429;
                    }
                  }
                }

LABEL_544:
              if (v310) {
                free(v310);
              }
LABEL_546:
              *(_WORD *)(v106 + 428) |= 0x4000u;
              uint64_t v332 = *(void **)(v106 + 352);
              *(void *)buf = MEMORY[0x1895F87A8];
              *(void *)&buf[8] = 0x40000000LL;
              *(void *)&buf[16] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke;
              uint64_t v961 = (uint64_t)&__block_descriptor_tmp_52_39863;
              *(void *)v962 = v106;
              nw_http_transaction_metadata_set_event_handler(v332, buf);
              nw_protocol_connected(*(void **)(v106 + 48), v106);
              return;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
            os_log_type_t v626 = (char *)_os_log_send_and_compose_impl();
            v963[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v626, v963, &aBlock))
            {
              if (v963[0] == 17)
              {
                v627 = (os_log_s *)__nwlog_obj();
                os_log_type_t v628 = v963[0];
                if (os_log_type_enabled(v627, (os_log_type_t)v963[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v629 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_1153:
                  _os_log_impl(&dword_181A5C000, v627, v628, v629, buf, 0xCu);
                }
              }

              else if ((_BYTE)aBlock)
              {
                v675 = (char *)__nw_create_backtrace_string();
                v627 = (os_log_s *)__nwlog_obj();
                os_log_type_t v628 = v963[0];
                BOOL v676 = os_log_type_enabled(v627, (os_log_type_t)v963[0]);
                if (v675)
                {
                  if (v676)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v675;
                    _os_log_impl( &dword_181A5C000,  v627,  v628,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v675);
                  goto LABEL_1154;
                }

                if (v676)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v629 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                  goto LABEL_1153;
                }
              }

              else
              {
                v627 = (os_log_s *)__nwlog_obj();
                os_log_type_t v628 = v963[0];
                if (os_log_type_enabled(v627, (os_log_type_t)v963[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v629 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                  goto LABEL_1153;
                }
              }
            }

            if (nw_ip_options_get_fragmentation_value(v190) == 1
              || nw_parameters_get_upper_transport_protocol(v188) == 253)
            {
              if (v192 == 2)
              {
                int v241 = v537;
                if (!setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0, 28, &v551, 4u))
                {
LABEL_566:
                  uint64_t v246 = 0;
                  goto LABEL_660;
                }

                id v242 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                int v243 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  int v553 = "nw_socket_set_common_sockopts";
                  os_log_type_t v554 = 2080;
                  *(void *)uint64_t v555 = (char *)a1 + 404;
                  *(_WORD *)&v555[8] = 1024;
                  *(_DWORD *)&v555[10] = v242;
                  _os_log_impl( &dword_181A5C000,  v243,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt IP_DONTFRAG failed %{darwin.errno}d",  buf,  0x1Cu);
                }

                uint64_t v244 = (os_log_s *)__nwlog_obj();
                BOOL v245 = v244;
                if (v242 == 22)
                {
                  if (os_log_type_enabled(v244, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    int v553 = "nw_socket_set_common_sockopts";
                    os_log_type_t v554 = 1024;
                    *(_DWORD *)uint64_t v555 = 22;
                    _os_log_impl( &dword_181A5C000,  v245,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt IP_DONTFRAG failed %{darwin.errno}d",  buf,  0x12u);
                    uint64_t v246 = 0;
                    goto LABEL_660;
                  }

                  goto LABEL_566;
                }

                uint64_t v533 = v150;
                *(_DWORD *)buf = 136446466;
                int v553 = "nw_socket_set_common_sockopts";
                os_log_type_t v554 = 1024;
                *(_DWORD *)uint64_t v555 = v242;
                os_log_type_t v251 = (char *)_os_log_send_and_compose_impl();
                v547[0] = OS_LOG_TYPE_ERROR;
                v545[0] = OS_LOG_TYPE_DEFAULT;
                if (v547[0] == OS_LOG_TYPE_FAULT)
                {
                  v252 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v253 = v547[0];
                  if (os_log_type_enabled(v252, v547[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    int v553 = "nw_socket_set_common_sockopts";
                    os_log_type_t v554 = 1024;
                    *(_DWORD *)uint64_t v555 = v242;
                    uint64_t v254 = "%{public}s setsockopt IP_DONTFRAG failed %{darwin.errno}d";
LABEL_589:
                    _os_log_impl(&dword_181A5C000, v252, v253, v254, buf, 0x12u);
                  }
                }

                else if (v545[0])
                {
                  BOOL v260 = (char *)__nw_create_backtrace_string();
                  v252 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v253 = v547[0];
                  uint64_t v261 = os_log_type_enabled(v252, v547[0]);
                  if (v260)
                  {
                    if (v261)
                    {
                      *(_DWORD *)buf = 136446722;
                      int v553 = "nw_socket_set_common_sockopts";
                      os_log_type_t v554 = 1024;
                      *(_DWORD *)uint64_t v555 = v242;
                      *(_WORD *)&v555[4] = 2082;
                      *(void *)&v555[6] = v260;
                      _os_log_impl( &dword_181A5C000,  v252,  v253,  "%{public}s setsockopt IP_DONTFRAG failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                    }

                    free(v260);
                    uint64_t v192 = identifier_low;
                    goto LABEL_590;
                  }

                  uint64_t v192 = identifier_low;
                  if (v261)
                  {
                    *(_DWORD *)buf = 136446466;
                    int v553 = "nw_socket_set_common_sockopts";
                    os_log_type_t v554 = 1024;
                    *(_DWORD *)uint64_t v555 = v242;
                    uint64_t v254 = "%{public}s setsockopt IP_DONTFRAG failed %{darwin.errno}d, no backtrace";
                    goto LABEL_589;
                  }
                }

                else
                {
                  v252 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v253 = v547[0];
                  if (os_log_type_enabled(v252, v547[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    int v553 = "nw_socket_set_common_sockopts";
                    os_log_type_t v554 = 1024;
                    *(_DWORD *)uint64_t v555 = v242;
                    uint64_t v254 = "%{public}s setsockopt IP_DONTFRAG failed %{darwin.errno}d, backtrace limit exceeded";
                    goto LABEL_589;
                  }
                }

LABEL_1154:
            if (v626) {
              free(v626);
            }
            uint64_t v106 = v939;
            goto LABEL_546;
          }

          v296 = v107;
          uint64_t v297 = v25;
          __nwlog_obj();
          uint64_t v298 = *(unsigned int *)(v297 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v961 = 1LL;
          *(_WORD *)v962 = 2048;
          *(void *)&v962[2] = v298;
          __int128 v299 = (char *)_os_log_send_and_compose_impl();
          v963[0] = 16;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v299, v963, &aBlock))
          {
            if (v963[0] == 17)
            {
              __int128 v300 = (os_log_s *)__nwlog_obj();
              os_log_type_t v301 = v963[0];
              if (os_log_type_enabled(v300, (os_log_type_t)v963[0]))
              {
                uint64_t v302 = *(unsigned int *)(v940 + 348);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = 1LL;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v302;
                int v303 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_512:
                _os_log_impl(&dword_181A5C000, v300, v301, v303, buf, 0x2Au);
              }
            }

            else if ((_BYTE)aBlock)
            {
              int v304 = (char *)__nw_create_backtrace_string();
              __int128 v300 = (os_log_s *)__nwlog_obj();
              os_log_type_t v301 = v963[0];
              BOOL v305 = os_log_type_enabled(v300, (os_log_type_t)v963[0]);
              if (v304)
              {
                if (v305)
                {
                  uint64_t v306 = *(unsigned int *)(v940 + 348);
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->pending_stream_count";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v306;
                  *(_WORD *)&v962[10] = 2082;
                  *(void *)&v962[12] = v304;
                  _os_log_impl( &dword_181A5C000,  v300,  v301,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v304);
                goto LABEL_513;
              }

              if (v305)
              {
                uint64_t v308 = *(unsigned int *)(v940 + 348);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = 1LL;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v308;
                int v303 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                goto LABEL_512;
              }
            }

            else
            {
              __int128 v300 = (os_log_s *)__nwlog_obj();
              os_log_type_t v301 = v963[0];
              if (os_log_type_enabled(v300, (os_log_type_t)v963[0]))
              {
                uint64_t v307 = *(unsigned int *)(v940 + 348);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = 1LL;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v307;
                int v303 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                goto LABEL_512;
              }
            }
          }

LABEL_513:
          if (v299) {
            free(v299);
          }
          *(_DWORD *)(v940 + 34_Block_object_dispose(&STACK[0x338], 8) = 0;
          uint64_t v106 = v939;
          uint64_t v107 = v296;
          goto LABEL_516;
        }

        BOOL v183 = v107;
        uint64_t v184 = v25;
        __nwlog_obj();
        uint64_t v185 = *(unsigned int *)(v184 + 340);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->idle_connections_count";
        *(_WORD *)&buf[22] = 2048;
        uint64_t v961 = 1LL;
        *(_WORD *)v962 = 2048;
        *(void *)&v962[2] = v185;
        unsigned int v186 = (char *)_os_log_send_and_compose_impl();
        v963[0] = 16;
        LOBYTE(aBlock) = 0;
        if (__nwlog_fault(v186, v963, &aBlock))
        {
          if (v963[0] == 17)
          {
            BOOL v187 = (os_log_s *)__nwlog_obj();
            os_log_type_t v188 = v963[0];
            if (os_log_type_enabled(v187, (os_log_type_t)v963[0]))
            {
              uint64_t v189 = *(unsigned int *)(v940 + 340);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v961 = 1LL;
              *(_WORD *)v962 = 2048;
              *(void *)&v962[2] = v189;
              uint64_t v190 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_466:
              _os_log_impl(&dword_181A5C000, v187, v188, v190, buf, 0x2Au);
            }
          }

          else if ((_BYTE)aBlock)
          {
            v211 = (char *)__nw_create_backtrace_string();
            BOOL v187 = (os_log_s *)__nwlog_obj();
            os_log_type_t v188 = v963[0];
            BOOL v212 = os_log_type_enabled(v187, (os_log_type_t)v963[0]);
            if (v211)
            {
              if (v212)
              {
                uint64_t v213 = *(unsigned int *)(v940 + 340);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->idle_connections_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = 1LL;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v213;
                *(_WORD *)&v962[10] = 2082;
                *(void *)&v962[12] = v211;
                _os_log_impl( &dword_181A5C000,  v187,  v188,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
              }

              free(v211);
              goto LABEL_467;
            }

            if (v212)
            {
              uint64_t v283 = *(unsigned int *)(v940 + 340);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v961 = 1LL;
              *(_WORD *)v962 = 2048;
              *(void *)&v962[2] = v283;
              uint64_t v190 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_466;
            }
          }

          else
          {
            BOOL v187 = (os_log_s *)__nwlog_obj();
            os_log_type_t v188 = v963[0];
            if (os_log_type_enabled(v187, (os_log_type_t)v963[0]))
            {
              uint64_t v280 = *(unsigned int *)(v940 + 340);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v961 = 1LL;
              *(_WORD *)v962 = 2048;
              *(void *)&v962[2] = v280;
              uint64_t v190 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_466;
            }
          }
        }

LABEL_1519:
                  if (v774) {
                    free(v774);
                  }
LABEL_827:
                  *(void *)buf = 0LL;
                  *(void *)&buf[8] = buf;
                  *(void *)&buf[16] = 0x2000000000LL;
                  uint64_t v961 = (uint64_t)v499;
                  uint64_t aBlock = v501;
                  uint64_t v945 = 0x40000000LL;
                  v946 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                  v947 = &unk_189BBD4F0;
                  v948 = (uint64_t *)buf;
                  *((void *)v499 + 76) = _Block_copy(&aBlock);
                  _Block_object_dispose(buf, 8);
                  if ((*((_BYTE *)v499 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v787 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v787, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v788 = *((void *)v499 + 61);
                        int v789 = *(_DWORD *)(*((void *)v499 + 60) + 372LL);
                        int v790 = *((_DWORD *)v499 + 215);
                        if (v788) {
                          LODWORD(v78_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v788 + 424);
                        }
                        *(_DWORD *)buf = 136447746;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = (char *)v499 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v961 = (uint64_t)" ";
                        *(_WORD *)v962 = 1024;
                        *(_DWORD *)&v962[2] = v789;
                        *(_WORD *)&v962[6] = 1024;
                        *(_DWORD *)&v962[8] = v790;
                        *(_WORD *)&v962[12] = 1024;
                        *(_DWORD *)&v962[14] = v788;
                        *(_WORD *)&v962[18] = 2048;
                        *(void *)&v962[20] = v499;
                        _os_log_impl( &dword_181A5C000,  v787,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created %p",  buf,  0x3Cu);
                      }
                    }
                  }

                  v510 = (nw_path **)(v499 + 32);
                  nw_protocol_replace_input_handler((uint64_t)v496, v939, (uint64_t)v499);
                  _OWORD *v499 = *v496;
                  v511 = (void *)*((void *)v499 + 92);
                  if (v511)
                  {
                    uint64_t v512 = v940;
                    uint64_t v513 = &qword_18C45F000;
                    if (!*((void *)v499 + 66))
                    {
                      uint64_t v514 = (void **)(v499 + 35);
                      id v515 = nw_parameters_copy_context(*((void **)v499 + 92));
                      *(void *)buf = nw_path_copy_flow_registration(v515, (uint64_t)v499);
                      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v499 + 35), buf);
                      v516 = (void *)*((void *)v499 + 70);
                      if (v516)
                      {
                        id v517 = nw_path_flow_registration_copy_endpoint(v516);
                        id v518 = nw_path_flow_registration_copy_parameters(*v514);
                        *(void *)buf = nw_endpoint_copy_association_with_evaluator(v517, v518, 0LL);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v499 + 33), buf);
                        if (*((void *)v499 + 66))
                        {
                          *(void *)buf = nw_protocol_instance_stub_create((nw_protocol *)v499);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v499 + 34), buf);
                          nw_association_register_internal( *((void **)v499 + 66),  v511,  *((void **)v499 + 68),  0,  0,  &__block_literal_global_65);
                          id v519 = nw_association_copy_current_path(*((void **)v499 + 66), v518);
                          if (v519)
                          {
                            v520 = v519;
                            os_log_type_t v521 = (nw_path *)nw_path_copy_for_flow_registration(v519, *v514);
                            if (v521)
                            {
                              v522 = v521;
                              if (*v510 != v521)
                              {
                                *(void *)buf = os_retain(v521);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v499 + 32), buf);
                              }

                              if (nw_path_has_flows(v522)) {
                                __int16 v523 = 4096;
                              }
                              else {
                                __int16 v523 = 0;
                              }
                              int v524 = *((_WORD *)v499 + 436) & 0xEFFF | (*((unsigned __int8 *)v499 + 874) << 16);
                              *((_WORD *)v499 + 436) = *((_WORD *)v499 + 436) & 0xEFFF | v523;
                              *((_BYTE *)v499 + 874) = BYTE2(v524);
                              id v525 = nw_parameters_copy_effective_proxy_config(v511);
                              if (v525)
                              {
                                int v526 = v525;
                                if (nw_path_has_proxy_config(v520, v525))
                                {
                                  *(void *)buf = os_retain(v526);
                                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v499 + 36), buf);
                                }

                                os_release(v526);
                              }

                              os_release(v522);
                            }

                            os_release(v520);
                          }
                        }

                        if (v518) {
                          os_release(v518);
                        }
                        if (v517) {
                          os_release(v517);
                        }
                      }

                      uint64_t v512 = v940;
                      uint64_t v513 = &qword_18C45F000;
                      if (v515)
                      {
                        os_release(v515);
                        uint64_t v513 = &qword_18C45F000;
                        uint64_t v512 = v940;
                      }
                    }

                    int v527 = *v510;
                    if (*v510)
                    {
LABEL_853:
                      BOOL v528 = nw_path_uses_interface_type(v527, nw_interface_type_cellular);
                      uint64_t v513 = &qword_18C45F000;
                      uint64_t v512 = v940;
                      if (v528) {
                        *((void *)v499 + 24) = 1000LL;
                      }
                    }

LABEL_855:
                    uint64_t v529 = *(unsigned int *)(v512 + 336) + 1LL;
                    uint64_t v530 = v529 << 31 >> 31;
                    *(_DWORD *)(v512 + 336) = v529;
                    uint64_t v531 = v939;
                    if (v530 == v529 && (v530 & 0x8000000000000000LL) == 0) {
                      goto LABEL_893;
                    }
                    uint64_t v532 = v512;
                    __nwlog_obj();
                    uint64_t v533 = *(unsigned int *)(v532 + 336);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v961 = 1LL;
                    *(_WORD *)v962 = 2048;
                    *(void *)&v962[2] = v533;
                    os_log_type_t v534 = (char *)_os_log_send_and_compose_impl();
                    v963[0] = 16;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v534, v963, &aBlock))
                    {
                      if (v963[0] == 17)
                      {
                        v535 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v536 = v963[0];
                        if (os_log_type_enabled(v535, (os_log_type_t)v963[0]))
                        {
                          uint64_t v537 = *(unsigned int *)(v940 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = 1LL;
                          *(_WORD *)v962 = 2048;
                          *(void *)&v962[2] = v537;
                          v538 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_889:
                          _os_log_impl(&dword_181A5C000, v535, v536, v538, buf, 0x2Au);
                        }
                      }

                      else if ((_BYTE)aBlock)
                      {
                        BOOL v557 = (char *)__nw_create_backtrace_string();
                        v535 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v536 = v963[0];
                        BOOL v558 = os_log_type_enabled(v535, (os_log_type_t)v963[0]);
                        if (v557)
                        {
                          if (v558)
                          {
                            uint64_t v559 = *(unsigned int *)(v940 + 336);
                            *(_DWORD *)buf = 136447234;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = "http1->connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            uint64_t v961 = 1LL;
                            *(_WORD *)v962 = 2048;
                            *(void *)&v962[2] = v559;
                            *(_WORD *)&v962[10] = 2082;
                            *(void *)&v962[12] = v557;
                            _os_log_impl( &dword_181A5C000,  v535,  v536,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                          }

                          free(v557);
                          goto LABEL_890;
                        }

                        if (v558)
                        {
                          uint64_t v564 = *(unsigned int *)(v940 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = 1LL;
                          *(_WORD *)v962 = 2048;
                          *(void *)&v962[2] = v564;
                          v538 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_889;
                        }
                      }

                      else
                      {
                        v535 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v536 = v963[0];
                        if (os_log_type_enabled(v535, (os_log_type_t)v963[0]))
                        {
                          uint64_t v563 = *(unsigned int *)(v940 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = 1LL;
                          *(_WORD *)v962 = 2048;
                          *(void *)&v962[2] = v563;
                          v538 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_889;
                        }
                      }
                    }

LABEL_890:
                    if (v534) {
                      free(v534);
                    }
                    uint64_t v512 = v940;
                    *(_DWORD *)(v940 + 336) = -1;
                    uint64_t v531 = v939;
                    uint64_t v513 = &qword_18C45F000;
LABEL_893:
                    uint64_t v565 = *(unsigned int *)(v512 + 360) + 1LL;
                    uint64_t v566 = v565 << 31 >> 31;
                    *(_DWORD *)(v512 + 360) = v565;
                    if (v566 == v565 && (v566 & 0x8000000000000000LL) == 0) {
                      goto LABEL_912;
                    }
                    uint64_t v567 = v512;
                    __nwlog_obj();
                    uint64_t v568 = *(unsigned int *)(v567 + 360);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v961 = 1LL;
                    *(_WORD *)v962 = 2048;
                    *(void *)&v962[2] = v568;
                    v569 = (char *)_os_log_send_and_compose_impl();
                    v963[0] = 16;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v569, v963, &aBlock))
                    {
                      if (v963[0] == 17)
                      {
                        BOOL v570 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v571 = v963[0];
                        if (os_log_type_enabled(v570, (os_log_type_t)v963[0]))
                        {
                          uint64_t v572 = *(unsigned int *)(v940 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = 1LL;
                          *(_WORD *)v962 = 2048;
                          *(void *)&v962[2] = v572;
                          uint64_t v573 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_908:
                          _os_log_impl(&dword_181A5C000, v570, v571, v573, buf, 0x2Au);
                        }
                      }

                      else if ((_BYTE)aBlock)
                      {
                        int v574 = (char *)__nw_create_backtrace_string();
                        BOOL v570 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v571 = v963[0];
                        BOOL v575 = os_log_type_enabled(v570, (os_log_type_t)v963[0]);
                        if (v574)
                        {
                          if (v575)
                          {
                            uint64_t v576 = *(unsigned int *)(v940 + 360);
                            *(_DWORD *)buf = 136447234;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = "http1->next_connection_log_num";
                            *(_WORD *)&buf[22] = 2048;
                            uint64_t v961 = 1LL;
                            *(_WORD *)v962 = 2048;
                            *(void *)&v962[2] = v576;
                            *(_WORD *)&v962[10] = 2082;
                            *(void *)&v962[12] = v574;
                            _os_log_impl( &dword_181A5C000,  v570,  v571,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                          }

                          free(v574);
                          goto LABEL_909;
                        }

                        if (v575)
                        {
                          uint64_t v578 = *(unsigned int *)(v940 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = 1LL;
                          *(_WORD *)v962 = 2048;
                          *(void *)&v962[2] = v578;
                          uint64_t v573 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_908;
                        }
                      }

                      else
                      {
                        BOOL v570 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v571 = v963[0];
                        if (os_log_type_enabled(v570, (os_log_type_t)v963[0]))
                        {
                          uint64_t v577 = *(unsigned int *)(v940 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = 1LL;
                          *(_WORD *)v962 = 2048;
                          *(void *)&v962[2] = v577;
                          uint64_t v573 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_908;
                        }
                      }
                    }

LABEL_909:
                    if (v569) {
                      free(v569);
                    }
                    LODWORD(v565) = -1;
                    *(_DWORD *)(v940 + 360) = -1;
                    uint64_t v531 = v939;
                    uint64_t v513 = &qword_18C45F000;
LABEL_912:
                    *((_DWORD *)v499 + 215) = v565;
                    if ((*((_BYTE *)v499 + 158) & 1) == 0)
                    {
                      if (*((_BYTE *)v513 + 1537))
                      {
                        v791 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v791, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v792 = *((void *)v499 + 61);
                          int v793 = *(_DWORD *)(*((void *)v499 + 60) + 372LL);
                          int v794 = *((_DWORD *)v499 + 215);
                          if (v792) {
                            LODWORD(v792) = *(_DWORD *)(v792 + 424);
                          }
                          int v795 = *(_DWORD *)(v940 + 336);
                          *(_DWORD *)buf = 136448002;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = (char *)v499 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v961 = (uint64_t)" ";
                          *(_WORD *)v962 = 1024;
                          *(_DWORD *)&v962[2] = v793;
                          *(_WORD *)&v962[6] = 1024;
                          *(_DWORD *)&v962[8] = v794;
                          *(_WORD *)&v962[12] = 1024;
                          *(_DWORD *)&v962[14] = v792;
                          *(_WORD *)&v962[18] = 2048;
                          *(void *)&v962[20] = v499;
                          *(_WORD *)&v962[28] = 1024;
                          *(_DWORD *)&v962[30] = v795;
                          _os_log_impl( &dword_181A5C000,  v791,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections",  buf,  0x42u);
                          uint64_t v531 = v939;
                        }
                      }
                    }

                    if (*(void *)(v531 + 248))
                    {
                      if (*((void *)v499 + 61))
                      {
                        __nwlog_obj();
                        uint64_t v579 = *((void *)v499 + 61);
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v499;
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v961 = v579;
                        BOOL v580 = (char *)_os_log_send_and_compose_impl();
                        v963[0] = 16;
                        LOBYTE(aBlock) = 0;
                        if (v963[0] == 17)
                        {
                          uint64_t v581 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v582 = v963[0];
                          if (!os_log_type_enabled(v581, (os_log_type_t)v963[0])) {
                            goto LABEL_940;
                          }
                          uint64_t v583 = *((void *)v499 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v499;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = v583;
                          int v584 = "%{public}s Connection %p already has a stream (%p)";
                        }

                        else if ((_BYTE)aBlock)
                        {
                          v597 = (char *)__nw_create_backtrace_string();
                          uint64_t v581 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v582 = v963[0];
                          BOOL v598 = os_log_type_enabled(v581, (os_log_type_t)v963[0]);
                          if (v597)
                          {
                            if (v598)
                            {
                              uint64_t v599 = *((void *)v499 + 61);
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v499;
                              *(_WORD *)&buf[22] = 2048;
                              uint64_t v961 = v599;
                              *(_WORD *)v962 = 2082;
                              *(void *)&v962[2] = v597;
                              _os_log_impl( &dword_181A5C000,  v581,  v582,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                            }

                            free(v597);
                            goto LABEL_940;
                          }

                          if (!v598)
                          {
LABEL_940:
                            if (v580) {
                              free(v580);
                            }
                            goto LABEL_942;
                          }

                          uint64_t v601 = *((void *)v499 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v499;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = v601;
                          int v584 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                        }

                        else
                        {
                          uint64_t v581 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v582 = v963[0];
                          if (!os_log_type_enabled(v581, (os_log_type_t)v963[0])) {
                            goto LABEL_940;
                          }
                          uint64_t v600 = *((void *)v499 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v499;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v961 = v600;
                          int v584 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                        }

                        _os_log_impl(&dword_181A5C000, v581, v582, v584, buf, 0x20u);
                        goto LABEL_940;
                      }

                      *(void *)(v531 + 256) = v499;
                      *((void *)v499 + 61) = v531;
                      nw_protocol_set_output_handler(v531, *((void *)v499 + 4));
                      nw_protocol_set_input_handler((uint64_t)v499, *(void *)(v531 + 48));
                      *(_OWORD *)uint64_t v531 = *v499;
                      __int128 v585 = v938[5];
                      __int128 v587 = v938[2];
                      __int128 v586 = v938[3];
                      v499[8] = v938[4];
                      v499[9] = v585;
                      v499[6] = v587;
                      v499[7] = v586;
                      __int128 v588 = v938[1];
                      v499[4] = *v938;
                      v499[5] = v588;
                      nw_http_transaction_metadata_set_connection_metadata( *(void **)(v531 + 352),  *((void **)v499 + 96));
                      *((_WORD *)v499 + 436) &= 0xFFD7u;
                      *((_DWORD *)v499 + 216) = 1;
                      if ((*((_BYTE *)v499 + 158) & 1) == 0)
                      {
                        int v589 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v589, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v590 = *((void *)v499 + 61);
                          int v591 = *(_DWORD *)(*((void *)v499 + 60) + 372LL);
                          int v592 = *((_DWORD *)v499 + 215);
                          if (v590) {
                            LODWORD(v590) = *(_DWORD *)(v590 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = (char *)v499 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v961 = (uint64_t)" ";
                          *(_WORD *)v962 = 1024;
                          *(_DWORD *)&v962[2] = v591;
                          *(_WORD *)&v962[6] = 1024;
                          *(_DWORD *)&v962[8] = v592;
                          *(_WORD *)&v962[12] = 1024;
                          *(_DWORD *)&v962[14] = v590;
                          _os_log_impl( &dword_181A5C000,  v589,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                        }
                      }

                      if ((*(_BYTE *)(v531 + 158) & 1) == 0)
                      {
                        v593 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v593, OS_LOG_TYPE_INFO))
                        {
                          uint64_t v594 = *(void *)(v531 + 256);
                          int v595 = *(_DWORD *)(*(void *)(v531 + 248) + 372LL);
                          if (v594) {
                            LODWORD(v594) = *(_DWORD *)(v594 + 860);
                          }
                          int v596 = *(_DWORD *)(v531 + 424);
                          *(_DWORD *)buf = 136448002;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v531 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v961 = (uint64_t)" ";
                          *(_WORD *)v962 = 1024;
                          *(_DWORD *)&v962[2] = v595;
                          *(_WORD *)&v962[6] = 1024;
                          *(_DWORD *)&v962[8] = v594;
                          *(_WORD *)&v962[12] = 1024;
                          *(_DWORD *)&v962[14] = v596;
                          *(_WORD *)&v962[18] = 2048;
                          *(void *)&v962[20] = v531;
                          *(_WORD *)&v962[28] = 2048;
                          *(void *)&v962[30] = v499;
                          _os_log_impl( &dword_181A5C000,  v593,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                        }
                      }

                free(v526);
                goto LABEL_977;
              }

              if (!v531) {
                goto LABEL_977;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
              os_log_type_t v521 = "%{public}s called with null http1_connection->current_stream, no backtrace";
LABEL_1014:
              uint64_t v564 = v527;
              uint64_t v565 = v528;
LABEL_976:
              _os_log_impl(&dword_181A5C000, v564, v565, v521, buf, 0xCu);
              goto LABEL_977;
            }

            int v204 = (uint64_t *)(v6 + 648);
            int v205 = *(void *)(v6 + 648);
            if (!v205) {
              goto LABEL_777;
            }
            os_log_type_t v615 = (void *)(v6 + 656);
            uint64_t v613 = (unsigned __int16 *)(v6 + 872);
            os_log_type_t v626 = v6 + 696;
            v629 = v6 + 74;
            uint64_t v617 = (uint64_t *)(v6 + 648);
            while (2)
            {
              os_log_type_t v206 = *(void *)(v205 + 32);
              BOOL v207 = *(void **)(v205 + 40);
              uint64_t v208 = (void *)(v205 + 32);
              if (v206)
              {
                *(void *)(v206 + 40) = v207;
                BOOL v207 = *(void **)(v205 + 40);
              }

              else
              {
                *os_log_type_t v615 = v207;
              }

              const char *v207 = v206;
              char *v208 = 0LL;
              *(void *)(v205 + 40) = 0LL;
              LODWORD(__len) = 0;
              if (*(void *)(v205 + 112))
              {
                if ((*(_WORD *)(v205 + 204) & 0x100) != 0
                  && g_channel_check_validity
                  && (g_channel_check_validity(v205, *(void *)(v205 + 88)) & 1) == 0)
                {
                  v211 = 0LL;
                  LODWORD(__len) = 0;
                  if ((*(_BYTE *)(v6 + 158) & 1) != 0) {
                    goto LABEL_424;
                  }
                }

                else
                {
                  int v210 = *(_DWORD *)(v205 + 52);
                  int v209 = *(unsigned int *)(v205 + 56);
                  if (v210) {
                    v210 -= v209 + *(_DWORD *)(v205 + 60);
                  }
                  LODWORD(__len) = v210;
                  v211 = (char *)(*(void *)(v205 + 112) + v209);
                  if ((*(_BYTE *)(v6 + 158) & 1) != 0)
                  {
LABEL_424:
                    if (!v211 || !(_DWORD)__len) {
                      goto LABEL_410;
                    }
                    if ((*(_WORD *)(*(void *)(v6 + 488) + 428LL) & 0x100) == 0)
                    {
LABEL_427:
                      if (nw_frame_is_metadata_complete(v205))
                      {
                        if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                        {
                          if (*((_BYTE *)v8 + 1537))
                          {
                            uint64_t v370 = (os_log_s *)__nwlog_obj();
                            if (os_log_type_enabled(v370, OS_LOG_TYPE_DEBUG))
                            {
                              int v371 = *(void *)(v6 + 488);
                              if (v371) {
                                LODWORD(v371) = *(_DWORD *)(v371 + 424);
                              }
                              uint64_t v6 = v627;
                              int v372 = *(_DWORD *)(*(void *)(v627 + 480) + 372LL);
                              uint64_t v373 = *(_DWORD *)(v627 + 860);
                              *(_DWORD *)buf = 136447746;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                              int v638 = 2082;
                              *(void *)BOOL v639 = v629;
                              *(_WORD *)&v639[8] = 2080;
                              *(void *)&v639[10] = " ";
                              *(_WORD *)&v639[18] = 1024;
                              *(_DWORD *)int v640 = v372;
                              *(_WORD *)&v640[4] = 1024;
                              *(_DWORD *)&v640[6] = v373;
                              *(_WORD *)int v641 = 1024;
                              *(_DWORD *)&v641[2] = v371;
                              *(_WORD *)&v641[6] = 2048;
                              *(void *)&v641[8] = v205;
                              _os_log_impl( &dword_181A5C000,  v370,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> draining output frame %p, complete",  buf,  0x3Cu);
                              int v204 = v617;
                            }
                          }
                        }
                      }

                      BOOL v212 = __len;
                      is_metadata_complete = nw_frame_is_metadata_complete(v205);
                      int v619 = v205;
                      if (v211)
                      {
                        if ((_DWORD)v212)
                        {
                          int v214 = *(void *)(v6 + 32);
                          if (v214)
                          {
                            uint64_t v215 = is_metadata_complete;
                            v622 = v208;
                            if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                            {
                              if (*((_BYTE *)v8 + 1537))
                              {
                                uint64_t v366 = (os_log_s *)__nwlog_obj();
                                if (os_log_type_enabled(v366, OS_LOG_TYPE_DEBUG))
                                {
                                  uint64_t v367 = *(void *)(v6 + 488);
                                  if (v367) {
                                    LODWORD(v367) = *(_DWORD *)(v367 + 424);
                                  }
                                  uint64_t v6 = v627;
                                  uint64_t v368 = *(_DWORD *)(*(void *)(v627 + 480) + 372LL);
                                  os_log_type_t v369 = *(_DWORD *)(v627 + 860);
                                  *(_DWORD *)buf = 136447746;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                  int v638 = 2082;
                                  *(void *)BOOL v639 = v629;
                                  *(_WORD *)&v639[8] = 2080;
                                  *(void *)&v639[10] = " ";
                                  *(_WORD *)&v639[18] = 1024;
                                  *(_DWORD *)int v640 = v368;
                                  *(_WORD *)&v640[4] = 1024;
                                  *(_DWORD *)&v640[6] = v369;
                                  *(_WORD *)int v641 = 1024;
                                  *(_DWORD *)&v641[2] = v367;
                                  *(_WORD *)&v641[6] = 1024;
                                  *(_DWORD *)&v641[8] = v212;
                                  _os_log_impl( &dword_181A5C000,  v366,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> sending %u bytes",  buf,  0x38u);
                                }
                              }
                            }

                            unsigned int v216 = v212;
LABEL_439:
                            *(void *)os_log_type_t type = 0LL;
                            int v636 = type;
                            BOOL v633 = 0LL;
                            uint64_t v634 = &v633;
                            char v221 = nw_protocol_get_output_frames(v214, v6, 1LL, v212, 0xFFFFFFFFLL, (uint64_t)type);
                            uint64_t v222 = *(void *)type;
                            if (*(void *)type) {
                              uint64_t v223 = v221 == 0;
                            }
                            else {
                              uint64_t v223 = 1;
                            }
                            if (v223)
                            {
                              uint64_t v263 = v221;
                              int v204 = v617;
                              if (v221)
                              {
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                *(_DWORD *)buf = 136446466;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                int v638 = 1024;
                                *(_DWORD *)BOOL v639 = v263;
                                v264 = (char *)_os_log_send_and_compose_impl();
                                LOBYTE(v647) = 16;
                                v632 = 0;
                                if (v647 != 17)
                                {
                                  if (v632)
                                  {
                                    v290 = (char *)__nw_create_backtrace_string();
                                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                    networkd_settings_init();
                                    uint64_t v291 = (os_log_s *)gLogObj;
                                    v292 = v647;
                                    v293 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647);
                                    if (v290)
                                    {
                                      if (v293)
                                      {
                                        *(_DWORD *)buf = 136446722;
                                        *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                        int v638 = 1024;
                                        *(_DWORD *)BOOL v639 = v263;
                                        *(_WORD *)&v639[4] = 2082;
                                        *(void *)&v639[6] = v290;
                                        _os_log_impl( &dword_181A5C000,  v291,  v292,  "%{public}s output handler reported %u frames to write, but array is empty, dum ping backtrace:%{public}s",  buf,  0x1Cu);
                                      }

                                      free(v290);
                                      goto LABEL_556;
                                    }

                                    if (!v293) {
                                      goto LABEL_556;
                                    }
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                    int v638 = 1024;
                                    *(_DWORD *)BOOL v639 = v263;
                                    os_log_type_t v267 = v291;
                                    uint64_t v268 = v292;
                                    __int16 v269 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
                                  }

                                  else
                                  {
                                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                    networkd_settings_init();
                                    int v303 = gLogObj;
                                    int v304 = v647;
                                    if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647)) {
                                      goto LABEL_556;
                                    }
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                    int v638 = 1024;
                                    *(_DWORD *)BOOL v639 = v263;
                                    os_log_type_t v267 = (os_log_s *)v303;
                                    uint64_t v268 = v304;
                                    __int16 v269 = "%{public}s output handler reported %u frames to write, but array is empty, ba"
                                           "cktrace limit exceeded";
                                  }

LABEL_942:
                      if ((*(_BYTE *)(v531 + 158) & 1) == 0)
                      {
                        v602 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v602, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v603 = *(void *)(v531 + 256);
                          int v604 = *(_DWORD *)(*(void *)(v531 + 248) + 372LL);
                          if (v603) {
                            LODWORD(v603) = *(_DWORD *)(v603 + 860);
                          }
                          int v605 = *(_DWORD *)(v531 + 424);
                          *(_DWORD *)buf = 136448258;
                          *(void *)&uint8_t buf[4] = "nw_http1_start_new_connection_for_stream";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v531 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v961 = (uint64_t)" ";
                          *(_WORD *)v962 = 1024;
                          *(_DWORD *)&v962[2] = v604;
                          *(_WORD *)&v962[6] = 1024;
                          *(_DWORD *)&v962[8] = v603;
                          *(_WORD *)&v962[12] = 1024;
                          *(_DWORD *)&v962[14] = v605;
                          *(_WORD *)&v962[18] = 2048;
                          *(void *)&v962[20] = v499;
                          *(_WORD *)&v962[28] = 1024;
                          *(_DWORD *)&v962[30] = v605;
                          *(_WORD *)&v962[34] = 2048;
                          *(void *)&v962[36] = v531;
                          _os_log_impl( &dword_181A5C000,  v602,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)",  buf,  0x4Cu);
                        }
                      }

                      nw_http_transaction_metadata_set_first_on_connection(*(void **)(v531 + 352));
                      uint64_t v606 = nw_protocol_copy_info((uint64_t)v496, 255);
                      v540 = (nw_protocol_stack *)v606;
                      if (v606
                        && (uint64_t v607 = *(void *)(v606 + 24), *(void *)(v606 + 16) != v607)
                        && (int v608 = *(void **)(v607 - 8)) != 0LL)
                      {
                        v609 = (nw_protocol_metadata *)os_retain(v608);
                        v610 = v609;
                        if (v609 && nw_protocol_metadata_is_tls(v609))
                        {
                          v610 = v610;
                          nw_http_connection_metadata_set_sec_metadata(*((void **)v499 + 96), v610);
                          os_release(v610);
                          nw_protocol_connect((uint64_t)v496, (uint64_t)v499);
                          goto LABEL_956;
                        }
                      }

                      else
                      {
                        v610 = 0LL;
                      }

                      if (v499)
                      {
                        nw_protocol_connect((uint64_t)v496, (uint64_t)v499);
                        if (!v610) {
                          goto LABEL_957;
                        }
                        goto LABEL_956;
                      }

                      uint64_t v749 = (uint64_t)v496;
                      __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                      v750 = (char *)_os_log_send_and_compose_impl();
                      v963[0] = 16;
                      LOBYTE(aBlock) = 0;
                      if (__nwlog_fault(v750, v963, &aBlock))
                      {
                        if (v963[0] == 17)
                        {
                          v751 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v752 = v963[0];
                          if (!os_log_type_enabled(v751, (os_log_type_t)v963[0])) {
                            goto LABEL_1470;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                          v753 = "%{public}s called with null connection";
LABEL_1469:
                          _os_log_impl(&dword_181A5C000, v751, v752, v753, buf, 0xCu);
                          goto LABEL_1470;
                        }

                        if (!(_BYTE)aBlock)
                        {
                          v751 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v752 = v963[0];
                          if (!os_log_type_enabled(v751, (os_log_type_t)v963[0])) {
                            goto LABEL_1470;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                          v753 = "%{public}s called with null connection, backtrace limit exceeded";
                          goto LABEL_1469;
                        }

                        v827 = (char *)__nw_create_backtrace_string();
                        v751 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v752 = v963[0];
                        BOOL v828 = os_log_type_enabled(v751, (os_log_type_t)v963[0]);
                        if (!v827)
                        {
                          if (!v828) {
                            goto LABEL_1470;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                          v753 = "%{public}s called with null connection, no backtrace";
                          goto LABEL_1469;
                        }

                        if (v828)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v827;
                          _os_log_impl( &dword_181A5C000,  v751,  v752,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                        }

                        free(v827);
                      }

LABEL_1470:
                      if (v750) {
                        free(v750);
                      }
                      nw_protocol_connect(v749, 0LL);
                      if (!v610)
                      {
LABEL_957:
                        if (!v540) {
                          return;
                        }
                        goto LABEL_971;
                      }

LABEL_956:
                      os_release(v610);
                      goto LABEL_957;
                    }

                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    v782 = (char *)_os_log_send_and_compose_impl();
                    v963[0] = 16;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v782, v963, &aBlock))
                    {
                      if (v963[0] == 17)
                      {
                        uint64_t v783 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v784 = v963[0];
                        if (os_log_type_enabled(v783, (os_log_type_t)v963[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          uint64_t v785 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_1531:
                          _os_log_impl(&dword_181A5C000, v783, v784, v785, buf, 0xCu);
                        }
                      }

                      else if ((_BYTE)aBlock)
                      {
                        v839 = (char *)__nw_create_backtrace_string();
                        uint64_t v783 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v784 = v963[0];
                        BOOL v840 = os_log_type_enabled(v783, (os_log_type_t)v963[0]);
                        if (v839)
                        {
                          if (v840)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v839;
                            _os_log_impl( &dword_181A5C000,  v783,  v784,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v839);
                          goto LABEL_1532;
                        }

                        if (v840)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          uint64_t v785 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                          goto LABEL_1531;
                        }
                      }

                      else
                      {
                        uint64_t v783 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v784 = v963[0];
                        if (os_log_type_enabled(v783, (os_log_type_t)v963[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          uint64_t v785 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                          goto LABEL_1531;
                        }
                      }
                    }

LABEL_1532:
                    if (v782) {
                      free(v782);
                    }
                    uint64_t v531 = v939;
                    goto LABEL_942;
                  }

                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                  uint64_t v778 = (char *)_os_log_send_and_compose_impl();
                  v963[0] = 16;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v778, v963, &aBlock))
                  {
                    if (v963[0] == 17)
                    {
                      v779 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v780 = v963[0];
                      if (!os_log_type_enabled(v779, (os_log_type_t)v963[0])) {
                        goto LABEL_1525;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      v781 = "%{public}s called with null parameters";
LABEL_1524:
                      _os_log_impl(&dword_181A5C000, v779, v780, v781, buf, 0xCu);
                      goto LABEL_1525;
                    }

                    if (!(_BYTE)aBlock)
                    {
                      v779 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v780 = v963[0];
                      if (!os_log_type_enabled(v779, (os_log_type_t)v963[0])) {
                        goto LABEL_1525;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      v781 = "%{public}s called with null parameters, backtrace limit exceeded";
                      goto LABEL_1524;
                    }

                    v837 = (char *)__nw_create_backtrace_string();
                    v779 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v780 = v963[0];
                    BOOL v838 = os_log_type_enabled(v779, (os_log_type_t)v963[0]);
                    if (!v837)
                    {
                      if (!v838) {
                        goto LABEL_1525;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      v781 = "%{public}s called with null parameters, no backtrace";
                      goto LABEL_1524;
                    }

                    if (v838)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v837;
                      _os_log_impl( &dword_181A5C000,  v779,  v780,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(v837);
                  }

LABEL_1525:
                  if (v778) {
                    free(v778);
                  }
                  uint64_t v512 = v940;
                  uint64_t v513 = &qword_18C45F000;
                  int v527 = *v510;
                  if (*v510) {
                    goto LABEL_853;
                  }
                  goto LABEL_855;
                }

LABEL_1650:
                __break(1u);
                return;
              }

              char v756 = *(_OWORD **)(v106 + 32);
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              os_log_type_t v757 = (char *)_os_log_send_and_compose_impl();
              v955[0] = 16;
              LOBYTE(v943[0]) = 0;
              if (__nwlog_fault(v757, v955, v943))
              {
                if (v955[0] == 17)
                {
                  v758 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v759 = v955[0];
                  if (!os_log_type_enabled(v758, (os_log_type_t)v955[0])) {
                    goto LABEL_1481;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  uint64_t v760 = "%{public}s called with null parameters";
                  goto LABEL_1480;
                }

                if (!LOBYTE(v943[0]))
                {
                  v758 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v759 = v955[0];
                  if (!os_log_type_enabled(v758, (os_log_type_t)v955[0])) {
                    goto LABEL_1481;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  uint64_t v760 = "%{public}s called with null parameters, backtrace limit exceeded";
                  goto LABEL_1480;
                }

                v831 = (char *)__nw_create_backtrace_string();
                v758 = (os_log_s *)__nwlog_obj();
                os_log_type_t v759 = v955[0];
                BOOL v834 = os_log_type_enabled(v758, (os_log_type_t)v955[0]);
                if (!v831)
                {
                  if (!v834) {
                    goto LABEL_1481;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  uint64_t v760 = "%{public}s called with null parameters, no backtrace";
                  goto LABEL_1480;
                }

                if (v834)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v831;
                  v833 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                  goto LABEL_1283;
                }

                goto LABEL_1284;
              }

                if (!v832) {
                  goto LABEL_1652;
                }
                goto LABEL_1651;
              }

              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              BOOL v832 = (char *)_os_log_send_and_compose_impl();
              type[0] = 16;
              LOBYTE(v1045[0]) = 0;
              if (type[0] != 17)
              {
                if (!LOBYTE(v1045[0]))
                {
                  v833 = (os_log_s *)__nwlog_obj();
                  BOOL v834 = type[0];
                  if (!os_log_type_enabled(v833, (os_log_type_t)type[0])) {
                    goto LABEL_1650;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  v835 = "%{public}s called with null endpoint, backtrace limit exceeded";
                  goto LABEL_1649;
                }

                v896 = (char *)__nw_create_backtrace_string();
                v833 = (os_log_s *)__nwlog_obj();
                BOOL v834 = type[0];
                v897 = os_log_type_enabled(v833, (os_log_type_t)type[0]);
                if (!v896)
                {
                  if (!v897) {
                    goto LABEL_1650;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  v835 = "%{public}s called with null endpoint, no backtrace";
                  goto LABEL_1649;
                }

                if (v897)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v896;
                  os_log_type_t v898 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1507:
                  _os_log_impl(&dword_181A5C000, v833, v834, v898, buf, 0x16u);
                }

LABEL_1481:
              if (!v757) {
                goto LABEL_1483;
              }
              goto LABEL_1482;
            }

            char v756 = *(_OWORD **)(v106 + 32);
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            os_log_type_t v757 = (char *)_os_log_send_and_compose_impl();
            v955[0] = 16;
            LOBYTE(v943[0]) = 0;
            if (v955[0] != 17)
            {
              if (!LOBYTE(v943[0]))
              {
                v758 = (os_log_s *)__nwlog_obj();
                os_log_type_t v759 = v955[0];
                if (!os_log_type_enabled(v758, (os_log_type_t)v955[0])) {
                  goto LABEL_1481;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                uint64_t v760 = "%{public}s called with null endpoint, backtrace limit exceeded";
                goto LABEL_1480;
              }

              v831 = (char *)__nw_create_backtrace_string();
              v758 = (os_log_s *)__nwlog_obj();
              os_log_type_t v759 = v955[0];
              BOOL v832 = os_log_type_enabled(v758, (os_log_type_t)v955[0]);
              if (!v831)
              {
                if (!v832) {
                  goto LABEL_1481;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                uint64_t v760 = "%{public}s called with null endpoint, no backtrace";
                goto LABEL_1480;
              }

              if (v832)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v831;
                v833 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1283:
                _os_log_impl(&dword_181A5C000, v758, v759, v833, buf, 0x16u);
              }

LABEL_1284:
              free(v831);
              if (!v757)
              {
LABEL_1483:
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                v890 = (char *)_os_log_send_and_compose_impl();
                v963[0] = 16;
                LOBYTE(aBlock) = 0;
                if (v963[0] == 17)
                {
                  v891 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v892 = v963[0];
                  if (!os_log_type_enabled(v891, (os_log_type_t)v963[0])) {
                    goto LABEL_1497;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  v893 = "%{public}s called with null http1_connection";
                }

                else if ((_BYTE)aBlock)
                {
                  v894 = (char *)__nw_create_backtrace_string();
                  v891 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v892 = v963[0];
                  BOOL v895 = os_log_type_enabled(v891, (os_log_type_t)v963[0]);
                  if (v894)
                  {
                    if (v895)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v894;
                      _os_log_impl( &dword_181A5C000,  v891,  v892,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(v894);
LABEL_1497:
                    if (v890) {
                      free(v890);
                    }
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    v896 = (char *)_os_log_send_and_compose_impl();
                    v963[0] = 16;
                    LOBYTE(aBlock) = 0;
                    if (v963[0] == 17)
                    {
                      v897 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v898 = v963[0];
                      if (os_log_type_enabled(v897, (os_log_type_t)v963[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        v899 = "%{public}s called with null http1_connection";
LABEL_1512:
                        _os_log_impl(&dword_181A5C000, v897, v898, v899, buf, 0xCu);
                      }
                    }

                    else if ((_BYTE)aBlock)
                    {
                      v900 = (char *)__nw_create_backtrace_string();
                      v897 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v898 = v963[0];
                      BOOL v901 = os_log_type_enabled(v897, (os_log_type_t)v963[0]);
                      if (v900)
                      {
                        if (v901)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v900;
                          _os_log_impl( &dword_181A5C000,  v897,  v898,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                        }

                        free(v900);
                        goto LABEL_1513;
                      }

                      if (v901)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        v899 = "%{public}s called with null http1_connection, no backtrace";
                        goto LABEL_1512;
                      }
                    }

                    else
                    {
                      v897 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v898 = v963[0];
                      if (os_log_type_enabled(v897, (os_log_type_t)v963[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        v899 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                        goto LABEL_1512;
                      }
                    }

                if (a2 == a3) {
                  return 96LL;
                }
                BOOL result = llparse__match_sequence_id((unsigned int *)a1, a2, a3, (uint64_t)&llparse_blob14, 10, a4);
                if ((_DWORD)result)
                {
                  if ((_DWORD)result != 1)
                  {
                    if ((_DWORD)result == 2)
                    {
                      BOOL result = 0LL;
                      *(_DWORD *)(a1 + 24) = 9;
                      *(void *)(a1 + 32) = "Expected HTTP/2 Connection Preface";
                      *(void *)(a1 + 40) = v323;
                      *(void *)(a1 + 56) = 0LL;
                      return result;
                    }

                    goto LABEL_2359;
                  }

                  return 96LL;
                }

                int v258 = (unsigned __int8 *)(v323 + 1);
                *(_DWORD *)(a1 + 24) = 23;
                BOOL v260 = "Pause on PRI/Upgrade";
LABEL_2201:
                *(void *)(a1 + 32) = v260;
                *(void *)(a1 + 40) = v258;
                *(void *)(a1 + 56) = 0LL;
                return result;
              default:
                int v358 = *(void *)(a1 + 8);
                *(void *)(a1 + _Block_object_dispose(&STACK[0x338], 8) = 0LL;
                os_log_type_t v359 = *(void *)(a1 + 88);
                if (!v359) {
                  goto LABEL_1478;
                }
                uint64_t v360 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v359 + 32);
                if (!v360) {
                  goto LABEL_1478;
                }
                uint64_t v361 = v360(a1, v358, &a2[-v358]);
                if (!v361) {
                  goto LABEL_1478;
                }
                uint64_t v362 = v361;
                if (v361 == -1)
                {
                  *(void *)(a1 + 32) = "Span callback error in on_version";
                  uint64_t v362 = 24;
                }

                BOOL result = 0LL;
                *(_DWORD *)(a1 + 24) = v362;
                *(void *)(a1 + 40) = a2;
                *(void *)(a1 + 56) = 103LL;
                return result;
            }
          }

          if (a4 == 1) {
            return 112LL;
          }
          break;
        default:
          goto LABEL_1309;
      }

LABEL_1513:
                    if (v896) {
                      free(v896);
                    }
                    v499 = 0LL;
                    uint64_t v531 = v939;
                    uint64_t v496 = v756;
                    goto LABEL_942;
                  }

                  if (!v895) {
                    goto LABEL_1497;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  v893 = "%{public}s called with null http1_connection, no backtrace";
                }

                else
                {
                  v891 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v892 = v963[0];
                  if (!os_log_type_enabled(v891, (os_log_type_t)v963[0])) {
                    goto LABEL_1497;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  v893 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                }

                _os_log_impl(&dword_181A5C000, v891, v892, v893, buf, 0xCu);
                goto LABEL_1497;
              }

LABEL_1482:
              free(v757);
              goto LABEL_1483;
            }

            v758 = (os_log_s *)__nwlog_obj();
            os_log_type_t v759 = v955[0];
            if (!os_log_type_enabled(v758, (os_log_type_t)v955[0])) {
              goto LABEL_1481;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            uint64_t v760 = "%{public}s called with null endpoint";
          }

          else
          {
            char v756 = 0LL;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            os_log_type_t v757 = (char *)_os_log_send_and_compose_impl();
            v955[0] = 16;
            LOBYTE(v943[0]) = 0;
            if (v955[0] != 17)
            {
              if (!LOBYTE(v943[0]))
              {
                v758 = (os_log_s *)__nwlog_obj();
                os_log_type_t v759 = v955[0];
                if (!os_log_type_enabled(v758, (os_log_type_t)v955[0])) {
                  goto LABEL_1481;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                uint64_t v760 = "%{public}s called with null output_handler, backtrace limit exceeded";
                goto LABEL_1480;
              }

              v829 = (char *)__nw_create_backtrace_string();
              v758 = (os_log_s *)__nwlog_obj();
              os_log_type_t v759 = v955[0];
              BOOL v830 = os_log_type_enabled(v758, (os_log_type_t)v955[0]);
              if (!v829)
              {
                if (!v830) {
                  goto LABEL_1481;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                uint64_t v760 = "%{public}s called with null output_handler, no backtrace";
                goto LABEL_1480;
              }

              if (v830)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v829;
                _os_log_impl( &dword_181A5C000,  v758,  v759,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v829);
              goto LABEL_1481;
            }

            v758 = (os_log_s *)__nwlog_obj();
            os_log_type_t v759 = v955[0];
            if (!os_log_type_enabled(v758, (os_log_type_t)v955[0])) {
              goto LABEL_1481;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            uint64_t v760 = "%{public}s called with null output_handler";
          }

LABEL_1480:
          _os_log_impl(&dword_181A5C000, v758, v759, v760, buf, 0xCu);
          goto LABEL_1481;
        }

        os_log_type_t v539 = (void **)(v106 + 320);
        v540 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v106 + 320));
        uint64_t v951 = 0LL;
        v952 = &v951;
        uint64_t v953 = 0x2000000000LL;
        char v954 = 0;
        *(void *)v963 = 0LL;
        *(void *)&v963[8] = v963;
        *(void *)&v963[16] = 0x3802000000LL;
        v964 = __Block_byref_object_copy__39933;
        v965 = __Block_byref_object_dispose__39934;
        v966 = 0LL;
        LOBYTE(v967) = v967 | 1;
        uint64_t v541 = v106;
        uint64_t v542 = MEMORY[0x1895F87A8];
        uint64_t aBlock = MEMORY[0x1895F87A8];
        uint64_t v945 = 0x40000000LL;
        v946 = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke;
        v947 = &unk_189BBD6B0;
        v948 = &v951;
        v949 = v963;
        uint64_t v950 = v541;
        nw_protocol_stack_iterate_application_protocols(v540, &aBlock);
        if (*(void *)(*(void *)&v963[8] + 40LL)) {
          goto LABEL_866;
        }
        os_log_type_t v543 = nw_protocol_stack_copy_transport_protocol(v540);
        BOOL is_quic = nw_protocol_options_is_quic(v543);
        if (v543) {
          os_release(v543);
        }
        if (!is_quic)
        {
LABEL_866:
          *(void *)buf = nw_parameters_shallow_copy(*v539);
          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)v539, buf);
        }

        else
        {
          v545 = *(void **)(v939 + 320);
          *(void *)buf = v542;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2;
          uint64_t v961 = (uint64_t)&unk_189BBD700;
          *(void *)v962 = v963;
          *(void *)&v962[8] = &v951;
          *(void *)&v962[16] = v939;
          *(void *)&v962[24] = v940;
          nw_parameters_enumerate_transformed_parameters(v545, buf);
        }

        uint64_t v546 = *(void **)(*(void *)&v963[8] + 40LL);
        if (v546)
        {
          int v547 = v546;
          sec_protocol_options_clear_tls_application_protocols();
          sec_protocol_options_add_tls_application_protocol(v547, "http/1.1");
          os_release(v547);
        }

        *((_BYTE *)v952 + 24) = 0;
        int v548 = *(void **)(v939 + 320);
        v943[0] = v542;
        v943[1] = 0x40000000LL;
        v943[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_73;
        v943[3] = &unk_189BBD728;
        v943[4] = &v951;
        v943[5] = v939;
        nw_parameters_remove_application_protocol_options_from_protocol_stack(v548, v943);
        *(_WORD *)(v939 + 428) |= 8u;
        uint64_t v549 = *(unsigned int *)(v940 + 352) + 1LL;
        uint64_t v550 = v549 << 31 >> 31;
        *(_DWORD *)(v940 + 352) = v549;
        if (v550 == v549 && (v550 & 0x8000000000000000LL) == 0)
        {
LABEL_967:
          uint64_t v613 = *(void *)(v939 + 312);
          v614 = *(void **)(v939 + 264);
          *(void *)v955 = v542;
          *(void *)&v955[8] = 0x40000000LL;
          *(void *)&v955[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_76;
          uint64_t v956 = (uint64_t)&unk_189BBD750;
          *(void *)v957 = v613;
          nw_queue_context_async(v614, v955);
          _Block_object_dispose(v963, 8);
          if ((v967 & 1) != 0 && v966) {
            os_release(v966);
          }
          _Block_object_dispose(&v951, 8);
          if (!v540) {
            return;
          }
LABEL_971:
          os_release(v540);
          return;
        }

        __nwlog_obj();
        uint64_t v551 = *(unsigned int *)(v940 + 352);
        *(_DWORD *)v955 = 136446978;
        *(void *)&v955[4] = "nw_http1_establish_new_connection_for_stream";
        *(_WORD *)&v955[12] = 2082;
        *(void *)&v955[14] = "http1->pending_output_handler_count";
        *(_WORD *)&v955[22] = 2048;
        uint64_t v956 = 1LL;
        *(_WORD *)v957 = 2048;
        *(void *)&v957[2] = v551;
        int v552 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v941 = 0;
        if (__nwlog_fault(v552, &type, &v941))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            int v553 = (os_log_s *)__nwlog_obj();
            os_log_type_t v554 = type;
            if (os_log_type_enabled(v553, type))
            {
              uint64_t v555 = *(unsigned int *)(v940 + 352);
              *(_DWORD *)v955 = 136446978;
              *(void *)&v955[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v955[12] = 2082;
              *(void *)&v955[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v955[22] = 2048;
              uint64_t v956 = 1LL;
              *(_WORD *)v957 = 2048;
              *(void *)&v957[2] = v555;
              v556 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_963:
              _os_log_impl(&dword_181A5C000, v553, v554, v556, v955, 0x2Au);
            }
          }

          else if (v941)
          {
            v560 = (char *)__nw_create_backtrace_string();
            int v553 = (os_log_s *)__nwlog_obj();
            os_log_type_t v554 = type;
            BOOL v561 = os_log_type_enabled(v553, type);
            if (v560)
            {
              if (v561)
              {
                uint64_t v562 = *(unsigned int *)(v940 + 352);
                *(_DWORD *)v955 = 136447234;
                *(void *)&v955[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&v955[12] = 2082;
                *(void *)&v955[14] = "http1->pending_output_handler_count";
                *(_WORD *)&v955[22] = 2048;
                uint64_t v956 = 1LL;
                *(_WORD *)v957 = 2048;
                *(void *)&v957[2] = v562;
                __int16 v958 = 2082;
                v959 = v560;
                _os_log_impl( &dword_181A5C000,  v553,  v554,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  v955,  0x34u);
              }

              free(v560);
              goto LABEL_964;
            }

            if (v561)
            {
              uint64_t v612 = *(unsigned int *)(v940 + 352);
              *(_DWORD *)v955 = 136446978;
              *(void *)&v955[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v955[12] = 2082;
              *(void *)&v955[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v955[22] = 2048;
              uint64_t v956 = 1LL;
              *(_WORD *)v957 = 2048;
              *(void *)&v957[2] = v612;
              v556 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_963;
            }
          }

          else
          {
            int v553 = (os_log_s *)__nwlog_obj();
            os_log_type_t v554 = type;
            if (os_log_type_enabled(v553, type))
            {
              uint64_t v611 = *(unsigned int *)(v940 + 352);
              *(_DWORD *)v955 = 136446978;
              *(void *)&v955[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v955[12] = 2082;
              *(void *)&v955[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v955[22] = 2048;
              uint64_t v956 = 1LL;
              *(_WORD *)v957 = 2048;
              *(void *)&v957[2] = v611;
              v556 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_963;
            }
          }
        }

LABEL_964:
        if (v552) {
          free(v552);
        }
        *(_DWORD *)(v940 + 352) = -1;
        goto LABEL_967;
      }

      if ((*(_BYTE *)(v25 + 158) & 1) == 0)
      {
        if (*((_BYTE *)v107 + 1537))
        {
          v810 = v107;
          v811 = (os_log_s *)__nwlog_obj();
          BOOL v812 = os_log_type_enabled(v811, OS_LOG_TYPE_DEBUG);
          uint64_t v107 = v810;
          uint64_t v25 = v940;
          if (v812)
          {
            int v813 = *(_DWORD *)(v940 + 372);
            int v814 = *(_DWORD *)(v106 + 424);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v940 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v813;
            *(_WORD *)&v962[6] = 1024;
            *(_DWORD *)&v962[8] = v814;
            *(_WORD *)&v962[12] = 2048;
            *(void *)&v962[14] = v106;
            _os_log_impl( &dword_181A5C000,  v811,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
            uint64_t v107 = v810;
            uint64_t v25 = v940;
          }
        }
      }

      if ((*(_WORD *)(v106 + 428) & 0x1000) == 0)
      {
        uint64_t v136 = v107;
        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v106;
        uint64_t v137 = (char *)_os_log_send_and_compose_impl();
        v963[0] = 16;
        LOBYTE(aBlock) = 0;
        if (__nwlog_fault(v137, v963, &aBlock))
        {
          if (v963[0] == 17)
          {
            int v138 = (os_log_s *)__nwlog_obj();
            os_log_type_t v139 = v963[0];
            if (os_log_type_enabled(v138, (os_log_type_t)v963[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v106;
              char v140 = "%{public}s stream %p not in pending list, cannot remove";
LABEL_722:
              _os_log_impl(&dword_181A5C000, v138, v139, v140, buf, 0x16u);
            }
          }

          else if ((_BYTE)aBlock)
          {
            uint64_t v345 = (char *)__nw_create_backtrace_string();
            int v138 = (os_log_s *)__nwlog_obj();
            os_log_type_t v139 = v963[0];
            BOOL v346 = os_log_type_enabled(v138, (os_log_type_t)v963[0]);
            if (v345)
            {
              if (v346)
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v106;
                *(_WORD *)&buf[22] = 2082;
                uint64_t v961 = (uint64_t)v345;
                _os_log_impl( &dword_181A5C000,  v138,  v139,  "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(v345);
              goto LABEL_723;
            }

            if (v346)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v106;
              char v140 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
              goto LABEL_722;
            }
          }

          else
          {
            int v138 = (os_log_s *)__nwlog_obj();
            os_log_type_t v139 = v963[0];
            if (os_log_type_enabled(v138, (os_log_type_t)v963[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v106;
              char v140 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
              goto LABEL_722;
            }
          }
        }

LABEL_723:
        if (v137) {
          free(v137);
        }
        uint64_t v107 = v136;
        goto LABEL_807;
      }

      uint64_t v278 = *(void *)(v106 + 296);
      v279 = *(void **)(v106 + 304);
      if (v278)
      {
        *(void *)(v278 + 304) = v279;
        v279 = *(void **)(v106 + 304);
      }

      else
      {
        *(void *)(v25 + 256) = v279;
      }

      void *v279 = v278;
      *(void *)(v106 + 296) = 0LL;
      *(void *)(v106 + 304) = 0LL;
      int v353 = *(_DWORD *)(v25 + 348);
      *(_DWORD *)(v25 + 34_Block_object_dispose(&STACK[0x338], 8) = v353 - 1;
      if (v353)
      {
LABEL_805:
        *(_WORD *)(v106 + 428) &= ~0x1000u;
        if ((*(_BYTE *)(v106 + 158) & 1) == 0)
        {
          if (*((_BYTE *)v107 + 1537))
          {
            v853 = v107;
            v854 = (os_log_s *)__nwlog_obj();
            BOOL v855 = os_log_type_enabled(v854, OS_LOG_TYPE_DEBUG);
            uint64_t v107 = v853;
            if (v855)
            {
              uint64_t v856 = v106 + 74;
              uint64_t v857 = *(void *)(v106 + 256);
              int v858 = *(_DWORD *)(*(void *)(v106 + 248) + 372LL);
              if (v857) {
                LODWORD(v857) = *(_DWORD *)(v857 + 860);
              }
              uint64_t v106 = v939;
              int v859 = *(_DWORD *)(v939 + 424);
              int v860 = *(_DWORD *)(v940 + 348);
              *(_DWORD *)buf = 136448258;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v856;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v961 = (uint64_t)" ";
              *(_WORD *)v962 = 1024;
              *(_DWORD *)&v962[2] = v858;
              *(_WORD *)&v962[6] = 1024;
              *(_DWORD *)&v962[8] = v857;
              *(_WORD *)&v962[12] = 1024;
              *(_DWORD *)&v962[14] = v859;
              *(_WORD *)&v962[18] = 1024;
              *(_DWORD *)&v962[20] = v859;
              *(_WORD *)&v962[24] = 2048;
              *(void *)&v962[26] = v939;
              *(_WORD *)&v962[34] = 1024;
              *(_DWORD *)&v962[36] = v860;
              _os_log_impl( &dword_181A5C000,  v854,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams",  buf,  0x48u);
              uint64_t v107 = v853;
            }
          }
        }

        goto LABEL_807;
      }

      __int128 v354 = v107;
      uint64_t v355 = v25;
      __nwlog_obj();
      uint64_t v356 = *(unsigned int *)(v355 + 348);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "http1->pending_stream_count";
      *(_WORD *)&buf[22] = 2048;
      uint64_t v961 = 1LL;
      *(_WORD *)v962 = 2048;
      *(void *)&v962[2] = v356;
      uint64_t v357 = (char *)_os_log_send_and_compose_impl();
      v963[0] = 16;
      LOBYTE(aBlock) = 0;
      if (__nwlog_fault(v357, v963, &aBlock))
      {
        if (v963[0] == 17)
        {
          int v358 = (os_log_s *)__nwlog_obj();
          os_log_type_t v359 = v963[0];
          if (os_log_type_enabled(v358, (os_log_type_t)v963[0]))
          {
            uint64_t v360 = *(unsigned int *)(v940 + 348);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v961 = 1LL;
            *(_WORD *)v962 = 2048;
            *(void *)&v962[2] = v360;
            uint64_t v361 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_801:
            _os_log_impl(&dword_181A5C000, v358, v359, v361, buf, 0x2Au);
          }
        }

        else if ((_BYTE)aBlock)
        {
          id v427 = (char *)__nw_create_backtrace_string();
          int v358 = (os_log_s *)__nwlog_obj();
          os_log_type_t v359 = v963[0];
          BOOL v428 = os_log_type_enabled(v358, (os_log_type_t)v963[0]);
          if (v427)
          {
            if (v428)
            {
              uint64_t v429 = *(unsigned int *)(v940 + 348);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->pending_stream_count";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v961 = 1LL;
              *(_WORD *)v962 = 2048;
              *(void *)&v962[2] = v429;
              *(_WORD *)&v962[10] = 2082;
              *(void *)&v962[12] = v427;
              _os_log_impl( &dword_181A5C000,  v358,  v359,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(v427);
            goto LABEL_802;
          }

          if (v428)
          {
            uint64_t v495 = *(unsigned int *)(v940 + 348);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v961 = 1LL;
            *(_WORD *)v962 = 2048;
            *(void *)&v962[2] = v495;
            uint64_t v361 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_801;
          }
        }

        else
        {
          int v358 = (os_log_s *)__nwlog_obj();
          os_log_type_t v359 = v963[0];
          if (os_log_type_enabled(v358, (os_log_type_t)v963[0]))
          {
            uint64_t v455 = *(unsigned int *)(v940 + 348);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v961 = 1LL;
            *(_WORD *)v962 = 2048;
            *(void *)&v962[2] = v455;
            uint64_t v361 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_801;
          }
        }
      }

LABEL_802:
      if (v357) {
        free(v357);
      }
      *(_DWORD *)(v940 + 34_Block_object_dispose(&STACK[0x338], 8) = 0;
      uint64_t v106 = v939;
      uint64_t v107 = v354;
      goto LABEL_805;
    }

    if (!*(void *)(v106 + 32))
    {
      if (!(*(_BYTE *)(v106 + 158) & 1 | (*((_BYTE *)v107 + 1537) == 0)))
      {
        os_log_type_t v206 = (os_log_s *)__nwlog_obj();
        BOOL v207 = os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG);
        uint64_t v25 = v940;
        if (v207)
        {
          uint64_t v208 = *(void *)(v106 + 256);
          int v209 = *(_DWORD *)(*(void *)(v106 + 248) + 372LL);
          if (v208) {
            LODWORD(v20_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v208 + 860);
          }
          int v210 = *(_DWORD *)(v939 + 424);
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v106 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v209;
          *(_WORD *)&v962[6] = 1024;
          *(_DWORD *)&v962[8] = v208;
          *(_WORD *)&v962[12] = 1024;
          *(_DWORD *)&v962[14] = v210;
          *(_WORD *)&v962[18] = 2048;
          *(void *)&v962[20] = v939;
          BOOL v126 = "%{public}s %{public}s%s<i%u:c%u:s%u> Stream %p still awaiting new output handler";
          uint64_t v127 = v206;
          uint32_t v128 = 60;
          goto LABEL_249;
        }
      }

      goto LABEL_250;
    }

    if (!(*(_BYTE *)(v106 + 158) & 1 | (*((_BYTE *)v107 + 1537) == 0)))
    {
      BOOL v706 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v706, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v707 = v106 + 74;
        uint64_t v708 = *(void *)(v106 + 256);
        int v709 = *(_DWORD *)(*(void *)(v106 + 248) + 372LL);
        if (v708) {
          LODWORD(v70_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v708 + 860);
        }
        uint64_t v106 = v939;
        int v710 = *(_DWORD *)(v939 + 424);
        uint64_t v711 = *(void *)(v939 + 32);
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v707;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v961 = (uint64_t)" ";
        *(_WORD *)v962 = 1024;
        *(_DWORD *)&v962[2] = v709;
        *(_WORD *)&v962[6] = 1024;
        *(_DWORD *)&v962[8] = v708;
        *(_WORD *)&v962[12] = 1024;
        *(_DWORD *)&v962[14] = v710;
        *(_WORD *)&v962[18] = 2048;
        *(void *)&v962[20] = v939;
        *(_WORD *)&v962[28] = 2048;
        *(void *)&v962[30] = v711;
        _os_log_impl( &dword_181A5C000,  v706,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> creating connection for stream %p with new output_handler %p",  buf,  0x46u);
      }
    }

    v163 = *(_OWORD **)(v106 + 32);
    if (v163)
    {
      v164 = *(void **)(v106 + 336);
      if (v164)
      {
        BOOL v165 = *(void **)(v106 + 320);
        if (v165)
        {
          uint64_t v166 = calloc(1uLL, 0x370uLL);
          if (!v166)
          {
            BOOL v712 = (os_log_s *)__nwlog_obj();
            os_log_type_enabled(v712, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = 1LL;
            *(_WORD *)&buf[22] = 2048;
            uint64_t v961 = 880LL;
            v713 = (void *)_os_log_send_and_compose_impl();
            free(v713);
          }

          bzero(v166, 0x370uLL);
          if (nw_protocol_http1_identifier::onceToken != -1) {
            dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
          }
          uint64_t v167 = v940;
          *((void *)v166 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
          if (nw_protocol_http1_get_callbacks(void)::onceToken != -1)
          {
            dispatch_once(&nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39683);
            uint64_t v167 = v940;
          }

          *((void *)v166 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
          *((_DWORD *)v166 + 46) = 3;
          *((void *)v166 + 22) = v166;
          *((void *)v166 + 5) = v166 + 10;
          *((void *)v166 + 60) = v167;
          nw_protocol_set_output_handler((uint64_t)v166, (uint64_t)v163);
          os_log_type_t v168 = os_retain(v164);
          char v169 = *((_BYTE *)v166 + 760);
          if ((v169 & 1) != 0)
          {
            int v170 = (void *)*((void *)v166 + 94);
            if (v170)
            {
              os_release(v170);
              char v169 = *((_BYTE *)v166 + 760);
            }
          }

          *((void *)v166 + 94) = v168;
          *((_BYTE *)v166 + 760) = v169 | 1;
          uint64_t v171 = os_retain(v165);
          char v172 = *((_BYTE *)v166 + 744);
          if ((v172 & 1) != 0)
          {
            int v173 = (void *)*((void *)v166 + 92);
            if (v173)
            {
              os_release(v173);
              char v172 = *((_BYTE *)v166 + 744);
            }
          }

          *((void *)v166 + 92) = v171;
          *((_BYTE *)v166 + 744) = v172 | 1;
          id v174 = nw_parameters_copy_context(v165);
          char v175 = *((_BYTE *)v166 + 504);
          if ((v175 & 1) != 0)
          {
            int v214 = (void *)*((void *)v166 + 62);
            uint64_t v176 = v940;
            if (v214)
            {
              os_release(v214);
              uint64_t v176 = v940;
              char v175 = *((_BYTE *)v166 + 504);
            }
          }

          else
          {
            uint64_t v176 = v940;
          }

          *((void *)v166 + 62) = v174;
          *((_BYTE *)v166 + 504) = v175 | 1;
          uint64_t v215 = MEMORY[0x1895F87A8];
          *((void *)v166 + 24) = *(void *)(v176 + 192);
          *(void *)v963 = v215;
          *(void *)&v963[8] = 0x40000000LL;
          *(void *)&v963[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
          v964 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39882;
          v965 = (void (*)(uint64_t))v166;
          metadata = nw_http_connection_create_metadata(v174, v963, 0LL);
          char v217 = *((_BYTE *)v166 + 776);
          if ((v217 & 1) != 0)
          {
            int v218 = (void *)*((void *)v166 + 96);
            if (v218)
            {
              os_release(v218);
              char v217 = *((_BYTE *)v166 + 776);
            }
          }

          *((void *)v166 + 96) = metadata;
          *((_BYTE *)v166 + 776) = v217 | 1;
          nw_http_connection_metadata_set_version(metadata, 3);
          nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v166 + 96), *(void **)(v940 + 312));
          *((void *)v166 + 77) = 0LL;
          *((void *)v166 + 7_Block_object_dispose(&STACK[0x338], 8) = (char *)v166 + 616;
          *((void *)v166 + 79) = 0LL;
          *((void *)v166 + 80) = (char *)v166 + 632;
          *((void *)v166 + 81) = 0LL;
          *((void *)v166 + 82) = (char *)v166 + 648;
          *((void *)v166 + 83) = 0LL;
          *((void *)v166 + 84) = (char *)v166 + 664;
          *((void *)v166 + 86) = (char *)v166 + 680;
          *((void *)v166 + 85) = 0LL;
          nw_frame_cache_init((uint64_t)v166 + 696, (uint64_t)v166, 256, 0x40000, 16);
          uint64_t v219 = *((void *)v166 + 60);
          if (v219)
          {
            *(_OWORD *)((char *)v166 + 360) = 0u;
            *(_OWORD *)((char *)v166 + 376) = 0u;
            *(_OWORD *)((char *)v166 + 392) = 0u;
            *(_OWORD *)((char *)v166 + 40_Block_object_dispose(&STACK[0x338], 8) = 0u;
            *(_OWORD *)((char *)v166 + 424) = 0u;
            *(_OWORD *)((char *)v166 + 440) = 0u;
            *(_OWORD *)((char *)v166 + 32_Block_object_dispose(&STACK[0x338], 8) = 0u;
            *(_OWORD *)((char *)v166 + 344) = 0u;
            *((void *)v166 + 59) = nw_http1_on_reset;
            *((void *)v166 + 37) = nw_http1_on_message_begin;
            *((void *)v166 + 3_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_url;
            *((void *)v166 + 4_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_message_complete;
            *((void *)v166 + 49) = nw_http1_on_url_complete;
            *((void *)v166 + 39) = nw_http1_on_status;
            *((void *)v166 + 40) = nw_http1_on_method;
            *((void *)v166 + 50) = nw_http1_on_status_complete;
            *((void *)v166 + 51) = nw_http1_on_method_complete;
            *((void *)v166 + 42) = nw_http1_on_header_field;
            *((void *)v166 + 43) = nw_http1_on_header_value;
            *((void *)v166 + 53) = nw_http1_on_header_field_complete;
            *((void *)v166 + 54) = nw_http1_on_header_value_complete;
            *((void *)v166 + 46) = nw_http1_on_headers_complete;
            *((void *)v166 + 47) = nw_http1_on_body;
            *((void *)v166 + 57) = nw_http1_on_chunk_header;
            *((void *)v166 + 5_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_chunk_complete;
            char v220 = *(_BYTE *)(v219 + 376);
            *(_OWORD *)((char *)v166 + 24_Block_object_dispose(&STACK[0x338], 8) = 0u;
            *(_OWORD *)((char *)v166 + 200) = 0u;
            *(_OWORD *)((char *)v166 + 264) = 0u;
            *(_OWORD *)((char *)v166 + 232) = 0u;
            *(_OWORD *)((char *)v166 + 216) = 0u;
            if ((v220 & 1) != 0) {
              char v221 = 1;
            }
            else {
              char v221 = 2;
            }
            *((_BYTE *)v166 + 272) = v221;
            *((void *)v166 + 35) = 0LL;
            *((void *)v166 + 36) = (char *)v166 + 296;
            *((_WORD *)v166 + 139) = 16131;
            *((void *)v166 + 31) = v166;
            *((void *)v166 + 32) = 238LL;
            if ((*((_BYTE *)v166 + 158) & 1) == 0)
            {
              uint64_t v222 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v223 = *((void *)v166 + 61);
                int v224 = *(_DWORD *)(*((void *)v166 + 60) + 372LL);
                int v225 = *((_DWORD *)v166 + 215);
                if (v223) {
                  LODWORD(v223) = *(_DWORD *)(v223 + 424);
                }
                *(_DWORD *)buf = 136448258;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_log_parser_version";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = (char *)v166 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v961 = (uint64_t)" ";
                *(_WORD *)v962 = 1024;
                *(_DWORD *)&v962[2] = v224;
                *(_WORD *)&v962[6] = 1024;
                *(_DWORD *)&v962[8] = v225;
                *(_WORD *)&v962[12] = 1024;
                *(_DWORD *)&v962[14] = v223;
                *(_WORD *)&v962[18] = 1024;
                *(_DWORD *)&v962[20] = 9;
                *(_WORD *)&v962[24] = 1024;
                *(_DWORD *)&v962[26] = 2;
                *(_WORD *)&v962[30] = 1024;
                *(_DWORD *)&v962[32] = 1;
                _os_log_impl( &dword_181A5C000,  v222,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u",  buf,  0x44u);
              }
            }

            goto LABEL_386;
          }

          BOOL v714 = v163;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
          v715 = (char *)_os_log_send_and_compose_impl();
          v955[0] = 16;
          LOBYTE(v943[0]) = 0;
          if (__nwlog_fault(v715, v955, v943))
          {
            if (v955[0] == 17)
            {
              BOOL v716 = (os_log_s *)__nwlog_obj();
              os_log_type_t v717 = v955[0];
              if (os_log_type_enabled(v716, (os_log_type_t)v955[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                BOOL v718 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_1414:
                _os_log_impl(&dword_181A5C000, v716, v717, v718, buf, 0xCu);
              }
            }

            else if (LOBYTE(v943[0]))
            {
              v796 = (char *)__nw_create_backtrace_string();
              BOOL v716 = (os_log_s *)__nwlog_obj();
              os_log_type_t v717 = v955[0];
              BOOL v797 = os_log_type_enabled(v716, (os_log_type_t)v955[0]);
              if (v796)
              {
                if (v797)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v796;
                  _os_log_impl( &dword_181A5C000,  v716,  v717,  "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v796);
                goto LABEL_1415;
              }

              if (v797)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                BOOL v718 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                goto LABEL_1414;
              }
            }

            else
            {
              BOOL v716 = (os_log_s *)__nwlog_obj();
              os_log_type_t v717 = v955[0];
              if (os_log_type_enabled(v716, (os_log_type_t)v955[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                BOOL v718 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                goto LABEL_1414;
              }
            }
          }

LABEL_1415:
          if (v715) {
            free(v715);
          }
          v163 = v714;
LABEL_386:
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000LL;
          uint64_t v961 = (uint64_t)v166;
          uint64_t aBlock = v215;
          uint64_t v945 = 0x40000000LL;
          v946 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
          v947 = &unk_189BBD4F0;
          v948 = (uint64_t *)buf;
          *((void *)v166 + 76) = _Block_copy(&aBlock);
          _Block_object_dispose(buf, 8);
          if ((*((_BYTE *)v166 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v729 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v729, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v730 = *((void *)v166 + 61);
                int v731 = *(_DWORD *)(*((void *)v166 + 60) + 372LL);
                int v732 = *((_DWORD *)v166 + 215);
                if (v730) {
                  LODWORD(v730) = *(_DWORD *)(v730 + 424);
                }
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = (char *)v166 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v961 = (uint64_t)" ";
                *(_WORD *)v962 = 1024;
                *(_DWORD *)&v962[2] = v731;
                *(_WORD *)&v962[6] = 1024;
                *(_DWORD *)&v962[8] = v732;
                *(_WORD *)&v962[12] = 1024;
                *(_DWORD *)&v962[14] = v730;
                *(_WORD *)&v962[18] = 2048;
                *(void *)&v962[20] = v166;
                _os_log_impl( &dword_181A5C000,  v729,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created %p",  buf,  0x3Cu);
              }
            }
          }

          int v226 = (nw_path **)(v166 + 32);
          nw_protocol_replace_input_handler((uint64_t)v163, v939, (uint64_t)v166);
          _OWORD *v166 = *v163;
          BOOL v227 = (void *)*((void *)v166 + 92);
          if (v227)
          {
            uint64_t v228 = v940;
            BOOL v229 = &qword_18C45F000;
            if (!*((void *)v166 + 66))
            {
              os_log_type_t v230 = (void **)(v166 + 35);
              id v231 = nw_parameters_copy_context(*((void **)v166 + 92));
              *(void *)buf = nw_path_copy_flow_registration(v231, (uint64_t)v166);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 35), buf);
              id v232 = (void *)*((void *)v166 + 70);
              if (v232)
              {
                BOOL v233 = v163;
                id v234 = nw_path_flow_registration_copy_endpoint(v232);
                id v235 = nw_path_flow_registration_copy_parameters(*v230);
                *(void *)buf = nw_endpoint_copy_association_with_evaluator(v234, v235, 0LL);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 33), buf);
                if (*((void *)v166 + 66))
                {
                  *(void *)buf = nw_protocol_instance_stub_create((nw_protocol *)v166);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 34), buf);
                  nw_association_register_internal( *((void **)v166 + 66),  v227,  *((void **)v166 + 68),  0,  0,  &__block_literal_global_65);
                  id v236 = nw_association_copy_current_path(*((void **)v166 + 66), v235);
                  if (v236)
                  {
                    BOOL v237 = v236;
                    uint64_t v238 = (nw_path *)nw_path_copy_for_flow_registration(v236, *v230);
                    if (v238)
                    {
                      BOOL v239 = v238;
                      if (*v226 != v238)
                      {
                        *(void *)buf = os_retain(v238);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 32), buf);
                      }

                      if (nw_path_has_flows(v239)) {
                        __int16 v240 = 4096;
                      }
                      else {
                        __int16 v240 = 0;
                      }
                      int v241 = *((_WORD *)v166 + 436) & 0xEFFF | (*((unsigned __int8 *)v166 + 874) << 16);
                      *((_WORD *)v166 + 436) = *((_WORD *)v166 + 436) & 0xEFFF | v240;
                      *((_BYTE *)v166 + 874) = BYTE2(v241);
                      id v242 = nw_parameters_copy_effective_proxy_config(v227);
                      if (v242)
                      {
                        int v243 = v242;
                        if (nw_path_has_proxy_config(v237, v242))
                        {
                          *(void *)buf = os_retain(v243);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 36), buf);
                        }

                        os_release(v243);
                      }

                      os_release(v239);
                    }

                    os_release(v237);
                  }
                }

                if (v235) {
                  os_release(v235);
                }
                v163 = v233;
                if (v234) {
                  os_release(v234);
                }
              }

              uint64_t v228 = v940;
              BOOL v229 = &qword_18C45F000;
              if (v231)
              {
                os_release(v231);
                BOOL v229 = &qword_18C45F000;
                uint64_t v228 = v940;
              }
            }

            uint64_t v244 = *v226;
            if (*v226)
            {
LABEL_412:
              BOOL v245 = nw_path_uses_interface_type(v244, nw_interface_type_cellular);
              BOOL v229 = &qword_18C45F000;
              uint64_t v228 = v940;
              if (v245) {
                *((void *)v166 + 24) = 1000LL;
              }
            }

LABEL_414:
            uint64_t v246 = *(unsigned int *)(v228 + 336) + 1LL;
            uint64_t v247 = v246 << 31 >> 31;
            *(_DWORD *)(v228 + 336) = v246;
            uint64_t v248 = v939;
            if (v247 == v246 && (v247 & 0x8000000000000000LL) == 0) {
              goto LABEL_589;
            }
            uint64_t v249 = v228;
            __nwlog_obj();
            uint64_t v250 = *(unsigned int *)(v249 + 336);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->connections_count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v961 = 1LL;
            *(_WORD *)v962 = 2048;
            *(void *)&v962[2] = v250;
            os_log_type_t v251 = (char *)_os_log_send_and_compose_impl();
            v963[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v251, v963, &aBlock))
            {
              if (v963[0] == 17)
              {
                v252 = (os_log_s *)__nwlog_obj();
                os_log_type_t v253 = v963[0];
                if (os_log_type_enabled(v252, (os_log_type_t)v963[0]))
                {
                  uint64_t v254 = *(unsigned int *)(v940 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v254;
                  v255 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_585:
                  _os_log_impl(&dword_181A5C000, v252, v253, v255, buf, 0x2Au);
                }
              }

              else if ((_BYTE)aBlock)
              {
                uint64_t v270 = v163;
                v271 = (char *)__nw_create_backtrace_string();
                v252 = (os_log_s *)__nwlog_obj();
                os_log_type_t v253 = v963[0];
                BOOL v272 = os_log_type_enabled(v252, (os_log_type_t)v963[0]);
                if (v271)
                {
                  if (v272)
                  {
                    uint64_t v273 = *(unsigned int *)(v940 + 336);
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v961 = 1LL;
                    *(_WORD *)v962 = 2048;
                    *(void *)&v962[2] = v273;
                    *(_WORD *)&v962[10] = 2082;
                    *(void *)&v962[12] = v271;
                    _os_log_impl( &dword_181A5C000,  v252,  v253,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                  }

                  free(v271);
                  v163 = v270;
                  goto LABEL_586;
                }

                v163 = v270;
                if (v272)
                {
                  uint64_t v362 = *(unsigned int *)(v940 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v362;
                  v255 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_585;
                }
              }

              else
              {
                v252 = (os_log_s *)__nwlog_obj();
                os_log_type_t v253 = v963[0];
                if (os_log_type_enabled(v252, (os_log_type_t)v963[0]))
                {
                  uint64_t v352 = *(unsigned int *)(v940 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v352;
                  v255 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_585;
                }
              }
            }

    if (v187) {
      free(v187);
    }
    goto LABEL_416;
  }

  if (v3 != 3)
  {
LABEL_416:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_finished";
    BOOL v158 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (v265[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v159 = (os_log_s *)gLogObj;
      os_log_type_t v160 = v265[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0])) {
        goto LABEL_432;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_finished";
      uint64_t v161 = "%{public}s called with null http1_connection";
      goto LABEL_431;
    }

    if (v257[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v159 = (os_log_s *)gLogObj;
      os_log_type_t v160 = v265[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0])) {
        goto LABEL_432;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_finished";
      uint64_t v161 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_431;
    }

    os_log_type_t v168 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v159 = (os_log_s *)gLogObj;
    os_log_type_t v160 = v265[0];
    int v218 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0]);
    if (!v168)
    {
      if (!v218) {
        goto LABEL_432;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_finished";
      uint64_t v161 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_431;
    }

    if (!v218)
    {
LABEL_425:
      free(v168);
      if (!v158) {
        return;
      }
LABEL_433:
      free(v158);
      return;
    }

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_finished";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v168;
    int v170 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_424:
    _os_log_impl(&dword_181A5C000, v159, v160, v170, buf, 0x16u);
    goto LABEL_425;
  }

  uint64_t v7 = (uint64_t *)(handle + 16);
LABEL_17:
  uint64_t v9 = *v7;
  if (!*v7) {
    goto LABEL_416;
  }
  uint64_t v10 = (unsigned __int16 *)(v9 + 872);
  __int16 v11 = *(unsigned __int16 *)(v9 + 872);
  uint64_t v12 = v11 | (*(unsigned __int8 *)(v9 + 874) << 16);
  if ((v11 & 0x2000) != 0)
  {
    if ((*(_BYTE *)(v9 + 158) & 1) != 0) {
      goto LABEL_96;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v49 = (os_log_s *)gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      goto LABEL_96;
    }
    id v50 = *(void *)(v9 + 488);
    os_log_type_t v51 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
    uint64_t v52 = *(_DWORD *)(v9 + 860);
    if (v50) {
      LODWORD(v50) = *(_DWORD *)(v50 + 424);
    }
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v9 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v51;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v52;
    LOWORD(v262) = 1024;
    *(_DWORD *)((char *)&v262 + 2) = v50;
    __int16 v53 = "%{public}s %{public}s%s<i%u:c%u:s%u> input already finished, returning";
LABEL_95:
    _os_log_impl(&dword_181A5C000, v49, OS_LOG_TYPE_INFO, v53, buf, 0x32u);
    goto LABEL_96;
  }

  *(_BYTE *)(v9 + 874) = BYTE2(v12);
  uint64_t *v10 = v12 | 0x2000;
  if ((v12 & 0x40000) != 0)
  {
    if ((*(_BYTE *)(v9 + 158) & 1) != 0) {
      goto LABEL_96;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v49 = (os_log_s *)gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      goto LABEL_96;
    }
    int v54 = *(void *)(v9 + 488);
    BOOL v55 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
    uint64_t v56 = *(_DWORD *)(v9 + 860);
    if (v54) {
      LODWORD(v54) = *(_DWORD *)(v54 + 424);
    }
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v9 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v55;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v56;
    LOWORD(v262) = 1024;
    *(_DWORD *)((char *)&v262 + 2) = v54;
    __int16 v53 = "%{public}s %{public}s%s<i%u:c%u:s%u> already getting input frames, returning";
    goto LABEL_95;
  }

  v256 = (_WORD *)(v9 + 872);
  uint64_t v13 = 0;
  *(void *)uint64_t v257 = 0LL;
  int v258 = v257;
  do
  {
    input_frames = nw_protocol_get_input_frames( *(void *)(v9 + 32),  v9,  1LL,  0xFFFFFFFFLL,  0xFFFFFFFFLL,  (uint64_t)v257);
    uint64_t v15 = *(_DWORD **)v257;
    if (!*(void *)v257) {
      goto LABEL_22;
    }
    if (gLogDatapath)
    {
      uint64_t v47 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v15;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = v257;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = v9 + 616;
        *(_WORD *)&buf[42] = 1024;
        LODWORD(v262) = 1;
        WORD2(v262) = 1024;
        *(_DWORD *)((char *)&v262 + 6) = 1;
        WORD5(v262) = 1024;
        HIDWORD(v262) = 1;
        _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s called: initial frame %p, source %p, destination %p, temp %u, forwards %u, append %u",  buf,  0x3Cu);
      }
    }

    BOOL v16 = 0;
    *(void *)uint64_t v265 = 0LL;
    *(void *)&v265[8] = v265;
    do
    {
      uint64_t v19 = (_DWORD *)*((void *)v15 + 4);
      if (!v19 && !*((void *)v15 + 5)) {
        uint64_t v19 = 0LL;
      }
      if (gLogDatapath)
      {
        uint64_t v21 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          int v22 = v15[13];
          if (v22) {
            v22 -= v15[14] + v15[15];
          }
          if (v19)
          {
            int v23 = v19[13];
            if (v23) {
              v23 -= v19[14] + v19[15];
            }
          }

          else
          {
            int v23 = 0;
          }

          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v15;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&_BYTE buf[24] = v22;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v19;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v23;
          _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEBUG,  "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)",  buf,  0x2Cu);
        }
      }

      uint64_t v20 = *((void *)v15 + 4);
      int v17 = (void *)*((void *)v15 + 5);
      if (v20)
      {
        *(void *)(v20 + 40) = v17;
        int v17 = (void *)*((void *)v15 + 5);
      }

      else
      {
        int v258 = (os_log_type_t *)*((void *)v15 + 5);
      }

      *int v17 = v20;
      int v18 = *(void **)&v265[8];
      *((void *)v15 + 4) = 0LL;
      *((void *)v15 + 5) = v18;
      char *v18 = v15;
      *(void *)&v265[8] = v15 + 8;
      ++v16;
      uint64_t v15 = v19;
    }

    while (v19);
    if (v16)
    {
      if (gLogDatapath)
      {
        uint64_t v48 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v16;
          _os_log_impl( &dword_181A5C000,  v48,  OS_LOG_TYPE_DEBUG,  "%{public}s moving %u frames from temp array to destination array",  buf,  0x12u);
        }
      }

      uint64_t v24 = *(_DWORD **)v265;
      uint64_t v25 = v16;
      if (!*(void *)v265) {
        goto LABEL_63;
      }
      uint64_t v25 = v16;
      do
      {
        uint64_t v27 = v24 + 8;
        int v28 = (_DWORD *)*((void *)v24 + 4);
        if (!v28 && !*((void *)v24 + 5)) {
          int v28 = 0LL;
        }
        if (gLogDatapath)
        {
          uint64_t v31 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            int v32 = v24[13];
            if (v32) {
              v32 -= v24[14] + v24[15];
            }
            if (v28)
            {
              int v33 = v28[13];
              if (v33) {
                v33 -= v28[14] + v28[15];
              }
            }

            else
            {
              int v33 = 0;
            }

            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v24;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&_BYTE buf[24] = v32;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v28;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v33;
            _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEBUG,  "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)",  buf,  0x2Cu);
          }
        }

        int v29 = *((void *)v24 + 4);
        char v30 = (void *)*((void *)v24 + 5);
        if (v29)
        {
          *(void *)(v29 + 40) = v30;
          char v30 = (void *)*((void *)v24 + 5);
        }

        else
        {
          *(void *)&v265[8] = *((void *)v24 + 5);
        }

        const char *v30 = v29;
        *uint64_t v27 = 0LL;
        *((void *)v24 + 5) = 0LL;
        int v26 = *(void **)(v9 + 624);
        *((void *)v24 + 5) = v26;
        os_log_s *v26 = v24;
        *(void *)(v9 + 624) = v27;
        --v25;
        uint64_t v24 = v28;
      }

      while (v28);
      if (v25)
      {
LABEL_63:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        BOOL v34 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        int v259 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v35 = gLogObj;
          os_log_type_t v36 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_77;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          int v37 = (os_log_s *)v35;
          uint64_t v38 = v36;
          int v39 = "%{public}s failed to deliver all temp frames, remaining %u frames";
        }

        else if (v259)
        {
          int v40 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v41 = (os_log_s *)gLogObj;
          id v42 = type;
          char v43 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v40)
          {
            if (v43)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v40;
              _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s failed to deliver all temp frames, remaining %u frames, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v40);
            goto LABEL_77;
          }

          if (!v43)
          {
LABEL_77:
            if (v34) {
              free(v34);
            }
            goto LABEL_21;
          }

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          int v37 = v41;
          uint64_t v38 = v42;
          int v39 = "%{public}s failed to deliver all temp frames, remaining %u frames, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v44 = gLogObj;
          id v45 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_77;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          int v37 = (os_log_s *)v44;
          uint64_t v38 = v45;
          int v39 = "%{public}s failed to deliver all temp frames, remaining %u frames, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v37, v38, v39, buf, 0x12u);
        goto LABEL_77;
      }
    }

    goto LABEL_415;
  }

  BOOL v88 = v86;
  char v89 = v88[1];

  if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
  }
  BOOL v90 = nw_protocol_definition_is_equal_unsafe( (uint64_t)v89,  nw_protocol_copy_http_cookie_definition_http_cookie_definition);

  if (!v90)
  {
    __nwlog_obj();
    BOOL v212 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
    LODWORD(v389) = 12;
    v388 = buf;
    uint64_t v203 = (char *)_os_log_send_and_compose_impl();

    id v427 = OS_LOG_TYPE_ERROR;
    uint64_t v426 = 0;
    if (v427 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v213 = v427;
      if (os_log_type_enabled(v204, v427))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
        _os_log_impl(&dword_181A5C000, v204, v213, "%{public}s protocol options are not http_cookie", buf, 0xCu);
      }
    }

    else if (v426)
    {
      uint64_t v223 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v224 = v427;
      int v225 = os_log_type_enabled(v204, v427);
      if (v223)
      {
        if (v225)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v223;
          _os_log_impl( &dword_181A5C000,  v204,  v224,  "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v223);
        if (!v203) {
          goto LABEL_94;
        }
        goto LABEL_416;
      }

      if (v225)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
        _os_log_impl( &dword_181A5C000,  v204,  v224,  "%{public}s protocol options are not http_cookie, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v239 = v427;
      if (os_log_type_enabled(v204, v427))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_should_not_save_cookies";
        _os_log_impl( &dword_181A5C000,  v204,  v239,  "%{public}s protocol options are not http_cookie, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_414;
  }

  *(void *)buf = MEMORY[0x1895F87A8];
  *(void *)&buf[8] = v2;
  *(void *)&buf[16] = __nw_http_cookie_options_set_should_not_save_cookies_block_invoke;
  *(void *)&uint64_t v434 = &__block_descriptor_33_e9_B16__0_v8l;
  BYTE8(v434) = 1;
  nw_protocol_options_access_handle(v88, buf);
LABEL_94:

LABEL_95:
  nw_protocol_stack_prepend_application_protocol(stack, (nw_protocol_options_t)v35);

  for (i = v404; ; i = 0LL)
  {
    int v405 = i;
    if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73298);
    }
    uint64_t v107 = nw_protocol_create_options((void *)nw_protocol_copy_http_retry_definition_http_retry_definition);
    nw_http_retry_options_set_limit(v107, 3);
    nw_protocol_stack_prepend_application_protocol(stack, (nw_protocol_options_t)v107);

    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
    }
    v411 = nw_protocol_create_options((void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition);
    v419[0] = MEMORY[0x1895F87A8];
    v419[1] = v2;
    v419[2] = __34__NWURLLoaderHTTP_continueLoading__block_invoke_8;
    v419[3] = &unk_189BC5CA8;
    v419[4] = a1;
    uint64_t v108 = (id)v6;
    BOOL v420 = v108;
    nw_http_authentication_options_set_challenge_handler(v411, v419, *(void **)(a1 + 56));
    -[NWURLSessionTaskConfiguration URLCredentialStorage](*(void *)(a1 + 40));
    uint64_t v401 = (void *)objc_claimAutoreleasedReturnValue();
    nw_http_authentication_options_set_credential_storage(v411, v401);
    if (*(void *)(a1 + 40))
    {
      uint64_t v109 = *(void *)(*(void *)(a1 + 40) + 24LL);
      if (v109)
      {
        uint64_t v110 = *(id *)(v109 + 400);
        uint64_t v111 = v110;
        if (v110)
        {
          uint64_t v112 = (void *)v110[8];
          if (!v112)
          {
            uint64_t v113 = nw_array_create();
            int v114 = (void *)v111[8];
            v111[8] = v113;

            uint64_t v112 = (void *)v111[8];
          }

          uint64_t v403 = v112;
        }

        else
        {
          uint64_t v403 = 0LL;
        }
      }

      else
      {
        uint64_t v111 = 0LL;
        uint64_t v403 = 0LL;
      }

      if (v403) {
        nw_http_authentication_options_set_credential_cache(v411, v403);
      }
      id v115 = *(void *)(a1 + 40);
      if (v115)
      {
        BOOL v116 = *(void *)(v115 + 24);
        if (v116)
        {
          __int16 v117 = *(void **)(v116 + 32);
          if (v117)
          {
            int v118 = v117;
            if (v118)
            {
LABEL_126:
              BOOL v398 = v118;
              nw_http_authentication_options_set_h1_fallback_cache(v411, v118);
              goto LABEL_129;
            }
          }

          else
          {
            os_log_type_t v119 = nw_array_create();
            uint64_t v121 = *(void **)(v116 + 32);
            os_log_type_t v120 = (id *)(v116 + 32);
            *os_log_type_t v120 = (id)v119;

            int v118 = *v120;
            if (v118) {
              goto LABEL_126;
            }
          }
        }
      }

      BOOL v398 = 0LL;
LABEL_129:
      BOOL v122 = *(void *)(a1 + 40);
      if (!v122) {
        goto LABEL_421;
      }
      goto LABEL_130;
    }

    BOOL v398 = 0LL;
    uint64_t v403 = 0LL;
    BOOL v122 = *(void *)(a1 + 40);
    if (!v122) {
      goto LABEL_421;
    }
LABEL_130:
    uint64_t v123 = *(void *)(v122 + 24);
    if (v123)
    {
      int v124 = *(void **)(v123 + 40);
      if (v124)
      {
        int v125 = v124;
        if (v125) {
          goto LABEL_135;
        }
      }

      else
      {
        BOOL v126 = objc_alloc_init(MEMORY[0x189603FC8]);
        uint32_t v128 = *(void **)(v123 + 40);
        uint64_t v127 = (id *)(v123 + 40);
        os_log_s *v127 = v126;

        int v125 = *v127;
        if (v125)
        {
LABEL_135:
          int v397 = v125;
          nw_http_authentication_options_set_appsso_h1_fallback_headers(v411, (uint64_t)v125);
          goto LABEL_422;
        }
      }
    }

LABEL_586:
            if (v251) {
              free(v251);
            }
            uint64_t v228 = v940;
            *(_DWORD *)(v940 + 336) = -1;
            uint64_t v248 = v939;
            BOOL v229 = &qword_18C45F000;
LABEL_589:
            uint64_t v363 = *(unsigned int *)(v228 + 360) + 1LL;
            uint64_t v364 = v363 << 31 >> 31;
            *(_DWORD *)(v228 + 360) = v363;
            if (v364 == v363 && (v364 & 0x8000000000000000LL) == 0) {
              goto LABEL_608;
            }
            uint64_t v365 = v228;
            __nwlog_obj();
            uint64_t v366 = *(unsigned int *)(v365 + 360);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->next_connection_log_num";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v961 = 1LL;
            *(_WORD *)v962 = 2048;
            *(void *)&v962[2] = v366;
            uint64_t v367 = (char *)_os_log_send_and_compose_impl();
            v963[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v367, v963, &aBlock))
            {
              if (v963[0] == 17)
              {
                uint64_t v368 = (os_log_s *)__nwlog_obj();
                os_log_type_t v369 = v963[0];
                if (os_log_type_enabled(v368, (os_log_type_t)v963[0]))
                {
                  uint64_t v370 = *(unsigned int *)(v940 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v370;
                  int v371 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_604:
                  _os_log_impl(&dword_181A5C000, v368, v369, v371, buf, 0x2Au);
                }
              }

              else if ((_BYTE)aBlock)
              {
                int v372 = v163;
                uint64_t v373 = (char *)__nw_create_backtrace_string();
                uint64_t v368 = (os_log_s *)__nwlog_obj();
                os_log_type_t v369 = v963[0];
                BOOL v374 = os_log_type_enabled(v368, (os_log_type_t)v963[0]);
                if (v373)
                {
                  if (v374)
                  {
                    uint64_t v375 = *(unsigned int *)(v940 + 360);
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v961 = 1LL;
                    *(_WORD *)v962 = 2048;
                    *(void *)&v962[2] = v375;
                    *(_WORD *)&v962[10] = 2082;
                    *(void *)&v962[12] = v373;
                    _os_log_impl( &dword_181A5C000,  v368,  v369,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                  }

                  free(v373);
                  v163 = v372;
                  goto LABEL_605;
                }

                v163 = v372;
                if (v374)
                {
                  uint64_t v377 = *(unsigned int *)(v940 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v377;
                  int v371 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_604;
                }
              }

              else
              {
                uint64_t v368 = (os_log_s *)__nwlog_obj();
                os_log_type_t v369 = v963[0];
                if (os_log_type_enabled(v368, (os_log_type_t)v963[0]))
                {
                  uint64_t v376 = *(unsigned int *)(v940 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v961 = 1LL;
                  *(_WORD *)v962 = 2048;
                  *(void *)&v962[2] = v376;
                  int v371 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_604;
                }
              }
            }

                        memmove((void *)(v272 + v284), (const void *)(v272 + 10), __len);
                        unsigned int v285 = 8 - v283;
LABEL_587:
                        if (v272)
                        {
                          uint64_t v320 = v272 + v284 + __len;
                          *(_WORD *)uint64_t v320 = 2573;
                          if (!v274) {
                            goto LABEL_596;
                          }
                          *(_BYTE *)(v320 + 6) = 10;
                          *(_DWORD *)(v320 + 2) = 218762544;
LABEL_590:
                          int v321 = v274 ^ 1;
                          if ((*v613 & 0x8000) == 0) {
                            int v321 = 1;
                          }
                          if ((v321 & 1) == 0)
                          {
                            if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                            {
                              if (*((_BYTE *)v276 + 1537))
                              {
                                BOOL v424 = (os_log_s *)__nwlog_obj();
                                if (os_log_type_enabled(v424, OS_LOG_TYPE_DEBUG))
                                {
                                  uint64_t v425 = *(void *)(v6 + 488);
                                  if (v425) {
                                    LODWORD(v425) = *(_DWORD *)(v425 + 424);
                                  }
                                  uint64_t v6 = v627;
                                  uint64_t v426 = *(_DWORD *)(*(void *)(v627 + 480) + 372LL);
                                  id v427 = *(_DWORD *)(v627 + 860);
                                  *(_DWORD *)buf = 136447746;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                                  int v638 = 2082;
                                  *(void *)BOOL v639 = v629;
                                  *(_WORD *)&v639[8] = 2080;
                                  *(void *)&v639[10] = " ";
                                  *(_WORD *)&v639[18] = 1024;
                                  *(_DWORD *)int v640 = v426;
                                  *(_WORD *)&v640[4] = 1024;
                                  *(_DWORD *)&v640[6] = v427;
                                  *(_WORD *)int v641 = 1024;
                                  *(_DWORD *)&v641[2] = v425;
                                  *(_WORD *)&v641[6] = 2048;
                                  *(void *)&v641[8] = v205;
                                  _os_log_impl( &dword_181A5C000,  v424,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> pending final chunk written to frame %p",  buf,  0x3Cu);
                                }
                              }
                            }

                            int v322 = *v613;
                            BOOL v323 = v322 & 0xFFFF7FFF | (*((unsigned __int8 *)v613 + 2) << 16);
                            char *v613 = v322 & 0x7FFF;
                            *((_BYTE *)v613 + 2) = BYTE2(v323);
                          }

      goto LABEL_406;
    }

    *(void *)out = 0LL;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000LL;
    *(void *)&out[24] = __Block_byref_object_copy__79337;
    *(void *)&out[32] = __Block_byref_object_dispose__79338;
    *(void *)&out[40] = 0LL;
    v354[0] = MEMORY[0x1895F87A8];
    v354[1] = 3221225472LL;
    uint64_t v355 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_167;
    uint64_t v356 = &unk_189BC77A8;
    int v358 = out;
    uint64_t v357 = v298;
    os_log_type_t v359 = v184;
    int v225 = v357;
    int v226 = v354;
    os_unfair_lock_lock(lock);
    v355((uint64_t)v226);
    os_unfair_lock_unlock(lock);

    BOOL v227 = *(void *)(*(void *)&out[8] + 40LL);
    if (v227)
    {
      v351[0] = MEMORY[0x1895F87A8];
      v351[1] = 3221225472LL;
      v351[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_168;
      v351[3] = &unk_189BC7780;
      uint64_t v352 = v225;
      int v353 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, void *))(v227 + 16))(v227, v353, v351);

LABEL_563:
      _Block_object_dispose(out, 8);

      int v224 = *v114;
      goto LABEL_564;
    }

    __nwlog_obj();
    int v259 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uint64_t v413 = 136446210;
    uint64_t v414 = "nw_agent_read_message_on_queue";
    BOOL v260 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v405 = 0;
    if (__nwlog_fault(v260, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v261 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v262 = type;
        if (os_log_type_enabled(v261, type))
        {
          *(_DWORD *)uint64_t v413 = 136446210;
          uint64_t v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v261, v262, "%{public}s No handler for CLIENT_ASSERT", v413, 0xCu);
        }
      }

      else if (v405)
      {
        uint64_t v275 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v261 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v276 = type;
        int v277 = os_log_type_enabled(v261, type);
        if (v275)
        {
          if (v277)
          {
            *(_DWORD *)uint64_t v413 = 136446466;
            uint64_t v414 = "nw_agent_read_message_on_queue";
            char v415 = 2082;
            os_log_type_t v416 = v275;
            _os_log_impl( &dword_181A5C000,  v261,  v276,  "%{public}s No handler for CLIENT_ASSERT, dumping backtrace:%{public}s",  v413,  0x16u);
          }

          free(v275);
          goto LABEL_561;
        }

        if (v277)
        {
          *(_DWORD *)uint64_t v413 = 136446210;
          uint64_t v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v261,  v276,  "%{public}s No handler for CLIENT_ASSERT, no backtrace",  v413,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v261 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v278 = type;
        if (os_log_type_enabled(v261, type))
        {
          *(_DWORD *)uint64_t v413 = 136446210;
          uint64_t v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v261,  v278,  "%{public}s No handler for CLIENT_ASSERT, backtrace limit exceeded",  v413,  0xCu);
        }
      }
    }

LABEL_605:
            if (v367) {
              free(v367);
            }
            LODWORD(v363) = -1;
            *(_DWORD *)(v940 + 360) = -1;
            uint64_t v248 = v939;
            BOOL v229 = &qword_18C45F000;
LABEL_608:
            *((_DWORD *)v166 + 215) = v363;
            if ((*((_BYTE *)v166 + 158) & 1) == 0)
            {
              if (*((_BYTE *)v229 + 1537))
              {
                v733 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v733, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v734 = *((void *)v166 + 61);
                  int v735 = *(_DWORD *)(*((void *)v166 + 60) + 372LL);
                  int v736 = *((_DWORD *)v166 + 215);
                  if (v734) {
                    LODWORD(v734) = *(_DWORD *)(v734 + 424);
                  }
                  int v737 = *(_DWORD *)(v940 + 336);
                  *(_DWORD *)buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v166 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v961 = (uint64_t)" ";
                  *(_WORD *)v962 = 1024;
                  *(_DWORD *)&v962[2] = v735;
                  *(_WORD *)&v962[6] = 1024;
                  *(_DWORD *)&v962[8] = v736;
                  *(_WORD *)&v962[12] = 1024;
                  *(_DWORD *)&v962[14] = v734;
                  *(_WORD *)&v962[18] = 2048;
                  *(void *)&v962[20] = v166;
                  *(_WORD *)&v962[28] = 1024;
                  *(_DWORD *)&v962[30] = v737;
                  _os_log_impl( &dword_181A5C000,  v733,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections",  buf,  0x42u);
                  uint64_t v248 = v939;
                }
              }
            }

            if (*(void *)(v248 + 248))
            {
              if (*((void *)v166 + 61))
              {
                __nwlog_obj();
                uint64_t v378 = *((void *)v166 + 61);
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v166;
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = v378;
                int v379 = (char *)_os_log_send_and_compose_impl();
                v963[0] = 16;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v379, v963, &aBlock))
                {
                  if (v963[0] == 17)
                  {
                    uint64_t v380 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v381 = v963[0];
                    if (os_log_type_enabled(v380, (os_log_type_t)v963[0]))
                    {
                      uint64_t v382 = *((void *)v166 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v166;
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v961 = v382;
                      uint64_t v383 = "%{public}s Connection %p already has a stream (%p)";
LABEL_635:
                      _os_log_impl(&dword_181A5C000, v380, v381, v383, buf, 0x20u);
                    }
                  }

                  else if ((_BYTE)aBlock)
                  {
                    int v396 = v163;
                    int v397 = (char *)__nw_create_backtrace_string();
                    uint64_t v380 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v381 = v963[0];
                    BOOL v398 = os_log_type_enabled(v380, (os_log_type_t)v963[0]);
                    if (v397)
                    {
                      if (v398)
                      {
                        uint64_t v399 = *((void *)v166 + 61);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v166;
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v961 = v399;
                        *(_WORD *)v962 = 2082;
                        *(void *)&v962[2] = v397;
                        _os_log_impl( &dword_181A5C000,  v380,  v381,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                      }

                      free(v397);
                      v163 = v396;
                      goto LABEL_636;
                    }

                    v163 = v396;
                    if (v398)
                    {
                      uint64_t v401 = *((void *)v166 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v166;
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v961 = v401;
                      uint64_t v383 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                      goto LABEL_635;
                    }
                  }

                  else
                  {
                    uint64_t v380 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v381 = v963[0];
                    if (os_log_type_enabled(v380, (os_log_type_t)v963[0]))
                    {
                      uint64_t v400 = *((void *)v166 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v166;
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v961 = v400;
                      uint64_t v383 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                      goto LABEL_635;
                    }
                  }
                }

    if (v327) {
      free(v327);
    }
    uint64_t v9 = v348;
  }

LABEL_636:
                if (v379) {
                  free(v379);
                }
                uint64_t v248 = v939;
                goto LABEL_639;
              }

              *(void *)(v248 + 256) = v166;
              *((void *)v166 + 61) = v248;
              nw_protocol_set_output_handler(v248, *((void *)v166 + 4));
              nw_protocol_set_input_handler((uint64_t)v166, *(void *)(v248 + 48));
              *(_OWORD *)uint64_t v248 = *v166;
              __int128 v384 = v938[5];
              __int128 v386 = v938[2];
              __int128 v385 = v938[3];
              v166[8] = v938[4];
              v166[9] = v384;
              v166[6] = v386;
              v166[7] = v385;
              __int128 v387 = v938[1];
              v166[4] = *v938;
              v166[5] = v387;
              nw_http_transaction_metadata_set_connection_metadata(*(void **)(v248 + 352), *((void **)v166 + 96));
              *((_WORD *)v166 + 436) &= 0xFFD7u;
              *((_DWORD *)v166 + 216) = 1;
              if ((*((_BYTE *)v166 + 158) & 1) == 0)
              {
                v388 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v388, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v389 = *((void *)v166 + 61);
                  int v390 = *(_DWORD *)(*((void *)v166 + 60) + 372LL);
                  int v391 = *((_DWORD *)v166 + 215);
                  if (v389) {
                    LODWORD(v389) = *(_DWORD *)(v389 + 424);
                  }
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v166 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v961 = (uint64_t)" ";
                  *(_WORD *)v962 = 1024;
                  *(_DWORD *)&v962[2] = v390;
                  *(_WORD *)&v962[6] = 1024;
                  *(_DWORD *)&v962[8] = v391;
                  *(_WORD *)&v962[12] = 1024;
                  *(_DWORD *)&v962[14] = v389;
                  _os_log_impl( &dword_181A5C000,  v388,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                }
              }

              if ((*(_BYTE *)(v248 + 158) & 1) == 0)
              {
                v392 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v392, OS_LOG_TYPE_INFO))
                {
                  uint64_t v393 = *(void *)(v248 + 256);
                  int v394 = *(_DWORD *)(*(void *)(v248 + 248) + 372LL);
                  if (v393) {
                    LODWORD(v393) = *(_DWORD *)(v393 + 860);
                  }
                  int v395 = *(_DWORD *)(v248 + 424);
                  *(_DWORD *)buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v248 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v961 = (uint64_t)" ";
                  *(_WORD *)v962 = 1024;
                  *(_DWORD *)&v962[2] = v394;
                  *(_WORD *)&v962[6] = 1024;
                  *(_DWORD *)&v962[8] = v393;
                  *(_WORD *)&v962[12] = 1024;
                  *(_DWORD *)&v962[14] = v395;
                  *(_WORD *)&v962[18] = 2048;
                  *(void *)&v962[20] = v248;
                  *(_WORD *)&v962[28] = 2048;
                  *(void *)&v962[30] = v166;
                  _os_log_impl( &dword_181A5C000,  v392,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                }
              }

LABEL_1364:
              if (v697) {
                free(v697);
              }
              nw_protocol_connect(v696, 0LL);
              uint64_t v248 = v939;
              if (!v411)
              {
LABEL_654:
                if (v407) {
                  os_release(v407);
                }
                nw_protocol_set_output_handler(v940, 0LL);
                *(_WORD *)(v248 + 428) &= ~8u;
                int v412 = *(_DWORD *)(v940 + 352);
                *(_DWORD *)(v940 + 352) = v412 - 1;
                if (v412) {
                  return;
                }
                __nwlog_obj();
                uint64_t v413 = *(unsigned int *)(v940 + 352);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_output_handler_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v961 = 1LL;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v413;
                uint64_t v414 = (char *)_os_log_send_and_compose_impl();
                v963[0] = 16;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v414, v963, &aBlock))
                {
                  if (v963[0] == 17)
                  {
                    char v415 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v416 = v963[0];
                    if (os_log_type_enabled(v415, (os_log_type_t)v963[0]))
                    {
                      uint64_t v417 = *(unsigned int *)(v940 + 352);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v961 = 1LL;
                      *(_WORD *)v962 = 2048;
                      *(void *)&v962[2] = v417;
                      uint64_t v418 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_675:
                      _os_log_impl(&dword_181A5C000, v415, v416, v418, buf, 0x2Au);
                    }
                  }

                  else if ((_BYTE)aBlock)
                  {
                    int v419 = (char *)__nw_create_backtrace_string();
                    char v415 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v416 = v963[0];
                    BOOL v420 = os_log_type_enabled(v415, (os_log_type_t)v963[0]);
                    if (v419)
                    {
                      if (v420)
                      {
                        uint64_t v421 = *(unsigned int *)(v940 + 352);
                        *(_DWORD *)buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v961 = 1LL;
                        *(_WORD *)v962 = 2048;
                        *(void *)&v962[2] = v421;
                        *(_WORD *)&v962[10] = 2082;
                        *(void *)&v962[12] = v419;
                        _os_log_impl( &dword_181A5C000,  v415,  v416,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                      }

                      free(v419);
                      goto LABEL_676;
                    }

                    if (v420)
                    {
                      uint64_t v426 = *(unsigned int *)(v940 + 352);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v961 = 1LL;
                      *(_WORD *)v962 = 2048;
                      *(void *)&v962[2] = v426;
                      uint64_t v418 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                      goto LABEL_675;
                    }
                  }

                  else
                  {
                    char v415 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v416 = v963[0];
                    if (os_log_type_enabled(v415, (os_log_type_t)v963[0]))
                    {
                      uint64_t v422 = *(unsigned int *)(v940 + 352);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v961 = 1LL;
                      *(_WORD *)v962 = 2048;
                      *(void *)&v962[2] = v422;
                      uint64_t v418 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_675;
                    }
                  }
                }

LABEL_676:
                if (v414) {
                  free(v414);
                }
                *(_DWORD *)(v940 + 352) = 0;
                return;
              }

LABEL_1428:
            if (v725) {
              free(v725);
            }
            uint64_t v248 = v939;
            v163 = v724;
            goto LABEL_639;
          }

          uint64_t v719 = v163;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
          int v720 = (char *)_os_log_send_and_compose_impl();
          v963[0] = 16;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v720, v963, &aBlock))
          {
            if (v963[0] == 17)
            {
              int v721 = (os_log_s *)__nwlog_obj();
              os_log_type_t v722 = v963[0];
              if (!os_log_type_enabled(v721, (os_log_type_t)v963[0])) {
                goto LABEL_1421;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v723 = "%{public}s called with null parameters";
LABEL_1420:
              _os_log_impl(&dword_181A5C000, v721, v722, v723, buf, 0xCu);
              goto LABEL_1421;
            }

            if (!(_BYTE)aBlock)
            {
              int v721 = (os_log_s *)__nwlog_obj();
              os_log_type_t v722 = v963[0];
              if (!os_log_type_enabled(v721, (os_log_type_t)v963[0])) {
                goto LABEL_1421;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v723 = "%{public}s called with null parameters, backtrace limit exceeded";
              goto LABEL_1420;
            }

            v798 = (char *)__nw_create_backtrace_string();
            int v721 = (os_log_s *)__nwlog_obj();
            os_log_type_t v722 = v963[0];
            BOOL v799 = os_log_type_enabled(v721, (os_log_type_t)v963[0]);
            if (!v798)
            {
              if (!v799) {
                goto LABEL_1421;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v723 = "%{public}s called with null parameters, no backtrace";
              goto LABEL_1420;
            }

            if (v799)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v798;
              _os_log_impl( &dword_181A5C000,  v721,  v722,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v798);
          }

                      BOOL result = 0LL;
                      *(_DWORD *)(a1 + 24) = 33;
                      goto LABEL_2272;
                    }
                  }
                }

LABEL_1421:
          if (v720) {
            free(v720);
          }
          uint64_t v228 = v940;
          BOOL v229 = &qword_18C45F000;
          v163 = v719;
          uint64_t v244 = *v226;
          if (*v226) {
            goto LABEL_412;
          }
          goto LABEL_414;
        }

        int v701 = *(_OWORD **)(v106 + 32);
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
        int v702 = (char *)_os_log_send_and_compose_impl();
        v955[0] = 16;
        LOBYTE(v943[0]) = 0;
        if (__nwlog_fault(v702, v955, v943))
        {
          if (v955[0] == 17)
          {
            v703 = (os_log_s *)__nwlog_obj();
            os_log_type_t v704 = v955[0];
            if (!os_log_type_enabled(v703, (os_log_type_t)v955[0])) {
              goto LABEL_1377;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v705 = "%{public}s called with null parameters";
            goto LABEL_1376;
          }

          if (!LOBYTE(v943[0]))
          {
            v703 = (os_log_s *)__nwlog_obj();
            os_log_type_t v704 = v955[0];
            if (!os_log_type_enabled(v703, (os_log_type_t)v955[0])) {
              goto LABEL_1377;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v705 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_1376;
          }

          v769 = (char *)__nw_create_backtrace_string();
          v703 = (os_log_s *)__nwlog_obj();
          os_log_type_t v704 = v955[0];
          BOOL v786 = os_log_type_enabled(v703, (os_log_type_t)v955[0]);
          if (!v769)
          {
            if (!v786) {
              goto LABEL_1377;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v705 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_1376;
          }

          if (v786)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v769;
            v771 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
            goto LABEL_1209;
          }

          goto LABEL_1210;
        }

LABEL_1377:
        if (!v702) {
          goto LABEL_1379;
        }
        goto LABEL_1378;
      }

      int v701 = *(_OWORD **)(v106 + 32);
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      int v702 = (char *)_os_log_send_and_compose_impl();
      v955[0] = 16;
      LOBYTE(v943[0]) = 0;
      if (v955[0] != 17)
      {
        if (!LOBYTE(v943[0]))
        {
          v703 = (os_log_s *)__nwlog_obj();
          os_log_type_t v704 = v955[0];
          if (!os_log_type_enabled(v703, (os_log_type_t)v955[0])) {
            goto LABEL_1377;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v705 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_1376;
        }

        v769 = (char *)__nw_create_backtrace_string();
        v703 = (os_log_s *)__nwlog_obj();
        os_log_type_t v704 = v955[0];
        BOOL v770 = os_log_type_enabled(v703, (os_log_type_t)v955[0]);
        if (!v769)
        {
          if (!v770) {
            goto LABEL_1377;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v705 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_1376;
        }

        if (v770)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v769;
          v771 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1209:
          _os_log_impl(&dword_181A5C000, v703, v704, v771, buf, 0x16u);
        }

LABEL_1210:
        free(v769);
        if (!v702)
        {
LABEL_1379:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          v871 = (char *)_os_log_send_and_compose_impl();
          v963[0] = 16;
          LOBYTE(aBlock) = 0;
          if (v963[0] == 17)
          {
            v872 = (os_log_s *)__nwlog_obj();
            os_log_type_t v873 = v963[0];
            if (!os_log_type_enabled(v872, (os_log_type_t)v963[0])) {
              goto LABEL_1393;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v874 = "%{public}s called with null http1_connection";
          }

          else if ((_BYTE)aBlock)
          {
            v875 = (char *)__nw_create_backtrace_string();
            v872 = (os_log_s *)__nwlog_obj();
            os_log_type_t v873 = v963[0];
            BOOL v876 = os_log_type_enabled(v872, (os_log_type_t)v963[0]);
            if (v875)
            {
              if (v876)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v875;
                _os_log_impl( &dword_181A5C000,  v872,  v873,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v875);
LABEL_1393:
              if (v871) {
                free(v871);
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v877 = (char *)_os_log_send_and_compose_impl();
              v963[0] = 16;
              LOBYTE(aBlock) = 0;
              if (v963[0] == 17)
              {
                v878 = (os_log_s *)__nwlog_obj();
                os_log_type_t v879 = v963[0];
                if (os_log_type_enabled(v878, (os_log_type_t)v963[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v880 = "%{public}s called with null http1_connection";
LABEL_1408:
                  _os_log_impl(&dword_181A5C000, v878, v879, v880, buf, 0xCu);
                }
              }

              else if ((_BYTE)aBlock)
              {
                v881 = (char *)__nw_create_backtrace_string();
                v878 = (os_log_s *)__nwlog_obj();
                os_log_type_t v879 = v963[0];
                BOOL v882 = os_log_type_enabled(v878, (os_log_type_t)v963[0]);
                if (v881)
                {
                  if (v882)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v881;
                    _os_log_impl( &dword_181A5C000,  v878,  v879,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v881);
                  goto LABEL_1409;
                }

                if (v882)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v880 = "%{public}s called with null http1_connection, no backtrace";
                  goto LABEL_1408;
                }
              }

              else
              {
                v878 = (os_log_s *)__nwlog_obj();
                os_log_type_t v879 = v963[0];
                if (os_log_type_enabled(v878, (os_log_type_t)v963[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v880 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_1408;
                }
              }

LABEL_1409:
              if (v877) {
                free(v877);
              }
              uint64_t v166 = 0LL;
              uint64_t v248 = v939;
              v163 = v701;
              goto LABEL_639;
            }

            if (!v876) {
              goto LABEL_1393;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v874 = "%{public}s called with null http1_connection, no backtrace";
          }

          else
          {
            v872 = (os_log_s *)__nwlog_obj();
            os_log_type_t v873 = v963[0];
            if (!os_log_type_enabled(v872, (os_log_type_t)v963[0])) {
              goto LABEL_1393;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v874 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          }

          _os_log_impl(&dword_181A5C000, v872, v873, v874, buf, 0xCu);
          goto LABEL_1393;
        }

LABEL_1376:
    _os_log_impl(&dword_181A5C000, v703, v704, v705, buf, 0xCu);
    goto LABEL_1377;
  }

  if ((*(_BYTE *)(v25 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v129 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v132 = *(_DWORD *)(v940 + 372);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v940 + 74;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v961 = (uint64_t)" ";
      *(_WORD *)v962 = 1024;
      *(_DWORD *)&v962[2] = v132;
      int v131 = "%{public}s %{public}s%s<i%u> no pending streams, nothing to do";
      goto LABEL_256;
    }
  }

void nw_protocol_http1_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v269 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v157 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (v268[0] == 17)
    {
      BOOL v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0])) {
        goto LABEL_409;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      os_log_type_t v160 = "%{public}s called with null protocol";
    }

    else if (v260[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v268[0];
      BOOL v165 = os_log_type_enabled(v158, (os_log_type_t)v268[0]);
      if (backtrace_string)
      {
        if (v165)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v158,  v159,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_409:
        if (!v157) {
          goto LABEL_411;
        }
LABEL_410:
        free(v157);
        goto LABEL_411;
      }

      if (!v165) {
        goto LABEL_409;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      os_log_type_t v160 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0])) {
        goto LABEL_409;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      os_log_type_t v160 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_408;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v157 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (v268[0] != 17)
    {
      if (v260[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v158 = (os_log_s *)__nwlog_obj();
        os_log_type_t v159 = v268[0];
        if (!os_log_type_enabled(v158, (os_log_type_t)v268[0])) {
          goto LABEL_409;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v160 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_408;
      }

      uint64_t v166 = (char *)__nw_create_backtrace_string();
      BOOL v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v268[0];
      BOOL v167 = os_log_type_enabled(v158, (os_log_type_t)v268[0]);
      if (!v166)
      {
        if (!v167) {
          goto LABEL_409;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v160 = "%{public}s called with null handle, no backtrace";
        goto LABEL_408;
      }

      if (!v167) {
        goto LABEL_291;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v166;
      os_log_type_t v168 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_290;
    }

    BOOL v158 = (os_log_s *)__nwlog_obj();
    os_log_type_t v159 = v268[0];
    if (!os_log_type_enabled(v158, (os_log_type_t)v268[0])) {
      goto LABEL_409;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    os_log_type_t v160 = "%{public}s called with null handle";
LABEL_408:
    _os_log_impl(&dword_181A5C000, v158, v159, v160, buf, 0xCu);
    goto LABEL_409;
  }

  int v3 = *((_DWORD *)handle + 6);
  nw_proxy_config_t v4 = a1->handle;
  if (v3 == 1) {
    goto LABEL_10;
  }
  if (v3 != 2)
  {
    if (v3 != 3)
    {
LABEL_411:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnected";
      uint64_t v52 = (char *)_os_log_send_and_compose_impl();
      v268[0] = 16;
      v260[0] = OS_LOG_TYPE_DEFAULT;
      if (v268[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v53 = (os_log_s *)gLogObj;
        os_log_type_t v54 = v268[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v268[0])) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnected";
        BOOL v55 = "%{public}s called with null http1";
        goto LABEL_424;
      }

      if (v260[0] == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v53 = (os_log_s *)gLogObj;
        os_log_type_t v54 = v268[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v268[0])) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnected";
        BOOL v55 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_424;
      }

      unsigned int v216 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v53 = (os_log_s *)gLogObj;
      os_log_type_t v54 = v268[0];
      BOOL v217 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v268[0]);
      if (!v216)
      {
        if (!v217) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnected";
        BOOL v55 = "%{public}s called with null http1, no backtrace";
        goto LABEL_424;
      }

      if (v217)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnected";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v216;
        _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v216);
      goto LABEL_425;
    }

    uint64_t v5 = *((void *)handle + 2);
    if (v5)
    {
      nw_proxy_config_t v4 = (void *)(v5 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v157 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (v268[0] == 17)
    {
      BOOL v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0])) {
        goto LABEL_409;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      os_log_type_t v160 = "%{public}s called with null handle->http1_connection";
      goto LABEL_408;
    }

    if (v260[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v158 = (os_log_s *)__nwlog_obj();
      os_log_type_t v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0])) {
        goto LABEL_409;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      os_log_type_t v160 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_408;
    }

    uint64_t v166 = (char *)__nw_create_backtrace_string();
    BOOL v158 = (os_log_s *)__nwlog_obj();
    os_log_type_t v159 = v268[0];
    BOOL v183 = os_log_type_enabled(v158, (os_log_type_t)v268[0]);
    if (!v166)
    {
      if (!v183) {
        goto LABEL_409;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      os_log_type_t v160 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_408;
    }

    if (v183)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v166;
      os_log_type_t v168 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_290;
    }

LABEL_425:
        if (!v52) {
          return;
        }
        goto LABEL_426;
      }

      int v61 = (char *)__nw_create_backtrace_string();
      __int16 v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = v268[0];
      BOOL v258 = os_log_type_enabled(v53, (os_log_type_t)v268[0]);
      if (!v61)
      {
        if (v258)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnected";
          BOOL v55 = "%{public}s called with null http1_stream, no backtrace";
          goto LABEL_424;
        }

        goto LABEL_425;
      }

      if (v258)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnected";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v61;
        int v63 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
        goto LABEL_102;
      }

    if (!v112) {
      goto LABEL_427;
    }
    goto LABEL_426;
  }

  uint64_t v7 = *((void *)handle + 1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    int v112 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (v398[0] == 17)
    {
      int v113 = (os_log_s *)__nwlog_obj();
      int v114 = v398[0];
      if (!os_log_type_enabled(v113, (os_log_type_t)v398[0])) {
        goto LABEL_425;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      BOOL v115 = "%{public}s called with null handle->http1_stream";
      goto LABEL_424;
    }

    if (v394[0] == OS_LOG_TYPE_DEFAULT)
    {
      int v113 = (os_log_s *)__nwlog_obj();
      int v114 = v398[0];
      if (!os_log_type_enabled(v113, (os_log_type_t)v398[0])) {
        goto LABEL_425;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      BOOL v115 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_424;
    }

    unsigned int v122 = (char *)__nw_create_backtrace_string();
    int v113 = (os_log_s *)__nwlog_obj();
    int v114 = v398[0];
    unsigned int v186 = os_log_type_enabled(v113, (os_log_type_t)v398[0]);
    if (!v122)
    {
      if (!v186) {
        goto LABEL_425;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      BOOL v115 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_424;
    }

    if (v186)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v122;
      int v124 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_228;
    }

    goto LABEL_229;
  }

  uint64_t v5 = (uint64_t *)(v7 + 248);
LABEL_10:
  uint64_t v8 = *v5;
  if (!*v5) {
    goto LABEL_427;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_available";
    uint64_t v116 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (v398[0] != 17)
    {
      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        unsigned int v117 = (os_log_s *)__nwlog_obj();
        uint64_t v118 = v398[0];
        if (!os_log_type_enabled(v117, (os_log_type_t)v398[0])) {
          goto LABEL_487;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_available";
        int v119 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_486;
      }

      int v156 = (char *)__nw_create_backtrace_string();
      unsigned int v117 = (os_log_s *)__nwlog_obj();
      uint64_t v118 = v398[0];
      BOOL v169 = os_log_type_enabled(v117, (os_log_type_t)v398[0]);
      if (!v156)
      {
        if (!v169) {
          goto LABEL_487;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_available";
        int v119 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_486;
      }

      if (v169)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_available";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v156;
        BOOL v158 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_479;
      }

      if (v270) {
        free(v270);
      }
      uint64_t v9 = v348;
      goto LABEL_428;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v364 = "nw_http1_connection_send_final_chunk";
    v327 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v327, &__len[1], type))
    {
      if (LOBYTE(__len[1]) == 17)
      {
        BOOL v328 = (os_log_s *)__nwlog_obj();
        uint64_t v329 = __len[1];
        if (os_log_type_enabled(v328, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v364 = "nw_http1_connection_send_final_chunk";
          uint64_t v330 = "%{public}s called with null output_handler";
LABEL_604:
          _os_log_impl(&dword_181A5C000, v328, v329, v330, buf, 0xCu);
        }
      }

      else if (type[0])
      {
        uint64_t v338 = (char *)__nw_create_backtrace_string();
        BOOL v328 = (os_log_s *)__nwlog_obj();
        uint64_t v329 = __len[1];
        char v339 = os_log_type_enabled(v328, __len[1]);
        if (v338)
        {
          if (v339)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v364 = "nw_http1_connection_send_final_chunk";
            uint64_t v365 = 2082;
            *(void *)uint64_t v366 = v338;
            _os_log_impl( &dword_181A5C000,  v328,  v329,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v338);
          goto LABEL_605;
        }

        if (v339)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v364 = "nw_http1_connection_send_final_chunk";
          uint64_t v330 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_604;
        }
      }

      else
      {
        BOOL v328 = (os_log_s *)__nwlog_obj();
        uint64_t v329 = __len[1];
        if (os_log_type_enabled(v328, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v364 = "nw_http1_connection_send_final_chunk";
          uint64_t v330 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_604;
        }
      }
    }
    }

LABEL_527:
      if (v238) {
        free(v238);
      }
      unsigned int v117 = 14;
      uint64_t v13 = (unsigned __int16 *)(v12 + 872);
      if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
        goto LABEL_134;
      }
LABEL_209:
      int v124 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
      {
        uint64_t v125 = *(void *)(v12 + 488);
        if (v125) {
          LODWORD(v125) = *(_DWORD *)(v125 + 424);
        }
        if (v117 >= 0x24) {
          abort();
        }
        int v126 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
        int v127 = *(_DWORD *)(v12 + 860);
        uint32_t v128 = off_189BC0D50[v117];
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http1_parser_signal_eof_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v126;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v127;
        LOWORD(v265) = 1024;
        *(_DWORD *)((char *)&v265 + 2) = v125;
        WORD3(v265) = 2080;
        *((void *)&v265 + 1) = v128;
        _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> parser eof did not terminate full message with errno: %s, deferring input error",  buf,  0x3Cu);
      }

      goto LABEL_134;
    }

    if ((v89 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          int v149 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v150 = *(void *)(v12 + 488);
            int v151 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            int v152 = *(_DWORD *)(v12 + 860);
            if (v150) {
              LODWORD(v150) = *(_DWORD *)(v150 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v151;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v152;
            LOWORD(v265) = 1024;
            *(_DWORD *)((char *)&v265 + 2) = v150;
            _os_log_impl( &dword_181A5C000,  v149,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already closed",  buf,  0x32u);
            uint64_t v13 = (unsigned __int16 *)(v12 + 872);
          }
        }
      }

      goto LABEL_134;
    }

    *(_BYTE *)(v12 + 874) = BYTE2(v89);
    *int v259 = v89 | 0x4100;
    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        id v234 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v235 = *(void *)(v12 + 488);
          int v236 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
          int v237 = *(_DWORD *)(v12 + 860);
          if (v235) {
            LODWORD(v235) = *(_DWORD *)(v235 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v236;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v237;
          LOWORD(v265) = 1024;
          *(_DWORD *)((char *)&v265 + 2) = v235;
          _os_log_impl( &dword_181A5C000,  v234,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
          uint64_t v13 = (unsigned __int16 *)(v12 + 872);
        }
      }
    }

    uint64_t v129 = *(void *)(v12 + 480);
    if (!v129)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
      os_log_type_t v230 = (char *)_os_log_send_and_compose_impl();
      v268[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (v268[0] == 17)
      {
        id v231 = (os_log_s *)__nwlog_obj();
        os_log_type_t v232 = v268[0];
        if (!os_log_type_enabled(v231, (os_log_type_t)v268[0])) {
          goto LABEL_537;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        BOOL v233 = "%{public}s called with null http1";
      }

      else if (type)
      {
        id v242 = (char *)__nw_create_backtrace_string();
        id v231 = (os_log_s *)__nwlog_obj();
        os_log_type_t v232 = v268[0];
        BOOL v243 = os_log_type_enabled(v231, (os_log_type_t)v268[0]);
        if (v242)
        {
          if (v243)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v242;
            _os_log_impl( &dword_181A5C000,  v231,  v232,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v242);
          goto LABEL_537;
        }

        if (!v243) {
          goto LABEL_537;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        BOOL v233 = "%{public}s called with null http1, no backtrace";
      }

      else
      {
        id v231 = (os_log_s *)__nwlog_obj();
        os_log_type_t v232 = v268[0];
        if (!os_log_type_enabled(v231, (os_log_type_t)v268[0])) {
          goto LABEL_537;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        BOOL v233 = "%{public}s called with null http1, backtrace limit exceeded";
      }

      v255 = buf;
LABEL_536:
      _os_log_impl(&dword_181A5C000, v231, v232, v233, v255, 0xCu);
      goto LABEL_537;
    }

    int v130 = *v13;
    int v131 = v130 | (*((unsigned __int8 *)v13 + 2) << 16);
    if ((v130 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v12 + 158) & 1) != 0
        || !gLogDatapath
        || (int v153 = (os_log_s *)__nwlog_obj(), !os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG)))
      {
LABEL_324:
        if (*(void *)(v12 + 488)) {
          goto LABEL_134;
        }
LABEL_325:
        uint64_t v175 = *(void *)(v12 + 784);
        if (v175)
        {
          nw_queue_set_timer_values(v175, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }

        else
        {
          if ((*(_BYTE *)(v12 + 158) & 1) == 0)
          {
            uint64_t v176 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
            {
              uint64_t v177 = *(void *)(v12 + 488);
              int v178 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
              int v179 = *(_DWORD *)(v12 + 860);
              if (v177) {
                LODWORD(v177) = *(_DWORD *)(v177 + 424);
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v12 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&_BYTE buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v178;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v179;
              LOWORD(v265) = 1024;
              *(_DWORD *)((char *)&v265 + 2) = v177;
              _os_log_impl( &dword_181A5C000,  v176,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
            }
          }

          uint64_t v180 = *(void *)(v12 + 608);
          int v181 = *(void **)(v12 + 496);
          *(void *)buf = v85;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
          *(void *)&_BYTE buf[24] = &unk_189BBD518;
          *(void *)&buf[32] = v180;
          nw_queue_context_async(v181, buf);
        }

        goto LABEL_134;
      }

      uint64_t v154 = *(void *)(v12 + 488);
      int v155 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
      int v156 = *(_DWORD *)(v12 + 860);
      if (v154) {
        LODWORD(v154) = *(_DWORD *)(v154 + 424);
      }
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v155;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v156;
      LOWORD(v265) = 1024;
      *(_DWORD *)((char *)&v265 + 2) = v154;
      _os_log_impl( &dword_181A5C000,  v153,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
      goto LABEL_539;
    }

    *((_BYTE *)v13 + 2) = BYTE2(v131);
    unsigned __int16 *v13 = v131 | 0x800;
    uint64_t v132 = *(unsigned int *)(v129 + 368) + 1LL;
    uint64_t v133 = v132 << 31 >> 31;
    *(_DWORD *)(v129 + 36_Block_object_dispose(&STACK[0x338], 8) = v132;
    if (v133 == v132 && (v133 & 0x8000000000000000LL) == 0)
    {
LABEL_319:
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v244 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v245 = *(void *)(v12 + 488);
            int v246 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            int v247 = *(_DWORD *)(v12 + 860);
            if (v245) {
              LODWORD(v245) = *(_DWORD *)(v245 + 424);
            }
            int v248 = *(_DWORD *)(v129 + 368) + *(_DWORD *)(v129 + 364);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v246;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v247;
            LOWORD(v265) = 1024;
            *(_DWORD *)((char *)&v265 + 2) = v245;
            WORD3(v265) = 1024;
            DWORD2(v265) = v248;
            _os_log_impl( &dword_181A5C000,  v244,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
            uint64_t v13 = (unsigned __int16 *)(v12 + 872);
          }
        }
      }

      char v172 = *(void **)(v12 + 496);
      if (!v172)
      {
        __nwlog_obj();
        *(_DWORD *)uint64_t v268 = 136446210;
        *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        os_log_type_t v230 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v262 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v231 = (os_log_s *)__nwlog_obj();
          os_log_type_t v232 = type;
          if (!os_log_type_enabled(v231, type)) {
            goto LABEL_537;
          }
          *(_DWORD *)uint64_t v268 = 136446210;
          *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v233 = "%{public}s called with null http1_connection->context";
LABEL_535:
          v255 = v268;
          goto LABEL_536;
        }

        if (!v262)
        {
          id v231 = (os_log_s *)__nwlog_obj();
          os_log_type_t v232 = type;
          if (!os_log_type_enabled(v231, type)) {
            goto LABEL_537;
          }
          *(_DWORD *)uint64_t v268 = 136446210;
          *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v233 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_535;
        }

        os_log_type_t v251 = (char *)__nw_create_backtrace_string();
        id v231 = (os_log_s *)__nwlog_obj();
        os_log_type_t v232 = type;
        BOOL v252 = os_log_type_enabled(v231, type);
        if (!v251)
        {
          if (!v252) {
            goto LABEL_537;
          }
          *(_DWORD *)uint64_t v268 = 136446210;
          *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v233 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_535;
        }

        if (!v252) {
          goto LABEL_511;
        }
        *(_DWORD *)uint64_t v268 = 136446466;
        *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v268[12] = 2082;
        *(void *)&v268[14] = v251;
        os_log_type_t v253 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
        goto LABEL_510;
      }

      uint64_t v173 = *(void *)(v12 + 480);
      if (v173)
      {
        uint64_t v174 = *(void *)(v173 + 200);
        *(void *)buf = v85;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        *(void *)&_BYTE buf[24] = &unk_189BBD540;
        *(void *)&buf[32] = v174;
        nw_queue_context_async(v172, buf);
        goto LABEL_324;
      }

      __nwlog_obj();
      *(_DWORD *)uint64_t v268 = 136446210;
      *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      os_log_type_t v230 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v262 = 0;
      if (__nwlog_fault(v230, &type, &v262))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v231 = (os_log_s *)__nwlog_obj();
          os_log_type_t v232 = type;
          if (!os_log_type_enabled(v231, type)) {
            goto LABEL_537;
          }
          *(_DWORD *)uint64_t v268 = 136446210;
          *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v233 = "%{public}s called with null http1";
          goto LABEL_535;
        }

        if (!v262)
        {
          id v231 = (os_log_s *)__nwlog_obj();
          os_log_type_t v232 = type;
          if (!os_log_type_enabled(v231, type)) {
            goto LABEL_537;
          }
          *(_DWORD *)uint64_t v268 = 136446210;
          *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v233 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_535;
        }

        os_log_type_t v251 = (char *)__nw_create_backtrace_string();
        id v231 = (os_log_s *)__nwlog_obj();
        os_log_type_t v232 = type;
        BOOL v254 = os_log_type_enabled(v231, type);
        if (!v251)
        {
          if (!v254) {
            goto LABEL_537;
          }
          *(_DWORD *)uint64_t v268 = 136446210;
          *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          BOOL v233 = "%{public}s called with null http1, no backtrace";
          goto LABEL_535;
        }

        if (!v254) {
          goto LABEL_511;
        }
        *(_DWORD *)uint64_t v268 = 136446466;
        *(void *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v268[12] = 2082;
        *(void *)&v268[14] = v251;
        os_log_type_t v253 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_510:
        _os_log_impl(&dword_181A5C000, v231, v232, v253, v268, 0x16u);
LABEL_511:
        free(v251);
        if (v230) {
LABEL_538:
        }
          free(v230);
LABEL_539:
        uint64_t v13 = (unsigned __int16 *)(v12 + 872);
        if (*(void *)(v12 + 488)) {
          goto LABEL_134;
        }
        goto LABEL_325;
      }

                        os_release(v370);
                        goto LABEL_528;
                      }

    if (v274) {
      free(v274);
    }
    uint64_t v57 = a2[3];
    if (!v57) {
      goto LABEL_530;
    }
    goto LABEL_76;
  }

  v56(a2, a1, 22LL);
  uint64_t v57 = a2[3];
  if (!v57) {
    goto LABEL_530;
  }
LABEL_76:
  int v58 = *(void (**)(void *, uint64_t))(v57 + 48);
  if (v58)
  {
    v58(a2, a1);
    goto LABEL_149;
  }

LABEL_537:
      if (!v230) {
        goto LABEL_539;
      }
      goto LABEL_538;
    }

    __nwlog_obj();
    uint64_t v134 = *(unsigned int *)(v129 + 368);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->nonresuable_connections";
    *(_WORD *)&buf[22] = 2048;
    *(void *)&_BYTE buf[24] = 1LL;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v134;
    int v135 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v135, v268, &type))
    {
      if (v268[0] == 17)
      {
        uint64_t v136 = (os_log_s *)__nwlog_obj();
        os_log_type_t v137 = v268[0];
        if (os_log_type_enabled(v136, (os_log_type_t)v268[0]))
        {
          uint64_t v138 = *(unsigned int *)(v129 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v138;
          os_log_type_t v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_315:
          _os_log_impl(&dword_181A5C000, v136, v137, v139, buf, 0x2Au);
        }
      }

      else if (type)
      {
        uint64_t v161 = (char *)__nw_create_backtrace_string();
        uint64_t v136 = (os_log_s *)__nwlog_obj();
        os_log_type_t v137 = v268[0];
        BOOL v162 = os_log_type_enabled(v136, (os_log_type_t)v268[0]);
        if (v161)
        {
          if (v162)
          {
            uint64_t v163 = *(unsigned int *)(v129 + 368);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 1LL;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v163;
            *(_WORD *)&buf[42] = 2082;
            *(void *)&__int128 v265 = v161;
            _os_log_impl( &dword_181A5C000,  v136,  v137,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v161);
          goto LABEL_316;
        }

        if (v162)
        {
          uint64_t v171 = *(unsigned int *)(v129 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v171;
          os_log_type_t v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_315;
        }
      }

      else
      {
        uint64_t v136 = (os_log_s *)__nwlog_obj();
        os_log_type_t v137 = v268[0];
        if (os_log_type_enabled(v136, (os_log_type_t)v268[0]))
        {
          uint64_t v170 = *(unsigned int *)(v129 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v170;
          os_log_type_t v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_315;
        }
      }
    }

                    uint64_t v274 = 0;
                    uint64_t v275 = __len;
                    if ((_DWORD)__len) {
                      goto LABEL_516;
                    }
                    goto LABEL_538;
                  }
                }
              }

              else
              {
                int v211 = 0LL;
                if ((*(_BYTE *)(v6 + 158) & 1) != 0) {
                  goto LABEL_424;
                }
              }

              break;
            }

            if (*((_BYTE *)v8 + 1537))
            {
              __int128 v354 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v354, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v355 = *(void *)(v6 + 488);
                if (v355) {
                  LODWORD(v355) = *(_DWORD *)(v355 + 424);
                }
                uint64_t v356 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
                uint64_t v357 = *(_DWORD *)(v6 + 860);
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                int v638 = 2082;
                *(void *)BOOL v639 = v629;
                *(_WORD *)&v639[8] = 2080;
                *(void *)&v639[10] = " ";
                *(_WORD *)&v639[18] = 1024;
                *(_DWORD *)int v640 = v356;
                *(_WORD *)&v640[4] = 1024;
                *(_DWORD *)&v640[6] = v357;
                *(_WORD *)int v641 = 1024;
                *(_DWORD *)&v641[2] = v355;
                *(_WORD *)&v641[6] = 2048;
                *(void *)&v641[8] = v205;
                *(_WORD *)&v641[16] = 1024;
                LODWORD(v642) = __len;
                _os_log_impl( &dword_181A5C000,  v354,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> draining frame %p with length %u",  buf,  0x42u);
              }
            }

            goto LABEL_424;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
          uint64_t v138 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v643) = 16;
          LOBYTE(v647) = 0;
          if (__nwlog_fault(v138, &v643, &v647))
          {
            if (v643 == 17)
            {
              os_log_type_t v139 = (os_log_s *)__nwlog_obj();
              uint64_t v140 = v643;
              if (os_log_type_enabled(v139, (os_log_type_t)v643))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                uint64_t v141 = "%{public}s Stream asked to send outbound headers without current connection";
LABEL_288:
                uint64_t v150 = v139;
                int v151 = v140;
LABEL_289:
                _os_log_impl(&dword_181A5C000, v150, v151, v141, buf, 0xCu);
              }
            }

            else if ((_BYTE)v647)
            {
              uint64_t v146 = (char *)__nw_create_backtrace_string();
              int v147 = (os_log_s *)__nwlog_obj();
              int v148 = v643;
              int v149 = os_log_type_enabled(v147, (os_log_type_t)v643);
              if (v146)
              {
                if (v149)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                  int v638 = 2082;
                  *(void *)BOOL v639 = v146;
                  _os_log_impl( &dword_181A5C000,  v147,  v148,  "%{public}s Stream asked to send outbound headers without current connection, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v146);
                goto LABEL_290;
              }

              if (v149)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                uint64_t v141 = "%{public}s Stream asked to send outbound headers without current connection, no backtrace";
                uint64_t v150 = v147;
                int v151 = v148;
                goto LABEL_289;
              }
            }

            else
            {
              os_log_type_t v139 = (os_log_s *)__nwlog_obj();
              uint64_t v140 = v643;
              if (os_log_type_enabled(v139, (os_log_type_t)v643))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                uint64_t v141 = "%{public}s Stream asked to send outbound headers without current connection, backtrace limit exceeded";
                goto LABEL_288;
              }
            }
          }

LABEL_447:
    int v218 = v268;
    goto LABEL_448;
  }

  if ((*(_BYTE *)(v12 + 158) & 1) == 0
    && gLogDatapath
    && (BOOL v98 = (os_log_s *)__nwlog_obj(), os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG)))
  {
    uint64_t v99 = *(void *)(v12 + 488);
    int v100 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
    int v101 = *(_DWORD *)(v12 + 860);
    if (v99) {
      LODWORD(v99) = *(_DWORD *)(v99 + 424);
    }
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v100;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v101;
    LOWORD(v265) = 1024;
    *(_DWORD *)((char *)&v265 + 2) = v99;
    _os_log_impl( &dword_181A5C000,  v98,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
    if (!*(void *)(v12 + 488)) {
      goto LABEL_452;
    }
  }

  else
  {
LABEL_236:
    if (!*(void *)(v12 + 488)) {
      goto LABEL_452;
    }
  }

      if (v208) {
        free(v208);
      }
      int v114 = 14;
      if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
        goto LABEL_131;
      }
LABEL_197:
      int v120 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        uint64_t v121 = *(void *)(v12 + 488);
        if (v121) {
          LODWORD(v121) = *(_DWORD *)(v121 + 424);
        }
        if (v114 >= 0x24) {
          abort();
        }
        unsigned int v122 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
        uint64_t v123 = *(_DWORD *)(v12 + 860);
        int v124 = off_189BC0D50[v114];
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http1_parser_signal_eof_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v122;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v123;
        *(_WORD *)int v236 = 1024;
        *(_DWORD *)&v236[2] = v121;
        *(_WORD *)&v236[6] = 2080;
        *(void *)&v236[8] = v124;
        _os_log_impl( &dword_181A5C000,  v120,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> parser eof did not terminate full message with errno: %s, deferring input error",  buf,  0x3Cu);
      }

      goto LABEL_131;
    }

    if ((v86 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v136 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v137 = *(void *)(v12 + 488);
            uint64_t v138 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            os_log_type_t v139 = *(_DWORD *)(v12 + 860);
            if (v137) {
              LODWORD(v137) = *(_DWORD *)(v137 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v138;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v139;
            *(_WORD *)int v236 = 1024;
            *(_DWORD *)&v236[2] = v137;
            _os_log_impl( &dword_181A5C000,  v136,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already closed",  buf,  0x32u);
          }
        }
      }

      goto LABEL_131;
    }

    *(_BYTE *)(v12 + 874) = BYTE2(v86);
    *os_log_type_t v230 = v86 | 0x4100;
    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v204 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
        {
          int v205 = *(void *)(v12 + 488);
          int v206 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
          int v207 = *(_DWORD *)(v12 + 860);
          if (v205) {
            LODWORD(v205) = *(_DWORD *)(v205 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v206;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v207;
          *(_WORD *)int v236 = 1024;
          *(_DWORD *)&v236[2] = v205;
          _os_log_impl( &dword_181A5C000,  v204,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
        }
      }
    }

    uint64_t v125 = *(void *)(v12 + 480);
    if (!v125)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
      BOOL v200 = (char *)_os_log_send_and_compose_impl();
      v237[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (v237[0] == 17)
      {
        __int128 v201 = (os_log_s *)__nwlog_obj();
        int v202 = v237[0];
        if (!os_log_type_enabled(v201, (os_log_type_t)v237[0])) {
          goto LABEL_457;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        uint64_t v203 = "%{public}s called with null http1";
      }

      else if (type)
      {
        int v212 = (char *)__nw_create_backtrace_string();
        __int128 v201 = (os_log_s *)__nwlog_obj();
        int v202 = v237[0];
        int v213 = os_log_type_enabled(v201, (os_log_type_t)v237[0]);
        if (v212)
        {
          if (v213)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v212;
            _os_log_impl( &dword_181A5C000,  v201,  v202,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v212);
          goto LABEL_457;
        }

        if (!v213) {
          goto LABEL_457;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        uint64_t v203 = "%{public}s called with null http1, no backtrace";
      }

      else
      {
        __int128 v201 = (os_log_s *)__nwlog_obj();
        int v202 = v237[0];
        if (!os_log_type_enabled(v201, (os_log_type_t)v237[0])) {
          goto LABEL_457;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        uint64_t v203 = "%{public}s called with null http1, backtrace limit exceeded";
      }

      int v225 = buf;
LABEL_456:
      _os_log_impl(&dword_181A5C000, v201, v202, v203, v225, 0xCu);
      goto LABEL_457;
    }

    int v126 = (unsigned __int16)*v230;
    int v127 = v126 | (*(unsigned __int8 *)(v12 + 874) << 16);
    if ((v126 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v140 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v141 = *(void *)(v12 + 488);
            uint64_t v142 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            uint64_t v143 = *(_DWORD *)(v12 + 860);
            if (v141) {
              LODWORD(v141) = *(_DWORD *)(v141 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v142;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v143;
            *(_WORD *)int v236 = 1024;
            *(_DWORD *)&v236[2] = v141;
            _os_log_impl( &dword_181A5C000,  v140,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
          }
        }
      }

      goto LABEL_309;
    }

    *(_BYTE *)(v12 + 874) = BYTE2(v127);
    *os_log_type_t v230 = v127 | 0x800;
    uint32_t v128 = *(unsigned int *)(v125 + 368) + 1LL;
    uint64_t v129 = v128 << 31 >> 31;
    *(_DWORD *)(v125 + 36_Block_object_dispose(&STACK[0x338], 8) = v128;
    if (v129 == v128 && (v129 & 0x8000000000000000LL) == 0)
    {
LABEL_304:
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          BOOL v214 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v214, OS_LOG_TYPE_DEBUG))
          {
            BOOL v215 = *(void *)(v12 + 488);
            unsigned int v216 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
            BOOL v217 = *(_DWORD *)(v12 + 860);
            if (v215) {
              LODWORD(v215) = *(_DWORD *)(v215 + 424);
            }
            int v218 = *(_DWORD *)(v125 + 368) + *(_DWORD *)(v125 + 364);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v216;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v217;
            *(_WORD *)int v236 = 1024;
            *(_DWORD *)&v236[2] = v215;
            *(_WORD *)&v236[6] = 1024;
            *(_DWORD *)&v236[8] = v218;
            _os_log_impl( &dword_181A5C000,  v214,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
          }
        }
      }

      uint64_t v180 = *(void **)(v12 + 496);
      if (!v180)
      {
        __nwlog_obj();
        *(_DWORD *)int v237 = 136446210;
        *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        BOOL v200 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        BOOL v233 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int128 v201 = (os_log_s *)__nwlog_obj();
          int v202 = type;
          if (!os_log_type_enabled(v201, type)) {
            goto LABEL_457;
          }
          *(_DWORD *)int v237 = 136446210;
          *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          uint64_t v203 = "%{public}s called with null http1_connection->context";
LABEL_455:
          int v225 = v237;
          goto LABEL_456;
        }

        if (!v233)
        {
          __int128 v201 = (os_log_s *)__nwlog_obj();
          int v202 = type;
          if (!os_log_type_enabled(v201, type)) {
            goto LABEL_457;
          }
          *(_DWORD *)int v237 = 136446210;
          *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          uint64_t v203 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_455;
        }

        uint64_t v221 = (char *)__nw_create_backtrace_string();
        __int128 v201 = (os_log_s *)__nwlog_obj();
        int v202 = type;
        int v222 = os_log_type_enabled(v201, type);
        if (!v221)
        {
          if (!v222) {
            goto LABEL_457;
          }
          *(_DWORD *)int v237 = 136446210;
          *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          uint64_t v203 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_455;
        }

        if (v222)
        {
          *(_DWORD *)int v237 = 136446466;
          *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          *(_WORD *)&v237[12] = 2082;
          *(void *)&v237[14] = v221;
          int v223 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_430:
          _os_log_impl(&dword_181A5C000, v201, v202, v223, v237, 0x16u);
        }

BOOL nw_protocol_http1_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v282 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v57 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] != 17)
    {
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        int v58 = (os_log_s *)__nwlog_obj();
        os_log_type_t v59 = aBlock[0];
        if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0])) {
          goto LABEL_481;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v60 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_480;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = aBlock[0];
      BOOL v80 = os_log_type_enabled(v58, (os_log_type_t)aBlock[0]);
      if (!backtrace_string)
      {
        if (!v80) {
          goto LABEL_481;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v60 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_480;
      }

      if (v80)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_481;
    }

    int v58 = (os_log_s *)__nwlog_obj();
    os_log_type_t v59 = aBlock[0];
    if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0])) {
      goto LABEL_481;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v60 = "%{public}s called with null protocol";
LABEL_480:
    _os_log_impl(&dword_181A5C000, v58, v59, v60, buf, 0xCu);
    goto LABEL_481;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v57 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] != 17)
    {
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        int v58 = (os_log_s *)__nwlog_obj();
        os_log_type_t v59 = aBlock[0];
        if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0])) {
          goto LABEL_481;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v60 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_480;
      }

      uint64_t v81 = (char *)__nw_create_backtrace_string();
      int v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = aBlock[0];
      BOOL v82 = os_log_type_enabled(v58, (os_log_type_t)aBlock[0]);
      if (!v81)
      {
        if (!v82) {
          goto LABEL_481;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v60 = "%{public}s called with null handle, no backtrace";
        goto LABEL_480;
      }

      if (v82)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v81;
        int v83 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_117:
        _os_log_impl(&dword_181A5C000, v58, v59, v83, buf, 0x16u);
      }

LABEL_492:
        free(v84);
        goto LABEL_498;
      }

LABEL_482:
      free(v57);
      goto LABEL_483;
    }

    int v58 = (os_log_s *)__nwlog_obj();
    os_log_type_t v59 = aBlock[0];
    if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0])) {
      goto LABEL_481;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v60 = "%{public}s called with null handle";
    goto LABEL_480;
  }

  nw_proxy_config_t v4 = a2;
  int v5 = handle[6];
  if (v5 == 1) {
    goto LABEL_10;
  }
  if (v5 != 2)
  {
    if (v5 != 3) {
      goto LABEL_483;
    }
    uint64_t v6 = *((void *)handle + 2);
    if (v6)
    {
      handle = (_DWORD *)(v6 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v57 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v57, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        int v58 = (os_log_s *)__nwlog_obj();
        os_log_type_t v59 = aBlock[0];
        if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0])) {
          goto LABEL_481;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v60 = "%{public}s called with null handle->http1_connection";
        goto LABEL_480;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        int v58 = (os_log_s *)__nwlog_obj();
        os_log_type_t v59 = aBlock[0];
        if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0])) {
          goto LABEL_481;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v60 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_480;
      }

      uint64_t v81 = (char *)__nw_create_backtrace_string();
      int v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = aBlock[0];
      BOOL v107 = os_log_type_enabled(v58, (os_log_type_t)aBlock[0]);
      if (!v81)
      {
        if (!v107) {
          goto LABEL_481;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint64_t v60 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_480;
      }

      if (v107)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v81;
        int v83 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_117;
      }

      goto LABEL_118;
    }

LABEL_481:
    if (!v57) {
      goto LABEL_483;
    }
    goto LABEL_482;
  }

  uint64_t v7 = *((void *)handle + 1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v57 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] == 17)
    {
      int v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = aBlock[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0])) {
        goto LABEL_481;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint64_t v60 = "%{public}s called with null handle->http1_stream";
      goto LABEL_480;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      int v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = aBlock[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0])) {
        goto LABEL_481;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint64_t v60 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_480;
    }

    uint64_t v81 = (char *)__nw_create_backtrace_string();
    int v58 = (os_log_s *)__nwlog_obj();
    os_log_type_t v59 = aBlock[0];
    BOOL v108 = os_log_type_enabled(v58, (os_log_type_t)aBlock[0]);
    if (!v81)
    {
      if (!v108) {
        goto LABEL_481;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint64_t v60 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_480;
    }

    if (v108)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v81;
      int v83 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_117;
    }

    goto LABEL_118;
  }

  handle = (_DWORD *)(v7 + 248);
LABEL_10:
  uint64_t v8 = *(void *)handle;
  if (!*(void *)handle) {
    goto LABEL_483;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_add_input_handler";
    int v61 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] == 17)
    {
      BOOL v62 = (os_log_s *)__nwlog_obj();
      os_log_type_t v63 = aBlock[0];
      if (os_log_type_enabled(v62, (os_log_type_t)aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_add_input_handler";
        uint64_t v64 = "%{public}s called with null input_protocol";
LABEL_497:
        _os_log_impl(&dword_181A5C000, v62, v63, v64, buf, 0xCu);
        goto LABEL_498;
      }

      goto LABEL_498;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v62 = (os_log_s *)__nwlog_obj();
      os_log_type_t v63 = aBlock[0];
      if (os_log_type_enabled(v62, (os_log_type_t)aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_add_input_handler";
        uint64_t v64 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_497;
      }

LABEL_474:
  uint64_t v45 = (uint64_t)v271;
  if (v95) {
    free(v95);
  }
LABEL_214:
  nw_protocol_set_input_handler((uint64_t)v32, v45);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v45;
  if (*(void *)(v45 + 32))
  {
    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v115 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v116 = *(_DWORD *)(v8 + 372);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v8 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v116;
        _os_log_impl( &dword_181A5C000,  v115,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> Output handler already exists for protocol being added as input handler",  buf,  0x26u);
      }
    }
  }

  else
  {
    nw_protocol_set_output_handler(v45, (uint64_t)v32);
  }

  unsigned int v117 = (uint64_t *)*((void *)v32 + 40);
  if (v117)
  {
    uint64_t v118 = nw_parameters_copy_protocol_options_legacy(*((void **)v32 + 40), (nw_protocol *)v8);
    if (v118)
    {
      int v119 = v118;
      if ((v32[158] & 1) == 0)
      {
        if (*((_BYTE *)v9 + 1537))
        {
          int v246 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v247 = *((void *)v32 + 32);
            int v248 = *(_DWORD *)(*((void *)v32 + 31) + 372LL);
            if (v247) {
              LODWORD(v247) = *(_DWORD *)(v247 + 860);
            }
            int v249 = *((_DWORD *)v32 + 106);
            *(_DWORD *)buf = 136448770;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_replace_protocol_instance";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v32 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v248;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v247;
            *(_WORD *)&_BYTE buf[44] = 1024;
            *(_DWORD *)&buf[46] = v249;
            *(_WORD *)&buf[50] = 2048;
            *(void *)&_BYTE buf[52] = v32;
            *(_WORD *)&buf[60] = 2048;
            *(void *)&buf[62] = v32;
            *(_WORD *)&buf[70] = 2048;
            *(void *)&buf[72] = v8;
            *(_WORD *)int v276 = 2048;
            *(void *)&v276[2] = v117;
            __int16 v277 = 2048;
            uint64_t v278 = v119;
            _os_log_impl( &dword_181A5C000,  v246,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http1_stream protocol %p, set protocol instance to %p instead of %p i n parameters %p options %p",  buf,  0x64u);
          }
        }
      }

      if (nw_protocol_copy_http1_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72463);
      }
      id v120 = (id)nw_protocol_copy_http1_definition_http1_definition;
      uint64_t v121 = v119;
      *((void *)v121 + 2) = v32;

      if (v120) {
        os_release(v120);
      }
      os_release(v121);
    }

    *(_DWORD *)int v276 = 0;
    memset(buf, 0, sizeof(buf));
    unsigned int v122 = nw_parameters_copy_protocol_options_legacy(*((void **)v32 + 40), (nw_protocol *)v32);
    uint64_t v123 = v122;
    if (v122)
    {
      int v124 = v122;
      uint64_t v125 = 0LL;
      buf[0] = 0;
      while (1)
      {
        int v126 = v124[v125 + 48];
        buf[v125] = v126;
        if (!v126) {
          break;
        }
        if (++v125 == 83)
        {
          v276[3] = 0;
          break;
        }
      }
    }

    else if ((v32[158] & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v127 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v128 = *((void *)v32 + 32);
        int v129 = *(_DWORD *)(*((void *)v32 + 31) + 372LL);
        if (v128) {
          LODWORD(v12_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v128 + 860);
        }
        int v130 = *((_DWORD *)v32 + 106);
        *(_DWORD *)uint64_t aBlock = 136448002;
        *(void *)&aBlock[4] = "nw_http1_stream_add_input_handler";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v32 + 74;
        *(_WORD *)&aBlock[22] = 2080;
        uint64_t v280 = (uint64_t)" ";
        *(_WORD *)int v281 = 1024;
        *(_DWORD *)&v281[2] = v129;
        *(_WORD *)&v281[6] = 1024;
        *(_DWORD *)&v281[8] = v128;
        *(_WORD *)&v281[12] = 1024;
        *(_DWORD *)&v281[14] = v130;
        *(_WORD *)&v281[18] = 2048;
        *(void *)&v281[20] = v32;
        *(_WORD *)&v281[28] = 2048;
        *(void *)&v281[30] = v117;
        _os_log_impl( &dword_181A5C000,  v127,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> Failed to access options for protocol %p, parameters %p",  aBlock,  0x46u);
      }
    }

    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      if (*((_BYTE *)v9 + 1537))
      {
        BOOL v233 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
        {
          int v234 = *(_DWORD *)(v8 + 372);
          *(_DWORD *)uint64_t aBlock = 136447234;
          *(void *)&aBlock[4] = "nw_http1_add_stream";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v8 + 74;
          *(_WORD *)&aBlock[22] = 2080;
          uint64_t v280 = (uint64_t)" ";
          *(_WORD *)int v281 = 1024;
          *(_DWORD *)&v281[2] = v234;
          *(_WORD *)&v281[6] = 2048;
          *(void *)&v281[8] = v32;
          _os_log_impl( &dword_181A5C000,  v233,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream (%p)",  aBlock,  0x30u);
        }
      }
    }

    *((void *)v32 + 35) = 0LL;
    int v131 = *(void **)(v8 + 240);
    *((void *)v32 + 36) = v131;
    *int v131 = v32;
    *(void *)(v8 + 240) = v32 + 280;
    uint64_t v132 = *(unsigned int *)(v8 + 344) + 1LL;
    uint64_t v133 = v132 << 31 >> 31;
    *(_DWORD *)(v8 + 344) = v132;
    if (v133 == v132 && (v133 & 0x8000000000000000LL) == 0)
    {
LABEL_260:
      uint64_t v145 = *(unsigned int *)(v8 + 356) + 1LL;
      uint64_t v146 = v145 << 31 >> 31;
      *(_DWORD *)(v8 + 356) = v145;
      int v147 = v271;
      if (v146 == v145 && (v146 & 0x8000000000000000LL) == 0) {
        goto LABEL_279;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v148 = *(unsigned int *)(v8 + 356);
      *(_DWORD *)uint64_t aBlock = 136446978;
      *(void *)&aBlock[4] = "nw_http1_add_stream";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = "http1->next_stream_log_num";
      *(_WORD *)&aBlock[22] = 2048;
      uint64_t v280 = 1LL;
      *(_WORD *)int v281 = 2048;
      *(void *)&v281[2] = v148;
      int v149 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v273 = 0;
      if (__nwlog_fault(v149, &type, &v273))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v150 = (os_log_s *)gLogObj;
          os_log_type_t v151 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v152 = *(unsigned int *)(v8 + 356);
            *(_DWORD *)uint64_t aBlock = 136446978;
            *(void *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(void *)&aBlock[14] = "http1->next_stream_log_num";
            *(_WORD *)&aBlock[22] = 2048;
            uint64_t v280 = 1LL;
            *(_WORD *)int v281 = 2048;
            *(void *)&v281[2] = v152;
            int v153 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_275:
            _os_log_impl(&dword_181A5C000, v150, v151, v153, aBlock, 0x2Au);
          }
        }

        else if (v273)
        {
          uint64_t v154 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v150 = (os_log_s *)gLogObj;
          os_log_type_t v151 = type;
          BOOL v155 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v154)
          {
            if (v155)
            {
              uint64_t v156 = *(unsigned int *)(v8 + 356);
              *(_DWORD *)uint64_t aBlock = 136447234;
              *(void *)&aBlock[4] = "nw_http1_add_stream";
              *(_WORD *)&aBlock[12] = 2082;
              *(void *)&aBlock[14] = "http1->next_stream_log_num";
              *(_WORD *)&aBlock[22] = 2048;
              uint64_t v280 = 1LL;
              *(_WORD *)int v281 = 2048;
              *(void *)&v281[2] = v156;
              *(_WORD *)&v281[10] = 2082;
              *(void *)&v281[12] = v154;
              _os_log_impl( &dword_181A5C000,  v150,  v151,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  aBlock,  0x34u);
            }

            free(v154);
            uint64_t v9 = &qword_18C45F000;
            goto LABEL_276;
          }

          uint64_t v9 = &qword_18C45F000;
          if (v155)
          {
            uint64_t v158 = *(unsigned int *)(v8 + 356);
            *(_DWORD *)uint64_t aBlock = 136446978;
            *(void *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(void *)&aBlock[14] = "http1->next_stream_log_num";
            *(_WORD *)&aBlock[22] = 2048;
            uint64_t v280 = 1LL;
            *(_WORD *)int v281 = 2048;
            *(void *)&v281[2] = v158;
            int v153 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_275;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v150 = (os_log_s *)gLogObj;
          os_log_type_t v151 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v157 = *(unsigned int *)(v8 + 356);
            *(_DWORD *)uint64_t aBlock = 136446978;
            *(void *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(void *)&aBlock[14] = "http1->next_stream_log_num";
            *(_WORD *)&aBlock[22] = 2048;
            uint64_t v280 = 1LL;
            *(_WORD *)int v281 = 2048;
            *(void *)&v281[2] = v157;
            int v153 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_275;
          }
        }
      }

LABEL_276:
      if (v149) {
        free(v149);
      }
      LODWORD(v145) = -1;
      *(_DWORD *)(v8 + 356) = -1;
      int v147 = v271;
LABEL_279:
      *((_DWORD *)v32 + 106) = v145;
      if ((v32[158] & 1) == 0)
      {
        if (*((_BYTE *)v9 + 1537))
        {
          uint64_t v235 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v235, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v236 = *((void *)v32 + 32);
            int v237 = *(_DWORD *)(*((void *)v32 + 31) + 372LL);
            if (v236) {
              LODWORD(v236) = *(_DWORD *)(v236 + 860);
            }
            int v238 = *((_DWORD *)v32 + 106);
            int v239 = *(_DWORD *)(v8 + 344);
            *(_DWORD *)uint64_t aBlock = 136448258;
            *(void *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(void *)&aBlock[14] = v32 + 74;
            *(_WORD *)&aBlock[22] = 2080;
            uint64_t v280 = (uint64_t)" ";
            *(_WORD *)int v281 = 1024;
            *(_DWORD *)&v281[2] = v237;
            *(_WORD *)&v281[6] = 1024;
            *(_DWORD *)&v281[8] = v236;
            *(_WORD *)&v281[12] = 1024;
            *(_DWORD *)&v281[14] = v238;
            *(_WORD *)&v281[18] = 1024;
            *(_DWORD *)&v281[20] = v238;
            *(_WORD *)&v281[24] = 2048;
            *(void *)&v281[26] = v32;
            *(_WORD *)&v281[34] = 1024;
            *(_DWORD *)&v281[36] = v239;
            _os_log_impl( &dword_181A5C000,  v235,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added stream %u (%p), now have %u streams",  aBlock,  0x48u);
          }
        }
      }

      nw_protocol_plugin_name_set_name((uint64_t)(v32 + 64), (uint64_t)v32, v117);
      if (buf[0])
      {
        if ((*(_BYTE *)(v8 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v160 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
          {
            int v161 = *(_DWORD *)(v8 + 372);
            int v162 = *(_DWORD *)(v8 + 344);
            *(_DWORD *)uint64_t aBlock = 136447746;
            *(void *)&aBlock[4] = "nw_http1_stream_add_input_handler";
            *(void *)&aBlock[14] = v8 + 74;
            *(_WORD *)&aBlock[22] = 2080;
            *(_WORD *)&aBlock[12] = 2082;
            uint64_t v280 = (uint64_t)" ";
            *(_WORD *)int v281 = 1024;
            *(_DWORD *)&v281[2] = v161;
            *(_WORD *)&v281[6] = 2048;
            *(void *)&v281[8] = v147;
            *(_WORD *)&v281[16] = 2082;
            *(void *)&v281[18] = buf;
            *(_WORD *)&v281[26] = 1024;
            *(_DWORD *)&v281[28] = v162;
            uint64_t v163 = "%{public}s %{public}s%s<i%u> added input handler %p from %{public}s, now have %u input handlers";
            v164 = (os_log_s *)v160;
            uint32_t v165 = 64;
LABEL_288:
            _os_log_impl(&dword_181A5C000, v164, OS_LOG_TYPE_DEFAULT, v163, aBlock, v165);
          }
        }
      }

      else if ((*(_BYTE *)(v8 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v166 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
        {
          int v167 = *(_DWORD *)(v8 + 372);
          int v168 = *(_DWORD *)(v8 + 344);
          *(_DWORD *)uint64_t aBlock = 136447490;
          *(void *)&aBlock[4] = "nw_http1_stream_add_input_handler";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v8 + 74;
          *(_WORD *)&aBlock[22] = 2080;
          uint64_t v280 = (uint64_t)" ";
          *(_WORD *)int v281 = 1024;
          *(_DWORD *)&v281[2] = v167;
          *(_WORD *)&v281[6] = 2048;
          *(void *)&v281[8] = v147;
          *(_WORD *)&v281[16] = 1024;
          *(_DWORD *)&v281[18] = v168;
          uint64_t v163 = "%{public}s %{public}s%s<i%u> added input handler %p, now have %u input handlers";
          v164 = (os_log_s *)v166;
          uint32_t v165 = 54;
          goto LABEL_288;
        }
      }

      if (v123) {
        os_release(v123);
      }
      goto LABEL_291;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v134 = *(unsigned int *)(v8 + 344);
    *(_DWORD *)uint64_t aBlock = 136446978;
    *(void *)&aBlock[4] = "nw_http1_add_stream";
    *(_WORD *)&aBlock[12] = 2082;
    *(void *)&aBlock[14] = "http1->streams_count";
    *(_WORD *)&aBlock[22] = 2048;
    uint64_t v280 = 1LL;
    *(_WORD *)int v281 = 2048;
    *(void *)&v281[2] = v134;
    int v135 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v273 = 0;
    if (__nwlog_fault(v135, &type, &v273))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v136 = (os_log_s *)gLogObj;
        os_log_type_t v137 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v138 = *(unsigned int *)(v8 + 344);
          *(_DWORD *)uint64_t aBlock = 136446978;
          *(void *)&aBlock[4] = "nw_http1_add_stream";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = "http1->streams_count";
          *(_WORD *)&aBlock[22] = 2048;
          uint64_t v280 = 1LL;
          *(_WORD *)int v281 = 2048;
          *(void *)&v281[2] = v138;
          os_log_type_t v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_256:
          _os_log_impl(&dword_181A5C000, v136, v137, v139, aBlock, 0x2Au);
        }
      }

      else if (v273)
      {
        uint64_t v140 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v136 = (os_log_s *)gLogObj;
        os_log_type_t v137 = type;
        BOOL v141 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v140)
        {
          if (v141)
          {
            uint64_t v142 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)uint64_t aBlock = 136447234;
            *(void *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(void *)&aBlock[14] = "http1->streams_count";
            *(_WORD *)&aBlock[22] = 2048;
            uint64_t v280 = 1LL;
            *(_WORD *)int v281 = 2048;
            *(void *)&v281[2] = v142;
            *(_WORD *)&v281[10] = 2082;
            *(void *)&v281[12] = v140;
            _os_log_impl( &dword_181A5C000,  v136,  v137,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  aBlock,  0x34u);
          }

          free(v140);
          uint64_t v9 = &qword_18C45F000;
          goto LABEL_257;
        }

        uint64_t v9 = &qword_18C45F000;
        if (v141)
        {
          uint64_t v144 = *(unsigned int *)(v8 + 344);
          *(_DWORD *)uint64_t aBlock = 136446978;
          *(void *)&aBlock[4] = "nw_http1_add_stream";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = "http1->streams_count";
          *(_WORD *)&aBlock[22] = 2048;
          uint64_t v280 = 1LL;
          *(_WORD *)int v281 = 2048;
          *(void *)&v281[2] = v144;
          os_log_type_t v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_256;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v136 = (os_log_s *)gLogObj;
        os_log_type_t v137 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v143 = *(unsigned int *)(v8 + 344);
          *(_DWORD *)uint64_t aBlock = 136446978;
          *(void *)&aBlock[4] = "nw_http1_add_stream";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = "http1->streams_count";
          *(_WORD *)&aBlock[22] = 2048;
          uint64_t v280 = 1LL;
          *(_WORD *)int v281 = 2048;
          *(void *)&v281[2] = v143;
          os_log_type_t v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_256;
        }
      }
    }

    if (v87) {
      free(v87);
    }
    nw_protocol_stack_t v22 = v19;
    goto LABEL_51;
  }

LABEL_443:
    int v222 = v240;
    os_log_type_t v223 = v241;
    uint32_t v224 = 12;
    goto LABEL_367;
  }

  if (*((void *)v32 + 31))
  {
    if (!*(void *)(v170 + 488))
    {
      *((void *)v32 + 32) = v170;
      *(void *)(v170 + 48_Block_object_dispose(&STACK[0x338], 8) = v32;
      nw_protocol_set_output_handler((uint64_t)v32, *(void *)(v170 + 32));
      nw_protocol_set_input_handler(v170, *((void *)v32 + 6));
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v170;
      __int128 v201 = *((_OWORD *)v32 + 9);
      __int128 v203 = *((_OWORD *)v32 + 6);
      __int128 v202 = *((_OWORD *)v32 + 7);
      *(_OWORD *)(v170 + 12_Block_object_dispose(&STACK[0x338], 8) = *((_OWORD *)v32 + 8);
      *(_OWORD *)(v170 + 144) = v201;
      *(_OWORD *)(v170 + 96) = v203;
      *(_OWORD *)(v170 + 112) = v202;
      __int128 v204 = *((_OWORD *)v32 + 5);
      *(_OWORD *)(v170 + 64) = *((_OWORD *)v32 + 4);
      *(_OWORD *)(v170 + 80) = v204;
      nw_http_transaction_metadata_set_connection_metadata(*((void **)v32 + 44), *(void **)(v170 + 768));
      *v171 &= 0xFFD7u;
      *(_DWORD *)(v170 + 864) = 1;
      int v196 = &qword_18C45F000;
      if ((*(_BYTE *)(v170 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v205 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v206 = *(void *)(v170 + 488);
          int v207 = *(_DWORD *)(*(void *)(v170 + 480) + 372LL);
          int v208 = *(_DWORD *)(v170 + 860);
          if (v206) {
            LODWORD(v206) = *(_DWORD *)(v206 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v170 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v207;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v208;
          *(_WORD *)&_BYTE buf[44] = 1024;
          *(_DWORD *)&buf[46] = v206;
          _os_log_impl( &dword_181A5C000,  v205,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
        }
      }

      if ((v32[158] & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v209 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          uint64_t v210 = *((void *)v32 + 32);
          int v211 = *(_DWORD *)(*((void *)v32 + 31) + 372LL);
          if (v210) {
            LODWORD(v210) = *(_DWORD *)(v210 + 860);
          }
          int v212 = *((_DWORD *)v32 + 106);
          *(_DWORD *)buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v32 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v211;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v210;
          *(_WORD *)&_BYTE buf[44] = 1024;
          *(_DWORD *)&buf[46] = v212;
          *(_WORD *)&buf[50] = 2048;
          *(void *)&_BYTE buf[52] = v32;
          *(_WORD *)&buf[60] = 2048;
          *(void *)&buf[62] = v170;
          _os_log_impl( &dword_181A5C000,  v209,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
        }
      }

      goto LABEL_370;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v194 = *(void *)(v170 + 488);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v170;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&_BYTE buf[24] = v194;
    int v195 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    int v196 = &qword_18C45F000;
    if (__nwlog_fault(v195, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v197 = gLogObj;
        os_log_type_t v198 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
          goto LABEL_368;
        }
        uint64_t v199 = *(void *)(v170 + 488);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v170;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = v199;
        BOOL v200 = "%{public}s Connection %p already has a stream (%p)";
LABEL_366:
        int v222 = (os_log_s *)v197;
        os_log_type_t v223 = v198;
        uint32_t v224 = 32;
LABEL_367:
        _os_log_impl(&dword_181A5C000, v222, v223, v200, buf, v224);
        goto LABEL_368;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v197 = gLogObj;
        os_log_type_t v198 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
          goto LABEL_368;
        }
        uint64_t v220 = *(void *)(v170 + 488);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v170;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = v220;
        BOOL v200 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
        goto LABEL_366;
      }

      int v213 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v197 = gLogObj;
      os_log_type_t v198 = aBlock[0];
      BOOL v214 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
      if (!v213)
      {
        if (!v214) {
          goto LABEL_368;
        }
        uint64_t v221 = *(void *)(v170 + 488);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v170;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = v221;
        BOOL v200 = "%{public}s Connection %p already has a stream (%p), no backtrace";
        goto LABEL_366;
      }

      if (v214)
      {
        uint64_t v215 = *(void *)(v170 + 488);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v170;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = v215;
        *(_WORD *)&buf[32] = 2082;
        *(void *)&buf[34] = v213;
        unsigned int v216 = "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s";
        BOOL v217 = (os_log_s *)v197;
        os_log_type_t v218 = v198;
        uint32_t v219 = 42;
LABEL_359:
        _os_log_impl(&dword_181A5C000, v217, v218, v216, buf, v219);
        goto LABEL_360;
      }

      goto LABEL_360;
    }

    goto LABEL_368;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
  int v195 = (char *)_os_log_send_and_compose_impl();
  aBlock[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  int v196 = &qword_18C45F000;
  if (aBlock[0] == 17)
  {
    os_log_type_t v240 = (os_log_s *)__nwlog_obj();
    os_log_type_t v241 = aBlock[0];
    if (!os_log_type_enabled(v240, (os_log_type_t)aBlock[0])) {
      goto LABEL_368;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
    BOOL v200 = "%{public}s called with null http1_stream->protocol_http1";
    goto LABEL_443;
  }

  if (type == OS_LOG_TYPE_DEFAULT)
  {
    os_log_type_t v240 = (os_log_s *)__nwlog_obj();
    os_log_type_t v241 = aBlock[0];
    if (!os_log_type_enabled(v240, (os_log_type_t)aBlock[0])) {
      goto LABEL_368;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
    BOOL v200 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
    goto LABEL_443;
  }

  int v213 = (char *)__nw_create_backtrace_string();
  os_log_type_t v240 = (os_log_s *)__nwlog_obj();
  os_log_type_t v241 = aBlock[0];
  BOOL v259 = os_log_type_enabled(v240, (os_log_type_t)aBlock[0]);
  if (v213)
  {
    if (v259)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v213;
      unsigned int v216 = "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s";
      BOOL v217 = v240;
      os_log_type_t v218 = v241;
      uint32_t v219 = 22;
      goto LABEL_359;
    }

    if (v243) {
      free(v243);
    }
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "__nw_frame_is_metadata_complete";
    os_log_type_t v289 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v374[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v290 = (os_log_s *)__nwlog_obj();
      uint64_t v291 = type[0];
      if (!os_log_type_enabled(v290, type[0])) {
        goto LABEL_459;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "__nw_frame_is_metadata_complete";
      v292 = "%{public}s called with null frame";
    }

    else if (LOBYTE(v374[0]))
    {
      v293 = (char *)__nw_create_backtrace_string();
      v290 = (os_log_s *)__nwlog_obj();
      uint64_t v291 = type[0];
      BOOL v294 = os_log_type_enabled(v290, type[0]);
      if (v293)
      {
        if (v294)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "__nw_frame_is_metadata_complete";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v293;
          _os_log_impl( &dword_181A5C000,  v290,  v291,  "%{public}s called with null frame, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
        }

        free(v293);
        goto LABEL_459;
      }

      if (!v294)
      {
LABEL_459:
        if (v289) {
          free(v289);
        }
        goto LABEL_35;
      }

      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "__nw_frame_is_metadata_complete";
      v292 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      v290 = (os_log_s *)__nwlog_obj();
      uint64_t v291 = type[0];
      if (!os_log_type_enabled(v290, type[0])) {
        goto LABEL_459;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "__nw_frame_is_metadata_complete";
      v292 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v290, v291, v292, (uint8_t *)buf, 0xCu);
    goto LABEL_459;
  }

  if ((v10 & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v247 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v249 = *(_DWORD *)(a3 + 176);
      int v248 = *(_DWORD *)(a3 + 180);
      LODWORD(buf[0]) = 136447234;
      *(void *)((char *)buf + 4) = "nw_http2_submit_headers";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = a3 + 191;
      HIWORD(buf[2]) = 2080;
      *(void *)&uint64_t v370 = " ";
      WORD4(v370) = 1024;
      *(_DWORD *)((char *)&v370 + 10) = v248;
      HIWORD(v370) = 1024;
      LODWORD(v371[0]) = v249;
      _os_log_impl( &dword_181A5C000,  v247,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called",  (uint8_t *)buf,  0x2Cu);
    }
  }

  int v19 = *(unsigned __int16 *)(a3 + 188);
  uint64_t v20 = v19 | (*(unsigned __int8 *)(a3 + 190) << 16);
  if ((v19 & 0x100) != 0)
  {
    if ((v20 & 0x80000) != 0) {
      goto LABEL_149;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v39 = *(_DWORD *)(a3 + 176);
    uint64_t v38 = *(_DWORD *)(a3 + 180);
    LODWORD(buf[0]) = 136447490;
    *(void *)((char *)buf + 4) = "nw_http2_submit_headers";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = a3 + 191;
    HIWORD(buf[2]) = 2080;
    *(void *)&uint64_t v370 = " ";
    WORD4(v370) = 1024;
    *(_DWORD *)((char *)&v370 + 10) = v38;
    HIWORD(v370) = 1024;
    LODWORD(v371[0]) = v39;
    WORD2(v371[0]) = 1024;
    *(_DWORD *)((char *)v371 + 6) = v39;
    id v40 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v374[0]) = 0;
    if (__nwlog_fault(v40, type, v374))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        char v41 = (os_log_s *)gconnectionLogObj;
        id v42 = type[0];
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type[0])) {
          goto LABEL_147;
        }
        char v44 = *(_DWORD *)(a3 + 176);
        uint64_t v43 = *(_DWORD *)(a3 + 180);
        LODWORD(buf[0]) = 136447490;
        *(void *)((char *)buf + 4) = "nw_http2_submit_headers";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a3 + 191;
        HIWORD(buf[2]) = 2080;
        *(void *)&uint64_t v370 = " ";
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = v43;
        HIWORD(v370) = 1024;
        LODWORD(v371[0]) = v44;
        WORD2(v371[0]) = 1024;
        *(_DWORD *)((char *)v371 + 6) = v44;
        uint64_t v45 = "%{public}s %{public}s%s<i%u:s%d> already sent headers for stream %d, cannot send again";
      }

      else if (LOBYTE(v374[0]))
      {
        os_log_type_t v59 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        char v41 = (os_log_s *)gconnectionLogObj;
        id v42 = type[0];
        uint64_t v60 = os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]);
        if (v59)
        {
          if (v60)
          {
            BOOL v62 = *(_DWORD *)(a3 + 176);
            int v61 = *(_DWORD *)(a3 + 180);
            LODWORD(buf[0]) = 136447746;
            *(void *)((char *)buf + 4) = "nw_http2_submit_headers";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = a3 + 191;
            HIWORD(buf[2]) = 2080;
            *(void *)&uint64_t v370 = " ";
            WORD4(v370) = 1024;
            *(_DWORD *)((char *)&v370 + 10) = v61;
            HIWORD(v370) = 1024;
            LODWORD(v371[0]) = v62;
            WORD2(v371[0]) = 1024;
            *(_DWORD *)((char *)v371 + 6) = v62;
            WORD1(v371[1]) = 2082;
            *(void **)((char *)&v371[1] + 4) = v59;
            _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s %{public}s%s<i%u:s%d> already sent headers for stream %d, cannot send again, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x3Cu);
          }

          free(v59);
          goto LABEL_147;
        }

        if (!v60) {
          goto LABEL_147;
        }
        int v112 = *(_DWORD *)(a3 + 176);
        os_log_type_t v111 = *(_DWORD *)(a3 + 180);
        LODWORD(buf[0]) = 136447490;
        *(void *)((char *)buf + 4) = "nw_http2_submit_headers";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a3 + 191;
        HIWORD(buf[2]) = 2080;
        *(void *)&uint64_t v370 = " ";
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = v111;
        HIWORD(v370) = 1024;
        LODWORD(v371[0]) = v112;
        WORD2(v371[0]) = 1024;
        *(_DWORD *)((char *)v371 + 6) = v112;
        uint64_t v45 = "%{public}s %{public}s%s<i%u:s%d> already sent headers for stream %d, cannot send again, no backtrace";
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        char v41 = (os_log_s *)gconnectionLogObj;
        id v42 = type[0];
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type[0])) {
          goto LABEL_147;
        }
        uint64_t v74 = *(_DWORD *)(a3 + 176);
        uint64_t v73 = *(_DWORD *)(a3 + 180);
        LODWORD(buf[0]) = 136447490;
        *(void *)((char *)buf + 4) = "nw_http2_submit_headers";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a3 + 191;
        HIWORD(buf[2]) = 2080;
        *(void *)&uint64_t v370 = " ";
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = v73;
        HIWORD(v370) = 1024;
        LODWORD(v371[0]) = v74;
        WORD2(v371[0]) = 1024;
        *(_DWORD *)((char *)v371 + 6) = v74;
        uint64_t v45 = "%{public}s %{public}s%s<i%u:s%d> already sent headers for stream %d, cannot send again, backtrace limit exceeded";
      }

      int v113 = v41;
      BOOL v114 = v42;
      BOOL v115 = 50;
LABEL_146:
      _os_log_impl(&dword_181A5C000, v113, v114, v45, (uint8_t *)buf, v115);
    }

LABEL_368:
  if (v195) {
LABEL_369:
  }
    free(v195);
LABEL_370:
  *(void *)(v8 + 224) = 0LL;
  *((_WORD *)v32 + 214) |= 4u;
  BOOL result = 1LL;
  if ((v32[158] & 1) == 0 && *((_BYTE *)v196 + 1537))
  {
    int v225 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v226 = *((void *)v32 + 32);
      int v227 = *(_DWORD *)(*((void *)v32 + 31) + 372LL);
      if (v226) {
        LODWORD(v226) = *(_DWORD *)(v226 + 860);
      }
      int v228 = *((_DWORD *)v32 + 106);
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_add_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v32 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v227;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v226;
      *(_WORD *)&_BYTE buf[44] = 1024;
      *(_DWORD *)&buf[46] = v228;
      *(_WORD *)&buf[50] = 2048;
      *(void *)&_BYTE buf[52] = v170;
      _os_log_impl( &dword_181A5C000,  v225,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> attached to connection %p which triggered new flow, pending connected",  buf,  0x3Cu);
    }

    return 1LL;
  }

  return result;
}

void sub_18217EBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_http1_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v1070 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v450 = (char *)_os_log_send_and_compose_impl();
    v1065[0] = 16;
    aBlock[0] = 0;
    if (v1065[0] == 17)
    {
      v451 = (os_log_s *)__nwlog_obj();
      os_log_type_t v452 = v1065[0];
      if (!os_log_type_enabled(v451, (os_log_type_t)v1065[0])) {
        goto LABEL_1294;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint32_t v453 = "%{public}s called with null protocol";
    }

    else if (aBlock[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v451 = (os_log_s *)__nwlog_obj();
      os_log_type_t v452 = v1065[0];
      BOOL v522 = os_log_type_enabled(v451, (os_log_type_t)v1065[0]);
      if (backtrace_string)
      {
        if (v522)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v451,  v452,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_1294:
        if (!v450) {
          goto LABEL_1296;
        }
LABEL_1295:
        free(v450);
        goto LABEL_1296;
      }

      if (!v522) {
        goto LABEL_1294;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint32_t v453 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      v451 = (os_log_s *)__nwlog_obj();
      os_log_type_t v452 = v1065[0];
      if (!os_log_type_enabled(v451, (os_log_type_t)v1065[0])) {
        goto LABEL_1294;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint32_t v453 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_1293;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v450 = (char *)_os_log_send_and_compose_impl();
    v1065[0] = 16;
    aBlock[0] = 0;
    if (v1065[0] != 17)
    {
      if (!aBlock[0])
      {
        v451 = (os_log_s *)__nwlog_obj();
        os_log_type_t v452 = v1065[0];
        if (!os_log_type_enabled(v451, (os_log_type_t)v1065[0])) {
          goto LABEL_1294;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint32_t v453 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_1293;
      }

      __int16 v523 = (char *)__nw_create_backtrace_string();
      v451 = (os_log_s *)__nwlog_obj();
      os_log_type_t v452 = v1065[0];
      BOOL v524 = os_log_type_enabled(v451, (os_log_type_t)v1065[0]);
      if (!v523)
      {
        if (!v524) {
          goto LABEL_1294;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        uint32_t v453 = "%{public}s called with null handle, no backtrace";
        goto LABEL_1293;
      }

      if (v524)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v523;
        id v525 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_875:
        _os_log_impl(&dword_181A5C000, v451, v452, v525, buf, 0x16u);
      }

LABEL_876:
      free(v523);
      if (!v450) {
        goto LABEL_1296;
      }
      goto LABEL_1295;
    }

    v451 = (os_log_s *)__nwlog_obj();
    os_log_type_t v452 = v1065[0];
    if (!os_log_type_enabled(v451, (os_log_type_t)v1065[0])) {
      goto LABEL_1294;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint32_t v453 = "%{public}s called with null handle";
LABEL_1293:
    _os_log_impl(&dword_181A5C000, v451, v452, v453, buf, 0xCu);
    goto LABEL_1294;
  }

  int v7 = *((_DWORD *)handle + 6);
  uint64_t v8 = (uint64_t *)a1->handle;
  if (v7 == 1) {
    goto LABEL_10;
  }
  if (v7 != 2)
  {
    if (v7 != 3)
    {
LABEL_1296:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
      uint64_t v512 = (char *)_os_log_send_and_compose_impl();
      v1065[0] = 16;
      aBlock[0] = 0;
      if (v1065[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v513 = (os_log_s *)gLogObj;
        os_log_type_t v514 = v1065[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0])) {
          goto LABEL_1328;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
        id v515 = "%{public}s called with null http1";
        goto LABEL_1327;
      }

      if (!aBlock[0])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v513 = (os_log_s *)gLogObj;
        os_log_type_t v514 = v1065[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0])) {
          goto LABEL_1328;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
        id v515 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_1327;
      }

      uint64_t v542 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v513 = (os_log_s *)gLogObj;
      os_log_type_t v514 = v1065[0];
      BOOL v797 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0]);
      if (!v542)
      {
        if (!v797) {
          goto LABEL_1328;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
        id v515 = "%{public}s called with null http1, no backtrace";
        goto LABEL_1327;
      }

      if (!v797) {
        goto LABEL_1322;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v542;
      v544 = "%{public}s called with null http1, dumping backtrace:%{public}s";
      goto LABEL_1321;
    }

    uint64_t v9 = *((void *)handle + 2);
    if (v9)
    {
      uint64_t v8 = (uint64_t *)(v9 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v450 = (char *)_os_log_send_and_compose_impl();
    v1065[0] = 16;
    aBlock[0] = 0;
    if (v1065[0] == 17)
    {
      v451 = (os_log_s *)__nwlog_obj();
      os_log_type_t v452 = v1065[0];
      if (!os_log_type_enabled(v451, (os_log_type_t)v1065[0])) {
        goto LABEL_1294;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint32_t v453 = "%{public}s called with null handle->http1_connection";
      goto LABEL_1293;
    }

    if (!aBlock[0])
    {
      v451 = (os_log_s *)__nwlog_obj();
      os_log_type_t v452 = v1065[0];
      if (!os_log_type_enabled(v451, (os_log_type_t)v1065[0])) {
        goto LABEL_1294;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint32_t v453 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_1293;
    }

    __int16 v523 = (char *)__nw_create_backtrace_string();
    v451 = (os_log_s *)__nwlog_obj();
    os_log_type_t v452 = v1065[0];
    BOOL v724 = os_log_type_enabled(v451, (os_log_type_t)v1065[0]);
    if (!v523)
    {
      if (!v724) {
        goto LABEL_1294;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint32_t v453 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_1293;
    }

    if (v724)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v523;
      id v525 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_875;
    }

    goto LABEL_876;
  }

  uint64_t v10 = *((void *)handle + 1);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    uint64_t v450 = (char *)_os_log_send_and_compose_impl();
    v1065[0] = 16;
    aBlock[0] = 0;
    if (v1065[0] == 17)
    {
      v451 = (os_log_s *)__nwlog_obj();
      os_log_type_t v452 = v1065[0];
      if (!os_log_type_enabled(v451, (os_log_type_t)v1065[0])) {
        goto LABEL_1294;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint32_t v453 = "%{public}s called with null handle->http1_stream";
      goto LABEL_1293;
    }

    if (!aBlock[0])
    {
      v451 = (os_log_s *)__nwlog_obj();
      os_log_type_t v452 = v1065[0];
      if (!os_log_type_enabled(v451, (os_log_type_t)v1065[0])) {
        goto LABEL_1294;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint32_t v453 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_1293;
    }

    __int16 v523 = (char *)__nw_create_backtrace_string();
    v451 = (os_log_s *)__nwlog_obj();
    os_log_type_t v452 = v1065[0];
    BOOL v725 = os_log_type_enabled(v451, (os_log_type_t)v1065[0]);
    if (!v523)
    {
      if (!v725) {
        goto LABEL_1294;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      uint32_t v453 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_1293;
    }

    if (v725)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v523;
      id v525 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_875;
    }

    goto LABEL_876;
  }

  uint64_t v8 = (uint64_t *)(v10 + 248);
LABEL_10:
  uint64_t v11 = *v8;
  if (!*v8) {
    goto LABEL_1296;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
    uint64_t v512 = (char *)_os_log_send_and_compose_impl();
    v1065[0] = 16;
    aBlock[0] = 0;
    if (v1065[0] == 17)
    {
      uint64_t v513 = (os_log_s *)__nwlog_obj();
      os_log_type_t v514 = v1065[0];
      if (!os_log_type_enabled(v513, (os_log_type_t)v1065[0])) {
        goto LABEL_1328;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
      id v515 = "%{public}s called with null input_protocol";
LABEL_1327:
      _os_log_impl(&dword_181A5C000, v513, v514, v515, buf, 0xCu);
      goto LABEL_1328;
    }

    if (!aBlock[0])
    {
      uint64_t v513 = (os_log_s *)__nwlog_obj();
      os_log_type_t v514 = v1065[0];
      if (!os_log_type_enabled(v513, (os_log_type_t)v1065[0])) {
        goto LABEL_1328;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
      id v515 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_1327;
    }

    uint64_t v542 = (char *)__nw_create_backtrace_string();
    uint64_t v513 = (os_log_s *)__nwlog_obj();
    os_log_type_t v514 = v1065[0];
    BOOL v543 = os_log_type_enabled(v513, (os_log_type_t)v1065[0]);
    if (!v542)
    {
      if (!v543) {
        goto LABEL_1328;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
      id v515 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_1327;
    }

    if (!v543) {
      goto LABEL_1322;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v542;
    v544 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_1321:
    _os_log_impl(&dword_181A5C000, v513, v514, v544, buf, 0x16u);
    goto LABEL_1322;
  }

  if (v7 != 2)
  {
    if (v7 != 3) {
      goto LABEL_1313;
    }
    uint64_t v12 = *((void *)handle + 2);
    if (v12)
    {
      uint64_t v13 = (uint64_t *)(v12 + 488);
      goto LABEL_17;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
    v560 = (char *)_os_log_send_and_compose_impl();
    v1065[0] = 16;
    aBlock[0] = 0;
    if (__nwlog_fault(v560, v1065, aBlock))
    {
      if (v1065[0] == 17)
      {
        BOOL v561 = (os_log_s *)__nwlog_obj();
        os_log_type_t v562 = v1065[0];
        if (!os_log_type_enabled(v561, (os_log_type_t)v1065[0])) {
          goto LABEL_1311;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
        uint64_t v563 = "%{public}s called with null handle->http1_connection";
        goto LABEL_1310;
      }

      if (!aBlock[0])
      {
        BOOL v561 = (os_log_s *)__nwlog_obj();
        os_log_type_t v562 = v1065[0];
        if (!os_log_type_enabled(v561, (os_log_type_t)v1065[0])) {
          goto LABEL_1311;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
        uint64_t v563 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_1310;
      }

      v726 = (char *)__nw_create_backtrace_string();
      BOOL v561 = (os_log_s *)__nwlog_obj();
      os_log_type_t v562 = v1065[0];
      BOOL v727 = os_log_type_enabled(v561, (os_log_type_t)v1065[0]);
      if (v726)
      {
        if (v727)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v726;
          _os_log_impl( &dword_181A5C000,  v561,  v562,  "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v726);
        goto LABEL_1311;
      }

      if (v727)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
        uint64_t v563 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_1310:
        _os_log_impl(&dword_181A5C000, v561, v562, v563, buf, 0xCu);
      }
    }

LABEL_1311:
    if (v560) {
      free(v560);
    }
    goto LABEL_1313;
  }

  uint64_t v13 = (uint64_t *)(handle + 8);
LABEL_17:
  uint64_t v14 = *v13;
  if (*v13)
  {
    BOOL v15 = &qword_18C45F000;
    if ((*(_BYTE *)(v14 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        int v526 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v526, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v527 = *(void *)(v14 + 256);
          int v528 = *(_DWORD *)(*(void *)(v14 + 248) + 372LL);
          if (v527) {
            LODWORD(v527) = *(_DWORD *)(v527 + 860);
          }
          int v529 = *(_DWORD *)(v14 + 424);
          *(_DWORD *)buf = 136448514;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v14 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v1051 = (uint64_t)" ";
          *(_WORD *)v1052 = 1024;
          *(_DWORD *)&v1052[2] = v528;
          *(_WORD *)&v1052[6] = 1024;
          *(_DWORD *)&v1052[8] = v527;
          *(_WORD *)&v1052[12] = 1024;
          *(_DWORD *)&v1052[14] = v529;
          *(_WORD *)&v1052[18] = 2048;
          *(void *)&v1052[20] = a2;
          *(_WORD *)&v1052[28] = 1024;
          *(_DWORD *)&v1052[30] = v529;
          *(_WORD *)&v1052[34] = 2048;
          *(void *)&v1052[36] = v14;
          __int16 v1053 = 1024;
          int v1054 = a3;
          _os_log_impl( &dword_181A5C000,  v526,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called with input_protocol %p, stream %u (%p), destroy: %u",  buf,  0x52u);
        }
      }
    }

    nw_http_transaction_metadata_mark_end(*(void **)(v14 + 352));
    if (a2->output_handler == a1) {
      nw_protocol_set_output_handler((uint64_t)a2, 0LL);
    }
    a2->output_handler_context = 0LL;
    nw_protocol_set_input_handler(v14, 0LL);
    uint64_t v16 = *(void *)(v14 + 256);
    uint64_t v1042 = v11;
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 488);
      if (!v17 || (*(_WORD *)(v17 + 428) & 0x2000) != 0)
      {
        if ((*(_WORD *)(v16 + 872) & 4) == 0)
        {
          int v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath) {
            goto LABEL_84;
          }
          int v23 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v24 = *(void *)(v16 + 488);
            int v25 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
            int v26 = *(_DWORD *)(v16 + 860);
            if (v24) {
              LODWORD(v24) = *(_DWORD *)(v24 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v1051 = (uint64_t)" ";
            *(_WORD *)v1052 = 1024;
            *(_DWORD *)&v1052[2] = v25;
            *(_WORD *)&v1052[6] = 1024;
            *(_DWORD *)&v1052[8] = v26;
            *(_WORD *)&v1052[12] = 1024;
            *(_DWORD *)&v1052[14] = v24;
            int v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the message is not complete";
            goto LABEL_1288;
          }

          goto LABEL_1537;
        }

        if ((*(_WORD *)(v16 + 872) & 0x20) == 0)
        {
          int v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath) {
            goto LABEL_84;
          }
          int v23 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v32 = *(void *)(v16 + 488);
            int v33 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
            int v34 = *(_DWORD *)(v16 + 860);
            if (v32) {
              LODWORD(v32) = *(_DWORD *)(v32 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v1051 = (uint64_t)" ";
            *(_WORD *)v1052 = 1024;
            *(_DWORD *)&v1052[2] = v33;
            *(_WORD *)&v1052[6] = 1024;
            *(_DWORD *)&v1052[8] = v34;
            *(_WORD *)&v1052[12] = 1024;
            *(_DWORD *)&v1052[14] = v32;
            int v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the outbound message is not complete";
            goto LABEL_1288;
          }

          goto LABEL_1537;
        }

        if ((*(_WORD *)(v16 + 872) & 8) == 0)
        {
          int v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath) {
            goto LABEL_84;
          }
          int v23 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v39 = *(void *)(v16 + 488);
            int v40 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
            int v41 = *(_DWORD *)(v16 + 860);
            if (v39) {
              LODWORD(v39) = *(_DWORD *)(v39 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v1051 = (uint64_t)" ";
            *(_WORD *)v1052 = 1024;
            *(_DWORD *)&v1052[2] = v40;
            *(_WORD *)&v1052[6] = 1024;
            *(_DWORD *)&v1052[8] = v41;
            *(_WORD *)&v1052[12] = 1024;
            *(_DWORD *)&v1052[14] = v39;
            int v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because keep alive is false";
            goto LABEL_1288;
          }

          goto LABEL_1537;
        }
      }

      else if ((*(_BYTE *)(v16 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          int v18 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v19 = *(void *)(v16 + 488);
            int v20 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
            int v21 = *(_DWORD *)(v16 + 860);
            if (v19) {
              LODWORD(v19) = *(_DWORD *)(v19 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v1051 = (uint64_t)" ";
            *(_WORD *)v1052 = 1024;
            *(_DWORD *)&v1052[2] = v20;
            *(_WORD *)&v1052[6] = 1024;
            *(_DWORD *)&v1052[8] = v21;
            *(_WORD *)&v1052[12] = 1024;
            *(_DWORD *)&v1052[14] = v19;
            _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection may be reusable because the current stream didn't use it",  buf,  0x32u);
          }
        }
      }

      if ((*(_BYTE *)(*(void *)(v16 + 480) + 376LL) & 8) != 0)
      {
        int v22 = 0;
        if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath) {
          goto LABEL_84;
        }
        int v23 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v46 = *(void *)(v16 + 488);
          int v47 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
          int v48 = *(_DWORD *)(v16 + 860);
          if (v46) {
            LODWORD(v46) = *(_DWORD *)(v46 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v16 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v1051 = (uint64_t)" ";
          *(_WORD *)v1052 = 1024;
          *(_DWORD *)&v1052[2] = v47;
          *(_WORD *)&v1052[6] = 1024;
          *(_DWORD *)&v1052[8] = v48;
          *(_WORD *)&v1052[12] = 1024;
          *(_DWORD *)&v1052[14] = v46;
          int v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because pool is closed for new connections";
          goto LABEL_1288;
        }
      }

      else
      {
        __int16 v42 = *(_WORD *)(v16 + 872);
        if ((v42 & 0x200) != 0)
        {
          int v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath) {
            goto LABEL_84;
          }
          int v23 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v794 = *(void *)(v16 + 488);
            int v795 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
            int v796 = *(_DWORD *)(v16 + 860);
            if (v794) {
              LODWORD(v794) = *(_DWORD *)(v794 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v1051 = (uint64_t)" ";
            *(_WORD *)v1052 = 1024;
            *(_DWORD *)&v1052[2] = v795;
            *(_WORD *)&v1052[6] = 1024;
            *(_DWORD *)&v1052[8] = v796;
            *(_WORD *)&v1052[12] = 1024;
            *(_DWORD *)&v1052[14] = v794;
            int v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was upgraded";
            goto LABEL_1288;
          }
        }

        else
        {
          if ((v42 & 0x40) == 0)
          {
            int v22 = 0;
            if ((*(_BYTE *)(v16 + 158) & 1) == 0 && gLogDatapath)
            {
              int v23 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v43 = *(void *)(v16 + 488);
                int v44 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                int v45 = *(_DWORD *)(v16 + 860);
                if (v43) {
                  LODWORD(v43) = *(_DWORD *)(v43 + 424);
                }
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v1051 = (uint64_t)" ";
                *(_WORD *)v1052 = 1024;
                *(_DWORD *)&v1052[2] = v44;
                *(_WORD *)&v1052[6] = 1024;
                *(_DWORD *)&v1052[8] = v45;
                *(_WORD *)&v1052[12] = 1024;
                *(_DWORD *)&v1052[14] = v43;
                int v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was never connected";
LABEL_1288:
                _os_log_impl(&dword_181A5C000, v23, OS_LOG_TYPE_DEBUG, v27, buf, 0x32u);
                int v22 = 0;
                goto LABEL_84;
              }

              goto LABEL_1537;
            }

LABEL_1335:
                      if (v566) {
                        free(v566);
                      }
                      uint64_t v11 = v1042;
                      BOOL v15 = &qword_18C45F000;
                      uint64_t v81 = v565;
                      if (!gLogDatapath)
                      {
LABEL_293:
                        *(void *)buf = v81;
                        *(void *)&buf[8] = 0x40000000LL;
                        *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39794;
                        uint64_t v1051 = (uint64_t)&__block_descriptor_tmp_57_39795;
                        v1052[0] = 0;
                        uint64_t v182 = *(void *)(v16 + 664);
                        do
                        {
                          if (!v182) {
                            break;
                          }
                          uint64_t v183 = *(void *)(v182 + 16);
                          char v184 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                          uint64_t v182 = v183;
                        }

                        while ((v184 & 1) != 0);
                        if (!*(void *)(v16 + 664))
                        {
LABEL_297:
                          nw_frame_cache_destroy((uint64_t *)(v16 + 696));
                          uint64_t v185 = *(void **)(v16 + 528);
                          if (v185)
                          {
                            unsigned int v186 = *(void **)(v16 + 544);
                            if (v186) {
                              nw_association_unregister(v185, v186);
                            }
                          }

                          os_log_type_t v187 = *(void **)(v16 + 800);
                          if (v187)
                          {
                            free(v187);
                            *(void *)(v16 + 800) = 0LL;
                          }

                          *(_DWORD *)(v16 + 840) = 0;
                          BOOL v188 = *(void **)(v16 + 808);
                          if (v188)
                          {
                            free(v188);
                            *(void *)(v16 + 80_Block_object_dispose(&STACK[0x338], 8) = 0LL;
                          }

                          *(_DWORD *)(v16 + 844) = 0;
                          uint64_t v189 = *(void **)(v16 + 816);
                          if (v189)
                          {
                            free(v189);
                            *(void *)(v16 + 816) = 0LL;
                          }

                          *(_DWORD *)(v16 + 84_Block_object_dispose(&STACK[0x338], 8) = 0;
                          uint64_t v190 = *(void **)(v16 + 824);
                          if (v190)
                          {
                            free(v190);
                            *(void *)(v16 + 824) = 0LL;
                          }

                          *(_DWORD *)(v16 + 852) = 0;
                          uint64_t v191 = *(void **)(v16 + 832);
                          if (v191)
                          {
                            free(v191);
                            *(void *)(v16 + 832) = 0LL;
                          }

                          *(_DWORD *)(v16 + 856) = 0;
                          (*(void (**)(void, void))(*(void *)(v16 + 608) + 16LL))( *(void *)(v16 + 608),  0LL);
                          int v192 = *(const void **)(v16 + 608);
                          if (v192)
                          {
                            _Block_release(v192);
                            *(void *)(v16 + 60_Block_object_dispose(&STACK[0x338], 8) = 0LL;
                          }

                          nw_http1_connection::~nw_http1_connection((nw_http1_connection *)v16);
                          free(v193);
                          if (!*(_DWORD *)(v11 + 336) && !*(_DWORD *)(v11 + 344)) {
                            nw_protocol_http1_destroy(v11, v11);
                          }
                          goto LABEL_327;
                        }

                        __nwlog_obj();
                        *(_DWORD *)uint64_t aBlock = 136446210;
                        *(void *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                        BOOL v570 = (char *)_os_log_send_and_compose_impl();
                        type[0] = 16;
                        LOBYTE(v1045[0]) = 0;
                        if (__nwlog_fault(v570, type, v1045))
                        {
                          if (type[0] == 17)
                          {
                            os_log_type_t v571 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v572 = type[0];
                            if (os_log_type_enabled(v571, (os_log_type_t)type[0]))
                            {
                              *(_DWORD *)uint64_t aBlock = 136446210;
                              *(void *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                              uint64_t v573 = "%{public}s frame array is not empty after finalize";
LABEL_1365:
                              _os_log_impl(&dword_181A5C000, v571, v572, v573, aBlock, 0xCu);
                            }
                          }

                          else if (LOBYTE(v1045[0]))
                          {
                            uint64_t v745 = (char *)__nw_create_backtrace_string();
                            os_log_type_t v571 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v572 = type[0];
                            BOOL v746 = os_log_type_enabled(v571, (os_log_type_t)type[0]);
                            if (v745)
                            {
                              if (v746)
                              {
                                *(_DWORD *)uint64_t aBlock = 136446466;
                                *(void *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                                *(_WORD *)&aBlock[12] = 2082;
                                *(void *)&aBlock[14] = v745;
                                _os_log_impl( &dword_181A5C000,  v571,  v572,  "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s",  aBlock,  0x16u);
                              }

                              free(v745);
                              goto LABEL_1366;
                            }

                            if (v746)
                            {
                              *(_DWORD *)uint64_t aBlock = 136446210;
                              *(void *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                              uint64_t v573 = "%{public}s frame array is not empty after finalize, no backtrace";
                              goto LABEL_1365;
                            }
                          }

                          else
                          {
                            os_log_type_t v571 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v572 = type[0];
                            if (os_log_type_enabled(v571, (os_log_type_t)type[0]))
                            {
                              *(_DWORD *)uint64_t aBlock = 136446210;
                              *(void *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                              uint64_t v573 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
                              goto LABEL_1365;
                            }
                          }
                        }

LABEL_1366:
                        if (v570) {
                          free(v570);
                        }
                        uint64_t v11 = v1042;
                        BOOL v15 = &qword_18C45F000;
                        goto LABEL_297;
                      }

LABEL_1338:
                      v800 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v800, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_master_frame_array";
                        _os_log_impl(&dword_181A5C000, v800, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                      }

                      goto LABEL_293;
                    }

                    uint64_t v171 = v81;
                    if (*(void *)(v170 + 248))
                    {
                      if ((*(_BYTE *)(v170 + 158) & 1) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        char v172 = (os_log_s *)gLogObj;
                        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                        {
                          uint64_t v173 = *(void *)(v170 + 256);
                          int v174 = *(_DWORD *)(*(void *)(v170 + 248) + 372LL);
                          if (v173) {
                            LODWORD(v173) = *(_DWORD *)(v173 + 860);
                          }
                          int v175 = *(_DWORD *)(v170 + 424);
                          *(_DWORD *)buf = 136448002;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v170 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v1051 = (uint64_t)" ";
                          *(_WORD *)v1052 = 1024;
                          *(_DWORD *)&v1052[2] = v174;
                          *(_WORD *)&v1052[6] = 1024;
                          *(_DWORD *)&v1052[8] = v173;
                          *(_WORD *)&v1052[12] = 1024;
                          *(_DWORD *)&v1052[14] = v175;
                          *(_WORD *)&v1052[18] = 2048;
                          *(void *)&v1052[20] = v170;
                          *(_WORD *)&v1052[28] = 2048;
                          *(void *)&v1052[30] = v16;
                          _os_log_impl( &dword_181A5C000,  v172,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p",  buf,  0x46u);
                        }
                      }

                      if (*((_BYTE *)v15 + 1537))
                      {
                        int v790 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v790, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                          _os_log_impl(&dword_181A5C000, v790, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                        }
                      }

                      uint64_t v81 = v171;
                      *(void *)buf = v171;
                      *(void *)&buf[8] = 0x40000000LL;
                      *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
                      uint64_t v1051 = (uint64_t)&__block_descriptor_tmp_55_39717;
                      *(void *)v1052 = v85;
                      v1052[8] = 0;
                      uint64_t v176 = *v85;
                      do
                      {
                        if (!v176) {
                          break;
                        }
                        uint64_t v177 = *(void *)(v176 + 32);
                        char v178 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                        uint64_t v176 = v177;
                      }

                      while ((v178 & 1) != 0);
                      *(void *)(v170 + 256) = 0LL;
                      *(void *)(v16 + 48_Block_object_dispose(&STACK[0x338], 8) = 0LL;
                      nw_protocol_set_output_handler(v170, 0LL);
                      nw_protocol_set_input_handler(v16, 0LL);
                      goto LABEL_286;
                    }

                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                    BOOL v786 = (char *)_os_log_send_and_compose_impl();
                    aBlock[0] = 16;
                    type[0] = 0;
                    if (__nwlog_fault(v786, aBlock, type))
                    {
                      if (aBlock[0] == 17)
                      {
                        v787 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v788 = aBlock[0];
                        if (os_log_type_enabled(v787, (os_log_type_t)aBlock[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                          int v789 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_1460:
                          _os_log_impl(&dword_181A5C000, v787, v788, v789, buf, 0xCu);
                        }
                      }

                      else if (type[0])
                      {
                        v818 = (char *)__nw_create_backtrace_string();
                        v787 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v788 = aBlock[0];
                        BOOL v819 = os_log_type_enabled(v787, (os_log_type_t)aBlock[0]);
                        if (v818)
                        {
                          if (v819)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v818;
                            _os_log_impl( &dword_181A5C000,  v787,  v788,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v818);
                          goto LABEL_1461;
                        }

                        if (v819)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                          int v789 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                          goto LABEL_1460;
                        }
                      }

                      else
                      {
                        v787 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v788 = aBlock[0];
                        if (os_log_type_enabled(v787, (os_log_type_t)aBlock[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                          int v789 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                          goto LABEL_1460;
                        }
                      }
                    }

LABEL_1461:
                    if (v786) {
                      free(v786);
                    }
                    uint64_t v11 = v1042;
                    BOOL v15 = &qword_18C45F000;
                    uint64_t v81 = v171;
                    goto LABEL_286;
                  }

                  int v123 = *(_DWORD *)(v11 + 368);
                  *(_DWORD *)(v11 + 36_Block_object_dispose(&STACK[0x338], 8) = v123 - 1;
                  if (v123)
                  {
LABEL_263:
                    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                    {
                      if (*((_BYTE *)v15 + 1537))
                      {
                        uint64_t v739 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v739, OS_LOG_TYPE_DEBUG))
                        {
                          int v740 = *(_DWORD *)(v11 + 372);
                          int v741 = *(_DWORD *)(v11 + 368) + *(_DWORD *)(v11 + 364);
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v11 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v1051 = (uint64_t)" ";
                          *(_WORD *)v1052 = 1024;
                          *(_DWORD *)&v1052[2] = v740;
                          *(_WORD *)&v1052[6] = 1024;
                          *(_DWORD *)&v1052[8] = v741;
                          *(_WORD *)&v1052[12] = 2048;
                          *(void *)&v1052[14] = v16;
                          _os_log_impl( &dword_181A5C000,  v739,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> decreased connection pool width to %u after removing non-reusab le connection %p",  buf,  0x36u);
                        }
                      }
                    }

                    goto LABEL_265;
                  }

                  v1037 = v85;
                  uint64_t v124 = v81;
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v125 = *(unsigned int *)(v11 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v1051 = 1LL;
                  *(_WORD *)v1052 = 2048;
                  *(void *)&v1052[2] = v125;
                  int v126 = (char *)_os_log_send_and_compose_impl();
                  aBlock[0] = 16;
                  type[0] = 0;
                  if (__nwlog_fault(v126, aBlock, type))
                  {
                    if (aBlock[0] == 17)
                    {
                      int v127 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v128 = aBlock[0];
                      if (os_log_type_enabled(v127, (os_log_type_t)aBlock[0]))
                      {
                        uint64_t v129 = *(unsigned int *)(v1042 + 368);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->nonresuable_connections";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v1051 = 1LL;
                        *(_WORD *)v1052 = 2048;
                        *(void *)&v1052[2] = v129;
                        int v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_259:
                        _os_log_impl(&dword_181A5C000, v127, v128, v130, buf, 0x2Au);
                      }
                    }

                    else if (type[0])
                    {
                      int v131 = (char *)__nw_create_backtrace_string();
                      int v127 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v128 = aBlock[0];
                      BOOL v132 = os_log_type_enabled(v127, (os_log_type_t)aBlock[0]);
                      if (v131)
                      {
                        if (v132)
                        {
                          uint64_t v133 = *(unsigned int *)(v1042 + 368);
                          *(_DWORD *)buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->nonresuable_connections";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v133;
                          *(_WORD *)&v1052[10] = 2082;
                          *(void *)&v1052[12] = v131;
                          _os_log_impl( &dword_181A5C000,  v127,  v128,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                        }

                        free(v131);
                        goto LABEL_260;
                      }

                      if (v132)
                      {
                        uint64_t v165 = *(unsigned int *)(v1042 + 368);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->nonresuable_connections";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v1051 = 1LL;
                        *(_WORD *)v1052 = 2048;
                        *(void *)&v1052[2] = v165;
                        int v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                        goto LABEL_259;
                      }
                    }

                    else
                    {
                      int v127 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v128 = aBlock[0];
                      if (os_log_type_enabled(v127, (os_log_type_t)aBlock[0]))
                      {
                        uint64_t v141 = *(unsigned int *)(v1042 + 368);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->nonresuable_connections";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v1051 = 1LL;
                        *(_WORD *)v1052 = 2048;
                        *(void *)&v1052[2] = v141;
                        int v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_259;
                      }
                    }
                  }

LABEL_1280:
            if (!v556) {
              goto LABEL_114;
            }
            goto LABEL_1281;
          }

          if ((*(_WORD *)(v16 + 872) & 0x100) == 0)
          {
            if (*(_DWORD *)(v16 + 864) == 4)
            {
              if (*(_BYTE *)(v16 + 158) & 1 | (gLogDatapath == 0))
              {
                int v22 = 0;
                goto LABEL_84;
              }

              int v23 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v929 = *(void *)(v16 + 488);
                int v930 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                int v931 = *(_DWORD *)(v16 + 860);
                if (v929) {
                  LODWORD(v929) = *(_DWORD *)(v929 + 424);
                }
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v1051 = (uint64_t)" ";
                *(_WORD *)v1052 = 1024;
                *(_DWORD *)&v1052[2] = v930;
                *(_WORD *)&v1052[6] = 1024;
                *(_DWORD *)&v1052[8] = v931;
                *(_WORD *)&v1052[12] = 1024;
                *(_DWORD *)&v1052[14] = v929;
                int v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because input has finished from below";
                goto LABEL_1288;
              }

              goto LABEL_1537;
            }

            if (*(_BYTE *)(v16 + 158) & 1 | (gLogDatapath == 0))
            {
              int v22 = 1;
            }

            else
            {
              BOOL v932 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v932, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v933 = *(void *)(v16 + 488);
                int v934 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                int v935 = *(_DWORD *)(v16 + 860);
                if (v933) {
                  LODWORD(v933) = *(_DWORD *)(v933 + 424);
                }
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v1051 = (uint64_t)" ";
                *(_WORD *)v1052 = 1024;
                *(_DWORD *)&v1052[2] = v934;
                *(_WORD *)&v1052[6] = 1024;
                *(_DWORD *)&v1052[8] = v935;
                *(_WORD *)&v1052[12] = 1024;
                *(_DWORD *)&v1052[14] = v933;
                _os_log_impl( &dword_181A5C000,  v932,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection can be reused",  buf,  0x32u);
                int v22 = 1;
              }

              else
              {
                int v22 = 1;
              }
            }

            goto LABEL_84;
          }

          int v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath) {
            goto LABEL_84;
          }
          int v23 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v118 = *(void *)(v16 + 488);
            int v119 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
            int v120 = *(_DWORD *)(v16 + 860);
            if (v118) {
              LODWORD(v11_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v118 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v1051 = (uint64_t)" ";
            *(_WORD *)v1052 = 1024;
            *(_DWORD *)&v1052[2] = v119;
            *(_WORD *)&v1052[6] = 1024;
            *(_DWORD *)&v1052[8] = v120;
            *(_WORD *)&v1052[12] = 1024;
            *(_DWORD *)&v1052[14] = v118;
            int v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it has been closed";
            goto LABEL_1288;
          }
        }
      }

LABEL_1537:
      int v22 = 0;
      goto LABEL_84;
    }

    if (*(void *)(v14 + 32))
    {
      if ((*(_BYTE *)(v14 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v28 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *(void *)(v14 + 256);
          int v30 = *(_DWORD *)(*(void *)(v14 + 248) + 372LL);
          if (v29) {
            LODWORD(v29) = *(_DWORD *)(v29 + 860);
          }
          int v31 = *(_DWORD *)(v14 + 424);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v14 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v1051 = (uint64_t)" ";
          *(_WORD *)v1052 = 1024;
          *(_DWORD *)&v1052[2] = v30;
          *(_WORD *)&v1052[6] = 1024;
          *(_DWORD *)&v1052[8] = v29;
          *(_WORD *)&v1052[12] = 1024;
          *(_DWORD *)&v1052[14] = v31;
          _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> removing the initial stream without connecting",  buf,  0x32u);
        }
      }

      nw_protocol_remove_input_handler(*(void *)(v14 + 32), v14);
      goto LABEL_327;
    }

    if ((*(_WORD *)(v14 + 428) & 0x1000) == 0)
    {
LABEL_327:
      int v115 = 0;
      goto LABEL_328;
    }

    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v791 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v791, OS_LOG_TYPE_DEBUG))
        {
          int v792 = *(_DWORD *)(v11 + 372);
          int v793 = *(_DWORD *)(v14 + 424);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v1051 = (uint64_t)" ";
          *(_WORD *)v1052 = 1024;
          *(_DWORD *)&v1052[2] = v792;
          *(_WORD *)&v1052[6] = 1024;
          *(_DWORD *)&v1052[8] = v793;
          *(_WORD *)&v1052[12] = 2048;
          *(void *)&v1052[14] = v14;
          _os_log_impl( &dword_181A5C000,  v791,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
        }
      }
    }

    if ((*(_WORD *)(v14 + 428) & 0x1000) == 0)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v14;
      int v35 = (char *)_os_log_send_and_compose_impl();
      v1065[0] = 16;
      aBlock[0] = 0;
      if (v1065[0] == 17)
      {
        int v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = v1065[0];
        if (!os_log_type_enabled(v36, (os_log_type_t)v1065[0])) {
          goto LABEL_325;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v14;
        uint64_t v38 = "%{public}s stream %p not in pending list, cannot remove";
      }

      else if (aBlock[0])
      {
        int v116 = (char *)__nw_create_backtrace_string();
        int v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = v1065[0];
        BOOL v117 = os_log_type_enabled(v36, (os_log_type_t)v1065[0]);
        if (v116)
        {
          if (v117)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v14;
            *(_WORD *)&buf[22] = 2082;
            uint64_t v1051 = (uint64_t)v116;
            _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v116);
          uint64_t v11 = v1042;
          goto LABEL_325;
        }

        uint64_t v11 = v1042;
        if (!v117)
        {
LABEL_325:
          if (v35) {
            free(v35);
          }
          goto LABEL_327;
        }

        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v14;
        uint64_t v38 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }

      else
      {
        int v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = v1065[0];
        if (!os_log_type_enabled(v36, (os_log_type_t)v1065[0])) {
          goto LABEL_325;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v14;
        uint64_t v38 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v36, v37, v38, buf, 0x16u);
      goto LABEL_325;
    }

    uint64_t v112 = *(void *)(v14 + 296);
    int v113 = *(void **)(v14 + 304);
    if (v112)
    {
      *(void *)(v112 + 304) = v113;
      int v113 = *(void **)(v14 + 304);
    }

    else
    {
      *(void *)(v11 + 256) = v113;
    }

    void *v113 = v112;
    *(void *)(v14 + 296) = 0LL;
    *(void *)(v14 + 304) = 0LL;
    int v134 = *(_DWORD *)(v11 + 348);
    *(_DWORD *)(v11 + 34_Block_object_dispose(&STACK[0x338], 8) = v134 - 1;
    if (v134)
    {
LABEL_737:
      int v115 = 0;
      *(_WORD *)(v14 + 428) &= ~0x1000u;
      if ((*(_BYTE *)(v14 + 158) & 1) == 0 && gLogDatapath)
      {
        v435 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v435, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v436 = *(void *)(v14 + 256);
          int v437 = *(_DWORD *)(*(void *)(v14 + 248) + 372LL);
          if (v436) {
            LODWORD(v436) = *(_DWORD *)(v436 + 860);
          }
          int v438 = *(_DWORD *)(v14 + 424);
          uint64_t v11 = v1042;
          int v439 = *(_DWORD *)(v1042 + 348);
          *(_DWORD *)buf = 136448258;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v14 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v1051 = (uint64_t)" ";
          *(_WORD *)v1052 = 1024;
          *(_DWORD *)&v1052[2] = v437;
          *(_WORD *)&v1052[6] = 1024;
          *(_DWORD *)&v1052[8] = v436;
          *(_WORD *)&v1052[12] = 1024;
          *(_DWORD *)&v1052[14] = v438;
          *(_WORD *)&v1052[18] = 1024;
          *(_DWORD *)&v1052[20] = v438;
          *(_WORD *)&v1052[24] = 2048;
          *(void *)&v1052[26] = v14;
          *(_WORD *)&v1052[34] = 1024;
          *(_DWORD *)&v1052[36] = v439;
          _os_log_impl( &dword_181A5C000,  v435,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams",  buf,  0x48u);
          goto LABEL_327;
        }

        int v115 = 0;
        uint64_t v11 = v1042;
      }

LABEL_343:
      if (v197) {
        free(v197);
      }
LABEL_345:
      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
      {
        if (*((_BYTE *)v15 + 1537))
        {
          uint64_t v530 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v530, OS_LOG_TYPE_DEBUG))
          {
            int v531 = *(_DWORD *)(v11 + 372);
            int v532 = *(_DWORD *)(v14 + 424);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v1051 = (uint64_t)" ";
            *(_WORD *)v1052 = 1024;
            *(_DWORD *)&v1052[2] = v531;
            *(_WORD *)&v1052[6] = 1024;
            *(_DWORD *)&v1052[8] = v532;
            *(_WORD *)&v1052[12] = 2048;
            *(void *)&v1052[14] = v14;
            _os_log_impl( &dword_181A5C000,  v530,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
          }
        }
      }

      uint64_t v203 = *(void *)(v14 + 280);
      __int128 v204 = *(void **)(v14 + 288);
      if (v203)
      {
        *(void *)(v203 + 28_Block_object_dispose(&STACK[0x338], 8) = v204;
        __int128 v204 = *(void **)(v14 + 288);
      }

      else
      {
        *(void *)(v11 + 240) = v204;
      }

      void *v204 = v203;
      *(void *)(v14 + 280) = 0LL;
      *(void *)(v14 + 28_Block_object_dispose(&STACK[0x338], 8) = 0LL;
      int v205 = *(_DWORD *)(v11 + 344);
      *(_DWORD *)(v11 + 344) = v205 - 1;
      if (v205)
      {
        if ((*(_WORD *)(v14 + 428) & 8) == 0) {
          goto LABEL_388;
        }
        goto LABEL_370;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v206 = *(unsigned int *)(v11 + 344);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "http1->streams_count";
      *(_WORD *)&buf[22] = 2048;
      uint64_t v1051 = 1LL;
      *(_WORD *)v1052 = 2048;
      *(void *)&v1052[2] = v206;
      int v207 = (char *)_os_log_send_and_compose_impl();
      v1065[0] = 16;
      aBlock[0] = 0;
      if (__nwlog_fault(v207, v1065, aBlock))
      {
        if (v1065[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v208 = (os_log_s *)gLogObj;
          os_log_type_t v209 = v1065[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0])) {
            goto LABEL_367;
          }
          uint64_t v210 = *(unsigned int *)(v11 + 344);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->streams_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v1051 = 1LL;
          *(_WORD *)v1052 = 2048;
          *(void *)&v1052[2] = v210;
          int v211 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_366:
          _os_log_impl(&dword_181A5C000, v208, v209, v211, buf, 0x2Au);
          goto LABEL_367;
        }

        if (!aBlock[0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v208 = (os_log_s *)gLogObj;
          os_log_type_t v209 = v1065[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0])) {
            goto LABEL_367;
          }
          uint64_t v215 = *(unsigned int *)(v11 + 344);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->streams_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v1051 = 1LL;
          *(_WORD *)v1052 = 2048;
          *(void *)&v1052[2] = v215;
          int v211 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_366;
        }

        int v212 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v208 = (os_log_s *)gLogObj;
        os_log_type_t v209 = v1065[0];
        BOOL v213 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0]);
        if (!v212)
        {
          uint64_t v11 = v1042;
          if (!v213) {
            goto LABEL_367;
          }
          uint64_t v216 = *(unsigned int *)(v1042 + 344);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->streams_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v1051 = 1LL;
          *(_WORD *)v1052 = 2048;
          *(void *)&v1052[2] = v216;
          int v211 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_366;
        }

        if (v213)
        {
          uint64_t v214 = *(unsigned int *)(v1042 + 344);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->streams_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v1051 = 1LL;
          *(_WORD *)v1052 = 2048;
          *(void *)&v1052[2] = v214;
          *(_WORD *)&v1052[10] = 2082;
          *(void *)&v1052[12] = v212;
          _os_log_impl( &dword_181A5C000,  v208,  v209,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(v212);
        uint64_t v11 = v1042;
      }

          if (v119) {
            free(v119);
          }
          int v47 = v118;
          if (!gLogDatapath)
          {
LABEL_150:
            *(void *)buf = v47;
            *(void *)&buf[8] = 0x40000000LL;
            *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39794;
            os_log_type_t v209 = (uint64_t)&__block_descriptor_tmp_57_39795;
            v210[0] = 0;
            int v96 = *(void *)(v46 + 664);
            do
            {
              if (!v96) {
                break;
              }
              os_log_type_t v97 = *(void *)(v96 + 16);
              uint64_t v98 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
              int v96 = v97;
            }

            while ((v98 & 1) != 0);
            if (!*(void *)(v46 + 664))
            {
LABEL_154:
              nw_frame_cache_destroy((uint64_t *)(v46 + 696));
              uint64_t v99 = *(void **)(v46 + 528);
              if (v99)
              {
                uint64_t v100 = *(void **)(v46 + 544);
                if (v100) {
                  nw_association_unregister(v99, v100);
                }
              }

              int v101 = *(void **)(v46 + 800);
              if (v101)
              {
                free(v101);
                *(void *)(v46 + 800) = 0LL;
              }

              *(_DWORD *)(v46 + 840) = 0;
              os_log_type_t v102 = *(void **)(v46 + 808);
              if (v102)
              {
                free(v102);
                *(void *)(v46 + 80_Block_object_dispose(&STACK[0x338], 8) = 0LL;
              }

              *(_DWORD *)(v46 + 844) = 0;
              BOOL v103 = *(void **)(v46 + 816);
              if (v103)
              {
                free(v103);
                *(void *)(v46 + 816) = 0LL;
              }

              *(_DWORD *)(v46 + 84_Block_object_dispose(&STACK[0x338], 8) = 0;
              BOOL v104 = *(void **)(v46 + 824);
              if (v104)
              {
                free(v104);
                *(void *)(v46 + 824) = 0LL;
              }

              *(_DWORD *)(v46 + 852) = 0;
              BOOL v105 = *(void **)(v46 + 832);
              if (v105)
              {
                free(v105);
                *(void *)(v46 + 832) = 0LL;
              }

              *(_DWORD *)(v46 + 856) = 0;
              (*(void (**)(void, void))(*(void *)(v46 + 608) + 16LL))(*(void *)(v46 + 608), 0LL);
              BOOL v106 = *(const void **)(v46 + 608);
              if (v106)
              {
                _Block_release(v106);
                *(void *)(v46 + 60_Block_object_dispose(&STACK[0x338], 8) = 0LL;
              }

              nw_http1_connection::~nw_http1_connection((nw_http1_connection *)v46);
              free(v107);
              if (!*(_DWORD *)(v45 + 336) && !*(_DWORD *)(v45 + 344)) {
                nw_protocol_http1_destroy(v45, v45);
              }
              return;
            }

            __nwlog_obj();
            BOOL v213 = 136446210;
            uint64_t v214 = "nw_protocol_finalize_master_frame_array";
            int v123 = (char *)_os_log_send_and_compose_impl();
            uint64_t v203 = OS_LOG_TYPE_ERROR;
            BOOL v202 = 0;
            if (__nwlog_fault(v123, &v203, &v202))
            {
              if (v203 == OS_LOG_TYPE_FAULT)
              {
                uint64_t v124 = (os_log_s *)__nwlog_obj();
                uint64_t v125 = v203;
                if (!os_log_type_enabled(v124, v203)) {
                  goto LABEL_351;
                }
                BOOL v213 = 136446210;
                uint64_t v214 = "nw_protocol_finalize_master_frame_array";
                int v126 = "%{public}s frame array is not empty after finalize";
                goto LABEL_350;
              }

              if (!v202)
              {
                uint64_t v124 = (os_log_s *)__nwlog_obj();
                uint64_t v125 = v203;
                if (!os_log_type_enabled(v124, v203)) {
                  goto LABEL_351;
                }
                BOOL v213 = 136446210;
                uint64_t v214 = "nw_protocol_finalize_master_frame_array";
                int v126 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
                goto LABEL_350;
              }

              char v181 = (char *)__nw_create_backtrace_string();
              uint64_t v124 = (os_log_s *)__nwlog_obj();
              uint64_t v125 = v203;
              uint64_t v182 = os_log_type_enabled(v124, v203);
              if (v181)
              {
                if (v182)
                {
                  BOOL v213 = 136446466;
                  uint64_t v214 = "nw_protocol_finalize_master_frame_array";
                  uint64_t v215 = 2082;
                  uint64_t v216 = v181;
                  _os_log_impl( &dword_181A5C000,  v124,  v125,  "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s",  (uint8_t *)&v213,  0x16u);
                }

                free(v181);
                goto LABEL_351;
              }

              if (v182)
              {
                BOOL v213 = 136446210;
                uint64_t v214 = "nw_protocol_finalize_master_frame_array";
                int v126 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_350:
                _os_log_impl(&dword_181A5C000, v124, v125, v126, (uint8_t *)&v213, 0xCu);
              }
            }

LABEL_644:
                  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      int v765 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v765, OS_LOG_TYPE_DEBUG))
                      {
                        int v766 = *(_DWORD *)(v11 + 372);
                        int v767 = *(_DWORD *)(v243 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v1033;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v1051 = (uint64_t)" ";
                        *(_WORD *)v1052 = 1024;
                        *(_DWORD *)&v1052[2] = v766;
                        *(_WORD *)&v1052[6] = 1024;
                        *(_DWORD *)&v1052[8] = v767;
                        *(_WORD *)&v1052[12] = 2048;
                        *(void *)&v1052[14] = v243;
                        _os_log_impl( &dword_181A5C000,  v765,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
                      }
                    }
                  }

                  if ((*(_WORD *)(v243 + 428) & 0x1000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v243;
                    __int128 v386 = (char *)_os_log_send_and_compose_impl();
                    v1065[0] = 16;
                    aBlock[0] = 0;
                    if (v1065[0] == 17)
                    {
                      __int128 v387 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v388 = v1065[0];
                      if (!os_log_type_enabled(v387, (os_log_type_t)v1065[0])) {
                        goto LABEL_674;
                      }
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v243;
                      uint64_t v389 = "%{public}s stream %p not in pending list, cannot remove";
                    }

                    else if (aBlock[0])
                    {
                      v392 = (char *)__nw_create_backtrace_string();
                      __int128 v387 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v388 = v1065[0];
                      BOOL v393 = os_log_type_enabled(v387, (os_log_type_t)v1065[0]);
                      if (v392)
                      {
                        if (v393)
                        {
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v1041;
                          *(_WORD *)&buf[22] = 2082;
                          uint64_t v1051 = (uint64_t)v392;
                          _os_log_impl( &dword_181A5C000,  v387,  v388,  "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
                        }

                        free(v392);
                        uint64_t v243 = v1041;
                        goto LABEL_674;
                      }

                      uint64_t v243 = v1041;
                      if (!v393)
                      {
LABEL_674:
                        if (v386) {
                          free(v386);
                        }
                        goto LABEL_686;
                      }

                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v1041;
                      uint64_t v389 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
                    }

                    else
                    {
                      __int128 v387 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v388 = v1065[0];
                      if (!os_log_type_enabled(v387, (os_log_type_t)v1065[0])) {
                        goto LABEL_674;
                      }
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v243;
                      uint64_t v389 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
                    }

                    _os_log_impl(&dword_181A5C000, v387, v388, v389, buf, 0x16u);
                    goto LABEL_674;
                  }

                  uint64_t v390 = *(void *)(v243 + 296);
                  int v391 = *(void **)(v243 + 304);
                  if (v390)
                  {
                    *(void *)(v390 + 304) = v391;
                    int v391 = *(void **)(v243 + 304);
                  }

                  else
                  {
                    *(void *)(v11 + 256) = v391;
                  }

                  *int v391 = v390;
                  *(void *)(v243 + 296) = 0LL;
                  *(void *)(v243 + 304) = 0LL;
                  int v394 = *(_DWORD *)(v11 + 348);
                  *(_DWORD *)(v11 + 34_Block_object_dispose(&STACK[0x338], 8) = v394 - 1;
                  if (v394)
                  {
LABEL_684:
                    *(_WORD *)(v243 + 428) &= ~0x1000u;
                    if ((*(_BYTE *)(v243 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v806 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v806, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v807 = v243 + 74;
                          uint64_t v808 = *(void *)(v243 + 256);
                          int v809 = *(_DWORD *)(*(void *)(v243 + 248) + 372LL);
                          if (v808) {
                            LODWORD(v80_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v808 + 860);
                          }
                          uint64_t v243 = v1041;
                          int v810 = *(_DWORD *)(v1041 + 424);
                          uint64_t v11 = v1042;
                          int v811 = *(_DWORD *)(v1042 + 348);
                          *(_DWORD *)buf = 136448258;
                          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v807;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v1051 = (uint64_t)" ";
                          *(_WORD *)v1052 = 1024;
                          *(_DWORD *)&v1052[2] = v809;
                          *(_WORD *)&v1052[6] = 1024;
                          *(_DWORD *)&v1052[8] = v808;
                          *(_WORD *)&v1052[12] = 1024;
                          *(_DWORD *)&v1052[14] = v810;
                          *(_WORD *)&v1052[18] = 1024;
                          *(_DWORD *)&v1052[20] = v810;
                          *(_WORD *)&v1052[24] = 2048;
                          *(void *)&v1052[26] = v1041;
                          *(_WORD *)&v1052[34] = 1024;
                          *(_DWORD *)&v1052[36] = v811;
                          _os_log_impl( &dword_181A5C000,  v806,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams",  buf,  0x48u);
                        }
                      }
                    }

LABEL_686:
                    if (*(void *)(v243 + 248))
                    {
                      if (!*(void *)(v246 + 488))
                      {
                        *(void *)(v243 + 256) = v246;
                        *(void *)(v246 + 48_Block_object_dispose(&STACK[0x338], 8) = v243;
                        nw_protocol_set_output_handler(v243, *(void *)(v246 + 32));
                        nw_protocol_set_input_handler(v246, *(void *)(v243 + 48));
                        *(_OWORD *)uint64_t v243 = *(_OWORD *)v246;
                        __int128 v412 = v1039[5];
                        __int128 v414 = v1039[2];
                        __int128 v413 = v1039[3];
                        *(_OWORD *)(v246 + 12_Block_object_dispose(&STACK[0x338], 8) = v1039[4];
                        *(_OWORD *)(v246 + 144) = v412;
                        *(_OWORD *)(v246 + 96) = v414;
                        *(_OWORD *)(v246 + 112) = v413;
                        __int128 v415 = v1039[1];
                        *(_OWORD *)(v246 + 64) = *v1039;
                        *(_OWORD *)(v246 + 80) = v415;
                        nw_http_transaction_metadata_set_connection_metadata( *(void **)(v243 + 352),  *(void **)(v246 + 768));
                        *v251 &= 0xFFD7u;
                        *(_DWORD *)(v246 + 864) = 1;
                        if ((*(_BYTE *)(v246 + 158) & 1) == 0)
                        {
                          os_log_type_t v416 = (os_log_s *)__nwlog_obj();
                          if (os_log_type_enabled(v416, OS_LOG_TYPE_DEBUG))
                          {
                            uint64_t v417 = *(void *)(v246 + 488);
                            int v418 = *(_DWORD *)(*(void *)(v246 + 480) + 372LL);
                            int v419 = *(_DWORD *)(v246 + 860);
                            if (v417) {
                              LODWORD(v417) = *(_DWORD *)(v417 + 424);
                            }
                            *(_DWORD *)buf = 136447490;
                            *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v246 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            uint64_t v1051 = (uint64_t)" ";
                            *(_WORD *)v1052 = 1024;
                            *(_DWORD *)&v1052[2] = v418;
                            *(_WORD *)&v1052[6] = 1024;
                            *(_DWORD *)&v1052[8] = v419;
                            *(_WORD *)&v1052[12] = 1024;
                            *(_DWORD *)&v1052[14] = v417;
                            _os_log_impl( &dword_181A5C000,  v416,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                          }
                        }

                        if ((*(_BYTE *)(v243 + 158) & 1) == 0)
                        {
                          BOOL v420 = (os_log_s *)__nwlog_obj();
                          if (os_log_type_enabled(v420, OS_LOG_TYPE_INFO))
                          {
                            uint64_t v421 = *(void *)(v243 + 256);
                            int v422 = *(_DWORD *)(*(void *)(v243 + 248) + 372LL);
                            if (v421) {
                              LODWORD(v421) = *(_DWORD *)(v421 + 860);
                            }
                            int v423 = *(_DWORD *)(v243 + 424);
                            *(_DWORD *)buf = 136448002;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v243 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            uint64_t v1051 = (uint64_t)" ";
                            *(_WORD *)v1052 = 1024;
                            *(_DWORD *)&v1052[2] = v422;
                            *(_WORD *)&v1052[6] = 1024;
                            *(_DWORD *)&v1052[8] = v421;
                            *(_WORD *)&v1052[12] = 1024;
                            *(_DWORD *)&v1052[14] = v423;
                            *(_WORD *)&v1052[18] = 2048;
                            *(void *)&v1052[20] = v243;
                            *(_WORD *)&v1052[28] = 2048;
                            *(void *)&v1052[30] = v246;
                            _os_log_impl( &dword_181A5C000,  v420,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                          }
                        }

                        goto LABEL_714;
                      }

                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      uint64_t v406 = *(void *)(v246 + 488);
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v246;
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v1051 = v406;
                      v407 = (char *)_os_log_send_and_compose_impl();
                      v1065[0] = 16;
                      aBlock[0] = 0;
                      if (__nwlog_fault(v407, v1065, aBlock))
                      {
                        if (v1065[0] == 17)
                        {
                          uint64_t v408 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v409 = v1065[0];
                          if (!os_log_type_enabled(v408, (os_log_type_t)v1065[0])) {
                            goto LABEL_712;
                          }
                          uint64_t v410 = *(void *)(v246 + 488);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v246;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = v410;
                          v411 = "%{public}s Connection %p already has a stream (%p)";
                          goto LABEL_711;
                        }

                        if (!aBlock[0])
                        {
                          uint64_t v408 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v409 = v1065[0];
                          if (!os_log_type_enabled(v408, (os_log_type_t)v1065[0])) {
                            goto LABEL_712;
                          }
                          uint64_t v427 = *(void *)(v246 + 488);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v246;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = v427;
                          v411 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                          goto LABEL_711;
                        }

                        BOOL v424 = (char *)__nw_create_backtrace_string();
                        uint64_t v408 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v409 = v1065[0];
                        BOOL v425 = os_log_type_enabled(v408, (os_log_type_t)v1065[0]);
                        if (v424)
                        {
                          if (v425)
                          {
                            uint64_t v426 = *(void *)(v246 + 488);
                            *(_DWORD *)buf = 136446978;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2048;
                            *(void *)&buf[14] = v246;
                            *(_WORD *)&buf[22] = 2048;
                            uint64_t v1051 = v426;
                            *(_WORD *)v1052 = 2082;
                            *(void *)&v1052[2] = v424;
                            _os_log_impl( &dword_181A5C000,  v408,  v409,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                          }

                          free(v424);
                          uint64_t v243 = v1041;
                          goto LABEL_712;
                        }

                        uint64_t v243 = v1041;
                        if (v425)
                        {
                          uint64_t v428 = *(void *)(v246 + 488);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v246;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = v428;
                          v411 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_711:
                          _os_log_impl(&dword_181A5C000, v408, v409, v411, buf, 0x20u);
                        }
                      }

LABEL_712:
                      if (v407) {
                        free(v407);
                      }
LABEL_714:
                      *(_WORD *)(v243 + 428) |= 0x4000u;
                      uint64_t v429 = *(void **)(v243 + 352);
                      *(void *)buf = MEMORY[0x1895F87A8];
                      *(void *)&buf[8] = 0x40000000LL;
                      *(void *)&buf[16] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke;
                      uint64_t v1051 = (uint64_t)&__block_descriptor_tmp_52_39863;
                      *(void *)v1052 = v243;
                      nw_http_transaction_metadata_set_event_handler(v429, buf);
                      nw_protocol_connected(*(void **)(v243 + 48), v243);
                      goto LABEL_715;
                    }

                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    BOOL v755 = (char *)_os_log_send_and_compose_impl();
                    v1065[0] = 16;
                    aBlock[0] = 0;
                    if (__nwlog_fault(v755, v1065, aBlock))
                    {
                      if (v1065[0] == 17)
                      {
                        char v756 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v757 = v1065[0];
                        if (os_log_type_enabled(v756, (os_log_type_t)v1065[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v758 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_1445:
                          _os_log_impl(&dword_181A5C000, v756, v757, v758, buf, 0xCu);
                        }
                      }

                      else if (aBlock[0])
                      {
                        BOOL v812 = (char *)__nw_create_backtrace_string();
                        char v756 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v757 = v1065[0];
                        BOOL v813 = os_log_type_enabled(v756, (os_log_type_t)v1065[0]);
                        if (v812)
                        {
                          if (v813)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v812;
                            _os_log_impl( &dword_181A5C000,  v756,  v757,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v812);
                          goto LABEL_1446;
                        }

                        if (v813)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v758 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                          goto LABEL_1445;
                        }
                      }

                      else
                      {
                        char v756 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v757 = v1065[0];
                        if (os_log_type_enabled(v756, (os_log_type_t)v1065[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v758 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                          goto LABEL_1445;
                        }
                      }
                    }

LABEL_1446:
                    if (v755) {
                      free(v755);
                    }
                    uint64_t v11 = v1042;
                    uint64_t v243 = v1041;
                    goto LABEL_714;
                  }

                  __nwlog_obj();
                  uint64_t v395 = *(unsigned int *)(v11 + 348);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->pending_stream_count";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v1051 = 1LL;
                  *(_WORD *)v1052 = 2048;
                  *(void *)&v1052[2] = v395;
                  int v396 = (char *)_os_log_send_and_compose_impl();
                  v1065[0] = 16;
                  aBlock[0] = 0;
                  if (__nwlog_fault(v396, v1065, aBlock))
                  {
                    if (v1065[0] == 17)
                    {
                      int v397 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v398 = v1065[0];
                      if (os_log_type_enabled(v397, (os_log_type_t)v1065[0]))
                      {
                        uint64_t v399 = *(unsigned int *)(v1042 + 348);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_stream_count";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v1051 = 1LL;
                        *(_WORD *)v1052 = 2048;
                        *(void *)&v1052[2] = v399;
                        uint64_t v400 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_680:
                        _os_log_impl(&dword_181A5C000, v397, v398, v400, buf, 0x2Au);
                      }
                    }

                    else if (aBlock[0])
                    {
                      uint64_t v401 = (char *)__nw_create_backtrace_string();
                      int v397 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v398 = v1065[0];
                      BOOL v402 = os_log_type_enabled(v397, (os_log_type_t)v1065[0]);
                      if (v401)
                      {
                        if (v402)
                        {
                          uint64_t v403 = *(unsigned int *)(v1042 + 348);
                          *(_DWORD *)buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->pending_stream_count";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v403;
                          *(_WORD *)&v1052[10] = 2082;
                          *(void *)&v1052[12] = v401;
                          _os_log_impl( &dword_181A5C000,  v397,  v398,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                        }

                        free(v401);
                        uint64_t v243 = v1041;
                        goto LABEL_681;
                      }

                      uint64_t v243 = v1041;
                      if (v402)
                      {
                        uint64_t v405 = *(unsigned int *)(v1042 + 348);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_stream_count";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v1051 = 1LL;
                        *(_WORD *)v1052 = 2048;
                        *(void *)&v1052[2] = v405;
                        uint64_t v400 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                        goto LABEL_680;
                      }
                    }

                    else
                    {
                      int v397 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v398 = v1065[0];
                      if (os_log_type_enabled(v397, (os_log_type_t)v1065[0]))
                      {
                        uint64_t v404 = *(unsigned int *)(v1042 + 348);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_stream_count";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v1051 = 1LL;
                        *(_WORD *)v1052 = 2048;
                        *(void *)&v1052[2] = v404;
                        uint64_t v400 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_680;
                      }
                    }
                  }

LABEL_681:
                  if (v396) {
                    free(v396);
                  }
                  uint64_t v11 = v1042;
                  *(_DWORD *)(v1042 + 34_Block_object_dispose(&STACK[0x338], 8) = 0;
                  goto LABEL_684;
                }

                __nwlog_obj();
                uint64_t v340 = *(unsigned int *)(v11 + 340);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->idle_connections_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v1051 = 1LL;
                *(_WORD *)v1052 = 2048;
                *(void *)&v1052[2] = v340;
                v341 = (char *)_os_log_send_and_compose_impl();
                v1065[0] = 16;
                aBlock[0] = 0;
                if (__nwlog_fault(v341, v1065, aBlock))
                {
                  if (v1065[0] == 17)
                  {
                    BOOL v342 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v343 = v1065[0];
                    if (os_log_type_enabled(v342, (os_log_type_t)v1065[0]))
                    {
                      uint64_t v344 = *(unsigned int *)(v1042 + 340);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->idle_connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v1051 = 1LL;
                      *(_WORD *)v1052 = 2048;
                      *(void *)&v1052[2] = v344;
                      uint64_t v345 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_634:
                      _os_log_impl(&dword_181A5C000, v342, v343, v345, buf, 0x2Au);
                    }
                  }

                  else if (aBlock[0])
                  {
                    uint64_t v365 = (char *)__nw_create_backtrace_string();
                    BOOL v342 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v343 = v1065[0];
                    BOOL v366 = os_log_type_enabled(v342, (os_log_type_t)v1065[0]);
                    if (v365)
                    {
                      if (v366)
                      {
                        uint64_t v367 = *(unsigned int *)(v1042 + 340);
                        *(_DWORD *)buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = "http1->idle_connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v1051 = 1LL;
                        *(_WORD *)v1052 = 2048;
                        *(void *)&v1052[2] = v367;
                        *(_WORD *)&v1052[10] = 2082;
                        *(void *)&v1052[12] = v365;
                        _os_log_impl( &dword_181A5C000,  v342,  v343,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                      }

                      free(v365);
                      uint64_t v243 = v1041;
                      goto LABEL_635;
                    }

                    uint64_t v243 = v1041;
                    if (v366)
                    {
                      uint64_t v383 = *(unsigned int *)(v1042 + 340);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->idle_connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v1051 = 1LL;
                      *(_WORD *)v1052 = 2048;
                      *(void *)&v1052[2] = v383;
                      uint64_t v345 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                      goto LABEL_634;
                    }
                  }

                  else
                  {
                    BOOL v342 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v343 = v1065[0];
                    if (os_log_type_enabled(v342, (os_log_type_t)v1065[0]))
                    {
                      uint64_t v379 = *(unsigned int *)(v1042 + 340);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->idle_connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v1051 = 1LL;
                      *(_WORD *)v1052 = 2048;
                      *(void *)&v1052[2] = v379;
                      uint64_t v345 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_634;
                    }
                  }
                }

LABEL_635:
                if (v341) {
                  free(v341);
                }
                uint64_t v11 = v1042;
                *(_DWORD *)(v1042 + 340) = 0;
                goto LABEL_638;
              }
            }

            if ((*(_BYTE *)(v11 + 158) & 1) == 0)
            {
              if (*((_BYTE *)v15 + 1537))
              {
                int v747 = v244;
                int v748 = (os_log_s *)__nwlog_obj();
                BOOL v749 = os_log_type_enabled(v748, OS_LOG_TYPE_DEBUG);
                int v244 = v747;
                if (v749)
                {
                  int v750 = *(_DWORD *)(v11 + 372);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_get_next_idle_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v11 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v1051 = (uint64_t)" ";
                  *(_WORD *)v1052 = 1024;
                  *(_DWORD *)&v1052[2] = v750;
                  _os_log_impl( &dword_181A5C000,  v748,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> no idle connections",  buf,  0x26u);
                  int v244 = v747;
                }
              }
            }

            if (*(void *)(v243 + 256))
            {
              if ((*(_BYTE *)(v243 + 158) & 1) != 0) {
                goto LABEL_450;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v256 = gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_450;
              }
              uint64_t v257 = *(void *)(v243 + 256);
              int v258 = *(_DWORD *)(*(void *)(v243 + 248) + 372LL);
              if (v257) {
                LODWORD(v257) = *(_DWORD *)(v257 + 860);
              }
              int v259 = *(_DWORD *)(v243 + 424);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v243 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v1051 = (uint64_t)" ";
              *(_WORD *)v1052 = 1024;
              *(_DWORD *)&v1052[2] = v258;
              *(_WORD *)&v1052[6] = 1024;
              *(_DWORD *)&v1052[8] = v257;
              *(_WORD *)&v1052[12] = 1024;
              *(_DWORD *)&v1052[14] = v259;
              BOOL v260 = "%{public}s %{public}s%s<i%u:c%u:s%u> stream already has current connection, ignoring";
              uint64_t v261 = (os_log_s *)v256;
              uint32_t v262 = 50;
LABEL_449:
              _os_log_impl(&dword_181A5C000, v261, OS_LOG_TYPE_DEBUG, v260, buf, v262);
LABEL_450:
              if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
                goto LABEL_715;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v263 = (os_log_s *)gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_715;
              }
              int v264 = *(_DWORD *)(v11 + 372);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v11 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v1051 = (uint64_t)" ";
              *(_WORD *)v1052 = 1024;
              *(_DWORD *)&v1052[2] = v264;
              __int128 v265 = "%{public}s %{public}s%s<i%u> cannot make new connection, waiting for other requests to finish";
              goto LABEL_456;
            }

            v1040 = v244;
            if ((*(_WORD *)(v243 + 428) & 8) == 0)
            {
              if (*(_DWORD *)(v11 + 336) + *(_DWORD *)(v11 + 352) >= (*(_DWORD *)(v11 + 368)
                                                                                   + *(_DWORD *)(v11 + 364)))
              {
                if ((*(_BYTE *)(v243 + 158) & 1) != 0) {
                  goto LABEL_450;
                }
                uint64_t v352 = (os_log_s *)__nwlog_obj();
                if (!os_log_type_enabled(v352, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_450;
                }
                uint64_t v353 = *(void *)(v243 + 256);
                int v354 = *(_DWORD *)(*(void *)(v243 + 248) + 372LL);
                if (v353) {
                  LODWORD(v353) = *(_DWORD *)(v353 + 860);
                }
                int v355 = *(_DWORD *)(v243 + 424);
                int v356 = *(_DWORD *)(v11 + 364);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v243 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v1051 = (uint64_t)" ";
                *(_WORD *)v1052 = 1024;
                *(_DWORD *)&v1052[2] = v354;
                *(_WORD *)&v1052[6] = 1024;
                *(_DWORD *)&v1052[8] = v353;
                *(_WORD *)&v1052[12] = 1024;
                *(_DWORD *)&v1052[14] = v355;
                *(_WORD *)&v1052[18] = 1024;
                *(_DWORD *)&v1052[20] = v356;
                BOOL v260 = "%{public}s %{public}s%s<i%u:c%u:s%u> already at max connection width %u, cannot create new connection";
                uint64_t v261 = v352;
                uint32_t v262 = 56;
                goto LABEL_449;
              }

              if ((*(_BYTE *)(v243 + 158) & 1) == 0)
              {
                if (*((_BYTE *)v15 + 1537))
                {
                  v865 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v865, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v866 = v243 + 74;
                    uint64_t v867 = *(void *)(v243 + 256);
                    int v868 = *(_DWORD *)(*(void *)(v243 + 248) + 372LL);
                    if (v867) {
                      LODWORD(v867) = *(_DWORD *)(v867 + 860);
                    }
                    uint64_t v243 = v1041;
                    int v869 = *(_DWORD *)(v1041 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v866;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v1051 = (uint64_t)" ";
                    *(_WORD *)v1052 = 1024;
                    *(_DWORD *)&v1052[2] = v868;
                    *(_WORD *)&v1052[6] = 1024;
                    *(_DWORD *)&v1052[8] = v867;
                    *(_WORD *)&v1052[12] = 1024;
                    *(_DWORD *)&v1052[14] = v869;
                    _os_log_impl( &dword_181A5C000,  v865,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> width allows new connection, creating",  buf,  0x32u);
                    uint64_t v11 = v1042;
                    BOOL v15 = &qword_18C45F000;
                  }
                }
              }

              if ((*(_WORD *)(v243 + 428) & 0x1000) == 0)
              {
LABEL_1015:
                if (*(void *)(v243 + 32))
                {
                  if ((*(_BYTE *)(v243 + 158) & 1) == 0)
                  {
                    if (*((_BYTE *)v15 + 1537))
                    {
                      int v888 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v888, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v889 = v243 + 74;
                        uint64_t v890 = *(void *)(v243 + 256);
                        int v891 = *(_DWORD *)(*(void *)(v243 + 248) + 372LL);
                        if (v890) {
                          LODWORD(v890) = *(_DWORD *)(v890 + 860);
                        }
                        uint64_t v243 = v1041;
                        int v892 = *(_DWORD *)(v1041 + 424);
                        uint64_t v893 = *(void *)(v1041 + 32);
                        *(_DWORD *)buf = 136447746;
                        *(void *)&uint8_t buf[4] = "nw_http1_establish_new_connection_for_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v889;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v1051 = (uint64_t)" ";
                        *(_WORD *)v1052 = 1024;
                        *(_DWORD *)&v1052[2] = v891;
                        *(_WORD *)&v1052[6] = 1024;
                        *(_DWORD *)&v1052[8] = v890;
                        *(_WORD *)&v1052[12] = 1024;
                        *(_DWORD *)&v1052[14] = v892;
                        *(_WORD *)&v1052[18] = 2048;
                        *(void *)&v1052[20] = v893;
                        _os_log_impl( &dword_181A5C000,  v888,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using already established output handler %p",  buf,  0x3Cu);
                        BOOL v15 = &qword_18C45F000;
                      }
                    }
                  }

                  loga = *(_OWORD **)(v243 + 32);
                  if (loga)
                  {
                    v614 = *(void **)(v243 + 336);
                    if (v614)
                    {
                      os_log_type_t v615 = *(void **)(v243 + 320);
                      if (v615)
                      {
                        BOOL v616 = calloc(1uLL, 0x370uLL);
                        if (v616) {
                          goto LABEL_1022;
                        }
                        v899 = (os_log_s *)__nwlog_obj();
                        os_log_type_enabled(v899, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "strict_calloc";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = 1LL;
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v1051 = 880LL;
                        v900 = (void *)_os_log_send_and_compose_impl();
                        BOOL result = __nwlog_abort((uint64_t)v900);
                        if (!result)
                        {
                          free(v900);
                          BOOL v15 = &qword_18C45F000;
LABEL_1022:
                          bzero(v616, 0x370uLL);
                          if (nw_protocol_http1_identifier::onceToken != -1) {
                            dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
                          }
                          *((void *)v616 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                          if (nw_protocol_http1_get_callbacks(void)::onceToken != -1) {
                            dispatch_once( &nw_protocol_http1_get_callbacks(void)::onceToken,  &__block_literal_global_17_39683);
                          }
                          *((void *)v616 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                          *((_DWORD *)v616 + 46) = 3;
                          *((void *)v616 + 22) = v616;
                          *((void *)v616 + 5) = v616 + 10;
                          *((void *)v616 + 60) = v1042;
                          nw_protocol_set_output_handler((uint64_t)v616, (uint64_t)loga);
                          *(void *)buf = os_retain(v614);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v616 + 47), buf);
                          *(void *)buf = os_retain(v615);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v616 + 46), buf);
                          *(void *)buf = nw_parameters_copy_context(v615);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v616 + 31), buf);
                          *((void *)v616 + 24) = *(void *)(v1042 + 192);
                          uint64_t v617 = MEMORY[0x1895F87A8];
                          uint64_t v618 = (void *)*((void *)v616 + 62);
                          *(void *)v1065 = MEMORY[0x1895F87A8];
                          *(void *)&v1065[8] = 0x40000000LL;
                          *(void *)&v1065[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                          v1066 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39882;
                          v1067 = (void (*)(uint64_t))v616;
                          *(void *)buf = nw_http_connection_create_metadata(v618, v1065, 0LL);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v616 + 48), buf);
                          nw_http_connection_metadata_set_version(*((void **)v616 + 96), 3);
                          nw_http_connection_metadata_set_shared_connection_pool_metadata( *((void **)v616 + 96),  *(void **)(v1042 + 312));
                          *((void *)v616 + 77) = 0LL;
                          *((void *)v616 + 7_Block_object_dispose(&STACK[0x338], 8) = (char *)v616 + 616;
                          *((void *)v616 + 79) = 0LL;
                          *((void *)v616 + 80) = (char *)v616 + 632;
                          *((void *)v616 + 81) = 0LL;
                          *((void *)v616 + 82) = (char *)v616 + 648;
                          *((void *)v616 + 83) = 0LL;
                          *((void *)v616 + 84) = (char *)v616 + 664;
                          *((void *)v616 + 86) = (char *)v616 + 680;
                          *((void *)v616 + 85) = 0LL;
                          nw_frame_cache_init((uint64_t)v616 + 696, (uint64_t)v616, 256, 0x40000, 16);
                          uint64_t v619 = *((void *)v616 + 60);
                          if (v619)
                          {
                            *(_OWORD *)((char *)v616 + 360) = 0u;
                            *(_OWORD *)((char *)v616 + 376) = 0u;
                            *(_OWORD *)((char *)v616 + 392) = 0u;
                            *(_OWORD *)((char *)v616 + 40_Block_object_dispose(&STACK[0x338], 8) = 0u;
                            *(_OWORD *)((char *)v616 + 424) = 0u;
                            *(_OWORD *)((char *)v616 + 440) = 0u;
                            *(_OWORD *)((char *)v616 + 32_Block_object_dispose(&STACK[0x338], 8) = 0u;
                            *(_OWORD *)((char *)v616 + 344) = 0u;
                            *((void *)v616 + 59) = nw_http1_on_reset;
                            *((void *)v616 + 37) = nw_http1_on_message_begin;
                            *((void *)v616 + 3_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_url;
                            *((void *)v616 + 4_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_message_complete;
                            *((void *)v616 + 49) = nw_http1_on_url_complete;
                            *((void *)v616 + 39) = nw_http1_on_status;
                            *((void *)v616 + 40) = nw_http1_on_method;
                            *((void *)v616 + 50) = nw_http1_on_status_complete;
                            *((void *)v616 + 51) = nw_http1_on_method_complete;
                            *((void *)v616 + 42) = nw_http1_on_header_field;
                            *((void *)v616 + 43) = nw_http1_on_header_value;
                            *((void *)v616 + 53) = nw_http1_on_header_field_complete;
                            *((void *)v616 + 54) = nw_http1_on_header_value_complete;
                            *((void *)v616 + 46) = nw_http1_on_headers_complete;
                            *((void *)v616 + 47) = nw_http1_on_body;
                            *((void *)v616 + 57) = nw_http1_on_chunk_header;
                            *((void *)v616 + 5_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_chunk_complete;
                            char v620 = *(_BYTE *)(v619 + 376);
                            *(_OWORD *)((char *)v616 + 24_Block_object_dispose(&STACK[0x338], 8) = 0u;
                            *(_OWORD *)((char *)v616 + 200) = 0u;
                            *(_OWORD *)((char *)v616 + 264) = 0u;
                            *(_OWORD *)((char *)v616 + 232) = 0u;
                            *(_OWORD *)((char *)v616 + 216) = 0u;
                            if ((v620 & 1) != 0) {
                              char v621 = 1;
                            }
                            else {
                              char v621 = 2;
                            }
                            *((_BYTE *)v616 + 272) = v621;
                            *((void *)v616 + 35) = 0LL;
                            *((void *)v616 + 36) = (char *)v616 + 296;
                            *((_WORD *)v616 + 139) = 16131;
                            *((void *)v616 + 31) = v616;
                            *((void *)v616 + 32) = 238LL;
                            uint64_t v622 = v1041;
                            if ((*((_BYTE *)v616 + 158) & 1) == 0)
                            {
                              v623 = (os_log_s *)__nwlog_obj();
                              if (os_log_type_enabled(v623, OS_LOG_TYPE_DEBUG))
                              {
                                uint64_t v624 = *((void *)v616 + 61);
                                int v625 = *(_DWORD *)(*((void *)v616 + 60) + 372LL);
                                int v626 = *((_DWORD *)v616 + 215);
                                if (v624) {
                                  LODWORD(v624) = *(_DWORD *)(v624 + 424);
                                }
                                *(_DWORD *)buf = 136448258;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_log_parser_version";
                                *(_WORD *)&buf[12] = 2082;
                                *(void *)&buf[14] = (char *)v616 + 74;
                                *(_WORD *)&buf[22] = 2080;
                                uint64_t v1051 = (uint64_t)" ";
                                *(_WORD *)v1052 = 1024;
                                *(_DWORD *)&v1052[2] = v625;
                                *(_WORD *)&v1052[6] = 1024;
                                *(_DWORD *)&v1052[8] = v626;
                                *(_WORD *)&v1052[12] = 1024;
                                *(_DWORD *)&v1052[14] = v624;
                                *(_WORD *)&v1052[18] = 1024;
                                *(_DWORD *)&v1052[20] = 9;
                                *(_WORD *)&v1052[24] = 1024;
                                *(_DWORD *)&v1052[26] = 2;
                                *(_WORD *)&v1052[30] = 1024;
                                *(_DWORD *)&v1052[32] = 1;
                                _os_log_impl( &dword_181A5C000,  v623,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u",  buf,  0x44u);
                              }
                            }

                            goto LABEL_1035;
                          }

                          __nwlog_obj();
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                          BOOL v901 = (char *)_os_log_send_and_compose_impl();
                          type[0] = 16;
                          LOBYTE(v1045[0]) = 0;
                          if (__nwlog_fault(v901, type, v1045))
                          {
                            if (type[0] == 17)
                            {
                              v902 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v903 = type[0];
                              if (os_log_type_enabled(v902, (os_log_type_t)type[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                                v904 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_1802:
                                _os_log_impl(&dword_181A5C000, v902, v903, v904, buf, 0xCu);
                              }
                            }

                            else if (LOBYTE(v1045[0]))
                            {
                              v957 = (char *)__nw_create_backtrace_string();
                              v902 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v903 = type[0];
                              BOOL v958 = os_log_type_enabled(v902, (os_log_type_t)type[0]);
                              if (v957)
                              {
                                if (v958)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = v957;
                                  _os_log_impl( &dword_181A5C000,  v902,  v903,  "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                                }

                                free(v957);
                                goto LABEL_1803;
                              }

                              if (v958)
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                                v904 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                                goto LABEL_1802;
                              }
                            }

                            else
                            {
                              v902 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v903 = type[0];
                              if (os_log_type_enabled(v902, (os_log_type_t)type[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                                v904 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                                goto LABEL_1802;
                              }
                            }
                          }

LABEL_1803:
                          if (v901) {
                            free(v901);
                          }
                          BOOL v15 = &qword_18C45F000;
                          uint64_t v622 = v1041;
LABEL_1035:
                          *(void *)buf = 0LL;
                          *(void *)&buf[8] = buf;
                          *(void *)&buf[16] = 0x2000000000LL;
                          uint64_t v1051 = (uint64_t)v616;
                          *(void *)uint64_t aBlock = v617;
                          *(void *)&aBlock[8] = 0x40000000LL;
                          *(void *)&aBlock[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                          v1061 = &unk_189BBD4F0;
                          v1062 = (uint64_t *)buf;
                          *((void *)v616 + 76) = _Block_copy(aBlock);
                          _Block_object_dispose(buf, 8);
                          if ((*((_BYTE *)v616 + 158) & 1) == 0)
                          {
                            if (*((_BYTE *)v15 + 1537))
                            {
                              v914 = (os_log_s *)__nwlog_obj();
                              if (os_log_type_enabled(v914, OS_LOG_TYPE_DEBUG))
                              {
                                uint64_t v915 = *((void *)v616 + 61);
                                int v916 = *(_DWORD *)(*((void *)v616 + 60) + 372LL);
                                int v917 = *((_DWORD *)v616 + 215);
                                if (v915) {
                                  LODWORD(v915) = *(_DWORD *)(v915 + 424);
                                }
                                *(_DWORD *)buf = 136447746;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                                *(_WORD *)&buf[12] = 2082;
                                *(void *)&buf[14] = (char *)v616 + 74;
                                *(_WORD *)&buf[22] = 2080;
                                uint64_t v1051 = (uint64_t)" ";
                                *(_WORD *)v1052 = 1024;
                                *(_DWORD *)&v1052[2] = v916;
                                *(_WORD *)&v1052[6] = 1024;
                                *(_DWORD *)&v1052[8] = v917;
                                *(_WORD *)&v1052[12] = 1024;
                                *(_DWORD *)&v1052[14] = v915;
                                *(_WORD *)&v1052[18] = 2048;
                                *(void *)&v1052[20] = v616;
                                _os_log_impl( &dword_181A5C000,  v914,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created %p",  buf,  0x3Cu);
                                uint64_t v622 = v1041;
                              }
                            }
                          }

                          v627 = (nw_path **)(v616 + 32);
                          nw_protocol_replace_input_handler((uint64_t)loga, v622, (uint64_t)v616);
                          _OWORD *v616 = *loga;
                          os_log_type_t v628 = (void *)*((void *)v616 + 92);
                          uint64_t v11 = v1042;
                          if (v628)
                          {
                            if (!*((void *)v616 + 66))
                            {
                              v629 = (void **)(v616 + 35);
                              id v630 = nw_parameters_copy_context(*((void **)v616 + 92));
                              *(void *)buf = nw_path_copy_flow_registration(v630, (uint64_t)v616);
                              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v616 + 35), buf);
                              v631 = (void *)*((void *)v616 + 70);
                              if (v631)
                              {
                                id v632 = nw_path_flow_registration_copy_endpoint(v631);
                                id v633 = nw_path_flow_registration_copy_parameters(*v629);
                                *(void *)buf = nw_endpoint_copy_association_with_evaluator(v632, v633, 0LL);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v616 + 33), buf);
                                if (*((void *)v616 + 66))
                                {
                                  *(void *)buf = nw_protocol_instance_stub_create((nw_protocol *)v616);
                                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v616 + 34), buf);
                                  nw_association_register_internal( *((void **)v616 + 66),  v628,  *((void **)v616 + 68),  0,  0,  &__block_literal_global_65);
                                  id v634 = nw_association_copy_current_path(*((void **)v616 + 66), v633);
                                  if (v634)
                                  {
                                    int v635 = v634;
                                    int v636 = (nw_path *)nw_path_copy_for_flow_registration(v634, *v629);
                                    if (v636)
                                    {
                                      uint64_t v637 = v636;
                                      if (*v627 != v636)
                                      {
                                        *(void *)buf = os_retain(v636);
                                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v616 + 32), buf);
                                      }

                                      if (nw_path_has_flows(v637)) {
                                        __int16 v638 = 4096;
                                      }
                                      else {
                                        __int16 v638 = 0;
                                      }
                                      int v639 = *((_WORD *)v616 + 436) & 0xEFFF | (*((unsigned __int8 *)v616 + 874) << 16);
                                      *((_WORD *)v616 + 436) = *((_WORD *)v616 + 436) & 0xEFFF | v638;
                                      *((_BYTE *)v616 + 874) = BYTE2(v639);
                                      id v640 = nw_parameters_copy_effective_proxy_config(v628);
                                      if (v640)
                                      {
                                        int v641 = v640;
                                        if (nw_path_has_proxy_config(v635, v640))
                                        {
                                          *(void *)buf = os_retain(v641);
                                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v616 + 36), buf);
                                        }

                                        os_release(v641);
                                      }

                                      os_release(v637);
                                    }

                                    os_release(v635);
                                  }
                                }

                                if (v633) {
                                  os_release(v633);
                                }
                                uint64_t v11 = v1042;
                                if (v632) {
                                  os_release(v632);
                                }
                              }

                              uint64_t v622 = v1041;
                              if (v630) {
                                os_release(v630);
                              }
                            }

                            int v642 = *v627;
                            if (*v627)
                            {
LABEL_1061:
                            }

LABEL_1063:
                            uint64_t v643 = *(unsigned int *)(v11 + 336) + 1LL;
                            uint64_t v644 = v643 << 31 >> 31;
                            *(_DWORD *)(v11 + 336) = v643;
                            if (v644 == v643 && (v644 & 0x8000000000000000LL) == 0) {
                              goto LABEL_1101;
                            }
                            __nwlog_obj();
                            uint64_t v645 = *(unsigned int *)(v11 + 336);
                            *(_DWORD *)buf = 136446978;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = "http1->connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            uint64_t v1051 = 1LL;
                            *(_WORD *)v1052 = 2048;
                            *(void *)&v1052[2] = v645;
                            int v646 = (char *)_os_log_send_and_compose_impl();
                            v1065[0] = 16;
                            aBlock[0] = 0;
                            if (__nwlog_fault(v646, v1065, aBlock))
                            {
                              if (v1065[0] == 17)
                              {
                                uint64_t v647 = (os_log_s *)__nwlog_obj();
                                os_log_type_t v648 = v1065[0];
                                if (os_log_type_enabled(v647, (os_log_type_t)v1065[0]))
                                {
                                  uint64_t v649 = *(unsigned int *)(v1042 + 336);
                                  *(_DWORD *)buf = 136446978;
                                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = "http1->connections_count";
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v1051 = 1LL;
                                  *(_WORD *)v1052 = 2048;
                                  *(void *)&v1052[2] = v649;
                                  int v650 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1097:
                                  _os_log_impl(&dword_181A5C000, v647, v648, v650, buf, 0x2Au);
                                }
                              }

                              else if (aBlock[0])
                              {
                                int v667 = (char *)__nw_create_backtrace_string();
                                uint64_t v647 = (os_log_s *)__nwlog_obj();
                                os_log_type_t v648 = v1065[0];
                                BOOL v668 = os_log_type_enabled(v647, (os_log_type_t)v1065[0]);
                                if (v667)
                                {
                                  if (v668)
                                  {
                                    uint64_t v669 = *(unsigned int *)(v1042 + 336);
                                    *(_DWORD *)buf = 136447234;
                                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(void *)&buf[14] = "http1->connections_count";
                                    *(_WORD *)&buf[22] = 2048;
                                    uint64_t v1051 = 1LL;
                                    *(_WORD *)v1052 = 2048;
                                    *(void *)&v1052[2] = v669;
                                    *(_WORD *)&v1052[10] = 2082;
                                    *(void *)&v1052[12] = v667;
                                    _os_log_impl( &dword_181A5C000,  v647,  v648,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                                  }

                                  free(v667);
                                  uint64_t v622 = v1041;
                                  goto LABEL_1098;
                                }

                                uint64_t v622 = v1041;
                                if (v668)
                                {
                                  uint64_t v674 = *(unsigned int *)(v1042 + 336);
                                  *(_DWORD *)buf = 136446978;
                                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = "http1->connections_count";
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v1051 = 1LL;
                                  *(_WORD *)v1052 = 2048;
                                  *(void *)&v1052[2] = v674;
                                  int v650 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                                  goto LABEL_1097;
                                }
                              }

                              else
                              {
                                uint64_t v647 = (os_log_s *)__nwlog_obj();
                                os_log_type_t v648 = v1065[0];
                                if (os_log_type_enabled(v647, (os_log_type_t)v1065[0]))
                                {
                                  uint64_t v673 = *(unsigned int *)(v1042 + 336);
                                  *(_DWORD *)buf = 136446978;
                                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = "http1->connections_count";
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v1051 = 1LL;
                                  *(_WORD *)v1052 = 2048;
                                  *(void *)&v1052[2] = v673;
                                  int v650 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                                  goto LABEL_1097;
                                }
                              }
                            }

LABEL_1098:
                            if (v646) {
                              free(v646);
                            }
                            uint64_t v11 = v1042;
                            *(_DWORD *)(v1042 + 336) = -1;
LABEL_1101:
                            uint64_t v675 = *(unsigned int *)(v11 + 360) + 1LL;
                            uint64_t v676 = v675 << 31 >> 31;
                            *(_DWORD *)(v11 + 360) = v675;
                            if (v676 == v675 && (v676 & 0x8000000000000000LL) == 0) {
                              goto LABEL_1120;
                            }
                            __nwlog_obj();
                            uint64_t v677 = *(unsigned int *)(v11 + 360);
                            *(_DWORD *)buf = 136446978;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = "http1->next_connection_log_num";
                            *(_WORD *)&buf[22] = 2048;
                            uint64_t v1051 = 1LL;
                            *(_WORD *)v1052 = 2048;
                            *(void *)&v1052[2] = v677;
                            int v678 = (char *)_os_log_send_and_compose_impl();
                            v1065[0] = 16;
                            aBlock[0] = 0;
                            if (__nwlog_fault(v678, v1065, aBlock))
                            {
                              if (v1065[0] == 17)
                              {
                                int v679 = (os_log_s *)__nwlog_obj();
                                os_log_type_t v680 = v1065[0];
                                if (os_log_type_enabled(v679, (os_log_type_t)v1065[0]))
                                {
                                  uint64_t v681 = *(unsigned int *)(v1042 + 360);
                                  *(_DWORD *)buf = 136446978;
                                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = "http1->next_connection_log_num";
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v1051 = 1LL;
                                  *(_WORD *)v1052 = 2048;
                                  *(void *)&v1052[2] = v681;
                                  int v682 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1116:
                                  _os_log_impl(&dword_181A5C000, v679, v680, v682, buf, 0x2Au);
                                }
                              }

                              else if (aBlock[0])
                              {
                                int v683 = (char *)__nw_create_backtrace_string();
                                int v679 = (os_log_s *)__nwlog_obj();
                                os_log_type_t v680 = v1065[0];
                                BOOL v684 = os_log_type_enabled(v679, (os_log_type_t)v1065[0]);
                                if (v683)
                                {
                                  if (v684)
                                  {
                                    uint64_t v685 = *(unsigned int *)(v1042 + 360);
                                    *(_DWORD *)buf = 136447234;
                                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(void *)&buf[14] = "http1->next_connection_log_num";
                                    *(_WORD *)&buf[22] = 2048;
                                    uint64_t v1051 = 1LL;
                                    *(_WORD *)v1052 = 2048;
                                    *(void *)&v1052[2] = v685;
                                    *(_WORD *)&v1052[10] = 2082;
                                    *(void *)&v1052[12] = v683;
                                    _os_log_impl( &dword_181A5C000,  v679,  v680,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                                  }

                                  free(v683);
                                  uint64_t v622 = v1041;
                                  goto LABEL_1117;
                                }

                                uint64_t v622 = v1041;
                                if (v684)
                                {
                                  uint64_t v687 = *(unsigned int *)(v1042 + 360);
                                  *(_DWORD *)buf = 136446978;
                                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = "http1->next_connection_log_num";
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v1051 = 1LL;
                                  *(_WORD *)v1052 = 2048;
                                  *(void *)&v1052[2] = v687;
                                  int v682 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                                  goto LABEL_1116;
                                }
                              }

                              else
                              {
                                int v679 = (os_log_s *)__nwlog_obj();
                                os_log_type_t v680 = v1065[0];
                                if (os_log_type_enabled(v679, (os_log_type_t)v1065[0]))
                                {
                                  uint64_t v686 = *(unsigned int *)(v1042 + 360);
                                  *(_DWORD *)buf = 136446978;
                                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = "http1->next_connection_log_num";
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v1051 = 1LL;
                                  *(_WORD *)v1052 = 2048;
                                  *(void *)&v1052[2] = v686;
                                  int v682 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                                  goto LABEL_1116;
                                }
                              }
                            }

LABEL_1117:
                            if (v678) {
                              free(v678);
                            }
                            LODWORD(v675) = -1;
                            uint64_t v11 = v1042;
                            *(_DWORD *)(v1042 + 360) = -1;
LABEL_1120:
                            *((_DWORD *)v616 + 215) = v675;
                            if ((*((_BYTE *)v616 + 158) & 1) == 0)
                            {
                              if (gLogDatapath)
                              {
                                v918 = (os_log_s *)__nwlog_obj();
                                if (os_log_type_enabled(v918, OS_LOG_TYPE_DEBUG))
                                {
                                  uint64_t v919 = *((void *)v616 + 61);
                                  int v920 = *(_DWORD *)(*((void *)v616 + 60) + 372LL);
                                  int v921 = *((_DWORD *)v616 + 215);
                                  if (v919) {
                                    LODWORD(v919) = *(_DWORD *)(v919 + 424);
                                  }
                                  uint64_t v11 = v1042;
                                  int v922 = *(_DWORD *)(v1042 + 336);
                                  *(_DWORD *)buf = 136448002;
                                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = (char *)v616 + 74;
                                  *(_WORD *)&buf[22] = 2080;
                                  uint64_t v1051 = (uint64_t)" ";
                                  *(_WORD *)v1052 = 1024;
                                  *(_DWORD *)&v1052[2] = v920;
                                  *(_WORD *)&v1052[6] = 1024;
                                  *(_DWORD *)&v1052[8] = v921;
                                  *(_WORD *)&v1052[12] = 1024;
                                  *(_DWORD *)&v1052[14] = v919;
                                  *(_WORD *)&v1052[18] = 2048;
                                  *(void *)&v1052[20] = v616;
                                  *(_WORD *)&v1052[28] = 1024;
                                  *(_DWORD *)&v1052[30] = v922;
                                  _os_log_impl( &dword_181A5C000,  v918,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections",  buf,  0x42u);
                                  uint64_t v622 = v1041;
                                }
                              }
                            }

                            if (*(void *)(v622 + 248))
                            {
                              if (*((void *)v616 + 61))
                              {
                                __nwlog_obj();
                                uint64_t v688 = *((void *)v616 + 61);
                                *(_DWORD *)buf = 136446722;
                                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                *(_WORD *)&buf[12] = 2048;
                                *(void *)&buf[14] = v616;
                                *(_WORD *)&buf[22] = 2048;
                                uint64_t v1051 = v688;
                                int v689 = (char *)_os_log_send_and_compose_impl();
                                v1065[0] = 16;
                                aBlock[0] = 0;
                                if (v1065[0] == 17)
                                {
                                  uint64_t v690 = (os_log_s *)__nwlog_obj();
                                  os_log_type_t v691 = v1065[0];
                                  if (!os_log_type_enabled(v690, (os_log_type_t)v1065[0])) {
                                    goto LABEL_1149;
                                  }
                                  uint64_t v692 = *((void *)v616 + 61);
                                  *(_DWORD *)buf = 136446722;
                                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2048;
                                  *(void *)&buf[14] = v616;
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v1051 = v692;
                                  int v693 = "%{public}s Connection %p already has a stream (%p)";
                                }

                                else if (aBlock[0])
                                {
                                  BOOL v706 = (char *)__nw_create_backtrace_string();
                                  uint64_t v690 = (os_log_s *)__nwlog_obj();
                                  os_log_type_t v691 = v1065[0];
                                  BOOL v707 = os_log_type_enabled(v690, (os_log_type_t)v1065[0]);
                                  if (v706)
                                  {
                                    if (v707)
                                    {
                                      uint64_t v708 = *((void *)v616 + 61);
                                      *(_DWORD *)buf = 136446978;
                                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                      *(_WORD *)&buf[12] = 2048;
                                      *(void *)&buf[14] = v616;
                                      *(_WORD *)&buf[22] = 2048;
                                      uint64_t v1051 = v708;
                                      *(_WORD *)v1052 = 2082;
                                      *(void *)&v1052[2] = v706;
                                      _os_log_impl( &dword_181A5C000,  v690,  v691,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                                    }

                                    free(v706);
                                    uint64_t v622 = v1041;
                                    goto LABEL_1149;
                                  }

                                  uint64_t v622 = v1041;
                                  if (!v707)
                                  {
LABEL_1149:
                                    if (v689) {
                                      free(v689);
                                    }
                                    goto LABEL_1151;
                                  }

                                  uint64_t v710 = *((void *)v616 + 61);
                                  *(_DWORD *)buf = 136446722;
                                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2048;
                                  *(void *)&buf[14] = v616;
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v1051 = v710;
                                  int v693 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                                }

                                else
                                {
                                  uint64_t v690 = (os_log_s *)__nwlog_obj();
                                  os_log_type_t v691 = v1065[0];
                                  if (!os_log_type_enabled(v690, (os_log_type_t)v1065[0])) {
                                    goto LABEL_1149;
                                  }
                                  uint64_t v709 = *((void *)v616 + 61);
                                  *(_DWORD *)buf = 136446722;
                                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2048;
                                  *(void *)&buf[14] = v616;
                                  *(_WORD *)&buf[22] = 2048;
                                  uint64_t v1051 = v709;
                                  int v693 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                                }

                                _os_log_impl(&dword_181A5C000, v690, v691, v693, buf, 0x20u);
                                goto LABEL_1149;
                              }

                              *(void *)(v622 + 256) = v616;
                              *((void *)v616 + 61) = v622;
                              nw_protocol_set_output_handler(v622, *((void *)v616 + 4));
                              nw_protocol_set_input_handler((uint64_t)v616, *(void *)(v622 + 48));
                              *(_OWORD *)uint64_t v622 = *v616;
                              __int128 v694 = v1040[5];
                              __int128 v696 = v1040[2];
                              __int128 v695 = v1040[3];
                              v616[8] = v1040[4];
                              v616[9] = v694;
                              v616[6] = v696;
                              v616[7] = v695;
                              __int128 v697 = v1040[1];
                              v616[4] = *v1040;
                              v616[5] = v697;
                              nw_http_transaction_metadata_set_connection_metadata( *(void **)(v622 + 352),  *((void **)v616 + 96));
                              *((_WORD *)v616 + 436) &= 0xFFD7u;
                              *((_DWORD *)v616 + 216) = 1;
                              if ((*((_BYTE *)v616 + 158) & 1) == 0)
                              {
                                v698 = (os_log_s *)__nwlog_obj();
                                if (os_log_type_enabled(v698, OS_LOG_TYPE_DEBUG))
                                {
                                  uint64_t v699 = *((void *)v616 + 61);
                                  int v700 = *(_DWORD *)(*((void *)v616 + 60) + 372LL);
                                  int v701 = *((_DWORD *)v616 + 215);
                                  if (v699) {
                                    LODWORD(v699) = *(_DWORD *)(v699 + 424);
                                  }
                                  *(_DWORD *)buf = 136447490;
                                  *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = (char *)v616 + 74;
                                  *(_WORD *)&buf[22] = 2080;
                                  uint64_t v1051 = (uint64_t)" ";
                                  *(_WORD *)v1052 = 1024;
                                  *(_DWORD *)&v1052[2] = v700;
                                  *(_WORD *)&v1052[6] = 1024;
                                  *(_DWORD *)&v1052[8] = v701;
                                  *(_WORD *)&v1052[12] = 1024;
                                  *(_DWORD *)&v1052[14] = v699;
                                  _os_log_impl( &dword_181A5C000,  v698,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                                }
                              }

                              if ((*(_BYTE *)(v622 + 158) & 1) != 0
                                || (int v702 = (os_log_s *)__nwlog_obj(), !os_log_type_enabled(v702, OS_LOG_TYPE_INFO)))
                              {
LABEL_1151:
                                if ((*(_BYTE *)(v622 + 158) & 1) != 0) {
                                  goto LABEL_1156;
                                }
                                goto LABEL_1152;
                              }

                              uint64_t v703 = *(void *)(v622 + 256);
                              int v704 = *(_DWORD *)(*(void *)(v622 + 248) + 372LL);
                              if (v703) {
                                LODWORD(v703) = *(_DWORD *)(v703 + 860);
                              }
                              int v705 = *(_DWORD *)(v622 + 424);
                              *(_DWORD *)buf = 136448002;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v622 + 74;
                              *(_WORD *)&buf[22] = 2080;
                              uint64_t v1051 = (uint64_t)" ";
                              *(_WORD *)v1052 = 1024;
                              *(_DWORD *)&v1052[2] = v704;
                              *(_WORD *)&v1052[6] = 1024;
                              *(_DWORD *)&v1052[8] = v703;
                              *(_WORD *)&v1052[12] = 1024;
                              *(_DWORD *)&v1052[14] = v705;
                              *(_WORD *)&v1052[18] = 2048;
                              *(void *)&v1052[20] = v622;
                              *(_WORD *)&v1052[28] = 2048;
                              *(void *)&v1052[30] = v616;
                              _os_log_impl( &dword_181A5C000,  v702,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                              if ((*(_BYTE *)(v622 + 158) & 1) != 0)
                              {
LABEL_1156:
                                nw_http_transaction_metadata_set_first_on_connection(*(void **)(v622 + 352));
                                uint64_t v715 = nw_protocol_copy_info((uint64_t)loga, 255);
                                uint64_t v651 = (nw_protocol_stack *)v715;
                                if (v715
                                  && (uint64_t v716 = *(void *)(v715 + 24), *(void *)(v715 + 16) != v716)
                                  && (os_log_type_t v717 = *(void **)(v716 - 8)) != 0LL)
                                {
                                  BOOL v718 = (nw_protocol_metadata *)os_retain(v717);
                                  uint64_t v719 = v718;
                                  if (v718 && nw_protocol_metadata_is_tls(v718))
                                  {
                                    uint64_t v719 = v719;
                                    nw_http_connection_metadata_set_sec_metadata(*((void **)v616 + 96), v719);
                                    os_release(v719);
                                    nw_protocol_connect((uint64_t)loga, (uint64_t)v616);
                                    goto LABEL_1165;
                                  }
                                }

                                else
                                {
                                  uint64_t v719 = 0LL;
                                }

                                if (v616)
                                {
                                  nw_protocol_connect((uint64_t)loga, (uint64_t)v616);
                                  if (!v719) {
                                    goto LABEL_1166;
                                  }
                                  goto LABEL_1165;
                                }

                                __nwlog_obj();
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                                v878 = (char *)_os_log_send_and_compose_impl();
                                v1065[0] = 16;
                                aBlock[0] = 0;
                                if (__nwlog_fault(v878, v1065, aBlock))
                                {
                                  if (v1065[0] == 17)
                                  {
                                    os_log_type_t v879 = (os_log_s *)__nwlog_obj();
                                    os_log_type_t v880 = v1065[0];
                                    if (!os_log_type_enabled(v879, (os_log_type_t)v1065[0])) {
                                      goto LABEL_1748;
                                    }
                                    *(_DWORD *)buf = 136446210;
                                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                                    v881 = "%{public}s called with null connection";
LABEL_1747:
                                    _os_log_impl(&dword_181A5C000, v879, v880, v881, buf, 0xCu);
                                    goto LABEL_1748;
                                  }

                                  if (!aBlock[0])
                                  {
                                    os_log_type_t v879 = (os_log_s *)__nwlog_obj();
                                    os_log_type_t v880 = v1065[0];
                                    if (!os_log_type_enabled(v879, (os_log_type_t)v1065[0])) {
                                      goto LABEL_1748;
                                    }
                                    *(_DWORD *)buf = 136446210;
                                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                                    v881 = "%{public}s called with null connection, backtrace limit exceeded";
                                    goto LABEL_1747;
                                  }

                                  v949 = (char *)__nw_create_backtrace_string();
                                  os_log_type_t v879 = (os_log_s *)__nwlog_obj();
                                  os_log_type_t v880 = v1065[0];
                                  BOOL v950 = os_log_type_enabled(v879, (os_log_type_t)v1065[0]);
                                  if (!v949)
                                  {
                                    if (!v950) {
                                      goto LABEL_1748;
                                    }
                                    *(_DWORD *)buf = 136446210;
                                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                                    v881 = "%{public}s called with null connection, no backtrace";
                                    goto LABEL_1747;
                                  }

                                  if (v950)
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(void *)&buf[14] = v949;
                                    _os_log_impl( &dword_181A5C000,  v879,  v880,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                                  }

                                  free(v949);
                                }

LABEL_1748:
                                if (v878) {
                                  free(v878);
                                }
                                nw_protocol_connect((uint64_t)loga, 0LL);
                                uint64_t v11 = v1042;
                                if (!v719)
                                {
LABEL_1166:
                                  if (!v651) {
                                    goto LABEL_715;
                                  }
                                  goto LABEL_1180;
                                }

LABEL_1165:
                                os_release(v719);
                                goto LABEL_1166;
                              }

LABEL_1152:
                              uint64_t v711 = (os_log_s *)__nwlog_obj();
                              if (os_log_type_enabled(v711, OS_LOG_TYPE_DEBUG))
                              {
                                uint64_t v712 = *(void *)(v622 + 256);
                                int v713 = *(_DWORD *)(*(void *)(v622 + 248) + 372LL);
                                if (v712) {
                                  LODWORD(v712) = *(_DWORD *)(v712 + 860);
                                }
                                int v714 = *(_DWORD *)(v622 + 424);
                                *(_DWORD *)buf = 136448258;
                                *(void *)&uint8_t buf[4] = "nw_http1_start_new_connection_for_stream";
                                *(_WORD *)&buf[12] = 2082;
                                *(void *)&buf[14] = v622 + 74;
                                *(_WORD *)&buf[22] = 2080;
                                uint64_t v1051 = (uint64_t)" ";
                                *(_WORD *)v1052 = 1024;
                                *(_DWORD *)&v1052[2] = v713;
                                *(_WORD *)&v1052[6] = 1024;
                                *(_DWORD *)&v1052[8] = v712;
                                *(_WORD *)&v1052[12] = 1024;
                                *(_DWORD *)&v1052[14] = v714;
                                *(_WORD *)&v1052[18] = 2048;
                                *(void *)&v1052[20] = v616;
                                *(_WORD *)&v1052[28] = 1024;
                                *(_DWORD *)&v1052[30] = v714;
                                *(_WORD *)&v1052[34] = 2048;
                                *(void *)&v1052[36] = v622;
                                _os_log_impl( &dword_181A5C000,  v711,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)",  buf,  0x4Cu);
                              }

                              goto LABEL_1156;
                            }

                            __nwlog_obj();
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                            uint64_t v909 = (char *)_os_log_send_and_compose_impl();
                            v1065[0] = 16;
                            aBlock[0] = 0;
                            if (v1065[0] == 17)
                            {
                              int v910 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v911 = v1065[0];
                              if (!os_log_type_enabled(v910, (os_log_type_t)v1065[0])) {
                                goto LABEL_1816;
                              }
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              uint64_t v912 = "%{public}s called with null http1_stream->protocol_http1";
                            }

                            else if (aBlock[0])
                            {
                              uint64_t v961 = (char *)__nw_create_backtrace_string();
                              int v910 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v911 = v1065[0];
                              BOOL v962 = os_log_type_enabled(v910, (os_log_type_t)v1065[0]);
                              if (v961)
                              {
                                if (v962)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = v961;
                                  _os_log_impl( &dword_181A5C000,  v910,  v911,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                                }

                                free(v961);
                                goto LABEL_1816;
                              }

                              if (!v962)
                              {
LABEL_1816:
                                if (v909) {
                                  free(v909);
                                }
                                goto LABEL_1798;
                              }

                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              uint64_t v912 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                            }

                            else
                            {
                              int v910 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v911 = v1065[0];
                              if (!os_log_type_enabled(v910, (os_log_type_t)v1065[0])) {
                                goto LABEL_1816;
                              }
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              uint64_t v912 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                            }

                            _os_log_impl(&dword_181A5C000, v910, v911, v912, buf, 0xCu);
                            goto LABEL_1816;
                          }

                          __nwlog_obj();
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                          uint64_t v905 = (char *)_os_log_send_and_compose_impl();
                          v1065[0] = 16;
                          aBlock[0] = 0;
                          if (__nwlog_fault(v905, v1065, aBlock))
                          {
                            if (v1065[0] == 17)
                            {
                              uint64_t v906 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v907 = v1065[0];
                              if (!os_log_type_enabled(v906, (os_log_type_t)v1065[0])) {
                                goto LABEL_1809;
                              }
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                              v908 = "%{public}s called with null parameters";
LABEL_1808:
                              _os_log_impl(&dword_181A5C000, v906, v907, v908, buf, 0xCu);
                              goto LABEL_1809;
                            }

                            if (!aBlock[0])
                            {
                              uint64_t v906 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v907 = v1065[0];
                              if (!os_log_type_enabled(v906, (os_log_type_t)v1065[0])) {
                                goto LABEL_1809;
                              }
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                              v908 = "%{public}s called with null parameters, backtrace limit exceeded";
                              goto LABEL_1808;
                            }

                            v959 = (char *)__nw_create_backtrace_string();
                            uint64_t v906 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v907 = v1065[0];
                            BOOL v960 = os_log_type_enabled(v906, (os_log_type_t)v1065[0]);
                            if (!v959)
                            {
                              if (!v960) {
                                goto LABEL_1809;
                              }
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                              v908 = "%{public}s called with null parameters, no backtrace";
                              goto LABEL_1808;
                            }

                            if (v960)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v959;
                              _os_log_impl( &dword_181A5C000,  v906,  v907,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
                            }

                            free(v959);
                          }

LABEL_1809:
                          if (v905) {
                            free(v905);
                          }
                          uint64_t v11 = v1042;
                          uint64_t v622 = v1041;
                          int v642 = *v627;
                          if (*v627) {
                            goto LABEL_1061;
                          }
                          goto LABEL_1063;
                        }

LABEL_1881:
                        __break(1u);
                        return result;
                      }

                      __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                      BOOL v884 = (char *)_os_log_send_and_compose_impl();
                      type[0] = 16;
                      LOBYTE(v1045[0]) = 0;
                      if (__nwlog_fault(v884, type, v1045))
                      {
                        if (type[0] == 17)
                        {
                          v885 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v886 = type[0];
                          if (!os_log_type_enabled(v885, (os_log_type_t)type[0])) {
                            goto LABEL_1763;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                          uint64_t v887 = "%{public}s called with null parameters";
                          goto LABEL_1762;
                        }

                        if (!LOBYTE(v1045[0]))
                        {
                          v885 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v886 = type[0];
                          if (!os_log_type_enabled(v885, (os_log_type_t)type[0])) {
                            goto LABEL_1763;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                          uint64_t v887 = "%{public}s called with null parameters, backtrace limit exceeded";
                          goto LABEL_1762;
                        }

                        uint64_t v953 = (char *)__nw_create_backtrace_string();
                        v885 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v886 = type[0];
                        BOOL v956 = os_log_type_enabled(v885, (os_log_type_t)type[0]);
                        if (!v953)
                        {
                          if (!v956) {
                            goto LABEL_1763;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                          uint64_t v887 = "%{public}s called with null parameters, no backtrace";
                          goto LABEL_1762;
                        }

                        if (v956)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v953;
                          v955 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                          goto LABEL_1584;
                        }

                        goto LABEL_1585;
                      }

LABEL_1763:
                      if (!v884) {
                        goto LABEL_1765;
                      }
                      goto LABEL_1764;
                    }

                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                    BOOL v884 = (char *)_os_log_send_and_compose_impl();
                    type[0] = 16;
                    LOBYTE(v1045[0]) = 0;
                    if (type[0] != 17)
                    {
                      if (!LOBYTE(v1045[0]))
                      {
                        v885 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v886 = type[0];
                        if (!os_log_type_enabled(v885, (os_log_type_t)type[0])) {
                          goto LABEL_1763;
                        }
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        uint64_t v887 = "%{public}s called with null endpoint, backtrace limit exceeded";
                        goto LABEL_1762;
                      }

                      uint64_t v953 = (char *)__nw_create_backtrace_string();
                      v885 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v886 = type[0];
                      BOOL v954 = os_log_type_enabled(v885, (os_log_type_t)type[0]);
                      if (!v953)
                      {
                        if (!v954) {
                          goto LABEL_1763;
                        }
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        uint64_t v887 = "%{public}s called with null endpoint, no backtrace";
                        goto LABEL_1762;
                      }

                      if (v954)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v953;
                        v955 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1584:
                        _os_log_impl(&dword_181A5C000, v885, v886, v955, buf, 0x16u);
                      }

LABEL_1585:
                      free(v953);
                      if (!v884)
                      {
LABEL_1765:
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                        v1000 = (char *)_os_log_send_and_compose_impl();
                        v1065[0] = 16;
                        aBlock[0] = 0;
                        if (v1065[0] == 17)
                        {
                          v1001 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v1002 = v1065[0];
                          if (!os_log_type_enabled(v1001, (os_log_type_t)v1065[0])) {
                            goto LABEL_1779;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          v1003 = "%{public}s called with null http1_connection";
                        }

                        else if (aBlock[0])
                        {
                          v1004 = (char *)__nw_create_backtrace_string();
                          v1001 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v1002 = v1065[0];
                          BOOL v1005 = os_log_type_enabled(v1001, (os_log_type_t)v1065[0]);
                          if (v1004)
                          {
                            if (v1005)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v1004;
                              _os_log_impl( &dword_181A5C000,  v1001,  v1002,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                            }

                            free(v1004);
LABEL_1779:
                            if (v1000) {
                              free(v1000);
                            }
                            __nwlog_obj();
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                            v1006 = (char *)_os_log_send_and_compose_impl();
                            v1065[0] = 16;
                            aBlock[0] = 0;
                            if (v1065[0] == 17)
                            {
                              v1007 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v1008 = v1065[0];
                              if (os_log_type_enabled(v1007, (os_log_type_t)v1065[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                v1009 = "%{public}s called with null http1_connection";
LABEL_1794:
                                _os_log_impl(&dword_181A5C000, v1007, v1008, v1009, buf, 0xCu);
                              }
                            }

                            else if (aBlock[0])
                            {
                              v1010 = (char *)__nw_create_backtrace_string();
                              v1007 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v1008 = v1065[0];
                              BOOL v1011 = os_log_type_enabled(v1007, (os_log_type_t)v1065[0]);
                              if (v1010)
                              {
                                if (v1011)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = v1010;
                                  _os_log_impl( &dword_181A5C000,  v1007,  v1008,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                                }

                                free(v1010);
                                goto LABEL_1795;
                              }

                              if (v1011)
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                v1009 = "%{public}s called with null http1_connection, no backtrace";
                                goto LABEL_1794;
                              }
                            }

                            else
                            {
                              v1007 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v1008 = v1065[0];
                              if (os_log_type_enabled(v1007, (os_log_type_t)v1065[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                                v1009 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                                goto LABEL_1794;
                              }
                            }

LABEL_1795:
                            if (v1006) {
                              free(v1006);
                            }
                            BOOL v616 = 0LL;
LABEL_1798:
                            uint64_t v11 = v1042;
                            uint64_t v622 = v1041;
                            if ((*(_BYTE *)(v1041 + 158) & 1) != 0) {
                              goto LABEL_1156;
                            }
                            goto LABEL_1152;
                          }

                          if (!v1005) {
                            goto LABEL_1779;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          v1003 = "%{public}s called with null http1_connection, no backtrace";
                        }

                        else
                        {
                          v1001 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v1002 = v1065[0];
                          if (!os_log_type_enabled(v1001, (os_log_type_t)v1065[0])) {
                            goto LABEL_1779;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          v1003 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                        }

                        _os_log_impl(&dword_181A5C000, v1001, v1002, v1003, buf, 0xCu);
                        goto LABEL_1779;
                      }

LABEL_1764:
                      free(v884);
                      goto LABEL_1765;
                    }

                    v885 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v886 = type[0];
                    if (!os_log_type_enabled(v885, (os_log_type_t)type[0])) {
                      goto LABEL_1763;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                    uint64_t v887 = "%{public}s called with null endpoint";
                  }

                  else
                  {
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                    BOOL v884 = (char *)_os_log_send_and_compose_impl();
                    type[0] = 16;
                    LOBYTE(v1045[0]) = 0;
                    if (type[0] != 17)
                    {
                      if (!LOBYTE(v1045[0]))
                      {
                        v885 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v886 = type[0];
                        if (!os_log_type_enabled(v885, (os_log_type_t)type[0])) {
                          goto LABEL_1763;
                        }
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        uint64_t v887 = "%{public}s called with null output_handler, backtrace limit exceeded";
                        goto LABEL_1762;
                      }

                      uint64_t v951 = (char *)__nw_create_backtrace_string();
                      v885 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v886 = type[0];
                      BOOL v952 = os_log_type_enabled(v885, (os_log_type_t)type[0]);
                      if (!v951)
                      {
                        if (!v952) {
                          goto LABEL_1763;
                        }
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        uint64_t v887 = "%{public}s called with null output_handler, no backtrace";
                        goto LABEL_1762;
                      }

                      if (v952)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v951;
                        _os_log_impl( &dword_181A5C000,  v885,  v886,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v951);
                      goto LABEL_1763;
                    }

                    v885 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v886 = type[0];
                    if (!os_log_type_enabled(v885, (os_log_type_t)type[0])) {
                      goto LABEL_1763;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                    uint64_t v887 = "%{public}s called with null output_handler";
                  }

LABEL_1762:
                  _os_log_impl(&dword_181A5C000, v885, v886, v887, buf, 0xCu);
                  goto LABEL_1763;
                }

                uint64_t v651 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v243 + 320));
                uint64_t v1046 = 0LL;
                v1047 = &v1046;
                uint64_t v1048 = 0x2000000000LL;
                char v1049 = 0;
                *(void *)v1065 = 0LL;
                *(void *)&v1065[8] = v1065;
                *(void *)&v1065[16] = 0x3802000000LL;
                v1066 = __Block_byref_object_copy__39933;
                v1067 = __Block_byref_object_dispose__39934;
                v1068 = 0LL;
                LOBYTE(v1069) = v1069 | 1;
                uint64_t v652 = MEMORY[0x1895F87A8];
                *(void *)uint64_t aBlock = MEMORY[0x1895F87A8];
                *(void *)&aBlock[8] = 0x40000000LL;
                *(void *)&aBlock[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke;
                v1061 = &unk_189BBD6B0;
                v1062 = &v1046;
                v1063 = v1065;
                uint64_t v1064 = v243;
                nw_protocol_stack_iterate_application_protocols(v651, aBlock);
                if (*(void *)(*(void *)&v1065[8] + 40LL)) {
                  goto LABEL_1074;
                }
                int v653 = nw_protocol_stack_copy_transport_protocol(v651);
                BOOL is_quic = nw_protocol_options_is_quic(v653);
                if (v653) {
                  os_release(v653);
                }
                if (!is_quic)
                {
LABEL_1074:
                  *(void *)buf = nw_parameters_shallow_copy(*(void **)(v243 + 320));
                  nw::retained_ptr<nw_endpoint *>::operator=(v243 + 320, buf);
                }

                else
                {
                  uint64_t v655 = *(void **)(v243 + 320);
                  *(void *)buf = v652;
                  *(void *)&buf[8] = 0x40000000LL;
                  *(void *)&buf[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2;
                  uint64_t v1051 = (uint64_t)&unk_189BBD700;
                  *(void *)v1052 = v1065;
                  *(void *)&v1052[8] = &v1046;
                  *(void *)&v1052[16] = v243;
                  *(void *)&v1052[24] = v1042;
                  nw_parameters_enumerate_transformed_parameters(v655, buf);
                }

                uint64_t v656 = *(void **)(*(void *)&v1065[8] + 40LL);
                if (v656)
                {
                  v657 = v656;
                  sec_protocol_options_clear_tls_application_protocols();
                  sec_protocol_options_add_tls_application_protocol(v657, "http/1.1");
                  os_release(v657);
                }

                *((_BYTE *)v1047 + 24) = 0;
                os_log_type_t v658 = *(void **)(v243 + 320);
                v1045[0] = v652;
                v1045[1] = 0x40000000LL;
                v1045[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_73;
                v1045[3] = &unk_189BBD728;
                v1045[4] = &v1046;
                v1045[5] = v243;
                nw_parameters_remove_application_protocol_options_from_protocol_stack(v658, v1045);
                *(_WORD *)(v243 + 428) |= 8u;
                uint64_t v659 = *(unsigned int *)(v1042 + 352) + 1LL;
                uint64_t v660 = v659 << 31 >> 31;
                *(_DWORD *)(v1042 + 352) = v659;
                if (v660 == v659 && (v660 & 0x8000000000000000LL) == 0)
                {
LABEL_1176:
                  uint64_t v722 = *(void *)(v243 + 312);
                  v723 = *(void **)(v243 + 264);
                  *(void *)os_log_type_t type = v652;
                  *(void *)&os_log_type_t type[8] = 0x40000000LL;
                  *(void *)&os_log_type_t type[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_76;
                  uint64_t v1056 = (uint64_t)&unk_189BBD750;
                  *(void *)v1057 = v722;
                  nw_queue_context_async(v723, type);
                  _Block_object_dispose(v1065, 8);
                  if ((v1069 & 1) != 0 && v1068) {
                    os_release(v1068);
                  }
                  _Block_object_dispose(&v1046, 8);
                  uint64_t v11 = v1042;
                  if (!v651) {
                    goto LABEL_715;
                  }
LABEL_1180:
                  os_release(v651);
                  goto LABEL_715;
                }

                __nwlog_obj();
                uint64_t v661 = *(unsigned int *)(v1042 + 352);
                *(_DWORD *)os_log_type_t type = 136446978;
                *(void *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&type[12] = 2082;
                *(void *)&type[14] = "http1->pending_output_handler_count";
                *(_WORD *)&type[22] = 2048;
                uint64_t v1056 = 1LL;
                *(_WORD *)v1057 = 2048;
                *(void *)&v1057[2] = v661;
                int v662 = (char *)_os_log_send_and_compose_impl();
                os_log_type_t v1044 = OS_LOG_TYPE_ERROR;
                char v1043 = 0;
                if (__nwlog_fault(v662, &v1044, &v1043))
                {
                  if (v1044 == OS_LOG_TYPE_FAULT)
                  {
                    int v663 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v664 = v1044;
                    if (os_log_type_enabled(v663, v1044))
                    {
                      uint64_t v665 = *(unsigned int *)(v1042 + 352);
                      *(_DWORD *)os_log_type_t type = 136446978;
                      *(void *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                      *(_WORD *)&type[12] = 2082;
                      *(void *)&type[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&type[22] = 2048;
                      uint64_t v1056 = 1LL;
                      *(_WORD *)v1057 = 2048;
                      *(void *)&v1057[2] = v665;
                      int v666 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1172:
                      _os_log_impl(&dword_181A5C000, v663, v664, v666, type, 0x2Au);
                    }
                  }

                  else if (v1043)
                  {
                    uint64_t v670 = (char *)__nw_create_backtrace_string();
                    int v663 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v664 = v1044;
                    BOOL v671 = os_log_type_enabled(v663, v1044);
                    if (v670)
                    {
                      if (v671)
                      {
                        uint64_t v672 = *(unsigned int *)(v1042 + 352);
                        *(_DWORD *)os_log_type_t type = 136447234;
                        *(void *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                        *(_WORD *)&type[12] = 2082;
                        *(void *)&type[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&type[22] = 2048;
                        uint64_t v1056 = 1LL;
                        *(_WORD *)v1057 = 2048;
                        *(void *)&v1057[2] = v672;
                        __int16 v1058 = 2082;
                        v1059 = v670;
                        _os_log_impl( &dword_181A5C000,  v663,  v664,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  type,  0x34u);
                      }

                      free(v670);
                      uint64_t v243 = v1041;
                      goto LABEL_1173;
                    }

                    uint64_t v243 = v1041;
                    if (v671)
                    {
                      uint64_t v721 = *(unsigned int *)(v1042 + 352);
                      *(_DWORD *)os_log_type_t type = 136446978;
                      *(void *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                      *(_WORD *)&type[12] = 2082;
                      *(void *)&type[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&type[22] = 2048;
                      uint64_t v1056 = 1LL;
                      *(_WORD *)v1057 = 2048;
                      *(void *)&v1057[2] = v721;
                      int v666 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                      goto LABEL_1172;
                    }
                  }

                  else
                  {
                    int v663 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v664 = v1044;
                    if (os_log_type_enabled(v663, v1044))
                    {
                      uint64_t v720 = *(unsigned int *)(v1042 + 352);
                      *(_DWORD *)os_log_type_t type = 136446978;
                      *(void *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                      *(_WORD *)&type[12] = 2082;
                      *(void *)&type[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&type[22] = 2048;
                      uint64_t v1056 = 1LL;
                      *(_WORD *)v1057 = 2048;
                      *(void *)&v1057[2] = v720;
                      int v666 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_1172;
                    }
                  }
                }

LABEL_1173:
                if (v662) {
                  free(v662);
                }
                *(_DWORD *)(v1042 + 352) = -1;
                goto LABEL_1176;
              }

              if ((*(_BYTE *)(v11 + 158) & 1) == 0)
              {
                if (*((_BYTE *)v15 + 1537))
                {
                  v936 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v936, OS_LOG_TYPE_DEBUG))
                  {
                    int v937 = *(_DWORD *)(v11 + 372);
                    int v938 = *(_DWORD *)(v243 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v11 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v1051 = (uint64_t)" ";
                    *(_WORD *)v1052 = 1024;
                    *(_DWORD *)&v1052[2] = v937;
                    *(_WORD *)&v1052[6] = 1024;
                    *(_DWORD *)&v1052[8] = v938;
                    *(_WORD *)&v1052[12] = 2048;
                    *(void *)&v1052[14] = v243;
                    _os_log_impl( &dword_181A5C000,  v936,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
                  }
                }
              }

              if ((*(_WORD *)(v243 + 428) & 0x1000) == 0)
              {
                __nwlog_obj();
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v243;
                v290 = (char *)_os_log_send_and_compose_impl();
                v1065[0] = 16;
                aBlock[0] = 0;
                if (v1065[0] == 17)
                {
                  uint64_t v291 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v292 = v1065[0];
                  if (!os_log_type_enabled(v291, (os_log_type_t)v1065[0])) {
                    goto LABEL_895;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v243;
                  v293 = "%{public}s stream %p not in pending list, cannot remove";
                }

                else if (aBlock[0])
                {
                  v431 = (char *)__nw_create_backtrace_string();
                  uint64_t v291 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v292 = v1065[0];
                  BOOL v432 = os_log_type_enabled(v291, (os_log_type_t)v1065[0]);
                  if (v431)
                  {
                    if (v432)
                    {
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v243;
                      *(_WORD *)&buf[22] = 2082;
                      uint64_t v1051 = (uint64_t)v431;
                      _os_log_impl( &dword_181A5C000,  v291,  v292,  "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
                    }

                    free(v431);
                    goto LABEL_895;
                  }

                  if (!v432)
                  {
LABEL_895:
                    if (v290) {
                      free(v290);
                    }
                    goto LABEL_1015;
                  }

                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v243;
                  v293 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
                }

                else
                {
                  uint64_t v291 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v292 = v1065[0];
                  if (!os_log_type_enabled(v291, (os_log_type_t)v1065[0])) {
                    goto LABEL_895;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v243;
                  v293 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
                }

                _os_log_impl(&dword_181A5C000, v291, v292, v293, buf, 0x16u);
                goto LABEL_895;
              }

              uint64_t v377 = *(void *)(v243 + 296);
              uint64_t v378 = *(void **)(v243 + 304);
              if (v377)
              {
                *(void *)(v377 + 304) = v378;
                uint64_t v378 = *(void **)(v243 + 304);
              }

              else
              {
                *(void *)(v11 + 256) = v378;
              }

              void *v378 = v377;
              *(void *)(v243 + 296) = 0LL;
              *(void *)(v243 + 304) = 0LL;
              int v443 = *(_DWORD *)(v11 + 348);
              *(_DWORD *)(v11 + 34_Block_object_dispose(&STACK[0x338], 8) = v443 - 1;
              if (v443)
              {
LABEL_1013:
                *(_WORD *)(v243 + 428) &= ~0x1000u;
                if ((*(_BYTE *)(v243 + 158) & 1) == 0)
                {
                  if (*((_BYTE *)v15 + 1537))
                  {
                    v963 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v963, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v964 = v243 + 74;
                      uint64_t v965 = *(void *)(v243 + 256);
                      int v966 = *(_DWORD *)(*(void *)(v243 + 248) + 372LL);
                      if (v965) {
                        LODWORD(v965) = *(_DWORD *)(v965 + 860);
                      }
                      uint64_t v243 = v1041;
                      int v967 = *(_DWORD *)(v1041 + 424);
                      int v968 = *(_DWORD *)(v1042 + 348);
                      *(_DWORD *)buf = 136448258;
                      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v964;
                      *(_WORD *)&buf[22] = 2080;
                      uint64_t v1051 = (uint64_t)" ";
                      *(_WORD *)v1052 = 1024;
                      *(_DWORD *)&v1052[2] = v966;
                      *(_WORD *)&v1052[6] = 1024;
                      *(_DWORD *)&v1052[8] = v965;
                      *(_WORD *)&v1052[12] = 1024;
                      *(_DWORD *)&v1052[14] = v967;
                      *(_WORD *)&v1052[18] = 1024;
                      *(_DWORD *)&v1052[20] = v967;
                      *(_WORD *)&v1052[24] = 2048;
                      *(void *)&v1052[26] = v1041;
                      *(_WORD *)&v1052[34] = 1024;
                      *(_DWORD *)&v1052[36] = v968;
                      _os_log_impl( &dword_181A5C000,  v963,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams",  buf,  0x48u);
                      BOOL v15 = &qword_18C45F000;
                    }
                  }
                }

                goto LABEL_1015;
              }

              __nwlog_obj();
              uint64_t v444 = *(unsigned int *)(v11 + 348);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->pending_stream_count";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v1051 = 1LL;
              *(_WORD *)v1052 = 2048;
              *(void *)&v1052[2] = v444;
              BOOL v445 = (char *)_os_log_send_and_compose_impl();
              v1065[0] = 16;
              aBlock[0] = 0;
              if (__nwlog_fault(v445, v1065, aBlock))
              {
                if (v1065[0] == 17)
                {
                  v446 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v447 = v1065[0];
                  if (os_log_type_enabled(v446, (os_log_type_t)v1065[0]))
                  {
                    uint64_t v448 = *(unsigned int *)(v11 + 348);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->pending_stream_count";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v1051 = 1LL;
                    *(_WORD *)v1052 = 2048;
                    *(void *)&v1052[2] = v448;
                    uint64_t v449 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_1009:
                    _os_log_impl(&dword_181A5C000, v446, v447, v449, buf, 0x2Au);
                  }
                }

                else if (aBlock[0])
                {
                  id v517 = (char *)__nw_create_backtrace_string();
                  v446 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v447 = v1065[0];
                  BOOL v518 = os_log_type_enabled(v446, (os_log_type_t)v1065[0]);
                  if (v517)
                  {
                    if (v518)
                    {
                      uint64_t v519 = *(unsigned int *)(v11 + 348);
                      *(_DWORD *)buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->pending_stream_count";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v1051 = 1LL;
                      *(_WORD *)v1052 = 2048;
                      *(void *)&v1052[2] = v519;
                      *(_WORD *)&v1052[10] = 2082;
                      *(void *)&v1052[12] = v517;
                      _os_log_impl( &dword_181A5C000,  v446,  v447,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                    }

                    free(v517);
                    goto LABEL_1010;
                  }

                  if (v518)
                  {
                    uint64_t v613 = *(unsigned int *)(v11 + 348);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->pending_stream_count";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v1051 = 1LL;
                    *(_WORD *)v1052 = 2048;
                    *(void *)&v1052[2] = v613;
                    uint64_t v449 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                    goto LABEL_1009;
                  }
                }

                else
                {
                  v446 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v447 = v1065[0];
                  if (os_log_type_enabled(v446, (os_log_type_t)v1065[0]))
                  {
                    uint64_t v564 = *(unsigned int *)(v11 + 348);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->pending_stream_count";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v1051 = 1LL;
                    *(_WORD *)v1052 = 2048;
                    *(void *)&v1052[2] = v564;
                    uint64_t v449 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                    goto LABEL_1009;
                  }
                }
              }

LABEL_1010:
              if (v445) {
                free(v445);
              }
              *(_DWORD *)(v11 + 34_Block_object_dispose(&STACK[0x338], 8) = 0;
              uint64_t v243 = v1041;
              goto LABEL_1013;
            }

            if (!*(void *)(v243 + 32))
            {
              if (!(*(_BYTE *)(v243 + 158) & 1 | (*((_BYTE *)v15 + 1537) == 0)))
              {
                uint64_t v361 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v361, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v362 = *(void *)(v243 + 256);
                  int v363 = *(_DWORD *)(*(void *)(v243 + 248) + 372LL);
                  if (v362) {
                    LODWORD(v362) = *(_DWORD *)(v362 + 860);
                  }
                  int v364 = *(_DWORD *)(v1041 + 424);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v243 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v1051 = (uint64_t)" ";
                  *(_WORD *)v1052 = 1024;
                  *(_DWORD *)&v1052[2] = v363;
                  *(_WORD *)&v1052[6] = 1024;
                  *(_DWORD *)&v1052[8] = v362;
                  *(_WORD *)&v1052[12] = 1024;
                  *(_DWORD *)&v1052[14] = v364;
                  *(_WORD *)&v1052[18] = 2048;
                  *(void *)&v1052[20] = v1041;
                  _os_log_impl( &dword_181A5C000,  v361,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Stream %p still awaiting new output handler",  buf,  0x3Cu);
                  uint64_t v11 = v1042;
                }
              }

              goto LABEL_450;
            }

            if (!(*(_BYTE *)(v243 + 158) & 1 | (*((_BYTE *)v15 + 1537) == 0)))
            {
              BOOL v836 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v836, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v837 = v243 + 74;
                uint64_t v838 = *(void *)(v243 + 256);
                int v839 = *(_DWORD *)(*(void *)(v243 + 248) + 372LL);
                if (v838) {
                  LODWORD(v83_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v838 + 860);
                }
                uint64_t v243 = v1041;
                int v840 = *(_DWORD *)(v1041 + 424);
                uint64_t v841 = *(void *)(v1041 + 32);
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v837;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v1051 = (uint64_t)" ";
                *(_WORD *)v1052 = 1024;
                *(_DWORD *)&v1052[2] = v839;
                *(_WORD *)&v1052[6] = 1024;
                *(_DWORD *)&v1052[8] = v838;
                *(_WORD *)&v1052[12] = 1024;
                *(_DWORD *)&v1052[14] = v840;
                *(_WORD *)&v1052[18] = 2048;
                *(void *)&v1052[20] = v1041;
                *(_WORD *)&v1052[28] = 2048;
                *(void *)&v1052[30] = v841;
                _os_log_impl( &dword_181A5C000,  v836,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> creating connection for stream %p with new output_handler %p",  buf,  0x46u);
                BOOL v15 = &qword_18C45F000;
              }
            }

            log = *(_OWORD **)(v243 + 32);
            if (log)
            {
              v296 = *(void **)(v243 + 336);
              if (v296)
              {
                uint64_t v297 = *(void **)(v243 + 320);
                if (v297)
                {
                  uint64_t v298 = calloc(1uLL, 0x370uLL);
                  if (!v298)
                  {
                    BOOL v842 = (os_log_s *)__nwlog_obj();
                    os_log_type_enabled(v842, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "strict_calloc";
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = 1LL;
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v1051 = 880LL;
                    v843 = (void *)_os_log_send_and_compose_impl();
                    BOOL result = __nwlog_abort((uint64_t)v843);
                    if (result) {
                      goto LABEL_1881;
                    }
                    free(v843);
                    BOOL v15 = &qword_18C45F000;
                  }

                  bzero(v298, 0x370uLL);
                  if (nw_protocol_http1_identifier::onceToken != -1) {
                    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
                  }
                  *((void *)v298 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                  *((void *)v298 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                  *((_DWORD *)v298 + 46) = 3;
                  *((void *)v298 + 22) = v298;
                  *((void *)v298 + 5) = v298 + 10;
                  *((void *)v298 + 60) = v1042;
                  nw_protocol_set_output_handler((uint64_t)v298, (uint64_t)log);
                  *(void *)buf = os_retain(v296);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v298 + 47), buf);
                  *(void *)buf = os_retain(v297);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v298 + 46), buf);
                  *(void *)buf = nw_parameters_copy_context(v297);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v298 + 31), buf);
                  *((void *)v298 + 24) = *(void *)(v1042 + 192);
                  uint64_t v299 = MEMORY[0x1895F87A8];
                  __int128 v300 = (void *)*((void *)v298 + 62);
                  *(void *)v1065 = MEMORY[0x1895F87A8];
                  *(void *)&v1065[8] = 0x40000000LL;
                  *(void *)&v1065[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                  v1066 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39882;
                  v1067 = (void (*)(uint64_t))v298;
                  *(void *)buf = nw_http_connection_create_metadata(v300, v1065, 0LL);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v298 + 48), buf);
                  nw_http_connection_metadata_set_version(*((void **)v298 + 96), 3);
                  nw_http_connection_metadata_set_shared_connection_pool_metadata( *((void **)v298 + 96),  *(void **)(v1042 + 312));
                  *((void *)v298 + 77) = 0LL;
                  *((void *)v298 + 7_Block_object_dispose(&STACK[0x338], 8) = (char *)v298 + 616;
                  *((void *)v298 + 79) = 0LL;
                  *((void *)v298 + 80) = (char *)v298 + 632;
                  *((void *)v298 + 81) = 0LL;
                  *((void *)v298 + 82) = (char *)v298 + 648;
                  *((void *)v298 + 83) = 0LL;
                  *((void *)v298 + 84) = (char *)v298 + 664;
                  *((void *)v298 + 86) = (char *)v298 + 680;
                  *((void *)v298 + 85) = 0LL;
                  nw_frame_cache_init((uint64_t)v298 + 696, (uint64_t)v298, 256, 0x40000, 16);
                  uint64_t v301 = *((void *)v298 + 60);
                  if (v301)
                  {
                    *(_OWORD *)((char *)v298 + 360) = 0u;
                    *(_OWORD *)((char *)v298 + 376) = 0u;
                    *(_OWORD *)((char *)v298 + 392) = 0u;
                    *(_OWORD *)((char *)v298 + 40_Block_object_dispose(&STACK[0x338], 8) = 0u;
                    *(_OWORD *)((char *)v298 + 424) = 0u;
                    *(_OWORD *)((char *)v298 + 440) = 0u;
                    *(_OWORD *)((char *)v298 + 32_Block_object_dispose(&STACK[0x338], 8) = 0u;
                    *(_OWORD *)((char *)v298 + 344) = 0u;
                    *((void *)v298 + 59) = nw_http1_on_reset;
                    *((void *)v298 + 37) = nw_http1_on_message_begin;
                    *((void *)v298 + 3_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_url;
                    *((void *)v298 + 4_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_message_complete;
                    *((void *)v298 + 49) = nw_http1_on_url_complete;
                    *((void *)v298 + 39) = nw_http1_on_status;
                    *((void *)v298 + 40) = nw_http1_on_method;
                    *((void *)v298 + 50) = nw_http1_on_status_complete;
                    *((void *)v298 + 51) = nw_http1_on_method_complete;
                    *((void *)v298 + 42) = nw_http1_on_header_field;
                    *((void *)v298 + 43) = nw_http1_on_header_value;
                    *((void *)v298 + 53) = nw_http1_on_header_field_complete;
                    *((void *)v298 + 54) = nw_http1_on_header_value_complete;
                    *((void *)v298 + 46) = nw_http1_on_headers_complete;
                    *((void *)v298 + 47) = nw_http1_on_body;
                    *((void *)v298 + 57) = nw_http1_on_chunk_header;
                    *((void *)v298 + 5_Block_object_dispose(&STACK[0x338], 8) = nw_http1_on_chunk_complete;
                    char v302 = *(_BYTE *)(v301 + 376);
                    *(_OWORD *)((char *)v298 + 24_Block_object_dispose(&STACK[0x338], 8) = 0u;
                    *(_OWORD *)((char *)v298 + 200) = 0u;
                    *(_OWORD *)((char *)v298 + 264) = 0u;
                    *(_OWORD *)((char *)v298 + 232) = 0u;
                    *(_OWORD *)((char *)v298 + 216) = 0u;
                    if ((v302 & 1) != 0) {
                      char v303 = 1;
                    }
                    else {
                      char v303 = 2;
                    }
                    *((_BYTE *)v298 + 272) = v303;
                    *((void *)v298 + 35) = 0LL;
                    *((void *)v298 + 36) = (char *)v298 + 296;
                    *((_WORD *)v298 + 139) = 16131;
                    *((void *)v298 + 31) = v298;
                    *((void *)v298 + 32) = 238LL;
                    uint64_t v304 = v1041;
                    if ((*((_BYTE *)v298 + 158) & 1) == 0)
                    {
                      BOOL v305 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v305, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v306 = *((void *)v298 + 61);
                        int v307 = *(_DWORD *)(*((void *)v298 + 60) + 372LL);
                        int v308 = *((_DWORD *)v298 + 215);
                        if (v306) {
                          LODWORD(v306) = *(_DWORD *)(v306 + 424);
                        }
                        *(_DWORD *)buf = 136448258;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_log_parser_version";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = (char *)v298 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v1051 = (uint64_t)" ";
                        *(_WORD *)v1052 = 1024;
                        *(_DWORD *)&v1052[2] = v307;
                        *(_WORD *)&v1052[6] = 1024;
                        *(_DWORD *)&v1052[8] = v308;
                        *(_WORD *)&v1052[12] = 1024;
                        *(_DWORD *)&v1052[14] = v306;
                        *(_WORD *)&v1052[18] = 1024;
                        *(_DWORD *)&v1052[20] = 9;
                        *(_WORD *)&v1052[24] = 1024;
                        *(_DWORD *)&v1052[26] = 2;
                        *(_WORD *)&v1052[30] = 1024;
                        *(_DWORD *)&v1052[32] = 1;
                        _os_log_impl( &dword_181A5C000,  v305,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u",  buf,  0x44u);
                      }
                    }

                    goto LABEL_519;
                  }

                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                  v844 = (char *)_os_log_send_and_compose_impl();
                  type[0] = 16;
                  LOBYTE(v1045[0]) = 0;
                  if (__nwlog_fault(v844, type, v1045))
                  {
                    if (type[0] == 17)
                    {
                      v845 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v846 = type[0];
                      if (os_log_type_enabled(v845, (os_log_type_t)type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                        int v847 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_1689:
                        _os_log_impl(&dword_181A5C000, v845, v846, v847, buf, 0xCu);
                      }
                    }

                    else if (LOBYTE(v1045[0]))
                    {
                      BOOL v923 = (char *)__nw_create_backtrace_string();
                      v845 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v846 = type[0];
                      BOOL v924 = os_log_type_enabled(v845, (os_log_type_t)type[0]);
                      if (v923)
                      {
                        if (v924)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v923;
                          _os_log_impl( &dword_181A5C000,  v845,  v846,  "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                        }

                        free(v923);
                        goto LABEL_1690;
                      }

                      if (v924)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                        int v847 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                        goto LABEL_1689;
                      }
                    }

                    else
                    {
                      v845 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v846 = type[0];
                      if (os_log_type_enabled(v845, (os_log_type_t)type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                        int v847 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                        goto LABEL_1689;
                      }
                    }
                  }

LABEL_1690:
                  if (v844) {
                    free(v844);
                  }
                  BOOL v15 = &qword_18C45F000;
                  uint64_t v304 = v1041;
LABEL_519:
                  *(void *)buf = 0LL;
                  *(void *)&buf[8] = buf;
                  *(void *)&buf[16] = 0x2000000000LL;
                  uint64_t v1051 = (uint64_t)v298;
                  *(void *)uint64_t aBlock = v299;
                  *(void *)&aBlock[8] = 0x40000000LL;
                  *(void *)&aBlock[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                  v1061 = &unk_189BBD4F0;
                  v1062 = (uint64_t *)buf;
                  *((void *)v298 + 76) = _Block_copy(aBlock);
                  _Block_object_dispose(buf, 8);
                  if ((*((_BYTE *)v298 + 158) & 1) == 0)
                  {
                    if (*((_BYTE *)v15 + 1537))
                    {
                      uint64_t v856 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v856, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v857 = *((void *)v298 + 61);
                        int v858 = *(_DWORD *)(*((void *)v298 + 60) + 372LL);
                        int v859 = *((_DWORD *)v298 + 215);
                        if (v857) {
                          LODWORD(v857) = *(_DWORD *)(v857 + 424);
                        }
                        *(_DWORD *)buf = 136447746;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = (char *)v298 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v1051 = (uint64_t)" ";
                        *(_WORD *)v1052 = 1024;
                        *(_DWORD *)&v1052[2] = v858;
                        *(_WORD *)&v1052[6] = 1024;
                        *(_DWORD *)&v1052[8] = v859;
                        *(_WORD *)&v1052[12] = 1024;
                        *(_DWORD *)&v1052[14] = v857;
                        *(_WORD *)&v1052[18] = 2048;
                        *(void *)&v1052[20] = v298;
                        _os_log_impl( &dword_181A5C000,  v856,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created %p",  buf,  0x3Cu);
                        uint64_t v304 = v1041;
                      }
                    }
                  }

                  uint64_t v309 = (nw_path **)(v298 + 32);
                  nw_protocol_replace_input_handler((uint64_t)log, v304, (uint64_t)v298);
                  *uint64_t v298 = *log;
                  BOOL v310 = (void *)*((void *)v298 + 92);
                  uint64_t v11 = v1042;
                  if (v310)
                  {
                    if (!*((void *)v298 + 66))
                    {
                      uint64_t v311 = (void **)(v298 + 35);
                      id v312 = nw_parameters_copy_context(*((void **)v298 + 92));
                      *(void *)buf = nw_path_copy_flow_registration(v312, (uint64_t)v298);
                      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v298 + 35), buf);
                      uint64_t v313 = (void *)*((void *)v298 + 70);
                      if (v313)
                      {
                        id v314 = nw_path_flow_registration_copy_endpoint(v313);
                        id v315 = nw_path_flow_registration_copy_parameters(*v311);
                        *(void *)buf = nw_endpoint_copy_association_with_evaluator(v314, v315, 0LL);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v298 + 33), buf);
                        if (*((void *)v298 + 66))
                        {
                          *(void *)buf = nw_protocol_instance_stub_create((nw_protocol *)v298);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v298 + 34), buf);
                          nw_association_register_internal( *((void **)v298 + 66),  v310,  *((void **)v298 + 68),  0,  0,  &__block_literal_global_65);
                          id v316 = nw_association_copy_current_path(*((void **)v298 + 66), v315);
                          if (v316)
                          {
                            __int128 v317 = v316;
                            __int128 v318 = (nw_path *)nw_path_copy_for_flow_registration(v316, *v311);
                            if (v318)
                            {
                              v319 = v318;
                              if (*v309 != v318)
                              {
                                *(void *)buf = os_retain(v318);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v298 + 32), buf);
                              }

                              if (nw_path_has_flows(v319)) {
                                __int16 v320 = 4096;
                              }
                              else {
                                __int16 v320 = 0;
                              }
                              int v321 = *((_WORD *)v298 + 436) & 0xEFFF | (*((unsigned __int8 *)v298 + 874) << 16);
                              *((_WORD *)v298 + 436) = *((_WORD *)v298 + 436) & 0xEFFF | v320;
                              *((_BYTE *)v298 + 874) = BYTE2(v321);
                              id v322 = nw_parameters_copy_effective_proxy_config(v310);
                              if (v322)
                              {
                                BOOL v323 = v322;
                                if (nw_path_has_proxy_config(v317, v322))
                                {
                                  *(void *)buf = os_retain(v323);
                                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v298 + 36), buf);
                                }

                                os_release(v323);
                              }

                              os_release(v319);
                            }

                            os_release(v317);
                          }
                        }

                        if (v315) {
                          os_release(v315);
                        }
                        uint64_t v11 = v1042;
                        if (v314) {
                          os_release(v314);
                        }
                      }

                      uint64_t v304 = v1041;
                      if (v312) {
                        os_release(v312);
                      }
                    }

                    uint64_t v324 = *v309;
                    if (*v309)
                    {
LABEL_545:
                    }

LABEL_765:
                    if (v328) {
                      free(v328);
                    }
                    uint64_t v11 = v1042;
                    *(_DWORD *)(v1042 + 336) = -1;
LABEL_768:
                    uint64_t v455 = *(unsigned int *)(v11 + 360) + 1LL;
                    uint64_t v456 = v455 << 31 >> 31;
                    *(_DWORD *)(v11 + 360) = v455;
                    if (v456 == v455 && (v456 & 0x8000000000000000LL) == 0) {
                      goto LABEL_787;
                    }
                    __nwlog_obj();
                    uint64_t v457 = *(unsigned int *)(v11 + 360);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v1051 = 1LL;
                    *(_WORD *)v1052 = 2048;
                    *(void *)&v1052[2] = v457;
                    uint64_t v458 = (char *)_os_log_send_and_compose_impl();
                    v1065[0] = 16;
                    aBlock[0] = 0;
                    if (__nwlog_fault(v458, v1065, aBlock))
                    {
                      if (v1065[0] == 17)
                      {
                        uint64_t v459 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v460 = v1065[0];
                        if (os_log_type_enabled(v459, (os_log_type_t)v1065[0]))
                        {
                          uint64_t v461 = *(unsigned int *)(v1042 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v461;
                          uint64_t v462 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_783:
                          _os_log_impl(&dword_181A5C000, v459, v460, v462, buf, 0x2Au);
                        }
                      }

                      else if (aBlock[0])
                      {
                        int v463 = (char *)__nw_create_backtrace_string();
                        uint64_t v459 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v460 = v1065[0];
                        BOOL v464 = os_log_type_enabled(v459, (os_log_type_t)v1065[0]);
                        if (v463)
                        {
                          if (v464)
                          {
                            uint64_t v465 = *(unsigned int *)(v1042 + 360);
                            *(_DWORD *)buf = 136447234;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = "http1->next_connection_log_num";
                            *(_WORD *)&buf[22] = 2048;
                            uint64_t v1051 = 1LL;
                            *(_WORD *)v1052 = 2048;
                            *(void *)&v1052[2] = v465;
                            *(_WORD *)&v1052[10] = 2082;
                            *(void *)&v1052[12] = v463;
                            _os_log_impl( &dword_181A5C000,  v459,  v460,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                          }

                          free(v463);
                          uint64_t v304 = v1041;
                          goto LABEL_784;
                        }

                        uint64_t v304 = v1041;
                        if (v464)
                        {
                          uint64_t v467 = *(unsigned int *)(v1042 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v467;
                          uint64_t v462 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_783;
                        }
                      }

                      else
                      {
                        uint64_t v459 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v460 = v1065[0];
                        if (os_log_type_enabled(v459, (os_log_type_t)v1065[0]))
                        {
                          uint64_t v466 = *(unsigned int *)(v1042 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v466;
                          uint64_t v462 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_783;
                        }
                      }
                    }

LABEL_784:
                    if (v458) {
                      free(v458);
                    }
                    LODWORD(v455) = -1;
                    uint64_t v11 = v1042;
                    *(_DWORD *)(v1042 + 360) = -1;
LABEL_787:
                    *((_DWORD *)v298 + 215) = v455;
                    if ((*((_BYTE *)v298 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        int v860 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v860, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v861 = *((void *)v298 + 61);
                          int v862 = *(_DWORD *)(*((void *)v298 + 60) + 372LL);
                          int v863 = *((_DWORD *)v298 + 215);
                          if (v861) {
                            LODWORD(v861) = *(_DWORD *)(v861 + 424);
                          }
                          uint64_t v11 = v1042;
                          int v864 = *(_DWORD *)(v1042 + 336);
                          *(_DWORD *)buf = 136448002;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = (char *)v298 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v1051 = (uint64_t)" ";
                          *(_WORD *)v1052 = 1024;
                          *(_DWORD *)&v1052[2] = v862;
                          *(_WORD *)&v1052[6] = 1024;
                          *(_DWORD *)&v1052[8] = v863;
                          *(_WORD *)&v1052[12] = 1024;
                          *(_DWORD *)&v1052[14] = v861;
                          *(_WORD *)&v1052[18] = 2048;
                          *(void *)&v1052[20] = v298;
                          *(_WORD *)&v1052[28] = 1024;
                          *(_DWORD *)&v1052[30] = v864;
                          _os_log_impl( &dword_181A5C000,  v860,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections",  buf,  0x42u);
                          uint64_t v304 = v1041;
                        }
                      }
                    }

                    if (*(void *)(v304 + 248))
                    {
                      if (*((void *)v298 + 61))
                      {
                        __nwlog_obj();
                        uint64_t v468 = *((void *)v298 + 61);
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v298;
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v1051 = v468;
                        uint64_t v469 = (char *)_os_log_send_and_compose_impl();
                        v1065[0] = 16;
                        aBlock[0] = 0;
                        if (v1065[0] == 17)
                        {
                          uint64_t v470 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v471 = v1065[0];
                          if (!os_log_type_enabled(v470, (os_log_type_t)v1065[0])) {
                            goto LABEL_816;
                          }
                          uint64_t v472 = *((void *)v298 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v298;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = v472;
                          os_log_type_t v473 = "%{public}s Connection %p already has a stream (%p)";
                        }

                        else if (aBlock[0])
                        {
                          v486 = (char *)__nw_create_backtrace_string();
                          uint64_t v470 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v471 = v1065[0];
                          BOOL v487 = os_log_type_enabled(v470, (os_log_type_t)v1065[0]);
                          if (v486)
                          {
                            if (v487)
                            {
                              uint64_t v488 = *((void *)v298 + 61);
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v298;
                              *(_WORD *)&buf[22] = 2048;
                              uint64_t v1051 = v488;
                              *(_WORD *)v1052 = 2082;
                              *(void *)&v1052[2] = v486;
                              _os_log_impl( &dword_181A5C000,  v470,  v471,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                            }

                            free(v486);
                            uint64_t v304 = v1041;
                            goto LABEL_816;
                          }

                          uint64_t v304 = v1041;
                          if (!v487)
                          {
LABEL_816:
                            if (v469) {
                              free(v469);
                            }
                            goto LABEL_818;
                          }

                          uint64_t v490 = *((void *)v298 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v298;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = v490;
                          os_log_type_t v473 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                        }

                        else
                        {
                          uint64_t v470 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v471 = v1065[0];
                          if (!os_log_type_enabled(v470, (os_log_type_t)v1065[0])) {
                            goto LABEL_816;
                          }
                          uint64_t v489 = *((void *)v298 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v298;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = v489;
                          os_log_type_t v473 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                        }

                        _os_log_impl(&dword_181A5C000, v470, v471, v473, buf, 0x20u);
                        goto LABEL_816;
                      }

                      *(void *)(v304 + 256) = v298;
                      *((void *)v298 + 61) = v304;
                      nw_protocol_set_output_handler(v304, *((void *)v298 + 4));
                      nw_protocol_set_input_handler((uint64_t)v298, *(void *)(v304 + 48));
                      *(_OWORD *)uint64_t v304 = *v298;
                      __int128 v474 = v1040[5];
                      __int128 v476 = v1040[2];
                      __int128 v475 = v1040[3];
                      v298[8] = v1040[4];
                      v298[9] = v474;
                      v298[6] = v476;
                      v298[7] = v475;
                      __int128 v477 = v1040[1];
                      v298[4] = *v1040;
                      v298[5] = v477;
                      nw_http_transaction_metadata_set_connection_metadata( *(void **)(v304 + 352),  *((void **)v298 + 96));
                      *((_WORD *)v298 + 436) &= 0xFFD7u;
                      *((_DWORD *)v298 + 216) = 1;
                      if ((*((_BYTE *)v298 + 158) & 1) == 0)
                      {
                        __int16 v478 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v478, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v479 = *((void *)v298 + 61);
                          int v480 = *(_DWORD *)(*((void *)v298 + 60) + 372LL);
                          int v481 = *((_DWORD *)v298 + 215);
                          if (v479) {
                            LODWORD(v479) = *(_DWORD *)(v479 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = (char *)v298 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v1051 = (uint64_t)" ";
                          *(_WORD *)v1052 = 1024;
                          *(_DWORD *)&v1052[2] = v480;
                          *(_WORD *)&v1052[6] = 1024;
                          *(_DWORD *)&v1052[8] = v481;
                          *(_WORD *)&v1052[12] = 1024;
                          *(_DWORD *)&v1052[14] = v479;
                          _os_log_impl( &dword_181A5C000,  v478,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                        }
                      }

                      if ((*(_BYTE *)(v304 + 158) & 1) != 0
                        || (int v482 = (os_log_s *)__nwlog_obj(), !os_log_type_enabled(v482, OS_LOG_TYPE_INFO)))
                      {
LABEL_818:
                        if ((*(_BYTE *)(v304 + 158) & 1) != 0) {
                          goto LABEL_823;
                        }
                        goto LABEL_819;
                      }

                      uint64_t v483 = *(void *)(v304 + 256);
                      int v484 = *(_DWORD *)(*(void *)(v304 + 248) + 372LL);
                      if (v483) {
                        LODWORD(v483) = *(_DWORD *)(v483 + 860);
                      }
                      int v485 = *(_DWORD *)(v304 + 424);
                      *(_DWORD *)buf = 136448002;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v304 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      uint64_t v1051 = (uint64_t)" ";
                      *(_WORD *)v1052 = 1024;
                      *(_DWORD *)&v1052[2] = v484;
                      *(_WORD *)&v1052[6] = 1024;
                      *(_DWORD *)&v1052[8] = v483;
                      *(_WORD *)&v1052[12] = 1024;
                      *(_DWORD *)&v1052[14] = v485;
                      *(_WORD *)&v1052[18] = 2048;
                      *(void *)&v1052[20] = v304;
                      *(_WORD *)&v1052[28] = 2048;
                      *(void *)&v1052[30] = v298;
                      _os_log_impl( &dword_181A5C000,  v482,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                      if ((*(_BYTE *)(v304 + 158) & 1) != 0)
                      {
LABEL_823:
                        nw_http_transaction_metadata_set_first_on_connection(*(void **)(v304 + 352));
                        uint64_t v495 = nw_protocol_copy_info((uint64_t)log, 255);
                        uint64_t v496 = (void *)v495;
                        if (v495
                          && (uint64_t v497 = *(void *)(v495 + 24), *(void *)(v495 + 16) != v497)
                          && (int v498 = *(void **)(v497 - 8)) != 0LL)
                        {
                          v499 = (nw_protocol_metadata *)os_retain(v498);
                          uint64_t v500 = v499;
                          if (v499 && nw_protocol_metadata_is_tls(v499))
                          {
                            uint64_t v500 = v500;
                            nw_http_connection_metadata_set_sec_metadata(*((void **)v298 + 96), v500);
                            os_release(v500);
                            nw_protocol_connect((uint64_t)log, (uint64_t)v298);
                            goto LABEL_832;
                          }
                        }

                        else
                        {
                          uint64_t v500 = 0LL;
                        }

                        if (v298)
                        {
                          nw_protocol_connect((uint64_t)log, (uint64_t)v298);
                          if (!v500) {
                            goto LABEL_833;
                          }
                          goto LABEL_832;
                        }

                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                        BOOL v828 = (char *)_os_log_send_and_compose_impl();
                        v1065[0] = 16;
                        aBlock[0] = 0;
                        if (__nwlog_fault(v828, v1065, aBlock))
                        {
                          if (v1065[0] == 17)
                          {
                            v829 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v830 = v1065[0];
                            if (!os_log_type_enabled(v829, (os_log_type_t)v1065[0])) {
                              goto LABEL_1637;
                            }
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            v831 = "%{public}s called with null connection";
LABEL_1636:
                            _os_log_impl(&dword_181A5C000, v829, v830, v831, buf, 0xCu);
                            goto LABEL_1637;
                          }

                          if (!aBlock[0])
                          {
                            v829 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v830 = v1065[0];
                            if (!os_log_type_enabled(v829, (os_log_type_t)v1065[0])) {
                              goto LABEL_1637;
                            }
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            v831 = "%{public}s called with null connection, backtrace limit exceeded";
                            goto LABEL_1636;
                          }

                          BOOL v882 = (char *)__nw_create_backtrace_string();
                          v829 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v830 = v1065[0];
                          BOOL v883 = os_log_type_enabled(v829, (os_log_type_t)v1065[0]);
                          if (!v882)
                          {
                            if (!v883) {
                              goto LABEL_1637;
                            }
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            v831 = "%{public}s called with null connection, no backtrace";
                            goto LABEL_1636;
                          }

                          if (v883)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v882;
                            _os_log_impl( &dword_181A5C000,  v829,  v830,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v882);
                        }

LABEL_1637:
                        if (v828) {
                          free(v828);
                        }
                        nw_protocol_connect((uint64_t)log, 0LL);
                        uint64_t v11 = v1042;
                        uint64_t v304 = v1041;
                        if (!v500)
                        {
LABEL_833:
                          if (v496) {
                            os_release(v496);
                          }
                          nw_protocol_set_output_handler(v11, 0LL);
                          *(_WORD *)(v304 + 428) &= ~8u;
                          int v501 = *(_DWORD *)(v11 + 352);
                          *(_DWORD *)(v11 + 352) = v501 - 1;
                          if (v501) {
                            goto LABEL_715;
                          }
                          __nwlog_obj();
                          uint64_t v502 = *(unsigned int *)(v11 + 352);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v502;
                          uint64_t v503 = (char *)_os_log_send_and_compose_impl();
                          v1065[0] = 16;
                          aBlock[0] = 0;
                          if (v1065[0] == 17)
                          {
                            char v504 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v505 = v1065[0];
                            if (os_log_type_enabled(v504, (os_log_type_t)v1065[0]))
                            {
                              uint64_t v506 = *(unsigned int *)(v11 + 352);
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = "http1->pending_output_handler_count";
                              *(_WORD *)&buf[22] = 2048;
                              uint64_t v1051 = 1LL;
                              *(_WORD *)v1052 = 2048;
                              *(void *)&v1052[2] = v506;
                              uint64_t v507 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_853:
                              _os_log_impl(&dword_181A5C000, v504, v505, v507, buf, 0x2Au);
                            }
                          }

                          else if (aBlock[0])
                          {
                            int v508 = (char *)__nw_create_backtrace_string();
                            char v504 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v505 = v1065[0];
                            BOOL v509 = os_log_type_enabled(v504, (os_log_type_t)v1065[0]);
                            if (v508)
                            {
                              if (v509)
                              {
                                uint64_t v510 = *(unsigned int *)(v11 + 352);
                                *(_DWORD *)buf = 136447234;
                                *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                                *(_WORD *)&buf[12] = 2082;
                                *(void *)&buf[14] = "http1->pending_output_handler_count";
                                *(_WORD *)&buf[22] = 2048;
                                uint64_t v1051 = 1LL;
                                *(_WORD *)v1052 = 2048;
                                *(void *)&v1052[2] = v510;
                                *(_WORD *)&v1052[10] = 2082;
                                *(void *)&v1052[12] = v508;
                                _os_log_impl( &dword_181A5C000,  v504,  v505,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                              }

                              free(v508);
                              goto LABEL_854;
                            }

                            if (v509)
                            {
                              uint64_t v516 = *(unsigned int *)(v11 + 352);
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = "http1->pending_output_handler_count";
                              *(_WORD *)&buf[22] = 2048;
                              uint64_t v1051 = 1LL;
                              *(_WORD *)v1052 = 2048;
                              *(void *)&v1052[2] = v516;
                              uint64_t v507 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                              goto LABEL_853;
                            }
                          }

                          else
                          {
                            char v504 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v505 = v1065[0];
                            if (os_log_type_enabled(v504, (os_log_type_t)v1065[0]))
                            {
                              uint64_t v511 = *(unsigned int *)(v11 + 352);
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = "http1->pending_output_handler_count";
                              *(_WORD *)&buf[22] = 2048;
                              uint64_t v1051 = 1LL;
                              *(_WORD *)v1052 = 2048;
                              *(void *)&v1052[2] = v511;
                              uint64_t v507 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                              goto LABEL_853;
                            }
                          }

LABEL_854:
                          if (v503) {
                            free(v503);
                          }
                          *(_DWORD *)(v11 + 352) = 0;
                          goto LABEL_715;
                        }

LABEL_832:
                        os_release(v500);
                        goto LABEL_833;
                      }

LABEL_819:
                      uint64_t v491 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v491, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v492 = *(void *)(v304 + 256);
                        int v493 = *(_DWORD *)(*(void *)(v304 + 248) + 372LL);
                        if (v492) {
                          LODWORD(v492) = *(_DWORD *)(v492 + 860);
                        }
                        int v494 = *(_DWORD *)(v304 + 424);
                        *(_DWORD *)buf = 136448258;
                        *(void *)&uint8_t buf[4] = "nw_http1_start_new_connection_for_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v304 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v1051 = (uint64_t)" ";
                        *(_WORD *)v1052 = 1024;
                        *(_DWORD *)&v1052[2] = v493;
                        *(_WORD *)&v1052[6] = 1024;
                        *(_DWORD *)&v1052[8] = v492;
                        *(_WORD *)&v1052[12] = 1024;
                        *(_DWORD *)&v1052[14] = v494;
                        *(_WORD *)&v1052[18] = 2048;
                        *(void *)&v1052[20] = v298;
                        *(_WORD *)&v1052[28] = 1024;
                        *(_DWORD *)&v1052[30] = v494;
                        *(_WORD *)&v1052[34] = 2048;
                        *(void *)&v1052[36] = v304;
                        _os_log_impl( &dword_181A5C000,  v491,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)",  buf,  0x4Cu);
                      }

                      goto LABEL_823;
                    }

                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    uint64_t v852 = (char *)_os_log_send_and_compose_impl();
                    v1065[0] = 16;
                    aBlock[0] = 0;
                    if (v1065[0] == 17)
                    {
                      v853 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v854 = v1065[0];
                      if (!os_log_type_enabled(v853, (os_log_type_t)v1065[0])) {
                        goto LABEL_1703;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      BOOL v855 = "%{public}s called with null http1_stream->protocol_http1";
                    }

                    else if (aBlock[0])
                    {
                      int v927 = (char *)__nw_create_backtrace_string();
                      v853 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v854 = v1065[0];
                      BOOL v928 = os_log_type_enabled(v853, (os_log_type_t)v1065[0]);
                      if (v927)
                      {
                        if (v928)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v927;
                          _os_log_impl( &dword_181A5C000,  v853,  v854,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                        }

                        free(v927);
                        goto LABEL_1703;
                      }

                      if (!v928)
                      {
LABEL_1703:
                        if (v852) {
                          free(v852);
                        }
                        goto LABEL_1685;
                      }

                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      BOOL v855 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                    }

                    else
                    {
                      v853 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v854 = v1065[0];
                      if (!os_log_type_enabled(v853, (os_log_type_t)v1065[0])) {
                        goto LABEL_1703;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      BOOL v855 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                    }

                    _os_log_impl(&dword_181A5C000, v853, v854, v855, buf, 0xCu);
                    goto LABEL_1703;
                  }

                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                  int v848 = (char *)_os_log_send_and_compose_impl();
                  v1065[0] = 16;
                  aBlock[0] = 0;
                  if (__nwlog_fault(v848, v1065, aBlock))
                  {
                    if (v1065[0] == 17)
                    {
                      int v849 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v850 = v1065[0];
                      if (!os_log_type_enabled(v849, (os_log_type_t)v1065[0])) {
                        goto LABEL_1696;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      BOOL v851 = "%{public}s called with null parameters";
LABEL_1695:
                      _os_log_impl(&dword_181A5C000, v849, v850, v851, buf, 0xCu);
                      goto LABEL_1696;
                    }

                    if (!aBlock[0])
                    {
                      int v849 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v850 = v1065[0];
                      if (!os_log_type_enabled(v849, (os_log_type_t)v1065[0])) {
                        goto LABEL_1696;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      BOOL v851 = "%{public}s called with null parameters, backtrace limit exceeded";
                      goto LABEL_1695;
                    }

                    uint64_t v925 = (char *)__nw_create_backtrace_string();
                    int v849 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v850 = v1065[0];
                    BOOL v926 = os_log_type_enabled(v849, (os_log_type_t)v1065[0]);
                    if (!v925)
                    {
                      if (!v926) {
                        goto LABEL_1696;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      BOOL v851 = "%{public}s called with null parameters, no backtrace";
                      goto LABEL_1695;
                    }

                    if (v926)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v925;
                      _os_log_impl( &dword_181A5C000,  v849,  v850,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(v925);
                  }

LABEL_1696:
                  if (v848) {
                    free(v848);
                  }
                  uint64_t v11 = v1042;
                  uint64_t v304 = v1041;
                  uint64_t v324 = *v309;
                  if (*v309) {
                    goto LABEL_545;
                  }
                  goto LABEL_547;
                }

                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                BOOL v832 = (char *)_os_log_send_and_compose_impl();
                type[0] = 16;
                LOBYTE(v1045[0]) = 0;
                if (__nwlog_fault(v832, type, v1045))
                {
                  if (type[0] == 17)
                  {
                    v833 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v834 = type[0];
                    if (!os_log_type_enabled(v833, (os_log_type_t)type[0])) {
                      goto LABEL_1650;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                    v835 = "%{public}s called with null parameters";
                    goto LABEL_1649;
                  }

                  if (!LOBYTE(v1045[0]))
                  {
                    v833 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v834 = type[0];
                    if (!os_log_type_enabled(v833, (os_log_type_t)type[0])) {
                      goto LABEL_1650;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                    v835 = "%{public}s called with null parameters, backtrace limit exceeded";
                    goto LABEL_1649;
                  }

                  v896 = (char *)__nw_create_backtrace_string();
                  v833 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v834 = type[0];
                  BOOL v913 = os_log_type_enabled(v833, (os_log_type_t)type[0]);
                  if (!v896)
                  {
                    if (!v913) {
                      goto LABEL_1650;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                    v835 = "%{public}s called with null parameters, no backtrace";
                    goto LABEL_1649;
                  }

                  if (v913)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v896;
                    os_log_type_t v898 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                    goto LABEL_1507;
                  }

                  goto LABEL_1508;
                }

LABEL_1508:
                free(v896);
                if (!v832)
                {
LABEL_1652:
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  v975 = (char *)_os_log_send_and_compose_impl();
                  v1065[0] = 16;
                  aBlock[0] = 0;
                  if (v1065[0] == 17)
                  {
                    v976 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v977 = v1065[0];
                    if (!os_log_type_enabled(v976, (os_log_type_t)v1065[0])) {
                      goto LABEL_1666;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    v978 = "%{public}s called with null http1_connection";
                  }

                  else if (aBlock[0])
                  {
                    v979 = (char *)__nw_create_backtrace_string();
                    v976 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v977 = v1065[0];
                    BOOL v980 = os_log_type_enabled(v976, (os_log_type_t)v1065[0]);
                    if (v979)
                    {
                      if (v980)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v979;
                        _os_log_impl( &dword_181A5C000,  v976,  v977,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v979);
LABEL_1666:
                      if (v975) {
                        free(v975);
                      }
                      __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v981 = (char *)_os_log_send_and_compose_impl();
                      v1065[0] = 16;
                      aBlock[0] = 0;
                      if (v1065[0] == 17)
                      {
                        v982 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v983 = v1065[0];
                        if (os_log_type_enabled(v982, (os_log_type_t)v1065[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v984 = "%{public}s called with null http1_connection";
LABEL_1681:
                          _os_log_impl(&dword_181A5C000, v982, v983, v984, buf, 0xCu);
                        }
                      }

                      else if (aBlock[0])
                      {
                        v985 = (char *)__nw_create_backtrace_string();
                        v982 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v983 = v1065[0];
                        BOOL v986 = os_log_type_enabled(v982, (os_log_type_t)v1065[0]);
                        if (v985)
                        {
                          if (v986)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v985;
                            _os_log_impl( &dword_181A5C000,  v982,  v983,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v985);
                          goto LABEL_1682;
                        }

                        if (v986)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v984 = "%{public}s called with null http1_connection, no backtrace";
                          goto LABEL_1681;
                        }
                      }

                      else
                      {
                        v982 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v983 = v1065[0];
                        if (os_log_type_enabled(v982, (os_log_type_t)v1065[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          v984 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                          goto LABEL_1681;
                        }
                      }

LABEL_1682:
                      if (v981) {
                        free(v981);
                      }
                      uint64_t v298 = 0LL;
LABEL_1685:
                      uint64_t v11 = v1042;
                      uint64_t v304 = v1041;
                      if ((*(_BYTE *)(v1041 + 158) & 1) != 0) {
                        goto LABEL_823;
                      }
                      goto LABEL_819;
                    }

                    if (!v980) {
                      goto LABEL_1666;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    v978 = "%{public}s called with null http1_connection, no backtrace";
                  }

                  else
                  {
                    v976 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v977 = v1065[0];
                    if (!os_log_type_enabled(v976, (os_log_type_t)v1065[0])) {
                      goto LABEL_1666;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    v978 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  }

                  _os_log_impl(&dword_181A5C000, v976, v977, v978, buf, 0xCu);
                  goto LABEL_1666;
                }

LABEL_1651:
                free(v832);
                goto LABEL_1652;
              }

              v833 = (os_log_s *)__nwlog_obj();
              os_log_type_t v834 = type[0];
              if (!os_log_type_enabled(v833, (os_log_type_t)type[0])) {
                goto LABEL_1650;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              v835 = "%{public}s called with null endpoint";
            }

            else
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              BOOL v832 = (char *)_os_log_send_and_compose_impl();
              type[0] = 16;
              LOBYTE(v1045[0]) = 0;
              if (type[0] != 17)
              {
                if (!LOBYTE(v1045[0]))
                {
                  v833 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v834 = type[0];
                  if (!os_log_type_enabled(v833, (os_log_type_t)type[0])) {
                    goto LABEL_1650;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  v835 = "%{public}s called with null output_handler, backtrace limit exceeded";
                  goto LABEL_1649;
                }

                v894 = (char *)__nw_create_backtrace_string();
                v833 = (os_log_s *)__nwlog_obj();
                os_log_type_t v834 = type[0];
                BOOL v895 = os_log_type_enabled(v833, (os_log_type_t)type[0]);
                if (!v894)
                {
                  if (!v895) {
                    goto LABEL_1650;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  v835 = "%{public}s called with null output_handler, no backtrace";
                  goto LABEL_1649;
                }

                if (v895)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v894;
                  _os_log_impl( &dword_181A5C000,  v833,  v834,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v894);
                goto LABEL_1650;
              }

              v833 = (os_log_s *)__nwlog_obj();
              os_log_type_t v834 = type[0];
              if (!os_log_type_enabled(v833, (os_log_type_t)type[0])) {
                goto LABEL_1650;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              v835 = "%{public}s called with null output_handler";
            }

LABEL_912:
              if (!*(void *)(v16 + 488)) {
                goto LABEL_913;
              }
              goto LABEL_921;
            }

            *(_BYTE *)(v16 + 874) = BYTE2(v281);
            unsigned __int16 *v271 = v281 | 0x800;
            uint64_t v282 = *(unsigned int *)(v279 + 368) + 1LL;
            uint64_t v283 = v282 << 31 >> 31;
            *(_DWORD *)(v279 + 36_Block_object_dispose(&STACK[0x338], 8) = v282;
            if (v283 == v282 && (v283 & 0x8000000000000000LL) == 0)
            {
LABEL_907:
              if ((*(_BYTE *)(v16 + 158) & 1) == 0)
              {
                if (*((_BYTE *)v15 + 1537))
                {
                  char v941 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v941, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v942 = *(void *)(v16 + 488);
                    int v943 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                    int v944 = *(_DWORD *)(v16 + 860);
                    if (v942) {
                      LODWORD(v942) = *(_DWORD *)(v942 + 424);
                    }
                    int v945 = *(_DWORD *)(v279 + 368) + *(_DWORD *)(v279 + 364);
                    *(_DWORD *)buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v16 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v1051 = (uint64_t)" ";
                    *(_WORD *)v1052 = 1024;
                    *(_DWORD *)&v1052[2] = v943;
                    *(_WORD *)&v1052[6] = 1024;
                    *(_DWORD *)&v1052[8] = v944;
                    *(_WORD *)&v1052[12] = 1024;
                    *(_DWORD *)&v1052[14] = v942;
                    *(_WORD *)&v1052[18] = 1024;
                    *(_DWORD *)&v1052[20] = v945;
                    _os_log_impl( &dword_181A5C000,  v941,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
                  }
                }
              }

              uint64_t v546 = *(void **)(v16 + 496);
              if (!v546)
              {
                __nwlog_obj();
                *(_DWORD *)v1065 = 136446210;
                *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                int v870 = (char *)_os_log_send_and_compose_impl();
                aBlock[0] = 16;
                type[0] = 0;
                if (aBlock[0] == 17)
                {
                  v871 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v872 = aBlock[0];
                  if (!os_log_type_enabled(v871, (os_log_type_t)aBlock[0])) {
                    goto LABEL_1824;
                  }
                  *(_DWORD *)v1065 = 136446210;
                  *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  os_log_type_t v873 = "%{public}s called with null http1_connection->context";
LABEL_1822:
                  v988 = v1065;
                  goto LABEL_1823;
                }

                if (!type[0])
                {
                  v871 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v872 = aBlock[0];
                  if (!os_log_type_enabled(v871, (os_log_type_t)aBlock[0])) {
                    goto LABEL_1824;
                  }
                  *(_DWORD *)v1065 = 136446210;
                  *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  os_log_type_t v873 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
                  goto LABEL_1822;
                }

                v971 = (char *)__nw_create_backtrace_string();
                v871 = (os_log_s *)__nwlog_obj();
                os_log_type_t v872 = aBlock[0];
                BOOL v972 = os_log_type_enabled(v871, (os_log_type_t)aBlock[0]);
                if (!v971)
                {
                  if (!v972) {
                    goto LABEL_1824;
                  }
                  *(_DWORD *)v1065 = 136446210;
                  *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  os_log_type_t v873 = "%{public}s called with null http1_connection->context, no backtrace";
                  goto LABEL_1822;
                }

                if (v972)
                {
                  *(_DWORD *)v1065 = 136446466;
                  *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  *(_WORD *)&v1065[12] = 2082;
                  *(void *)&v1065[14] = v971;
                  v973 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_1631:
                  _os_log_impl(&dword_181A5C000, v871, v872, v973, v1065, 0x16u);
                }

LABEL_1632:
                free(v971);
                if (!v870)
                {
LABEL_1826:
                  uint64_t v11 = v1042;
                  if (!*(void *)(v16 + 488))
                  {
LABEL_913:
                    uint64_t v549 = *(void *)(v16 + 784);
                    if (v549)
                    {
                      nw_queue_set_timer_values(v549, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                    }

                    else
                    {
                      if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                      {
                        uint64_t v550 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v550, OS_LOG_TYPE_ERROR))
                        {
                          uint64_t v551 = *(void *)(v16 + 488);
                          int v552 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                          int v553 = *(_DWORD *)(v16 + 860);
                          if (v551) {
                            LODWORD(v551) = *(_DWORD *)(v551 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v16 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v1051 = (uint64_t)" ";
                          *(_WORD *)v1052 = 1024;
                          *(_DWORD *)&v1052[2] = v552;
                          *(_WORD *)&v1052[6] = 1024;
                          *(_DWORD *)&v1052[8] = v553;
                          *(_WORD *)&v1052[12] = 1024;
                          *(_DWORD *)&v1052[14] = v551;
                          _os_log_impl( &dword_181A5C000,  v550,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
                        }
                      }

                      uint64_t v554 = *(void *)(v16 + 608);
                      uint64_t v555 = *(void **)(v16 + 496);
                      *(void *)buf = MEMORY[0x1895F87A8];
                      *(void *)&buf[8] = 0x40000000LL;
                      *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                      uint64_t v1051 = (uint64_t)&unk_189BBD518;
                      *(void *)v1052 = v554;
                      nw_queue_context_async(v555, buf);
                    }
                  }

LABEL_921:
                  if (v274) {
                    os_release(v274);
                  }
                  goto LABEL_715;
                }

            goto LABEL_922;
          }

          if (v561 == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            uint32_t v262 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v426 = uu[0];
            if (os_log_type_enabled(v262, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v262,  v426,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_921;
          }

          os_log_type_t v289 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint32_t v262 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v290 = uu[0];
          uint64_t v291 = os_log_type_enabled(v262, (os_log_type_t)uu[0]);
          if (!v289)
          {
            if (v291)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v262, v290, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }

            goto LABEL_921;
          }

          if (v291)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v289;
            _os_log_impl( &dword_181A5C000,  v262,  v290,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v289);
LABEL_922:
          if (v261) {
            free(v261);
          }
          uint64_t v61 = 0LL;
LABEL_117:

          break;
        case 200:
          int v47 = nw_path_copy_endpoint_from_tlv(200, v27, v36);

          int v48 = v47;
          int v553 = v48;
          if (v48) {
            nw_parameters_set_local_endpoint(parameters, v48);
          }

          break;
        case 201:
          if (v552 && !*v552)
          {
            char v88 = nw_path_copy_endpoint_from_tlv(201, v27, v36);

            int v553 = v88;
            if (v553) {
              objc_storeStrong(v552, v88);
            }
          }

          break;
        case 202:
          if (!a4 || *a4) {
            break;
          }
          int v40 = nw_path_copy_browse_descriptor_from_tlv(v27, (unsigned __int8 *)v36, v15);
          if (v40) {
            objc_storeStrong(a4, v40);
          }
          goto LABEL_417;
        case 203:
          uint64_t v550 = v27;
          uint64_t v551 = v36;
          break;
        case 204:
          if (!a5 || *a5) {
            break;
          }
          int v40 = (nw_interface *)nw_path_copy_advertise_descriptor_from_tlv(v27, (uint64_t)v36, v15);
          if (v40) {
            objc_storeStrong(a5, v40);
          }
          goto LABEL_417;
        case 205:
          if (!a3 || *a3) {
            break;
          }
          int v40 = (nw_interface *)nw_path_copy_group_descriptor_from_tlv(v27, (uint64_t)v36, v15);
          if (v40) {
            objc_storeStrong(a3, v40);
          }
          goto LABEL_417;
        case 210:
          if ((_DWORD)v27 == 8) {
            goto LABEL_233;
          }
          if (v27 >= 9)
          {
            __nwlog_obj();
            uint64_t v459 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v459, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 210;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 8;
              _os_log_impl( &dword_181A5C000,  v459,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_233:
            int v120 = *(void *)v36;
            uint64_t v121 = parameters;
            *(void *)(*((void *)parameters + 13) + 56LL) = v120;
          }

          break;
        case 220:
          __nwlog_obj();
          int v40 = (nw_interface *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 220;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 2;
            _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

          goto LABEL_417;
        case 221:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            uint64_t v462 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v462, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 221;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl( &dword_181A5C000,  v462,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }
          }

          if (*v36 == 253)
          {
            uint64_t v129 = parameters;
            int v130 = (nw_protocol_stack *)*((id *)parameters + 19);

            if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
              dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
            }
            int v131 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
            nw_protocol_stack_set_transport_protocol(v130, (nw_protocol_options_t)v131);
          }

          break;
        case 222:
          if (v27 < 0x2A)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v168 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            char v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            BOOL v561 = OS_LOG_TYPE_DEFAULT;
            if (uu[0] == 17)
            {
              __nwlog_obj();
              int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              int v169 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl( &dword_181A5C000,  v92,  v169,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u",  buf,  0x12u);
              }

              goto LABEL_897;
            }

            if (v561)
            {
              int v192 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              int v205 = uu[0];
              uint64_t v206 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
              if (v192)
              {
                if (v206)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = v192;
                  _os_log_impl( &dword_181A5C000,  v92,  v205,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
                }

                goto LABEL_422;
              }

              if (v206)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl( &dword_181A5C000,  v92,  v205,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, no backtrace",  buf,  0x12u);
              }
            }

            else
            {
              __nwlog_obj();
              int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              int v217 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl( &dword_181A5C000,  v92,  v217,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, backtrace limit exceeded",  buf,  0x12u);
              }
            }
          }

          else
          {
            uint64_t v122 = *((unsigned __int16 *)v36 + 20);
            if (v122 + 42 == v27)
            {
              int v123 = *((_OWORD *)v36 + 1);
              *(_OWORD *)buf = *(_OWORD *)v36;
              *(_OWORD *)&buf[16] = v123;
              *(void *)&buf[32] = *((void *)v36 + 4);
              uint64_t v124 = nw_protocol_copy_definition_for_identifier(buf);
              uint64_t v125 = v124;
              if (v124)
              {
                if (*((_WORD *)v36 + 20)) {
                  deserialized_nw_protocol_options_t options = nw_protocol_create_deserialized_options( v124,  (uint64_t)(v36 + 42),  *((unsigned __int16 *)v36 + 20));
                }
                else {
                  deserialized_nw_protocol_options_t options = nw_protocol_create_options(v124);
                }
                uint64_t v214 = deserialized_options;
                if (deserialized_options)
                {
                  int v255 = nw_parameters_copy_default_protocol_stack(parameters);
                  nw_protocol_stack_append_application_protocol(v255, v214);
                }

                else
                {
                  __nwlog_obj();
                  int v255 = (void *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled((os_log_t)v255, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)uu = 136446466;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    *(_WORD *)&uu[12] = 2112;
                    *(void *)&uu[14] = v125;
                    _os_log_impl( &dword_181A5C000,  (os_log_t)v255,  OS_LOG_TYPE_DEFAULT,  "%{public}s Failed to deserialize options for %@",  uu,  0x16u);
                  }
                }
              }

              else
              {
                __nwlog_obj();
                uint64_t v214 = (void *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled((os_log_t)v214, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uu = 136446466;
                  *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&uu[12] = 2080;
                  *(void *)&uu[14] = buf;
                  _os_log_impl( &dword_181A5C000,  (os_log_t)v214,  OS_LOG_TYPE_DEFAULT,  "%{public}s No protocol definition registered for %s",  uu,  0x16u);
                }
              }

              break;
            }

            __nwlog_obj();
            os_log_type_t v199 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v122;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            char v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            BOOL v561 = OS_LOG_TYPE_DEFAULT;
            if (uu[0] == 17)
            {
              __nwlog_obj();
              int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v200 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v122;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl( &dword_181A5C000,  v92,  v200,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u)",  buf,  0x18u);
              }

              goto LABEL_897;
            }

            if (v561)
            {
              int v192 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              int v207 = uu[0];
              int v208 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
              if (v192)
              {
                if (v208)
                {
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v122;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v27;
                  *(_WORD *)&_BYTE buf[24] = 2082;
                  *(void *)&buf[26] = v192;
                  _os_log_impl( &dword_181A5C000,  v92,  v207,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), dumpi ng backtrace:%{public}s",  buf,  0x22u);
                }

                goto LABEL_422;
              }

              if (v208)
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v122;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl( &dword_181A5C000,  v92,  v207,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), no backtrace",  buf,  0x18u);
              }
            }

            else
            {
              __nwlog_obj();
              int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              int v280 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v122;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl( &dword_181A5C000,  v92,  v280,  "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), backtra ce limit exceeded",  buf,  0x18u);
              }
            }
          }

          goto LABEL_897;
        case 230:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            int v437 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v437, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 230;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl( &dword_181A5C000,  v437,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }
          }

          nw_parameters_set_local_address_preference( parameters,  (nw_ip_local_address_preference_t)*v36);
          break;
        case 231:
          if ((_DWORD)v27 == 16) {
            goto LABEL_92;
          }
          __nwlog_obj();
          int v438 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          int v439 = v438;
          if (v27 >= 0x11)
          {
            if (os_log_type_enabled(v438, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl( &dword_181A5C000,  v439,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_92:
            uint64_t v49 = parameters;
            *(_OWORD *)(*((void *)parameters + 13) + 40LL) = *(_OWORD *)v36;

            break;
          }

          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 231;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v27;
          *(_WORD *)&_BYTE buf[24] = 2080;
          *(void *)&buf[26] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 3800;
          char v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          BOOL v561 = OS_LOG_TYPE_DEFAULT;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v466 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3800;
              _os_log_impl( &dword_181A5C000,  v92,  v466,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
            }

            goto LABEL_897;
          }

          if (v561)
          {
            int v192 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v467 = uu[0];
            uint64_t v468 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v192)
            {
              if (v468)
              {
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 231;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                *(_WORD *)&_BYTE buf[24] = 2080;
                *(void *)&buf[26] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = 3800;
                *(_WORD *)&buf[40] = 2082;
                *(void *)&buf[42] = v192;
                _os_log_impl( &dword_181A5C000,  v92,  v467,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
              }

              goto LABEL_422;
            }

            if (v468)
            {
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3800;
              _os_log_impl( &dword_181A5C000,  v92,  v467,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
            }
          }

          else
          {
            __nwlog_obj();
            int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v469 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3800;
              _os_log_impl( &dword_181A5C000,  v92,  v469,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
            }
          }

          goto LABEL_897;
        case 233:
          if ((_DWORD)v27 == 2) {
            goto LABEL_292;
          }
          if (v27 >= 3)
          {
            __nwlog_obj();
            BOOL v464 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v464, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 233;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 2;
              _os_log_impl( &dword_181A5C000,  v464,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_292:
            __int16 v153 = *(unsigned __int16 *)v36;
            uint64_t v154 = parameters;
            *(_DWORD *)(*((void *)parameters + 13) + 96LL) = v153;
          }

          break;
        case 250:
          if ((_DWORD)v27 == 4) {
            goto LABEL_257;
          }
          if (v27 < 5)
          {
            BOOL v132 = 0;
            if (!a9) {
              goto LABEL_267;
            }
LABEL_265:
            if ((v132 & 0x800) != 0) {
              *a9 = 1;
            }
            goto LABEL_267;
          }

          __nwlog_obj();
          int v463 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v463, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 250;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 4;
            _os_log_impl( &dword_181A5C000,  v463,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_257:
          BOOL v132 = *(_DWORD *)v36;
          if ((*(_DWORD *)v36 & 1) != 0)
          {
            uint64_t v133 = parameters;
            *(_DWORD *)(*((void *)parameters + 13) + 103LL) = 2;
          }

          if ((v132 & 0x100) != 0)
          {
            int v134 = parameters;
            *(_WORD *)(*((void *)parameters + 13) + 100LL) |= 0x20u;
          }

          if (v540 && (v132 & 8) != 0) {
            nw_protocol_stack *v540 = 1;
          }
          if (a9) {
            goto LABEL_265;
          }
LABEL_267:
          if ((v132 & 4) != 0)
          {
            uint64_t v135 = parameters;
            *(_WORD *)(*((void *)parameters + 13) + 100LL) |= 1u;
          }

          if ((v132 & 0x1000) != 0)
          {
            uint64_t v136 = parameters;
            *(_WORD *)(*((void *)parameters + 13) + 100LL) |= 2u;
          }

          if ((v132 & 0x4000000) != 0)
          {
            os_log_type_t v137 = parameters;
            *(_WORD *)(*((void *)parameters + 13) + 100LL) |= 4u;
          }

          if ((v132 & 0x20000) != 0)
          {
            os_log_type_t v138 = parameters;
            *(_WORD *)(*((void *)parameters + 13) + 100LL) |= 0x10u;
          }

          if ((v132 & 0x10000) != 0)
          {
            uint64_t v139 = parameters;
            *(_WORD *)(*((void *)parameters + 13) + 108LL) |= 0x4000u;
          }

          if ((v132 & 0x40000) != 0)
          {
            uint64_t v140 = parameters;
            *(_BYTE *)(*((void *)parameters + 13) + 102LL) = 2;
          }

          if ((v132 & 0x80000) != 0)
          {
            uint64_t v141 = parameters;
            *(_WORD *)(*((void *)parameters + 13) + 108LL) |= 0x8000u;
          }

          if ((v132 & 0x200000) != 0)
          {
            uint64_t v142 = parameters;
            int v143 = *((void *)parameters + 13);
            uint64_t v144 = *(_WORD *)(v143 + 108);
            v143 += 108LL;
            *(_BYTE *)(v143 + 2) |= 1u;
            *(_WORD *)int v143 = v144;
          }

          if ((v132 & 0x800000) != 0)
          {
            uint64_t v145 = parameters;
            *((void *)parameters + 12) |= 0x100uLL;
          }

          if ((v132 & 0x1000000) != 0)
          {
            uint64_t v146 = parameters;
            int v147 = *((void *)parameters + 13);
            uint64_t v148 = *(_WORD *)(v147 + 108);
            v147 += 108LL;
            *(_BYTE *)(v147 + 2) |= 2u;
            *(_WORD *)int v147 = v148;
          }

          if ((v132 & 0x2000000) != 0)
          {
            int v149 = parameters;
            int v150 = *((void *)parameters + 13);
            char v151 = *(_WORD *)(v150 + 108);
            v150 += 108LL;
            *(_BYTE *)(v150 + 2) |= 4u;
            *(_WORD *)int v150 = v151;
          }

          HIDWORD(v548) |= (unsigned __int16)(v132 & 0x200) >> 9;
          LODWORD(v549) = v549 | ((unsigned __int16)(v132 & 0x400) >> 10);
          if ((v132 & 0x4000) != 0)
          {
            uint64_t v152 = parameters;
            *(_DWORD *)(*((void *)parameters + 13) + 84LL) = 0;
            *((void *)parameters + 12) = *((void *)parameters + 12) & 0xFFFFFFFFFFFF7F3FLL | 0x8080;
          }

          break;
        case 251:
          uint64_t v563 = 0;
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 68) {
            goto LABEL_94;
          }
          if (v27 >= 0x45)
          {
            __nwlog_obj();
            v440 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v440, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uu = 136446978;
              *(void *)&uu[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&uu[12] = 1024;
              *(_DWORD *)&uu[14] = 251;
              *(_WORD *)&uu[18] = 1024;
              *(_DWORD *)&uu[20] = v27;
              LOWORD(v565) = 1024;
              *(_DWORD *)((char *)&v565 + 2) = 68;
              _os_log_impl( &dword_181A5C000,  v440,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  uu,  0x1Eu);
            }

LABEL_94:
            uint64_t v50 = *((_OWORD *)v36 + 3);
            *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
            *(_OWORD *)&buf[48] = v50;
            uint64_t v563 = *((_DWORD *)v36 + 16);
            os_log_type_t v51 = *((_OWORD *)v36 + 1);
            *(_OWORD *)buf = *(_OWORD *)v36;
            *(_OWORD *)&buf[16] = v51;
            uint64_t v52 = v554;
            if (!v554) {
              uint64_t v52 = nw_demux_create_options();
            }
            uint64_t v554 = v52;
            nw_demux_options_add_pattern( v52,  *(__int16 *)buf,  *(unsigned __int16 *)&buf[2],  (uint64_t)&buf[36],  (uint64_t)&buf[4]);
          }

          break;
        default:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v40 = (nw_interface *)(id)gLogObj;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v26;
            _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_ERROR,  "%{public}s Received unknown client parameter TLV (type %d)",  buf,  0x12u);
          }

          goto LABEL_417;
      }
    }

    if (v20 >= a11 - 5) {
      goto LABEL_1124;
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v470 = (id)gLogObj;
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v27;
  *(_WORD *)&buf[18] = 2048;
  *(void *)&buf[20] = v20;
  *(_WORD *)&buf[28] = 2048;
  *(void *)&buf[30] = a11;
  os_log_type_t v471 = (char *)_os_log_send_and_compose_impl();

  uu[0] = 16;
  BOOL v561 = OS_LOG_TYPE_DEFAULT;
  if (uu[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v472 = (os_log_s *)(id)gLogObj;
    os_log_type_t v473 = uu[0];
    if (os_log_type_enabled(v472, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a11;
      _os_log_impl( &dword_181A5C000,  v472,  v473,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)",  buf,  0x26u);
    }

    goto LABEL_1121;
  }

  if (v561 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v472 = (os_log_s *)(id)gLogObj;
    __int16 v478 = uu[0];
    if (os_log_type_enabled(v472, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a11;
      _os_log_impl( &dword_181A5C000,  v472,  v478,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded",  buf,  0x26u);
    }

    goto LABEL_1121;
  }

  __int128 v474 = __nw_create_backtrace_string();
  if (!v474)
  {
    __nwlog_obj();
    uint64_t v472 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v479 = uu[0];
    if (os_log_type_enabled(v472, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a11;
      _os_log_impl( &dword_181A5C000,  v472,  v479,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace",  buf,  0x26u);
    }

LABEL_1825:
                free(v870);
                goto LABEL_1826;
              }

              uint64_t v547 = *(void *)(v16 + 480);
              uint64_t v11 = v1042;
              if (v547)
              {
                uint64_t v548 = *(void *)(v547 + 200);
                *(void *)buf = MEMORY[0x1895F87A8];
                *(void *)&buf[8] = 0x40000000LL;
                *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
                uint64_t v1051 = (uint64_t)&unk_189BBD540;
                *(void *)v1052 = v548;
                nw_queue_context_async(v546, buf);
                goto LABEL_912;
              }

              __nwlog_obj();
              *(_DWORD *)v1065 = 136446210;
              *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              int v870 = (char *)_os_log_send_and_compose_impl();
              aBlock[0] = 16;
              type[0] = 0;
              if (__nwlog_fault(v870, aBlock, type))
              {
                if (aBlock[0] == 17)
                {
                  v871 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v872 = aBlock[0];
                  if (!os_log_type_enabled(v871, (os_log_type_t)aBlock[0])) {
                    goto LABEL_1824;
                  }
                  *(_DWORD *)v1065 = 136446210;
                  *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  os_log_type_t v873 = "%{public}s called with null http1";
                  goto LABEL_1822;
                }

                if (!type[0])
                {
                  v871 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v872 = aBlock[0];
                  if (!os_log_type_enabled(v871, (os_log_type_t)aBlock[0])) {
                    goto LABEL_1824;
                  }
                  *(_DWORD *)v1065 = 136446210;
                  *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  os_log_type_t v873 = "%{public}s called with null http1, backtrace limit exceeded";
                  goto LABEL_1822;
                }

                v971 = (char *)__nw_create_backtrace_string();
                v871 = (os_log_s *)__nwlog_obj();
                os_log_type_t v872 = aBlock[0];
                BOOL v974 = os_log_type_enabled(v871, (os_log_type_t)aBlock[0]);
                if (!v971)
                {
                  if (!v974) {
                    goto LABEL_1824;
                  }
                  *(_DWORD *)v1065 = 136446210;
                  *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  os_log_type_t v873 = "%{public}s called with null http1, no backtrace";
                  goto LABEL_1822;
                }

                if (v974)
                {
                  *(_DWORD *)v1065 = 136446466;
                  *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  *(_WORD *)&v1065[12] = 2082;
                  *(void *)&v1065[14] = v971;
                  v973 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                  goto LABEL_1631;
                }

                goto LABEL_1632;
              }

LABEL_1824:
              if (!v870) {
                goto LABEL_1826;
              }
              goto LABEL_1825;
            }

            __nwlog_obj();
            uint64_t v284 = *(unsigned int *)(v279 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v1051 = 1LL;
            *(_WORD *)v1052 = 2048;
            *(void *)&v1052[2] = v284;
            unsigned int v285 = (char *)_os_log_send_and_compose_impl();
            v1065[0] = 16;
            aBlock[0] = 0;
            if (__nwlog_fault(v285, v1065, aBlock))
            {
              if (v1065[0] == 17)
              {
                int v286 = (os_log_s *)__nwlog_obj();
                os_log_type_t v287 = v1065[0];
                if (os_log_type_enabled(v286, (os_log_type_t)v1065[0]))
                {
                  uint64_t v288 = *(unsigned int *)(v279 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v1051 = 1LL;
                  *(_WORD *)v1052 = 2048;
                  *(void *)&v1052[2] = v288;
                  os_log_type_t v289 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_903:
                  _os_log_impl(&dword_181A5C000, v286, v287, v289, buf, 0x2Au);
                }
              }

              else if (aBlock[0])
              {
                v440 = (char *)__nw_create_backtrace_string();
                int v286 = (os_log_s *)__nwlog_obj();
                os_log_type_t v287 = v1065[0];
                BOOL v441 = os_log_type_enabled(v286, (os_log_type_t)v1065[0]);
                if (v440)
                {
                  if (v441)
                  {
                    uint64_t v442 = *(unsigned int *)(v279 + 368);
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v1051 = 1LL;
                    *(_WORD *)v1052 = 2048;
                    *(void *)&v1052[2] = v442;
                    *(_WORD *)&v1052[10] = 2082;
                    *(void *)&v1052[12] = v440;
                    _os_log_impl( &dword_181A5C000,  v286,  v287,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                  }

                  free(v440);
                  goto LABEL_904;
                }

                if (v441)
                {
                  uint64_t v545 = *(unsigned int *)(v279 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v1051 = 1LL;
                  *(_WORD *)v1052 = 2048;
                  *(void *)&v1052[2] = v545;
                  os_log_type_t v289 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_903;
                }
              }

              else
              {
                int v286 = (os_log_s *)__nwlog_obj();
                os_log_type_t v287 = v1065[0];
                if (os_log_type_enabled(v286, (os_log_type_t)v1065[0]))
                {
                  uint64_t v520 = *(unsigned int *)(v279 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v1051 = 1LL;
                  *(_WORD *)v1052 = 2048;
                  *(void *)&v1052[2] = v520;
                  os_log_type_t v289 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_903;
                }
              }
            }

LABEL_904:
            if (v285) {
              free(v285);
            }
            *(_DWORD *)(v279 + 36_Block_object_dispose(&STACK[0x338], 8) = -1;
            goto LABEL_907;
          }

          if ((*(_BYTE *)(v11 + 158) & 1) == 0)
          {
            BOOL v346 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v346, OS_LOG_TYPE_ERROR))
            {
              int v347 = *(_DWORD *)(v11 + 372);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v11 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v1051 = (uint64_t)" ";
              *(_WORD *)v1052 = 1024;
              *(_DWORD *)&v1052[2] = v347;
              _os_log_impl( &dword_181A5C000,  v346,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> http1->parameters is NULL when opening responder stream",  buf,  0x26u);
            }
          }

          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
          v348 = (char *)_os_log_send_and_compose_impl();
          v1065[0] = 16;
          aBlock[0] = 0;
          if (__nwlog_fault(v348, v1065, aBlock))
          {
            if (v1065[0] == 17)
            {
              os_log_type_t v349 = (os_log_s *)__nwlog_obj();
              os_log_type_t v350 = v1065[0];
              if (!os_log_type_enabled(v349, (os_log_type_t)v1065[0])) {
                goto LABEL_722;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
              uint64_t v351 = "%{public}s http1->parameters is NULL when opening responder stream";
              goto LABEL_721;
            }

            if (!aBlock[0])
            {
              os_log_type_t v349 = (os_log_s *)__nwlog_obj();
              os_log_type_t v350 = v1065[0];
              if (!os_log_type_enabled(v349, (os_log_type_t)v1065[0])) {
                goto LABEL_722;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
              uint64_t v351 = "%{public}s http1->parameters is NULL when opening responder stream, backtrace limit exceeded";
              goto LABEL_721;
            }

            uint64_t v368 = (char *)__nw_create_backtrace_string();
            os_log_type_t v349 = (os_log_s *)__nwlog_obj();
            os_log_type_t v350 = v1065[0];
            BOOL v369 = os_log_type_enabled(v349, (os_log_type_t)v1065[0]);
            if (v368)
            {
              if (v369)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v368;
                _os_log_impl( &dword_181A5C000,  v349,  v350,  "%{public}s http1->parameters is NULL when opening responder stream, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v368);
              goto LABEL_722;
            }

            if (v369)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_attempt_trigger_new_flow";
              uint64_t v351 = "%{public}s http1->parameters is NULL when opening responder stream, no backtrace";
LABEL_721:
              _os_log_impl(&dword_181A5C000, v349, v350, v351, buf, 0xCu);
            }
          }

LABEL_722:
          if (v348) {
            free(v348);
          }
          goto LABEL_715;
        }

        if ((*(_BYTE *)(v11 + 158) & 1) == 0)
        {
          BOOL v768 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v768, OS_LOG_TYPE_ERROR))
          {
            int v769 = *(_DWORD *)(v1042 + 372);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v1042 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v1051 = (uint64_t)" ";
            *(_WORD *)v1052 = 1024;
            *(_DWORD *)&v1052[2] = v769;
            _os_log_impl( &dword_181A5C000,  v768,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow",  buf,  0x26u);
          }
        }

        int v770 = *v271;
        int v771 = v770 | (*(unsigned __int8 *)(v16 + 874) << 16);
        if ((v770 & 0x100) != 0)
        {
          if ((*(_BYTE *)(v16 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              int v814 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v814, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v815 = *(void *)(v16 + 488);
                int v816 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                int v817 = *(_DWORD *)(v16 + 860);
                if (v815) {
                  LODWORD(v815) = *(_DWORD *)(v815 + 424);
                }
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v1051 = (uint64_t)" ";
                *(_WORD *)v1052 = 1024;
                *(_DWORD *)&v1052[2] = v816;
                *(_WORD *)&v1052[6] = 1024;
                *(_DWORD *)&v1052[8] = v817;
                *(_WORD *)&v1052[12] = 1024;
                *(_DWORD *)&v1052[14] = v815;
                _os_log_impl( &dword_181A5C000,  v814,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already closed",  buf,  0x32u);
                uint64_t v11 = v1042;
                goto LABEL_715;
              }
            }
          }

                BOOL v188 = v534;
                if (v310) {
                  free(v310);
                }
                int v150 = v309;
                goto LABEL_725;
              }

              if (v192 == 30)
              {
                if (!setsockopt(*(_DWORD *)&a1[4].flow_id[12], 41, 62, &v551, 4u)) {
                  goto LABEL_601;
                }
                uint64_t v247 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                uint64_t v248 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  int v553 = "nw_socket_set_common_sockopts";
                  uint64_t v554 = 2080;
                  *(void *)uint64_t v555 = (char *)a1 + 404;
                  *(_WORD *)&v555[8] = 1024;
                  *(_DWORD *)&v555[10] = v247;
                  _os_log_impl( &dword_181A5C000,  v248,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt IPV6_DONTFRAG failed %{darwin.errno}d",  buf,  0x1Cu);
                }

                int v249 = (os_log_s *)__nwlog_obj();
                int v250 = v249;
                if (v247 == 22)
                {
                  if (os_log_type_enabled(v249, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    int v553 = "nw_socket_set_common_sockopts";
                    uint64_t v554 = 1024;
                    *(_DWORD *)uint64_t v555 = 22;
                    _os_log_impl( &dword_181A5C000,  v250,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt IPV6_DONTFRAG failed %{darwin.errno}d",  buf,  0x12u);
                  }

                  goto LABEL_601;
                }

                int v255 = v150;
                *(_DWORD *)buf = 136446466;
                int v553 = "nw_socket_set_common_sockopts";
                uint64_t v554 = 1024;
                *(_DWORD *)uint64_t v555 = v247;
                uint64_t v256 = (char *)_os_log_send_and_compose_impl();
                v547[0] = OS_LOG_TYPE_ERROR;
                v545[0] = OS_LOG_TYPE_DEFAULT;
                if (__nwlog_fault(v256, v547, v545))
                {
                  if (v547[0] == OS_LOG_TYPE_FAULT)
                  {
                    uint64_t v257 = (os_log_s *)__nwlog_obj();
                    int v258 = v547[0];
                    if (os_log_type_enabled(v257, v547[0]))
                    {
                      *(_DWORD *)buf = 136446466;
                      int v553 = "nw_socket_set_common_sockopts";
                      uint64_t v554 = 1024;
                      *(_DWORD *)uint64_t v555 = v247;
                      int v259 = "%{public}s setsockopt IPV6_DONTFRAG failed %{darwin.errno}d";
LABEL_597:
                      _os_log_impl(&dword_181A5C000, v257, v258, v259, buf, 0x12u);
                    }
                  }

                  else if (v545[0])
                  {
                    uint32_t v262 = (char *)__nw_create_backtrace_string();
                    uint64_t v257 = (os_log_s *)__nwlog_obj();
                    int v258 = v547[0];
                    int v263 = os_log_type_enabled(v257, v547[0]);
                    if (v262)
                    {
                      if (v263)
                      {
                        *(_DWORD *)buf = 136446722;
                        int v553 = "nw_socket_set_common_sockopts";
                        uint64_t v554 = 1024;
                        *(_DWORD *)uint64_t v555 = v247;
                        *(_WORD *)&v555[4] = 2082;
                        *(void *)&v555[6] = v262;
                        _os_log_impl( &dword_181A5C000,  v257,  v258,  "%{public}s setsockopt IPV6_DONTFRAG failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                      }

                      free(v262);
                      int v192 = identifier_low;
                      goto LABEL_598;
                    }

                    int v192 = identifier_low;
                    if (v263)
                    {
                      *(_DWORD *)buf = 136446466;
                      int v553 = "nw_socket_set_common_sockopts";
                      uint64_t v554 = 1024;
                      *(_DWORD *)uint64_t v555 = v247;
                      int v259 = "%{public}s setsockopt IPV6_DONTFRAG failed %{darwin.errno}d, no backtrace";
                      goto LABEL_597;
                    }
                  }

                  else
                  {
                    uint64_t v257 = (os_log_s *)__nwlog_obj();
                    int v258 = v547[0];
                    if (os_log_type_enabled(v257, v547[0]))
                    {
                      *(_DWORD *)buf = 136446466;
                      int v553 = "nw_socket_set_common_sockopts";
                      uint64_t v554 = 1024;
                      *(_DWORD *)uint64_t v555 = v247;
                      int v259 = "%{public}s setsockopt IPV6_DONTFRAG failed %{darwin.errno}d, backtrace limit exceeded";
                      goto LABEL_597;
                    }
                  }
                }

LABEL_1736:
          uint64_t v11 = v1042;
          goto LABEL_715;
        }

        *(_BYTE *)(v16 + 874) = BYTE2(v771);
        unsigned __int16 *v271 = v771 | 0x100;
        if ((*(_BYTE *)(v16 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v1016 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v1016, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v1017 = *(void *)(v16 + 488);
              int v1018 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
              int v1019 = *(_DWORD *)(v16 + 860);
              if (v1017) {
                LODWORD(v1017) = *(_DWORD *)(v1017 + 424);
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v16 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v1051 = (uint64_t)" ";
              *(_WORD *)v1052 = 1024;
              *(_DWORD *)&v1052[2] = v1018;
              *(_WORD *)&v1052[6] = 1024;
              *(_DWORD *)&v1052[8] = v1019;
              *(_WORD *)&v1052[12] = 1024;
              *(_DWORD *)&v1052[14] = v1017;
              _os_log_impl( &dword_181A5C000,  v1016,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
            }
          }
        }

        uint64_t v772 = *(void *)(v16 + 480);
        if (!v772)
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          v1012 = (char *)_os_log_send_and_compose_impl();
          v1065[0] = 16;
          aBlock[0] = 0;
          if (v1065[0] == 17)
          {
            v1013 = (os_log_s *)__nwlog_obj();
            os_log_type_t v1014 = v1065[0];
            if (!os_log_type_enabled(v1013, (os_log_type_t)v1065[0])) {
              goto LABEL_1879;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v1015 = "%{public}s called with null http1";
          }

          else if (aBlock[0])
          {
            v1020 = (char *)__nw_create_backtrace_string();
            v1013 = (os_log_s *)__nwlog_obj();
            os_log_type_t v1014 = v1065[0];
            BOOL v1021 = os_log_type_enabled(v1013, (os_log_type_t)v1065[0]);
            if (v1020)
            {
              if (v1021)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v1020;
                _os_log_impl( &dword_181A5C000,  v1013,  v1014,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v1020);
              goto LABEL_1879;
            }

            if (!v1021) {
              goto LABEL_1879;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v1015 = "%{public}s called with null http1, no backtrace";
          }

          else
          {
            v1013 = (os_log_s *)__nwlog_obj();
            os_log_type_t v1014 = v1065[0];
            if (!os_log_type_enabled(v1013, (os_log_type_t)v1065[0])) {
              goto LABEL_1879;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v1015 = "%{public}s called with null http1, backtrace limit exceeded";
          }

          v1031 = buf;
LABEL_1878:
          _os_log_impl(&dword_181A5C000, v1013, v1014, v1015, v1031, 0xCu);
          goto LABEL_1879;
        }

        int v773 = *v271;
        int v774 = v773 | (*(unsigned __int8 *)(v16 + 874) << 16);
        if ((v773 & 0x800) != 0)
        {
          if ((*(_BYTE *)(v16 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              uint64_t v824 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v824, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v825 = *(void *)(v16 + 488);
                int v826 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                int v827 = *(_DWORD *)(v16 + 860);
                if (v825) {
                  LODWORD(v825) = *(_DWORD *)(v825 + 424);
                }
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v1051 = (uint64_t)" ";
                *(_WORD *)v1052 = 1024;
                *(_DWORD *)&v1052[2] = v826;
                *(_WORD *)&v1052[6] = 1024;
                *(_DWORD *)&v1052[8] = v827;
                *(_WORD *)&v1052[12] = 1024;
                *(_DWORD *)&v1052[14] = v825;
                _os_log_impl( &dword_181A5C000,  v824,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
              }
            }
          }

          goto LABEL_1735;
        }

        *(_BYTE *)(v16 + 874) = BYTE2(v774);
        unsigned __int16 *v271 = v774 | 0x800;
        uint64_t v775 = *(unsigned int *)(v772 + 368) + 1LL;
        uint64_t v776 = v775 << 31 >> 31;
        *(_DWORD *)(v772 + 36_Block_object_dispose(&STACK[0x338], 8) = v775;
        if (v776 == v775 && (v776 & 0x8000000000000000LL) == 0)
        {
LABEL_1730:
          if ((*(_BYTE *)(v16 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v1022 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v1022, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v1023 = *(void *)(v16 + 488);
                int v1024 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                int v1025 = *(_DWORD *)(v16 + 860);
                if (v1023) {
                  LODWORD(v1023) = *(_DWORD *)(v1023 + 424);
                }
                int v1026 = *(_DWORD *)(v772 + 368) + *(_DWORD *)(v772 + 364);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v1051 = (uint64_t)" ";
                *(_WORD *)v1052 = 1024;
                *(_DWORD *)&v1052[2] = v1024;
                *(_WORD *)&v1052[6] = 1024;
                *(_DWORD *)&v1052[8] = v1025;
                *(_WORD *)&v1052[12] = 1024;
                *(_DWORD *)&v1052[14] = v1023;
                *(_WORD *)&v1052[18] = 1024;
                *(_DWORD *)&v1052[20] = v1026;
                _os_log_impl( &dword_181A5C000,  v1022,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
              }
            }
          }

          v990 = *(void **)(v16 + 496);
          if (!v990)
          {
            __nwlog_obj();
            *(_DWORD *)v1065 = 136446210;
            *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            v1012 = (char *)_os_log_send_and_compose_impl();
            aBlock[0] = 16;
            type[0] = 0;
            if (aBlock[0] == 17)
            {
              v1013 = (os_log_s *)__nwlog_obj();
              os_log_type_t v1014 = aBlock[0];
              if (!os_log_type_enabled(v1013, (os_log_type_t)aBlock[0])) {
                goto LABEL_1879;
              }
              *(_DWORD *)v1065 = 136446210;
              *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1015 = "%{public}s called with null http1_connection->context";
LABEL_1877:
              v1031 = v1065;
              goto LABEL_1878;
            }

            if (!type[0])
            {
              v1013 = (os_log_s *)__nwlog_obj();
              os_log_type_t v1014 = aBlock[0];
              if (!os_log_type_enabled(v1013, (os_log_type_t)aBlock[0])) {
                goto LABEL_1879;
              }
              *(_DWORD *)v1065 = 136446210;
              *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1015 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
              goto LABEL_1877;
            }

            v1027 = (char *)__nw_create_backtrace_string();
            v1013 = (os_log_s *)__nwlog_obj();
            os_log_type_t v1014 = aBlock[0];
            BOOL v1028 = os_log_type_enabled(v1013, (os_log_type_t)aBlock[0]);
            if (!v1027)
            {
              if (!v1028) {
                goto LABEL_1879;
              }
              *(_DWORD *)v1065 = 136446210;
              *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1015 = "%{public}s called with null http1_connection->context, no backtrace";
              goto LABEL_1877;
            }

            if (!v1028) {
              goto LABEL_1862;
            }
            *(_DWORD *)v1065 = 136446466;
            *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            *(_WORD *)&v1065[12] = 2082;
            *(void *)&v1065[14] = v1027;
            v1029 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
            goto LABEL_1861;
          }

          uint64_t v991 = *(void *)(v16 + 480);
          if (v991)
          {
            uint64_t v992 = *(void *)(v991 + 200);
            *(void *)buf = MEMORY[0x1895F87A8];
            *(void *)&buf[8] = 0x40000000LL;
            *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
            uint64_t v1051 = (uint64_t)&unk_189BBD540;
            *(void *)v1052 = v992;
            nw_queue_context_async(v990, buf);
            goto LABEL_1735;
          }

          __nwlog_obj();
          *(_DWORD *)v1065 = 136446210;
          *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v1012 = (char *)_os_log_send_and_compose_impl();
          aBlock[0] = 16;
          type[0] = 0;
          if (__nwlog_fault(v1012, aBlock, type))
          {
            if (aBlock[0] == 17)
            {
              v1013 = (os_log_s *)__nwlog_obj();
              os_log_type_t v1014 = aBlock[0];
              if (!os_log_type_enabled(v1013, (os_log_type_t)aBlock[0])) {
                goto LABEL_1879;
              }
              *(_DWORD *)v1065 = 136446210;
              *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1015 = "%{public}s called with null http1";
              goto LABEL_1877;
            }

            if (!type[0])
            {
              v1013 = (os_log_s *)__nwlog_obj();
              os_log_type_t v1014 = aBlock[0];
              if (!os_log_type_enabled(v1013, (os_log_type_t)aBlock[0])) {
                goto LABEL_1879;
              }
              *(_DWORD *)v1065 = 136446210;
              *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1015 = "%{public}s called with null http1, backtrace limit exceeded";
              goto LABEL_1877;
            }

            v1027 = (char *)__nw_create_backtrace_string();
            v1013 = (os_log_s *)__nwlog_obj();
            os_log_type_t v1014 = aBlock[0];
            BOOL v1030 = os_log_type_enabled(v1013, (os_log_type_t)aBlock[0]);
            if (!v1027)
            {
              if (!v1030) {
                goto LABEL_1879;
              }
              *(_DWORD *)v1065 = 136446210;
              *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1015 = "%{public}s called with null http1, no backtrace";
              goto LABEL_1877;
            }

            if (!v1030) {
              goto LABEL_1862;
            }
            *(_DWORD *)v1065 = 136446466;
            *(void *)&v1065[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            *(_WORD *)&v1065[12] = 2082;
            *(void *)&v1065[14] = v1027;
            v1029 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_1861:
            _os_log_impl(&dword_181A5C000, v1013, v1014, v1029, v1065, 0x16u);
LABEL_1862:
            free(v1027);
            if (v1012) {
LABEL_1880:
            }
              free(v1012);
LABEL_1735:
            if (!*(void *)(v16 + 488))
            {
              uint64_t v993 = *(void *)(v16 + 784);
              if (v993)
              {
                nw_queue_set_timer_values(v993, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                uint64_t v11 = v1042;
                goto LABEL_715;
              }

              if ((*(_BYTE *)(v16 + 158) & 1) == 0)
              {
                v994 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v994, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v995 = *(void *)(v16 + 488);
                  int v996 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                  int v997 = *(_DWORD *)(v16 + 860);
                  if (v995) {
                    LODWORD(v995) = *(_DWORD *)(v995 + 424);
                  }
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v16 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  uint64_t v1051 = (uint64_t)" ";
                  *(_WORD *)v1052 = 1024;
                  *(_DWORD *)&v1052[2] = v996;
                  *(_WORD *)&v1052[6] = 1024;
                  *(_DWORD *)&v1052[8] = v997;
                  *(_WORD *)&v1052[12] = 1024;
                  *(_DWORD *)&v1052[14] = v995;
                  _os_log_impl( &dword_181A5C000,  v994,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
                }
              }

              uint64_t v998 = *(void *)(v16 + 608);
              v999 = *(void **)(v16 + 496);
              *(void *)buf = MEMORY[0x1895F87A8];
              *(void *)&buf[8] = 0x40000000LL;
              *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
              uint64_t v1051 = (uint64_t)&unk_189BBD518;
              *(void *)v1052 = v998;
              nw_queue_context_async(v999, buf);
            }

            goto LABEL_1736;
          }

LABEL_1879:
          if (!v1012) {
            goto LABEL_1735;
          }
          goto LABEL_1880;
        }

        __nwlog_obj();
        uint64_t v777 = *(unsigned int *)(v772 + 368);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->nonresuable_connections";
        *(_WORD *)&buf[22] = 2048;
        uint64_t v1051 = 1LL;
        *(_WORD *)v1052 = 2048;
        *(void *)&v1052[2] = v777;
        uint64_t v778 = (char *)_os_log_send_and_compose_impl();
        v1065[0] = 16;
        aBlock[0] = 0;
        if (__nwlog_fault(v778, v1065, aBlock))
        {
          if (v1065[0] == 17)
          {
            v779 = (os_log_s *)__nwlog_obj();
            os_log_type_t v780 = v1065[0];
            if (os_log_type_enabled(v779, (os_log_type_t)v1065[0]))
            {
              uint64_t v781 = *(unsigned int *)(v772 + 368);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v1051 = 1LL;
              *(_WORD *)v1052 = 2048;
              *(void *)&v1052[2] = v781;
              v782 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1726:
              _os_log_impl(&dword_181A5C000, v779, v780, v782, buf, 0x2Au);
            }
          }

          else if (aBlock[0])
          {
            v946 = (char *)__nw_create_backtrace_string();
            v779 = (os_log_s *)__nwlog_obj();
            os_log_type_t v780 = v1065[0];
            BOOL v947 = os_log_type_enabled(v779, (os_log_type_t)v1065[0]);
            if (v946)
            {
              if (v947)
              {
                uint64_t v948 = *(unsigned int *)(v772 + 368);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v1051 = 1LL;
                *(_WORD *)v1052 = 2048;
                *(void *)&v1052[2] = v948;
                *(_WORD *)&v1052[10] = 2082;
                *(void *)&v1052[12] = v946;
                _os_log_impl( &dword_181A5C000,  v779,  v780,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
              }

              free(v946);
              goto LABEL_1727;
            }

            if (v947)
            {
              uint64_t v989 = *(unsigned int *)(v772 + 368);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v1051 = 1LL;
              *(_WORD *)v1052 = 2048;
              *(void *)&v1052[2] = v989;
              v782 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_1726;
            }
          }

          else
          {
            v779 = (os_log_s *)__nwlog_obj();
            os_log_type_t v780 = v1065[0];
            if (os_log_type_enabled(v779, (os_log_type_t)v1065[0]))
            {
              uint64_t v987 = *(unsigned int *)(v772 + 368);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v1051 = 1LL;
              *(_WORD *)v1052 = 2048;
              *(void *)&v1052[2] = v987;
              v782 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_1726;
            }
          }
        }

LABEL_1727:
        if (v778) {
          free(v778);
        }
        *(_DWORD *)(v772 + 36_Block_object_dispose(&STACK[0x338], 8) = -1;
        goto LABEL_1730;
      }

LABEL_385:
      if (v219) {
        free(v219);
      }
      *(_DWORD *)(v11 + 352) = 0;
      BOOL v15 = &qword_18C45F000;
      goto LABEL_388;
    }

    __nwlog_obj();
    uint64_t v135 = *(unsigned int *)(v11 + 348);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->pending_stream_count";
    *(_WORD *)&buf[22] = 2048;
    uint64_t v1051 = 1LL;
    *(_WORD *)v1052 = 2048;
    *(void *)&v1052[2] = v135;
    uint64_t v136 = (char *)_os_log_send_and_compose_impl();
    v1065[0] = 16;
    aBlock[0] = 0;
    if (__nwlog_fault(v136, v1065, aBlock))
    {
      if (v1065[0] == 17)
      {
        os_log_type_t v137 = (os_log_s *)__nwlog_obj();
        os_log_type_t v138 = v1065[0];
        if (os_log_type_enabled(v137, (os_log_type_t)v1065[0]))
        {
          uint64_t v139 = *(unsigned int *)(v11 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v1051 = 1LL;
          *(_WORD *)v1052 = 2048;
          *(void *)&v1052[2] = v139;
          uint64_t v140 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_733:
          _os_log_impl(&dword_181A5C000, v137, v138, v140, buf, 0x2Au);
        }
      }

      else if (aBlock[0])
      {
        uint64_t v194 = (char *)__nw_create_backtrace_string();
        os_log_type_t v137 = (os_log_s *)__nwlog_obj();
        os_log_type_t v138 = v1065[0];
        BOOL v195 = os_log_type_enabled(v137, (os_log_type_t)v1065[0]);
        if (v194)
        {
          if (v195)
          {
            uint64_t v196 = *(unsigned int *)(v1042 + 348);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v1051 = 1LL;
            *(_WORD *)v1052 = 2048;
            *(void *)&v1052[2] = v196;
            *(_WORD *)&v1052[10] = 2082;
            *(void *)&v1052[12] = v194;
            _os_log_impl( &dword_181A5C000,  v137,  v138,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v194);
          uint64_t v11 = v1042;
          goto LABEL_734;
        }

        uint64_t v11 = v1042;
        if (v195)
        {
          uint64_t v434 = *(unsigned int *)(v1042 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v1051 = 1LL;
          *(_WORD *)v1052 = 2048;
          *(void *)&v1052[2] = v434;
          uint64_t v140 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_733;
        }
      }

      else
      {
        os_log_type_t v137 = (os_log_s *)__nwlog_obj();
        os_log_type_t v138 = v1065[0];
        if (os_log_type_enabled(v137, (os_log_type_t)v1065[0]))
        {
          uint64_t v382 = *(unsigned int *)(v11 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v1051 = 1LL;
          *(_WORD *)v1052 = 2048;
          *(void *)&v1052[2] = v382;
          uint64_t v140 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_733;
        }
      }
    }

          if (v153) {
            free(v153);
          }
          LODWORD(v21) = 0;
LABEL_388:
          LODWORD(v_Block_object_dispose(&STACK[0x338], 8) = v151 + v8;
          char v178 = *(void *)(a1 + 104);
          if ((!v178 || (*(__int16 *)(v178 + 388) & 0x80000000) == 0) && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v245 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v246 = *(void *)(a1 + 104);
              uint64_t v247 = "";
              uint64_t v248 = v246 == 0;
              int v249 = *(_DWORD *)(v246 + 368);
              int v250 = (const char *)(v246 + 390);
              uint64_t v256 = "send_data_callback_block_invoke";
              uint64_t v257 = 2082;
              if (v248) {
                int v250 = "";
              }
              *(_DWORD *)buf = 136447234;
              if (!v248) {
                uint64_t v247 = " ";
              }
              int v258 = v250;
              int v259 = 2080;
              BOOL v260 = (size_t)v247;
              uint64_t v261 = 1024;
              *(_DWORD *)uint32_t v262 = v249;
              *(_WORD *)&v262[4] = 1024;
              *(_DWORD *)&v262[6] = v151;
              _os_log_impl( &dword_181A5C000,  v245,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> wrote %u bytes of capsule body",  buf,  0x2Cu);
            }
          }

LABEL_1313:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
  uint64_t v512 = (char *)_os_log_send_and_compose_impl();
  v1065[0] = 16;
  aBlock[0] = 0;
  if (v1065[0] != 17)
  {
    if (!aBlock[0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v513 = (os_log_s *)gLogObj;
      os_log_type_t v514 = v1065[0];
      if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
        id v515 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_1327;
      }

      goto LABEL_1328;
    }

    uint64_t v542 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v513 = (os_log_s *)gLogObj;
    os_log_type_t v514 = v1065[0];
    BOOL v798 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0]);
    if (!v542)
    {
      if (v798)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
        id v515 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_1327;
      }

      goto LABEL_1328;
    }

    if (v798)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v542;
      v544 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
      goto LABEL_1321;
    }

LABEL_1322:
    free(v542);
    goto LABEL_1328;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v513 = (os_log_s *)gLogObj;
  os_log_type_t v514 = v1065[0];
  if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
    id v515 = "%{public}s called with null http1_stream";
    goto LABEL_1327;
  }

LABEL_1328:
  if (v512) {
    free(v512);
  }
  return 0LL;
}

uint64_t nw_protocol_http1_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v63 = "nw_http1_get_http1_protocol";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_137;
      }
      *(_DWORD *)buf = 136446210;
      char v63 = "nw_http1_get_http1_protocol";
      uint64_t v32 = "%{public}s called with null protocol";
    }

    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v38 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          char v63 = "nw_http1_get_http1_protocol";
          __int16 v64 = 2082;
          BOOL v65 = (nw_protocol *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_137:
        if (!v29) {
          goto LABEL_139;
        }
LABEL_138:
        free(v29);
        goto LABEL_139;
      }

      if (!v38) {
        goto LABEL_137;
      }
      *(_DWORD *)buf = 136446210;
      char v63 = "nw_http1_get_http1_protocol";
      uint64_t v32 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_137;
      }
      *(_DWORD *)buf = 136446210;
      char v63 = "nw_http1_get_http1_protocol";
      uint64_t v32 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_136;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v63 = "nw_http1_get_http1_protocol";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v60)
      {
        int v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_137;
        }
        *(_DWORD *)buf = 136446210;
        char v63 = "nw_http1_get_http1_protocol";
        uint64_t v32 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_136;
      }

      uint64_t v39 = (char *)__nw_create_backtrace_string();
      int v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v40 = os_log_type_enabled(v30, type);
      if (!v39)
      {
        if (!v40) {
          goto LABEL_137;
        }
        *(_DWORD *)buf = 136446210;
        char v63 = "nw_http1_get_http1_protocol";
        uint64_t v32 = "%{public}s called with null handle, no backtrace";
        goto LABEL_136;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        char v63 = "nw_http1_get_http1_protocol";
        __int16 v64 = 2082;
        BOOL v65 = (nw_protocol *)v39;
        int v41 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_110:
        _os_log_impl(&dword_181A5C000, v30, v31, v41, buf, 0x16u);
      }

BOOL nw_protocol_http1_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v387 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    int v249 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] == 17)
    {
      int v250 = (os_log_s *)__nwlog_obj();
      os_log_type_t v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0])) {
        goto LABEL_613;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      BOOL v252 = "%{public}s called with null protocol";
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v250 = (os_log_s *)__nwlog_obj();
      os_log_type_t v251 = aBlock[0];
      BOOL v263 = os_log_type_enabled(v250, (os_log_type_t)aBlock[0]);
      if (backtrace_string)
      {
        if (v263)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v250,  v251,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_613:
        if (!v249) {
          goto LABEL_615;
        }
LABEL_614:
        free(v249);
        goto LABEL_615;
      }

      if (!v263) {
        goto LABEL_613;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      BOOL v252 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v250 = (os_log_s *)__nwlog_obj();
      os_log_type_t v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0])) {
        goto LABEL_613;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      BOOL v252 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_612;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    int v249 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] != 17)
    {
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        int v250 = (os_log_s *)__nwlog_obj();
        os_log_type_t v251 = aBlock[0];
        if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0])) {
          goto LABEL_613;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        BOOL v252 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_612;
      }

      int v264 = (char *)__nw_create_backtrace_string();
      int v250 = (os_log_s *)__nwlog_obj();
      os_log_type_t v251 = aBlock[0];
      BOOL v265 = os_log_type_enabled(v250, (os_log_type_t)aBlock[0]);
      if (!v264)
      {
        if (!v265) {
          goto LABEL_613;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        BOOL v252 = "%{public}s called with null handle, no backtrace";
        goto LABEL_612;
      }

      if (v265)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v264;
        int v266 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_421:
        _os_log_impl(&dword_181A5C000, v250, v251, v266, buf, 0x16u);
      }

LABEL_630:
    if (v319) {
      free(v319);
    }
    goto LABEL_632;
  }

  uint64_t v10 = (uint64_t *)(handle + 8);
LABEL_17:
  uint64_t v11 = *v10;
  if (*v10)
  {
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v271 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v272 = *(void *)(v11 + 256);
          int v273 = *(_DWORD *)(*(void *)(v11 + 248) + 372LL);
          if (v272) {
            LODWORD(v272) = *(_DWORD *)(v272 + 860);
          }
          int v274 = *(_DWORD *)(v11 + 424);
          *(_DWORD *)buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v273;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v272;
          *(_WORD *)&_BYTE buf[44] = 1024;
          *(_DWORD *)&buf[46] = v274;
          *(_WORD *)&buf[50] = 2048;
          *(void *)&_BYTE buf[52] = v11;
          *(_WORD *)&buf[60] = 2048;
          *(void *)&buf[62] = a2;
          _os_log_impl( &dword_181A5C000,  v271,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream %p with replacement protocol: %p",  buf,  0x46u);
        }
      }
    }

    a2->output_handler_context = 0LL;
    uint64_t v376 = a2;
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
    nw_protocol_set_input_handler(v11, 0LL);
    uint64_t v12 = *(void **)(v11 + 336);
    if (v12)
    {
      uint64_t v13 = os_retain(v12);
      uint64_t v14 = *(void **)(v11 + 320);
      if (v14)
      {
LABEL_22:
        BOOL v15 = os_retain(v14);
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = *(void **)(v11 + 320);
      if (v14) {
        goto LABEL_22;
      }
    }

    BOOL v15 = 0LL;
LABEL_25:
    object = v15;
    if ((*(_WORD *)(v11 + 428) & 0x1000) == 0) {
      goto LABEL_68;
    }
    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v323 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v323, OS_LOG_TYPE_DEBUG))
        {
          int v324 = *(_DWORD *)(v8 + 372);
          int v325 = *(_DWORD *)(v11 + 424);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v8 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v324;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v325;
          *(_WORD *)&_BYTE buf[44] = 2048;
          *(void *)&buf[46] = v11;
          _os_log_impl( &dword_181A5C000,  v323,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
        }
      }
    }

    if ((*(_WORD *)(v11 + 428) & 0x1000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v11;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      aBlock[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (os_log_s *)gLogObj;
        os_log_type_t v18 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v11;
        uint64_t v19 = "%{public}s stream %p not in pending list, cannot remove";
      }

      else if (type)
      {
        int v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (os_log_s *)gLogObj;
        os_log_type_t v18 = aBlock[0];
        BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
        if (v22)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v11;
            *(_WORD *)&buf[22] = 2082;
            *(void *)&_BYTE buf[24] = v22;
            _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v22);
          goto LABEL_56;
        }

        if (!v23)
        {
LABEL_56:
          if (v16) {
            free(v16);
          }
          goto LABEL_58;
        }

        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v11;
        uint64_t v19 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (os_log_s *)gLogObj;
        os_log_type_t v18 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v11;
        uint64_t v19 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0x16u);
      goto LABEL_56;
    }

    uint64_t v20 = *(void *)(v11 + 296);
    uint64_t v21 = *(void **)(v11 + 304);
    if (v20)
    {
      *(void *)(v20 + 304) = v21;
      uint64_t v21 = *(void **)(v11 + 304);
    }

    else
    {
      *(void *)(v8 + 256) = v21;
    }

    *uint64_t v21 = v20;
    *(void *)(v11 + 296) = 0LL;
    *(void *)(v11 + 304) = 0LL;
    int v24 = *(_DWORD *)(v8 + 348);
    *(_DWORD *)(v8 + 34_Block_object_dispose(&STACK[0x338], 8) = v24 - 1;
    if (v24)
    {
LABEL_66:
      *(_WORD *)(v11 + 428) &= ~0x1000u;
      if ((*(_BYTE *)(v11 + 158) & 1) != 0
        || !gLogDatapath
        || (BOOL v338 = (os_log_s *)__nwlog_obj(), !os_log_type_enabled(v338, OS_LOG_TYPE_DEBUG)))
      {
LABEL_68:
        uint64_t v374 = *(void *)(v11 + 256);
        if (!v374) {
          goto LABEL_98;
        }
        if (*(void *)(v11 + 248))
        {
          if (*(void *)(v374 + 488) == v11)
          {
            if ((*(_BYTE *)(v11 + 158) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v45 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
              {
                uint64_t v46 = *(void *)(v11 + 256);
                int v47 = *(_DWORD *)(*(void *)(v11 + 248) + 372LL);
                if (v46) {
                  LODWORD(v46) = *(_DWORD *)(v46 + 860);
                }
                int v48 = *(_DWORD *)(v11 + 424);
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v11 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(void *)&_BYTE buf[24] = " ";
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v47;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v46;
                *(_WORD *)&_BYTE buf[44] = 1024;
                *(_DWORD *)&buf[46] = v48;
                *(_WORD *)&buf[50] = 2048;
                *(void *)&_BYTE buf[52] = v11;
                *(_WORD *)&buf[60] = 2048;
                *(void *)&buf[62] = v374;
                _os_log_impl( &dword_181A5C000,  v45,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p",  buf,  0x46u);
              }
            }

            if (gLogDatapath)
            {
              os_log_type_t v343 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v343, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                _os_log_impl(&dword_181A5C000, v343, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
              }
            }

            *(void *)buf = MEMORY[0x1895F87A8];
            *(void *)&buf[8] = 0x40000000LL;
            *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
            *(void *)&_BYTE buf[24] = &__block_descriptor_tmp_55_39717;
            *(void *)&buf[32] = v374 + 632;
            buf[40] = 0;
            uint64_t v49 = *(void *)(v374 + 632);
            do
            {
              if (!v49) {
                break;
              }
              uint64_t v50 = *(void *)(v49 + 32);
              char v51 = (*(uint64_t (**)(uint8_t *))&buf[16])(buf);
              uint64_t v49 = v50;
            }

            while ((v51 & 1) != 0);
            *(void *)(v11 + 256) = 0LL;
            *(void *)(v374 + 48_Block_object_dispose(&STACK[0x338], 8) = 0LL;
            nw_protocol_set_output_handler(v11, 0LL);
            nw_protocol_set_input_handler(v374, 0LL);
            goto LABEL_97;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v39 = *(void *)(v374 + 488);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v374;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = v11;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v39;
          BOOL v40 = (char *)_os_log_send_and_compose_impl();
          aBlock[0] = 16;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v40, aBlock, &type))
          {
            if (aBlock[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v41 = (os_log_s *)gLogObj;
              os_log_type_t v42 = aBlock[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
                goto LABEL_95;
              }
              uint64_t v43 = *(void *)(v374 + 488);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v374;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&_BYTE buf[24] = v11;
              *(_WORD *)&buf[32] = 2048;
              *(void *)&buf[34] = v43;
              int v44 = "%{public}s Connection %p does not already have stream %p, has %p";
              goto LABEL_94;
            }

            if (type == OS_LOG_TYPE_DEFAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v41 = (os_log_s *)gLogObj;
              os_log_type_t v42 = aBlock[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
                goto LABEL_95;
              }
              uint64_t v55 = *(void *)(v374 + 488);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v374;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&_BYTE buf[24] = v11;
              *(_WORD *)&buf[32] = 2048;
              *(void *)&buf[34] = v55;
              int v44 = "%{public}s Connection %p does not already have stream %p, has %p, backtrace limit exceeded";
              goto LABEL_94;
            }

            os_log_type_t v52 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v41 = (os_log_s *)gLogObj;
            os_log_type_t v42 = aBlock[0];
            BOOL v53 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
            if (v52)
            {
              if (v53)
              {
                uint64_t v54 = *(void *)(v374 + 488);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v374;
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = v11;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v54;
                *(_WORD *)&buf[42] = 2082;
                *(void *)&_BYTE buf[44] = v52;
                _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s Connection %p does not already have stream %p, has %p, dumping backtrace:%{public}s",  buf,  0x34u);
              }

              free(v52);
              goto LABEL_95;
            }

            if (v53)
            {
              uint64_t v56 = *(void *)(v374 + 488);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v374;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&_BYTE buf[24] = v11;
              *(_WORD *)&buf[32] = 2048;
              *(void *)&buf[34] = v56;
              int v44 = "%{public}s Connection %p does not already have stream %p, has %p, no backtrace";
LABEL_94:
              _os_log_impl(&dword_181A5C000, v41, v42, v44, buf, 0x2Au);
            }
          }

                free(v314);
                goto LABEL_631;
              }

LABEL_606:
        BOOL v15 = object;
        if (v307) {
          free(v307);
        }
LABEL_98:
        if ((*(_BYTE *)(v8 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            uint64_t v275 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v275, OS_LOG_TYPE_DEBUG))
            {
              int v276 = *(_DWORD *)(v8 + 372);
              int v277 = *(_DWORD *)(v11 + 424);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v8 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&_BYTE buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v276;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v277;
              *(_WORD *)&_BYTE buf[44] = 2048;
              *(void *)&buf[46] = v11;
              _os_log_impl( &dword_181A5C000,  v275,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream %u (%p)",  buf,  0x36u);
            }
          }
        }

        uint64_t v57 = *(void *)(v11 + 280);
        BOOL v58 = *(void **)(v11 + 288);
        if (v57)
        {
          *(void *)(v57 + 28_Block_object_dispose(&STACK[0x338], 8) = v58;
          BOOL v58 = *(void **)(v11 + 288);
        }

        else
        {
          *(void *)(v8 + 240) = v58;
        }

        *BOOL v58 = v57;
        *(void *)(v11 + 280) = 0LL;
        *(void *)(v11 + 28_Block_object_dispose(&STACK[0x338], 8) = 0LL;
        int v59 = *(_DWORD *)(v8 + 344);
        *(_DWORD *)(v8 + 344) = v59 - 1;
        if (v59)
        {
          if ((*(_WORD *)(v11 + 428) & 8) == 0) {
            goto LABEL_140;
          }
          goto LABEL_123;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v60 = *(unsigned int *)(v8 + 344);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->streams_count";
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = 1LL;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = v60;
        uint64_t v61 = (char *)_os_log_send_and_compose_impl();
        aBlock[0] = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v61, aBlock, &type))
        {
          if (aBlock[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v62 = (os_log_s *)gLogObj;
            os_log_type_t v63 = aBlock[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
              goto LABEL_120;
            }
            uint64_t v64 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->streams_count";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 1LL;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v64;
            BOOL v65 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_119:
            _os_log_impl(&dword_181A5C000, v62, v63, v65, buf, 0x2Au);
            goto LABEL_120;
          }

          if (type == OS_LOG_TYPE_DEFAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v62 = (os_log_s *)gLogObj;
            os_log_type_t v63 = aBlock[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
              goto LABEL_120;
            }
            uint64_t v69 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->streams_count";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 1LL;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v69;
            BOOL v65 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_119;
          }

          __int16 v66 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v62 = (os_log_s *)gLogObj;
          os_log_type_t v63 = aBlock[0];
          BOOL v67 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
          if (!v66)
          {
            if (!v67) {
              goto LABEL_120;
            }
            uint64_t v70 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->streams_count";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 1LL;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v70;
            BOOL v65 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_119;
          }

          if (v67)
          {
            uint64_t v68 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->streams_count";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 1LL;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v68;
            *(_WORD *)&buf[42] = 2082;
            *(void *)&_BYTE buf[44] = v66;
            _os_log_impl( &dword_181A5C000,  v62,  v63,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v66);
        }

          if (v223) {
            free(v223);
          }
          *(_DWORD *)(v217 + 36_Block_object_dispose(&STACK[0x338], 8) = -1;
LABEL_609:
          if ((*(_BYTE *)(v11 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              os_log_type_t v362 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v362, OS_LOG_TYPE_DEBUG))
              {
                int v363 = *(void *)(v11 + 488);
                uint64_t v364 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
                int v365 = *(_DWORD *)(v11 + 860);
                if (v363) {
                  LODWORD(v363) = *(_DWORD *)(v363 + 424);
                }
                int v366 = *(_DWORD *)(v217 + 368) + *(_DWORD *)(v217 + 364);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v11 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(void *)&_BYTE buf[24] = " ";
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v364;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v365;
                *(_WORD *)&_BYTE buf[44] = 1024;
                *(_DWORD *)&buf[46] = v363;
                *(_WORD *)&buf[50] = 1024;
                *(_DWORD *)&_BYTE buf[52] = v366;
                _os_log_impl( &dword_181A5C000,  v362,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
              }
            }
          }

          __int16 v320 = *(void **)(v11 + 496);
          if (v320)
          {
            os_log_type_t v321 = *(void *)(v11 + 480);
            if (v321)
            {
LABEL_613:
              id v322 = *(void *)(v321 + 200);
              *(void *)buf = MEMORY[0x1895F87A8];
              *(void *)&buf[8] = 0x40000000LL;
              *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
              *(void *)&_BYTE buf[24] = &unk_189BBD540;
              *(void *)&buf[32] = v322;
              nw_queue_context_async(v320, buf);
              goto LABEL_614;
            }

LABEL_595:
              if (v289) {
                free(v289);
              }
              goto LABEL_251;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
            uint64_t v267 = (void *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v378 = 0;
            if (__nwlog_fault((const char *)v267, &type, &v378))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                uint32_t v268 = (os_log_s *)__nwlog_obj();
                os_log_type_t v269 = type;
                if (!os_log_type_enabled(v268, type)) {
                  goto LABEL_557;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
                BOOL v270 = "%{public}s called with null parameters";
                goto LABEL_556;
              }

              if (!v378)
              {
                uint32_t v268 = (os_log_s *)__nwlog_obj();
                os_log_type_t v269 = type;
                if (!os_log_type_enabled(v268, type)) {
                  goto LABEL_557;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
                BOOL v270 = "%{public}s called with null parameters, backtrace limit exceeded";
                goto LABEL_556;
              }

              BOOL v328 = (char *)__nw_create_backtrace_string();
              uint32_t v268 = (os_log_s *)__nwlog_obj();
              os_log_type_t v269 = type;
              BOOL v329 = os_log_type_enabled(v268, type);
              if (v328)
              {
                if (v329)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v328;
                  _os_log_impl( &dword_181A5C000,  v268,  v269,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v328);
                if (!v267)
                {
LABEL_559:
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_replace_protocol_instance";
                  uint64_t v344 = (char *)_os_log_send_and_compose_impl();
                  aBlock[0] = 16;
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  if (aBlock[0] == 17)
                  {
                    uint64_t v345 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v346 = aBlock[0];
                    if (!os_log_type_enabled(v345, (os_log_type_t)aBlock[0])) {
                      goto LABEL_573;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_replace_protocol_instance";
                    int v347 = "%{public}s called with null http1_stream";
                  }

                  else if (type)
                  {
                    v348 = (char *)__nw_create_backtrace_string();
                    uint64_t v345 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v346 = aBlock[0];
                    BOOL v349 = os_log_type_enabled(v345, (os_log_type_t)aBlock[0]);
                    if (v348)
                    {
                      if (v349)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_replace_protocol_instance";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v348;
                        _os_log_impl( &dword_181A5C000,  v345,  v346,  "%{public}s called with null http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v348);
LABEL_573:
                      if (v344) {
                        free(v344);
                      }
                      __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
                      os_log_type_t v350 = (char *)_os_log_send_and_compose_impl();
                      aBlock[0] = 16;
                      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                      if (aBlock[0] == 17)
                      {
                        uint64_t v351 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v352 = aBlock[0];
                        if (os_log_type_enabled(v351, (os_log_type_t)aBlock[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
                          uint64_t v353 = "%{public}s called with null http1_stream";
LABEL_588:
                          _os_log_impl(&dword_181A5C000, v351, v352, v353, buf, 0xCu);
                        }
                      }

                      else if (type)
                      {
                        int v354 = (char *)__nw_create_backtrace_string();
                        uint64_t v351 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v352 = aBlock[0];
                        BOOL v355 = os_log_type_enabled(v351, (os_log_type_t)aBlock[0]);
                        if (v354)
                        {
                          if (v355)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v354;
                            _os_log_impl( &dword_181A5C000,  v351,  v352,  "%{public}s called with null http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v354);
                          goto LABEL_589;
                        }

                        if (v355)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
                          uint64_t v353 = "%{public}s called with null http1_stream, no backtrace";
                          goto LABEL_588;
                        }
                      }

                      else
                      {
                        uint64_t v351 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v352 = aBlock[0];
                        if (os_log_type_enabled(v351, (os_log_type_t)aBlock[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_add_input_handler";
                          uint64_t v353 = "%{public}s called with null http1_stream, backtrace limit exceeded";
                          goto LABEL_588;
                        }
                      }

LABEL_632:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
  os_log_type_t v254 = (char *)_os_log_send_and_compose_impl();
  aBlock[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (aBlock[0] != 17)
  {
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v255 = (os_log_s *)gLogObj;
      os_log_type_t v256 = aBlock[0];
      if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
        uint64_t v257 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_646;
      }

      goto LABEL_647;
    }

    uint64_t v304 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v255 = (os_log_s *)gLogObj;
    os_log_type_t v256 = aBlock[0];
    BOOL v357 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
    if (!v304)
    {
      if (v357)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
        uint64_t v257 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_646;
      }

      goto LABEL_647;
    }

    if (v357)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v304;
      uint64_t v306 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
      goto LABEL_640;
    }

LABEL_641:
    free(v304);
    goto LABEL_647;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v255 = (os_log_s *)gLogObj;
  os_log_type_t v256 = aBlock[0];
  if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
    uint64_t v257 = "%{public}s called with null http1_stream";
    goto LABEL_646;
  }

LABEL_647:
  if (v254) {
    free(v254);
  }
  return 0LL;
}

void nw_protocol_http1_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v400 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    id v112 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (v398[0] != 17)
    {
      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        int v113 = (os_log_s *)__nwlog_obj();
        os_log_type_t v114 = v398[0];
        if (!os_log_type_enabled(v113, (os_log_type_t)v398[0])) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        int v115 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_424;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v113 = (os_log_s *)__nwlog_obj();
      os_log_type_t v114 = v398[0];
      BOOL v121 = os_log_type_enabled(v113, (os_log_type_t)v398[0]);
      if (!backtrace_string)
      {
        if (!v121) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        int v115 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_424;
      }

      if (v121)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v113,  v114,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_425;
    }

    int v113 = (os_log_s *)__nwlog_obj();
    os_log_type_t v114 = v398[0];
    if (!os_log_type_enabled(v113, (os_log_type_t)v398[0])) {
      goto LABEL_425;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    int v115 = "%{public}s called with null protocol";
LABEL_424:
    _os_log_impl(&dword_181A5C000, v113, v114, v115, buf, 0xCu);
    goto LABEL_425;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    id v112 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (v398[0] != 17)
    {
      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        int v113 = (os_log_s *)__nwlog_obj();
        os_log_type_t v114 = v398[0];
        if (!os_log_type_enabled(v113, (os_log_type_t)v398[0])) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        int v115 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_424;
      }

      int v122 = (char *)__nw_create_backtrace_string();
      int v113 = (os_log_s *)__nwlog_obj();
      os_log_type_t v114 = v398[0];
      BOOL v123 = os_log_type_enabled(v113, (os_log_type_t)v398[0]);
      if (!v122)
      {
        if (!v123) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        int v115 = "%{public}s called with null handle, no backtrace";
        goto LABEL_424;
      }

      if (v123)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v122;
        uint64_t v124 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_228:
        _os_log_impl(&dword_181A5C000, v113, v114, v124, buf, 0x16u);
      }

LABEL_426:
      free(v112);
      goto LABEL_427;
    }

    int v113 = (os_log_s *)__nwlog_obj();
    os_log_type_t v114 = v398[0];
    if (!os_log_type_enabled(v113, (os_log_type_t)v398[0])) {
      goto LABEL_425;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    int v115 = "%{public}s called with null handle";
    goto LABEL_424;
  }

  int v4 = *((_DWORD *)handle + 6);
  int v5 = (uint64_t *)a1->handle;
  if (v4 == 1) {
    goto LABEL_10;
  }
  if (v4 != 2)
  {
    if (v4 != 3) {
      goto LABEL_427;
    }
    uint64_t v6 = *((void *)handle + 2);
    if (v6)
    {
      int v5 = (uint64_t *)(v6 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    id v112 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v112, v398, v394))
    {
      if (v398[0] == 17)
      {
        int v113 = (os_log_s *)__nwlog_obj();
        os_log_type_t v114 = v398[0];
        if (!os_log_type_enabled(v113, (os_log_type_t)v398[0])) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        int v115 = "%{public}s called with null handle->http1_connection";
        goto LABEL_424;
      }

      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        int v113 = (os_log_s *)__nwlog_obj();
        os_log_type_t v114 = v398[0];
        if (!os_log_type_enabled(v113, (os_log_type_t)v398[0])) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        int v115 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_424;
      }

      int v122 = (char *)__nw_create_backtrace_string();
      int v113 = (os_log_s *)__nwlog_obj();
      os_log_type_t v114 = v398[0];
      BOOL v185 = os_log_type_enabled(v113, (os_log_type_t)v398[0]);
      if (!v122)
      {
        if (!v185) {
          goto LABEL_425;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        int v115 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_424;
      }

      if (v185)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v122;
        uint64_t v124 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_228;
      }

      goto LABEL_229;
    }

    if (v203) {
      free(v203);
    }
LABEL_428:

    _Block_object_dispose(out, 8);
    int v198 = *v114;
    int v116 = lock;
  }

  if (v198 == 12)
  {
    v320[0] = MEMORY[0x1895F87A8];
    v320[1] = 3221225472LL;
    uint64_t v321 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_177;
    uint64_t v322 = &unk_189BC9238;
    os_log_type_t v210 = v296;
    uint64_t v323 = v210;
    int v324 = v298;
    uint64_t v211 = v324;
    int v212 = v320;
    os_unfair_lock_lock(v116);
    v321((uint64_t)v212);
    os_unfair_lock_unlock(v116);

    int v198 = *v114;
    int v116 = lock;
    if (v198 == 12)
    {
      *(void *)out = 0LL;
      *(void *)&out[8] = out;
      *(void *)&out[16] = 0x3032000000LL;
      *(void *)&out[24] = __Block_byref_object_copy__79337;
      *(void *)&out[32] = __Block_byref_object_dispose__79338;
      *(void *)&out[40] = 0LL;
      v315[0] = MEMORY[0x1895F87A8];
      v315[1] = 3221225472LL;
      int v316 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_180;
      uint64_t v317 = &unk_189BC9210;
      uint64_t v319 = out;
      int v318 = v211;
      int v213 = v318;
      int v214 = v315;
      os_unfair_lock_lock(lock);
      v316((uint64_t)v214);
      os_unfair_lock_unlock(lock);

      int v215 = *(void *)(*(void *)&out[8] + 40LL);
      if (v215)
      {
        (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v215 + 16))(v215, v210);
        goto LABEL_459;
      }

      __nwlog_obj();
      int v216 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)__int128 v413 = 136446210;
      __int128 v414 = "nw_agent_read_message_on_queue";
      uint64_t v217 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v405 = 0;
      if (__nwlog_fault(v217, &type, &v405))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          int v218 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          int v219 = type;
          if (os_log_type_enabled(v218, type))
          {
            *(_DWORD *)__int128 v413 = 136446210;
            __int128 v414 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_181A5C000, v218, v219, "%{public}s No handler for CLOSE_NEXUS", v413, 0xCu);
          }

          goto LABEL_456;
        }

        if (v405)
        {
          uint64_t v220 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          int v218 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v221 = type;
          uint64_t v222 = os_log_type_enabled(v218, type);
          if (v220)
          {
            if (v222)
            {
              *(_DWORD *)__int128 v413 = 136446466;
              __int128 v414 = "nw_agent_read_message_on_queue";
              __int128 v415 = 2082;
              os_log_type_t v416 = v220;
              _os_log_impl( &dword_181A5C000,  v218,  v221,  "%{public}s No handler for CLOSE_NEXUS, dumping backtrace:%{public}s",  v413,  0x16u);
            }

            free(v220);
            goto LABEL_457;
          }

          if (v222)
          {
            *(_DWORD *)__int128 v413 = 136446210;
            __int128 v414 = "nw_agent_read_message_on_queue";
            _os_log_impl( &dword_181A5C000,  v218,  v221,  "%{public}s No handler for CLOSE_NEXUS, no backtrace",  v413,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          int v218 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          unsigned int v223 = type;
          if (os_log_type_enabled(v218, type))
          {
            *(_DWORD *)__int128 v413 = 136446210;
            __int128 v414 = "nw_agent_read_message_on_queue";
            _os_log_impl( &dword_181A5C000,  v218,  v223,  "%{public}s No handler for CLOSE_NEXUS, backtrace limit exceeded",  v413,  0xCu);
          }
        }

LABEL_480:
      free(v156);
      if (!v116) {
        return;
      }
LABEL_488:
      free(v116);
      return;
    }

    uint64_t v117 = (os_log_s *)__nwlog_obj();
    os_log_type_t v118 = v398[0];
    if (!os_log_type_enabled(v117, (os_log_type_t)v398[0])) {
      goto LABEL_487;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_available";
    int v119 = "%{public}s called with null other_protocol";
LABEL_486:
    _os_log_impl(&dword_181A5C000, v117, v118, v119, buf, 0xCu);
    goto LABEL_487;
  }

  if (v4 == 2)
  {
    uint64_t v10 = *((void *)handle + 1);
    if (v10)
    {
      uint64_t v9 = (uint64_t *)(v10 + 256);
      goto LABEL_17;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    uint64_t v170 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v170, v398, v394))
    {
      if (v398[0] == 17)
      {
        uint64_t v171 = (os_log_s *)__nwlog_obj();
        os_log_type_t v172 = v398[0];
        if (!os_log_type_enabled(v171, (os_log_type_t)v398[0])) {
          goto LABEL_469;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        uint64_t v173 = "%{public}s called with null handle->http1_stream";
        goto LABEL_468;
      }

      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v171 = (os_log_s *)__nwlog_obj();
        os_log_type_t v172 = v398[0];
        if (!os_log_type_enabled(v171, (os_log_type_t)v398[0])) {
          goto LABEL_469;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        uint64_t v173 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        goto LABEL_468;
      }

      int v187 = (char *)__nw_create_backtrace_string();
      uint64_t v171 = (os_log_s *)__nwlog_obj();
      os_log_type_t v172 = v398[0];
      BOOL v188 = os_log_type_enabled(v171, (os_log_type_t)v398[0]);
      if (v187)
      {
        if (v188)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v187;
          _os_log_impl( &dword_181A5C000,  v171,  v172,  "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v187);
        goto LABEL_469;
      }

      if (v188)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        uint64_t v173 = "%{public}s called with null handle->http1_stream, no backtrace";
LABEL_468:
        _os_log_impl(&dword_181A5C000, v171, v172, v173, buf, 0xCu);
      }
    }

LABEL_735:
        free(v377);
        if (!v341)
        {
LABEL_592:
          if (!*(void *)(v11 + 488))
          {
            uint64_t v312 = *(void *)(v11 + 784);
            if (v312)
            {
              nw_queue_set_timer_values(v312, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
            }

            else
            {
              if ((*(_BYTE *)(v11 + 158) & 1) == 0)
              {
                int v313 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v313, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v314 = *(void *)(v11 + 488);
                  int v315 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
                  int v316 = *(_DWORD *)(v11 + 860);
                  if (v314) {
                    LODWORD(v314) = *(_DWORD *)(v314 + 424);
                  }
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v11 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  *(void *)&_BYTE buf[24] = " ";
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v315;
                  *(_WORD *)&buf[38] = 1024;
                  *(_DWORD *)&buf[40] = v316;
                  *(_WORD *)&_BYTE buf[44] = 1024;
                  *(_DWORD *)&buf[46] = v314;
                  _os_log_impl( &dword_181A5C000,  v313,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
                }
              }

              uint64_t v317 = *(void *)(v11 + 608);
              int v318 = *(void **)(v11 + 496);
              *(void *)buf = MEMORY[0x1895F87A8];
              *(void *)&buf[8] = 0x40000000LL;
              *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
              *(void *)&_BYTE buf[24] = &unk_189BBD518;
              *(void *)&buf[32] = v317;
              nw_queue_context_async(v318, buf);
            }
          }

LABEL_652:
                if (!v268) {
                  goto LABEL_342;
                }
                goto LABEL_653;
              }

              __nwlog_obj();
              uint64_t v141 = *(unsigned int *)(v136 + 368);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              *(void *)&_BYTE buf[24] = 1LL;
              *(_WORD *)&buf[32] = 2048;
              *(void *)&buf[34] = v141;
              os_log_type_t v142 = (char *)_os_log_send_and_compose_impl();
              v398[0] = 16;
              v394[0] = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v142, v398, v394))
              {
                if (v398[0] == 17)
                {
                  uint64_t v143 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v144 = v398[0];
                  if (os_log_type_enabled(v143, (os_log_type_t)v398[0]))
                  {
                    uint64_t v145 = *(unsigned int *)(v136 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    *(void *)&_BYTE buf[24] = 1LL;
                    *(_WORD *)&buf[32] = 2048;
                    *(void *)&buf[34] = v145;
                    BOOL v146 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_333:
                    _os_log_impl(&dword_181A5C000, v143, v144, v146, buf, 0x2Au);
                  }
                }

                else if (v394[0])
                {
                  char v165 = (char *)__nw_create_backtrace_string();
                  uint64_t v143 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v144 = v398[0];
                  BOOL v166 = os_log_type_enabled(v143, (os_log_type_t)v398[0]);
                  if (v165)
                  {
                    if (v166)
                    {
                      uint64_t v167 = *(unsigned int *)(v136 + 368);
                      *(_DWORD *)buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->nonresuable_connections";
                      *(_WORD *)&buf[22] = 2048;
                      *(void *)&_BYTE buf[24] = 1LL;
                      *(_WORD *)&buf[32] = 2048;
                      *(void *)&buf[34] = v167;
                      *(_WORD *)&buf[42] = 2082;
                      *(void *)&_BYTE buf[44] = v165;
                      _os_log_impl( &dword_181A5C000,  v143,  v144,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                    }

                    free(v165);
                    goto LABEL_334;
                  }

                  if (v166)
                  {
                    uint64_t v174 = *(unsigned int *)(v136 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    *(void *)&_BYTE buf[24] = 1LL;
                    *(_WORD *)&buf[32] = 2048;
                    *(void *)&buf[34] = v174;
                    BOOL v146 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                    goto LABEL_333;
                  }
                }

                else
                {
                  uint64_t v143 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v144 = v398[0];
                  if (os_log_type_enabled(v143, (os_log_type_t)v398[0]))
                  {
                    uint64_t v168 = *(unsigned int *)(v136 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    *(void *)&_BYTE buf[24] = 1LL;
                    *(_WORD *)&buf[32] = 2048;
                    *(void *)&buf[34] = v168;
                    BOOL v146 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                    goto LABEL_333;
                  }
                }
              }

LABEL_683:
            BOOL v334 = (os_log_s *)__nwlog_obj();
            os_log_type_t v335 = v398[0];
            if (!os_log_type_enabled(v334, (os_log_type_t)v398[0])) {
              goto LABEL_761;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            int v336 = "%{public}s called with null http1";
LABEL_743:
            unsigned int v381 = buf;
LABEL_760:
            _os_log_impl(&dword_181A5C000, v334, v335, v336, v381, 0xCu);
            goto LABEL_761;
          }

          int v235 = *v128;
          int v236 = v235 | (*(unsigned __int8 *)(v11 + 874) << 16);
          if ((v235 & 0x800) != 0) {
            goto LABEL_490;
          }
          *(_BYTE *)(v11 + 874) = BYTE2(v236);
          unsigned __int16 *v128 = v236 | 0x800;
          uint64_t v237 = *(unsigned int *)(v234 + 368) + 1LL;
          uint64_t v238 = v237 << 31 >> 31;
          *(_DWORD *)(v234 + 36_Block_object_dispose(&STACK[0x338], 8) = v237;
          if (v238 == v237 && (v238 & 0x8000000000000000LL) == 0)
          {
LABEL_634:
            if ((*(_BYTE *)(v11 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                BOOL v372 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v372, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v373 = *(void *)(v11 + 488);
                  int v374 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
                  int v375 = *(_DWORD *)(v11 + 860);
                  if (v373) {
                    LODWORD(v373) = *(_DWORD *)(v373 + 424);
                  }
                  int v376 = *(_DWORD *)(v234 + 368) + *(_DWORD *)(v234 + 364);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v11 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  *(void *)&_BYTE buf[24] = " ";
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v374;
                  *(_WORD *)&buf[38] = 1024;
                  *(_DWORD *)&buf[40] = v375;
                  *(_WORD *)&_BYTE buf[44] = 1024;
                  *(_DWORD *)&buf[46] = v373;
                  *(_WORD *)&buf[50] = 1024;
                  *(_DWORD *)&_BYTE buf[52] = v376;
                  _os_log_impl( &dword_181A5C000,  v372,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
                }
              }
            }

            __int16 v320 = *(void **)(v11 + 496);
            if (v320)
            {
              uint64_t v321 = *(void *)(v11 + 480);
              if (v321) {
                goto LABEL_613;
              }
              goto LABEL_638;
            }

        free(v489);
        if (!v429)
        {
LABEL_780:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          uint64_t v549 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v550 = (os_log_s *)__nwlog_obj();
            uint64_t v551 = type[0];
            if (!os_log_type_enabled(v550, type[0])) {
              goto LABEL_794;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            int v552 = "%{public}s called with null http1_connection";
          }

          else if ((_BYTE)aBlock)
          {
            int v553 = (char *)__nw_create_backtrace_string();
            uint64_t v550 = (os_log_s *)__nwlog_obj();
            uint64_t v551 = type[0];
            uint64_t v554 = os_log_type_enabled(v550, type[0]);
            if (v553)
            {
              if (v554)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v553;
                _os_log_impl( &dword_181A5C000,  v550,  v551,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v553);
LABEL_794:
              if (v549) {
                free(v549);
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              uint64_t v555 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v556 = (os_log_s *)__nwlog_obj();
                BOOL v557 = type[0];
                if (os_log_type_enabled(v556, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  os_log_type_t v558 = "%{public}s called with null http1_connection";
LABEL_809:
                  _os_log_impl(&dword_181A5C000, v556, v557, v558, buf, 0xCu);
                }
              }

              else if ((_BYTE)aBlock)
              {
                uint64_t v559 = (char *)__nw_create_backtrace_string();
                v556 = (os_log_s *)__nwlog_obj();
                BOOL v557 = type[0];
                v560 = os_log_type_enabled(v556, type[0]);
                if (v559)
                {
                  if (v560)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v559;
                    _os_log_impl( &dword_181A5C000,  v556,  v557,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v559);
                  goto LABEL_810;
                }

                if (v560)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  os_log_type_t v558 = "%{public}s called with null http1_connection, no backtrace";
                  goto LABEL_809;
                }
              }

              else
              {
                v556 = (os_log_s *)__nwlog_obj();
                BOOL v557 = type[0];
                if (os_log_type_enabled(v556, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  os_log_type_t v558 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_809;
                }
              }

LABEL_724:
            free(v367);
            if (!v333)
            {
LABEL_614:
              if (!*(void *)(v11 + 488))
              {
                uint64_t v323 = *(void *)(v11 + 784);
                if (v323)
                {
                  nw_queue_set_timer_values(v323, 0x8000000000000000LL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                }

                else
                {
                  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                  {
                    int v324 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v325 = *(void *)(v11 + 488);
                      int v326 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
                      int v327 = *(_DWORD *)(v11 + 860);
                      if (v325) {
                        LODWORD(v325) = *(_DWORD *)(v325 + 424);
                      }
                      *(_DWORD *)buf = 136447490;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v11 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      *(void *)&_BYTE buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v326;
                      *(_WORD *)&buf[38] = 1024;
                      *(_DWORD *)&buf[40] = v327;
                      *(_WORD *)&_BYTE buf[44] = 1024;
                      *(_DWORD *)&buf[46] = v325;
                      _os_log_impl( &dword_181A5C000,  v324,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing",  buf,  0x32u);
                    }
                  }

                  uint64_t v328 = *(void *)(v11 + 608);
                  BOOL v329 = *(void **)(v11 + 496);
                  *(void *)buf = MEMORY[0x1895F87A8];
                  *(void *)&buf[8] = 0x40000000LL;
                  *(void *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                  *(void *)&_BYTE buf[24] = &unk_189BBD518;
                  *(void *)&buf[32] = v328;
                  nw_queue_context_async(v329, buf);
                }
              }

              return;
            }

LABEL_762:
            free(v333);
            goto LABEL_614;
          }

          __nwlog_obj();
          uint64_t v239 = *(unsigned int *)(v234 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v239;
          int v240 = (char *)_os_log_send_and_compose_impl();
          v398[0] = 16;
          v394[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v240, v398, v394))
          {
            if (v398[0] == 17)
            {
              int v241 = (os_log_s *)__nwlog_obj();
              os_log_type_t v242 = v398[0];
              if (os_log_type_enabled(v241, (os_log_type_t)v398[0]))
              {
                uint64_t v243 = *(unsigned int *)(v234 + 368);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = 1LL;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v243;
                uint64_t v244 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_630:
                _os_log_impl(&dword_181A5C000, v241, v242, v244, buf, 0x2Au);
              }
            }

            else if (v394[0])
            {
              int v295 = (char *)__nw_create_backtrace_string();
              int v241 = (os_log_s *)__nwlog_obj();
              os_log_type_t v242 = v398[0];
              BOOL v296 = os_log_type_enabled(v241, (os_log_type_t)v398[0]);
              if (v295)
              {
                if (v296)
                {
                  uint64_t v297 = *(unsigned int *)(v234 + 368);
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&_BYTE buf[24] = 1LL;
                  *(_WORD *)&buf[32] = 2048;
                  *(void *)&buf[34] = v297;
                  *(_WORD *)&buf[42] = 2082;
                  *(void *)&_BYTE buf[44] = v295;
                  _os_log_impl( &dword_181A5C000,  v241,  v242,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v295);
                goto LABEL_631;
              }

              if (v296)
              {
                uint64_t v332 = *(unsigned int *)(v234 + 368);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = 1LL;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v332;
                uint64_t v244 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_630;
              }
            }

            else
            {
              int v241 = (os_log_s *)__nwlog_obj();
              os_log_type_t v242 = v398[0];
              if (os_log_type_enabled(v241, (os_log_type_t)v398[0]))
              {
                uint64_t v330 = *(unsigned int *)(v234 + 368);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = 1LL;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v330;
                uint64_t v244 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_630;
              }
            }
          }

LABEL_631:
          if (v240) {
            free(v240);
          }
          *(_DWORD *)(v234 + 36_Block_object_dispose(&STACK[0x338], 8) = -1;
          goto LABEL_634;
        }

LABEL_770:
        free(v341);
        goto LABEL_592;
      }

      uint64_t v310 = *(void *)(v11 + 480);
      if (v310)
      {
        uint64_t v311 = *(void *)(v310 + 200);
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        *(void *)&_BYTE buf[24] = &unk_189BBD540;
        *(void *)&buf[32] = v311;
        nw_queue_context_async(v309, buf);
        goto LABEL_592;
      }

      __nwlog_obj();
      *(_DWORD *)os_log_type_t v398 = 136446210;
      *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      int v341 = (char *)_os_log_send_and_compose_impl();
      v394[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v341, v394, &type))
      {
        if (v394[0] == OS_LOG_TYPE_FAULT)
        {
          int v342 = (os_log_s *)__nwlog_obj();
          os_log_type_t v343 = v394[0];
          if (!os_log_type_enabled(v342, v394[0])) {
            goto LABEL_769;
          }
          *(_DWORD *)os_log_type_t v398 = 136446210;
          *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          uint64_t v344 = "%{public}s called with null http1";
          goto LABEL_767;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          int v342 = (os_log_s *)__nwlog_obj();
          os_log_type_t v343 = v394[0];
          if (!os_log_type_enabled(v342, v394[0])) {
            goto LABEL_769;
          }
          *(_DWORD *)os_log_type_t v398 = 136446210;
          *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          uint64_t v344 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_767;
        }

        uint64_t v377 = (char *)__nw_create_backtrace_string();
        int v342 = (os_log_s *)__nwlog_obj();
        os_log_type_t v343 = v394[0];
        BOOL v380 = os_log_type_enabled(v342, v394[0]);
        if (!v377)
        {
          if (!v380) {
            goto LABEL_769;
          }
          *(_DWORD *)os_log_type_t v398 = 136446210;
          *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          uint64_t v344 = "%{public}s called with null http1, no backtrace";
          goto LABEL_767;
        }

        if (v380)
        {
          *(_DWORD *)os_log_type_t v398 = 136446466;
          *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          *(_WORD *)&v398[12] = 2082;
          *(void *)&v398[14] = v377;
          uint64_t v379 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_734;
        }

        goto LABEL_735;
      }

LABEL_769:
      if (!v341) {
        goto LABEL_592;
      }
      goto LABEL_770;
    }

    __nwlog_obj();
    uint64_t v207 = *(unsigned int *)(v202 + 368);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->nonresuable_connections";
    *(_WORD *)&buf[22] = 2048;
    *(void *)&_BYTE buf[24] = 1LL;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v207;
    int v208 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v208, v398, v394))
    {
      if (v398[0] == 17)
      {
        os_log_type_t v209 = (os_log_s *)__nwlog_obj();
        os_log_type_t v210 = v398[0];
        if (os_log_type_enabled(v209, (os_log_type_t)v398[0]))
        {
          uint64_t v211 = *(unsigned int *)(v202 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v211;
          int v212 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_583:
          _os_log_impl(&dword_181A5C000, v209, v210, v212, buf, 0x2Au);
        }
      }

      else if (v394[0])
      {
        int v276 = (char *)__nw_create_backtrace_string();
        os_log_type_t v209 = (os_log_s *)__nwlog_obj();
        os_log_type_t v210 = v398[0];
        BOOL v277 = os_log_type_enabled(v209, (os_log_type_t)v398[0]);
        if (v276)
        {
          if (v277)
          {
            uint64_t v278 = *(unsigned int *)(v202 + 368);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 1LL;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v278;
            *(_WORD *)&buf[42] = 2082;
            *(void *)&_BYTE buf[44] = v276;
            _os_log_impl( &dword_181A5C000,  v209,  v210,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v276);
          goto LABEL_584;
        }

        if (v277)
        {
          uint64_t v308 = *(unsigned int *)(v202 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v308;
          int v212 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_583;
        }
      }

      else
      {
        os_log_type_t v209 = (os_log_s *)__nwlog_obj();
        os_log_type_t v210 = v398[0];
        if (os_log_type_enabled(v209, (os_log_type_t)v398[0]))
        {
          uint64_t v300 = *(unsigned int *)(v202 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v300;
          int v212 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_583;
        }
      }
    }

LABEL_584:
    if (v208) {
      free(v208);
    }
    *(_DWORD *)(v202 + 36_Block_object_dispose(&STACK[0x338], 8) = -1;
    goto LABEL_587;
  }

  if ((*(_WORD *)(v11 + 872) & 0x204) != 4)
  {
    nw_protocol_input_available(*(void **)(v12 + 48), v12);
    return;
  }

  if (((*(unsigned __int16 *)(v11 + 872) | (*(unsigned __int8 *)(v11 + 874) << 16)) & 0x20000) != 0
    || (*(_BYTE *)(v8 + 376) & 1) == 0)
  {
    if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v21 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    uint64_t v22 = *(void *)(v11 + 488);
    int v23 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
    int v24 = *(_DWORD *)(v11 + 860);
    if (v22) {
      LODWORD(v22) = *(_DWORD *)(v22 + 424);
    }
    identifier = (nw_protocol_identifier *)"invalid";
    if (a2->identifier) {
      identifier = a2->identifier;
    }
LABEL_59:
    *(_DWORD *)buf = 136447746;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_available";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v11 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v23;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v24;
    *(_WORD *)&_BYTE buf[44] = 1024;
    *(_DWORD *)&buf[46] = v22;
    *(_WORD *)&buf[50] = 2080;
    *(void *)&_BYTE buf[52] = identifier;
    uint64_t v20 = "%{public}s %{public}s%s<i%u:c%u:s%u> ignoring input_available from %s";
    os_log_type_t v28 = (os_log_s *)v21;
    uint32_t v29 = 60;
    goto LABEL_60;
  }

  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v193 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v194 = *(void *)(v11 + 488);
        int v195 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
        int v196 = *(_DWORD *)(v11 + 860);
        if (v194) {
          LODWORD(v194) = *(_DWORD *)(v194 + 424);
        }
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_input_available";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v11 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v195;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v196;
        *(_WORD *)&_BYTE buf[44] = 1024;
        *(_DWORD *)&buf[46] = v194;
        *(_WORD *)&buf[50] = 2048;
        *(void *)&_BYTE buf[52] = v11;
        _os_log_impl( &dword_181A5C000,  v193,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> active server connection %p got input_available after completing input, c hecking to defer new_flow",  buf,  0x3Cu);
      }
    }
  }

  if ((*(_BYTE *)(v8 + 376) & 1) == 0)
  {
LABEL_240:
    if ((*(_BYTE *)(v8 + 158) & 1) != 0) {
      return;
    }
    if (!gLogDatapath) {
      return;
    }
    uint64_t v125 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    int v126 = *(_DWORD *)(v8 + 372);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v8 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v126;
    uint64_t v20 = "%{public}s %{public}s%s<i%u> called when not in server mode, ignoring";
    os_log_type_t v28 = v125;
    uint32_t v29 = 38;
LABEL_60:
    _os_log_impl(&dword_181A5C000, v28, OS_LOG_TYPE_DEBUG, v20, buf, v29);
    return;
  }

  uint64_t v13 = *(void ***)(v8 + 328);
  if (!v13)
  {
LABEL_265:
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      uint64_t v16 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v147 = *(void *)(v11 + 488);
        int v148 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
        int v149 = *(_DWORD *)(v11 + 860);
        if (v147) {
          LODWORD(v147) = *(_DWORD *)(v147 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v11 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v148;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v149;
        *(_WORD *)&_BYTE buf[44] = 1024;
        *(_DWORD *)&buf[46] = v147;
        uint64_t v20 = "%{public}s %{public}s%s<i%u:c%u:s%u> called without listen handler, ignoring";
        goto LABEL_270;
      }
    }

    return;
  }

  uint64_t v14 = (unsigned __int16 *)(v11 + 872);
  BOOL v15 = *v13;
  if (!v15 || !*v15)
  {
    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      int v213 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
      {
        int v214 = *(_DWORD *)(v8 + 372);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v8 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v214;
        _os_log_impl( &dword_181A5C000,  v213,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow",  buf,  0x26u);
      }
    }

    int v215 = *v14;
    int v216 = v215 | (*(unsigned __int8 *)(v11 + 874) << 16);
    if ((v215 & 0x100) == 0)
    {
      *(_BYTE *)(v11 + 874) = BYTE2(v216);
      *uint64_t v14 = v216 | 0x100;
      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v345 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v345, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v346 = *(void *)(v11 + 488);
            int v347 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
            int v348 = *(_DWORD *)(v11 + 860);
            if (v346) {
              LODWORD(v346) = *(_DWORD *)(v346 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v347;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v348;
            *(_WORD *)&_BYTE buf[44] = 1024;
            *(_DWORD *)&buf[46] = v346;
            _os_log_impl( &dword_181A5C000,  v345,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
          }
        }
      }

      uint64_t v217 = *(void *)(v11 + 480);
      if (v217)
      {
        int v218 = *v14;
        int v219 = v218 | (*(unsigned __int8 *)(v11 + 874) << 16);
        if ((v218 & 0x800) == 0)
        {
          *(_BYTE *)(v11 + 874) = BYTE2(v219);
          *uint64_t v14 = v219 | 0x800;
          uint64_t v220 = *(unsigned int *)(v217 + 368) + 1LL;
          uint64_t v221 = v220 << 31 >> 31;
          *(_DWORD *)(v217 + 36_Block_object_dispose(&STACK[0x338], 8) = v220;
          if (v221 == v220 && (v221 & 0x8000000000000000LL) == 0) {
            goto LABEL_609;
          }
          __nwlog_obj();
          uint64_t v222 = *(unsigned int *)(v217 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v222;
          unsigned int v223 = (char *)_os_log_send_and_compose_impl();
          v398[0] = 16;
          v394[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v223, v398, v394))
          {
            if (v398[0] == 17)
            {
              uint64_t v224 = (os_log_s *)__nwlog_obj();
              os_log_type_t v225 = v398[0];
              if (os_log_type_enabled(v224, (os_log_type_t)v398[0]))
              {
                uint64_t v226 = *(unsigned int *)(v217 + 368);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = 1LL;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v226;
                os_log_type_t v227 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_605:
                _os_log_impl(&dword_181A5C000, v224, v225, v227, buf, 0x2Au);
              }
            }

            else if (v394[0])
            {
              int v281 = (char *)__nw_create_backtrace_string();
              uint64_t v224 = (os_log_s *)__nwlog_obj();
              os_log_type_t v225 = v398[0];
              BOOL v282 = os_log_type_enabled(v224, (os_log_type_t)v398[0]);
              if (v281)
              {
                if (v282)
                {
                  uint64_t v283 = *(unsigned int *)(v217 + 368);
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&_BYTE buf[24] = 1LL;
                  *(_WORD *)&buf[32] = 2048;
                  *(void *)&buf[34] = v283;
                  *(_WORD *)&buf[42] = 2082;
                  *(void *)&_BYTE buf[44] = v281;
                  _os_log_impl( &dword_181A5C000,  v224,  v225,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v281);
                goto LABEL_606;
              }

              if (v282)
              {
                uint64_t v319 = *(unsigned int *)(v217 + 368);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = 1LL;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v319;
                os_log_type_t v227 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_605;
              }
            }

            else
            {
              uint64_t v224 = (os_log_s *)__nwlog_obj();
              os_log_type_t v225 = v398[0];
              if (os_log_type_enabled(v224, (os_log_type_t)v398[0]))
              {
                uint64_t v301 = *(unsigned int *)(v217 + 368);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = 1LL;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v301;
                os_log_type_t v227 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_605;
              }
            }
          }

                        if (v246) {
                          free(v246);
                        }
                      }
                    }
                  }

                  else
                  {
                    int v241 = 0LL;
                  }

                  os_log_type_t v270 = 0LL;
                  goto LABEL_536;
                }

                int v249 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                os_log_type_t v270 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(v249 + 8));
                int v250 = **(_DWORD **)(v249 + 8);
                __nwlog_obj();
                BOOL v251 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)address = 136446466;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v250;
                uint64_t v226 = (char *)_os_log_send_and_compose_impl();

                uint64_t v279 = OS_LOG_TYPE_ERROR;
                uint64_t v278 = 0;
                if (__nwlog_fault(v226, &v279, &v278))
                {
                  if (v279 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    BOOL v252 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    uint64_t v253 = v279;
                    if (os_log_type_enabled(v252, v279))
                    {
                      *(_DWORD *)address = 136446466;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v250;
                      _os_log_impl( &dword_181A5C000,  v252,  v253,  "%{public}s IP_ADD_MEMBERSHIP failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                    }

                free(v334);
                if (!v314)
                {
LABEL_631:
                  if ((*(_WORD *)(a1 + 388) & 8) == 0)
                  {
LABEL_632:
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    uint64_t v344 = gconnectionLogObj;
                    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_37;
                    }
                    uint64_t v346 = *(_DWORD *)(a3 + 176);
                    uint64_t v345 = *(_DWORD *)(a3 + 180);
                    LODWORD(buf[0]) = 136447490;
                    *(void *)((char *)buf + 4) = "nw_http2_submit_message";
                    WORD2(buf[1]) = 2082;
                    *(void *)((char *)&buf[1] + 6) = a3 + 191;
                    HIWORD(buf[2]) = 2080;
                    *(void *)&BOOL v370 = " ";
                    WORD4(v370) = 1024;
                    *(_DWORD *)((char *)&v370 + 10) = v345;
                    HIWORD(v370) = 1024;
                    LODWORD(v371[0]) = v346;
                    WORD2(v371[0]) = 2048;
                    *(void **)((char *)v371 + 6) = (void *)a4;
                    uint64_t v136 = "%{public}s %{public}s%s<i%u:s%d> failed to submit data, returning frame %p to cache";
                    goto LABEL_642;
                  }

LABEL_638:
            __nwlog_obj();
            *(_DWORD *)os_log_type_t v398 = 136446210;
            *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            BOOL v333 = (char *)_os_log_send_and_compose_impl();
            v394[0] = OS_LOG_TYPE_ERROR;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            if (v394[0] == OS_LOG_TYPE_FAULT)
            {
              BOOL v334 = (os_log_s *)__nwlog_obj();
              os_log_type_t v335 = v394[0];
              if (!os_log_type_enabled(v334, v394[0])) {
                goto LABEL_761;
              }
              *(_DWORD *)os_log_type_t v398 = 136446210;
              *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              int v336 = "%{public}s called with null http1";
LABEL_759:
              unsigned int v381 = v398;
              goto LABEL_760;
            }

            if (type == OS_LOG_TYPE_DEFAULT)
            {
              BOOL v334 = (os_log_s *)__nwlog_obj();
              os_log_type_t v335 = v394[0];
              if (!os_log_type_enabled(v334, v394[0])) {
                goto LABEL_761;
              }
              *(_DWORD *)os_log_type_t v398 = 136446210;
              *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              int v336 = "%{public}s called with null http1, backtrace limit exceeded";
              goto LABEL_759;
            }

            uint64_t v367 = (char *)__nw_create_backtrace_string();
            BOOL v334 = (os_log_s *)__nwlog_obj();
            os_log_type_t v335 = v394[0];
            BOOL v368 = os_log_type_enabled(v334, v394[0]);
            if (!v367)
            {
              if (!v368) {
                goto LABEL_761;
              }
              *(_DWORD *)os_log_type_t v398 = 136446210;
              *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              int v336 = "%{public}s called with null http1, no backtrace";
              goto LABEL_759;
            }

            if (v368)
            {
              *(_DWORD *)os_log_type_t v398 = 136446466;
              *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              *(_WORD *)&v398[12] = 2082;
              *(void *)&v398[14] = v367;
              int v369 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_714:
              BOOL v371 = v398;
LABEL_723:
              _os_log_impl(&dword_181A5C000, v334, v335, v369, v371, 0x16u);
              goto LABEL_724;
            }

            goto LABEL_724;
          }

          goto LABEL_673;
        }

                                if (v341) {
                                  free(v341);
                                }
                                uint64_t v205 = v340;
                                int v208 = v339;
                                goto LABEL_427;
                              }

                              uint64_t v399 = v208;
                              __nwlog_obj();
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "__nw_frame_get_metadata";
                              uint64_t v400 = (char *)_os_log_send_and_compose_impl();
                              LOBYTE(v643) = 16;
                              LOBYTE(v647) = 0;
                              if (__nwlog_fault(v400, &v643, &v647))
                              {
                                if (v643 == 17)
                                {
                                  uint64_t v401 = (os_log_s *)__nwlog_obj();
                                  BOOL v402 = v643;
                                  if (os_log_type_enabled(v401, (os_log_type_t)v643))
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(void *)&uint8_t buf[4] = "__nw_frame_get_metadata";
                                    uint64_t v403 = v401;
                                    uint64_t v404 = v402;
                                    uint64_t v405 = "%{public}s called with null frame";
LABEL_730:
                                    _os_log_impl(&dword_181A5C000, v403, v404, v405, buf, 0xCu);
                                  }
                                }

                                else if ((_BYTE)v647)
                                {
                                  os_log_type_t v416 = (char *)__nw_create_backtrace_string();
                                  uint64_t v417 = (os_log_s *)__nwlog_obj();
                                  int v418 = v643;
                                  int v419 = os_log_type_enabled(v417, (os_log_type_t)v643);
                                  if (v416)
                                  {
                                    if (v419)
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "__nw_frame_get_metadata";
                                      __int16 v638 = 2082;
                                      *(void *)int v639 = v416;
                                      _os_log_impl( &dword_181A5C000,  v417,  v418,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
                                    }

                                    free(v416);
                                    goto LABEL_731;
                                  }

                                  if (v419)
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(void *)&uint8_t buf[4] = "__nw_frame_get_metadata";
                                    uint64_t v403 = v417;
                                    uint64_t v404 = v418;
                                    uint64_t v405 = "%{public}s called with null frame, no backtrace";
                                    goto LABEL_730;
                                  }
                                }

                                else
                                {
                                  uint64_t v430 = (os_log_s *)__nwlog_obj();
                                  v431 = v643;
                                  if (os_log_type_enabled(v430, (os_log_type_t)v643))
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(void *)&uint8_t buf[4] = "__nw_frame_get_metadata";
                                    uint64_t v403 = v430;
                                    uint64_t v404 = v431;
                                    uint64_t v405 = "%{public}s called with null frame, backtrace limit exceeded";
                                    goto LABEL_730;
                                  }
                                }
                              }

LABEL_490:
        if ((*(_BYTE *)(v11 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            BOOL v252 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v253 = *(void *)(v11 + 488);
              int v254 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
              int v255 = *(_DWORD *)(v11 + 860);
              if (v253) {
                LODWORD(v253) = *(_DWORD *)(v253 + 424);
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v11 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&_BYTE buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v254;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v255;
              *(_WORD *)&_BYTE buf[44] = 1024;
              *(_DWORD *)&buf[46] = v253;
              _os_log_impl( &dword_181A5C000,  v252,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
            }
          }
        }

        goto LABEL_614;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
      BOOL v333 = (char *)_os_log_send_and_compose_impl();
      v398[0] = 16;
      v394[0] = OS_LOG_TYPE_DEFAULT;
      if (v398[0] != 17)
      {
        if (v394[0])
        {
          BOOL v349 = (char *)__nw_create_backtrace_string();
          BOOL v334 = (os_log_s *)__nwlog_obj();
          os_log_type_t v335 = v398[0];
          BOOL v350 = os_log_type_enabled(v334, (os_log_type_t)v398[0]);
          if (v349)
          {
            if (v350)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v349;
              _os_log_impl( &dword_181A5C000,  v334,  v335,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v349);
LABEL_761:
            if (!v333) {
              goto LABEL_614;
            }
            goto LABEL_762;
          }

    if (!v213)
    {
LABEL_492:
      uint64_t v150 = v212;
      BOOL v188 = v534;
      goto LABEL_493;
    }

LABEL_741:
          if (!v350) {
            goto LABEL_761;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          int v336 = "%{public}s called with null http1, no backtrace";
          goto LABEL_743;
        }

LABEL_737:
        BOOL v334 = (os_log_s *)__nwlog_obj();
        os_log_type_t v335 = v398[0];
        if (!os_log_type_enabled(v334, (os_log_type_t)v398[0])) {
          goto LABEL_761;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        int v336 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_743;
      }

      goto LABEL_683;
    }

void nw_protocol_http1_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v372 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v364 = "nw_http1_get_http1_protocol";
    int v293 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(__len[1]) != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        int v294 = (os_log_s *)__nwlog_obj();
        os_log_type_t v295 = __len[1];
        if (!os_log_type_enabled(v294, __len[1])) {
          goto LABEL_556;
        }
        *(_DWORD *)buf = 136446210;
        int v364 = "nw_http1_get_http1_protocol";
        BOOL v296 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_555;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v294 = (os_log_s *)__nwlog_obj();
      os_log_type_t v295 = __len[1];
      BOOL v303 = os_log_type_enabled(v294, __len[1]);
      if (!backtrace_string)
      {
        if (!v303) {
          goto LABEL_556;
        }
        *(_DWORD *)buf = 136446210;
        int v364 = "nw_http1_get_http1_protocol";
        BOOL v296 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_555;
      }

      if (v303)
      {
        *(_DWORD *)buf = 136446466;
        int v364 = "nw_http1_get_http1_protocol";
        __int16 v365 = 2082;
        *(void *)int v366 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v294,  v295,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_556;
    }

    int v294 = (os_log_s *)__nwlog_obj();
    os_log_type_t v295 = __len[1];
    if (!os_log_type_enabled(v294, __len[1])) {
      goto LABEL_556;
    }
    *(_DWORD *)buf = 136446210;
    int v364 = "nw_http1_get_http1_protocol";
    BOOL v296 = "%{public}s called with null protocol";
LABEL_555:
    _os_log_impl(&dword_181A5C000, v294, v295, v296, buf, 0xCu);
    goto LABEL_556;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v364 = "nw_http1_get_http1_protocol";
    int v293 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(__len[1]) != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        int v294 = (os_log_s *)__nwlog_obj();
        os_log_type_t v295 = __len[1];
        if (!os_log_type_enabled(v294, __len[1])) {
          goto LABEL_556;
        }
        *(_DWORD *)buf = 136446210;
        int v364 = "nw_http1_get_http1_protocol";
        BOOL v296 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_555;
      }

      uint64_t v304 = (char *)__nw_create_backtrace_string();
      int v294 = (os_log_s *)__nwlog_obj();
      os_log_type_t v295 = __len[1];
      BOOL v305 = os_log_type_enabled(v294, __len[1]);
      if (!v304)
      {
        if (!v305) {
          goto LABEL_556;
        }
        *(_DWORD *)buf = 136446210;
        int v364 = "nw_http1_get_http1_protocol";
        BOOL v296 = "%{public}s called with null handle, no backtrace";
        goto LABEL_555;
      }

      if (v305)
      {
        *(_DWORD *)buf = 136446466;
        int v364 = "nw_http1_get_http1_protocol";
        __int16 v365 = 2082;
        *(void *)int v366 = v304;
        uint64_t v306 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_463:
        _os_log_impl(&dword_181A5C000, v294, v295, v306, buf, 0x16u);
      }

LABEL_556:
    if (!v293) {
      goto LABEL_558;
    }
    goto LABEL_557;
  }

  uint64_t v6 = *((void *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v364 = "nw_http1_get_http1_protocol";
    int v293 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(__len[1]) == 17)
    {
      int v294 = (os_log_s *)__nwlog_obj();
      os_log_type_t v295 = __len[1];
      if (!os_log_type_enabled(v294, __len[1])) {
        goto LABEL_556;
      }
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_http1_get_http1_protocol";
      BOOL v296 = "%{public}s called with null handle->http1_stream";
      goto LABEL_555;
    }

    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      int v294 = (os_log_s *)__nwlog_obj();
      os_log_type_t v295 = __len[1];
      if (!os_log_type_enabled(v294, __len[1])) {
        goto LABEL_556;
      }
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_http1_get_http1_protocol";
      BOOL v296 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_555;
    }

    uint64_t v304 = (char *)__nw_create_backtrace_string();
    int v294 = (os_log_s *)__nwlog_obj();
    os_log_type_t v295 = __len[1];
    BOOL v324 = os_log_type_enabled(v294, __len[1]);
    if (!v304)
    {
      if (!v324) {
        goto LABEL_556;
      }
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_http1_get_http1_protocol";
      BOOL v296 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_555;
    }

    if (v324)
    {
      *(_DWORD *)buf = 136446466;
      int v364 = "nw_http1_get_http1_protocol";
      __int16 v365 = 2082;
      *(void *)int v366 = v304;
      uint64_t v306 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_463;
    }

    goto LABEL_464;
  }

  int v4 = (void *)(v6 + 248);
LABEL_10:
  if (!*v4) {
    goto LABEL_558;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v364 = "nw_protocol_http1_output_available";
    int v298 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(__len[1]) == 17)
    {
      BOOL v299 = (os_log_s *)__nwlog_obj();
      os_log_type_t v300 = __len[1];
      if (!os_log_type_enabled(v299, __len[1])) {
        goto LABEL_592;
      }
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_protocol_http1_output_available";
      uint64_t v301 = "%{public}s called with null other_protocol";
    }

    else if (type[0])
    {
      BOOL v307 = (char *)__nw_create_backtrace_string();
      BOOL v299 = (os_log_s *)__nwlog_obj();
      os_log_type_t v300 = __len[1];
      BOOL v308 = os_log_type_enabled(v299, __len[1]);
      if (v307)
      {
        if (!v308) {
          goto LABEL_585;
        }
        *(_DWORD *)buf = 136446466;
        int v364 = "nw_protocol_http1_output_available";
        __int16 v365 = 2082;
        *(void *)int v366 = v307;
        os_log_type_t v309 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_584;
      }

      if (!v308) {
        goto LABEL_592;
      }
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_protocol_http1_output_available";
      uint64_t v301 = "%{public}s called with null other_protocol, no backtrace";
    }

    else
    {
      BOOL v299 = (os_log_s *)__nwlog_obj();
      os_log_type_t v300 = __len[1];
      if (!os_log_type_enabled(v299, __len[1])) {
        goto LABEL_592;
      }
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_protocol_http1_output_available";
      uint64_t v301 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }

                                if (v264) {
                                  free(v264);
                                }
                              }

                              os_log_type_t v208 = v622;
                              if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                              {
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                BOOL v305 = (os_log_s *)gLogObj;
                                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                                {
                                  uint64_t v306 = *(void *)(v6 + 488);
                                  if (v306) {
                                    LODWORD(v306) = *(_DWORD *)(v306 + 424);
                                  }
                                  BOOL v307 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
                                  BOOL v308 = *(_DWORD *)(v6 + 860);
                                  *(_DWORD *)buf = 136447746;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                  __int16 v638 = 2082;
                                  *(void *)int v639 = v629;
                                  *(_WORD *)&v639[8] = 2080;
                                  *(void *)&v639[10] = " ";
                                  *(_WORD *)&v639[18] = 1024;
                                  *(_DWORD *)id v640 = v307;
                                  *(_WORD *)&v640[4] = 1024;
                                  *(_DWORD *)&v640[6] = v308;
                                  *(_WORD *)int v641 = 1024;
                                  *(_DWORD *)&v641[2] = v306;
                                  *(_WORD *)&v641[6] = 1024;
                                  *(_DWORD *)&v641[8] = v212;
                                  _os_log_impl( &dword_181A5C000,  v305,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> output handler refused frame request for frames of length %u",  buf,  0x38u);
                                }
                              }

                              LODWORD(v212) = v212 - v216;
                              uint64_t v8 = &qword_18C45F000;
LABEL_564:
                              if ((_DWORD)v212 == (_DWORD)__len)
                              {
                                nw_http_transaction_metadata_increment_outbound_body_transfer_size( *(void **)(*(void *)(v6 + 488) + 352LL),  v212);
                                os_log_type_t v309 = *(void *)(v6 + 488);
                                uint64_t v310 = __len;
                                os_log_type_t v311 = *(void *)(v309 + 176);
                                int v280 = __CFADD__(v311, __len);
                                *(void *)(v309 + 176) = v311 + __len;
                                if (v280)
                                {
                                  if (*((_BYTE *)v8 + 1537))
                                  {
                                    uint64_t v385 = (os_log_s *)__nwlog_obj();
                                    if (os_log_type_enabled(v385, OS_LOG_TYPE_DEBUG))
                                    {
                                      __int128 v386 = *(void *)(v309 + 176);
                                      *(_DWORD *)buf = 136446978;
                                      *(void *)&uint8_t buf[4] = "increment_outbound_body_size";
                                      __int16 v638 = 2082;
                                      *(void *)int v639 = "outbound_body_size";
                                      *(_WORD *)&v639[8] = 2048;
                                      *(void *)&v639[10] = v310;
                                      *(_WORD *)&v639[18] = 2048;
                                      *(void *)id v640 = v386;
                                      _os_log_impl( &dword_181A5C000,  v385,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
                                    }
                                  }

                                  *(void *)(v309 + 176) = -1LL;
                                }

                                uint64_t v205 = v619;
                                if (nw_frame_is_metadata_complete(v619))
                                {
                                  *(_WORD *)(*(void *)(v6 + 488) + 428LL) |= 0x400u;
                                  *v613 |= 0x20u;
                                  uint64_t v312 = *(void *)(v6 + 488);
                                  if (*(_BYTE *)(v312 + 168))
                                  {
                                    if (*(void *)(v312 + 160) != *(void *)(v312 + 176))
                                    {
                                      if ((*(_BYTE *)(v312 + 158) & 1) == 0)
                                      {
                                        v451 = (os_log_s *)__nwlog_obj();
                                        os_log_type_t v452 = os_log_type_enabled(v451, OS_LOG_TYPE_ERROR);
                                        uint64_t v312 = *(void *)(v6 + 488);
                                        if (v452)
                                        {
                                          uint32_t v453 = *(void *)(v312 + 256);
                                          if (v453) {
                                            LODWORD(v453) = *(_DWORD *)(v453 + 860);
                                          }
                                          uint64_t v454 = *(_DWORD *)(*(void *)(v312 + 248) + 372LL);
                                          uint64_t v455 = *(_DWORD *)(v312 + 424);
                                          if (*(_BYTE *)(v312 + 168)) {
                                            uint64_t v456 = *(void *)(v312 + 160);
                                          }
                                          else {
                                            uint64_t v456 = -1LL;
                                          }
                                          uint64_t v457 = *(void *)(v312 + 176);
                                          *(_DWORD *)buf = 136448002;
                                          *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                                          __int16 v638 = 2082;
                                          *(void *)int v639 = v312 + 74;
                                          *(_WORD *)&v639[8] = 2080;
                                          *(void *)&v639[10] = " ";
                                          *(_WORD *)&v639[18] = 1024;
                                          *(_DWORD *)id v640 = v454;
                                          *(_WORD *)&v640[4] = 1024;
                                          *(_DWORD *)&v640[6] = v453;
                                          *(_WORD *)int v641 = 1024;
                                          *(_DWORD *)&v641[2] = v455;
                                          *(_WORD *)&v641[6] = 2048;
                                          *(void *)&v641[8] = v456;
                                          *(_WORD *)&v641[16] = 2048;
                                          int v642 = v457;
                                          _os_log_impl( &dword_181A5C000,  v451,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equ al body size %llu",  buf,  0x46u);
                                          uint64_t v312 = *(void *)(v6 + 488);
                                        }
                                      }

                                      nw_protocol_error(*(void **)(v312 + 48), v312);
                                      nw_protocol_disconnected( *(void **)(*(void *)(v6 + 488) + 48LL),  *(void *)(v6 + 488));
                                      goto LABEL_774;
                                    }
                                  }
                                }

    if (v277) {
      free(v277);
    }
    goto LABEL_146;
  }

  uint64_t v111 = v110[108];

  int v112 = (32 * v111) & 0x40;
LABEL_147:
  os_log_type_t v121 = *v100;
  BOOL v122 = v121 & 0xFFFFFFFFFFFFFFBFLL | ((unint64_t)*((unsigned __int16 *)v382 + 855) << 32);
  char *v100 = v121 & 0xFFFFFFBF | v112;
  *((_WORD *)v382 + 855) = WORD2(v122);
  BOOL v123 = nw_endpoint_handler_used_prefer_fallback(v109);
  os_log_type_t v124 = 128;
  if (!v123) {
    os_log_type_t v124 = 0;
  }
  uint64_t v125 = *(_DWORD *)((char *)v382 + 1706) & 0xFFFFFF7F | ((unint64_t)*((unsigned __int16 *)v382 + 855) << 32);
  char *v100 = *v100 & 0xFFFFFF7F | v124;
  *((_WORD *)v382 + 855) = WORD2(v125);

LABEL_150:
  v382->privacy_stance = v24->privacy_stance;
  char v126 = v24;
  int v127 = v380->parameters;

  if (!v127) {
    goto LABEL_172;
  }
  unsigned int v128 = v127;
  uint64_t v129 = *(char **)(*((void *)v128 + 13) + 112LL);

  if (!v129) {
    goto LABEL_172;
  }
  if (v129 == "com.apple.news.urlresolution" || !strcmp(v129, "com.apple.news.urlresolution"))
  {
    uint64_t v130 = 1;
  }

  else if (v129 == "com.apple.news.embedded-content" || !strcmp(v129, "com.apple.news.embedded-content"))
  {
    uint64_t v130 = 2;
  }

  else
  {
    if (v129 == "com.apple.exposurenotification.sensitive" || !strcmp(v129, "com.apple.exposurenotification.sensitive")) {
      goto LABEL_172;
    }
    if (v129 == "com.apple.trustd.TrustURLSession" || !strcmp(v129, "com.apple.trustd.TrustURLSession"))
    {
      uint64_t v130 = 4;
    }

    else if (v129 == "com.apple.dprivacyd.upload" || !strcmp(v129, "com.apple.dprivacyd.upload"))
    {
      uint64_t v130 = 5;
    }

    else if (v129 == "com.apple.networkQuality.private-relay" {
           || !strcmp(v129, "com.apple.networkQuality.private-relay"))
    }
    {
      uint64_t v130 = 6;
    }

    else if (v129 == "com.apple.CommCenter.BrandedCalling" || !strcmp(v129, "com.apple.CommCenter.BrandedCalling"))
    {
      uint64_t v130 = 7;
    }

    else if (v129 == "com.apple.ap.promotedcontentd.proxied-requests" {
           || !strcmp(v129, "com.apple.ap.promotedcontentd.proxied-requests"))
    }
    {
      uint64_t v130 = 8;
    }

    else if (v129 == "com.apple.appstored.skadnetwork.crowdanonymity" {
           || !strcmp(v129, "com.apple.appstored.skadnetwork.crowdanonymity"))
    }
    {
      uint64_t v130 = 9;
    }

    else
    {
      if (v129 != "com.apple.Passwords.PRIconFetching" && strcmp(v129, "com.apple.Passwords.PRIconFetching"))
      {
LABEL_172:
        uint64_t v130 = 0;
        goto LABEL_175;
      }

      uint64_t v130 = 10;
    }
  }

LABEL_591:
    _os_log_impl(&dword_181A5C000, v299, v300, v301, buf, 0xCu);
    goto LABEL_592;
  }

  if (v3 == 2)
  {
    uint64_t v8 = *((void *)handle + 1);
    if (v8)
    {
      uint64_t v7 = (uint64_t *)(v8 + 256);
      goto LABEL_17;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v364 = "nw_http1_get_connection_for_protocol";
    int v316 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v316, &__len[1], type))
    {
      if (LOBYTE(__len[1]) == 17)
      {
        uint64_t v317 = (os_log_s *)__nwlog_obj();
        os_log_type_t v318 = __len[1];
        if (!os_log_type_enabled(v317, __len[1])) {
          goto LABEL_574;
        }
        *(_DWORD *)buf = 136446210;
        int v364 = "nw_http1_get_connection_for_protocol";
        uint64_t v319 = "%{public}s called with null handle->http1_stream";
        goto LABEL_573;
      }

      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v317 = (os_log_s *)__nwlog_obj();
        os_log_type_t v318 = __len[1];
        if (!os_log_type_enabled(v317, __len[1])) {
          goto LABEL_574;
        }
        *(_DWORD *)buf = 136446210;
        int v364 = "nw_http1_get_connection_for_protocol";
        uint64_t v319 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        goto LABEL_573;
      }

      uint64_t v325 = (char *)__nw_create_backtrace_string();
      uint64_t v317 = (os_log_s *)__nwlog_obj();
      os_log_type_t v318 = __len[1];
      BOOL v326 = os_log_type_enabled(v317, __len[1]);
      if (v325)
      {
        if (v326)
        {
          *(_DWORD *)buf = 136446466;
          int v364 = "nw_http1_get_connection_for_protocol";
          __int16 v365 = 2082;
          *(void *)int v366 = v325;
          _os_log_impl( &dword_181A5C000,  v317,  v318,  "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v325);
        goto LABEL_574;
      }

      if (v326)
      {
        *(_DWORD *)buf = 136446210;
        int v364 = "nw_http1_get_connection_for_protocol";
        uint64_t v319 = "%{public}s called with null handle->http1_stream, no backtrace";
LABEL_573:
        _os_log_impl(&dword_181A5C000, v317, v318, v319, buf, 0xCu);
      }
    }

LABEL_574:
    if (v316) {
      free(v316);
    }
    goto LABEL_576;
  }

  if (v3 != 3)
  {
LABEL_576:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    int v364 = "nw_protocol_http1_output_available";
    int v298 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(__len[1]) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v299 = (os_log_s *)gLogObj;
      os_log_type_t v300 = __len[1];
      if (!os_log_type_enabled((os_log_t)gLogObj, __len[1])) {
        goto LABEL_592;
      }
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_protocol_http1_output_available";
      uint64_t v301 = "%{public}s called with null http1_connection";
      goto LABEL_591;
    }

    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v299 = (os_log_s *)gLogObj;
      os_log_type_t v300 = __len[1];
      if (!os_log_type_enabled((os_log_t)gLogObj, __len[1])) {
        goto LABEL_592;
      }
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_protocol_http1_output_available";
      uint64_t v301 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_591;
    }

    BOOL v307 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v299 = (os_log_s *)gLogObj;
    os_log_type_t v300 = __len[1];
    BOOL v337 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
    if (!v307)
    {
      if (!v337) {
        goto LABEL_592;
      }
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_protocol_http1_output_available";
      uint64_t v301 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_591;
    }

    if (!v337)
    {
LABEL_585:
      free(v307);
      if (!v298) {
        return;
      }
LABEL_593:
      free(v298);
      return;
    }

    *(_DWORD *)buf = 136446466;
    int v364 = "nw_protocol_http1_output_available";
    __int16 v365 = 2082;
    *(void *)int v366 = v307;
    os_log_type_t v309 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_584:
    _os_log_impl(&dword_181A5C000, v299, v300, v309, buf, 0x16u);
    goto LABEL_585;
  }

  uint64_t v7 = (uint64_t *)(handle + 16);
LABEL_17:
  uint64_t v9 = *v7;
  if (!*v7) {
    goto LABEL_576;
  }
  if (!*(void *)(v9 + 648)) {
    goto LABEL_375;
  }
  uint64_t v348 = *v7;
  if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v312 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v312, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v313 = *(void *)(v9 + 488);
        int v314 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
        int v315 = *(_DWORD *)(v9 + 860);
        if (v313) {
          LODWORD(v313) = *(_DWORD *)(v313 + 424);
        }
        *(_DWORD *)buf = 136447490;
        int v364 = "nw_http1_connection_drain_outbound_frames";
        __int16 v365 = 2082;
        *(void *)int v366 = v9 + 74;
        *(_WORD *)&v366[8] = 2080;
        *(void *)&v366[10] = " ";
        __int16 v367 = 1024;
        *(_DWORD *)BOOL v368 = v314;
        *(_WORD *)&v368[4] = 1024;
        *(_DWORD *)&v368[6] = v315;
        LOWORD(v369) = 1024;
        *(_DWORD *)((char *)&v369 + 2) = v313;
        _os_log_impl( &dword_181A5C000,  v312,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> draining pending outbound frames",  buf,  0x32u);
      }
    }
  }

  if (!*(void *)(v9 + 480))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v364 = "nw_http1_connection_drain_outbound_frames";
    int v274 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v274, &__len[1], type))
    {
      if (LOBYTE(__len[1]) == 17)
      {
        uint64_t v310 = (os_log_s *)__nwlog_obj();
        os_log_type_t v311 = __len[1];
        if (os_log_type_enabled(v310, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          int v364 = "nw_http1_connection_drain_outbound_frames";
          BOOL v277 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_550:
          v290 = v310;
          os_log_type_t v291 = v311;
          uint32_t v292 = 12;
          goto LABEL_436;
        }
      }

      else if (type[0])
      {
        __int16 v320 = (char *)__nw_create_backtrace_string();
        uint64_t v310 = (os_log_s *)__nwlog_obj();
        os_log_type_t v311 = __len[1];
        BOOL v321 = os_log_type_enabled(v310, __len[1]);
        if (v320)
        {
          if (v321)
          {
            *(_DWORD *)buf = 136446466;
            int v364 = "nw_http1_connection_drain_outbound_frames";
            __int16 v365 = 2082;
            *(void *)int v366 = v320;
            _os_log_impl( &dword_181A5C000,  v310,  v311,  "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v320);
          uint64_t v9 = v348;
        }

        else
        {
          uint64_t v9 = v348;
          if (v321)
          {
            *(_DWORD *)buf = 136446210;
            int v364 = "nw_http1_connection_drain_outbound_frames";
            BOOL v277 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
            goto LABEL_550;
          }
        }
      }

      else
      {
        uint64_t v310 = (os_log_s *)__nwlog_obj();
        os_log_type_t v311 = __len[1];
        if (os_log_type_enabled(v310, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          int v364 = "nw_http1_connection_drain_outbound_frames";
          BOOL v277 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
          goto LABEL_550;
        }
      }
    }

LABEL_437:
    if (!v274) {
      goto LABEL_375;
    }
LABEL_438:
    free(v274);
    goto LABEL_375;
  }

  if (!*(void *)(v9 + 488))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v364 = "nw_http1_connection_drain_outbound_frames";
    int v274 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__len[1]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v274, &__len[1], type))
    {
      if (LOBYTE(__len[1]) == 17)
      {
        uint64_t v310 = (os_log_s *)__nwlog_obj();
        os_log_type_t v311 = __len[1];
        if (os_log_type_enabled(v310, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          int v364 = "nw_http1_connection_drain_outbound_frames";
          BOOL v277 = "%{public}s called with null http1_connection->current_stream";
          goto LABEL_550;
        }
      }

      else if (type[0])
      {
        int v280 = (char *)__nw_create_backtrace_string();
        uint64_t v310 = (os_log_s *)__nwlog_obj();
        os_log_type_t v311 = __len[1];
        BOOL v322 = os_log_type_enabled(v310, __len[1]);
        if (v280)
        {
          if (v322)
          {
            *(_DWORD *)buf = 136446466;
            int v364 = "nw_http1_connection_drain_outbound_frames";
            __int16 v365 = 2082;
            *(void *)int v366 = v280;
            BOOL v282 = "%{public}s called with null http1_connection->current_stream, dumping backtrace:%{public}s";
            uint64_t v283 = v310;
            os_log_type_t v284 = v311;
            uint32_t v285 = 22;
            goto LABEL_415;
          }

    free(v92);
    goto LABEL_438;
  }

  os_log_type_t v44 = v195;
  if (v195[3] < v42)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v205 = "_http_safe_append";
    unsigned int v92 = (char *)_os_log_send_and_compose_impl();
    v178[0] = OS_LOG_TYPE_ERROR;
    int v203 = OS_LOG_TYPE_DEFAULT;
    if (v178[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v93 = (os_log_s *)__nwlog_obj();
      uint64_t v94 = v178[0];
      if (!os_log_type_enabled(v93, v178[0])) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v205 = "_http_safe_append";
      char v95 = "%{public}s called with null (*remaining >= length)";
      goto LABEL_435;
    }

    if (v203 == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v93 = (os_log_s *)__nwlog_obj();
      uint64_t v94 = v178[0];
      if (!os_log_type_enabled(v93, v178[0])) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v205 = "_http_safe_append";
      char v95 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
      goto LABEL_435;
    }

    uint64_t v130 = (char *)__nw_create_backtrace_string();
    BOOL v93 = (os_log_s *)__nwlog_obj();
    uint64_t v94 = v178[0];
    nw_parameters_t v131 = os_log_type_enabled(v93, v178[0]);
    if (v130)
    {
      if (v131)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v205 = "_http_safe_append";
        uint64_t v206 = 2082;
        uint64_t v207 = v130;
        _os_log_impl( &dword_181A5C000,  v93,  v94,  "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v130);
      if (!v92) {
        goto LABEL_438;
      }
      goto LABEL_437;
    }

    if (v131)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v205 = "_http_safe_append";
      char v95 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_435:
      _os_log_impl(&dword_181A5C000, v93, v94, v95, buf, 0xCu);
      goto LABEL_436;
    }

    goto LABEL_436;
  }

  memcpy(v43, type, v42);
  int v45 = v44[3];
  v44[3] = v45 - v42;
  if (v45 < v42)
  {
    if (gLogDatapath)
    {
      unsigned int v128 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v129 = v44[3];
        *(_DWORD *)buf = 136446978;
        uint64_t v205 = "_http_safe_append";
        uint64_t v206 = 2082;
        uint64_t v207 = "*remaining";
        os_log_type_t v208 = 2048;
        BOOL v209 = v42;
        os_log_type_t v210 = 2048;
        uint64_t v211 = v129;
        _os_log_impl( &dword_181A5C000,  v128,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
      }
    }

    v44[3] = 0LL;
  }

  uint64_t v46 = &v43[v42];
  v199[3] = (uint64_t)v46;
  if (a4) {
    goto LABEL_63;
  }
LABEL_69:
  BOOL v49 = nw_http_metadata_copy_trailer_fields(a1);
  if (!v49)
  {
    uint64_t v36 = (_BYTE *)v199[3];
    if (v36)
    {
      uint64_t v37 = v195;
      if (v195[3]) {
        goto LABEL_74;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v205 = "_http_safe_append";
      uint64_t v132 = (void *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v178[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v132, type, v178))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v133 = (os_log_s *)__nwlog_obj();
          int v134 = type[0];
          if (!os_log_type_enabled(v133, type[0])) {
            goto LABEL_508;
          }
          *(_DWORD *)buf = 136446210;
          uint64_t v205 = "_http_safe_append";
          os_log_type_t v135 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_507;
        }

        if (v178[0] == OS_LOG_TYPE_DEFAULT)
        {
          os_log_type_t v133 = (os_log_s *)__nwlog_obj();
          int v134 = type[0];
          if (!os_log_type_enabled(v133, type[0])) {
            goto LABEL_508;
          }
          *(_DWORD *)buf = 136446210;
          uint64_t v205 = "_http_safe_append";
          os_log_type_t v135 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_507;
        }

        char v151 = (char *)__nw_create_backtrace_string();
        os_log_type_t v133 = (os_log_s *)__nwlog_obj();
        int v134 = type[0];
        int v152 = os_log_type_enabled(v133, type[0]);
        if (v151)
        {
          if (v152)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v205 = "_http_safe_append";
            uint64_t v206 = 2082;
            uint64_t v207 = v151;
            _os_log_impl( &dword_181A5C000,  v133,  v134,  "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v151);
          if (!v132)
          {
LABEL_510:
            v199[3] = 0LL;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            uint64_t v205 = "nw_http_fillout_binary_message_inner";
            uint64_t v159 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            v178[0] = OS_LOG_TYPE_DEFAULT;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              int v160 = (os_log_s *)__nwlog_obj();
              int v161 = type[0];
              if (!os_log_type_enabled(v160, type[0])) {
                goto LABEL_525;
              }
              *(_DWORD *)buf = 136446210;
              uint64_t v205 = "nw_http_fillout_binary_message_inner";
              int v162 = "%{public}s called with null cursor";
              goto LABEL_524;
            }

            if (v178[0] == OS_LOG_TYPE_DEFAULT)
            {
              int v160 = (os_log_s *)__nwlog_obj();
              int v161 = type[0];
              if (!os_log_type_enabled(v160, type[0])) {
                goto LABEL_525;
              }
              *(_DWORD *)buf = 136446210;
              uint64_t v205 = "nw_http_fillout_binary_message_inner";
              int v162 = "%{public}s called with null cursor, backtrace limit exceeded";
              goto LABEL_524;
            }

            int v163 = (char *)__nw_create_backtrace_string();
            int v160 = (os_log_s *)__nwlog_obj();
            int v161 = type[0];
            uint64_t v175 = os_log_type_enabled(v160, type[0]);
            if (!v163)
            {
              if (!v175) {
                goto LABEL_525;
              }
              *(_DWORD *)buf = 136446210;
              uint64_t v205 = "nw_http_fillout_binary_message_inner";
              int v162 = "%{public}s called with null cursor, no backtrace";
              goto LABEL_524;
            }

            if (!v175) {
              goto LABEL_518;
            }
            goto LABEL_517;
          }

LABEL_416:
          free(v280);
          uint64_t v9 = v348;
          if (!v274) {
            goto LABEL_375;
          }
          goto LABEL_438;
        }

        uint64_t v9 = v348;
        if (v322)
        {
          *(_DWORD *)buf = 136446210;
          int v364 = "nw_http1_connection_drain_outbound_frames";
          BOOL v277 = "%{public}s called with null http1_connection->current_stream, no backtrace";
          goto LABEL_550;
        }
      }

      else
      {
        uint64_t v310 = (os_log_s *)__nwlog_obj();
        os_log_type_t v311 = __len[1];
        if (os_log_type_enabled(v310, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          int v364 = "nw_http1_connection_drain_outbound_frames";
          BOOL v277 = "%{public}s called with null http1_connection->current_stream, backtrace limit exceeded";
          goto LABEL_550;
        }
      }
    }

    goto LABEL_437;
  }

  uint64_t v10 = (uint64_t *)(v9 + 648);
  uint64_t v11 = *(void *)(v9 + 648);
  if (!v11) {
    goto LABEL_373;
  }
  int v340 = (unsigned __int16 *)(v9 + 872);
  uint64_t v344 = v9 + 696;
  int v342 = (void *)(v9 + 656);
  uint64_t v347 = v9 + 74;
  int v341 = (uint64_t *)(v9 + 648);
  while (2)
  {
    uint64_t v12 = *(void *)(v11 + 32);
    uint64_t v13 = *(void **)(v11 + 40);
    uint64_t v14 = (void *)(v11 + 32);
    if (v12)
    {
      *(void *)(v12 + 40) = v13;
      uint64_t v13 = *(void **)(v11 + 40);
    }

    else
    {
      *int v342 = v13;
    }

    void *v13 = v12;
    *uint64_t v14 = 0LL;
    *(void *)(v11 + 40) = 0LL;
    __len[0] = 0;
    if (!*(void *)(v11 + 112))
    {
      uint64_t v17 = 0LL;
      if ((*(_BYTE *)(v9 + 158) & 1) != 0) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }

    if ((*(_WORD *)(v11 + 204) & 0x100) != 0
      && g_channel_check_validity
      && (g_channel_check_validity(v11, *(void *)(v11 + 88)) & 1) == 0)
    {
      uint64_t v17 = 0LL;
      __len[0] = 0;
      if ((*(_BYTE *)(v9 + 158) & 1) != 0) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }

    int v16 = *(_DWORD *)(v11 + 52);
    uint64_t v15 = *(unsigned int *)(v11 + 56);
    if (v16) {
      v16 -= v15 + *(_DWORD *)(v11 + 60);
    }
    __len[0] = v16;
    uint64_t v17 = (char *)(*(void *)(v11 + 112) + v15);
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
LABEL_39:
      if (gLogDatapath)
      {
        int v158 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v159 = *(void *)(v9 + 488);
          if (v159) {
            LODWORD(v159) = *(_DWORD *)(v159 + 424);
          }
          int v160 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
          int v161 = *(_DWORD *)(v9 + 860);
          *(_DWORD *)buf = 136448002;
          int v364 = "nw_http1_connection_drain_outbound_frames";
          __int16 v365 = 2082;
          *(void *)int v366 = v347;
          *(_WORD *)&v366[8] = 2080;
          *(void *)&v366[10] = " ";
          __int16 v367 = 1024;
          *(_DWORD *)BOOL v368 = v160;
          *(_WORD *)&v368[4] = 1024;
          *(_DWORD *)&v368[6] = v161;
          LOWORD(v369) = 1024;
          *(_DWORD *)((char *)&v369 + 2) = v159;
          HIWORD(v369) = 2048;
          *(void *)BOOL v370 = v11;
          *(_WORD *)&v370[8] = 1024;
          LODWORD(v371) = __len[0];
          _os_log_impl( &dword_181A5C000,  v158,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> draining frame %p with length %u",  buf,  0x42u);
        }
      }
    }

LABEL_287:
      free(v178);
      uint64_t v9 = v348;
      goto LABEL_303;
    }

    if (!(_DWORD)v18)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_http1_connection_send_bytes";
      int v162 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__len[1]) = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (LOBYTE(__len[1]) == 17)
      {
        uint64_t v168 = (os_log_s *)__nwlog_obj();
        os_log_type_t v169 = __len[1];
        if (os_log_type_enabled(v168, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          int v364 = "nw_http1_connection_send_bytes";
          char v165 = v168;
          os_log_type_t v166 = v169;
          uint64_t v167 = "%{public}s called with null length";
          goto LABEL_302;
        }

        goto LABEL_303;
      }

      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        int v192 = (os_log_s *)__nwlog_obj();
        os_log_type_t v193 = __len[1];
        if (os_log_type_enabled(v192, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          int v364 = "nw_http1_connection_send_bytes";
          char v165 = v192;
          os_log_type_t v166 = v193;
          uint64_t v167 = "%{public}s called with null length, backtrace limit exceeded";
          goto LABEL_302;
        }

        goto LABEL_303;
      }

      uint64_t v178 = (char *)__nw_create_backtrace_string();
      BOOL v185 = (os_log_s *)__nwlog_obj();
      os_log_type_t v186 = __len[1];
      BOOL v187 = os_log_type_enabled(v185, __len[1]);
      if (!v178)
      {
        uint64_t v9 = v348;
        if (v187)
        {
          *(_DWORD *)buf = 136446210;
          int v364 = "nw_http1_connection_send_bytes";
          char v165 = v185;
          os_log_type_t v166 = v186;
          uint64_t v167 = "%{public}s called with null length, no backtrace";
          goto LABEL_302;
        }

        goto LABEL_303;
      }

      if (v187)
      {
        *(_DWORD *)buf = 136446466;
        int v364 = "nw_http1_connection_send_bytes";
        __int16 v365 = 2082;
        *(void *)int v366 = v178;
        int v182 = v185;
        os_log_type_t v183 = v186;
        int v184 = "%{public}s called with null length, dumping backtrace:%{public}s";
        goto LABEL_286;
      }

      goto LABEL_287;
    }

    uint64_t v20 = *(void *)(v9 + 32);
    if (!v20)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      int v364 = "nw_http1_connection_send_bytes";
      uint64_t v222 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__len[1]) = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v222, &__len[1], type))
      {
        if (LOBYTE(__len[1]) == 17)
        {
          unsigned int v223 = (os_log_s *)__nwlog_obj();
          os_log_type_t v224 = __len[1];
          if (os_log_type_enabled(v223, __len[1]))
          {
            *(_DWORD *)buf = 136446210;
            int v364 = "nw_http1_connection_send_bytes";
            os_log_type_t v225 = v223;
            os_log_type_t v226 = v224;
            os_log_type_t v227 = "%{public}s called with null output_handler";
LABEL_352:
            _os_log_impl(&dword_181A5C000, v225, v226, v227, buf, 0xCu);
          }
        }

        else if (type[0])
        {
          uint64_t v228 = (char *)__nw_create_backtrace_string();
          BOOL v229 = (os_log_s *)__nwlog_obj();
          os_log_type_t v230 = __len[1];
          BOOL v231 = os_log_type_enabled(v229, __len[1]);
          if (v228)
          {
            if (v231)
            {
              *(_DWORD *)buf = 136446466;
              int v364 = "nw_http1_connection_send_bytes";
              __int16 v365 = 2082;
              *(void *)int v366 = v228;
              _os_log_impl( &dword_181A5C000,  v229,  v230,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v228);
            goto LABEL_353;
          }

          if (v231)
          {
            *(_DWORD *)buf = 136446210;
            int v364 = "nw_http1_connection_send_bytes";
            os_log_type_t v225 = v229;
            os_log_type_t v226 = v230;
            os_log_type_t v227 = "%{public}s called with null output_handler, no backtrace";
            goto LABEL_352;
          }
        }

        else
        {
          int v232 = (os_log_s *)__nwlog_obj();
          os_log_type_t v233 = __len[1];
          if (os_log_type_enabled(v232, __len[1]))
          {
            *(_DWORD *)buf = 136446210;
            int v364 = "nw_http1_connection_send_bytes";
            os_log_type_t v225 = v232;
            os_log_type_t v226 = v233;
            os_log_type_t v227 = "%{public}s called with null output_handler, backtrace limit exceeded";
            goto LABEL_352;
          }
        }
      }

        free(v83);
        if (!v77) {
          goto LABEL_306;
        }
        goto LABEL_305;
      }

      int v72 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v82 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        uint64_t v108 = 2080;
        *(void *)os_log_type_t v109 = a1 + 308;
        *(_WORD *)&v109[8] = 1024;
        *(_DWORD *)&v109[10] = v72;
        _os_log_impl( &dword_181A5C000,  v82,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v74 = (os_log_s *)gLogObj;
      if ((_DWORD)v72 == 22)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          uint64_t v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = 22;
          uint64_t v75 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d";
          goto LABEL_250;
        }

        goto LABEL_306;
      }

      *(_DWORD *)buf = 136446466;
      os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      uint64_t v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v72;
      uint64_t v77 = (char *)_os_log_send_and_compose_impl();
      v99[0] = OS_LOG_TYPE_ERROR;
      uint64_t v100 = OS_LOG_TYPE_DEFAULT;
      if (v99[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v78 = (os_log_s *)__nwlog_obj();
        int v79 = v99[0];
        if (!os_log_type_enabled(v78, v99[0])) {
          goto LABEL_304;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        uint64_t v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        BOOL v80 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d";
        goto LABEL_303;
      }

      if (v100 == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v78 = (os_log_s *)__nwlog_obj();
        int v79 = v99[0];
        if (!os_log_type_enabled(v78, v99[0])) {
          goto LABEL_304;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        uint64_t v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        BOOL v80 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_303;
      }

      BOOL v83 = (char *)__nw_create_backtrace_string();
      uint64_t v78 = (os_log_s *)__nwlog_obj();
      int v79 = v99[0];
      unsigned int v90 = os_log_type_enabled(v78, v99[0]);
      if (!v83)
      {
        if (!v90) {
          goto LABEL_304;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        uint64_t v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        BOOL v80 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d, no backtrace";
        goto LABEL_303;
      }

      if (!v90) {
        goto LABEL_287;
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      uint64_t v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v72;
      *(_WORD *)&v109[4] = 2082;
      *(void *)&v109[6] = v83;
      int v85 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d, dumping backtrace:%{public}s";
    }

                                if (*(_BYTE *)(a2 + *v8)) {
                                  BOOL v213 = 0;
                                }
LABEL_289:
                                *(_DWORD *)(a1 + 32) = v213;
                                goto LABEL_4;
                              case 3u:
                                uint64_t v11 = PBReaderReadString();
                                uint64_t v12 = *(void **)(a1 + 24);
                                *(void *)(a1 + 24) = v11;

                                goto LABEL_4;
                              case 4u:
                                *(_BYTE *)(a1 + 44) |= 4u;
                                uint64_t v130 = *v3;
                                nw_parameters_t v131 = *(void *)(a2 + v130);
                                if (v131 == -1LL || v131 >= *(void *)(a2 + *v6))
                                {
                                  int v134 = 0;
LABEL_271:
                                  *(_BYTE *)(a2 + *v_Block_object_dispose(&STACK[0x338], 8) = 1;
                                  goto LABEL_272;
                                }

                                uint64_t v132 = v131 + 1;
                                os_log_type_t v133 = *(_BYTE *)(*(void *)(a2 + *v10) + v131);
                                *(void *)(a2 + v130) = v132;
                                int v134 = v133 & 0x7F;
                                if ((v133 & 0x80) == 0) {
                                  goto LABEL_272;
                                }
                                os_log_type_t v135 = *v3;
                                uint64_t v136 = *(void *)(a2 + v135);
                                if (v136 == -1LL || v136 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                uint64_t v137 = *(char *)(*(void *)(a2 + *v10) + v136);
                                *(void *)(a2 + v135) = v136 + 1;
                                int v134 = v134 & 0xFFFFC07F | ((v137 & 0x7F) << 7);
                                if ((v137 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                int v138 = *v3;
                                uint64_t v139 = *(void *)(a2 + v138);
                                if (v139 == -1LL || v139 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                os_log_type_t v140 = *(char *)(*(void *)(a2 + *v10) + v139);
                                *(void *)(a2 + v13_Block_object_dispose(&STACK[0x338], 8) = v139 + 1;
                                int v134 = v134 & 0xFFE03FFF | ((v140 & 0x7F) << 14);
                                if ((v140 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                BOOL v141 = *v3;
                                uint64_t v142 = *(void *)(a2 + v141);
                                if (v142 == -1LL || v142 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                os_log_type_t v143 = *(char *)(*(void *)(a2 + *v10) + v142);
                                *(void *)(a2 + v141) = v142 + 1;
                                int v134 = v134 & 0xF01FFFFF | ((v143 & 0x7F) << 21);
                                if ((v143 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v144 = *v3;
                                uint64_t v145 = *(void *)(a2 + v144);
                                if (v145 == -1LL || v145 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                uint64_t v146 = v145 + 1;
                                os_log_type_t v147 = *(char *)(*(void *)(a2 + *v10) + v145);
                                *(void *)(a2 + v144) = v146;
                                v134 |= v147 << 28;
                                if ((v147 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                int v148 = *v3;
                                os_log_type_t v149 = *(void *)(a2 + v148);
                                if (v149 == -1LL || v149 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                uint64_t v150 = v149 + 1;
                                char v151 = *(char *)(*(void *)(a2 + *v10) + v149);
                                *(void *)(a2 + v14_Block_object_dispose(&STACK[0x338], 8) = v150;
                                if ((v151 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                int v152 = *v3;
                                uint64_t v153 = *(void *)(a2 + v152);
                                if (v153 == -1LL || v153 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                os_log_type_t v154 = v153 + 1;
                                BOOL v155 = *(char *)(*(void *)(a2 + *v10) + v153);
                                *(void *)(a2 + v152) = v154;
                                if ((v155 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                uint64_t v156 = *v3;
                                os_log_type_t v157 = *(void *)(a2 + v156);
                                if (v157 == -1LL || v157 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                int v158 = v157 + 1;
                                uint64_t v159 = *(char *)(*(void *)(a2 + *v10) + v157);
                                *(void *)(a2 + v156) = v158;
                                if ((v159 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                int v160 = *v3;
                                int v161 = *(void *)(a2 + v160);
                                if (v161 == -1LL || v161 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                int v162 = v161 + 1;
                                int v163 = *(char *)(*(void *)(a2 + *v10) + v161);
                                *(void *)(a2 + v160) = v162;
                                if ((v163 & 0x80000000) == 0) {
                                  goto LABEL_272;
                                }
                                os_log_type_t v164 = *v3;
                                char v165 = *(void *)(a2 + v164);
                                if (v165 == -1LL || v165 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_271;
                                }
                                os_log_type_t v166 = v165 + 1;
                                uint64_t v167 = *(char *)(*(void *)(a2 + *v10) + v165);
                                *(void *)(a2 + v164) = v166;
                                if (v167 < 0)
                                {
                                  int v134 = 0;
                                  goto LABEL_274;
                                }
    }

LABEL_353:
      if (v222) {
        free(v222);
      }
      LODWORD(v1_Block_object_dispose(&STACK[0x338], 8) = 0;
      uint64_t v9 = v348;
      uint64_t v10 = v341;
      goto LABEL_180;
    }

    int v21 = is_metadata_complete;
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v170 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v171 = *(void *)(v9 + 488);
          if (v171) {
            LODWORD(v171) = *(_DWORD *)(v171 + 424);
          }
          int v172 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
          int v173 = *(_DWORD *)(v9 + 860);
          *(_DWORD *)buf = 136447746;
          int v364 = "nw_http1_connection_send_bytes";
          __int16 v365 = 2082;
          *(void *)int v366 = v347;
          *(_WORD *)&v366[8] = 2080;
          *(void *)&v366[10] = " ";
          __int16 v367 = 1024;
          *(_DWORD *)BOOL v368 = v172;
          *(_WORD *)&v368[4] = 1024;
          *(_DWORD *)&v368[6] = v173;
          LOWORD(v369) = 1024;
          *(_DWORD *)((char *)&v369 + 2) = v171;
          HIWORD(v369) = 1024;
          *(_DWORD *)BOOL v370 = v18;
          _os_log_impl( &dword_181A5C000,  v170,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> sending %u bytes",  buf,  0x38u);
        }
      }
    }

    uint64_t v343 = v11;
    unsigned int v22 = v18;
    while (1)
    {
      uint64_t v361 = 0LL;
      os_log_type_t v362 = &v361;
      uint64_t v359 = 0LL;
      int v360 = &v359;
      int output_frames = nw_protocol_get_output_frames(v20, v9, 1LL, v18, 0xFFFFFFFFLL, (uint64_t)&v361);
      uint64_t v28 = v361;
      BOOL v29 = !v361 || output_frames == 0;
      if (v29) {
        break;
      }
      while (1)
      {
        uint64_t v30 = *(void *)(v28 + 32);
        if (v30 || *(void *)(v28 + 40))
        {
          uint64_t v31 = *(void *)(v28 + 112);
          if (!v31) {
            goto LABEL_69;
          }
        }

        else
        {
          uint64_t v30 = 0LL;
          uint64_t v31 = *(void *)(v28 + 112);
          if (!v31) {
            goto LABEL_69;
          }
        }

        if ((*(_WORD *)(v28 + 204) & 0x100) != 0
          && g_channel_check_validity
          && !g_channel_check_validity(v28, *(void *)(v28 + 88)))
        {
          LODWORD(v31) = 0;
LABEL_69:
          uint64_t v33 = 0LL;
          goto LABEL_70;
        }

        LODWORD(v31) = *(_DWORD *)(v28 + 52);
        uint64_t v32 = *(unsigned int *)(v28 + 56);
        if ((_DWORD)v31) {
          LODWORD(v31) = v31 - (v32 + *(_DWORD *)(v28 + 60));
        }
        uint64_t v33 = (void *)(*(void *)(v28 + 112) + v32);
LABEL_70:
        size_t v34 = v31 >= v22 ? v22 : v31;
        memcpy(v33, v17, v34);
        v22 -= v34;
        v17 += v34;
        if (!nw_frame_claim(v28, v35, v34, 0)) {
          break;
        }
        nw_frame_collapse(v28);
        nw_frame_unclaim(v28, v36, v34, 0);
        uint64_t v37 = *(void *)(v28 + 32);
        int v38 = *(void **)(v28 + 40);
        if (v37)
        {
          *(void *)(v37 + 40) = v38;
          int v38 = *(void **)(v28 + 40);
        }

        else
        {
          os_log_type_t v362 = *(uint64_t **)(v28 + 40);
        }

        *int v38 = v37;
        int v39 = v360;
        *(void *)(v28 + 32) = 0LL;
        *(void *)(v28 + 40) = v39;
        *int v39 = v28;
        int v360 = (uint64_t *)(v28 + 32);
        if (v30)
        {
          uint64_t v28 = v30;
          if (v22) {
            continue;
          }
        }

        goto LABEL_97;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      int v364 = "nw_http1_connection_send_bytes";
      __int16 v365 = 1024;
      *(_DWORD *)int v366 = v34;
      __int128 v40 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v358 = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v41 = gLogObj;
        os_log_type_t v42 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          int v364 = "nw_http1_connection_send_bytes";
          __int16 v365 = 1024;
          *(_DWORD *)int v366 = v34;
          uint64_t v43 = (os_log_s *)v41;
          os_log_type_t v44 = v42;
          int v45 = "%{public}s claiming frame with %u bytes failed";
          goto LABEL_94;
        }

        goto LABEL_95;
      }

      if (!v358)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v50 = gLogObj;
        os_log_type_t v51 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_95;
        }
        *(_DWORD *)buf = 136446466;
        int v364 = "nw_http1_connection_send_bytes";
        __int16 v365 = 1024;
        *(_DWORD *)int v366 = v34;
        uint64_t v43 = (os_log_s *)v50;
        os_log_type_t v44 = v51;
        int v45 = "%{public}s claiming frame with %u bytes failed, backtrace limit exceeded";
        goto LABEL_94;
      }

      uint64_t v46 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v47 = (os_log_s *)gLogObj;
      os_log_type_t v48 = type[0];
      BOOL v49 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v46)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446722;
          int v364 = "nw_http1_connection_send_bytes";
          __int16 v365 = 1024;
          *(_DWORD *)int v366 = v34;
          *(_WORD *)&v366[4] = 2082;
          *(void *)&v366[6] = v46;
          _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s claiming frame with %u bytes failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v46);
        goto LABEL_95;
      }

      if (v49)
      {
        *(_DWORD *)buf = 136446466;
        int v364 = "nw_http1_connection_send_bytes";
        __int16 v365 = 1024;
        *(_DWORD *)int v366 = v34;
        uint64_t v43 = v47;
        os_log_type_t v44 = v48;
        int v45 = "%{public}s claiming frame with %u bytes failed, no backtrace";
LABEL_94:
        _os_log_impl(&dword_181A5C000, v43, v44, v45, buf, 0x12u);
      }

    if (v169) {
      free(v169);
    }
    goto LABEL_355;
  }

  if (v6 != 3)
  {
LABEL_355:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
    int v148 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (v237[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v149 = (os_log_s *)gLogObj;
      uint64_t v150 = v237[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0])) {
        goto LABEL_371;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
      char v151 = "%{public}s called with null http1_connection";
      goto LABEL_370;
    }

    if (!(_BYTE)v231)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v149 = (os_log_s *)gLogObj;
      uint64_t v150 = v237[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0])) {
        goto LABEL_371;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
      char v151 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_370;
    }

    int v161 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v149 = (os_log_s *)gLogObj;
    uint64_t v150 = v237[0];
    uint64_t v194 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0]);
    if (!v161)
    {
      if (!v194) {
        goto LABEL_371;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
      char v151 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_370;
    }

    if (!v194)
    {
LABEL_364:
      free(v161);
      if (!v148) {
        return;
      }
LABEL_372:
      free(v148);
      return;
    }

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v161;
    int v163 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_363:
    _os_log_impl(&dword_181A5C000, v149, v150, v163, buf, 0x16u);
    goto LABEL_364;
  }

  uint64_t v10 = (uint64_t *)(handle + 16);
LABEL_17:
  uint64_t v12 = *v10;
  if (!*v10) {
    goto LABEL_355;
  }
  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v157 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
      {
        int v158 = *(void *)(v12 + 488);
        uint64_t v159 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
        int v160 = *(_DWORD *)(v12 + 860);
        if (v158) {
          LODWORD(v15_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v158 + 424);
        }
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v159;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v160;
        *(_WORD *)int v236 = 1024;
        *(_DWORD *)&v236[2] = v158;
        *(_WORD *)&v236[6] = 1024;
        *(_DWORD *)&v236[8] = a3;
        _os_log_impl( &dword_181A5C000,  v157,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called with error %d",  buf,  0x38u);
      }
    }
  }

  if (!a3)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
      return;
    }
    if (!gLogDatapath) {
      return;
    }
    unsigned int v22 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    int v23 = *(void *)(v12 + 488);
    int v24 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
    int v25 = *(_DWORD *)(v12 + 860);
    if (v23) {
      LODWORD(v23) = *(_DWORD *)(v23 + 424);
    }
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v24;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v25;
    *(_WORD *)int v236 = 1024;
    *(_DWORD *)&v236[2] = v23;
    uint64_t v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> suppressing error 0";
LABEL_119:
    int v19 = v22;
    uint64_t v20 = OS_LOG_TYPE_DEBUG;
    int v21 = 50;
LABEL_27:
    _os_log_impl(&dword_181A5C000, v19, v20, v18, buf, v21);
    return;
  }

  if (*(_DWORD *)(v12 + 868))
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      return;
    }
    uint64_t v14 = *(void *)(v12 + 488);
    uint64_t v15 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
    int v16 = *(_DWORD *)(v12 + 860);
    if (v14) {
      LODWORD(v14) = *(_DWORD *)(v14 + 424);
    }
    uint64_t v17 = *(_DWORD *)(v12 + 868);
    *(_DWORD *)buf = 136448002;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v15;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v16;
    *(_WORD *)int v236 = 1024;
    *(_DWORD *)&v236[2] = v14;
    *(_WORD *)&v236[6] = 1024;
    *(_DWORD *)&v236[8] = a3;
    *(_WORD *)&v236[12] = 1024;
    *(_DWORD *)&v236[14] = v17;
    uint64_t v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> suppressing received error: %d, connection error already set to: %d";
    int v19 = (os_log_s *)v13;
    uint64_t v20 = OS_LOG_TYPE_INFO;
    int v21 = 62;
    goto LABEL_27;
  }

  *(_DWORD *)(v12 + 86_Block_object_dispose(&STACK[0x338], 8) = a3;
  uint64_t v26 = (unsigned __int16 *)(v12 + 872);
  int v27 = *(unsigned __int16 *)(v12 + 872);
  uint64_t v28 = v27 | (*(unsigned __int8 *)(v12 + 874) << 16);
  if ((v27 & 0x2000) != 0)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
      goto LABEL_112;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v65 = (os_log_s *)gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      goto LABEL_112;
    }
    os_log_type_t v66 = *(void *)(v12 + 488);
    BOOL v67 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
    int v68 = *(_DWORD *)(v12 + 860);
    if (v66) {
      LODWORD(v66) = *(_DWORD *)(v66 + 424);
    }
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v67;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v68;
    *(_WORD *)int v236 = 1024;
    *(_DWORD *)&v236[2] = v66;
    int v69 = "%{public}s %{public}s%s<i%u:c%u:s%u> input already finished, returning";
LABEL_111:
    _os_log_impl(&dword_181A5C000, v65, OS_LOG_TYPE_INFO, v69, buf, 0x32u);
    goto LABEL_112;
  }

  *(_BYTE *)(v12 + 874) = BYTE2(v28);
  os_log_s *v26 = v28 | 0x2000;
  if ((v28 & 0x40000) != 0)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
      goto LABEL_112;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v65 = (os_log_s *)gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      goto LABEL_112;
    }
    uint64_t v70 = *(void *)(v12 + 488);
    os_log_type_t v71 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
    int v72 = *(_DWORD *)(v12 + 860);
    if (v70) {
      LODWORD(v70) = *(_DWORD *)(v70 + 424);
    }
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v71;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v72;
    *(_WORD *)int v236 = 1024;
    *(_DWORD *)&v236[2] = v70;
    int v69 = "%{public}s %{public}s%s<i%u:c%u:s%u> already getting input frames, returning";
    goto LABEL_111;
  }

  os_log_type_t v230 = (_WORD *)(v12 + 872);
  uint64_t v228 = v5;
  BOOL v229 = a3;
  BOOL v29 = 0;
  BOOL v231 = 0LL;
  int v232 = &v231;
  do
  {
    int input_frames = nw_protocol_get_input_frames( *(void *)(v12 + 32),  v12,  1LL,  0xFFFFFFFFLL,  0xFFFFFFFFLL,  (uint64_t)&v231);
    uint64_t v31 = v231;
    if (!v231) {
      goto LABEL_38;
    }
    if (gLogDatapath)
    {
      uint64_t v63 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v31;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = &v231;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = v12 + 616;
        *(_WORD *)&buf[42] = 1024;
        *(_DWORD *)int v236 = 1;
        *(_WORD *)&v236[4] = 1024;
        *(_DWORD *)&v236[6] = 1;
        *(_WORD *)&v236[10] = 1024;
        *(_DWORD *)&v236[12] = 1;
        _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s called: initial frame %p, source %p, destination %p, temp %u, forwards %u, append %u",  buf,  0x3Cu);
      }
    }

    uint64_t v32 = 0;
    *(void *)int v237 = 0LL;
    *(void *)&v237[8] = v237;
    do
    {
      size_t v34 = (_DWORD *)*((void *)v31 + 4);
      if (!v34 && !*((void *)v31 + 5)) {
        size_t v34 = 0LL;
      }
      if (gLogDatapath)
      {
        uint64_t v37 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          int v38 = v31[13];
          if (v38) {
            v38 -= v31[14] + v31[15];
          }
          if (v34)
          {
            int v39 = v34[13];
            if (v39) {
              v39 -= v34[14] + v34[15];
            }
          }

          else
          {
            int v39 = 0;
          }

          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v31;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&_BYTE buf[24] = v38;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v34;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v39;
          _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)",  buf,  0x2Cu);
        }
      }

      uint64_t v35 = *((void *)v31 + 4);
      uint64_t v36 = (void *)*((void *)v31 + 5);
      if (v35)
      {
        *(void *)(v35 + 40) = v36;
        uint64_t v36 = (void *)*((void *)v31 + 5);
      }

      else
      {
        int v232 = (void *)*((void *)v31 + 5);
      }

      const char *v36 = v35;
      uint64_t v33 = *(void **)&v237[8];
      *((void *)v31 + 4) = 0LL;
      *((void *)v31 + 5) = v33;
      *uint64_t v33 = v31;
      *(void *)&v237[8] = v31 + 8;
      ++v32;
      uint64_t v31 = v34;
    }

    while (v34);
    if (v32)
    {
      if (gLogDatapath)
      {
        os_log_type_t v64 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v32;
          _os_log_impl( &dword_181A5C000,  v64,  OS_LOG_TYPE_DEBUG,  "%{public}s moving %u frames from temp array to destination array",  buf,  0x12u);
        }
      }

      __int128 v40 = *(_DWORD **)v237;
      uint64_t v41 = v32;
      if (!*(void *)v237) {
        goto LABEL_79;
      }
      uint64_t v41 = v32;
      do
      {
        os_log_type_t v44 = v40 + 8;
        int v45 = (_DWORD *)*((void *)v40 + 4);
        if (!v45 && !*((void *)v40 + 5)) {
          int v45 = 0LL;
        }
        if (gLogDatapath)
        {
          BOOL v47 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v48 = v40[13];
            if (v48) {
              v48 -= v40[14] + v40[15];
            }
            if (v45)
            {
              BOOL v49 = v45[13];
              if (v49) {
                v49 -= v45[14] + v45[15];
              }
            }

            else
            {
              BOOL v49 = 0;
            }

            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v40;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&_BYTE buf[24] = v48;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v45;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v49;
            _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)",  buf,  0x2Cu);
          }
        }

        uint64_t v46 = *((void *)v40 + 4);
        os_log_type_t v42 = (void *)*((void *)v40 + 5);
        if (v46)
        {
          *(void *)(v46 + 40) = v42;
          os_log_type_t v42 = (void *)*((void *)v40 + 5);
        }

        else
        {
          *(void *)&v237[8] = *((void *)v40 + 5);
        }

        *os_log_type_t v42 = v46;
        *os_log_type_t v44 = 0LL;
        *((void *)v40 + 5) = 0LL;
        uint64_t v43 = *(void **)(v12 + 624);
        *((void *)v40 + 5) = v43;
        os_log_s *v43 = v40;
        *(void *)(v12 + 624) = v44;
        --v41;
        __int128 v40 = v45;
      }

      while (v45);
      if (v41)
      {
LABEL_79:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v41;
        uint64_t v50 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v233 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v51 = gLogObj;
          int v52 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_93;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v41;
          uint64_t v53 = (os_log_s *)v51;
          uint64_t v54 = v52;
          char v55 = "%{public}s failed to deliver all temp frames, remaining %u frames";
        }

        else if (v233)
        {
          uint64_t v56 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v57 = (os_log_s *)gLogObj;
          int v58 = type;
          uint64_t v59 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v56)
          {
            if (v59)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v41;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v56;
              _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s failed to deliver all temp frames, remaining %u frames, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v56);
            goto LABEL_93;
          }

          if (!v59)
          {
LABEL_93:
            if (v50) {
              free(v50);
            }
            goto LABEL_37;
          }

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v41;
          uint64_t v53 = v57;
          uint64_t v54 = v58;
          char v55 = "%{public}s failed to deliver all temp frames, remaining %u frames, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v60 = gLogObj;
          int v61 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_93;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v41;
          uint64_t v53 = (os_log_s *)v60;
          uint64_t v54 = v61;
          char v55 = "%{public}s failed to deliver all temp frames, remaining %u frames, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v53, v54, v55, buf, 0x12u);
        goto LABEL_93;
      }
    }

      if (v66) {
        free(v66);
      }
      return 0LL;
    }

    if (!(_BYTE)v194)
    {
      BOOL v67 = (os_log_s *)__nwlog_obj();
      int v68 = v198;
      if (os_log_type_enabled(v67, (os_log_type_t)v198))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v205 = "nw_http_fillout_binary_message_inner";
        int v69 = "%{public}s called with null body_content, backtrace limit exceeded";
        goto LABEL_352;
      }

      goto LABEL_353;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v67 = (os_log_s *)__nwlog_obj();
    int v68 = v198;
    char v103 = os_log_type_enabled(v67, (os_log_type_t)v198);
    if (!backtrace_string)
    {
      if (v103)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v205 = "nw_http_fillout_binary_message_inner";
        int v69 = "%{public}s called with null body_content, no backtrace";
        goto LABEL_352;
      }

      goto LABEL_353;
    }

    if (v103)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v205 = "nw_http_fillout_binary_message_inner";
      uint64_t v206 = 2082;
      uint64_t v207 = backtrace_string;
      uint64_t v76 = "%{public}s called with null body_content, dumping backtrace:%{public}s";
      goto LABEL_188;
    }

LABEL_375:
  uint64_t v249 = *(void *)(v9 + 488);
  if (v249)
  {
    nw_protocol_output_available(*(void **)(v249 + 48), v249);
  }

  else if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v250 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v251 = *(void *)(v9 + 488);
      int v252 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
      int v253 = *(_DWORD *)(v9 + 860);
      if (v251) {
        LODWORD(v251) = *(_DWORD *)(v251 + 424);
      }
      *(_DWORD *)buf = 136447490;
      int v364 = "nw_protocol_http1_output_available";
      __int16 v365 = 2082;
      *(void *)int v366 = v9 + 74;
      *(_WORD *)&v366[8] = 2080;
      *(void *)&v366[10] = " ";
      __int16 v367 = 1024;
      *(_DWORD *)BOOL v368 = v252;
      *(_WORD *)&v368[4] = 1024;
      *(_DWORD *)&v368[6] = v253;
      LOWORD(v369) = 1024;
      *(_DWORD *)((char *)&v369 + 2) = v251;
      _os_log_impl( &dword_181A5C000,  v250,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> not sending output_available for connection without stream",  buf,  0x32u);
    }
  }

void nw_protocol_http1_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v266 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    os_log_type_t v154 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (v265[0] != 17)
    {
      if (v257[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v155 = (os_log_s *)__nwlog_obj();
        os_log_type_t v156 = v265[0];
        if (!os_log_type_enabled(v155, (os_log_type_t)v265[0])) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v157 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_395;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v155 = (os_log_s *)__nwlog_obj();
      os_log_type_t v156 = v265[0];
      BOOL v163 = os_log_type_enabled(v155, (os_log_type_t)v265[0]);
      if (!backtrace_string)
      {
        if (!v163) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v157 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_395;
      }

      if (v163)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v155,  v156,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_396;
    }

    BOOL v155 = (os_log_s *)__nwlog_obj();
    os_log_type_t v156 = v265[0];
    if (!os_log_type_enabled(v155, (os_log_type_t)v265[0])) {
      goto LABEL_396;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    os_log_type_t v157 = "%{public}s called with null protocol";
    goto LABEL_395;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    os_log_type_t v154 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (v265[0] != 17)
    {
      if (v257[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v155 = (os_log_s *)__nwlog_obj();
        os_log_type_t v156 = v265[0];
        if (!os_log_type_enabled(v155, (os_log_type_t)v265[0])) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v157 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_395;
      }

      os_log_type_t v164 = (char *)__nw_create_backtrace_string();
      BOOL v155 = (os_log_s *)__nwlog_obj();
      os_log_type_t v156 = v265[0];
      BOOL v165 = os_log_type_enabled(v155, (os_log_type_t)v265[0]);
      if (!v164)
      {
        if (!v165) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v157 = "%{public}s called with null handle, no backtrace";
        goto LABEL_395;
      }

      if (!v165) {
        goto LABEL_272;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v164;
      os_log_type_t v166 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_271;
    }

    BOOL v155 = (os_log_s *)__nwlog_obj();
    os_log_type_t v156 = v265[0];
    if (!os_log_type_enabled(v155, (os_log_type_t)v265[0])) {
      goto LABEL_396;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    os_log_type_t v157 = "%{public}s called with null handle";
LABEL_395:
    _os_log_impl(&dword_181A5C000, v155, v156, v157, buf, 0xCu);
    goto LABEL_396;
  }

  int v3 = *((_DWORD *)handle + 6);
  int v4 = a1->handle;
  if (v3 == 1) {
    goto LABEL_10;
  }
  if (v3 != 2)
  {
    if (v3 != 3) {
      goto LABEL_398;
    }
    uint64_t v5 = *((void *)handle + 2);
    if (v5)
    {
      int v4 = (void *)(v5 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    os_log_type_t v154 = (char *)_os_log_send_and_compose_impl();
    v265[0] = 16;
    v257[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v154, v265, v257))
    {
      if (v265[0] == 17)
      {
        BOOL v155 = (os_log_s *)__nwlog_obj();
        os_log_type_t v156 = v265[0];
        if (!os_log_type_enabled(v155, (os_log_type_t)v265[0])) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v157 = "%{public}s called with null handle->http1_connection";
        goto LABEL_395;
      }

      if (v257[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v155 = (os_log_s *)__nwlog_obj();
        os_log_type_t v156 = v265[0];
        if (!os_log_type_enabled(v155, (os_log_type_t)v265[0])) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v157 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_395;
      }

      os_log_type_t v164 = (char *)__nw_create_backtrace_string();
      BOOL v155 = (os_log_s *)__nwlog_obj();
      os_log_type_t v156 = v265[0];
      BOOL v196 = os_log_type_enabled(v155, (os_log_type_t)v265[0]);
      if (!v164)
      {
        if (!v196) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v157 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_395;
      }

      if (v196)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v164;
        os_log_type_t v166 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_271;
      }

LABEL_397:
      free(v154);
      goto LABEL_398;
    }

        free(v38);
        goto LABEL_398;
      }

      if (v119)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v205 = "_http_safe_append";
        uint64_t v41 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_395:
        _os_log_impl(&dword_181A5C000, v39, v40, v41, buf, 0xCu);
      }

            if (v225) {
              free(v225);
            }
            os_log_type_t v221 = v245;
          }
        }

        if (*(void *)(v221 + 136))
        {
          if (_nw_signposts_once != -1) {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
          }
          os_log_type_t v221 = v245;
          unsigned int v223 = 1;
          if (os_channel_sync())
          {
            nw_channel_check_defunct(v245);
            goto LABEL_378;
          }
        }

        else
        {
LABEL_378:
          unsigned int v223 = v166;
        }

        *(void *)(v221 + 400) = 0LL;
        os_log_type_t v166 = v223;
      }
    }
  }

  return v166 & 1;
}

LABEL_444:
      free(v219);
      if (!v201) {
        goto LABEL_226;
      }
LABEL_466:
      free(v201);
      goto LABEL_226;
    }

    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        char v95 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v96 = *(void *)(v9 + 488);
          int v97 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
          int v98 = *(_DWORD *)(v9 + 860);
          if (v96) {
            LODWORD(v96) = *(_DWORD *)(v96 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v97;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v98;
          LOWORD(v262) = 1024;
          *(_DWORD *)((char *)&v262 + 2) = v96;
          _os_log_impl( &dword_181A5C000,  v95,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
        }
      }
    }

void nw_protocol_http1_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v119 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v108 = "nw_http1_get_http1_protocol";
    uint64_t v71 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (v105[0] == OS_LOG_TYPE_FAULT)
    {
      int v72 = (os_log_s *)__nwlog_obj();
      os_log_type_t v73 = v105[0];
      if (!os_log_type_enabled(v72, v105[0])) {
        goto LABEL_197;
      }
      *(_DWORD *)buf = 136446210;
      int v108 = "nw_http1_get_http1_protocol";
      char v74 = "%{public}s called with null protocol";
    }

    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v72 = (os_log_s *)__nwlog_obj();
      os_log_type_t v73 = v105[0];
      BOOL v78 = os_log_type_enabled(v72, v105[0]);
      if (backtrace_string)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446466;
          int v108 = "nw_http1_get_http1_protocol";
          __int16 v109 = 2082;
          *(void *)BOOL v110 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v72,  v73,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_197:
        if (!v71) {
          goto LABEL_199;
        }
LABEL_198:
        free(v71);
        goto LABEL_199;
      }

      if (!v78) {
        goto LABEL_197;
      }
      *(_DWORD *)buf = 136446210;
      int v108 = "nw_http1_get_http1_protocol";
      char v74 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v72 = (os_log_s *)__nwlog_obj();
      os_log_type_t v73 = v105[0];
      if (!os_log_type_enabled(v72, v105[0])) {
        goto LABEL_197;
      }
      *(_DWORD *)buf = 136446210;
      int v108 = "nw_http1_get_http1_protocol";
      char v74 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_196;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v108 = "nw_http1_get_http1_protocol";
    uint64_t v71 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (v105[0] != OS_LOG_TYPE_FAULT)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        int v72 = (os_log_s *)__nwlog_obj();
        os_log_type_t v73 = v105[0];
        if (!os_log_type_enabled(v72, v105[0])) {
          goto LABEL_197;
        }
        *(_DWORD *)buf = 136446210;
        int v108 = "nw_http1_get_http1_protocol";
        char v74 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_196;
      }

      int v79 = (char *)__nw_create_backtrace_string();
      int v72 = (os_log_s *)__nwlog_obj();
      os_log_type_t v73 = v105[0];
      BOOL v80 = os_log_type_enabled(v72, v105[0]);
      if (!v79)
      {
        if (!v80) {
          goto LABEL_197;
        }
        *(_DWORD *)buf = 136446210;
        int v108 = "nw_http1_get_http1_protocol";
        char v74 = "%{public}s called with null handle, no backtrace";
        goto LABEL_196;
      }

      if (v80)
      {
        *(_DWORD *)buf = 136446466;
        int v108 = "nw_http1_get_http1_protocol";
        __int16 v109 = 2082;
        *(void *)BOOL v110 = v79;
        uint64_t v81 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_160:
        _os_log_impl(&dword_181A5C000, v72, v73, v81, buf, 0x16u);
      }

#error "1821A2958: too big function (funcsize=0)"
uint64_t nw_protocol_http1_get_output_frames( nw_protocol *a1,  nw_protocol *a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  nw_frame_array_s *a6)
{
  char *handle;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  os_log_s *v21;
  uint64_t v22;
  int v23;
  int v24;
  const char *v25;
  uint64_t v26;
  int v27;
  int v28;
  __int16 v29;
  int v30;
  size_t v31;
  int v32;
  os_log_s *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  os_log_s *v38;
  os_log_type_t v39;
  const char *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  os_log_s *v51;
  os_log_type_t v52;
  const char *v53;
  uint64_t frame;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  os_log_s *v58;
  os_log_type_t v59;
  const char *v60;
  char *v61;
  os_log_s *v62;
  os_log_type_t v63;
  const char *v64;
  os_log_s *v65;
  os_log_type_t v66;
  char v67;
  char v68;
  char *v69;
  BOOL v70;
  const char *v71;
  int v72;
  char *v73;
  BOOL v74;
  char *v75;
  os_log_s *v76;
  BOOL v77;
  char *v78;
  os_log_s *v79;
  BOOL v80;
  char *v81;
  BOOL v82;
  os_log_s *v83;
  void *v84;
  nw_frame **v85;
  uint64_t output_frames;
  os_log_s *v87;
  os_log_type_t v88;
  uint64_t *v89;
  nw_frame **tqh_last;
  os_log_s *v91;
  os_log_type_t v92;
  uint32_t v93;
  os_log_s *v94;
  os_log_s *v95;
  os_log_type_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  const char *v100;
  const char *v101;
  BOOL v102;
  char *v103;
  os_log_s *v104;
  os_log_type_t v105;
  void *v106;
  nw_frame *tqh_first;
  nw_frame *v108;
  char v109;
  os_log_s *v110;
  uint64_t v111;
  int v112;
  int v113;
  char *v114;
  os_log_s *v115;
  os_log_type_t v116;
  const char *v117;
  char *backtrace_string;
  BOOL v119;
  char *v120;
  BOOL v121;
  const char *v122;
  os_log_s *v123;
  uint64_t v124;
  int v125;
  int v126;
  BOOL v127;
  BOOL v128;
  char *v129;
  os_log_s *v130;
  os_log_type_t v131;
  const char *v132;
  BOOL v133;
  BOOL v134;
  char *v135;
  BOOL v136;
  BOOL v137;
  os_log_s *v138;
  uint64_t v139;
  int v140;
  int v141;
  BOOL v142;
  BOOL v143;
  os_log_s *v145;
  uint64_t v146;
  int v147;
  int v148;
  os_log_s *v149;
  uint64_t v150;
  int v151;
  int v152;
  os_log_s *v153;
  int v154;
  os_log_s *v155;
  int v156;
  os_log_type_t type;
  os_log_type_t typea;
  os_log_type_t typeb;
  os_log_s *v160;
  os_log_s *v161;
  os_log_type_t v162;
  os_log_s *v163;
  int v164;
  os_log_s *v165;
  const char *v166;
  uint64_t log;
  int loga;
  os_log_s *logb;
  int v170;
  char *v171;
  char *v172;
  void v173[6];
  void v174[8];
  char v175;
  os_log_type_t v176;
  uint8_t buf[4];
  const char *v178;
  __int16 v179;
  _BYTE v180[18];
  __int16 v181;
  _BYTE v182[10];
  uint64_t v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  uint64_t v189;
  os_log_type_t v189 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v178 = "nw_http1_get_http1_protocol";
    int v114 = (char *)_os_log_send_and_compose_impl();
    uint64_t v176 = OS_LOG_TYPE_ERROR;
    int v175 = 0;
    if (v176 != OS_LOG_TYPE_FAULT)
    {
      if (!v175)
      {
        __int16 v115 = (os_log_s *)__nwlog_obj();
        int v116 = v176;
        if (!os_log_type_enabled(v115, v176)) {
          goto LABEL_299;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v178 = "nw_http1_get_http1_protocol";
        __int16 v117 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_298;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v115 = (os_log_s *)__nwlog_obj();
      int v116 = v176;
      uint64_t v119 = os_log_type_enabled(v115, v176);
      if (!backtrace_string)
      {
        if (!v119) {
          goto LABEL_299;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v178 = "nw_http1_get_http1_protocol";
        __int16 v117 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_298;
      }

      if (v119)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v178 = "nw_http1_get_http1_protocol";
        uint64_t v179 = 2082;
        *(void *)uint64_t v180 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v115,  v116,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_299;
    }

    __int16 v115 = (os_log_s *)__nwlog_obj();
    int v116 = v176;
    if (!os_log_type_enabled(v115, v176)) {
      goto LABEL_299;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v178 = "nw_http1_get_http1_protocol";
    __int16 v117 = "%{public}s called with null protocol";
LABEL_298:
    _os_log_impl(&dword_181A5C000, v115, v116, v117, buf, 0xCu);
    goto LABEL_299;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v178 = "nw_http1_get_http1_protocol";
    int v114 = (char *)_os_log_send_and_compose_impl();
    uint64_t v176 = OS_LOG_TYPE_ERROR;
    int v175 = 0;
    if (v176 != OS_LOG_TYPE_FAULT)
    {
      if (!v175)
      {
        __int16 v115 = (os_log_s *)__nwlog_obj();
        int v116 = v176;
        if (!os_log_type_enabled(v115, v176)) {
          goto LABEL_299;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v178 = "nw_http1_get_http1_protocol";
        __int16 v117 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_298;
      }

      uint64_t v120 = (char *)__nw_create_backtrace_string();
      __int16 v115 = (os_log_s *)__nwlog_obj();
      int v116 = v176;
      int v121 = os_log_type_enabled(v115, v176);
      if (!v120)
      {
        if (!v121) {
          goto LABEL_299;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v178 = "nw_http1_get_http1_protocol";
        __int16 v117 = "%{public}s called with null handle, no backtrace";
        goto LABEL_298;
      }

      if (v121)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v178 = "nw_http1_get_http1_protocol";
        uint64_t v179 = 2082;
        *(void *)uint64_t v180 = v120;
        int v122 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_260:
        _os_log_impl(&dword_181A5C000, v115, v116, v122, buf, 0x16u);
      }

uint64_t nw_protocol_http1_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v93 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v82 = "nw_http1_get_http1_protocol";
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v71) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v71)
      {
        int v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type[0];
        if (!os_log_type_enabled(v31, type[0])) {
          goto LABEL_161;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v82 = "nw_http1_get_http1_protocol";
        int v33 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_160;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = type[0];
      BOOL v39 = os_log_type_enabled(v31, type[0]);
      if (!backtrace_string)
      {
        if (!v39) {
          goto LABEL_161;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v82 = "nw_http1_get_http1_protocol";
        int v33 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_160;
      }

      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v82 = "nw_http1_get_http1_protocol";
        __int16 v83 = 2082;
        int v84 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_161;
    }

    int v31 = (os_log_s *)__nwlog_obj();
    os_log_type_t v32 = type[0];
    if (!os_log_type_enabled(v31, type[0])) {
      goto LABEL_161;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v82 = "nw_http1_get_http1_protocol";
    int v33 = "%{public}s called with null protocol";
LABEL_160:
    _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0xCu);
    goto LABEL_161;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v82 = "nw_http1_get_http1_protocol";
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v71) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v71)
      {
        int v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type[0];
        if (!os_log_type_enabled(v31, type[0])) {
          goto LABEL_161;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v82 = "nw_http1_get_http1_protocol";
        int v33 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_160;
      }

      uint64_t v40 = (char *)__nw_create_backtrace_string();
      int v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = type[0];
      BOOL v41 = os_log_type_enabled(v31, type[0]);
      if (!v40)
      {
        if (!v41) {
          goto LABEL_161;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v82 = "nw_http1_get_http1_protocol";
        int v33 = "%{public}s called with null handle, no backtrace";
        goto LABEL_160;
      }

      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v82 = "nw_http1_get_http1_protocol";
        __int16 v83 = 2082;
        int v84 = v40;
        os_log_type_t v42 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_123:
        _os_log_impl(&dword_181A5C000, v31, v32, v42, buf, 0x16u);
      }

BOOL nw_protocol_http1_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v36 = "nw_http1_get_http1_protocol";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v33)
      {
        uint64_t v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_http1_get_http1_protocol";
        uint64_t v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_74;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (!v19) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_http1_get_http1_protocol";
        uint64_t v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_74;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v36 = "nw_http1_get_http1_protocol";
        __int16 v37 = 2082;
        uint64_t v38 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_75;
    }

    uint64_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v36 = "nw_http1_get_http1_protocol";
    uint64_t v17 = "%{public}s called with null protocol";
LABEL_74:
    _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
    goto LABEL_75;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v36 = "nw_http1_get_http1_protocol";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v33)
      {
        uint64_t v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_http1_get_http1_protocol";
        uint64_t v17 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_74;
      }

      int v20 = (char *)__nw_create_backtrace_string();
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_http1_get_http1_protocol";
        uint64_t v17 = "%{public}s called with null handle, no backtrace";
        goto LABEL_74;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v36 = "nw_http1_get_http1_protocol";
        __int16 v37 = 2082;
        uint64_t v38 = v20;
        int v22 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_59:
        _os_log_impl(&dword_181A5C000, v15, v16, v22, buf, 0x16u);
      }

uint64_t nw_protocol_http1_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  v48[2] = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v40 = "nw_http1_get_http1_protocol";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v40 = "nw_http1_get_http1_protocol";
      BOOL v19 = "%{public}s called with null protocol";
    }

    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v25 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v40 = "nw_http1_get_http1_protocol";
          __int16 v41 = 2082;
          int v42 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_91:
        if (!v16) {
          goto LABEL_93;
        }
        goto LABEL_92;
      }

      if (!v25) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v40 = "nw_http1_get_http1_protocol";
      BOOL v19 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v40 = "nw_http1_get_http1_protocol";
      BOOL v19 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_90;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v40 = "nw_http1_get_http1_protocol";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        uint64_t v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v40 = "nw_http1_get_http1_protocol";
        BOOL v19 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_90;
      }

      BOOL v26 = (char *)__nw_create_backtrace_string();
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v27 = os_log_type_enabled(v17, type);
      if (!v26)
      {
        if (!v27) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v40 = "nw_http1_get_http1_protocol";
        BOOL v19 = "%{public}s called with null handle, no backtrace";
        goto LABEL_90;
      }

      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v40 = "nw_http1_get_http1_protocol";
        __int16 v41 = 2082;
        int v42 = v26;
        uint64_t v28 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_75:
        _os_log_impl(&dword_181A5C000, v17, v18, v28, buf, 0x16u);
      }

void nw_protocol_http1_get_parameters(nw_protocol *a1)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v45 = "nw_http1_get_http1_protocol";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null protocol";
    }

    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v45 = "nw_http1_get_http1_protocol";
          __int16 v46 = 2082;
          __int16 v47 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_81:
        if (!v6) {
          goto LABEL_83;
        }
        goto LABEL_82;
      }

      if (!v11) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_80;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v45 = "nw_http1_get_http1_protocol";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v42)
      {
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_81;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v45 = "nw_http1_get_http1_protocol";
        uint64_t v9 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_80;
      }

      uint64_t v12 = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!v12)
      {
        if (!v13) {
          goto LABEL_81;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v45 = "nw_http1_get_http1_protocol";
        uint64_t v9 = "%{public}s called with null handle, no backtrace";
        goto LABEL_80;
      }

      if (!v13) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v45 = "nw_http1_get_http1_protocol";
      __int16 v46 = 2082;
      __int16 v47 = v12;
      int v14 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_34;
    }

    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_81;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v45 = "nw_http1_get_http1_protocol";
    uint64_t v9 = "%{public}s called with null handle";
LABEL_80:
    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_81;
  }

  int v2 = handle[6];
  int v3 = a1->handle;
  if (v2 == 1) {
    goto LABEL_10;
  }
  if (v2 != 2)
  {
    if (v2 != 3) {
      goto LABEL_83;
    }
    uint64_t v4 = *((void *)handle + 2);
    if (v4)
    {
      int v3 = (void *)(v4 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v45 = "nw_http1_get_http1_protocol";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null handle->http1_connection";
      goto LABEL_80;
    }

    if (!v42)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_80;
    }

    uint64_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v20 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v20) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_80;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v45 = "nw_http1_get_http1_protocol";
      __int16 v46 = 2082;
      __int16 v47 = v12;
      int v14 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_34;
    }

void nw_protocol_http1_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v45 = "nw_http1_get_http1_protocol";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null protocol";
    }

    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v45 = "nw_http1_get_http1_protocol";
          __int16 v46 = 2082;
          __int16 v47 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_81:
        if (!v6) {
          goto LABEL_83;
        }
        goto LABEL_82;
      }

      if (!v11) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_80;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v45 = "nw_http1_get_http1_protocol";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v42)
      {
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_81;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v45 = "nw_http1_get_http1_protocol";
        uint64_t v9 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_80;
      }

      uint64_t v12 = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!v12)
      {
        if (!v13) {
          goto LABEL_81;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v45 = "nw_http1_get_http1_protocol";
        uint64_t v9 = "%{public}s called with null handle, no backtrace";
        goto LABEL_80;
      }

      if (!v13) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v45 = "nw_http1_get_http1_protocol";
      __int16 v46 = 2082;
      __int16 v47 = v12;
      int v14 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_34;
    }

    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_81;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v45 = "nw_http1_get_http1_protocol";
    uint64_t v9 = "%{public}s called with null handle";
LABEL_80:
    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_81;
  }

  int v2 = handle[6];
  int v3 = a1->handle;
  if (v2 == 1) {
    goto LABEL_10;
  }
  if (v2 != 2)
  {
    if (v2 != 3) {
      goto LABEL_83;
    }
    uint64_t v4 = *((void *)handle + 2);
    if (v4)
    {
      int v3 = (void *)(v4 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v45 = "nw_http1_get_http1_protocol";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null handle->http1_connection";
      goto LABEL_80;
    }

    if (!v42)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_80;
    }

    uint64_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v20 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v20) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v45 = "nw_http1_get_http1_protocol";
      uint64_t v9 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_80;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v45 = "nw_http1_get_http1_protocol";
      __int16 v46 = 2082;
      __int16 v47 = v12;
      int v14 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_34;
    }

void nw_protocol_http1_stream_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_http1_get_http1_protocol";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_http1_get_http1_protocol";
      BOOL v11 = "%{public}s called with null protocol";
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v28 = "nw_http1_get_http1_protocol";
          __int16 v29 = 2082;
          BOOL v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_66:
        if (!v8) {
          goto LABEL_68;
        }
        goto LABEL_67;
      }

      if (!v13) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_http1_get_http1_protocol";
      BOOL v11 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_http1_get_http1_protocol";
      BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_65;
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_http1_get_http1_protocol";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_http1_get_http1_protocol";
        BOOL v11 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_65;
      }

      int v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_http1_get_http1_protocol";
        BOOL v11 = "%{public}s called with null handle, no backtrace";
        goto LABEL_65;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v28 = "nw_http1_get_http1_protocol";
        __int16 v29 = 2082;
        BOOL v30 = v14;
        os_log_type_t v16 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_50:
        _os_log_impl(&dword_181A5C000, v9, v10, v16, buf, 0x16u);
      }

void nw_protocol_http1_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v238 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    int v144 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (v237[0] != 17)
    {
      if (!(_BYTE)v231)
      {
        uint64_t v145 = (os_log_s *)__nwlog_obj();
        os_log_type_t v146 = v237[0];
        if (!os_log_type_enabled(v145, (os_log_type_t)v237[0])) {
          goto LABEL_333;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v147 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_332;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v145 = (os_log_s *)__nwlog_obj();
      os_log_type_t v146 = v237[0];
      BOOL v153 = os_log_type_enabled(v145, (os_log_type_t)v237[0]);
      if (!backtrace_string)
      {
        if (!v153) {
          goto LABEL_333;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v147 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_332;
      }

      if (v153)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v145,  v146,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_333;
    }

    uint64_t v145 = (os_log_s *)__nwlog_obj();
    os_log_type_t v146 = v237[0];
    if (!os_log_type_enabled(v145, (os_log_type_t)v237[0])) {
      goto LABEL_333;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    os_log_type_t v147 = "%{public}s called with null protocol";
    goto LABEL_332;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    int v144 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (v237[0] != 17)
    {
      if (!(_BYTE)v231)
      {
        uint64_t v145 = (os_log_s *)__nwlog_obj();
        os_log_type_t v146 = v237[0];
        if (!os_log_type_enabled(v145, (os_log_type_t)v237[0])) {
          goto LABEL_333;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v147 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_332;
      }

      os_log_type_t v154 = (char *)__nw_create_backtrace_string();
      uint64_t v145 = (os_log_s *)__nwlog_obj();
      os_log_type_t v146 = v237[0];
      BOOL v155 = os_log_type_enabled(v145, (os_log_type_t)v237[0]);
      if (!v154)
      {
        if (!v155) {
          goto LABEL_333;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v147 = "%{public}s called with null handle, no backtrace";
        goto LABEL_332;
      }

      if (!v155) {
        goto LABEL_247;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v154;
      os_log_type_t v156 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_246;
    }

    uint64_t v145 = (os_log_s *)__nwlog_obj();
    os_log_type_t v146 = v237[0];
    if (!os_log_type_enabled(v145, (os_log_type_t)v237[0])) {
      goto LABEL_333;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    os_log_type_t v147 = "%{public}s called with null handle";
LABEL_332:
    _os_log_impl(&dword_181A5C000, v145, v146, v147, buf, 0xCu);
    goto LABEL_333;
  }

  uint64_t v5 = a2;
  int v6 = *((_DWORD *)handle + 6);
  unsigned int v7 = a1->handle;
  if (v6 == 1) {
    goto LABEL_10;
  }
  if (v6 != 2)
  {
    if (v6 != 3) {
      goto LABEL_335;
    }
    uint64_t v8 = *((void *)handle + 2);
    if (v8)
    {
      unsigned int v7 = (void *)(v8 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    int v144 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (__nwlog_fault(v144, v237, &v231))
    {
      if (v237[0] == 17)
      {
        uint64_t v145 = (os_log_s *)__nwlog_obj();
        os_log_type_t v146 = v237[0];
        if (!os_log_type_enabled(v145, (os_log_type_t)v237[0])) {
          goto LABEL_333;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v147 = "%{public}s called with null handle->http1_connection";
        goto LABEL_332;
      }

      if (!(_BYTE)v231)
      {
        uint64_t v145 = (os_log_s *)__nwlog_obj();
        os_log_type_t v146 = v237[0];
        if (!os_log_type_enabled(v145, (os_log_type_t)v237[0])) {
          goto LABEL_333;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v147 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_332;
      }

      os_log_type_t v154 = (char *)__nw_create_backtrace_string();
      uint64_t v145 = (os_log_s *)__nwlog_obj();
      os_log_type_t v146 = v237[0];
      BOOL v174 = os_log_type_enabled(v145, (os_log_type_t)v237[0]);
      if (!v154)
      {
        if (!v174) {
          goto LABEL_333;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        os_log_type_t v147 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_332;
      }

      if (v174)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v154;
        os_log_type_t v156 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_246;
      }

LABEL_458:
        free(v200);
        goto LABEL_309;
      }

      uint64_t v181 = *(void *)(v12 + 480);
      if (v181)
      {
        uint64_t v182 = *(void *)(v181 + 200);
        *(void *)buf = v81;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        *(void *)&_BYTE buf[24] = &unk_189BBD540;
        *(void *)&buf[32] = v182;
        nw_queue_context_async(v180, buf);
        goto LABEL_309;
      }

      __nwlog_obj();
      *(_DWORD *)int v237 = 136446210;
      *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      int v200 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v233 = 0;
      if (__nwlog_fault(v200, &type, &v233))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          int v201 = (os_log_s *)__nwlog_obj();
          os_log_type_t v202 = type;
          if (!os_log_type_enabled(v201, type)) {
            goto LABEL_457;
          }
          *(_DWORD *)int v237 = 136446210;
          *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          os_log_type_t v203 = "%{public}s called with null http1";
          goto LABEL_455;
        }

        if (!v233)
        {
          int v201 = (os_log_s *)__nwlog_obj();
          os_log_type_t v202 = type;
          if (!os_log_type_enabled(v201, type)) {
            goto LABEL_457;
          }
          *(_DWORD *)int v237 = 136446210;
          *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          os_log_type_t v203 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_455;
        }

        os_log_type_t v221 = (char *)__nw_create_backtrace_string();
        int v201 = (os_log_s *)__nwlog_obj();
        os_log_type_t v202 = type;
        BOOL v224 = os_log_type_enabled(v201, type);
        if (!v221)
        {
          if (!v224) {
            goto LABEL_457;
          }
          *(_DWORD *)int v237 = 136446210;
          *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          os_log_type_t v203 = "%{public}s called with null http1, no backtrace";
          goto LABEL_455;
        }

        if (v224)
        {
          *(_DWORD *)int v237 = 136446466;
          *(void *)&v237[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          *(_WORD *)&v237[12] = 2082;
          *(void *)&v237[14] = v221;
          unsigned int v223 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_430;
        }

        goto LABEL_431;
      }

void nw_protocol_http1_notify(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v108 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v95 = "nw_http1_get_http1_protocol";
    __int16 v43 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v92 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v44 = (os_log_s *)__nwlog_obj();
      os_log_type_t v45 = type;
      if (!os_log_type_enabled(v44, type)) {
        goto LABEL_155;
      }
      *(_DWORD *)buf = 136446210;
      int v95 = "nw_http1_get_http1_protocol";
      uint64_t v46 = "%{public}s called with null protocol";
    }

    else if (v92)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v44 = (os_log_s *)__nwlog_obj();
      os_log_type_t v45 = type;
      BOOL v52 = os_log_type_enabled(v44, type);
      if (backtrace_string)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          int v95 = "nw_http1_get_http1_protocol";
          __int16 v96 = 2082;
          int v97 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_155:
        if (!v43) {
          goto LABEL_157;
        }
LABEL_156:
        free(v43);
        goto LABEL_157;
      }

      if (!v52) {
        goto LABEL_155;
      }
      *(_DWORD *)buf = 136446210;
      int v95 = "nw_http1_get_http1_protocol";
      uint64_t v46 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v44 = (os_log_s *)__nwlog_obj();
      os_log_type_t v45 = type;
      if (!os_log_type_enabled(v44, type)) {
        goto LABEL_155;
      }
      *(_DWORD *)buf = 136446210;
      int v95 = "nw_http1_get_http1_protocol";
      uint64_t v46 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_154;
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v95 = "nw_http1_get_http1_protocol";
    __int16 v43 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v92 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v92)
      {
        uint64_t v44 = (os_log_s *)__nwlog_obj();
        os_log_type_t v45 = type;
        if (!os_log_type_enabled(v44, type)) {
          goto LABEL_155;
        }
        *(_DWORD *)buf = 136446210;
        int v95 = "nw_http1_get_http1_protocol";
        uint64_t v46 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_154;
      }

      uint64_t v53 = (char *)__nw_create_backtrace_string();
      uint64_t v44 = (os_log_s *)__nwlog_obj();
      os_log_type_t v45 = type;
      BOOL v54 = os_log_type_enabled(v44, type);
      if (!v53)
      {
        if (!v54) {
          goto LABEL_155;
        }
        *(_DWORD *)buf = 136446210;
        int v95 = "nw_http1_get_http1_protocol";
        uint64_t v46 = "%{public}s called with null handle, no backtrace";
        goto LABEL_154;
      }

      if (v54)
      {
        *(_DWORD *)buf = 136446466;
        int v95 = "nw_http1_get_http1_protocol";
        __int16 v96 = 2082;
        int v97 = v53;
        BOOL v55 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_91:
        _os_log_impl(&dword_181A5C000, v44, v45, v55, buf, 0x16u);
      }

uint64_t nw_protocol_http1_copy_info(uint64_t a1, int a2)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v47 = "nw_http1_get_http1_protocol";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v47 = "nw_http1_get_http1_protocol";
      uint64_t v21 = "%{public}s called with null protocol";
    }

    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v23 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v47 = "nw_http1_get_http1_protocol";
          __int16 v48 = 2082;
          os_log_type_t v49 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_94:
        if (!v18) {
          goto LABEL_96;
        }
LABEL_95:
        free(v18);
        goto LABEL_96;
      }

      if (!v23) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v47 = "nw_http1_get_http1_protocol";
      uint64_t v21 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v47 = "nw_http1_get_http1_protocol";
      uint64_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_93;
  }

  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v47 = "nw_http1_get_http1_protocol";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v44)
      {
        uint64_t v19 = (os_log_s *)__nwlog_obj();
        os_log_type_t v20 = type;
        if (!os_log_type_enabled(v19, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_http1_get_http1_protocol";
        uint64_t v21 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_93;
      }

      int v24 = (char *)__nw_create_backtrace_string();
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v25 = os_log_type_enabled(v19, type);
      if (!v24)
      {
        if (!v25) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_http1_get_http1_protocol";
        uint64_t v21 = "%{public}s called with null handle, no backtrace";
        goto LABEL_93;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v47 = "nw_http1_get_http1_protocol";
        __int16 v48 = 2082;
        os_log_type_t v49 = v24;
        BOOL v26 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_181A5C000, v19, v20, v26, buf, 0x16u);
      }

uint64_t nw_protocol_http1_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v68 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_http1_get_http1_protocol";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        uint64_t v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v26 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (!v26) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v49 = "nw_http1_get_http1_protocol";
        __int16 v50 = 2082;
        uint64_t v51 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_94;
    }

    uint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_http1_get_http1_protocol";
    int v24 = "%{public}s called with null protocol";
LABEL_93:
    _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
    goto LABEL_94;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_http1_get_http1_protocol";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        uint64_t v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_93;
      }

      int v27 = (char *)__nw_create_backtrace_string();
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v28 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (!v28) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null handle, no backtrace";
        goto LABEL_93;
      }

      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v49 = "nw_http1_get_http1_protocol";
        __int16 v50 = 2082;
        uint64_t v51 = v27;
        os_log_type_t v29 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_181A5C000, v22, v23, v29, buf, 0x16u);
      }

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v3;
  }

  void *v3 = v2;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return 1LL;
}

uint64_t nw_http1_on_header_value_complete(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v41 = "nw_http1_on_header_value_complete";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v38)
      {
        os_log_type_t v29 = (os_log_s *)__nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          int v41 = "nw_http1_on_header_value_complete";
          BOOL v31 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_89;
        }

        goto LABEL_90;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v33 = os_log_type_enabled(v29, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          int v41 = "nw_http1_on_header_value_complete";
          BOOL v31 = "%{public}s called with null parser, no backtrace";
          goto LABEL_89;
        }

        goto LABEL_90;
      }

      if (!v33) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446466;
      int v41 = "nw_http1_on_header_value_complete";
      __int16 v42 = 2082;
      BOOL v43 = backtrace_string;
      BOOL v34 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_71;
    }

    os_log_type_t v29 = (os_log_s *)__nwlog_obj();
    os_log_type_t v30 = type;
    if (!os_log_type_enabled(v29, type)) {
      goto LABEL_90;
    }
    *(_DWORD *)buf = 136446210;
    int v41 = "nw_http1_on_header_value_complete";
    BOOL v31 = "%{public}s called with null parser";
LABEL_89:
    _os_log_impl(&dword_181A5C000, v29, v30, v31, buf, 0xCu);
    goto LABEL_90;
  }

  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v41 = "nw_http1_on_header_value_complete";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v38)
      {
        os_log_type_t v29 = (os_log_s *)__nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          int v41 = "nw_http1_on_header_value_complete";
          BOOL v31 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_89;
        }

        goto LABEL_90;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v35 = os_log_type_enabled(v29, type);
      if (!backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          int v41 = "nw_http1_on_header_value_complete";
          BOOL v31 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_89;
        }

        goto LABEL_90;
      }

      if (!v35) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446466;
      int v41 = "nw_http1_on_header_value_complete";
      __int16 v42 = 2082;
      BOOL v43 = backtrace_string;
      BOOL v34 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_71;
    }

    os_log_type_t v29 = (os_log_s *)__nwlog_obj();
    os_log_type_t v30 = type;
    if (!os_log_type_enabled(v29, type)) {
      goto LABEL_90;
    }
    *(_DWORD *)buf = 136446210;
    int v41 = "nw_http1_on_header_value_complete";
    BOOL v31 = "%{public}s called with null http1_connection";
    goto LABEL_89;
  }

  uint64_t v2 = *(void *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v41 = "nw_http1_on_header_value_complete";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446210;
      int v41 = "nw_http1_on_header_value_complete";
      BOOL v31 = "%{public}s called with null http1_stream";
      goto LABEL_89;
    }

    if (!v38)
    {
      os_log_type_t v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        int v41 = "nw_http1_on_header_value_complete";
        BOOL v31 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_89;
      }

      goto LABEL_90;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v29 = (os_log_s *)__nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v36 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        int v41 = "nw_http1_on_header_value_complete";
        BOOL v31 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_89;
      }

      goto LABEL_90;
    }

    if (!v36) {
      goto LABEL_72;
    }
    *(_DWORD *)buf = 136446466;
    int v41 = "nw_http1_on_header_value_complete";
    __int16 v42 = 2082;
    BOOL v43 = backtrace_string;
    BOOL v34 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_71:
    _os_log_impl(&dword_181A5C000, v29, v30, v34, buf, 0x16u);
    goto LABEL_72;
  }

  uint64_t v3 = *(void **)(v2 + 400);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v41 = "nw_http1_on_header_value_complete";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        int v41 = "nw_http1_on_header_value_complete";
        BOOL v31 = "%{public}s called with null parsed_fields";
        goto LABEL_89;
      }

uint64_t nw_http1_on_headers_complete(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v55 = "nw_http1_on_headers_complete";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null parser";
      goto LABEL_121;
    }

    if (!v52)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null parser, backtrace limit exceeded";
      goto LABEL_121;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = (os_log_s *)__nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v44 = os_log_type_enabled(v40, type);
    if (!backtrace_string)
    {
      if (!v44) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null parser, no backtrace";
      goto LABEL_121;
    }

    if (!v44) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v55 = "nw_http1_on_headers_complete";
    __int16 v56 = 2082;
    int v57 = backtrace_string;
    BOOL v45 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_98:
    _os_log_impl(&dword_181A5C000, v40, v41, v45, buf, 0x16u);
    goto LABEL_99;
  }

  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v55 = "nw_http1_on_headers_complete";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null http1_connection";
      goto LABEL_121;
    }

    if (!v52)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_121;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = (os_log_s *)__nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v46 = os_log_type_enabled(v40, type);
    if (!backtrace_string)
    {
      if (!v46) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_121;
    }

    if (!v46) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v55 = "nw_http1_on_headers_complete";
    __int16 v56 = 2082;
    int v57 = backtrace_string;
    BOOL v45 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
    goto LABEL_98;
  }

  uint64_t v2 = *(void *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v55 = "nw_http1_on_headers_complete";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null http1_stream";
      goto LABEL_121;
    }

    if (!v52)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_121;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = (os_log_s *)__nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v47 = os_log_type_enabled(v40, type);
    if (!backtrace_string)
    {
      if (!v47) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_121;
    }

    if (!v47) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v55 = "nw_http1_on_headers_complete";
    __int16 v56 = 2082;
    int v57 = backtrace_string;
    BOOL v45 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
    goto LABEL_98;
  }

  uint64_t v3 = *(void **)(v2 + 400);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v55 = "nw_http1_on_headers_complete";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null parsed_fields";
      goto LABEL_121;
    }

    if (!v52)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_http1_on_headers_complete";
      __int16 v42 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
      goto LABEL_121;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = (os_log_s *)__nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v48 = os_log_type_enabled(v40, type);
    if (backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v55 = "nw_http1_on_headers_complete";
        __int16 v56 = 2082;
        int v57 = backtrace_string;
        BOOL v45 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
        goto LABEL_98;
      }

uint64_t nw_http1_on_message_complete(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          id v14 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v15 = *(void *)(v2 + 488);
            int v16 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
            int v17 = *(_DWORD *)(v2 + 860);
            if (v15) {
              LODWORD(v15) = *(_DWORD *)(v15 + 424);
            }
            *(_DWORD *)buf = 136447490;
            os_log_type_t v30 = "nw_http1_on_message_complete";
            __int16 v31 = 2082;
            int v32 = (char *)(v2 + 74);
            __int16 v33 = 2080;
            BOOL v34 = " ";
            __int16 v35 = 1024;
            int v36 = v16;
            __int16 v37 = 1024;
            int v38 = v17;
            __int16 v39 = 1024;
            int v40 = v15;
            _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> message is complete",  buf,  0x32u);
          }
        }
      }

      BOOL v3 = nw_http_parsed_fields_copy_trailer_fields(*(void **)(*(void *)(v2 + 488) + 400LL));
      if (nw_http_fields_get_count((void *)v3))
      {
        if ((*(_BYTE *)(v2 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            uint64_t v18 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v19 = *(void *)(v2 + 488);
              int v20 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
              int v21 = *(_DWORD *)(v2 + 860);
              if (v19) {
                LODWORD(v19) = *(_DWORD *)(v19 + 424);
              }
              *(_DWORD *)buf = 136447490;
              os_log_type_t v30 = "nw_http1_on_message_complete";
              __int16 v31 = 2082;
              int v32 = (char *)(v2 + 74);
              __int16 v33 = 2080;
              BOOL v34 = " ";
              __int16 v35 = 1024;
              int v36 = v20;
              __int16 v37 = 1024;
              int v38 = v21;
              __int16 v39 = 1024;
              int v40 = v19;
              _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> received trailer fields",  buf,  0x32u);
            }
          }
        }

        nw_http_metadata_set_trailer_fields(*(void **)(*(void *)(v2 + 488) + 368LL), (void *)v3);
      }

      __int16 v4 = (_WORD *)(v2 + 872);
      *(_WORD *)(v2 + 872) |= 4u;
      if (*(_BYTE *)(a1 + 74) && *(_BYTE *)(a1 + 75))
      {
        __int16 v5 = *(_WORD *)(a1 + 82);
        if ((v5 & 2) != 0) {
          goto LABEL_14;
        }
      }

      else
      {
        __int16 v5 = *(_WORD *)(a1 + 82);
        if ((v5 & 1) == 0) {
          goto LABEL_14;
        }
      }

      if (*(_BYTE *)(a1 + 72) == 1
        || (int v7 = *(unsigned __int16 *)(a1 + 84), (v7 - 100) < 0x64)
        || v7 == 204
        || v7 == 304
        || (v5 & 0x40) != 0)
      {
        if (gLogDatapath) {
          goto LABEL_60;
        }
        goto LABEL_26;
      }

      if ((v5 & 0x208) != 0x200)
      {
        if ((v5 & 0x28) != 0)
        {
          if (gLogDatapath)
          {
LABEL_60:
            id v26 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v30 = "nw_http1_on_message_complete";
              _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_DEBUG, "%{public}s http should keep alive", buf, 0xCu);
            }
          }

void ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke( uint64_t a1)
{
  uint64_t v610 = *MEMORY[0x1895F89C0];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (!v1) {
    return;
  }
  uint64_t v3 = v1;
  __int16 v4 = &qword_18C45F000;
  uint64_t v580 = v1;
  if ((*(_BYTE *)(v1 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      unsigned int v255 = (os_log_s *)__nwlog_obj();
      BOOL v256 = os_log_type_enabled(v255, OS_LOG_TYPE_DEBUG);
      __int16 v4 = &qword_18C45F000;
      uint64_t v3 = v580;
      if (v256)
      {
        int v257 = *(_DWORD *)(v580 + 372);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_match_idle_connection_with_pending_stream_async_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v580 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v608 = (uint64_t)" ";
        *(_WORD *)v609 = 1024;
        *(_DWORD *)&v609[2] = v257;
        _os_log_impl( &dword_181A5C000,  v255,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> space opened in connection pool, checking for pending streams",  buf,  0x26u);
        __int16 v4 = &qword_18C45F000;
        uint64_t v3 = v580;
      }
    }
  }

  uint64_t v5 = *(void *)(v3 + 248);
  if (v5)
  {
    uint64_t v579 = *(void *)(v3 + 248);
    if ((*(_BYTE *)(v5 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        int v375 = (os_log_s *)__nwlog_obj();
        BOOL v376 = os_log_type_enabled(v375, OS_LOG_TYPE_DEBUG);
        __int16 v4 = &qword_18C45F000;
        uint64_t v3 = v580;
        if (v376)
        {
          uint64_t v377 = v5 + 74;
          uint64_t v378 = *(void *)(v5 + 256);
          int v379 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
          if (v378) {
            LODWORD(v37_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v378 + 860);
          }
          uint64_t v5 = v579;
          int v380 = *(_DWORD *)(v579 + 424);
          *(_DWORD *)buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_http1_get_next_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v377;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v608 = (uint64_t)" ";
          *(_WORD *)v609 = 1024;
          *(_DWORD *)&v609[2] = v379;
          *(_WORD *)&v609[6] = 1024;
          *(_DWORD *)&v609[8] = v378;
          *(_WORD *)&v609[12] = 1024;
          *(_DWORD *)&v609[14] = v380;
          *(_WORD *)&v609[18] = 1024;
          *(_DWORD *)&v609[20] = v380;
          *(_WORD *)&v609[24] = 2048;
          *(void *)&v609[26] = v579;
          _os_log_impl( &dword_181A5C000,  v375,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> found stream %u (%p)",  buf,  0x42u);
          uint64_t v3 = v580;
          __int16 v4 = &qword_18C45F000;
        }
      }
    }

    int v6 = (_OWORD *)(v5 + 64);
    uint64_t v7 = *(void *)(v3 + 208);
    if (v7)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = v3 + 74;
      do
      {
        uint64_t v10 = v7;
        uint64_t v7 = *(void *)(v7 + 592);
        if ((*(_WORD *)(v10 + 872) & 0x800) == 0)
        {
          if ((*(_BYTE *)(v3 + 158) & 1) != 0 || !*((_BYTE *)v4 + 1537))
          {
            uint64_t v8 = v10;
          }

          else
          {
            uint64_t v573 = v9;
            int v576 = v6;
            char v11 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
            {
              int v12 = *(_DWORD *)(v580 + 372);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_http1_get_next_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v573;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v608 = (uint64_t)" ";
              *(_WORD *)v609 = 1024;
              *(_DWORD *)&v609[2] = v12;
              *(_WORD *)&v609[6] = 2048;
              *(void *)&v609[8] = v10;
              _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> found idle connection connection %p",  buf,  0x30u);
              uint64_t v9 = v573;
              uint64_t v3 = v580;
              uint64_t v8 = v10;
              int v6 = v576;
              __int16 v4 = &qword_18C45F000;
            }

            else
            {
              uint64_t v8 = v10;
              uint64_t v3 = v580;
              int v6 = v576;
              __int16 v4 = &qword_18C45F000;
              uint64_t v9 = v573;
            }
          }
        }
      }

      while (v7);
      uint64_t v5 = v579;
      if (v8)
      {
        uint64_t v574 = v9;
        if ((*(_BYTE *)(v8 + 158) & 1) == 0)
        {
          if (*((_BYTE *)v4 + 1537))
          {
            __int128 v390 = v6;
            __int128 v391 = v4;
            __int128 v392 = (os_log_s *)__nwlog_obj();
            BOOL v393 = os_log_type_enabled(v392, OS_LOG_TYPE_DEBUG);
            __int16 v4 = v391;
            int v6 = v390;
            uint64_t v3 = v580;
            if (v393)
            {
              uint64_t v394 = *(void *)(v8 + 488);
              int v395 = *(_DWORD *)(*(void *)(v8 + 480) + 372LL);
              int v396 = *(_DWORD *)(v8 + 860);
              if (v394) {
                LODWORD(v394) = *(_DWORD *)(v394 + 424);
              }
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v8 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v608 = (uint64_t)" ";
              *(_WORD *)v609 = 1024;
              *(_DWORD *)&v609[2] = v395;
              *(_WORD *)&v609[6] = 1024;
              *(_DWORD *)&v609[8] = v396;
              *(_WORD *)&v609[12] = 1024;
              *(_DWORD *)&v609[14] = v394;
              *(_WORD *)&v609[18] = 2048;
              *(void *)&v609[20] = v8;
              _os_log_impl( &dword_181A5C000,  v392,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p",  buf,  0x3Cu);
              uint64_t v5 = v579;
              uint64_t v3 = v580;
              int v6 = v390;
              __int16 v4 = v391;
            }
          }
        }

        int v577 = v6;
        size_t v13 = (_WORD *)(v8 + 872);
        if (((*(unsigned __int16 *)(v8 + 872) | (*(unsigned __int8 *)(v8 + 874) << 16)) & 0x80000) == 0)
        {
          id v14 = v4;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v8;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v15, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v16 = (os_log_s *)gLogObj;
              os_log_type_t v17 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v8;
                uint64_t v18 = "%{public}s connection %p not in idle list, cannot remove";
LABEL_150:
                _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0x16u);
              }
            }

            else if ((_BYTE)aBlock)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v16 = (os_log_s *)gLogObj;
              os_log_type_t v17 = type[0];
              BOOL v96 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (backtrace_string)
              {
                if (v96)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v8;
                  *(_WORD *)&buf[22] = 2082;
                  uint64_t v608 = (uint64_t)backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
                }

                free(backtrace_string);
                goto LABEL_151;
              }

              if (v96)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v8;
                uint64_t v18 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
                goto LABEL_150;
              }
            }

            else
            {
              int v16 = (os_log_s *)__nwlog_obj();
              os_log_type_t v17 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v8;
                uint64_t v18 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
                goto LABEL_150;
              }
            }
          }

LABEL_627:
            if (v386) {
              free(v386);
            }
            uint64_t v5 = v579;
            goto LABEL_245;
          }

          uint64_t v140 = v4;
          uint64_t v141 = v3;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v142 = *(unsigned int *)(v141 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v608 = 1LL;
          *(_WORD *)v609 = 2048;
          *(void *)&v609[2] = v142;
          int v143 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v143, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              int v144 = (os_log_s *)__nwlog_obj();
              os_log_type_t v145 = type[0];
              if (os_log_type_enabled(v144, type[0]))
              {
                uint64_t v146 = *(unsigned int *)(v580 + 348);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v608 = 1LL;
                *(_WORD *)v609 = 2048;
                *(void *)&v609[2] = v146;
                os_log_type_t v147 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_211:
                _os_log_impl(&dword_181A5C000, v144, v145, v147, buf, 0x2Au);
              }
            }

            else if ((_BYTE)aBlock)
            {
              uint64_t v148 = (char *)__nw_create_backtrace_string();
              int v144 = (os_log_s *)__nwlog_obj();
              os_log_type_t v145 = type[0];
              BOOL v149 = os_log_type_enabled(v144, type[0]);
              if (v148)
              {
                if (v149)
                {
                  uint64_t v150 = *(unsigned int *)(v580 + 348);
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->pending_stream_count";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v608 = 1LL;
                  *(_WORD *)v609 = 2048;
                  *(void *)&v609[2] = v150;
                  *(_WORD *)&v609[10] = 2082;
                  *(void *)&v609[12] = v148;
                  _os_log_impl( &dword_181A5C000,  v144,  v145,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v148);
                goto LABEL_212;
              }

              if (v149)
              {
                uint64_t v152 = *(unsigned int *)(v580 + 348);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v608 = 1LL;
                *(_WORD *)v609 = 2048;
                *(void *)&v609[2] = v152;
                os_log_type_t v147 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                goto LABEL_211;
              }
            }

            else
            {
              int v144 = (os_log_s *)__nwlog_obj();
              os_log_type_t v145 = type[0];
              if (os_log_type_enabled(v144, type[0]))
              {
                uint64_t v151 = *(unsigned int *)(v580 + 348);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v608 = 1LL;
                *(_WORD *)v609 = 2048;
                *(void *)&v609[2] = v151;
                os_log_type_t v147 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                goto LABEL_211;
              }
            }
          }

LABEL_901:
                  if (v494) {
                    free(v494);
                  }
LABEL_396:
                  *(void *)buf = 0LL;
                  *(void *)&buf[8] = buf;
                  *(void *)&buf[16] = 0x2000000000LL;
                  uint64_t v608 = (uint64_t)v261;
                  uint64_t aBlock = v263;
                  uint64_t v585 = 0x40000000LL;
                  uint64_t v586 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                  __int128 v587 = &unk_189BBD4F0;
                  int v588 = (uint64_t *)buf;
                  *((void *)v261 + 76) = _Block_copy(&aBlock);
                  _Block_object_dispose(buf, 8);
                  if ((*((_BYTE *)v261 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      uint64_t v507 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v507, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v508 = *((void *)v261 + 61);
                        int v509 = *(_DWORD *)(*((void *)v261 + 60) + 372LL);
                        int v510 = *((_DWORD *)v261 + 215);
                        if (v508) {
                          LODWORD(v50_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v508 + 424);
                        }
                        *(_DWORD *)buf = 136447746;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = (char *)v261 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        uint64_t v608 = (uint64_t)" ";
                        *(_WORD *)v609 = 1024;
                        *(_DWORD *)&v609[2] = v509;
                        *(_WORD *)&v609[6] = 1024;
                        *(_DWORD *)&v609[8] = v510;
                        *(_WORD *)&v609[12] = 1024;
                        *(_DWORD *)&v609[14] = v508;
                        *(_WORD *)&v609[18] = 2048;
                        *(void *)&v609[20] = v261;
                        _os_log_impl( &dword_181A5C000,  v507,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created %p",  buf,  0x3Cu);
                      }
                    }
                  }

                  os_log_type_t v272 = (nw_path **)(v261 + 32);
                  nw_protocol_replace_input_handler((uint64_t)v575, v579, (uint64_t)v261);
                  *uint64_t v261 = *v575;
                  uint64_t v273 = (void *)*((void *)v261 + 92);
                  if (v273)
                  {
                    uint64_t v274 = v580;
                    int v275 = &qword_18C45F000;
                    if (!*((void *)v261 + 66))
                    {
                      os_log_type_t v276 = (void **)(v261 + 35);
                      id v277 = nw_parameters_copy_context(*((void **)v261 + 92));
                      *(void *)buf = nw_path_copy_flow_registration(v277, (uint64_t)v261);
                      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v261 + 35), buf);
                      uint64_t v278 = (void *)*((void *)v261 + 70);
                      if (v278)
                      {
                        id v279 = nw_path_flow_registration_copy_endpoint(v278);
                        id v280 = nw_path_flow_registration_copy_parameters(*v276);
                        *(void *)buf = nw_endpoint_copy_association_with_evaluator(v279, v280, 0LL);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v261 + 33), buf);
                        if (*((void *)v261 + 66))
                        {
                          *(void *)buf = nw_protocol_instance_stub_create((nw_protocol *)v261);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v261 + 34), buf);
                          nw_association_register_internal( *((void **)v261 + 66),  v273,  *((void **)v261 + 68),  0,  0,  &__block_literal_global_65);
                          id v281 = nw_association_copy_current_path(*((void **)v261 + 66), v280);
                          if (v281)
                          {
                            BOOL v282 = v281;
                            uint64_t v283 = (nw_path *)nw_path_copy_for_flow_registration(v281, *v276);
                            if (v283)
                            {
                              os_log_type_t v284 = v283;
                              if (*v272 != v283)
                              {
                                *(void *)buf = os_retain(v283);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v261 + 32), buf);
                              }

                              if (nw_path_has_flows(v284)) {
                                __int16 v285 = 4096;
                              }
                              else {
                                __int16 v285 = 0;
                              }
                              int v286 = *((_WORD *)v261 + 436) & 0xEFFF | (*((unsigned __int8 *)v261 + 874) << 16);
                              *((_WORD *)v261 + 436) = *((_WORD *)v261 + 436) & 0xEFFF | v285;
                              *((_BYTE *)v261 + 874) = BYTE2(v286);
                              id v287 = nw_parameters_copy_effective_proxy_config(v273);
                              if (v287)
                              {
                                int v288 = v287;
                                if (nw_path_has_proxy_config(v282, v287))
                                {
                                  *(void *)buf = os_retain(v288);
                                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v261 + 36), buf);
                                }

                                os_release(v288);
                              }

                              os_release(v284);
                            }

                            os_release(v282);
                          }
                        }

                        if (v280) {
                          os_release(v280);
                        }
                        if (v279) {
                          os_release(v279);
                        }
                      }

                      uint64_t v274 = v580;
                      int v275 = &qword_18C45F000;
                      if (v277)
                      {
                        os_release(v277);
                        int v275 = &qword_18C45F000;
                        uint64_t v274 = v580;
                      }
                    }

                    int v289 = *v272;
                    if (*v272)
                    {
LABEL_422:
                      BOOL v290 = nw_path_uses_interface_type(v289, nw_interface_type_cellular);
                      int v275 = &qword_18C45F000;
                      uint64_t v274 = v580;
                      if (v290) {
                        *((void *)v261 + 24) = 1000LL;
                      }
                    }

LABEL_479:
                    if (v329) {
                      free(v329);
                    }
                    LODWORD(v325) = -1;
                    *(_DWORD *)(v580 + 360) = -1;
                    uint64_t v293 = v579;
                    int v275 = &qword_18C45F000;
LABEL_482:
                    *((_DWORD *)v261 + 215) = v325;
                    if ((*((_BYTE *)v261 + 158) & 1) == 0)
                    {
                      if (*((_BYTE *)v275 + 1537))
                      {
                        uint64_t v511 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v511, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v512 = *((void *)v261 + 61);
                          int v513 = *(_DWORD *)(*((void *)v261 + 60) + 372LL);
                          int v514 = *((_DWORD *)v261 + 215);
                          if (v512) {
                            LODWORD(v512) = *(_DWORD *)(v512 + 424);
                          }
                          int v515 = *(_DWORD *)(v580 + 336);
                          *(_DWORD *)buf = 136448002;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = (char *)v261 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v608 = (uint64_t)" ";
                          *(_WORD *)v609 = 1024;
                          *(_DWORD *)&v609[2] = v513;
                          *(_WORD *)&v609[6] = 1024;
                          *(_DWORD *)&v609[8] = v514;
                          *(_WORD *)&v609[12] = 1024;
                          *(_DWORD *)&v609[14] = v512;
                          *(_WORD *)&v609[18] = 2048;
                          *(void *)&v609[20] = v261;
                          *(_WORD *)&v609[28] = 1024;
                          *(_DWORD *)&v609[30] = v515;
                          _os_log_impl( &dword_181A5C000,  v511,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections",  buf,  0x42u);
                          uint64_t v293 = v579;
                        }
                      }
                    }

                    if (*(void *)(v293 + 248))
                    {
                      if (*((void *)v261 + 61))
                      {
                        __nwlog_obj();
                        uint64_t v339 = *((void *)v261 + 61);
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v261;
                        *(_WORD *)&buf[22] = 2048;
                        uint64_t v608 = v339;
                        int v340 = (char *)_os_log_send_and_compose_impl();
                        type[0] = OS_LOG_TYPE_ERROR;
                        LOBYTE(aBlock) = 0;
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          int v341 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v342 = type[0];
                          if (!os_log_type_enabled(v341, type[0])) {
                            goto LABEL_511;
                          }
                          uint64_t v343 = *((void *)v261 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v261;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v608 = v343;
                          uint64_t v344 = "%{public}s Connection %p already has a stream (%p)";
                        }

                        else if ((_BYTE)aBlock)
                        {
                          int v357 = (char *)__nw_create_backtrace_string();
                          int v341 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v342 = type[0];
                          BOOL v358 = os_log_type_enabled(v341, type[0]);
                          if (v357)
                          {
                            if (v358)
                            {
                              uint64_t v359 = *((void *)v261 + 61);
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v261;
                              *(_WORD *)&buf[22] = 2048;
                              uint64_t v608 = v359;
                              *(_WORD *)v609 = 2082;
                              *(void *)&v609[2] = v357;
                              _os_log_impl( &dword_181A5C000,  v341,  v342,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                            }

                            free(v357);
                            goto LABEL_511;
                          }

                          if (!v358)
                          {
LABEL_511:
                            if (v340) {
                              free(v340);
                            }
                            goto LABEL_513;
                          }

                          uint64_t v361 = *((void *)v261 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v261;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v608 = v361;
                          uint64_t v344 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                        }

                        else
                        {
                          int v341 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v342 = type[0];
                          if (!os_log_type_enabled(v341, type[0])) {
                            goto LABEL_511;
                          }
                          uint64_t v360 = *((void *)v261 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v261;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v608 = v360;
                          uint64_t v344 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                        }

                        _os_log_impl(&dword_181A5C000, v341, v342, v344, buf, 0x20u);
                        goto LABEL_511;
                      }

                      *(void *)(v293 + 256) = v261;
                      *((void *)v261 + 61) = v293;
                      nw_protocol_set_output_handler(v293, *((void *)v261 + 4));
                      nw_protocol_set_input_handler((uint64_t)v261, *(void *)(v293 + 48));
                      *(_OWORD *)uint64_t v293 = *v261;
                      __int128 v345 = v578[5];
                      __int128 v347 = v578[2];
                      __int128 v346 = v578[3];
                      v261[8] = v578[4];
                      v261[9] = v345;
                      v261[6] = v347;
                      v261[7] = v346;
                      __int128 v348 = v578[1];
                      v261[4] = *v578;
                      v261[5] = v348;
                      nw_http_transaction_metadata_set_connection_metadata( *(void **)(v293 + 352),  *((void **)v261 + 96));
                      *((_WORD *)v261 + 436) &= 0xFFD7u;
                      *((_DWORD *)v261 + 216) = 1;
                      if ((*((_BYTE *)v261 + 158) & 1) == 0)
                      {
                        BOOL v349 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v349, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v350 = *((void *)v261 + 61);
                          int v351 = *(_DWORD *)(*((void *)v261 + 60) + 372LL);
                          int v352 = *((_DWORD *)v261 + 215);
                          if (v350) {
                            LODWORD(v350) = *(_DWORD *)(v350 + 424);
                          }
                          *(_DWORD *)buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = (char *)v261 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          uint64_t v608 = (uint64_t)" ";
                          *(_WORD *)v609 = 1024;
                          *(_DWORD *)&v609[2] = v351;
                          *(_WORD *)&v609[6] = 1024;
                          *(_DWORD *)&v609[8] = v352;
                          *(_WORD *)&v609[12] = 1024;
                          *(_DWORD *)&v609[14] = v350;
                          _os_log_impl( &dword_181A5C000,  v349,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                        }
                      }

                      if ((*(_BYTE *)(v293 + 158) & 1) != 0
                        || (int v353 = (os_log_s *)__nwlog_obj(), !os_log_type_enabled(v353, OS_LOG_TYPE_INFO)))
                      {
LABEL_513:
                        if ((*(_BYTE *)(v293 + 158) & 1) != 0) {
                          goto LABEL_518;
                        }
                        goto LABEL_514;
                      }

                      uint64_t v354 = *(void *)(v293 + 256);
                      int v355 = *(_DWORD *)(*(void *)(v293 + 248) + 372LL);
                      if (v354) {
                        LODWORD(v354) = *(_DWORD *)(v354 + 860);
                      }
                      int v356 = *(_DWORD *)(v293 + 424);
                      *(_DWORD *)buf = 136448002;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v293 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      uint64_t v608 = (uint64_t)" ";
                      *(_WORD *)v609 = 1024;
                      *(_DWORD *)&v609[2] = v355;
                      *(_WORD *)&v609[6] = 1024;
                      *(_DWORD *)&v609[8] = v354;
                      *(_WORD *)&v609[12] = 1024;
                      *(_DWORD *)&v609[14] = v356;
                      *(_WORD *)&v609[18] = 2048;
                      *(void *)&v609[20] = v293;
                      *(_WORD *)&v609[28] = 2048;
                      *(void *)&v609[30] = v261;
                      _os_log_impl( &dword_181A5C000,  v353,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
                      if ((*(_BYTE *)(v293 + 158) & 1) != 0)
                      {
LABEL_518:
                        nw_http_transaction_metadata_set_first_on_connection(*(void **)(v293 + 352));
                        uint64_t v366 = nw_protocol_copy_info((uint64_t)v575, 255);
                        uint64_t v301 = (nw_protocol_stack *)v366;
                        if (v366
                          && (uint64_t v367 = *(void *)(v366 + 24), *(void *)(v366 + 16) != v367)
                          && (BOOL v368 = *(void **)(v367 - 8)) != 0LL)
                        {
                          int v369 = (nw_protocol_metadata *)os_retain(v368);
                          BOOL v370 = v369;
                          if (v369 && nw_protocol_metadata_is_tls(v369))
                          {
                            BOOL v370 = v370;
                            nw_http_connection_metadata_set_sec_metadata(*((void **)v261 + 96), v370);
                            os_release(v370);
                            nw_protocol_connect((uint64_t)v575, (uint64_t)v261);
                            goto LABEL_527;
                          }
                        }

                        else
                        {
                          BOOL v370 = 0LL;
                        }

                        if (v261)
                        {
                          nw_protocol_connect((uint64_t)v575, (uint64_t)v261);
                          if (!v370) {
                            goto LABEL_528;
                          }
                          goto LABEL_527;
                        }

                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                        os_log_type_t v471 = (char *)_os_log_send_and_compose_impl();
                        type[0] = OS_LOG_TYPE_ERROR;
                        LOBYTE(aBlock) = 0;
                        if (__nwlog_fault(v471, type, &aBlock))
                        {
                          if (type[0] == OS_LOG_TYPE_FAULT)
                          {
                            uint64_t v472 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v473 = type[0];
                            if (!os_log_type_enabled(v472, type[0])) {
                              goto LABEL_850;
                            }
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            __int128 v474 = "%{public}s called with null connection";
LABEL_849:
                            _os_log_impl(&dword_181A5C000, v472, v473, v474, buf, 0xCu);
                            goto LABEL_850;
                          }

                          if (!(_BYTE)aBlock)
                          {
                            uint64_t v472 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v473 = type[0];
                            if (!os_log_type_enabled(v472, type[0])) {
                              goto LABEL_850;
                            }
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            __int128 v474 = "%{public}s called with null connection, backtrace limit exceeded";
                            goto LABEL_849;
                          }

                          uint64_t v527 = (char *)__nw_create_backtrace_string();
                          uint64_t v472 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v473 = type[0];
                          BOOL v528 = os_log_type_enabled(v472, type[0]);
                          if (!v527)
                          {
                            if (!v528) {
                              goto LABEL_850;
                            }
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            __int128 v474 = "%{public}s called with null connection, no backtrace";
                            goto LABEL_849;
                          }

                          if (v528)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v527;
                            _os_log_impl( &dword_181A5C000,  v472,  v473,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v527);
                        }

                                if (v234) {
                                  free(v234);
                                }
LABEL_481:
                                int v246 = (uint64_t *)v634[1];
                                BOOL v247 = *v246;
                                if (*v246)
                                {
                                  nw_frame_set_metadata(*v246, 0LL, 0, v215);
                                  if (v215)
                                  {
                                    if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                                    {
                                      if (gLogDatapath)
                                      {
                                        BOOL v252 = (os_log_s *)__nwlog_obj();
                                        if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
                                        {
                                          uint64_t v253 = *(void *)(v6 + 488);
                                          if (v253) {
                                            LODWORD(v253) = *(_DWORD *)(v253 + 424);
                                          }
                                          uint64_t v254 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
                                          unsigned int v255 = *(_DWORD *)(v6 + 860);
                                          *(_DWORD *)buf = 136447746;
                                          *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                          __int16 v638 = 2082;
                                          *(void *)int v639 = v629;
                                          *(_WORD *)&v639[8] = 2080;
                                          *(void *)&v639[10] = " ";
                                          *(_WORD *)&v639[18] = 1024;
                                          *(_DWORD *)id v640 = v254;
                                          *(_WORD *)&v640[4] = 1024;
                                          *(_DWORD *)&v640[6] = v255;
                                          *(_WORD *)int v641 = 1024;
                                          *(_DWORD *)&v641[2] = v253;
                                          *(_WORD *)&v641[6] = 2048;
                                          *(void *)&v641[8] = v247;
                                          _os_log_impl( &dword_181A5C000,  v252,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> setting complete on last output frame %p",  buf,  0x3Cu);
                                        }
                                      }
                                    }
                                  }
                                }

                                nw_protocol_finalize_output_frames(v214, (uint64_t)&v633);
                                uint64_t v220 = *(void *)type;
                                if (*(void *)type)
                                {
                                  *(void *)&uint64_t v647 = 0LL;
                                  *((void *)&v647 + 1) = &v647;
                                  uint64_t v649 = 0;
                                  os_log_type_t v648 = 0x2000000000LL;
                                  *(void *)&uint64_t v643 = MEMORY[0x1895F87A8];
                                  *((void *)&v643 + 1) = 0x40000000LL;
                                  uint64_t v644 = ___ZL30nw_http1_connection_send_bytesP19nw_http1_connectionPhjb_block_invoke;
                                  uint64_t v645 = &unk_189BBD8B8;
                                  int v646 = &v647;
                                  do
                                  {
                                    if (!v220) {
                                      break;
                                    }
                                    uint64_t v248 = *(void *)(v220 + 32);
                                    uint64_t v249 = ((uint64_t (*)(__int128 *))v644)(&v643);
                                    uint64_t v220 = v248;
                                  }

                                  while ((v249 & 1) != 0);
                                  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                                  {
                                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                    networkd_settings_init();
                                    uint64_t v250 = (os_log_s *)gLogObj;
                                    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                                    {
                                      uint64_t v251 = *(void *)(v6 + 488);
                                      if (v251) {
                                        LODWORD(v251) = *(_DWORD *)(v251 + 424);
                                      }
                                      int v217 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
                                      int v218 = *(_DWORD *)(v6 + 860);
                                      os_log_type_t v219 = *(_DWORD *)(*((void *)&v647 + 1) + 24LL);
                                      *(_DWORD *)buf = 136447746;
                                      *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                      __int16 v638 = 2082;
                                      *(void *)int v639 = v629;
                                      *(_WORD *)&v639[8] = 2080;
                                      *(void *)&v639[10] = " ";
                                      *(_WORD *)&v639[18] = 1024;
                                      *(_DWORD *)id v640 = v217;
                                      *(_WORD *)&v640[4] = 1024;
                                      *(_DWORD *)&v640[6] = v218;
                                      *(_WORD *)int v641 = 1024;
                                      *(_DWORD *)&v641[2] = v251;
                                      *(_WORD *)&v641[6] = 1024;
                                      *(_DWORD *)&v641[8] = v219;
                                      _os_log_impl( &dword_181A5C000,  v250,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> failed to use %u frames, marking as failed",  buf,  0x38u);
                                    }
                                  }

                                  _Block_object_dispose(&v647, 8);
                                }

                                if (!v216)
                                {
                                  uint64_t v8 = &qword_18C45F000;
                                  uint64_t v204 = v617;
                                  os_log_type_t v208 = v622;
                                  goto LABEL_564;
                                }

                                goto LABEL_439;
                              }

                              nw_frame_collapse(v222);
                              nw_frame_unclaim(v222, v230, v228, 0);
                              int v231 = *(void *)(v222 + 32);
                              int v232 = *(void **)(v222 + 40);
                              if (v231)
                              {
                                *(void *)(v231 + 40) = v232;
                                int v232 = *(void **)(v222 + 40);
                              }

                              else
                              {
                                int v636 = *(os_log_type_t **)(v222 + 40);
                              }

                              *int v232 = v231;
                              uint64_t v233 = v634;
                              *(void *)(v222 + 32) = 0LL;
                              *(void *)(v222 + 40) = v233;
                              *uint64_t v233 = v222;
                              id v634 = (uint64_t *)(v222 + 32);
                              if (v224)
                              {
                                int v222 = v224;
                                if (v216) {
                                  continue;
                                }
                              }

                              goto LABEL_481;
                            }
                          }

                          uint64_t v434 = v208;
                          __nwlog_obj();
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                          uint64_t v435 = (char *)_os_log_send_and_compose_impl();
                          LOBYTE(v643) = 16;
                          LOBYTE(v647) = 0;
                          if (__nwlog_fault(v435, &v643, &v647))
                          {
                            if (v643 == 17)
                            {
                              int v436 = (os_log_s *)__nwlog_obj();
                              int v437 = v643;
                              if (os_log_type_enabled(v436, (os_log_type_t)v643))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                uint64_t v438 = v436;
                                int v439 = v437;
                                v440 = "%{public}s called with null output_handler";
LABEL_755:
                                _os_log_impl(&dword_181A5C000, v438, v439, v440, buf, 0xCu);
                              }
                            }

                            else if ((_BYTE)v647)
                            {
                              BOOL v441 = (char *)__nw_create_backtrace_string();
                              uint64_t v442 = (os_log_s *)__nwlog_obj();
                              int v443 = v643;
                              os_log_type_t v444 = os_log_type_enabled(v442, (os_log_type_t)v643);
                              if (v441)
                              {
                                if (v444)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                  __int16 v638 = 2082;
                                  *(void *)int v639 = v441;
                                  _os_log_impl( &dword_181A5C000,  v442,  v443,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
                                }

                                free(v441);
                                goto LABEL_756;
                              }

                              if (v444)
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                uint64_t v438 = v442;
                                int v439 = v443;
                                v440 = "%{public}s called with null output_handler, no backtrace";
                                goto LABEL_755;
                              }
                            }

                            else
                            {
                              BOOL v445 = (os_log_s *)__nwlog_obj();
                              v446 = v643;
                              if (os_log_type_enabled(v445, (os_log_type_t)v643))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                uint64_t v438 = v445;
                                int v439 = v446;
                                v440 = "%{public}s called with null output_handler, backtrace limit exceeded";
                                goto LABEL_755;
                              }
                            }
                          }

    if (v236) {
      free(v236);
    }
LABEL_481:

    _Block_object_dispose(out, 8);
    int v198 = *v114;
    int v116 = lock;
  }

  if (v198 == 19)
  {
    *(void *)out = 0LL;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000LL;
    *(void *)&out[24] = __Block_byref_object_copy__79337;
    *(void *)&out[32] = __Block_byref_object_dispose__79338;
    *(void *)&out[40] = 0LL;
    v302[0] = MEMORY[0x1895F87A8];
    v302[1] = 3221225472LL;
    BOOL v303 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_183;
    BOOL v304 = &unk_189BC9210;
    uint64_t v306 = out;
    uint64_t v305 = v298;
    os_log_type_t v243 = v305;
    uint64_t v244 = v302;
    os_unfair_lock_lock(v116);
    v303((uint64_t)v244);
    os_unfair_lock_unlock(v116);

    int v245 = *(void *)(*(void *)&out[8] + 40LL);
    if (v245)
    {
      v299[0] = MEMORY[0x1895F87A8];
      v299[1] = 3221225472LL;
      v299[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_184;
      v299[3] = &unk_189BC7780;
      os_log_type_t v300 = v243;
      uint64_t v301 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, BOOL, void *))(v245 + 16))( v245,  v301,  v294,  v299);

      goto LABEL_503;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v246 = (id)gLogObj;
    *(_DWORD *)int v413 = 136446210;
    int v414 = "nw_agent_read_message_on_queue";
    BOOL v247 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v405 = 0;
    if (__nwlog_fault(v247, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v248 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v249 = type;
        if (os_log_type_enabled(v248, type))
        {
          *(_DWORD *)int v413 = 136446210;
          int v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v248, v249, "%{public}s No handler for REMOVE_GROUP_MEMBERS", v413, 0xCu);
        }

        goto LABEL_500;
      }

      if (v405)
      {
        uint64_t v250 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v248 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v251 = type;
        BOOL v252 = os_log_type_enabled(v248, type);
        if (v250)
        {
          if (v252)
          {
            *(_DWORD *)int v413 = 136446466;
            int v414 = "nw_agent_read_message_on_queue";
            __int128 v415 = 2082;
            BOOL v416 = v250;
            _os_log_impl( &dword_181A5C000,  v248,  v251,  "%{public}s No handler for REMOVE_GROUP_MEMBERS, dumping backtrace:%{public}s",  v413,  0x16u);
          }

          free(v250);
          goto LABEL_501;
        }

        if (v252)
        {
          *(_DWORD *)int v413 = 136446210;
          int v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v248,  v251,  "%{public}s No handler for REMOVE_GROUP_MEMBERS, no backtrace",  v413,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v248 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v253 = type;
        if (os_log_type_enabled(v248, type))
        {
          *(_DWORD *)int v413 = 136446210;
          int v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v248,  v253,  "%{public}s No handler for REMOVE_GROUP_MEMBERS, backtrace limit exceeded",  v413,  0xCu);
        }
      }

  __break(1u);
  return result;
}

LABEL_850:
                        if (v471) {
                          free(v471);
                        }
                        nw_protocol_connect((uint64_t)v575, 0LL);
                        if (!v370)
                        {
LABEL_528:
                          if (!v301) {
                            return;
                          }
                          goto LABEL_542;
                        }
              }

LABEL_907:
                  if (v498) {
                    free(v498);
                  }
                  uint64_t v274 = v580;
                  int v275 = &qword_18C45F000;
                  int v289 = *v272;
                  if (*v272) {
                    goto LABEL_422;
                  }
                  goto LABEL_424;
                }

LABEL_916:
                __break(1u);
                return;
              }

              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              __int128 v477 = (char *)_os_log_send_and_compose_impl();
              v602[0] = 16;
              LOBYTE(v583[0]) = 0;
              if (__nwlog_fault(v477, v602, v583))
              {
                if (v602[0] == 17)
                {
                  __int16 v478 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v479 = v602[0];
                  if (!os_log_type_enabled(v478, (os_log_type_t)v602[0])) {
                    goto LABEL_861;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  int v480 = "%{public}s called with null parameters";
                  goto LABEL_860;
                }

                if (!LOBYTE(v583[0]))
                {
                  __int16 v478 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v479 = v602[0];
                  if (!os_log_type_enabled(v478, (os_log_type_t)v602[0])) {
                    goto LABEL_861;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  int v480 = "%{public}s called with null parameters, backtrace limit exceeded";
                  goto LABEL_860;
                }

                int v531 = (char *)__nw_create_backtrace_string();
                __int16 v478 = (os_log_s *)__nwlog_obj();
                os_log_type_t v479 = v602[0];
                BOOL v534 = os_log_type_enabled(v478, (os_log_type_t)v602[0]);
                if (!v531)
                {
                  if (!v534) {
                    goto LABEL_861;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  int v480 = "%{public}s called with null parameters, no backtrace";
                  goto LABEL_860;
                }

                if (v534)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v531;
                  uint64_t v533 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                  goto LABEL_728;
                }

                goto LABEL_729;
              }

LABEL_861:
              if (!v477) {
                goto LABEL_863;
              }
              goto LABEL_862;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            __int128 v477 = (char *)_os_log_send_and_compose_impl();
            v602[0] = 16;
            LOBYTE(v583[0]) = 0;
            if (v602[0] != 17)
            {
              if (!LOBYTE(v583[0]))
              {
                __int16 v478 = (os_log_s *)__nwlog_obj();
                os_log_type_t v479 = v602[0];
                if (!os_log_type_enabled(v478, (os_log_type_t)v602[0])) {
                  goto LABEL_861;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                int v480 = "%{public}s called with null endpoint, backtrace limit exceeded";
                goto LABEL_860;
              }

              int v531 = (char *)__nw_create_backtrace_string();
              __int16 v478 = (os_log_s *)__nwlog_obj();
              os_log_type_t v479 = v602[0];
              BOOL v532 = os_log_type_enabled(v478, (os_log_type_t)v602[0]);
              if (!v531)
              {
                if (!v532) {
                  goto LABEL_861;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                int v480 = "%{public}s called with null endpoint, no backtrace";
                goto LABEL_860;
              }

              if (v532)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v531;
                uint64_t v533 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_728:
                _os_log_impl(&dword_181A5C000, v478, v479, v533, buf, 0x16u);
              }

LABEL_729:
              free(v531);
              if (!v477)
              {
LABEL_863:
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                BOOL v561 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  os_log_type_t v562 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v563 = type[0];
                  if (!os_log_type_enabled(v562, type[0])) {
                    goto LABEL_877;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  uint64_t v564 = "%{public}s called with null http1_connection";
                }

                else if ((_BYTE)aBlock)
                {
                  uint64_t v565 = (char *)__nw_create_backtrace_string();
                  os_log_type_t v562 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v563 = type[0];
                  BOOL v566 = os_log_type_enabled(v562, type[0]);
                  if (v565)
                  {
                    if (v566)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v565;
                      _os_log_impl( &dword_181A5C000,  v562,  v563,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(v565);
LABEL_877:
                    if (v561) {
                      free(v561);
                    }
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    uint64_t v567 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      os_log_type_t v568 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v569 = type[0];
                      if (os_log_type_enabled(v568, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        BOOL v570 = "%{public}s called with null http1_connection";
LABEL_892:
                        _os_log_impl(&dword_181A5C000, v568, v569, v570, buf, 0xCu);
                      }
                    }

                    else if ((_BYTE)aBlock)
                    {
                      os_log_type_t v571 = (char *)__nw_create_backtrace_string();
                      os_log_type_t v568 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v569 = type[0];
                      BOOL v572 = os_log_type_enabled(v568, type[0]);
                      if (v571)
                      {
                        if (v572)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v571;
                          _os_log_impl( &dword_181A5C000,  v568,  v569,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                        }

                        free(v571);
                        goto LABEL_893;
                      }

                      if (v572)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        BOOL v570 = "%{public}s called with null http1_connection, no backtrace";
                        goto LABEL_892;
                      }
                    }

                    else
                    {
                      os_log_type_t v568 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v569 = type[0];
                      if (os_log_type_enabled(v568, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        BOOL v570 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                        goto LABEL_892;
                      }
                    }

LABEL_893:
                    if (v567) {
                      free(v567);
                    }
                    uint64_t v261 = 0LL;
LABEL_896:
                    uint64_t v293 = v579;
                    if ((*(_BYTE *)(v579 + 158) & 1) != 0) {
                      goto LABEL_518;
                    }
                    goto LABEL_514;
                  }

                  if (!v566) {
                    goto LABEL_877;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  uint64_t v564 = "%{public}s called with null http1_connection, no backtrace";
                }

                else
                {
                  os_log_type_t v562 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v563 = type[0];
                  if (!os_log_type_enabled(v562, type[0])) {
                    goto LABEL_877;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  uint64_t v564 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                }

                _os_log_impl(&dword_181A5C000, v562, v563, v564, buf, 0xCu);
                goto LABEL_877;
              }

LABEL_862:
              free(v477);
              goto LABEL_863;
            }

            __int16 v478 = (os_log_s *)__nwlog_obj();
            os_log_type_t v479 = v602[0];
            if (!os_log_type_enabled(v478, (os_log_type_t)v602[0])) {
              goto LABEL_861;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            int v480 = "%{public}s called with null endpoint";
          }

          else
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            __int128 v477 = (char *)_os_log_send_and_compose_impl();
            v602[0] = 16;
            LOBYTE(v583[0]) = 0;
            if (v602[0] != 17)
            {
              if (!LOBYTE(v583[0]))
              {
                __int16 v478 = (os_log_s *)__nwlog_obj();
                os_log_type_t v479 = v602[0];
                if (!os_log_type_enabled(v478, (os_log_type_t)v602[0])) {
                  goto LABEL_861;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                int v480 = "%{public}s called with null output_handler, backtrace limit exceeded";
                goto LABEL_860;
              }

              int v529 = (char *)__nw_create_backtrace_string();
              __int16 v478 = (os_log_s *)__nwlog_obj();
              os_log_type_t v479 = v602[0];
              BOOL v530 = os_log_type_enabled(v478, (os_log_type_t)v602[0]);
              if (!v529)
              {
                if (!v530) {
                  goto LABEL_861;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                int v480 = "%{public}s called with null output_handler, no backtrace";
                goto LABEL_860;
              }

              if (v530)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v529;
                _os_log_impl( &dword_181A5C000,  v478,  v479,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v529);
              goto LABEL_861;
            }

            __int16 v478 = (os_log_s *)__nwlog_obj();
            os_log_type_t v479 = v602[0];
            if (!os_log_type_enabled(v478, (os_log_type_t)v602[0])) {
              goto LABEL_861;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            int v480 = "%{public}s called with null output_handler";
          }

LABEL_860:
          _os_log_impl(&dword_181A5C000, v478, v479, v480, buf, 0xCu);
          goto LABEL_861;
        }

        uint64_t v301 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v5 + 320));
        uint64_t v598 = 0LL;
        uint64_t v599 = &v598;
        uint64_t v600 = 0x2000000000LL;
        char v601 = 0;
        *(void *)os_log_type_t type = 0LL;
        uint64_t v592 = (uint64_t)type;
        uint64_t v593 = 0x3802000000LL;
        uint64_t v594 = __Block_byref_object_copy__39933;
        uint64_t v595 = __Block_byref_object_dispose__39934;
        int v596 = 0LL;
        v597 |= 1u;
        uint64_t v302 = MEMORY[0x1895F87A8];
        uint64_t aBlock = MEMORY[0x1895F87A8];
        uint64_t v585 = 0x40000000LL;
        uint64_t v586 = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke;
        __int128 v587 = &unk_189BBD6B0;
        int v588 = &v598;
        int v589 = type;
        uint64_t v590 = v5;
        nw_protocol_stack_iterate_application_protocols(v301, &aBlock);
        if (*(void *)(v592 + 40)) {
          goto LABEL_441;
        }
        uint64_t v306 = nw_protocol_stack_copy_transport_protocol(v301);
        BOOL is_quic = nw_protocol_options_is_quic(v306);
        if (v306) {
          os_release(v306);
        }
        if (!is_quic)
        {
LABEL_441:
          *(void *)buf = nw_parameters_shallow_copy(*(void **)(v5 + 320));
          nw::retained_ptr<nw_endpoint *>::operator=(v5 + 320, buf);
        }

        else
        {
          BOOL v308 = *(void **)(v5 + 320);
          *(void *)buf = v302;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2;
          uint64_t v608 = (uint64_t)&unk_189BBD700;
          *(void *)v609 = type;
          *(void *)&v609[8] = &v598;
          *(void *)&v609[16] = v5;
          *(void *)&v609[24] = v580;
          nw_parameters_enumerate_transformed_parameters(v308, buf);
        }

        os_log_type_t v309 = *(void **)(v592 + 40);
        if (v309)
        {
          uint64_t v310 = v309;
          sec_protocol_options_clear_tls_application_protocols();
          sec_protocol_options_add_tls_application_protocol(v310, "http/1.1");
          os_release(v310);
        }

        *((_BYTE *)v599 + 24) = 0;
        os_log_type_t v311 = *(void **)(v5 + 320);
        v583[0] = v302;
        v583[1] = 0x40000000LL;
        v583[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_73;
        v583[3] = &unk_189BBD728;
        v583[4] = &v598;
        v583[5] = v5;
        nw_parameters_remove_application_protocol_options_from_protocol_stack(v311, v583);
        *(_WORD *)(v5 + 428) |= 8u;
        uint64_t v312 = *(unsigned int *)(v580 + 352) + 1LL;
        uint64_t v313 = v312 << 31 >> 31;
        *(_DWORD *)(v580 + 352) = v312;
        if (v313 == v312 && (v313 & 0x8000000000000000LL) == 0)
        {
LABEL_538:
          uint64_t v373 = *(void *)(v5 + 312);
          int v374 = *(void **)(v5 + 264);
          *(void *)int v602 = v302;
          *(void *)&v602[8] = 0x40000000LL;
          *(void *)&v602[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_76;
          uint64_t v603 = (uint64_t)&unk_189BBD750;
          *(void *)int v604 = v373;
          nw_queue_context_async(v374, v602);
          _Block_object_dispose(type, 8);
          if ((v597 & 1) != 0 && v596) {
            os_release(v596);
          }
          _Block_object_dispose(&v598, 8);
          if (!v301) {
            return;
          }
LABEL_542:
          os_release(v301);
          return;
        }

        __nwlog_obj();
        uint64_t v314 = *(unsigned int *)(v580 + 352);
        *(_DWORD *)int v602 = 136446978;
        *(void *)&v602[4] = "nw_http1_establish_new_connection_for_stream";
        *(_WORD *)&v602[12] = 2082;
        *(void *)&v602[14] = "http1->pending_output_handler_count";
        *(_WORD *)&v602[22] = 2048;
        uint64_t v603 = 1LL;
        *(_WORD *)int v604 = 2048;
        *(void *)&v604[2] = v314;
        int v315 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v582 = OS_LOG_TYPE_ERROR;
        char v581 = 0;
        if (__nwlog_fault(v315, &v582, &v581))
        {
          if (v582 == OS_LOG_TYPE_FAULT)
          {
            int v316 = (os_log_s *)__nwlog_obj();
            os_log_type_t v317 = v582;
            if (os_log_type_enabled(v316, v582))
            {
              uint64_t v318 = *(unsigned int *)(v580 + 352);
              *(_DWORD *)int v602 = 136446978;
              *(void *)&v602[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v602[12] = 2082;
              *(void *)&v602[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v602[22] = 2048;
              uint64_t v603 = 1LL;
              *(_WORD *)int v604 = 2048;
              *(void *)&v604[2] = v318;
              uint64_t v319 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_534:
              _os_log_impl(&dword_181A5C000, v316, v317, v319, v602, 0x2Au);
            }
          }

          else if (v581)
          {
            __int16 v320 = (char *)__nw_create_backtrace_string();
            int v316 = (os_log_s *)__nwlog_obj();
            os_log_type_t v317 = v582;
            BOOL v321 = os_log_type_enabled(v316, v582);
            if (v320)
            {
              if (v321)
              {
                uint64_t v322 = *(unsigned int *)(v580 + 352);
                *(_DWORD *)int v602 = 136447234;
                *(void *)&v602[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&v602[12] = 2082;
                *(void *)&v602[14] = "http1->pending_output_handler_count";
                *(_WORD *)&v602[22] = 2048;
                uint64_t v603 = 1LL;
                *(_WORD *)int v604 = 2048;
                *(void *)&v604[2] = v322;
                __int16 v605 = 2082;
                int v606 = v320;
                _os_log_impl( &dword_181A5C000,  v316,  v317,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  v602,  0x34u);
              }

              free(v320);
              goto LABEL_535;
            }

            if (v321)
            {
              uint64_t v372 = *(unsigned int *)(v580 + 352);
              *(_DWORD *)int v602 = 136446978;
              *(void *)&v602[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v602[12] = 2082;
              *(void *)&v602[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v602[22] = 2048;
              uint64_t v603 = 1LL;
              *(_WORD *)int v604 = 2048;
              *(void *)&v604[2] = v372;
              uint64_t v319 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_534;
            }
          }

          else
          {
            int v316 = (os_log_s *)__nwlog_obj();
            os_log_type_t v317 = v582;
            if (os_log_type_enabled(v316, v582))
            {
              uint64_t v371 = *(unsigned int *)(v580 + 352);
              *(_DWORD *)int v602 = 136446978;
              *(void *)&v602[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v602[12] = 2082;
              *(void *)&v602[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v602[22] = 2048;
              uint64_t v603 = 1LL;
              *(_WORD *)int v604 = 2048;
              *(void *)&v604[2] = v371;
              uint64_t v319 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_534;
            }
          }
        }

LABEL_348:
                  if (v241) {
                    free(v241);
                  }
                  *(_DWORD *)(v580 + 352) = 0;
                  return;
                }

      if (v219) {
        free(v219);
      }
      BOOL v43 = 0LL;
      if (v33 != &nw_protocol_ref_counted_handle) {
        goto LABEL_40;
      }
LABEL_39:
      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
LABEL_40:
      if (v43) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL), v43);
      }
LABEL_42:
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 0LL;

      goto LABEL_9;
    }

    __nwlog_obj();
    unsigned int v223 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
    BOOL v224 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v224, type, &v298))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v225 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v226 = type[0];
        if (os_log_type_enabled(v225, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          _os_log_impl(&dword_181A5C000, v225, v226, "%{public}s called with null protocol", buf, 0xCu);
        }
      }

      else
      {
        if (v298)
        {
          int v239 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v240 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v241 = type[0];
          int v242 = os_log_type_enabled(v240, type[0]);
          if (v239)
          {
            if (v242)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
              os_log_type_t v300 = 2082;
              uint64_t v301 = (uint64_t)v239;
              _os_log_impl( &dword_181A5C000,  v240,  v241,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v239);
          }

          else
          {
            if (v242)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
              _os_log_impl( &dword_181A5C000,  v240,  v241,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
            }
          }

          goto LABEL_374;
        }

        __nwlog_obj();
        BOOL v225 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v259 = type[0];
        if (os_log_type_enabled(v225, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          _os_log_impl( &dword_181A5C000,  v225,  v259,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_330:
                os_release(v238);
                goto LABEL_331;
              }

      if (v254) {
        free(v254);
      }
      goto LABEL_314;
    }

    if ((v5 & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v150 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v151 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v3;
        *(_WORD *)&buf[22] = 2080;
        BOOL v282 = " ";
        uint64_t v283 = 1024;
        os_log_type_t v284 = v151;
        _os_log_impl( &dword_181A5C000,  v150,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> First frame is not SETTINGS",  buf,  0x26u);
      }
    }

    uint64_t v152 = (void *)*((void *)v272 + 5);
    if (!v152)
    {
LABEL_258:
      __int128 v162 = a1;
      BOOL v163 = 266LL;
LABEL_305:
      nw_http3_fail_all_streams(v162, v163);
      goto LABEL_334;
    }

    while (1)
    {
      uint64_t v153 = (void (*)(void *, uint64_t, uint64_t))v152[10];
      os_log_type_t v154 = (void *)v152[4];
      if (!v153) {
        break;
      }
      BOOL v155 = v152[11];
      v152[10] = 0LL;
      v152[11] = 0LL;
      v153(v152, 1LL, v155);
LABEL_240:
      uint64_t v152 = v154;
      if (!v154) {
        goto LABEL_258;
      }
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
    os_log_type_t v156 = (const char *)_os_log_send_and_compose_impl();
    v279[0] = 16;
    LOBYTE(error) = 0;
    uint64_t v251 = (char *)v156;
    if (__nwlog_fault(v156, v279, &error))
    {
      if (v279[0] == 17)
      {
        uint64_t v238 = (os_log_s *)__nwlog_obj();
        logc = v279[0];
        if (!os_log_type_enabled(v238, (os_log_type_t)v279[0])) {
          goto LABEL_256;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        uint64_t v157 = v238;
        uint64_t v158 = logc;
        __int128 v159 = "%{public}s called with null frame->finalizer";
        goto LABEL_255;
      }

      if (!(_BYTE)error)
      {
        uint64_t v240 = (os_log_s *)__nwlog_obj();
        loge = v279[0];
        if (!os_log_type_enabled(v240, (os_log_type_t)v279[0])) {
          goto LABEL_256;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        uint64_t v157 = v240;
        uint64_t v158 = loge;
        __int128 v159 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
        goto LABEL_255;
      }

      int v239 = __nw_create_backtrace_string();
      logd = (os_log_s *)__nwlog_obj();
      uint64_t v215 = v279[0];
      __int128 v160 = os_log_type_enabled(logd, (os_log_type_t)v279[0]);
      __int128 v161 = (char *)v239;
      if (v239)
      {
        if (v160)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v239;
          _os_log_impl( &dword_181A5C000,  logd,  v215,  "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s",  buf,  0x16u);
          __int128 v161 = (char *)v239;
        }

        free(v161);
        goto LABEL_256;
      }

      if (v160)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        uint64_t v157 = logd;
        uint64_t v158 = v215;
        __int128 v159 = "%{public}s called with null frame->finalizer, no backtrace";
LABEL_255:
        _os_log_impl(&dword_181A5C000, v157, v158, v159, buf, 0xCu);
      }
    }

LABEL_824:
          if (v447) {
            free(v447);
          }
          uint64_t v67 = v580;
          uint64_t v68 = &qword_18C45F000;
          int v38 = v446;
          __int16 v83 = *v65;
          if (*v65) {
            goto LABEL_112;
          }
          goto LABEL_114;
        }

        uint64_t v428 = *(_OWORD **)(v5 + 32);
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
        uint64_t v429 = (char *)_os_log_send_and_compose_impl();
        v602[0] = 16;
        LOBYTE(v583[0]) = 0;
        if (__nwlog_fault(v429, v602, v583))
        {
          if (v602[0] == 17)
          {
            uint64_t v430 = (os_log_s *)__nwlog_obj();
            os_log_type_t v431 = v602[0];
            if (!os_log_type_enabled(v430, (os_log_type_t)v602[0])) {
              goto LABEL_778;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            BOOL v432 = "%{public}s called with null parameters";
            goto LABEL_777;
          }

          if (!LOBYTE(v583[0]))
          {
            uint64_t v430 = (os_log_s *)__nwlog_obj();
            os_log_type_t v431 = v602[0];
            if (!os_log_type_enabled(v430, (os_log_type_t)v602[0])) {
              goto LABEL_778;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            BOOL v432 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_777;
          }

          uint64_t v489 = (char *)__nw_create_backtrace_string();
          uint64_t v430 = (os_log_s *)__nwlog_obj();
          os_log_type_t v431 = v602[0];
          BOOL v506 = os_log_type_enabled(v430, (os_log_type_t)v602[0]);
          if (!v489)
          {
            if (!v506) {
              goto LABEL_778;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            BOOL v432 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_777;
          }

          if (v506)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v489;
            uint64_t v491 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
            goto LABEL_682;
          }

          goto LABEL_683;
        }

LABEL_778:
        if (!v429) {
          goto LABEL_780;
        }
        goto LABEL_779;
      }

      uint64_t v428 = *(_OWORD **)(v5 + 32);
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      uint64_t v429 = (char *)_os_log_send_and_compose_impl();
      v602[0] = 16;
      LOBYTE(v583[0]) = 0;
      if (v602[0] != 17)
      {
        if (!LOBYTE(v583[0]))
        {
          uint64_t v430 = (os_log_s *)__nwlog_obj();
          os_log_type_t v431 = v602[0];
          if (!os_log_type_enabled(v430, (os_log_type_t)v602[0])) {
            goto LABEL_778;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          BOOL v432 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_777;
        }

        uint64_t v489 = (char *)__nw_create_backtrace_string();
        uint64_t v430 = (os_log_s *)__nwlog_obj();
        os_log_type_t v431 = v602[0];
        BOOL v490 = os_log_type_enabled(v430, (os_log_type_t)v602[0]);
        if (!v489)
        {
          if (!v490) {
            goto LABEL_778;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          BOOL v432 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_777;
        }

        if (v490)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v489;
          uint64_t v491 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_682:
          _os_log_impl(&dword_181A5C000, v430, v431, v491, buf, 0x16u);
        }

LABEL_810:
              if (v555) {
                free(v555);
              }
              uint64_t v41 = 0LL;
LABEL_813:
              uint64_t v87 = v579;
              int v38 = v428;
              if ((*(_BYTE *)(v579 + 158) & 1) != 0) {
                goto LABEL_321;
              }
              goto LABEL_317;
            }

            if (!v554) {
              goto LABEL_794;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            int v552 = "%{public}s called with null http1_connection, no backtrace";
          }

          else
          {
            uint64_t v550 = (os_log_s *)__nwlog_obj();
            os_log_type_t v551 = type[0];
            if (!os_log_type_enabled(v550, type[0])) {
              goto LABEL_794;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            int v552 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          }

          _os_log_impl(&dword_181A5C000, v550, v551, v552, buf, 0xCu);
          goto LABEL_794;
        }

LABEL_779:
        free(v429);
        goto LABEL_780;
      }

      uint64_t v430 = (os_log_s *)__nwlog_obj();
      os_log_type_t v431 = v602[0];
      if (!os_log_type_enabled(v430, (os_log_type_t)v602[0])) {
        goto LABEL_778;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      BOOL v432 = "%{public}s called with null endpoint";
    }

    else
    {
      uint64_t v428 = 0LL;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      uint64_t v429 = (char *)_os_log_send_and_compose_impl();
      v602[0] = 16;
      LOBYTE(v583[0]) = 0;
      if (v602[0] != 17)
      {
        if (!LOBYTE(v583[0]))
        {
          uint64_t v430 = (os_log_s *)__nwlog_obj();
          os_log_type_t v431 = v602[0];
          if (!os_log_type_enabled(v430, (os_log_type_t)v602[0])) {
            goto LABEL_778;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          BOOL v432 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_777;
        }

        BOOL v487 = (char *)__nw_create_backtrace_string();
        uint64_t v430 = (os_log_s *)__nwlog_obj();
        os_log_type_t v431 = v602[0];
        BOOL v488 = os_log_type_enabled(v430, (os_log_type_t)v602[0]);
        if (!v487)
        {
          if (!v488) {
            goto LABEL_778;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          BOOL v432 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_777;
        }

        if (v488)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v487;
          _os_log_impl( &dword_181A5C000,  v430,  v431,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v487);
        goto LABEL_778;
      }

      uint64_t v430 = (os_log_s *)__nwlog_obj();
      os_log_type_t v431 = v602[0];
      if (!os_log_type_enabled(v430, (os_log_type_t)v602[0])) {
        goto LABEL_778;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      BOOL v432 = "%{public}s called with null output_handler";
    }

void ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke(uint64_t a1)
{
  uint64_t v148 = *MEMORY[0x1895F89C0];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 480);
  if (v3)
  {
    nw_http_connection_metadata_closed(*(void **)(v1 + 768));
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (!gLogDatapath) {
        goto LABEL_5;
      }
      int v80 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v81 = *(void *)(v2 + 488);
        int v82 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
        int v83 = *(_DWORD *)(v2 + 860);
        if (v81) {
          LODWORD(v81) = *(_DWORD *)(v81 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v2 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v140 = (uint64_t)" ";
        *(_WORD *)uint64_t v141 = 1024;
        *(_DWORD *)&v141[2] = v82;
        *(_WORD *)&v141[6] = 1024;
        *(_DWORD *)&v141[8] = v83;
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = v81;
        _os_log_impl( &dword_181A5C000,  v80,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing unprocessed_input_frames",  buf,  0x32u);
      }
    }

    if (gLogDatapath)
    {
      BOOL v84 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(void *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_181A5C000, v84, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }

uint64_t ___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v2 = a2[4];
  uint64_t v3 = (void *)a2[5];
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = (void *)a2[5];
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 656LL) = v3;
  }

  void *v3 = v2;
  a2[4] = 0LL;
  a2[5] = 0LL;
  a2[10] = 0LL;
  a2[11] = 0LL;
  nw_frame_cache_return_frame(*(void *)(a1 + 32) + 696LL, (uint64_t)a2);
  return 1LL;
}

uint64_t ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39794( uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_http1_connection::~nw_http1_connection(nw_http1_connection *this)
{
  if ((*((_BYTE *)this + 776) & 1) != 0)
  {
    uint64_t v2 = (void *)*((void *)this + 96);
    if (v2) {
      os_release(v2);
    }
  }

  *((void *)this + 96) = 0LL;
  if ((*((_BYTE *)this + 760) & 1) != 0)
  {
    uint64_t v3 = (void *)*((void *)this + 94);
    if (v3) {
      os_release(v3);
    }
  }

  *((void *)this + 94) = 0LL;
  if ((*((_BYTE *)this + 744) & 1) != 0)
  {
    uint64_t v4 = (void *)*((void *)this + 92);
    if (v4) {
      os_release(v4);
    }
  }

  *((void *)this + 92) = 0LL;
  if ((*((_BYTE *)this + 584) & 1) != 0)
  {
    uint64_t v5 = (void *)*((void *)this + 72);
    if (v5) {
      os_release(v5);
    }
  }

  *((void *)this + 72) = 0LL;
  if ((*((_BYTE *)this + 568) & 1) != 0)
  {
    uint64_t v6 = (void *)*((void *)this + 70);
    if (v6) {
      os_release(v6);
    }
  }

  *((void *)this + 70) = 0LL;
  if ((*((_BYTE *)this + 552) & 1) != 0)
  {
    char v7 = (void *)*((void *)this + 68);
    if (v7) {
      os_release(v7);
    }
  }

  *((void *)this + 6_Block_object_dispose(&STACK[0x338], 8) = 0LL;
  if ((*((_BYTE *)this + 536) & 1) != 0)
  {
    uint64_t v8 = (void *)*((void *)this + 66);
    if (v8) {
      os_release(v8);
    }
  }

  *((void *)this + 66) = 0LL;
  if ((*((_BYTE *)this + 520) & 1) != 0)
  {
    uint64_t v9 = (void *)*((void *)this + 64);
    if (v9) {
      os_release(v9);
    }
  }

  *((void *)this + 64) = 0LL;
  if ((*((_BYTE *)this + 504) & 1) != 0)
  {
    char v10 = (void *)*((void *)this + 62);
    if (v10) {
      os_release(v10);
    }
  }

  *((void *)this + 62) = 0LL;
}

void nw_protocol_http1_destroy(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a2 + 344) || *(_DWORD *)(a2 + 336))
  {
    if ((*(_BYTE *)(a2 + 158) & 1) == 0 && gLogDatapath)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v4 = *(_DWORD *)(a2 + 372);
        int v5 = *(_DWORD *)(a2 + 344);
        int v6 = *(_DWORD *)(a2 + 336);
        int v20 = 136447746;
        uint64_t v21 = "nw_protocol_http1_destroy";
        __int16 v22 = 2082;
        uint64_t v23 = a2 + 74;
        __int16 v24 = 2080;
        uint64_t v25 = " ";
        __int16 v26 = 1024;
        int v27 = v4;
        __int16 v28 = 2048;
        uint64_t v29 = a2;
        __int16 v30 = 1024;
        int v31 = v5;
        __int16 v32 = 1024;
        int v33 = v6;
        _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> not destroying http1 %p, still have %u input handlers and %u output handlers",  (uint8_t *)&v20,  0x3Cu);
      }
    }
  }

  else
  {
    if ((*(_BYTE *)(a2 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        int v9 = *(_DWORD *)(a2 + 372);
        int v20 = 136446978;
        uint64_t v21 = "nw_protocol_http1_destroy";
        __int16 v22 = 2082;
        uint64_t v23 = a2 + 74;
        __int16 v24 = 2080;
        uint64_t v25 = " ";
        __int16 v26 = 1024;
        int v27 = v9;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> no more input handlers or output handlers, destroying",  (uint8_t *)&v20,  0x26u);
      }
    }

    uint64_t v10 = *(void *)(a2 + 328);
    if (v10) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v10 + 8LL))(v10, a2, 0LL);
    }
    nw_protocol_remove_instance(a1);
    char v11 = *(_BYTE *)(a2 + 288);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = *(void **)(a2 + 280);
      if (v12)
      {
        os_release(v12);
        char v11 = *(_BYTE *)(a2 + 288);
      }
    }

    *(void *)(a2 + 280) = 0LL;
    *(_BYTE *)(a2 + 28_Block_object_dispose(&STACK[0x338], 8) = v11 | 1;
    char v13 = *(_BYTE *)(a2 + 272);
    if ((v13 & 1) != 0)
    {
      id v14 = *(void **)(a2 + 264);
      if (v14)
      {
        os_release(v14);
        char v13 = *(_BYTE *)(a2 + 272);
      }
    }

    *(void *)(a2 + 264) = 0LL;
    *(_BYTE *)(a2 + 272) = v13 | 1;
    *(void *)(a2 + 40) = 0LL;
    (*(void (**)(void))(*(void *)(a2 + 200) + 16LL))();
    int v15 = *(const void **)(a2 + 200);
    if (v15)
    {
      _Block_release(v15);
      *(void *)(a2 + 200) = 0LL;
    }

    if ((*(_BYTE *)(a2 + 320) & 1) != 0)
    {
      uint64_t v16 = *(void **)(a2 + 312);
      if (v16) {
        os_release(v16);
      }
    }

    *(void *)(a2 + 312) = 0LL;
    if ((*(_BYTE *)(a2 + 304) & 1) != 0)
    {
      os_log_type_t v17 = *(void **)(a2 + 296);
      if (v17) {
        os_release(v17);
      }
    }

    *(void *)(a2 + 296) = 0LL;
    if ((*(_BYTE *)(a2 + 288) & 1) != 0)
    {
      uint64_t v18 = *(void **)(a2 + 280);
      if (v18) {
        os_release(v18);
      }
    }

    *(void *)(a2 + 280) = 0LL;
    if ((*(_BYTE *)(a2 + 272) & 1) != 0)
    {
      os_log_type_t v19 = *(void **)(a2 + 264);
      if (v19) {
        os_release(v19);
      }
    }

    free((void *)a2);
  }

void ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke( uint64_t a1, void *a2, int a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  switch(a3)
  {
    case 0:
      id outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v60[0] = MEMORY[0x1895F87A8];
        v60[1] = 0x40000000LL;
        v60[2] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_2;
        v60[3] = &__block_descriptor_tmp_45_40221;
        v60[4] = *(void *)(a1 + 32);
        id v8 = v6;
        int v9 = v60;
        _nw_http_request_access_method((uint64_t)v8, v9);
      }

      if (!v7) {
        goto LABEL_31;
      }
      id v10 = v7;
      int status_code = _nw_http_response_get_status_code();

      if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) != 0) {
        goto LABEL_30;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v12 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_30;
      }
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = v13 + 74;
      uint64_t v15 = *(void *)(v13 + 256);
      int v16 = *(_DWORD *)(*(void *)(v13 + 248) + 372LL);
      if (v15) {
        LODWORD(v15) = *(_DWORD *)(v15 + 860);
      }
      int v17 = *(_DWORD *)(v13 + 424);
      *(_DWORD *)buf = 136447746;
      uint64_t v62 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
      __int16 v63 = 2082;
      uint64_t v64 = v14;
      __int16 v65 = 2080;
      uint64_t v66 = " ";
      __int16 v67 = 1024;
      int v68 = v16;
      __int16 v69 = 1024;
      int v70 = v15;
      __int16 v71 = 1024;
      int v72 = v17;
      __int16 v73 = 1024;
      LODWORD(v74) = status_code;
      uint64_t v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> sending response header {status=%hu}";
      goto LABEL_29;
    case 1:
      uint64_t outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) != 0) {
        return;
      }
      uint64_t v20 = outbound_body_size;
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v21 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = v22 + 74;
      uint64_t v24 = *(void *)(v22 + 256);
      int v25 = *(_DWORD *)(*(void *)(v22 + 248) + 372LL);
      if (v24) {
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      }
      int v26 = *(_DWORD *)(v22 + 424);
      *(_DWORD *)buf = 136447746;
      uint64_t v62 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
      __int16 v63 = 2082;
      uint64_t v64 = v23;
      __int16 v65 = 2080;
      uint64_t v66 = " ";
      __int16 v67 = 1024;
      int v68 = v25;
      __int16 v69 = 1024;
      int v70 = v24;
      __int16 v71 = 1024;
      int v72 = v26;
      __int16 v73 = 2048;
      uint64_t v74 = v20;
      int v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> finished sending {body_bytes=%llu}";
      goto LABEL_42;
    case 2:
      id outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v28 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v59[0] = MEMORY[0x1895F87A8];
        v59[1] = 0x40000000LL;
        v59[2] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_46;
        v59[3] = &__block_descriptor_tmp_47_40224;
        v59[4] = *(void *)(a1 + 32);
        id v29 = v6;
        __int16 v30 = v59;
        _nw_http_request_access_method((uint64_t)v29, v30);
      }

      if (v28)
      {
        id v10 = v28;
        int v31 = _nw_http_response_get_status_code();

        if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          uint64_t v12 = (os_log_s *)ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = *(void *)(a1 + 32);
            uint64_t v33 = v32 + 74;
            uint64_t v34 = *(void *)(v32 + 256);
            int v35 = *(_DWORD *)(*(void *)(v32 + 248) + 372LL);
            if (v34) {
              LODWORD(v34) = *(_DWORD *)(v34 + 860);
            }
            int v36 = *(_DWORD *)(v32 + 424);
            *(_DWORD *)buf = 136447746;
            uint64_t v62 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
            __int16 v63 = 2082;
            uint64_t v64 = v33;
            __int16 v65 = 2080;
            uint64_t v66 = " ";
            __int16 v67 = 1024;
            int v68 = v35;
            __int16 v69 = 1024;
            int v70 = v34;
            __int16 v71 = 1024;
            int v72 = v36;
            __int16 v73 = 1024;
            LODWORD(v74) = v31;
            uint64_t v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> receiving response header {status=%hu}";
LABEL_29:
            _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_INFO, v18, buf, 0x38u);
          }
        }

void ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v84 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(v2 + 488);
        int v5 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
        int v6 = *(_DWORD *)(v2 + 860);
        if (v4) {
          LODWORD(v4) = *(_DWORD *)(v4 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_cancel";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v2 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v76 = (uint64_t)" ";
        *(_WORD *)BOOL v77 = 1024;
        *(_DWORD *)&v77[2] = v5;
        *(_WORD *)&v77[6] = 1024;
        *(_DWORD *)&v77[8] = v6;
        LOWORD(v7_Block_object_dispose(&STACK[0x338], 8) = 1024;
        *(_DWORD *)((char *)&v78 + 2) = v4;
        _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u:c%u:s%u> cancelling http1 connection",  buf,  0x32u);
      }
    }

    int v7 = *(unsigned __int16 *)(v2 + 872);
    int v8 = v7 | (*(unsigned __int8 *)(v2 + 874) << 16);
    if ((v7 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v2 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v21 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v22 = *(void *)(v2 + 488);
            int v23 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
            int v24 = *(_DWORD *)(v2 + 860);
            if (v22) {
              LODWORD(v22) = *(_DWORD *)(v22 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v2 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v76 = (uint64_t)" ";
            *(_WORD *)BOOL v77 = 1024;
            *(_DWORD *)&v77[2] = v23;
            *(_WORD *)&v77[6] = 1024;
            *(_DWORD *)&v77[8] = v24;
            LOWORD(v7_Block_object_dispose(&STACK[0x338], 8) = 1024;
            *(_DWORD *)((char *)&v78 + 2) = v22;
            _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already closed",  buf,  0x32u);
          }
        }
      }

      goto LABEL_49;
    }

    int v9 = (_WORD *)(v2 + 872);
    *(_BYTE *)(v2 + 874) = BYTE2(v8);
    *(_WORD *)(v2 + 872) = v8 | 0x100;
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        __int16 v57 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v58 = *(void *)(v2 + 488);
          int v59 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
          int v60 = *(_DWORD *)(v2 + 860);
          if (v58) {
            LODWORD(v5_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v58 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v76 = (uint64_t)" ";
          *(_WORD *)BOOL v77 = 1024;
          *(_DWORD *)&v77[2] = v59;
          *(_WORD *)&v77[6] = 1024;
          *(_DWORD *)&v77[8] = v60;
          LOWORD(v7_Block_object_dispose(&STACK[0x338], 8) = 1024;
          *(_DWORD *)((char *)&v78 + 2) = v58;
          _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
        }
      }
    }

    uint64_t v10 = *(void *)(v2 + 480);
    if (!v10)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
      uint64_t v51 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v74 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v52 = (os_log_s *)__nwlog_obj();
        os_log_type_t v53 = type[0];
        if (!os_log_type_enabled(v52, type[0])) {
          goto LABEL_134;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        id v54 = "%{public}s called with null http1";
      }

      else if (v74)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v52 = (os_log_s *)__nwlog_obj();
        os_log_type_t v53 = type[0];
        BOOL v62 = os_log_type_enabled(v52, type[0]);
        if (backtrace_string)
        {
          if (v62)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_134;
        }

        if (!v62) {
          goto LABEL_134;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        id v54 = "%{public}s called with null http1, no backtrace";
      }

      else
      {
        id v52 = (os_log_s *)__nwlog_obj();
        os_log_type_t v53 = type[0];
        if (!os_log_type_enabled(v52, type[0])) {
          goto LABEL_134;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        id v54 = "%{public}s called with null http1, backtrace limit exceeded";
      }

      int v72 = buf;
LABEL_133:
      _os_log_impl(&dword_181A5C000, v52, v53, v54, v72, 0xCu);
      goto LABEL_134;
    }

    int v11 = (unsigned __int16)*v9;
    int v12 = v11 | (*(unsigned __int8 *)(v2 + 874) << 16);
    if ((v11 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v2 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          int v25 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v26 = *(void *)(v2 + 488);
            int v27 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
            int v28 = *(_DWORD *)(v2 + 860);
            if (v26) {
              LODWORD(v26) = *(_DWORD *)(v26 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v2 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v76 = (uint64_t)" ";
            *(_WORD *)BOOL v77 = 1024;
            *(_DWORD *)&v77[2] = v27;
            *(_WORD *)&v77[6] = 1024;
            *(_DWORD *)&v77[8] = v28;
            LOWORD(v7_Block_object_dispose(&STACK[0x338], 8) = 1024;
            *(_DWORD *)((char *)&v78 + 2) = v26;
            _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
          }
        }
      }

      goto LABEL_48;
    }

    *(_BYTE *)(v2 + 874) = BYTE2(v12);
    _WORD *v9 = v12 | 0x800;
    uint64_t v13 = *(unsigned int *)(v10 + 368) + 1LL;
    uint64_t v14 = v13 << 31 >> 31;
    *(_DWORD *)(v10 + 36_Block_object_dispose(&STACK[0x338], 8) = v13;
    if (v14 == v13 && (v14 & 0x8000000000000000LL) == 0)
    {
LABEL_43:
      if ((*(_BYTE *)(v2 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          __int16 v63 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v64 = *(void *)(v2 + 488);
            int v65 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
            int v66 = *(_DWORD *)(v2 + 860);
            if (v64) {
              LODWORD(v64) = *(_DWORD *)(v64 + 424);
            }
            int v67 = *(_DWORD *)(v10 + 368) + *(_DWORD *)(v10 + 364);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v2 + 74;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v76 = (uint64_t)" ";
            *(_WORD *)BOOL v77 = 1024;
            *(_DWORD *)&v77[2] = v65;
            *(_WORD *)&v77[6] = 1024;
            *(_DWORD *)&v77[8] = v66;
            LOWORD(v7_Block_object_dispose(&STACK[0x338], 8) = 1024;
            *(_DWORD *)((char *)&v78 + 2) = v64;
            HIWORD(v7_Block_object_dispose(&STACK[0x338], 8) = 1024;
            int v79 = v67;
            _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
          }
        }
      }

      uint64_t v34 = *(void **)(v2 + 496);
      if (!v34)
      {
        __nwlog_obj();
        *(_DWORD *)__int128 type = 136446210;
        uint64_t v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
        uint64_t v51 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v74 = OS_LOG_TYPE_ERROR;
        char v73 = 0;
        if (v74 == OS_LOG_TYPE_FAULT)
        {
          id v52 = (os_log_s *)__nwlog_obj();
          os_log_type_t v53 = v74;
          if (!os_log_type_enabled(v52, v74)) {
            goto LABEL_134;
          }
          *(_DWORD *)__int128 type = 136446210;
          uint64_t v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          id v54 = "%{public}s called with null http1_connection->context";
LABEL_132:
          int v72 = (uint8_t *)type;
          goto LABEL_133;
        }

        if (!v73)
        {
          id v52 = (os_log_s *)__nwlog_obj();
          os_log_type_t v53 = v74;
          if (!os_log_type_enabled(v52, v74)) {
            goto LABEL_134;
          }
          *(_DWORD *)__int128 type = 136446210;
          uint64_t v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          id v54 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_132;
        }

        int v68 = (char *)__nw_create_backtrace_string();
        id v52 = (os_log_s *)__nwlog_obj();
        os_log_type_t v53 = v74;
        BOOL v69 = os_log_type_enabled(v52, v74);
        if (!v68)
        {
          if (!v69) {
            goto LABEL_134;
          }
          *(_DWORD *)__int128 type = 136446210;
          uint64_t v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          id v54 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_132;
        }

        if (v69)
        {
          *(_DWORD *)__int128 type = 136446466;
          uint64_t v81 = "nw_http1_match_idle_connection_with_pending_stream_async";
          __int16 v82 = 2082;
          int v83 = v68;
          int v70 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_111:
          _os_log_impl(&dword_181A5C000, v52, v53, v70, (uint8_t *)type, 0x16u);
        }

uint64_t nw_http1_on_message_begin(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v13 = "nw_http1_on_message_begin";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_http1_on_message_begin";
      int v5 = "%{public}s called with null parser";
    }

    else
    {
      if (!v10)
      {
        uint64_t v3 = (os_log_s *)__nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_http1_on_message_begin";
        int v5 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v13 = "nw_http1_on_message_begin";
          __int16 v14 = 2082;
          uint64_t v15 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null parser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v2) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_33;
      }

      if (!v7) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_http1_on_message_begin";
      int v5 = "%{public}s called with null parser, no backtrace";
    }

uint64_t nw_http1_on_reset(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 48);
    if (v1)
    {
      if ((*(_BYTE *)(v1 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          int v12 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v13 = *(void *)(v1 + 488);
            int v14 = *(_DWORD *)(*(void *)(v1 + 480) + 372LL);
            int v15 = *(_DWORD *)(v1 + 860);
            if (v13) {
              LODWORD(v13) = *(_DWORD *)(v13 + 424);
            }
            *(_DWORD *)buf = 136447490;
            int v23 = "nw_http1_on_reset";
            __int16 v24 = 2082;
            int v25 = (char *)(v1 + 74);
            __int16 v26 = 2080;
            int v27 = " ";
            __int16 v28 = 1024;
            int v29 = v14;
            __int16 v30 = 1024;
            int v31 = v15;
            __int16 v32 = 1024;
            int v33 = v13;
            _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> parser sees more data after message_complete, pausing",  buf,  0x32u);
          }
        }
      }

      if ((*(_BYTE *)(*(void *)(v1 + 480) + 376LL) & 1) != 0)
      {
        int v6 = *(unsigned __int16 *)(v1 + 872) | (*(unsigned __int8 *)(v1 + 874) << 16);
      }

      else
      {
        if ((*(_BYTE *)(v1 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v2 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            uint64_t v3 = *(void *)(v1 + 488);
            int v4 = *(_DWORD *)(*(void *)(v1 + 480) + 372LL);
            int v5 = *(_DWORD *)(v1 + 860);
            if (v3) {
              LODWORD(v3) = *(_DWORD *)(v3 + 424);
            }
            *(_DWORD *)buf = 136447490;
            int v23 = "nw_http1_on_reset";
            __int16 v24 = 2082;
            int v25 = (char *)(v1 + 74);
            __int16 v26 = 2080;
            int v27 = " ";
            __int16 v28 = 1024;
            int v29 = v4;
            __int16 v30 = 1024;
            int v31 = v5;
            __int16 v32 = 1024;
            int v33 = v3;
            _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> extra bytes after a complete response, not allowing reuse",  buf,  0x32u);
          }
        }

        int v6 = *(_WORD *)(v1 + 872) & 0xFFF7 | (*(unsigned __int8 *)(v1 + 874) << 16);
      }

      *(_BYTE *)(v1 + 874) = BYTE2(v6);
      *(_WORD *)(v1 + 872) = v6 | 0x10;
      return 21LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v23 = "nw_http1_on_reset";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v23 = "nw_http1_on_reset";
        int v11 = "%{public}s called with null http1_connection";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    if (!v20)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v23 = "nw_http1_on_reset";
        int v11 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v19 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        int v23 = "nw_http1_on_reset";
        int v11 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      int v23 = "nw_http1_on_reset";
      __int16 v24 = 2082;
      int v25 = backtrace_string;
      os_log_type_t v18 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_35;
    }

    goto LABEL_36;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v23 = "nw_http1_on_reset";
  int v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v23 = "nw_http1_on_reset";
        int v11 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        int v23 = "nw_http1_on_reset";
        int v11 = "%{public}s called with null parser, no backtrace";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      int v23 = "nw_http1_on_reset";
      __int16 v24 = 2082;
      int v25 = backtrace_string;
      os_log_type_t v18 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_181A5C000, v9, v10, v18, buf, 0x16u);
    }

uint64_t nw_http1_on_method(uint64_t a1, const char *a2, size_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_http1_on_method";
    int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        BOOL v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_http1_on_method";
          BOOL v9 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_http1_on_method";
          BOOL v9 = "%{public}s called with null parser, no backtrace";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      if (!v11) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v19 = "nw_http1_on_method";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      int v12 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

    BOOL v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_http1_on_method";
    BOOL v9 = "%{public}s called with null parser";
LABEL_57:
    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_58;
  }

  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_http1_on_method";
    int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        BOOL v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_http1_on_method";
          BOOL v9 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_http1_on_method";
          BOOL v9 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      if (!v13) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v19 = "nw_http1_on_method";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      int v12 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

    BOOL v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_http1_on_method";
    BOOL v9 = "%{public}s called with null http1_connection";
    goto LABEL_57;
  }

  uint64_t v4 = *(void *)(v3 + 488);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_http1_on_method";
    int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_http1_on_method";
      BOOL v9 = "%{public}s called with null http1_stream";
      goto LABEL_57;
    }

    if (!v16)
    {
      BOOL v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_http1_on_method";
        BOOL v9 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_http1_on_method";
        BOOL v9 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (!v14) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v19 = "nw_http1_on_method";
    __int16 v20 = 2082;
    uint64_t v21 = backtrace_string;
    int v12 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_39:
    _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    goto LABEL_40;
  }

  if (*(void *)(v4 + 400))
  {
    nw_http1_append_bytes((char **)(v3 + 816), (unsigned int *)(v3 + 848), a2, a3);
    return 0LL;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "nw_http1_on_method";
  int v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      BOOL v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_http1_on_method";
        BOOL v9 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v15 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_http1_on_method";
        BOOL v9 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v19 = "nw_http1_on_method";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      int v12 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

uint64_t nw_http1_on_method_complete(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v33 = "nw_http1_on_method_complete";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      int v33 = "nw_http1_on_method_complete";
      char v16 = "%{public}s called with null parser";
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v24 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          int v33 = "nw_http1_on_method_complete";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null parser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_75:
        if (!v13) {
          return 0xFFFFFFFFLL;
        }
LABEL_76:
        free(v13);
        return 0xFFFFFFFFLL;
      }

      if (!v24) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      int v33 = "nw_http1_on_method_complete";
      char v16 = "%{public}s called with null parser, no backtrace";
    }

    else
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      int v33 = "nw_http1_on_method_complete";
      char v16 = "%{public}s called with null parser, backtrace limit exceeded";
    }

    goto LABEL_74;
  }

  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v33 = "nw_http1_on_method_complete";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v30)
      {
        BOOL v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        int v33 = "nw_http1_on_method_complete";
        char v16 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_74;
      }

      int v25 = (char *)__nw_create_backtrace_string();
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v26 = os_log_type_enabled(v14, type);
      if (!v25)
      {
        if (!v26) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        int v33 = "nw_http1_on_method_complete";
        char v16 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_74;
      }

      if (!v26) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446466;
      int v33 = "nw_http1_on_method_complete";
      __int16 v34 = 2082;
      uint64_t v35 = v25;
      int v27 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_55;
    }

    BOOL v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446210;
    int v33 = "nw_http1_on_method_complete";
    char v16 = "%{public}s called with null http1_connection";
LABEL_74:
    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_75;
  }

  uint64_t v2 = *(void *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v33 = "nw_http1_on_method_complete";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      int v33 = "nw_http1_on_method_complete";
      char v16 = "%{public}s called with null http1_stream";
      goto LABEL_74;
    }

    if (!v30)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      int v33 = "nw_http1_on_method_complete";
      char v16 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_74;
    }

    int v25 = (char *)__nw_create_backtrace_string();
    BOOL v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v28 = os_log_type_enabled(v14, type);
    if (!v25)
    {
      if (!v28) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      int v33 = "nw_http1_on_method_complete";
      char v16 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_74;
    }

    if (!v28) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446466;
    int v33 = "nw_http1_on_method_complete";
    __int16 v34 = 2082;
    uint64_t v35 = v25;
    int v27 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_55:
    _os_log_impl(&dword_181A5C000, v14, v15, v27, buf, 0x16u);
    goto LABEL_56;
  }

  uint64_t v3 = *(void **)(v2 + 400);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v33 = "nw_http1_on_method_complete";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      int v33 = "nw_http1_on_method_complete";
      char v16 = "%{public}s called with null parsed_fields";
      goto LABEL_74;
    }

    if (!v30)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      int v33 = "nw_http1_on_method_complete";
      char v16 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
      goto LABEL_74;
    }

    int v25 = (char *)__nw_create_backtrace_string();
    BOOL v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v29 = os_log_type_enabled(v14, type);
    if (!v25)
    {
      if (!v29) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      int v33 = "nw_http1_on_method_complete";
      char v16 = "%{public}s called with null parsed_fields, no backtrace";
      goto LABEL_74;
    }

    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      int v33 = "nw_http1_on_method_complete";
      __int16 v34 = 2082;
      uint64_t v35 = v25;
      int v27 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_55;
    }

uint64_t nw_http1_on_url(uint64_t a1, const char *a2, size_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v19 = "nw_http1_on_url";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        int v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          int v19 = "nw_http1_on_url";
          BOOL v9 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          int v19 = "nw_http1_on_url";
          BOOL v9 = "%{public}s called with null parser, no backtrace";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      if (!v11) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446466;
      int v19 = "nw_http1_on_url";
      __int16 v20 = 2082;
      int v21 = backtrace_string;
      int v12 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    int v19 = "nw_http1_on_url";
    BOOL v9 = "%{public}s called with null parser";
LABEL_57:
    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_58;
  }

  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v19 = "nw_http1_on_url";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        int v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          int v19 = "nw_http1_on_url";
          BOOL v9 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          int v19 = "nw_http1_on_url";
          BOOL v9 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      if (!v13) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446466;
      int v19 = "nw_http1_on_url";
      __int16 v20 = 2082;
      int v21 = backtrace_string;
      int v12 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    int v19 = "nw_http1_on_url";
    BOOL v9 = "%{public}s called with null http1_connection";
    goto LABEL_57;
  }

  uint64_t v4 = *(void *)(v3 + 488);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v19 = "nw_http1_on_url";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136446210;
      int v19 = "nw_http1_on_url";
      BOOL v9 = "%{public}s called with null http1_stream";
      goto LABEL_57;
    }

    if (!v16)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http1_on_url";
        BOOL v9 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http1_on_url";
        BOOL v9 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (!v14) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446466;
    int v19 = "nw_http1_on_url";
    __int16 v20 = 2082;
    int v21 = backtrace_string;
    int v12 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_39:
    _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    goto LABEL_40;
  }

  if (*(void *)(v4 + 400))
  {
    nw_http1_append_bytes((char **)(v3 + 824), (unsigned int *)(v3 + 852), a2, a3);
    return 0LL;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v19 = "nw_http1_on_url";
  id v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http1_on_url";
        BOOL v9 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v15 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        int v19 = "nw_http1_on_url";
        BOOL v9 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      int v19 = "nw_http1_on_url";
      __int16 v20 = 2082;
      int v21 = backtrace_string;
      int v12 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

uint64_t nw_http1_on_url_complete(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_http1_on_url_complete";
    id v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        BOOL v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_http1_on_url_complete";
          BOOL v13 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_67;
        }

        goto LABEL_68;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v21 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_http1_on_url_complete";
          BOOL v13 = "%{public}s called with null parser, no backtrace";
          goto LABEL_67;
        }

        goto LABEL_68;
      }

      if (!v21) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v29 = "nw_http1_on_url_complete";
      __int16 v30 = 2082;
      int v31 = backtrace_string;
      uint64_t v22 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_49;
    }

    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_68;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_http1_on_url_complete";
    BOOL v13 = "%{public}s called with null parser";
LABEL_67:
    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_68;
  }

  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_http1_on_url_complete";
    id v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        BOOL v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_http1_on_url_complete";
          BOOL v13 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_67;
        }

        goto LABEL_68;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v23 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_http1_on_url_complete";
          BOOL v13 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_67;
        }

        goto LABEL_68;
      }

      if (!v23) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v29 = "nw_http1_on_url_complete";
      __int16 v30 = 2082;
      int v31 = backtrace_string;
      uint64_t v22 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_49;
    }

    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_68;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_http1_on_url_complete";
    BOOL v13 = "%{public}s called with null http1_connection";
    goto LABEL_67;
  }

  uint64_t v2 = *(void *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_http1_on_url_complete";
    id v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v29 = "nw_http1_on_url_complete";
      BOOL v13 = "%{public}s called with null http1_stream";
      goto LABEL_67;
    }

    if (!v26)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_http1_on_url_complete";
        BOOL v13 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_67;
      }

      goto LABEL_68;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_http1_on_url_complete";
        BOOL v13 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_67;
      }

      goto LABEL_68;
    }

    if (!v24) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v29 = "nw_http1_on_url_complete";
    __int16 v30 = 2082;
    int v31 = backtrace_string;
    uint64_t v22 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_49:
    _os_log_impl(&dword_181A5C000, v11, v12, v22, buf, 0x16u);
    goto LABEL_50;
  }

  uint64_t v3 = *(void **)(v2 + 400);
  if (v3)
  {
    if (*(_DWORD *)(v1 + 852))
    {
      if ((*(_BYTE *)(v1 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          BOOL v14 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v15 = *(void *)(v1 + 488);
            int v16 = *(_DWORD *)(*(void *)(v1 + 480) + 372LL);
            int v17 = *(_DWORD *)(v1 + 860);
            if (v15) {
              LODWORD(v15) = *(_DWORD *)(v15 + 424);
            }
            int v18 = *(_DWORD *)(v1 + 852);
            uint64_t v19 = *(void *)(v1 + 824);
            *(_DWORD *)buf = 136448002;
            BOOL v29 = "nw_http1_on_url_complete";
            __int16 v30 = 2082;
            int v31 = (char *)(v1 + 74);
            __int16 v32 = 2080;
            int v33 = " ";
            __int16 v34 = 1024;
            int v35 = v16;
            __int16 v36 = 1024;
            int v37 = v17;
            __int16 v38 = 1024;
            int v39 = v15;
            __int16 v40 = 1040;
            int v41 = v18;
            __int16 v42 = 2080;
            uint64_t v43 = v19;
            _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> url complete:  %.*s",  buf,  0x42u);
          }
        }
      }
    }

    uint64_t v4 = *(const char **)(v1 + 824);
    if (v4)
    {
      int64_t v5 = *(unsigned int *)(v1 + 852);
      id v6 = v3;
      int v7 = _nw_http_parsed_fields_add((uint64_t)v6, (unint64_t)":path", -1LL, v4, v5, 1);

      uint64_t v4 = (const char *)(v7 - 1);
      os_log_type_t v8 = *(void **)(v1 + 824);
      if (v8)
      {
        free(v8);
        *(void *)(v1 + 824) = 0LL;
      }
    }

    *(_DWORD *)(v1 + 852) = 0;
    *(_WORD *)(v1 + 872) |= 1u;
    return (uint64_t)v4;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v29 = "nw_http1_on_url_complete";
  id v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v26)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_http1_on_url_complete";
        BOOL v13 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_67;
      }

      goto LABEL_68;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v25 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_http1_on_url_complete";
        BOOL v13 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_67;
      }

      goto LABEL_68;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v29 = "nw_http1_on_url_complete";
      __int16 v30 = 2082;
      int v31 = backtrace_string;
      uint64_t v22 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_49;
    }

uint64_t nw_http1_on_status(uint64_t a1, const char *a2, size_t a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      if (a3)
      {
        if ((*(_BYTE *)(v3 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            BOOL v11 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v12 = *(void *)(v3 + 488);
              int v13 = *(_DWORD *)(*(void *)(v3 + 480) + 372LL);
              int v14 = *(_DWORD *)(v3 + 860);
              if (v12) {
                LODWORD(v12) = *(_DWORD *)(v12 + 424);
              }
              *(_DWORD *)buf = 136448002;
              uint64_t v22 = "nw_http1_on_status";
              __int16 v23 = 2082;
              BOOL v24 = (char *)(v3 + 74);
              __int16 v25 = 2080;
              char v26 = " ";
              __int16 v27 = 1024;
              int v28 = v13;
              __int16 v29 = 1024;
              int v30 = v14;
              __int16 v31 = 1024;
              int v32 = v12;
              __int16 v33 = 1040;
              int v34 = a3;
              __int16 v35 = 2080;
              __int16 v36 = a2;
              _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> status: %.*s",  buf,  0x42u);
            }
          }
        }
      }

      nw_http1_append_bytes((char **)(v3 + 832), (unsigned int *)(v3 + 856), a2, a3);
      return 0LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_http1_on_status";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_http1_on_status";
        id v10 = "%{public}s called with null http1_connection";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (!v19)
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_http1_on_status";
        id v10 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v18 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_http1_on_status";
        id v10 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http1_on_status";
      __int16 v23 = 2082;
      BOOL v24 = backtrace_string;
      int v17 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_http1_on_status";
  int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_http1_on_status";
        id v10 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v16 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_http1_on_status";
        id v10 = "%{public}s called with null parser, no backtrace";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_http1_on_status";
      __int16 v23 = 2082;
      BOOL v24 = backtrace_string;
      int v17 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_181A5C000, v8, v9, v17, buf, 0x16u);
    }

uint64_t nw_http1_on_status_complete(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    __int16 v29 = "nw_http1_on_status_complete";
    int v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null parser";
      goto LABEL_75;
    }

    if (!v26)
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null parser, backtrace limit exceeded";
      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v19 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (!v19) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null parser, no backtrace";
      goto LABEL_75;
    }

    if (!v19) {
      goto LABEL_56;
    }
    *(_DWORD *)__str = 136446466;
    __int16 v29 = "nw_http1_on_status_complete";
    __int16 v30 = 2082;
    __int16 v31 = backtrace_string;
    __int16 v20 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_55:
    _os_log_impl(&dword_181A5C000, v15, v16, v20, (uint8_t *)__str, 0x16u);
    goto LABEL_56;
  }

  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    __int16 v29 = "nw_http1_on_status_complete";
    int v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null http1_connection";
      goto LABEL_75;
    }

    if (!v26)
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (!v21) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_75;
    }

    if (!v21) {
      goto LABEL_56;
    }
    *(_DWORD *)__str = 136446466;
    __int16 v29 = "nw_http1_on_status_complete";
    __int16 v30 = 2082;
    __int16 v31 = backtrace_string;
    __int16 v20 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
    goto LABEL_55;
  }

  uint64_t v2 = *(void *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    __int16 v29 = "nw_http1_on_status_complete";
    int v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null http1_stream";
      goto LABEL_75;
    }

    if (!v26)
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v22 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_75;
    }

    if (!v22) {
      goto LABEL_56;
    }
    *(_DWORD *)__str = 136446466;
    __int16 v29 = "nw_http1_on_status_complete";
    __int16 v30 = 2082;
    __int16 v31 = backtrace_string;
    __int16 v20 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
    goto LABEL_55;
  }

  uint64_t v3 = *(void **)(v2 + 400);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    __int16 v29 = "nw_http1_on_status_complete";
    int v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null parsed_fields";
      goto LABEL_75;
    }

    if (!v26)
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)__str = 136446210;
      __int16 v29 = "nw_http1_on_status_complete";
      int v17 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)__str = 136446466;
        __int16 v29 = "nw_http1_on_status_complete";
        __int16 v30 = 2082;
        __int16 v31 = backtrace_string;
        __int16 v20 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
        goto LABEL_55;
      }

uint64_t nw_http1_on_header_field(uint64_t a1, const char *a2, size_t a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      int v4 = *(unsigned __int16 *)(v3 + 872);
      unsigned int v5 = v4 & 0xFFFFFFFD | (*(unsigned __int8 *)(v3 + 874) << 16);
      *(_WORD *)(v3 + 872) = v4 & 0xFFFD;
      *(_BYTE *)(v3 + 874) = BYTE2(v5);
      nw_http1_append_bytes((char **)(v3 + 800), (unsigned int *)(v3 + 840), a2, a3);
      return 0LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_http1_on_header_field";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http1_on_header_field";
        id v10 = "%{public}s called with null http1_connection";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v15)
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http1_on_header_field";
        id v10 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http1_on_header_field";
        id v10 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v18 = "nw_http1_on_header_field";
      __int16 v19 = 2082;
      __int16 v20 = backtrace_string;
      int v13 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_http1_on_header_field";
  int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http1_on_header_field";
        id v10 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_http1_on_header_field";
        id v10 = "%{public}s called with null parser, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v18 = "nw_http1_on_header_field";
      __int16 v19 = 2082;
      __int16 v20 = backtrace_string;
      int v13 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v8, v9, v13, buf, 0x16u);
    }

uint64_t nw_http1_on_header_field_complete(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 48);
    if (v1)
    {
      uint64_t result = 0LL;
      *(_WORD *)(v1 + 872) |= 2u;
      return result;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_http1_on_header_field_complete";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http1_on_header_field_complete";
        id v6 = "%{public}s called with null http1_connection";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http1_on_header_field_complete";
        id v6 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http1_on_header_field_complete";
        id v6 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_http1_on_header_field_complete";
      __int16 v15 = 2082;
      os_log_type_t v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_http1_on_header_field_complete";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http1_on_header_field_complete";
        id v6 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_http1_on_header_field_complete";
        id v6 = "%{public}s called with null parser, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_http1_on_header_field_complete";
      __int16 v15 = 2082;
      os_log_type_t v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_http1_on_header_value(uint64_t a1, const char *a2, size_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_http1_on_header_value";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        int v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v19 = "nw_http1_on_header_value";
          os_log_type_t v9 = "%{public}s called with null parser, backtrace limit exceeded";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v19 = "nw_http1_on_header_value";
          os_log_type_t v9 = "%{public}s called with null parser, no backtrace";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      if (!v11) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v19 = "nw_http1_on_header_value";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      BOOL v12 = "%{public}s called with null parser, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_http1_on_header_value";
    os_log_type_t v9 = "%{public}s called with null parser";
LABEL_57:
    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_58;
  }

  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_http1_on_header_value";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        int v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v19 = "nw_http1_on_header_value";
          os_log_type_t v9 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v19 = "nw_http1_on_header_value";
          os_log_type_t v9 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      if (!v13) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v19 = "nw_http1_on_header_value";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      BOOL v12 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_http1_on_header_value";
    os_log_type_t v9 = "%{public}s called with null http1_connection";
    goto LABEL_57;
  }

  uint64_t v4 = *(void *)(v3 + 488);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_http1_on_header_value";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "nw_http1_on_header_value";
      os_log_type_t v9 = "%{public}s called with null http1_stream";
      goto LABEL_57;
    }

    if (!v16)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v19 = "nw_http1_on_header_value";
        os_log_type_t v9 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v19 = "nw_http1_on_header_value";
        os_log_type_t v9 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (!v14) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v19 = "nw_http1_on_header_value";
    __int16 v20 = 2082;
    uint64_t v21 = backtrace_string;
    BOOL v12 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
LABEL_39:
    _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    goto LABEL_40;
  }

  if (*(void *)(v4 + 400))
  {
    nw_http1_append_bytes((char **)(v3 + 808), (unsigned int *)(v3 + 844), a2, a3);
    return 0LL;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v19 = "nw_http1_on_header_value";
  id v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v19 = "nw_http1_on_header_value";
        os_log_type_t v9 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v15 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v19 = "nw_http1_on_header_value";
        os_log_type_t v9 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v19 = "nw_http1_on_header_value";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      BOOL v12 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

uint64_t nw_http1_on_body(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_http1_on_body";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http1_on_body";
      BOOL v11 = "%{public}s called with null parser";
      goto LABEL_21;
    }

    if (!v21)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http1_on_body";
      BOOL v11 = "%{public}s called with null parser, backtrace limit exceeded";
      goto LABEL_21;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v19 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v19) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http1_on_body";
      BOOL v11 = "%{public}s called with null parser, no backtrace";
      goto LABEL_21;
    }

    if (!v19) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v24 = "nw_http1_on_body";
    __int16 v25 = 2082;
    char v26 = backtrace_string;
    BOOL v14 = "%{public}s called with null parser, dumping backtrace:%{public}s";
    goto LABEL_15;
  }

  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_http1_on_body";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http1_on_body";
      BOOL v11 = "%{public}s called with null http1_connection";
      goto LABEL_21;
    }

    if (!v21)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http1_on_body";
      BOOL v11 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_21;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v20 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v20) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http1_on_body";
      BOOL v11 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_21;
    }

    if (!v20) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v24 = "nw_http1_on_body";
    __int16 v25 = 2082;
    char v26 = backtrace_string;
    BOOL v14 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
    goto LABEL_15;
  }

  if ((*(_BYTE *)(v3 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v15 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v16 = *(void *)(v3 + 488);
        int v17 = *(_DWORD *)(*(void *)(v3 + 480) + 372LL);
        int v18 = *(_DWORD *)(v3 + 860);
        if (v16) {
          LODWORD(v16) = *(_DWORD *)(v16 + 424);
        }
        *(_DWORD *)buf = 136448002;
        BOOL v24 = "nw_http1_on_body";
        __int16 v25 = 2082;
        char v26 = (char *)(v3 + 74);
        __int16 v27 = 2080;
        int v28 = " ";
        __int16 v29 = 1024;
        int v30 = v17;
        __int16 v31 = 1024;
        int v32 = v18;
        __int16 v33 = 1024;
        int v34 = v16;
        __int16 v35 = 2048;
        uint64_t v36 = a2;
        __int16 v37 = 1024;
        int v38 = a3;
        _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> body segment found at (%p, %u bytes)",  buf,  0x42u);
      }
    }
  }

  uint64_t v6 = *(void *)(v3 + 792);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, a2, a3);
    return 0LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  BOOL v24 = "nw_http1_on_body";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (os_log_s *)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http1_on_body";
      BOOL v11 = "%{public}s no body block found";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      goto LABEL_22;
    }

    goto LABEL_22;
  }

  if (v21)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (os_log_s *)gLogObj;
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_http1_on_body";
        BOOL v11 = "%{public}s no body block found, no backtrace";
        goto LABEL_21;
      }

      goto LABEL_22;
    }

    if (!v13)
    {
LABEL_16:
      free(backtrace_string);
      goto LABEL_22;
    }

    *(_DWORD *)buf = 136446466;
    BOOL v24 = "nw_http1_on_body";
    __int16 v25 = 2082;
    char v26 = backtrace_string;
    BOOL v14 = "%{public}s no body block found, dumping backtrace:%{public}s";
LABEL_15:
    _os_log_impl(&dword_181A5C000, v9, v10, v14, buf, 0x16u);
    goto LABEL_16;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v9 = (os_log_s *)gLogObj;
  os_log_type_t v10 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_http1_on_body";
    BOOL v11 = "%{public}s no body block found, backtrace limit exceeded";
    goto LABEL_21;
  }

uint64_t nw_http1_on_chunk_header(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "nw_http1_on_chunk_header";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_http1_on_chunk_header";
      os_log_type_t v5 = "%{public}s called with null parser";
    }

    else
    {
      if (!v10)
      {
        uint64_t v3 = (os_log_s *)__nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_http1_on_chunk_header";
        os_log_type_t v5 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v13 = "nw_http1_on_chunk_header";
          __int16 v14 = 2082;
          BOOL v15 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null parser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v2) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_33;
      }

      if (!v7) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_http1_on_chunk_header";
      os_log_type_t v5 = "%{public}s called with null parser, no backtrace";
    }

uint64_t nw_http1_on_chunk_complete(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_http1_on_chunk_complete";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_http1_on_chunk_complete";
        os_log_type_t v5 = "%{public}s called with null parser";
LABEL_38:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }

uint64_t ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2( uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

uint64_t __Block_byref_object_copy__39933(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(&STACK[0x338], 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__39934(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

void ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke( void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL))
  {
    if (!*(void *)(*(void *)(a1[5] + 8LL) + 40LL) && nw_protocol_options_is_tls(a2))
    {
      if (v2) {
        uint64_t v2 = os_retain(v2);
      }
      uint64_t v4 = *(void *)(a1[5] + 8LL);
      char v5 = *(_BYTE *)(v4 + 48);
      if ((v5 & 1) != 0)
      {
        uint64_t v6 = *(void **)(v4 + 40);
        if (v6)
        {
          os_release(v6);
          char v5 = *(_BYTE *)(v4 + 48);
        }
      }

      *(void *)(v4 + 40) = v2;
      *(_BYTE *)(v4 + 4_Block_object_dispose(&STACK[0x338], 8) = v5 | 1;
    }
  }

  else if (nw_protocol_options_get_protocol_handle(a2) == a1[6])
  {
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  }

uint64_t ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2( int8x16_t *a1, nw_parameters_t parameters)
{
  nw_parameters_t v2 = parameters;
  uint64_t v41 = *MEMORY[0x1895F89C0];
  uint64_t v4 = nw_parameters_copy_default_protocol_stack(parameters);
  char v5 = nw_protocol_stack_copy_transport_protocol(v4);
  BOOL is_quic = nw_protocol_options_is_quic(v5);
  if (v5) {
    os_release(v5);
  }
  if (is_quic)
  {
    uint64_t v7 = 1LL;
    if (!v4) {
      return v7;
    }
    goto LABEL_19;
  }

  uint64_t v8 = *(void *)(a1[2].i64[0] + 8);
  char v9 = *(_BYTE *)(v8 + 48);
  if ((v9 & 1) != 0)
  {
    char v10 = *(void **)(v8 + 40);
    if (v10)
    {
      os_release(v10);
      char v9 = *(_BYTE *)(v8 + 48);
    }
  }

  *(void *)(v8 + 40) = 0LL;
  *(_BYTE *)(v8 + 4_Block_object_dispose(&STACK[0x338], 8) = v9 | 1;
  *(_BYTE *)(*(void *)(a1[2].i64[1] + 8) + 24LL) = 0;
  iterate_block[0] = MEMORY[0x1895F87A8];
  iterate_block[1] = 0x40000000LL;
  iterate_block[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_3;
  iterate_block[3] = &unk_189BBD6D8;
  int8x16_t v25 = vextq_s8(a1[2], a1[2], 8uLL);
  uint64_t v26 = a1[3].i64[0];
  nw_protocol_stack_iterate_application_protocols(v4, iterate_block);
  int v11 = *(void *)(*(void *)(a1[2].i64[0] + 8) + 40LL) != 0LL;
  int v12 = (*(_BYTE *)(a1[3].i64[1] + 376) & 2) == 0;
  int v13 = v11 ^ v12;
  if (v11 != v12)
  {
    if ((*(_BYTE *)(a1[3].i64[0] + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v18 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v19 = a1[3].i64[0];
          uint64_t v20 = v19 + 74;
          uint64_t v21 = *(void *)(v19 + 256);
          int v22 = *(_DWORD *)(*(void *)(v19 + 248) + 372LL);
          if (v21) {
            LODWORD(v21) = *(_DWORD *)(v21 + 860);
          }
          int v23 = *(_DWORD *)(v19 + 424);
          *(_DWORD *)buf = 136447746;
          int v28 = "nw_http1_establish_new_connection_for_stream_block_invoke_2";
          __int16 v29 = 2082;
          uint64_t v30 = v20;
          __int16 v31 = 2080;
          int v32 = " ";
          __int16 v33 = 1024;
          int v34 = v22;
          __int16 v35 = 1024;
          int v36 = v21;
          __int16 v37 = 1024;
          int v38 = v23;
          __int16 v39 = 2112;
          nw_parameters_t v40 = v2;
          _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> saving transformed parameters %@",  buf,  0x3Cu);
        }
      }
    }

    if (v2) {
      nw_parameters_t v2 = (nw_parameters_t)os_retain(v2);
    }
    uint64_t v14 = a1[3].i64[0];
    char v15 = *(_BYTE *)(v14 + 328);
    if ((v15 & 1) != 0)
    {
      __int16 v16 = *(void **)(v14 + 320);
      if (v16)
      {
        os_release(v16);
        char v15 = *(_BYTE *)(v14 + 328);
      }
    }

    *(void *)(v14 + 320) = v2;
    *(_BYTE *)(v14 + 32_Block_object_dispose(&STACK[0x338], 8) = v15 | 1;
  }

  uint64_t v7 = v13 ^ 1u;
  if (v4) {
LABEL_19:
  }
    os_release(v4);
  return v7;
}

BOOL ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_73( uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  int v3 = *(unsigned __int8 *)(v2 + 24);
  if (!*(_BYTE *)(v2 + 24))
  {
    nw_parameters_add_protocol_stack_member(*(void **)(*(void *)(a1 + 40) + 320LL), 5, 0xFFFFFFFF, a2);
    if (nw_protocol_options_get_protocol_handle(a2) == *(void *)(a1 + 40)) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    }
  }

  return v3 == 0;
}

void ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_76( uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v1)
  {
    uint64_t v2 = v1;
    if ((*(_BYTE *)(v1 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        int v3 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v4 = *(void *)(v2 + 256);
          int v5 = *(_DWORD *)(*(void *)(v2 + 248) + 372LL);
          if (v4) {
            LODWORD(v4) = *(_DWORD *)(v4 + 860);
          }
          int v6 = *(_DWORD *)(v2 + 424);
          int v7 = 136447490;
          uint64_t v8 = "nw_http1_establish_new_connection_for_stream_block_invoke";
          __int16 v9 = 2082;
          uint64_t v10 = v2 + 74;
          __int16 v11 = 2080;
          int v12 = " ";
          __int16 v13 = 1024;
          int v14 = v5;
          __int16 v15 = 1024;
          int v16 = v4;
          __int16 v17 = 1024;
          int v18 = v6;
          _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> requesting new output handler from rebuild_stack",  (uint8_t *)&v7,  0x32u);
        }
      }
    }

    nw_protocol_notify(*(void **)(v2 + 48), v2, 19);
  }

void ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_3( void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL))
  {
    if (!*(void *)(*(void *)(a1[5] + 8LL) + 40LL) && nw_protocol_options_is_tls(a2))
    {
      if (v2) {
        uint64_t v2 = os_retain(v2);
      }
      uint64_t v4 = *(void *)(a1[5] + 8LL);
      char v5 = *(_BYTE *)(v4 + 48);
      if ((v5 & 1) != 0)
      {
        int v6 = *(void **)(v4 + 40);
        if (v6)
        {
          os_release(v6);
          char v5 = *(_BYTE *)(v4 + 48);
        }
      }

      *(void *)(v4 + 40) = v2;
      *(_BYTE *)(v4 + 4_Block_object_dispose(&STACK[0x338], 8) = v5 | 1;
    }
  }

  else if (nw_protocol_options_get_protocol_handle(a2) == a1[6])
  {
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  }

void ___ZL36nw_protocol_http1_set_up_associationP19nw_http1_connectionP13nw_parameters_block_invoke( uint64_t a1, void *a2, void *a3)
{
  uint64_t v117 = *MEMORY[0x1895F89C0];
  uint64_t handle = nw_protocol_instance_stub_get_handle(a2);
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    int v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v107 = OS_LOG_TYPE_DEFAULT;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v107 == OS_LOG_TYPE_DEFAULT)
      {
        int v68 = (os_log_s *)__nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_146;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        int v70 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_145;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v77 = os_log_type_enabled(v68, type[0]);
      if (!backtrace_string)
      {
        if (!v77) {
          goto LABEL_146;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        int v70 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_145;
      }

      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_146;
    }

    int v68 = (os_log_s *)__nwlog_obj();
    os_log_type_t v69 = type[0];
    if (!os_log_type_enabled(v68, type[0])) {
      goto LABEL_146;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    int v70 = "%{public}s called with null protocol";
LABEL_145:
    _os_log_impl(&dword_181A5C000, v68, v69, v70, buf, 0xCu);
    goto LABEL_146;
  }

  uint64_t v5 = *(void *)(handle + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    int v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v107 = OS_LOG_TYPE_DEFAULT;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v107 == OS_LOG_TYPE_DEFAULT)
      {
        int v68 = (os_log_s *)__nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_146;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        int v70 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_145;
      }

      os_log_type_t v78 = (char *)__nw_create_backtrace_string();
      int v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v79 = os_log_type_enabled(v68, type[0]);
      if (!v78)
      {
        if (!v79) {
          goto LABEL_146;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        int v70 = "%{public}s called with null handle, no backtrace";
        goto LABEL_145;
      }

      if (v79)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v78;
        int v80 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_127:
        _os_log_impl(&dword_181A5C000, v68, v69, v80, buf, 0x16u);
      }

void nw_http1_append_bytes(char **a1, unsigned int *a2, const char *a3, size_t a4)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v38 = "nw_http1_append_bytes";
    int v23 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      int v38 = "nw_http1_append_bytes";
      int v26 = "%{public}s called with null value";
    }

    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v28 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          int v38 = "nw_http1_append_bytes";
          __int16 v39 = 2082;
          int v40 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null value, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v23) {
          return;
        }
        goto LABEL_73;
      }

      if (!v28) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      int v38 = "nw_http1_append_bytes";
      int v26 = "%{public}s called with null value, no backtrace";
    }

    else
    {
      int v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      int v38 = "nw_http1_append_bytes";
      int v26 = "%{public}s called with null value, backtrace limit exceeded";
    }

    goto LABEL_71;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v38 = "nw_http1_append_bytes";
    int v23 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        int v24 = (os_log_s *)__nwlog_obj();
        os_log_type_t v25 = type;
        if (!os_log_type_enabled(v24, type)) {
          goto LABEL_72;
        }
        *(_DWORD *)buf = 136446210;
        int v38 = "nw_http1_append_bytes";
        int v26 = "%{public}s called with null value_length, backtrace limit exceeded";
        goto LABEL_71;
      }

      uint64_t v29 = (char *)__nw_create_backtrace_string();
      int v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v30 = os_log_type_enabled(v24, type);
      if (!v29)
      {
        if (!v30) {
          goto LABEL_72;
        }
        *(_DWORD *)buf = 136446210;
        int v38 = "nw_http1_append_bytes";
        int v26 = "%{public}s called with null value_length, no backtrace";
        goto LABEL_71;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        int v38 = "nw_http1_append_bytes";
        __int16 v39 = 2082;
        int v40 = v29;
        __int16 v31 = "%{public}s called with null value_length, dumping backtrace:%{public}s";
LABEL_54:
        _os_log_impl(&dword_181A5C000, v24, v25, v31, buf, 0x16u);
      }

BOOL nw_reallocf_type<char *>(void *__ptr, size_t __size)
{
  if (!__size)
  {
    int v7 = (os_log_s *)((uint64_t (*)(void))__nwlog_obj)();
    os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    uint64_t v8 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v8);
    if (result) {
      goto LABEL_8;
    }
    free(v8);
  }

  uint64_t v5 = reallocf(__ptr, __size);
  if (v5) {
    return (BOOL)v5;
  }
  size_t v9 = (os_log_s *)__nwlog_obj(0LL, v4);
  os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  uint64_t v10 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v10);
  if (!result)
  {
    free(v10);
    return (BOOL)v5;
  }

double __nw_protocol_http1_identifier_block_invoke()
{
  *(void *)&double result = 0x200000004LL;
  qword_18C593FB8 = 0x200000004LL;
  return result;
}

void ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_2( uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    uint64_t v4 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v5 + 74;
      uint64_t v7 = *(void *)(v5 + 256);
      int v8 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      }
      int v9 = *(_DWORD *)(v5 + 424);
      int v10 = 136447746;
      __int16 v11 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke_2";
      __int16 v12 = 2082;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      __int16 v15 = " ";
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> sending request header {method=%{public}s}",  (uint8_t *)&v10,  0x3Cu);
    }
  }

void ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_46( uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    uint64_t v4 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v5 + 74;
      uint64_t v7 = *(void *)(v5 + 256);
      int v8 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      }
      int v9 = *(_DWORD *)(v5 + 424);
      int v10 = 136447746;
      __int16 v11 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
      __int16 v12 = 2082;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      __int16 v15 = " ";
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> receiving request header {method=%{public}s}",  (uint8_t *)&v10,  0x3Cu);
    }
  }

void ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_48( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  int start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  uint64_t start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  uint64_t end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_uint64_t start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_uint64_t end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_uint64_t start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_uint64_t end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  uint64_t outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  uint64_t inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  if ((*(_BYTE *)(*(void *)(a1 + 40) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    __int16 v12 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = a3;
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 256);
      if (v14) {
        int v34 = *(_DWORD *)(v14 + 860);
      }
      else {
        int v34 = 0;
      }
      uint64_t v15 = inbound_message_end_time;
      else {
        __int16 v16 = off_189BC6838[start_reason - 1];
      }
      char v35 = v16;
      int v37 = *(_DWORD *)(*(void *)(v13 + 248) + 372LL);
      int v17 = *(_DWORD *)(v13 + 424);
      int v18 = -1;
      if (start_time && end_time)
      {
        unint64_t v19 = nw_delta_nanos(start_time, end_time);
        uint64_t v15 = inbound_message_end_time;
        if (v19 > 0xF423FFFFFFFFFLL) {
          int v18 = -1;
        }
        else {
          int v18 = v19 / 0xF4240;
        }
      }

      LODWORD(v20) = -1;
      int v38 = v17;
      if (start_time)
      {
        if (outbound_message_start_time)
        {
          unint64_t v21 = nw_delta_nanos(start_time, outbound_message_start_time);
          uint64_t v15 = inbound_message_end_time;
          unint64_t v20 = v21 / 0xF4240;
          if (v21 > 0xF423FFFFFFFFFLL) {
            LODWORD(v20) = -1;
          }
        }
      }

      int v22 = -1;
      int v36 = v20;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        unint64_t v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        uint64_t v15 = inbound_message_end_time;
        if (v23 > 0xF423FFFFFFFFFLL) {
          int v22 = -1;
        }
        else {
          int v22 = v23 / 0xF4240;
        }
      }

      int v24 = v18;
      uint64_t v25 = v13 + 74;
      int v26 = -1;
      if (start_time)
      {
        uint64_t v28 = outbound_body_size;
        uint64_t v27 = inbound_body_size;
        if (inbound_message_start_time)
        {
          unint64_t v29 = nw_delta_nanos(start_time, inbound_message_start_time);
          uint64_t v15 = inbound_message_end_time;
          if (v29 > 0xF423FFFFFFFFFLL) {
            int v26 = -1;
          }
          else {
            int v26 = v29 / 0xF4240;
          }
        }

        LODWORD(v30) = -1;
        if (inbound_message_start_time) {
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t v28 = outbound_body_size;
        uint64_t v27 = inbound_body_size;
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
        {
LABEL_31:
          uint64_t v31 = a2;
          int v32 = v34;
          if (v15)
          {
            unint64_t v33 = nw_delta_nanos(inbound_message_start_time, v15);
            unint64_t v30 = v33 / 0xF4240;
            if (v33 > 0xF423FFFFFFFFFLL) {
              LODWORD(v30) = -1;
            }
          }

          goto LABEL_36;
        }
      }

      uint64_t v31 = a2;
      int v32 = v34;
LABEL_36:
      *(_DWORD *)buf = 136450050;
      uint64_t v44 = "nw_http1_match_idle_connection_with_pending_stream_block_invoke";
      __int16 v45 = 2082;
      uint64_t v46 = v25;
      __int16 v47 = 2080;
      os_log_type_t v48 = " ";
      __int16 v49 = 1024;
      int v50 = v37;
      __int16 v51 = 1024;
      int v52 = v32;
      __int16 v53 = 1024;
      int v54 = v38;
      __int16 v55 = 2080;
      BOOL v56 = v35;
      __int16 v57 = 1024;
      int v58 = v24;
      __int16 v59 = 2082;
      uint64_t v60 = v31;
      __int16 v61 = 1024;
      int v62 = v39;
      __int16 v63 = 1024;
      int v64 = v36;
      __int16 v65 = 1024;
      int v66 = v22;
      __int16 v67 = 1024;
      int v68 = v26;
      __int16 v69 = 1024;
      int v70 = v30;
      __int16 v71 = 2048;
      uint64_t v72 = v28;
      __int16 v73 = 2048;
      uint64_t v74 = v27;
      _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u:c%u:s%u> transaction summary {start_reason=%s, duration_ms=%d, request_method= %{public}s, response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_d uration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}",  buf,  0x7Eu);
    }
  }

uint64_t ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_50( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(unsigned __int16 *)(a1 + 40));
}

uint64_t ___ZL40nw_protocol_http1_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v151 = *MEMORY[0x1895F89C0];
  if (nw_frame_get_finalizer_context(a2) == a1[6])
  {
    uint64_t v8 = *(void *)(a2 + 32);
    int v9 = *(void **)(a2 + 40);
    if (v8)
    {
      *(void *)(v8 + 40) = v9;
      int v9 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(a1[7] + 8LL) = v9;
    }

    void *v9 = v8;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    uint64_t v14 = 1LL;
    nw_frame_finalize(a2);
    return v14;
  }

  finalizer_context = (void *)nw_frame_get_finalizer_context(a2);
  if (!finalizer_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
    __int16 v141 = 2048;
    __int16 v142 = (const char *)a2;
    int v10 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v138 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      __int16 v141 = 2048;
      __int16 v142 = (const char *)a2;
      uint64_t v13 = "%{public}s frame %p has no context";
      goto LABEL_89;
    }

    if (v138 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      __int16 v141 = 2048;
      __int16 v142 = (const char *)a2;
      uint64_t v13 = "%{public}s frame %p has no context, backtrace limit exceeded";
      goto LABEL_89;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v11 = (os_log_s *)gLogObj;
    os_log_type_t v12 = type[0];
    BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (!v16) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      __int16 v141 = 2048;
      __int16 v142 = (const char *)a2;
      uint64_t v13 = "%{public}s frame %p has no context, no backtrace";
      goto LABEL_89;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
      __int16 v141 = 2048;
      __int16 v142 = (const char *)a2;
      __int16 v143 = 2082;
      int v144 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s frame %p has no context, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    free(backtrace_string);
LABEL_90:
    if (!v10)
    {
LABEL_93:
      nw_frame_finalize(a2);
      return 1LL;
    }

    goto LABEL_91;
  }

  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = finalizer_context[1];
  *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = *finalizer_context;
  void *finalizer_context = 0LL;
  finalizer_context[1] = 0LL;
  if (a2)
  {
    *(_OWORD *)(a2 + 80) = *((_OWORD *)finalizer_context + 1);
LABEL_5:
    free(finalizer_context);
    goto LABEL_6;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v140 = "nw_http1_frame_unwrap_context";
  uint64_t v85 = (const char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v138 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v85, type, &v138))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v86 = (os_log_s *)__nwlog_obj();
      os_log_type_t v87 = type[0];
      if (!os_log_type_enabled(v86, type[0])) {
        goto LABEL_212;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v140 = "nw_http1_frame_unwrap_context";
      int v88 = "%{public}s called with null frame";
LABEL_211:
      _os_log_impl(&dword_181A5C000, v86, v87, v88, buf, 0xCu);
      goto LABEL_212;
    }

    if (v138 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v86 = (os_log_s *)__nwlog_obj();
      os_log_type_t v87 = type[0];
      if (!os_log_type_enabled(v86, type[0])) {
        goto LABEL_212;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v140 = "nw_http1_frame_unwrap_context";
      int v88 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_211;
    }

    BOOL v89 = (char *)__nw_create_backtrace_string();
    os_log_type_t v86 = (os_log_s *)__nwlog_obj();
    os_log_type_t v87 = type[0];
    BOOL v90 = os_log_type_enabled(v86, type[0]);
    if (!v89)
    {
      if (!v90) {
        goto LABEL_212;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v140 = "nw_http1_frame_unwrap_context";
      int v88 = "%{public}s called with null frame, no backtrace";
      goto LABEL_211;
    }

    if (v90)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v140 = "nw_http1_frame_unwrap_context";
      __int16 v141 = 2082;
      __int16 v142 = v89;
      _os_log_impl( &dword_181A5C000,  v86,  v87,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v89);
  }

uint64_t ___ZL40nw_protocol_http1_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_134( uint64_t a1, uint64_t a2)
{
  int v3 = *(_WORD *)(a2 + 204) & 0xFFC7 | (*(unsigned __int8 *)(a2 + 206) << 16);
  *(_WORD *)(a2 + 204) &= 0xFFC7u;
  *(_BYTE *)(a2 + 206) = BYTE2(v3);
  uint64_t v5 = a2 + 64;
  uint64_t v4 = *(void **)(a2 + 64);
  if (v4)
  {
    uint64_t v6 = (void *)(a2 + 120);
    do
    {
      uint64_t v7 = (void *)*v4;
      uint64_t v8 = (void *)v4[6];
      int v9 = (void *)*v4;
      if (v8)
      {
        os_release(v8);
        v4[6] = 0LL;
        int v9 = (void *)*v4;
      }

      int v10 = (void *)v4[1];
      if (v9)
      {
        v9[1] = v10;
        int v10 = (void *)v4[1];
      }

      else
      {
        *(void *)(a2 + 72) = v10;
      }

      void *v10 = v9;
      if (v4 != v6) {
        free(v4);
      }
      uint64_t v4 = v7;
    }

    while (v7);
  }

  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = v5;
  __int16 v11 = *(void **)(a2 + 168);
  if (v11) {
    os_release(v11);
  }
  *(void *)(a2 + 184) = 0LL;
  *(_OWORD *)(a2 + 16_Block_object_dispose(&STACK[0x338], 8) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  return 1LL;
}

void nw_http1_connection_output_frame_finalizer(nw_frame *a1, uint64_t a2, void *a3)
{
  uint64_t v650 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
    __int128 v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (v643 == 17)
    {
      __int128 v162 = (os_log_s *)__nwlog_obj();
      os_log_type_t v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
        goto LABEL_898;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
      uint64_t v164 = "%{public}s called with null frame";
    }

    else if ((_BYTE)v647)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int128 v162 = (os_log_s *)__nwlog_obj();
      os_log_type_t v163 = v643;
      BOOL v188 = os_log_type_enabled(v162, (os_log_type_t)v643);
      if (backtrace_string)
      {
        if (v188)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
          __int16 v638 = 2082;
          *(void *)int v639 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v162,  v163,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_898:
        if (!v161) {
          return;
        }
        goto LABEL_899;
      }

      if (!v188) {
        goto LABEL_898;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
      uint64_t v164 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      __int128 v162 = (os_log_s *)__nwlog_obj();
      os_log_type_t v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
        goto LABEL_898;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
      uint64_t v164 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    goto LABEL_897;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
    __int128 v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (v643 != 17)
    {
      if (!(_BYTE)v647)
      {
        __int128 v162 = (os_log_s *)__nwlog_obj();
        os_log_type_t v163 = v643;
        if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
          goto LABEL_898;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
        uint64_t v164 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_897;
      }

      uint64_t v189 = (char *)__nw_create_backtrace_string();
      __int128 v162 = (os_log_s *)__nwlog_obj();
      os_log_type_t v163 = v643;
      BOOL v190 = os_log_type_enabled(v162, (os_log_type_t)v643);
      if (!v189)
      {
        if (!v190) {
          goto LABEL_898;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
        uint64_t v164 = "%{public}s called with null context, no backtrace";
        goto LABEL_897;
      }

      if (!v190) {
        goto LABEL_845;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
      __int16 v638 = 2082;
      *(void *)int v639 = v189;
      uint64_t v191 = "%{public}s called with null context, dumping backtrace:%{public}s";
      goto LABEL_844;
    }

    __int128 v162 = (os_log_s *)__nwlog_obj();
    os_log_type_t v163 = v643;
    if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
      goto LABEL_898;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
    uint64_t v164 = "%{public}s called with null context";
LABEL_897:
    _os_log_impl(&dword_181A5C000, v162, v163, v164, buf, 0xCu);
    goto LABEL_898;
  }

  __int16 v4 = *((_WORD *)a1 + 102);
  if ((v4 & 4) != 0) {
    uint64_t v5 = (char *)a1 + 208;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if ((v4 & 4) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
    __int128 v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (v643 != 17)
    {
      if (!(_BYTE)v647)
      {
        __int128 v162 = (os_log_s *)__nwlog_obj();
        os_log_type_t v163 = v643;
        if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
          goto LABEL_898;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
        uint64_t v164 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_897;
      }

      uint64_t v189 = (char *)__nw_create_backtrace_string();
      __int128 v162 = (os_log_s *)__nwlog_obj();
      os_log_type_t v163 = v643;
      BOOL v192 = os_log_type_enabled(v162, (os_log_type_t)v643);
      if (!v189)
      {
        if (!v192) {
          goto LABEL_898;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
        uint64_t v164 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_897;
      }

      if (!v192) {
        goto LABEL_845;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
      __int16 v638 = 2082;
      *(void *)int v639 = v189;
      uint64_t v191 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
      goto LABEL_844;
    }

    __int128 v162 = (os_log_s *)__nwlog_obj();
    os_log_type_t v163 = v643;
    if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
      goto LABEL_898;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
    uint64_t v164 = "%{public}s called with null metadata";
    goto LABEL_897;
  }

  uint64_t v6 = *(void *)v5;
  if (!*(void *)v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
    __int128 v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (v643 == 17)
    {
      __int128 v162 = (os_log_s *)__nwlog_obj();
      os_log_type_t v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
        goto LABEL_898;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
      uint64_t v164 = "%{public}s called with null http1_connection";
      goto LABEL_897;
    }

    if (!(_BYTE)v647)
    {
      __int128 v162 = (os_log_s *)__nwlog_obj();
      os_log_type_t v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
        goto LABEL_898;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
      uint64_t v164 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_897;
    }

    uint64_t v189 = (char *)__nw_create_backtrace_string();
    __int128 v162 = (os_log_s *)__nwlog_obj();
    os_log_type_t v163 = v643;
    BOOL v193 = os_log_type_enabled(v162, (os_log_type_t)v643);
    if (!v189)
    {
      if (!v193) {
        goto LABEL_898;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
      uint64_t v164 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_897;
    }

    if (!v193) {
      goto LABEL_845;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
    __int16 v638 = 2082;
    *(void *)int v639 = v189;
    uint64_t v191 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_844:
    _os_log_impl(&dword_181A5C000, v162, v163, v191, buf, 0x16u);
    goto LABEL_845;
  }

  int v7 = a2;
  uint64_t v8 = &qword_18C45F000;
  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      int v165 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v166 = *(void *)(v6 + 488);
        int v167 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
        int v168 = *(_DWORD *)(v6 + 860);
        if (v166) {
          LODWORD(v166) = *(_DWORD *)(v166 + 424);
        }
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
        __int16 v638 = 2082;
        *(void *)int v639 = v6 + 74;
        if (v7) {
          int v169 = "true";
        }
        else {
          int v169 = "false";
        }
        *(_WORD *)&v639[8] = 2080;
        *(void *)&v639[10] = " ";
        *(_WORD *)&v639[18] = 1024;
        *(_DWORD *)id v640 = v167;
        *(_WORD *)&v640[4] = 1024;
        *(_DWORD *)&v640[6] = v168;
        *(_WORD *)int v641 = 1024;
        *(_DWORD *)&v641[2] = v166;
        *(_WORD *)&v641[6] = 2048;
        *(void *)&v641[8] = a1;
        *(_WORD *)&v641[16] = 2080;
        size_t v642 = (size_t)v169;
        _os_log_impl( &dword_181A5C000,  v165,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing output frame %p, success: %s",  buf,  0x46u);
      }
    }
  }

  uint64_t v9 = *((void *)a1 + 2);
  int v10 = (void *)*((void *)a1 + 3);
  if (v9)
  {
    *(void *)(v9 + 24) = v10;
    int v10 = (void *)*((void *)a1 + 3);
  }

  else
  {
    *(void *)(v6 + 68_Block_object_dispose(&STACK[0x338], 8) = v10;
  }

  void *v10 = v9;
  *((void *)a1 + 2) = 0LL;
  *((void *)a1 + 3) = 0LL;
  uint64_t v11 = *(void *)(v6 + 488);
  uint64_t v627 = v6;
  if (!v11)
  {
LABEL_16:
    if (v7) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  if ((*(_WORD *)(v11 + 428) & 0x80) == 0)
  {
    LODWORD(v11) = 0;
    goto LABEL_16;
  }

  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      int v198 = (os_log_s *)__nwlog_obj();
      BOOL v199 = os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG);
      uint64_t v11 = *(void *)(v6 + 488);
      if (v199)
      {
        int v200 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
        int v201 = *(_DWORD *)(v6 + 860);
        if (v11) {
          LODWORD(v11) = *(_DWORD *)(v11 + 424);
        }
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
        __int16 v638 = 2082;
        *(void *)int v639 = v6 + 74;
        *(_WORD *)&v639[8] = 2080;
        *(void *)&v639[10] = " ";
        *(_WORD *)&v639[18] = 1024;
        *(_DWORD *)id v640 = v200;
        *(_WORD *)&v640[4] = 1024;
        *(_DWORD *)&v640[6] = v201;
        *(_WORD *)int v641 = 1024;
        *(_DWORD *)&v641[2] = v11;
        *(_WORD *)&v641[6] = 1024;
        *(_DWORD *)&v641[8] = v7;
        _os_log_impl( &dword_181A5C000,  v198,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> initial outbound frame finalized, success %u",  buf,  0x38u);
        uint64_t v11 = *(void *)(v6 + 488);
      }
    }
  }

  *(_WORD *)(v11 + 428) &= ~0x80u;
  LODWORD(v11) = 1;
  if (v7)
  {
LABEL_17:
    uint64_t v12 = *(void *)(v6 + 488);
    if (v12)
    {
      int v618 = v11;
      __int16 v13 = *(_WORD *)(v12 + 428);
      if ((v5[8] & 2) != 0 && (v13 & 2) != 0)
      {
        int v14 = *((_DWORD *)a1 + 13);
        if (!v14 || v14 == *((_DWORD *)a1 + 14) + *((_DWORD *)a1 + 15))
        {
          uint64_t v15 = *((void *)a1 + 8);
          if (v15)
          {
            if ((*(_BYTE *)(v15 + 66) & 0x40) != 0) {
              nw_protocol_output_finished((void *)v12, *(void *)(v12 + 48));
            }
          }
        }

        *((void *)a1 + 10) = 0LL;
        *((void *)a1 + 11) = 0LL;
        nw_frame_cache_return_frame(v6 + 696, (uint64_t)a1);
        return;
      }

      if ((v13 & 2) != 0)
      {
        if (!(*(_BYTE *)(v6 + 158) & 1 | (gLogDatapath == 0)))
        {
          unint64_t v23 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v24 = *(void *)(v6 + 488);
            int v25 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
            int v26 = *(_DWORD *)(v6 + 860);
            if (v24) {
              LODWORD(v24) = *(_DWORD *)(v24 + 424);
            }
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
            __int16 v638 = 2082;
            *(void *)int v639 = v6 + 74;
            *(_WORD *)&v639[8] = 2080;
            *(void *)&v639[10] = " ";
            *(_WORD *)&v639[18] = 1024;
            *(_DWORD *)id v640 = v25;
            *(_WORD *)&v640[4] = 1024;
            *(_DWORD *)&v640[6] = v26;
            *(_WORD *)int v641 = 1024;
            *(_DWORD *)&v641[2] = v24;
            *(_WORD *)&v641[6] = 2048;
            *(void *)&v641[8] = a1;
            _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> outbound headers are already complete, sending contents of frame %p",  buf,  0x3Cu);
          }
        }

        goto LABEL_401;
      }

      if (!(*(_BYTE *)(v6 + 158) & 1 | (gLogDatapath == 0)))
      {
        int v509 = (os_log_s *)__nwlog_obj();
        BOOL v510 = os_log_type_enabled(v509, OS_LOG_TYPE_DEBUG);
        uint64_t v12 = *(void *)(v6 + 488);
        if (v510)
        {
          int v511 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
          int v512 = *(_DWORD *)(v6 + 860);
          if (v12) {
            int v513 = *(_DWORD *)(v12 + 424);
          }
          else {
            int v513 = 0;
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
          __int16 v638 = 2082;
          *(void *)int v639 = v6 + 74;
          *(_WORD *)&v639[8] = 2080;
          *(void *)&v639[10] = " ";
          *(_WORD *)&v639[18] = 1024;
          *(_DWORD *)id v640 = v511;
          *(_WORD *)&v640[4] = 1024;
          *(_DWORD *)&v640[6] = v512;
          *(_WORD *)int v641 = 1024;
          *(_DWORD *)&v641[2] = v513;
          _os_log_impl( &dword_181A5C000,  v509,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> sending outbound message",  buf,  0x32u);
          uint64_t v12 = *(void *)(v6 + 488);
        }

        if (!v12)
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
          BOOL v538 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v643) = 16;
          LOBYTE(v647) = 0;
          if (v643 == 17)
          {
            uint64_t v539 = (os_log_s *)__nwlog_obj();
            os_log_type_t v540 = v643;
            if (!os_log_type_enabled(v539, (os_log_type_t)v643)) {
              goto LABEL_941;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
            int v541 = "%{public}s called with null http1_stream";
          }

          else
          {
            if ((_BYTE)v647)
            {
              uint64_t v542 = (char *)__nw_create_backtrace_string();
              BOOL v543 = (os_log_s *)__nwlog_obj();
              os_log_type_t v544 = v643;
              BOOL v545 = os_log_type_enabled(v543, (os_log_type_t)v643);
              if (v542)
              {
                if (v545)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                  __int16 v638 = 2082;
                  *(void *)int v639 = v542;
                  _os_log_impl( &dword_181A5C000,  v543,  v544,  "%{public}s called with null http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v542);
                goto LABEL_941;
              }

              if (!v545)
              {
LABEL_941:
                if (v538) {
                  free(v538);
                }
                goto LABEL_943;
              }

              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
              int v541 = "%{public}s called with null http1_stream, no backtrace";
              int v546 = v543;
              os_log_type_t v547 = v544;
LABEL_940:
              _os_log_impl(&dword_181A5C000, v546, v547, v541, buf, 0xCu);
              goto LABEL_941;
            }

            uint64_t v539 = (os_log_s *)__nwlog_obj();
            os_log_type_t v540 = v643;
            if (!os_log_type_enabled(v539, (os_log_type_t)v643)) {
              goto LABEL_941;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
            int v541 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          }

          int v546 = v539;
          os_log_type_t v547 = v540;
          goto LABEL_940;
        }
      }

      if (nw_protocol_copy_http_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
      }
      id v17 = (id)nw_protocol_copy_http_definition_http_definition;
      unsigned int v18 = (void **)(v12 + 384);
      uint64_t v19 = *(void *)(v12 + 384);
      unsigned int v20 = nw_frame_copy_metadata_for_protocol((uint64_t)a1, (uint64_t)v17);
      int v21 = v20;
      if (v19)
      {
        __int128 v643 = 0uLL;
        nw_protocol_metadata_copy_identifier(v20, &v643);
        __int128 v647 = 0uLL;
        nw_protocol_metadata_copy_identifier(*v18, &v647);
        if (v647 == v643)
        {
          if (v21) {
            os_release(v21);
          }
          char v22 = 1;
LABEL_180:
          if (v17) {
            os_release(v17);
          }
          if ((v22 & 1) == 0)
          {
LABEL_943:
            if ((*(_BYTE *)(v6 + 158) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v548 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                uint64_t v549 = *(void *)(v6 + 488);
                int v550 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
                int v551 = *(_DWORD *)(v6 + 860);
                if (v549) {
                  LODWORD(v549) = *(_DWORD *)(v549 + 424);
                }
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
                __int16 v638 = 2082;
                *(void *)int v639 = v6 + 74;
                *(_WORD *)&v639[8] = 2080;
                *(void *)&v639[10] = " ";
                *(_WORD *)&v639[18] = 1024;
                *(_DWORD *)id v640 = v550;
                *(_WORD *)&v640[4] = 1024;
                *(_DWORD *)&v640[6] = v551;
                *(_WORD *)int v641 = 1024;
                *(_DWORD *)&v641[2] = v549;
                _os_log_impl( &dword_181A5C000,  v548,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> invalid message supplied to http1_connection, dropping",  buf,  0x32u);
              }
            }

            if ((*((_WORD *)a1 + 102) & 0x100) == 0
              || !g_channel_check_validity
              || g_channel_check_validity(a1, *((void *)a1 + 11)))
            {
              int v552 = (void *)*((void *)a1 + 14);
              if (v552) {
                free(v552);
              }
            }

            nw_frame_reset((uint64_t)a1, 0LL, 0, 0LL, 0LL);
            os_release(a1);
            uint64_t v553 = *(void *)(v6 + 488);
            if (v553) {
              BOOL v554 = *(void **)(v553 + 48);
            }
            else {
              BOOL v554 = 0LL;
            }
            nw_protocol_error(v554, v553);
            uint64_t v555 = *(void *)(v6 + 488);
            if (v555) {
              nw_protocol_disconnected(*(void **)(v555 + 48), v555);
            }
            else {
              nw_protocol_disconnected(0LL, 0LL);
            }
            return;
          }

          *(_WORD *)(*(void *)(v6 + 488) + 428LL) |= 0x2000u;
          int v83 = *((_DWORD *)a1 + 13);
          if ((!v83 || v83 == *((_DWORD *)a1 + 14) + *((_DWORD *)a1 + 15))
            && (uint64_t v84 = *((void *)a1 + 8)) != 0
            && (*(_BYTE *)(v84 + 66) & 0x40) != 0)
          {
            int v85 = 1;
            if ((*(_BYTE *)(v6 + 158) & 1) == 0 && gLogDatapath)
            {
              BOOL v572 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v572, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v573 = *(void *)(v627 + 488);
                int v574 = *(_DWORD *)(*(void *)(v627 + 480) + 372LL);
                int v575 = *(_DWORD *)(v627 + 860);
                if (v573) {
                  LODWORD(v573) = *(_DWORD *)(v573 + 424);
                }
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
                __int16 v638 = 2082;
                *(void *)int v639 = v627 + 74;
                *(_WORD *)&v639[8] = 2080;
                *(void *)&v639[10] = " ";
                *(_WORD *)&v639[18] = 1024;
                *(_DWORD *)id v640 = v574;
                *(_WORD *)&v640[4] = 1024;
                *(_DWORD *)&v640[6] = v575;
                *(_WORD *)int v641 = 1024;
                *(_DWORD *)&v641[2] = v573;
                _os_log_impl( &dword_181A5C000,  v572,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> outbound message is headers only, setting complete for headers",  buf,  0x32u);
              }

              uint64_t v6 = v627;
              uint64_t v86 = *(void *)(v627 + 488);
              if (!v86) {
                goto LABEL_188;
              }
            }

            else
            {
              uint64_t v86 = *(void *)(v6 + 488);
              if (!v86) {
                goto LABEL_188;
              }
            }
          }

          else
          {
            int v85 = 0;
            uint64_t v86 = *(void *)(v6 + 488);
            if (!v86)
            {
LABEL_188:
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
              os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();
              LOBYTE(v643) = 16;
              LOBYTE(v647) = 0;
              if (v643 == 17)
              {
                int v88 = (os_log_s *)__nwlog_obj();
                os_log_type_t v89 = v643;
                if (!os_log_type_enabled(v88, (os_log_type_t)v643)) {
                  goto LABEL_1007;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                BOOL v90 = "%{public}s called with null http1_stream";
LABEL_1005:
                uint64_t v580 = v88;
                os_log_type_t v581 = v89;
LABEL_1006:
                _os_log_impl(&dword_181A5C000, v580, v581, v90, buf, 0xCu);
                goto LABEL_1007;
              }

              if (!(_BYTE)v647)
              {
                int v88 = (os_log_s *)__nwlog_obj();
                os_log_type_t v89 = v643;
                if (!os_log_type_enabled(v88, (os_log_type_t)v643)) {
                  goto LABEL_1007;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                BOOL v90 = "%{public}s called with null http1_stream, backtrace limit exceeded";
                goto LABEL_1005;
              }

              BOOL v532 = (char *)__nw_create_backtrace_string();
              uint64_t v533 = (os_log_s *)__nwlog_obj();
              os_log_type_t v534 = v643;
              BOOL v535 = os_log_type_enabled(v533, (os_log_type_t)v643);
              if (v532)
              {
                if (v535)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                  __int16 v638 = 2082;
                  *(void *)int v639 = v532;
                  _os_log_impl( &dword_181A5C000,  v533,  v534,  "%{public}s called with null http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v532);
                goto LABEL_1007;
              }

              if (!v535) {
                goto LABEL_1007;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
              BOOL v90 = "%{public}s called with null http1_stream, no backtrace";
              goto LABEL_1034;
            }
          }

          if (!*(void *)(v86 + 248))
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
            os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(v643) = 16;
            LOBYTE(v647) = 0;
            if (v643 == 17)
            {
              int v88 = (os_log_s *)__nwlog_obj();
              os_log_type_t v89 = v643;
              if (!os_log_type_enabled(v88, (os_log_type_t)v643)) {
                goto LABEL_1007;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
              BOOL v90 = "%{public}s called with null http1_stream->protocol_http1";
              goto LABEL_1005;
            }

            if (!(_BYTE)v647)
            {
              int v88 = (os_log_s *)__nwlog_obj();
              os_log_type_t v89 = v643;
              if (!os_log_type_enabled(v88, (os_log_type_t)v643)) {
                goto LABEL_1007;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
              BOOL v90 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
              goto LABEL_1005;
            }

            BOOL v536 = (char *)__nw_create_backtrace_string();
            uint64_t v533 = (os_log_s *)__nwlog_obj();
            os_log_type_t v534 = v643;
            BOOL v537 = os_log_type_enabled(v533, (os_log_type_t)v643);
            if (v536)
            {
              if (v537)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                __int16 v638 = 2082;
                *(void *)int v639 = v536;
                _os_log_impl( &dword_181A5C000,  v533,  v534,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v536);
              if (!v87) {
                goto LABEL_1009;
              }
              goto LABEL_1008;
            }

            if (!v537)
            {
LABEL_1007:
              if (!v87)
              {
LABEL_1009:
                uint64_t v6 = v627;
                uint64_t v8 = &qword_18C45F000;
                goto LABEL_400;
              }

LABEL_1008:
              free(v87);
              goto LABEL_1009;
            }

            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
            BOOL v90 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
LABEL_1034:
            uint64_t v580 = v533;
            os_log_type_t v581 = v534;
            goto LABEL_1006;
          }

          if (*(void *)(v86 + 256))
          {
            if ((*(_WORD *)(v86 + 428) & 2) != 0)
            {
              if ((*(_BYTE *)(v86 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  __int16 v142 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v143 = *(void *)(v86 + 256);
                    int v144 = *(_DWORD *)(*(void *)(v86 + 248) + 372LL);
                    if (v143) {
                      LODWORD(v143) = *(_DWORD *)(v143 + 860);
                    }
                    int v145 = *(_DWORD *)(v86 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                    __int16 v638 = 2082;
                    *(void *)int v639 = v86 + 74;
                    *(_WORD *)&v639[8] = 2080;
                    *(void *)&v639[10] = " ";
                    *(_WORD *)&v639[18] = 1024;
                    *(_DWORD *)id v640 = v144;
                    *(_WORD *)&v640[4] = 1024;
                    *(_DWORD *)&v640[6] = v143;
                    *(_WORD *)int v641 = 1024;
                    *(_DWORD *)&v641[2] = v145;
                    _os_log_impl( &dword_181A5C000,  v142,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already sent, skipping",  buf,  0x32u);
                    uint64_t v6 = v627;
                  }
                }
              }

              goto LABEL_400;
            }

            uint64_t v91 = *(void **)(v86 + 384);
            if (v91)
            {
              size_t __len = 0LL;
              int v92 = (char *)nw_http_metadata_legacy_serialize(v91, (uint64_t)&__len);
              int v625 = v85;
              if ((*(_BYTE *)(v86 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  int v576 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v576, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v577 = *(void *)(v86 + 256);
                    int v578 = *(_DWORD *)(*(void *)(v86 + 248) + 372LL);
                    if (v577) {
                      LODWORD(v577) = *(_DWORD *)(v577 + 860);
                    }
                    int v579 = *(_DWORD *)(v86 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_send_outbound_headers";
                    __int16 v638 = 2082;
                    *(void *)int v639 = v86 + 74;
                    *(_WORD *)&v639[8] = 2080;
                    *(void *)&v639[10] = " ";
                    *(_WORD *)&v639[18] = 1024;
                    *(_DWORD *)id v640 = v578;
                    *(_WORD *)&v640[4] = 1024;
                    *(_DWORD *)&v640[6] = v577;
                    *(_WORD *)int v641 = 1024;
                    *(_DWORD *)&v641[2] = v579;
                    *(_WORD *)&v641[6] = 2048;
                    *(void *)&v641[8] = v92;
                    *(_WORD *)&v641[16] = 2048;
                    size_t v642 = __len;
                    _os_log_impl( &dword_181A5C000,  v576,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> got buffer %p of length %zu bytes",  buf,  0x46u);
                    uint64_t v6 = v627;
                  }
                }
              }

              size_t v93 = __len;
              if (!v92 || !__len) {
                goto LABEL_348;
              }
              uint64_t v630 = *(void *)(v86 + 256);
              BOOL v616 = v92;
              if (v630)
              {
                if ((_DWORD)__len)
                {
                  uint64_t v94 = *(void *)(v630 + 32);
                  if (v94)
                  {
                    uint64_t v614 = v86;
                    size_t v628 = __len;
                    uint64_t v95 = *(void *)(v86 + 256);
                    if ((*(_BYTE *)(v630 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        char v597 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v597, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v598 = *(void *)(v630 + 488);
                          int v599 = *(_DWORD *)(*(void *)(v630 + 480) + 372LL);
                          int v600 = *(_DWORD *)(v630 + 860);
                          if (v598) {
                            LODWORD(v59_Block_object_dispose(&STACK[0x338], 8) = *(_DWORD *)(v598 + 424);
                          }
                          *(_DWORD *)buf = 136447746;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                          __int16 v638 = 2082;
                          *(void *)int v639 = v630 + 74;
                          *(_WORD *)&v639[8] = 2080;
                          *(void *)&v639[10] = " ";
                          *(_WORD *)&v639[18] = 1024;
                          *(_DWORD *)id v640 = v599;
                          *(_WORD *)&v640[4] = 1024;
                          *(_DWORD *)&v640[6] = v600;
                          *(_WORD *)int v641 = 1024;
                          *(_DWORD *)&v641[2] = v598;
                          *(_WORD *)&v641[6] = 1024;
                          size_t v93 = v628;
                          *(_DWORD *)&v641[8] = v628;
                          _os_log_impl( &dword_181A5C000,  v597,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> sending %u bytes",  buf,  0x38u);
                          uint64_t v95 = v630;
                        }
                      }
                    }

                    uint64_t v621 = v95 + 74;
                    BOOL v96 = v92;
                    unsigned int v97 = v93;
LABEL_212:
                    *(void *)os_log_type_t type = 0LL;
                    int v636 = type;
                    uint64_t v633 = 0LL;
                    id v634 = &v633;
                    uint64_t v101 = v94;
                    int output_frames = nw_protocol_get_output_frames(v94, v95, 1LL, v93, 0xFFFFFFFFLL, (uint64_t)type);
                    uint64_t v103 = *(void *)type;
                    if (*(void *)type) {
                      BOOL v104 = output_frames == 0;
                    }
                    else {
                      BOOL v104 = 1;
                    }
                    if (v104)
                    {
                      int v152 = output_frames;
                      if (output_frames)
                      {
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                        __int16 v638 = 1024;
                        *(_DWORD *)int v639 = v152;
                        uint64_t v153 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v647) = 16;
                        char v632 = 0;
                        if (v647 != 17)
                        {
                          if (v632)
                          {
                            uint64_t v157 = (char *)__nw_create_backtrace_string();
                            uint64_t v158 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v159 = v647;
                            BOOL v160 = os_log_type_enabled(v158, (os_log_type_t)v647);
                            if (v157)
                            {
                              if (v160)
                              {
                                *(_DWORD *)buf = 136446722;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                __int16 v638 = 1024;
                                *(_DWORD *)int v639 = v152;
                                *(_WORD *)&v639[4] = 2082;
                                *(void *)&v639[6] = v157;
                                _os_log_impl( &dword_181A5C000,  v158,  v159,  "%{public}s output handler reported %u frames to write, but array is empty, dumping bac ktrace:%{public}s",  buf,  0x1Cu);
                              }

                              free(v157);
                              goto LABEL_338;
                            }

                            if (!v160) {
                              goto LABEL_338;
                            }
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                            __int16 v638 = 1024;
                            *(_DWORD *)int v639 = v152;
                            os_log_type_t v156 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
                            int v170 = v158;
                            os_log_type_t v171 = v159;
                          }

                          else
                          {
                            os_log_type_t v154 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v155 = v647;
                            if (!os_log_type_enabled(v154, (os_log_type_t)v647)) {
                              goto LABEL_338;
                            }
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                            __int16 v638 = 1024;
                            *(_DWORD *)int v639 = v152;
                            os_log_type_t v156 = "%{public}s output handler reported %u frames to write, but array is empty, backtrace limit exceeded";
LABEL_336:
                            int v170 = v154;
                            os_log_type_t v171 = v155;
                          }

                          _os_log_impl(&dword_181A5C000, v170, v171, v156, buf, 0x12u);
                          goto LABEL_338;
                        }

                        os_log_type_t v154 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v155 = v647;
                        if (os_log_type_enabled(v154, (os_log_type_t)v647))
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                          __int16 v638 = 1024;
                          *(_DWORD *)int v639 = v152;
                          os_log_type_t v156 = "%{public}s output handler reported %u frames to write, but array is empty";
                          goto LABEL_336;
                        }

LABEL_1091:
                  if (!v593)
                  {
LABEL_1093:
                    LODWORD(v93) = 0;
                    uint64_t v6 = v627;
                    uint64_t v86 = v592;
                    int v85 = v625;
                    goto LABEL_347;
                  }

LABEL_1092:
                  free(v593);
                  goto LABEL_1093;
                }

                uint64_t v592 = v86;
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                uint64_t v593 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(v643) = 16;
                LOBYTE(v647) = 0;
                if (v643 == 17)
                {
                  uint64_t v594 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v595 = v643;
                  if (!os_log_type_enabled(v594, (os_log_type_t)v643)) {
                    goto LABEL_1091;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                  int v596 = "%{public}s called with null length";
                  goto LABEL_1089;
                }

                if (!(_BYTE)v647)
                {
                  uint64_t v594 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v595 = v643;
                  if (!os_log_type_enabled(v594, (os_log_type_t)v643)) {
                    goto LABEL_1091;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                  int v596 = "%{public}s called with null length, backtrace limit exceeded";
                  goto LABEL_1089;
                }

                int v607 = (char *)__nw_create_backtrace_string();
                int v604 = (os_log_s *)__nwlog_obj();
                os_log_type_t v605 = v643;
                BOOL v608 = os_log_type_enabled(v604, (os_log_type_t)v643);
                if (v607)
                {
                  if (!v608) {
                    goto LABEL_1075;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                  __int16 v638 = 2082;
                  *(void *)int v639 = v607;
                  v609 = "%{public}s called with null length, dumping backtrace:%{public}s";
                  goto LABEL_1074;
                }

                if (!v608) {
                  goto LABEL_1091;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                int v596 = "%{public}s called with null length, no backtrace";
              }

              else
              {
                uint64_t v592 = v86;
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                uint64_t v593 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(v643) = 16;
                LOBYTE(v647) = 0;
                if (v643 == 17)
                {
                  uint64_t v594 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v595 = v643;
                  if (!os_log_type_enabled(v594, (os_log_type_t)v643)) {
                    goto LABEL_1091;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                  int v596 = "%{public}s called with null http1_connection";
LABEL_1089:
                  uint64_t v611 = v594;
                  os_log_type_t v612 = v595;
LABEL_1090:
                  _os_log_impl(&dword_181A5C000, v611, v612, v596, buf, 0xCu);
                  goto LABEL_1091;
                }

                if (!(_BYTE)v647)
                {
                  uint64_t v594 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v595 = v643;
                  if (!os_log_type_enabled(v594, (os_log_type_t)v643)) {
                    goto LABEL_1091;
                  }
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                  int v596 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_1089;
                }

                uint64_t v603 = (char *)__nw_create_backtrace_string();
                int v604 = (os_log_s *)__nwlog_obj();
                os_log_type_t v605 = v643;
                BOOL v606 = os_log_type_enabled(v604, (os_log_type_t)v643);
                if (v603)
                {
                  if (v606)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                    __int16 v638 = 2082;
                    *(void *)int v639 = v603;
                    _os_log_impl( &dword_181A5C000,  v604,  v605,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v603);
                  goto LABEL_1091;
                }

                if (!v606) {
                  goto LABEL_1091;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                int v596 = "%{public}s called with null http1_connection, no backtrace";
              }

LABEL_1100:
              uint64_t v611 = v604;
              os_log_type_t v612 = v605;
              goto LABEL_1090;
            }

LABEL_555:
                                  _os_log_impl(&dword_181A5C000, v267, v268, v269, buf, 0x12u);
                                  goto LABEL_556;
                                }

                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                uint64_t v265 = gLogObj;
                                os_log_type_t v266 = v647;
                                if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647))
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                  __int16 v638 = 1024;
                                  *(_DWORD *)int v639 = v263;
                                  char v267 = (os_log_s *)v265;
                                  os_log_type_t v268 = v266;
                                  uint64_t v269 = "%{public}s output handler reported %u frames to write, but array is empty";
                                  goto LABEL_555;
                                }

LABEL_774:
                              nw_frame_claim(v205, v220, v212, 0);
                              uint64_t v458 = *v204;
                              *(void *)(v205 + 32) = *v204;
                              uint64_t v459 = (void *)(v458 + 40);
                              BOOL v104 = v458 == 0;
                              uint64_t v460 = v615;
                              if (!v104) {
                                uint64_t v460 = v459;
                              }
                              void *v460 = v208;
                              uint64_t *v204 = v205;
                              *(void *)(v205 + 40) = v204;
LABEL_777:
                              int v461 = *(unsigned __int16 *)(v6 + 872);
                              if ((v461 & 0x8000) == 0 || *v204)
                              {
LABEL_779:
                                if (v618)
                                {
                                  if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                                  {
                                    if (*((_BYTE *)v8 + 1537))
                                    {
                                      int v514 = (os_log_s *)__nwlog_obj();
                                      if (os_log_type_enabled(v514, OS_LOG_TYPE_DEBUG))
                                      {
                                        uint64_t v515 = *(void *)(v6 + 488);
                                        int v516 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
                                        int v517 = *(_DWORD *)(v6 + 860);
                                        if (v515) {
                                          LODWORD(v515) = *(_DWORD *)(v515 + 424);
                                        }
                                        *(_DWORD *)buf = 136447490;
                                        *(void *)&uint8_t buf[4] = "nw_http1_connection_output_frame_finalizer";
                                        __int16 v638 = 2082;
                                        *(void *)int v639 = v6 + 74;
                                        *(_WORD *)&v639[8] = 2080;
                                        *(void *)&v639[10] = " ";
                                        *(_WORD *)&v639[18] = 1024;
                                        *(_DWORD *)id v640 = v516;
                                        *(_WORD *)&v640[4] = 1024;
                                        *(_DWORD *)&v640[6] = v517;
                                        *(_WORD *)int v641 = 1024;
                                        *(_DWORD *)&v641[2] = v515;
                                        _os_log_impl( &dword_181A5C000,  v514,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> initial outbound frame finalized, trigger ing output_available",  buf,  0x32u);
                                        uint64_t v6 = v627;
                                      }
                                    }
                                  }

                                  uint64_t v462 = *(void *)(v6 + 488);
                                  if (v462) {
                                    nw_protocol_output_available(*(void **)(v462 + 48), v462);
                                  }
                                  else {
                                    nw_protocol_output_available(0LL, 0LL);
                                  }
                                }

                                return;
                              }

                              int v463 = (_WORD *)(v6 + 872);
                              unsigned int v464 = v461 & 0xFFFF7FFF | (*(unsigned __int8 *)(v6 + 874) << 16);
                              *(_WORD *)(v6 + 872) = v461 & 0x7FFF;
                              *(_BYTE *)(v6 + 874) = BYTE2(v464);
                              if ((*(_BYTE *)(v6 + 158) & 1) == 0)
                              {
                                if (*((_BYTE *)v8 + 1537))
                                {
                                  BOOL v566 = (os_log_s *)__nwlog_obj();
                                  if (os_log_type_enabled(v566, OS_LOG_TYPE_DEBUG))
                                  {
                                    uint64_t v567 = *(void *)(v6 + 488);
                                    int v568 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
                                    int v569 = *(_DWORD *)(v6 + 860);
                                    if (v567) {
                                      LODWORD(v567) = *(_DWORD *)(v567 + 424);
                                    }
                                    *(_DWORD *)buf = 136447490;
                                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                    __int16 v638 = 2082;
                                    *(void *)int v639 = v6 + 74;
                                    *(_WORD *)&v639[8] = 2080;
                                    *(void *)&v639[10] = " ";
                                    *(_WORD *)&v639[18] = 1024;
                                    *(_DWORD *)id v640 = v568;
                                    *(_WORD *)&v640[4] = 1024;
                                    *(_DWORD *)&v640[6] = v569;
                                    *(_WORD *)int v641 = 1024;
                                    *(_DWORD *)&v641[2] = v567;
                                    _os_log_impl( &dword_181A5C000,  v566,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> requesting new frame for final chunk",  buf,  0x32u);
                                    uint64_t v6 = v627;
                                  }
                                }
                              }

                              uint64_t v465 = *(void *)(v6 + 32);
                              if (v465)
                              {
                                *(void *)&__int128 v643 = 0LL;
                                *((void *)&v643 + 1) = &v643;
                                int v466 = nw_protocol_get_output_frames(v465, v6, 5LL, 5LL, 1LL, (uint64_t)&v643);
                                int v467 = v466;
                                uint64_t v468 = v643;
                                if ((void)v643 && v466)
                                {
                                  LODWORD(v647) = 0;
                                  uint64_t v469 = nw_frame_unclaimed_bytes(v643, &v647);
                                  *(_DWORD *)uint64_t v469 = 218762544;
                                  *(_BYTE *)(v469 + 4) = 10;
                                  if (nw_frame_claim(v468, v470, 5, 0))
                                  {
                                    nw_frame_collapse(v468);
                                    nw_frame_unclaim(v468, v471, 5u, 0);
                                    if (nw_protocol_finalize_output_frames(v465, (uint64_t)&v643))
                                    {
                                      *(_WORD *)(*(void *)(v6 + 488) + 428LL) |= 0x400u;
                                      *v463 |= 0x20u;
                                      nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(*(void *)(v6 + 488) + 352LL));
                                      uint64_t v472 = *(void *)(v6 + 488);
                                      if (*(_BYTE *)(v472 + 168))
                                      {
                                        if (*(void *)(v472 + 160) != *(void *)(v472 + 176))
                                        {
                                          if ((*(_BYTE *)(v472 + 158) & 1) == 0)
                                          {
                                            os_log_type_t v473 = (os_log_s *)__nwlog_obj();
                                            BOOL v474 = os_log_type_enabled(v473, OS_LOG_TYPE_ERROR);
                                            uint64_t v472 = *(void *)(v6 + 488);
                                            if (v474)
                                            {
                                              uint64_t v475 = *(void *)(v472 + 256);
                                              if (v475) {
                                                LODWORD(v475) = *(_DWORD *)(v475 + 860);
                                              }
                                              int v476 = *(_DWORD *)(*(void *)(v472 + 248) + 372LL);
                                              int v477 = *(_DWORD *)(v472 + 424);
                                              if (*(_BYTE *)(v472 + 168)) {
                                                uint64_t v478 = *(void *)(v472 + 160);
                                              }
                                              else {
                                                uint64_t v478 = -1LL;
                                              }
                                              size_t v504 = *(void *)(v472 + 176);
                                              *(_DWORD *)buf = 136448002;
                                              *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                              __int16 v638 = 2082;
                                              *(void *)int v639 = v472 + 74;
                                              *(_WORD *)&v639[8] = 2080;
                                              *(void *)&v639[10] = " ";
                                              *(_WORD *)&v639[18] = 1024;
                                              *(_DWORD *)id v640 = v476;
                                              *(_WORD *)&v640[4] = 1024;
                                              *(_DWORD *)&v640[6] = v475;
                                              *(_WORD *)int v641 = 1024;
                                              *(_DWORD *)&v641[2] = v477;
                                              *(_WORD *)&v641[6] = 2048;
                                              *(void *)&v641[8] = v478;
                                              *(_WORD *)&v641[16] = 2048;
                                              size_t v642 = v504;
                                              _os_log_impl( &dword_181A5C000,  v473,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equal body size %llu",  buf,  0x46u);
                                              uint64_t v472 = *(void *)(v6 + 488);
                                            }
                                          }

                                          nw_protocol_error(*(void **)(v472 + 48), v472);
                                          nw_protocol_disconnected( *(void **)(*(void *)(v6 + 488) + 48LL),  *(void *)(v6 + 488));
                                        }
                                      }
                                    }

                                    goto LABEL_779;
                                  }

                                  __nwlog_obj();
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                  __int16 v638 = 1024;
                                  *(_DWORD *)int v639 = 5;
                                  uint64_t v483 = (char *)_os_log_send_and_compose_impl();
                                  type[0] = OS_LOG_TYPE_ERROR;
                                  LOBYTE(v633) = 0;
                                  if (type[0] == OS_LOG_TYPE_FAULT)
                                  {
                                    int v484 = (os_log_s *)__nwlog_obj();
                                    os_log_type_t v485 = type[0];
                                    if (os_log_type_enabled(v484, type[0]))
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                      __int16 v638 = 1024;
                                      *(_DWORD *)int v639 = 5;
                                      uint64_t v486 = "%{public}s claiming frame with %u bytes failed";
                                      goto LABEL_832;
                                    }

                                    goto LABEL_834;
                                  }

                                  if ((_BYTE)v633)
                                  {
                                    uint64_t v491 = (char *)__nw_create_backtrace_string();
                                    uint64_t v492 = (os_log_s *)__nwlog_obj();
                                    os_log_type_t v493 = type[0];
                                    BOOL v494 = os_log_type_enabled(v492, type[0]);
                                    if (v491)
                                    {
                                      if (v494)
                                      {
                                        *(_DWORD *)buf = 136446722;
                                        *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                        __int16 v638 = 1024;
                                        *(_DWORD *)int v639 = 5;
                                        *(_WORD *)&v639[4] = 2082;
                                        *(void *)&v639[6] = v491;
                                        _os_log_impl( &dword_181A5C000,  v492,  v493,  "%{public}s claiming frame with %u bytes failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
                                      }

                                      free(v491);
                                      goto LABEL_834;
                                    }

                                    if (!v494)
                                    {
LABEL_834:
                                      if (v483) {
                                        free(v483);
                                      }
                                      goto LABEL_779;
                                    }

                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                    __int16 v638 = 1024;
                                    *(_DWORD *)int v639 = 5;
                                    uint64_t v486 = "%{public}s claiming frame with %u bytes failed, no backtrace";
                                    int v501 = v492;
                                    os_log_type_t v502 = v493;
                                  }

                                  else
                                  {
                                    int v484 = (os_log_s *)__nwlog_obj();
                                    os_log_type_t v485 = type[0];
                                    if (!os_log_type_enabled(v484, type[0])) {
                                      goto LABEL_834;
                                    }
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                    __int16 v638 = 1024;
                                    *(_DWORD *)int v639 = 5;
                                    uint64_t v486 = "%{public}s claiming frame with %u bytes failed, backtrace limit exceeded";
LABEL_832:
                                    int v501 = v484;
                                    os_log_type_t v502 = v485;
                                  }

                                  _os_log_impl(&dword_181A5C000, v501, v502, v486, buf, 0x12u);
                                  goto LABEL_834;
                                }

                                if (v466)
                                {
                                  __nwlog_obj();
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                  __int16 v638 = 1024;
                                  *(_DWORD *)int v639 = v467;
                                  os_log_type_t v479 = (char *)_os_log_send_and_compose_impl();
                                  LOBYTE(v647) = 16;
                                  type[0] = OS_LOG_TYPE_DEFAULT;
                                  if (v647 != 17)
                                  {
                                    if (type[0])
                                    {
                                      BOOL v487 = (char *)__nw_create_backtrace_string();
                                      BOOL v488 = (os_log_s *)__nwlog_obj();
                                      os_log_type_t v489 = v647;
                                      BOOL v490 = os_log_type_enabled(v488, (os_log_type_t)v647);
                                      if (v487)
                                      {
                                        if (v490)
                                        {
                                          *(_DWORD *)buf = 136446722;
                                          *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                          __int16 v638 = 1024;
                                          *(_DWORD *)int v639 = v467;
                                          *(_WORD *)&v639[4] = 2082;
                                          *(void *)&v639[6] = v487;
                                          _os_log_impl( &dword_181A5C000,  v488,  v489,  "%{public}s output handler reported %u frames to write, but array is empty, d umping backtrace:%{public}s",  buf,  0x1Cu);
                                        }

                                        free(v487);
                                        goto LABEL_823;
                                      }

                                      if (!v490) {
                                        goto LABEL_823;
                                      }
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                      __int16 v638 = 1024;
                                      *(_DWORD *)int v639 = v467;
                                      uint64_t v482 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
                                      uint64_t v495 = v488;
                                      os_log_type_t v496 = v489;
                                    }

                                    else
                                    {
                                      int v480 = (os_log_s *)__nwlog_obj();
                                      os_log_type_t v481 = v647;
                                      if (!os_log_type_enabled(v480, (os_log_type_t)v647)) {
                                        goto LABEL_823;
                                      }
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                      __int16 v638 = 1024;
                                      *(_DWORD *)int v639 = v467;
                                      uint64_t v482 = "%{public}s output handler reported %u frames to write, but array is empty, "
                                             "backtrace limit exceeded";
LABEL_821:
                                      uint64_t v495 = v480;
                                      os_log_type_t v496 = v481;
                                    }

                                    _os_log_impl(&dword_181A5C000, v495, v496, v482, buf, 0x12u);
                                    goto LABEL_823;
                                  }

                                  int v480 = (os_log_s *)__nwlog_obj();
                                  os_log_type_t v481 = v647;
                                  if (os_log_type_enabled(v480, (os_log_type_t)v647))
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                    __int16 v638 = 1024;
                                    *(_DWORD *)int v639 = v467;
                                    uint64_t v482 = "%{public}s output handler reported %u frames to write, but array is empty";
                                    goto LABEL_821;
                                  }

LABEL_977:
                                if (v518) {
                                  free(v518);
                                }
                                uint64_t v6 = v627;
                                goto LABEL_779;
                              }

                              if ((_BYTE)v647)
                              {
                                int v526 = (char *)__nw_create_backtrace_string();
                                uint64_t v527 = (os_log_s *)__nwlog_obj();
                                os_log_type_t v528 = v643;
                                BOOL v591 = os_log_type_enabled(v527, (os_log_type_t)v643);
                                if (v526)
                                {
                                  if (v591)
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                    __int16 v638 = 2082;
                                    *(void *)int v639 = v526;
                                    BOOL v530 = "%{public}s called with null output_handler, dumping backtrace:%{public}s";
LABEL_908:
                                    _os_log_impl(&dword_181A5C000, v527, v528, v530, buf, 0x16u);
                                  }

                                  goto LABEL_909;
                                }

                                if (!v591) {
                                  goto LABEL_977;
                                }
                                *(_DWORD *)buf = 136446210;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                                BOOL v521 = "%{public}s called with null output_handler, no backtrace";
                                goto LABEL_1014;
                              }

                              BOOL v519 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v520 = v643;
                              if (!os_log_type_enabled(v519, (os_log_type_t)v643)) {
                                goto LABEL_977;
                              }
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_send_final_chunk";
                              BOOL v521 = "%{public}s called with null output_handler, backtrace limit exceeded";
LABEL_975:
                              uint64_t v564 = v519;
                              os_log_type_t v565 = v520;
                              goto LABEL_976;
                            }

                            while (1)
                            {
                              uint64_t v224 = *(void *)(v222 + 32);
                              if (v224 || *(void *)(v222 + 40))
                              {
                                uint64_t v225 = *(void *)(v222 + 112);
                                if (!v225) {
                                  goto LABEL_453;
                                }
                              }

                              else
                              {
                                uint64_t v224 = 0LL;
                                uint64_t v225 = *(void *)(v222 + 112);
                                if (!v225) {
                                  goto LABEL_453;
                                }
                              }

                              if ((*(_WORD *)(v222 + 204) & 0x100) != 0
                                && g_channel_check_validity
                                && !g_channel_check_validity(v222, *(void *)(v222 + 88)))
                              {
                                LODWORD(v225) = 0;
LABEL_453:
                                uint64_t v227 = 0LL;
                                goto LABEL_454;
                              }

                              LODWORD(v225) = *(_DWORD *)(v222 + 52);
                              uint64_t v226 = *(unsigned int *)(v222 + 56);
                              if ((_DWORD)v225) {
                                LODWORD(v225) = v225 - (v226 + *(_DWORD *)(v222 + 60));
                              }
                              uint64_t v227 = (void *)(*(void *)(v222 + 112) + v226);
LABEL_454:
                              else {
                                size_t v228 = v225;
                              }
                              memcpy(v227, v211, v228);
                              v216 -= v228;
                              v211 += v228;
                              if (!nw_frame_claim(v222, v229, v228, 0))
                              {
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                *(_DWORD *)buf = 136446466;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                __int16 v638 = 1024;
                                *(_DWORD *)int v639 = v228;
                                int v234 = (char *)_os_log_send_and_compose_impl();
                                LOBYTE(v647) = 16;
                                char v632 = 0;
                                if (v647 == 17)
                                {
                                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                  networkd_settings_init();
                                  uint64_t v235 = gLogObj;
                                  os_log_type_t v236 = v647;
                                  if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647))
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                    __int16 v638 = 1024;
                                    *(_DWORD *)int v639 = v228;
                                    int v237 = (os_log_s *)v235;
                                    os_log_type_t v238 = v236;
                                    int v239 = "%{public}s claiming frame with %u bytes failed";
                                    goto LABEL_478;
                                  }

                                  goto LABEL_479;
                                }

                                if (!v632)
                                {
                                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                  networkd_settings_init();
                                  uint64_t v244 = gLogObj;
                                  os_log_type_t v245 = v647;
                                  if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647)) {
                                    goto LABEL_479;
                                  }
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                  __int16 v638 = 1024;
                                  *(_DWORD *)int v639 = v228;
                                  int v237 = (os_log_s *)v244;
                                  os_log_type_t v238 = v245;
                                  int v239 = "%{public}s claiming frame with %u bytes failed, backtrace limit exceeded";
                                  goto LABEL_478;
                                }

                                uint64_t v240 = (char *)__nw_create_backtrace_string();
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                BOOL v241 = (os_log_s *)gLogObj;
                                os_log_type_t v242 = v647;
                                BOOL v243 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v647);
                                if (v240)
                                {
                                  if (v243)
                                  {
                                    *(_DWORD *)buf = 136446722;
                                    *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                    __int16 v638 = 1024;
                                    *(_DWORD *)int v639 = v228;
                                    *(_WORD *)&v639[4] = 2082;
                                    *(void *)&v639[6] = v240;
                                    _os_log_impl( &dword_181A5C000,  v241,  v242,  "%{public}s claiming frame with %u bytes failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
                                  }

                                  free(v240);
                                  uint64_t v6 = v627;
                                  goto LABEL_479;
                                }

                                uint64_t v6 = v627;
                                if (v243)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                                  __int16 v638 = 1024;
                                  *(_DWORD *)int v639 = v228;
                                  int v237 = v241;
                                  os_log_type_t v238 = v242;
                                  int v239 = "%{public}s claiming frame with %u bytes failed, no backtrace";
LABEL_478:
                                  _os_log_impl(&dword_181A5C000, v237, v238, v239, buf, 0x12u);
                                }

LABEL_756:
                          if (v435) {
                            free(v435);
                          }
                          LODWORD(v212) = 0;
                          uint64_t v6 = v627;
                          uint64_t v204 = v617;
                          os_log_type_t v208 = v434;
                          goto LABEL_564;
                        }

                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                        BOOL v358 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v643) = 16;
                        LOBYTE(v647) = 0;
                        if (v643 == 17)
                        {
                          int v364 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v365 = v643;
                          if (os_log_type_enabled(v364, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                            uint64_t v361 = v364;
                            os_log_type_t v362 = v365;
                            uint64_t v363 = "%{public}s called with null length";
                            goto LABEL_691;
                          }

                          goto LABEL_692;
                        }

                        int v374 = v208;
                        if (!(_BYTE)v647)
                        {
                          __int128 v389 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v390 = v643;
                          if (os_log_type_enabled(v389, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                            uint64_t v361 = v389;
                            os_log_type_t v362 = v390;
                            uint64_t v363 = "%{public}s called with null length, backtrace limit exceeded";
                            goto LABEL_691;
                          }

                          goto LABEL_692;
                        }

                        int v375 = (char *)__nw_create_backtrace_string();
                        __int16 v382 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v383 = v643;
                        BOOL v384 = os_log_type_enabled(v382, (os_log_type_t)v643);
                        if (!v375)
                        {
                          uint64_t v6 = v627;
                          uint64_t v204 = v617;
                          os_log_type_t v208 = v374;
                          if (v384)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                            uint64_t v361 = v382;
                            os_log_type_t v362 = v383;
                            uint64_t v363 = "%{public}s called with null length, no backtrace";
                            goto LABEL_691;
                          }

                          goto LABEL_692;
                        }

                        if (v384)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                          __int16 v638 = 2082;
                          *(void *)int v639 = v375;
                          int v379 = v382;
                          os_log_type_t v380 = v383;
                          unsigned int v381 = "%{public}s called with null length, dumping backtrace:%{public}s";
                          goto LABEL_671;
                        }
                      }

                      else
                      {
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                        BOOL v358 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v643) = 16;
                        LOBYTE(v647) = 0;
                        if (v643 == 17)
                        {
                          uint64_t v359 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v360 = v643;
                          if (os_log_type_enabled(v359, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                            uint64_t v361 = v359;
                            os_log_type_t v362 = v360;
                            uint64_t v363 = "%{public}s called with null buffer";
LABEL_691:
                            _os_log_impl(&dword_181A5C000, v361, v362, v363, buf, 0xCu);
                          }

            goto LABEL_757;
          }

          if (!v556)
          {
            __nwlog_obj();
            char v347 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v360 = v561;
            if (os_log_type_enabled(v347, v561))
            {
              uint64_t v361 = strnlen((const char *)buf, 0x20uLL);
              os_log_type_t v362 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v361;
              *(_WORD *)&uu[22] = 2048;
              os_log_type_t v565 = v362;
              _os_log_impl( &dword_181A5C000,  v347,  v360,  "%{public}s invalid avoided netagent string lengths %zu %zu, backtrace limit exceeded",  uu,  0x20u);
            }

            goto LABEL_756;
          }

          BOOL v351 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          char v347 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          int v352 = v561;
          os_log_type_t v353 = os_log_type_enabled(v347, v561);
          if (!v351)
          {
            if (v353)
            {
              uint64_t v366 = strnlen((const char *)buf, 0x20uLL);
              uint64_t v367 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v366;
              *(_WORD *)&uu[22] = 2048;
              os_log_type_t v565 = v367;
              _os_log_impl( &dword_181A5C000,  v347,  v352,  "%{public}s invalid avoided netagent string lengths %zu %zu, no backtrace",  uu,  0x20u);
            }

            goto LABEL_756;
          }

          if (v353)
          {
            uint64_t v354 = strnlen((const char *)buf, 0x20uLL);
            uint64_t v355 = strnlen((const char *)&buf[32], 0x20uLL);
            *(_DWORD *)uu = 136446978;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2048;
            *(void *)&uu[14] = v354;
            *(_WORD *)&uu[22] = 2048;
            os_log_type_t v565 = v355;
            BOOL v566 = 2082;
            uint64_t v567 = v351;
            _os_log_impl( &dword_181A5C000,  v347,  v352,  "%{public}s invalid avoided netagent string lengths %zu %zu, dumping backtrace:%{public}s",  uu,  0x2Au);
          }

          free(v351);
LABEL_757:
          if (!v321) {
            goto LABEL_875;
          }
          goto LABEL_844;
        case 140:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            int v455 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v455, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 140;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl( &dword_181A5C000,  v455,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }
          }

          os_log_type_t v117 = *v36;
          BOOL v118 = parameters;
          *(_BYTE *)(*((void *)parameters + 13) + 107LL) = v117;

          break;
        case 150:
          if ((_DWORD)v27 == 16) {
            goto LABEL_219;
          }
          if (v27 >= 0x11)
          {
            __nwlog_obj();
            uint64_t v456 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v456, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 150;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl( &dword_181A5C000,  v456,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_219:
            nw_parameters_add_parent_id(parameters, (const unsigned __int8 *)v36);
          }

          break;
        case 151:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            size_t v457 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v457, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 151;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl( &dword_181A5C000,  v457,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }
          }

          nw_parameters_set_data_mode(parameters, *v36);
          break;
        case 152:
          if ((_DWORD)v27 == 4) {
            goto LABEL_71;
          }
          if (v27 < 5)
          {
            os_log_type_t v41 = 0;
          }

          else
          {
            __nwlog_obj();
            int v436 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v436, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 152;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 4;
              _os_log_impl( &dword_181A5C000,  v436,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_71:
            os_log_type_t v41 = *(_DWORD *)v36;
            if ((*(_DWORD *)v36 & 1) != 0)
            {
              uint64_t v42 = parameters;
              *((void *)parameters + 12) |= 1uLL;
            }

            if ((v41 & 2) != 0)
            {
              id v43 = parameters;
              *(_WORD *)(*((void *)parameters + 13) + 108LL) |= 8u;
            }

            if ((v41 & 4) != 0)
            {
              int v44 = parameters;
              *(_WORD *)(*((void *)parameters + 13) + 108LL) |= 0x10u;
            }

            if ((v41 & 0x10) != 0)
            {
              uint64_t v45 = parameters;
              *((void *)parameters + 12) |= 0x800000000uLL;
            }
          }

          HIDWORD(v549) += v41 << 28 >> 31;
          LODWORD(v54_Block_object_dispose(&STACK[0x338], 8) = v548 | ((v41 & 0x40) >> 6);
          if ((v41 & 0x20) != 0)
          {
            int v46 = parameters;
            *((void *)parameters + 12) |= 0x1000000000uLL;
          }

          break;
        case 154:
          if ((_DWORD)v27 == 6) {
            goto LABEL_148;
          }
          if (v27 >= 7)
          {
            __nwlog_obj();
            os_log_type_t v447 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v447, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 154;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 6;
              _os_log_impl( &dword_181A5C000,  v447,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_148:
            uint64_t v559 = *(_DWORD *)v36;
            BOOL v560 = *((_WORD *)v36 + 2);
          }

          BYTE4(v544) = 1;
          break;
        case 155:
          if ((_DWORD)v27 == 6) {
            goto LABEL_223;
          }
          if (v27 >= 7)
          {
            __nwlog_obj();
            uint64_t v458 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v458, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 155;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 6;
              _os_log_impl( &dword_181A5C000,  v458,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }

LABEL_223:
            os_log_type_t v557 = *(_DWORD *)v36;
            os_log_type_t v558 = *((_WORD *)v36 + 2);
          }

          LOBYTE(v544) = 1;
          break;
        case 156:
          goto LABEL_492;
        case 157:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            int v461 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v461, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 157;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl( &dword_181A5C000,  v461,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }
          }

          uint64_t v127 = *v36 - 1;
          if (v127 > 5) {
            uint64_t v128 = 0;
          }
          else {
            uint64_t v128 = dword_18272D740[v127];
          }
          int v170 = parameters;
          *(_DWORD *)(*((void *)parameters + 13) + 92LL) = v128;

          break;
        case 158:
          if (!v553)
          {
            __nwlog_obj();
            uint64_t v174 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v174,  OS_LOG_TYPE_ERROR,  "%{public}s No previous endpoint to apply endpoint device id to",  buf,  0xCu);
            }

            goto LABEL_499;
          }

          *(void *)buf = 0LL;
          asprintf((char **)buf, "%.*s", v27, v36);
          nw_endpoint_set_device_id(v553, *(const char **)buf);
          os_log_type_t v82 = *(char **)buf;
          if (*(void *)buf) {
            goto LABEL_900;
          }
          break;
        case 159:
          if (v553)
          {
            [MEMORY[0x189603F48] dataWithBytes:v36 length:v27];
            os_log_type_t v119 = (void *)objc_claimAutoreleasedReturnValue();
            nw_endpoint_append_public_key(v553, v119);

            break;
          }

          __nwlog_obj();
          uint64_t v174 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            _os_log_impl( &dword_181A5C000,  v174,  OS_LOG_TYPE_ERROR,  "%{public}s No previous endpoint to apply public key to",  buf,  0xCu);
          }

          goto LABEL_499;
        case 160:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            uint64_t v448 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v448, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 160;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl( &dword_181A5C000,  v448,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }
          }

          int v83 = *v36 - 3;
          if (v83 > 4 || *v36 == 5) {
            break;
          }
          uint64_t v84 = dword_18272D758[v83];
          int v85 = parameters;
          uint64_t v86 = v85;
          os_log_type_t v87 = *(void *)(*((void *)parameters + 13) + 176LL);
          if (v87)
          {
            os_log_type_t v61 = *(id *)(v87 + 16);

            if (v61) {
              goto LABEL_441;
            }
          }

          else
          {
          }

          os_log_type_t v61 = xpc_array_create(0LL, 0LL);
          if (v61)
          {
LABEL_441:
            xpc_array_set_uint64(v61, 0xFFFFFFFFFFFFFFFFLL, v84);
            nw_parameters_set_preferred_interface_subtypes(v86, v61);
            goto LABEL_117;
          }

          __nwlog_obj();
          uint64_t v260 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          os_log_type_t v261 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          uint64_t v561 = OS_LOG_TYPE_DEFAULT;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            uint64_t v262 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            int v263 = uu[0];
            if (os_log_type_enabled(v262, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v262, v263, "%{public}s xpc_array_create failed", buf, 0xCu);
            }

LABEL_692:
                          if (v358) {
                            free(v358);
                          }
                          LODWORD(v212) = 0;
                          goto LABEL_564;
                        }

                        int v374 = v208;
                        if (!(_BYTE)v647)
                        {
                          __int128 v387 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v388 = v643;
                          if (os_log_type_enabled(v387, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                            uint64_t v361 = v387;
                            os_log_type_t v362 = v388;
                            uint64_t v363 = "%{public}s called with null buffer, backtrace limit exceeded";
                            goto LABEL_691;
                          }

                          goto LABEL_692;
                        }

                        int v375 = (char *)__nw_create_backtrace_string();
                        BOOL v376 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v377 = v643;
                        BOOL v378 = os_log_type_enabled(v376, (os_log_type_t)v643);
                        if (!v375)
                        {
                          uint64_t v6 = v627;
                          uint64_t v204 = v617;
                          os_log_type_t v208 = v374;
                          if (v378)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                            uint64_t v361 = v376;
                            os_log_type_t v362 = v377;
                            uint64_t v363 = "%{public}s called with null buffer, no backtrace";
                            goto LABEL_691;
                          }

                          goto LABEL_692;
                        }

                        if (v378)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_send_bytes";
                          __int16 v638 = 2082;
                          *(void *)int v639 = v375;
                          int v379 = v376;
                          os_log_type_t v380 = v377;
                          unsigned int v381 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_671:
                          _os_log_impl(&dword_181A5C000, v379, v380, v381, buf, 0x16u);
                        }
                      }

                      free(v375);
                      uint64_t v6 = v627;
                      uint64_t v204 = v617;
                      os_log_type_t v208 = v374;
                      goto LABEL_692;
                    }

                    if ((*(_WORD *)(v205 + 204) & 4) == 0)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                      __int16 v638 = 2048;
                      uint64_t v256 = v205;
                      *(void *)int v639 = v205;
                      int v257 = (char *)_os_log_send_and_compose_impl();
                      LOBYTE(v643) = 16;
                      LOBYTE(v647) = 0;
                      if (v643 == 17)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        uint64_t v258 = gLogObj;
                        os_log_type_t v259 = v643;
                        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v643)) {
                          goto LABEL_549;
                        }
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                        __int16 v638 = 2048;
                        *(void *)int v639 = v256;
                        uint64_t v260 = (os_log_s *)v258;
                        os_log_type_t v261 = v259;
                        uint64_t v262 = "%{public}s frame %p has no metadata";
                      }

                      else if ((_BYTE)v647)
                      {
                        int v286 = (char *)__nw_create_backtrace_string();
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        id v287 = (os_log_s *)gLogObj;
                        os_log_type_t v288 = v643;
                        BOOL v289 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v643);
                        if (v286)
                        {
                          if (v289)
                          {
                            *(_DWORD *)buf = 136446722;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                            __int16 v638 = 2048;
                            *(void *)int v639 = v256;
                            *(_WORD *)&v639[8] = 2082;
                            *(void *)&v639[10] = v286;
                            _os_log_impl( &dword_181A5C000,  v287,  v288,  "%{public}s frame %p has no metadata, dumping backtrace:%{public}s",  buf,  0x20u);
                          }

                          free(v286);
LABEL_549:
                          if (v257) {
                            free(v257);
                          }
                          uint64_t v205 = v256;
                          if (!v256) {
                            goto LABEL_777;
                          }
                          continue;
                        }

                        if (!v289) {
                          goto LABEL_549;
                        }
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                        __int16 v638 = 2048;
                        *(void *)int v639 = v256;
                        uint64_t v260 = v287;
                        os_log_type_t v261 = v288;
                        uint64_t v262 = "%{public}s frame %p has no metadata, no backtrace";
                      }

                      else
                      {
                        uint64_t v301 = (os_log_s *)__nwlog_obj();
                        os_log_type_t v302 = v643;
                        if (!os_log_type_enabled(v301, (os_log_type_t)v643)) {
                          goto LABEL_549;
                        }
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                        __int16 v638 = 2048;
                        *(void *)int v639 = v256;
                        uint64_t v260 = v301;
                        os_log_type_t v261 = v302;
                        uint64_t v262 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
                      }

                      _os_log_impl(&dword_181A5C000, v260, v261, v262, buf, 0x16u);
                      goto LABEL_549;
                    }

                    if ((*(_BYTE *)(v205 + 216) & 1) != 0) {
                      goto LABEL_427;
                    }
                    nw_frame_unclaim(v205, a2, 0xAu, 7u);
                    uint64_t v271 = *(void *)(v205 + 112);
                    if (v271)
                    {
                      if ((*(_WORD *)(v205 + 204) & 0x100) == 0 || !g_channel_check_validity)
                      {
LABEL_514:
                        uint64_t v272 = v271 + *(unsigned int *)(v205 + 56);
                        uint64_t v273 = *(void *)(v205 + 64);
                        if (v273) {
                          goto LABEL_515;
                        }
                        goto LABEL_537;
                      }

                      if (g_channel_check_validity(v205, *(void *)(v205 + 88)))
                      {
                        uint64_t v271 = *(void *)(v205 + 112);
                        goto LABEL_514;
                      }
                    }

                    uint64_t v272 = 0LL;
                    uint64_t v273 = *(void *)(v205 + 64);
                    if (v273)
                    {
LABEL_515:
                      int v274 = (*(unsigned __int8 *)(v273 + 66) >> 6) & 1;
                      unsigned int v275 = __len;
                      if ((_DWORD)__len)
                      {
LABEL_516:
                        os_log_type_t v276 = v8;
                        unsigned int v277 = -1;
                        unsigned int v278 = v275;
                        do
                        {
                          unsigned int v279 = v277++;
                          BOOL v280 = v278 >= 0x10;
                          v278 >>= 4;
                        }

                        while (v280);
                        if (v272)
                        {
                          id v281 = (_BYTE *)(v272 + v277);
                          *(_WORD *)(v281 + 1) = 2573;
                          do
                          {
                            if ((v275 & 0xF) >= 0xA) {
                              char v282 = (v275 & 0xF) + 55;
                            }
                            else {
                              char v282 = v275 & 0xF | 0x30;
                            }
                            *v281-- = v282;
                            BOOL v55 = v275 > 0xF;
                            v275 >>= 4;
                          }

                          while (v55);
                          goto LABEL_524;
                        }

                        uint64_t v624 = (void *)(v205 + 32);
                        uint64_t v620 = v205;
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                        int v406 = (char *)_os_log_send_and_compose_impl();
                        LOBYTE(v643) = 16;
                        LOBYTE(v647) = 0;
                        if (__nwlog_fault(v406, &v643, &v647))
                        {
                          if (v643 == 17)
                          {
                            int v407 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v408 = v643;
                            if (os_log_type_enabled(v407, (os_log_type_t)v643))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                              os_log_type_t v409 = v407;
                              os_log_type_t v410 = v408;
                              uint64_t v411 = "%{public}s called with null buffer";
LABEL_738:
                              _os_log_impl(&dword_181A5C000, v409, v410, v411, buf, 0xCu);
                            }
                          }

                          else if ((_BYTE)v647)
                          {
                            uint64_t v420 = (char *)__nw_create_backtrace_string();
                            int v421 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v422 = v643;
                            BOOL v423 = os_log_type_enabled(v421, (os_log_type_t)v643);
                            if (v420)
                            {
                              if (v423)
                              {
                                *(_DWORD *)buf = 136446466;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                                __int16 v638 = 2082;
                                *(void *)int v639 = v420;
                                _os_log_impl( &dword_181A5C000,  v421,  v422,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
                              }

                              free(v420);
                              goto LABEL_739;
                            }

                            if (v423)
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                              os_log_type_t v409 = v421;
                              os_log_type_t v410 = v422;
                              uint64_t v411 = "%{public}s called with null buffer, no backtrace";
                              goto LABEL_738;
                            }
                          }

                          else
                          {
                            BOOL v432 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v433 = v643;
                            if (os_log_type_enabled(v432, (os_log_type_t)v643))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                              os_log_type_t v409 = v432;
                              os_log_type_t v410 = v433;
                              uint64_t v411 = "%{public}s called with null buffer, backtrace limit exceeded";
                              goto LABEL_738;
                            }
                          }
                        }

LABEL_739:
                        if (v406) {
                          free(v406);
                        }
                        uint64_t v6 = v627;
                        uint64_t v205 = v620;
                        os_log_type_t v208 = v624;
LABEL_524:
                        unsigned int v283 = v279 + 2;
                        uint64_t v284 = v277 + 3;
                        if (v279 == 6)
                        {
                          unsigned int v285 = 0;
                          goto LABEL_587;
                        }

LABEL_596:
                          if (v274) {
                            uint64_t v324 = 0LL;
                          }
                          else {
                            uint64_t v324 = 5LL;
                          }
                          uint64_t v325 = v285 + v324;
                          if (!__CFADD__(v285, (_DWORD)v324))
                          {
                            uint64_t v8 = v276;
                            uint64_t v204 = v617;
                            if (!(_DWORD)v325)
                            {
LABEL_621:
                              __int128 v211 = (char *)nw_frame_unclaimed_bytes(v205, &__len);
                              if (v205)
                              {
                                if ((*(_WORD *)(v205 + 204) & 4) != 0)
                                {
                                  char v347 = *(_BYTE *)(v205 + 216);
                                  *(void *)(v205 + 20_Block_object_dispose(&STACK[0x338], 8) = v6;
                                  *(_BYTE *)(v205 + 216) = v347 & 0xFC | 1;
                                  goto LABEL_427;
                                }

LABEL_597:
            if (v236) {
              free(v236);
            }
            __int128 v161 = 0LL;
            goto LABEL_315;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v174 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            _os_log_impl( &dword_181A5C000,  v174,  OS_LOG_TYPE_ERROR,  "%{public}s No previous endpoint to apply endpoint agent to",  buf,  0xCu);
          }

LABEL_623:
                                uint64_t v339 = v208;
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                *(_DWORD *)buf = 136446466;
                                *(void *)&uint8_t buf[4] = "nw_http1_frame_metadata_reset";
                                __int16 v638 = 2048;
                                uint64_t v340 = v205;
                                *(void *)int v639 = v205;
                                int v341 = (char *)_os_log_send_and_compose_impl();
                                LOBYTE(v643) = 16;
                                LOBYTE(v647) = 0;
                                if (__nwlog_fault(v341, &v643, &v647))
                                {
                                  if (v643 == 17)
                                  {
                                    os_log_type_t v342 = (os_log_s *)__nwlog_obj();
                                    os_log_type_t v343 = v643;
                                    if (os_log_type_enabled(v342, (os_log_type_t)v643))
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "nw_http1_frame_metadata_reset";
                                      __int16 v638 = 2048;
                                      *(void *)int v639 = v340;
                                      uint64_t v344 = v342;
                                      os_log_type_t v345 = v343;
                                      __int128 v346 = "%{public}s frame %p has no metadata";
LABEL_637:
                                      _os_log_impl(&dword_181A5C000, v344, v345, v346, buf, 0x16u);
                                    }
                                  }

                                  else if ((_BYTE)v647)
                                  {
                                    __int128 v348 = (char *)__nw_create_backtrace_string();
                                    BOOL v349 = (os_log_s *)__nwlog_obj();
                                    os_log_type_t v350 = v643;
                                    BOOL v351 = os_log_type_enabled(v349, (os_log_type_t)v643);
                                    if (v348)
                                    {
                                      if (v351)
                                      {
                                        *(_DWORD *)buf = 136446722;
                                        *(void *)&uint8_t buf[4] = "nw_http1_frame_metadata_reset";
                                        __int16 v638 = 2048;
                                        *(void *)int v639 = v340;
                                        *(_WORD *)&v639[8] = 2082;
                                        *(void *)&v639[10] = v348;
                                        _os_log_impl( &dword_181A5C000,  v349,  v350,  "%{public}s frame %p has no metadata, dumping backtrace:%{public}s",  buf,  0x20u);
                                      }

                                      free(v348);
                                      goto LABEL_638;
                                    }

                                    if (v351)
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "nw_http1_frame_metadata_reset";
                                      __int16 v638 = 2048;
                                      *(void *)int v639 = v340;
                                      uint64_t v344 = v349;
                                      os_log_type_t v345 = v350;
                                      __int128 v346 = "%{public}s frame %p has no metadata, no backtrace";
                                      goto LABEL_637;
                                    }
                                  }

                                  else
                                  {
                                    int v352 = (os_log_s *)__nwlog_obj();
                                    os_log_type_t v353 = v643;
                                    if (os_log_type_enabled(v352, (os_log_type_t)v643))
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(void *)&uint8_t buf[4] = "nw_http1_frame_metadata_reset";
                                      __int16 v638 = 2048;
                                      *(void *)int v639 = v340;
                                      uint64_t v344 = v352;
                                      os_log_type_t v345 = v353;
                                      __int128 v346 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
                                      goto LABEL_637;
                                    }
                                  }
                                }

LABEL_731:
                              if (v400) {
                                free(v400);
                              }
                              uint64_t v6 = v627;
                              uint64_t v204 = v617;
                              uint64_t v205 = 0LL;
                              os_log_type_t v208 = v399;
                              goto LABEL_623;
                            }

  if (v191)
  {
    char v321 = v191;
    int v322 = nw_protocol_options_matches_definition(v321, (void *)g_tcp_definition);

    if (v322)
    {
      if ((nw_socket_set_bidirectional_tcp_sockopts(v540, v321) & 1) == 0) {
        goto LABEL_1219;
      }
      ecn_mode = nw_parameters_get_ecn_mode(v188);
      if (ecn_mode)
      {
        if (ecn_mode == 1) {
          uint64_t v324 = 1;
        }
        else {
          uint64_t v324 = 2;
        }
      }

      else
      {
        if (!nw_tcp_options_get_disable_ecn(v321)) {
          goto LABEL_786;
        }
        uint64_t v324 = 2;
      }

      *(_DWORD *)int v548 = v324;
      if (!setsockopt(*(_DWORD *)&a1[4].flow_id[12], 6, 528, v548, 4u)) {
        goto LABEL_786;
      }
      uint64_t v330 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v331 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v553 = "nw_socket_set_common_sockopts";
        BOOL v554 = 2080;
        *(void *)uint64_t v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v330;
        _os_log_impl( &dword_181A5C000,  v331,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_ECN_MODE failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      uint64_t v332 = (os_log_s *)__nwlog_obj();
      int v333 = v332;
      if (v330 == 22)
      {
        if (os_log_type_enabled(v332, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v553 = "nw_socket_set_common_sockopts";
          BOOL v554 = 1024;
          *(_DWORD *)uint64_t v555 = 22;
          _os_log_impl( &dword_181A5C000,  v333,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_ECN_MODE failed %{darwin.errno}d",  buf,  0x12u);
        }

        goto LABEL_786;
      }

      int v334 = v72;
      os_log_type_t v335 = v150;
      *(_DWORD *)buf = 136446466;
      uint64_t v553 = "nw_socket_set_common_sockopts";
      BOOL v554 = 1024;
      *(_DWORD *)uint64_t v555 = v330;
      BOOL v336 = (char *)_os_log_send_and_compose_impl();
      v547[0] = OS_LOG_TYPE_ERROR;
      v545[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v336, v547, v545))
      {
        if (v547[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v337 = (os_log_s *)__nwlog_obj();
          os_log_type_t v338 = v547[0];
          if (os_log_type_enabled(v337, v547[0]))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v553 = "nw_socket_set_common_sockopts";
            BOOL v554 = 1024;
            *(_DWORD *)uint64_t v555 = v330;
            uint64_t v339 = "%{public}s setsockopt TCP_ECN_MODE failed %{darwin.errno}d";
LABEL_782:
            _os_log_impl(&dword_181A5C000, v337, v338, v339, buf, 0x12u);
          }
        }

        else if (v545[0])
        {
          __int128 v346 = (char *)__nw_create_backtrace_string();
          uint64_t v337 = (os_log_s *)__nwlog_obj();
          os_log_type_t v338 = v547[0];
          char v347 = os_log_type_enabled(v337, v547[0]);
          if (v346)
          {
            if (v347)
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v553 = "nw_socket_set_common_sockopts";
              BOOL v554 = 1024;
              *(_DWORD *)uint64_t v555 = v330;
              *(_WORD *)&v555[4] = 2082;
              *(void *)&v555[6] = v346;
              _os_log_impl( &dword_181A5C000,  v337,  v338,  "%{public}s setsockopt TCP_ECN_MODE failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v346);
            goto LABEL_783;
          }

          if (v347)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v553 = "nw_socket_set_common_sockopts";
            BOOL v554 = 1024;
            *(_DWORD *)uint64_t v555 = v330;
            uint64_t v339 = "%{public}s setsockopt TCP_ECN_MODE failed %{darwin.errno}d, no backtrace";
            goto LABEL_782;
          }
        }

        else
        {
          uint64_t v337 = (os_log_s *)__nwlog_obj();
          os_log_type_t v338 = v547[0];
          if (os_log_type_enabled(v337, v547[0]))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v553 = "nw_socket_set_common_sockopts";
            BOOL v554 = 1024;
            *(_DWORD *)uint64_t v555 = v330;
            uint64_t v339 = "%{public}s setsockopt TCP_ECN_MODE failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_782;
          }
        }
      }

LABEL_620:
                            nw_frame_claim(v205, v270, 0, v325);
                            goto LABEL_621;
                          }

                          v623 = v208;
                          uint64_t v326 = v205;
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                          __int16 v638 = 2082;
                          *(void *)int v639 = "unused_bytes";
                          *(_WORD *)&v639[8] = 2048;
                          *(void *)&v639[10] = v324;
                          *(_WORD *)&v639[18] = 2048;
                          *(void *)id v640 = v285 + v324;
                          uint64_t v327 = (char *)_os_log_send_and_compose_impl();
                          LOBYTE(v643) = 16;
                          LOBYTE(v647) = 0;
                          uint64_t v8 = v276;
                          uint64_t v204 = v617;
                          if (__nwlog_fault(v327, &v643, &v647))
                          {
                            if (v643 == 17)
                            {
                              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                              networkd_settings_init();
                              uint64_t v328 = gLogObj;
                              os_log_type_t v329 = v643;
                              if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v643))
                              {
                                *(_DWORD *)buf = 136446978;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                                __int16 v638 = 2082;
                                *(void *)int v639 = "unused_bytes";
                                *(_WORD *)&v639[8] = 2048;
                                *(void *)&v639[10] = v324;
                                *(_WORD *)&v639[18] = 2048;
                                *(void *)id v640 = v325;
                                uint64_t v330 = (os_log_s *)v328;
                                os_log_type_t v331 = v329;
                                uint64_t v332 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_616:
                                _os_log_impl(&dword_181A5C000, v330, v331, v332, buf, 0x2Au);
                              }
                            }

                            else if ((_BYTE)v647)
                            {
                              int v333 = (char *)__nw_create_backtrace_string();
                              int v334 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v335 = v643;
                              BOOL v336 = os_log_type_enabled(v334, (os_log_type_t)v643);
                              if (v333)
                              {
                                if (v336)
                                {
                                  *(_DWORD *)buf = 136447234;
                                  *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                                  __int16 v638 = 2082;
                                  *(void *)int v639 = "unused_bytes";
                                  *(_WORD *)&v639[8] = 2048;
                                  *(void *)&v639[10] = v324;
                                  *(_WORD *)&v639[18] = 2048;
                                  *(void *)id v640 = v325;
                                  *(_WORD *)&v640[8] = 2082;
                                  *(void *)int v641 = v333;
                                  _os_log_impl( &dword_181A5C000,  v334,  v335,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                                }

                                free(v333);
                                goto LABEL_617;
                              }

                              if (v336)
                              {
                                *(_DWORD *)buf = 136446978;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                                __int16 v638 = 2082;
                                *(void *)int v639 = "unused_bytes";
                                *(_WORD *)&v639[8] = 2048;
                                *(void *)&v639[10] = v324;
                                *(_WORD *)&v639[18] = 2048;
                                *(void *)id v640 = v325;
                                uint64_t v330 = v334;
                                os_log_type_t v331 = v335;
                                uint64_t v332 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                                goto LABEL_616;
                              }
                            }

                            else
                            {
                              uint64_t v337 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v338 = v643;
                              if (os_log_type_enabled(v337, (os_log_type_t)v643))
                              {
                                *(_DWORD *)buf = 136446978;
                                *(void *)&uint8_t buf[4] = "nw_http1_connection_drain_outbound_frames";
                                __int16 v638 = 2082;
                                *(void *)int v639 = "unused_bytes";
                                *(_WORD *)&v639[8] = 2048;
                                *(void *)&v639[10] = v324;
                                *(_WORD *)&v639[18] = 2048;
                                *(void *)id v640 = v325;
                                uint64_t v330 = v337;
                                os_log_type_t v331 = v338;
                                uint64_t v332 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                                goto LABEL_616;
                              }
                            }
                          }

              if (!v373) {
                goto LABEL_223;
              }
              uint64_t v143 = (char *)v373;
              goto LABEL_222;
            }

            __nwlog_obj();
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&os_log_type_t type[4] = "nw_http3_encoder_stream_finalize_output_frames";
            uint64_t v72 = (const char *)_os_log_send_and_compose_impl();
            v409[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v408[0]) = 0;
            if (__nwlog_fault(v72, v409, v408))
            {
              if (v409[0] == OS_LOG_TYPE_FAULT)
              {
                __int16 v73 = (os_log_s *)__nwlog_obj();
                int v74 = v409[0];
                if (os_log_type_enabled(v73, v409[0]))
                {
                  *(_DWORD *)os_log_type_t type = 136446210;
                  *(void *)&os_log_type_t type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                  BOOL v75 = "%{public}s called with null http3";
LABEL_218:
                  __int16 v142 = v73;
LABEL_219:
                  _os_log_impl(&dword_181A5C000, v142, v74, v75, type, 0xCu);
                }
              }

              else if (LOBYTE(v408[0]))
              {
                uint64_t v324 = (char *)__nw_create_backtrace_string();
                uint64_t v325 = (os_log_s *)__nwlog_obj();
                int v74 = v409[0];
                loga = v325;
                uint64_t v326 = os_log_type_enabled(v325, v409[0]);
                if (v324)
                {
                  if (v326)
                  {
                    *(_DWORD *)os_log_type_t type = 136446466;
                    *(void *)&os_log_type_t type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                    *(_WORD *)&type[12] = 2082;
                    *(void *)&type[14] = v324;
                    _os_log_impl( &dword_181A5C000,  loga,  v74,  "%{public}s called with null http3, dumping backtrace:%{public}s",  type,  0x16u);
                  }

                  free(v324);
                }

                else if (v326)
                {
                  *(_DWORD *)os_log_type_t type = 136446210;
                  *(void *)&os_log_type_t type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                  BOOL v75 = "%{public}s called with null http3, no backtrace";
                  goto LABEL_302;
                }
              }

              else
              {
                __int16 v73 = (os_log_s *)__nwlog_obj();
                int v74 = v409[0];
                if (os_log_type_enabled(v73, v409[0]))
                {
                  *(_DWORD *)os_log_type_t type = 136446210;
                  *(void *)&os_log_type_t type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                  BOOL v75 = "%{public}s called with null http3, backtrace limit exceeded";
                  goto LABEL_218;
                }
              }
            }

LABEL_725:
                        if (v393) {
                          free(v393);
                        }
                        uint64_t v6 = v627;
                        uint64_t v205 = v392;
                        os_log_type_t v208 = v391;
                        goto LABEL_590;
                      }

LABEL_538:
                      uint64_t v294 = v205;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                      uint64_t v295 = (char *)_os_log_send_and_compose_impl();
                      LOBYTE(v643) = 16;
                      LOBYTE(v647) = 0;
                      if (__nwlog_fault(v295, &v643, &v647))
                      {
                        if (v643 == 17)
                        {
                          BOOL v296 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v297 = v643;
                          if (os_log_type_enabled(v296, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                            os_log_type_t v298 = v296;
                            os_log_type_t v299 = v297;
                            os_log_type_t v300 = "%{public}s called with null size";
LABEL_582:
                            _os_log_impl(&dword_181A5C000, v298, v299, v300, buf, 0xCu);
                          }
                        }

                        else if ((_BYTE)v647)
                        {
                          uint64_t v313 = (void *)(v205 + 32);
                          uint64_t v314 = (char *)__nw_create_backtrace_string();
                          int v315 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v316 = v643;
                          BOOL v317 = os_log_type_enabled(v315, (os_log_type_t)v643);
                          if (v314)
                          {
                            if (v317)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                              __int16 v638 = 2082;
                              *(void *)int v639 = v314;
                              _os_log_impl( &dword_181A5C000,  v315,  v316,  "%{public}s called with null size, dumping backtrace:%{public}s",  buf,  0x16u);
                            }

                            free(v314);
                            os_log_type_t v208 = v313;
                            goto LABEL_583;
                          }

                          os_log_type_t v208 = v313;
                          if (v317)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                            os_log_type_t v298 = v315;
                            os_log_type_t v299 = v316;
                            os_log_type_t v300 = "%{public}s called with null size, no backtrace";
                            goto LABEL_582;
                          }
                        }

                        else
                        {
                          uint64_t v318 = (os_log_s *)__nwlog_obj();
                          os_log_type_t v319 = v643;
                          if (os_log_type_enabled(v318, (os_log_type_t)v643))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_connection_write_chunk_header";
                            os_log_type_t v298 = v318;
                            os_log_type_t v299 = v319;
                            os_log_type_t v300 = "%{public}s called with null size, backtrace limit exceeded";
                            goto LABEL_582;
                          }
                        }
                      }

LABEL_583:
                      if (v295) {
                        free(v295);
                      }
                      os_log_type_t v276 = v8;
                      unsigned int v283 = 0;
                      uint64_t v284 = 2LL;
                      uint64_t v205 = v294;
                      goto LABEL_586;
                    }

        if (v283) {
          free(v283);
        }
        goto LABEL_585;
      }

LABEL_290:
          if (v138) {
            free(v138);
          }
          uint64_t v8 = &qword_18C45F000;
          goto LABEL_400;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
        __int16 v638 = 1040;
        *(_DWORD *)int v639 = 16;
        *(_WORD *)&v639[4] = 2096;
        *(void *)&v639[6] = &v647;
        *(_WORD *)&v639[14] = 1040;
        *(_DWORD *)&v639[16] = 16;
        *(_WORD *)id v640 = 2096;
        *(void *)&v640[2] = &v643;
        int v31 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v633) = 0;
        if (__nwlog_fault(v31, type, &v633))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            unsigned int v32 = (os_log_s *)__nwlog_obj();
            os_log_type_t v33 = type[0];
            if (!os_log_type_enabled(v32, type[0])) {
              goto LABEL_109;
            }
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
            __int16 v638 = 1040;
            *(_DWORD *)int v639 = 16;
            *(_WORD *)&v639[4] = 2096;
            *(void *)&v639[6] = &v647;
            *(_WORD *)&v639[14] = 1040;
            *(_DWORD *)&v639[16] = 16;
            *(_WORD *)id v640 = 2096;
            *(void *)&v640[2] = &v643;
            int v34 = "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_t}.16P"
                  " != new %{uuid_t}.16P)";
LABEL_107:
            BOOL v60 = v32;
            os_log_type_t v61 = v33;
LABEL_108:
            _os_log_impl(&dword_181A5C000, v60, v61, v34, buf, 0x2Cu);
            goto LABEL_109;
          }

          if (!(_BYTE)v633)
          {
            unsigned int v32 = (os_log_s *)__nwlog_obj();
            os_log_type_t v33 = type[0];
            if (!os_log_type_enabled(v32, type[0])) {
              goto LABEL_109;
            }
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
            __int16 v638 = 1040;
            *(_DWORD *)int v639 = 16;
            *(_WORD *)&v639[4] = 2096;
            *(void *)&v639[6] = &v647;
            *(_WORD *)&v639[14] = 1040;
            *(_DWORD *)&v639[16] = 16;
            *(_WORD *)id v640 = 2096;
            *(void *)&v640[2] = &v643;
            int v34 = "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_t}.16P"
                  " != new %{uuid_t}.16P), backtrace limit exceeded";
            goto LABEL_107;
          }

          uint64_t v35 = (char *)__nw_create_backtrace_string();
          int v36 = (os_log_s *)__nwlog_obj();
          os_log_type_t v37 = type[0];
          BOOL v38 = os_log_type_enabled(v36, type[0]);
          if (v35)
          {
            if (v38)
            {
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
              __int16 v638 = 1040;
              *(_DWORD *)int v639 = 16;
              *(_WORD *)&v639[4] = 2096;
              *(void *)&v639[6] = &v647;
              *(_WORD *)&v639[14] = 1040;
              *(_DWORD *)&v639[16] = 16;
              *(_WORD *)id v640 = 2096;
              *(void *)&v640[2] = &v643;
              *(_WORD *)int v641 = 2082;
              *(void *)&v641[2] = v35;
              _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_t}.16P ! = new %{uuid_t}.16P), dumping backtrace:%{public}s",  buf,  0x36u);
            }

            free(v35);
          }

          else if (v38)
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
            __int16 v638 = 1040;
            *(_DWORD *)int v639 = 16;
            *(_WORD *)&v639[4] = 2096;
            *(void *)&v639[6] = &v647;
            *(_WORD *)&v639[14] = 1040;
            *(_DWORD *)&v639[16] = 16;
            *(_WORD *)id v640 = 2096;
            *(void *)&v640[2] = &v643;
            int v34 = "%{public}s existing metadata identifier does not match new metadata identifier (existing %{uuid_t}.16P"
                  " != new %{uuid_t}.16P), no backtrace";
            BOOL v60 = v36;
            os_log_type_t v61 = v37;
            goto LABEL_108;
          }
        }

                  goto LABEL_99;
                }

                if (!v165)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  BOOL v55 = (os_log_s *)(id)gLogObj;
                  uint64_t v63 = type;
                  if (os_log_type_enabled(v55, type))
                  {
                    *(_DWORD *)buf = 136447490;
                    os_log_type_t v171 = "nw_necp_append_tlv";
                    char v172 = 2048;
                    *(void *)uint64_t v173 = v35;
                    *(_WORD *)&v173[8] = 2048;
                    *(void *)&v173[10] = 47LL;
                    *(_WORD *)&v173[18] = 2048;
                    *(void *)uint64_t v174 = v22;
                    *(_WORD *)&v174[8] = 1024;
                    *(_DWORD *)int v175 = 222;
                    *(_WORD *)&v175[4] = 1024;
                    *(_DWORD *)&v175[6] = 42;
                    _os_log_impl( &dword_181A5C000,  v55,  v63,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
                  }

                  goto LABEL_290;
                }

                BOOL v59 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                BOOL v60 = (os_log_s *)(id)gLogObj;
                os_log_type_t v61 = type;
                int v62 = os_log_type_enabled(v60, type);
                if (v59)
                {
                  if (v62)
                  {
                    *(_DWORD *)buf = 136447746;
                    os_log_type_t v171 = "nw_necp_append_tlv";
                    char v172 = 2048;
                    *(void *)uint64_t v173 = v35;
                    *(_WORD *)&v173[8] = 2048;
                    *(void *)&v173[10] = 47LL;
                    *(_WORD *)&v173[18] = 2048;
                    *(void *)uint64_t v174 = v22;
                    *(_WORD *)&v174[8] = 1024;
                    *(_DWORD *)int v175 = 222;
                    *(_WORD *)&v175[4] = 1024;
                    *(_DWORD *)&v175[6] = 42;
                    int v176 = 2082;
                    __int16 v177 = v59;
                    _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping bac ktrace:%{public}s",  buf,  0x40u);
                  }

                  free(v59);
                  if (v54)
                  {
LABEL_100:
                    unsigned int v65 = (char *)v54;
LABEL_101:
                    free(v65);
                  }

LABEL_845:
    free(v189);
    if (!v161) {
      return;
    }
LABEL_899:
    free(v161);
    return;
  }

BOOL ___ZL35nw_protocol_http1_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_http1_get_output_frames_block_invoke";
    int v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_http1_get_output_frames_block_invoke";
      int v34 = "%{public}s called with null frame";
    }

    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v42 = os_log_type_enabled(v32, type);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          id v49 = "nw_protocol_http1_get_output_frames_block_invoke";
          __int16 v50 = 2082;
          uint64_t v51 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_67;
      }

      if (!v42)
      {
LABEL_67:
        if (v31) {
          free(v31);
        }
        return a2 != 0;
      }

      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_http1_get_output_frames_block_invoke";
      int v34 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      unsigned int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_http1_get_output_frames_block_invoke";
      int v34 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0xCu);
    goto LABEL_67;
  }

  __int128 v45 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = calloc(1uLL, 0x20uLL);
  if (v5) {
    goto LABEL_3;
  }
  uint64_t v35 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  id v49 = "strict_calloc";
  __int16 v50 = 2048;
  uint64_t v51 = 1LL;
  __int16 v52 = 2048;
  uint64_t v53 = 32LL;
  int v36 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v36);
  if (!result)
  {
    free(v36);
LABEL_3:
    __int128 v6 = *(_OWORD *)(a2 + 80);
    _OWORD *v5 = v45;
    v5[1] = v6;
    *(void *)(a2 + 80) = nw_http1_wrapped_frame_finalizer;
    *(void *)(a2 + 8_Block_object_dispose(&STACK[0x338], 8) = v5;
    if ((*(_WORD *)(a2 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(a2, v5))
    {
      return a2 != 0;
    }

    unsigned int v7 = *(_DWORD *)(a2 + 48);
    if (!v7) {
      return a2 != 0;
    }
    if (*(void *)(a1 + 40))
    {
      int v8 = -1;
      unsigned int v9 = *(_DWORD *)(a2 + 48);
      do
      {
        ++v8;
        BOOL v10 = v9 > 0xF;
        v9 >>= 4;
      }

      while (v10);
      int v11 = v8 + 3;
      int v12 = 7;
      goto LABEL_11;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_http1_connection_get_chunked_extra_size";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v37, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          id v49 = "nw_http1_connection_get_chunked_extra_size";
          unsigned int v40 = "%{public}s called with null http1_connection";
LABEL_73:
          _os_log_impl(&dword_181A5C000, v38, v39, v40, buf, 0xCu);
        }
      }

      else if (v46)
      {
        id v43 = (char *)__nw_create_backtrace_string();
        BOOL v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type;
        BOOL v44 = os_log_type_enabled(v38, type);
        if (v43)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            id v49 = "nw_http1_connection_get_chunked_extra_size";
            __int16 v50 = 2082;
            uint64_t v51 = (uint64_t)v43;
            _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v43);
          goto LABEL_74;
        }

        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          id v49 = "nw_http1_connection_get_chunked_extra_size";
          unsigned int v40 = "%{public}s called with null http1_connection, no backtrace";
          goto LABEL_73;
        }
      }

      else
      {
        BOOL v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          id v49 = "nw_http1_connection_get_chunked_extra_size";
          unsigned int v40 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          goto LABEL_73;
        }
      }
    }

BOOL ___ZL35nw_protocol_http1_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_120( uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v18 = "nw_protocol_http1_get_output_frames_block_invoke";
    __int128 v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446210;
      int v18 = "nw_protocol_http1_get_output_frames_block_invoke";
      unsigned int v9 = "%{public}s called with null frame";
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          int v18 = "nw_protocol_http1_get_output_frames_block_invoke";
          __int16 v19 = 2082;
          uint64_t v20 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (!v13)
      {
LABEL_21:
        if (v6) {
          free(v6);
        }
        return a2 != 0;
      }

      *(_DWORD *)buf = 136446210;
      int v18 = "nw_protocol_http1_get_output_frames_block_invoke";
      unsigned int v9 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      unsigned int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446210;
      int v18 = "nw_protocol_http1_get_output_frames_block_invoke";
      unsigned int v9 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_21;
  }

  __int128 v14 = *(_OWORD *)(a1 + 32);
  int v3 = calloc(1uLL, 0x20uLL);
  if (v3)
  {
LABEL_3:
    __int128 v4 = *(_OWORD *)(a2 + 80);
    _OWORD *v3 = v14;
    v3[1] = v4;
    *(void *)(a2 + 80) = nw_http1_wrapped_frame_finalizer;
    *(void *)(a2 + 8_Block_object_dispose(&STACK[0x338], 8) = v3;
    return a2 != 0;
  }

  BOOL v10 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  int v18 = "strict_calloc";
  __int16 v19 = 2048;
  uint64_t v20 = 1LL;
  __int16 v21 = 2048;
  uint64_t v22 = 32LL;
  int v11 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

void nw_http1_wrapped_frame_finalizer(nw_frame *a1, BOOL a2, _OWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_http1_wrapped_frame_finalizer";
    __int128 v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_http1_wrapped_frame_finalizer";
      unsigned int v7 = "%{public}s called with null frame";
LABEL_31:
      _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      goto LABEL_32;
    }

    if (!v12)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_http1_wrapped_frame_finalizer";
      unsigned int v7 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_31;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_http1_wrapped_frame_finalizer";
      unsigned int v7 = "%{public}s called with null frame, no backtrace";
      goto LABEL_31;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      char v15 = "nw_http1_wrapped_frame_finalizer";
      __int16 v16 = 2082;
      int v17 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_32:
    if (!v4) {
      return;
    }
    goto LABEL_33;
  }

  if (a3)
  {
    *((_OWORD *)a1 + 5) = a3[1];
    free(a3);
    nw_frame_finalize((uint64_t)a1);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_http1_wrapped_frame_finalizer";
  __int128 v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_http1_wrapped_frame_finalizer";
    unsigned int v7 = "%{public}s called with null context";
    goto LABEL_31;
  }

  if (!v12)
  {
    uint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_http1_wrapped_frame_finalizer";
    unsigned int v7 = "%{public}s called with null context, backtrace limit exceeded";
    goto LABEL_31;
  }

  BOOL v10 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = (os_log_s *)__nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_http1_wrapped_frame_finalizer";
    unsigned int v7 = "%{public}s called with null context, no backtrace";
    goto LABEL_31;
  }

  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    char v15 = "nw_http1_wrapped_frame_finalizer";
    __int16 v16 = 2082;
    int v17 = v10;
    _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v10);
  if (v4) {
LABEL_33:
  }
    free(v4);
}

void nw::http::content_length_manager::set_outbound_message( nw::http::content_length_manager *this, nw_protocol_metadata *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "set_outbound_message";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "set_outbound_message";
      BOOL v11 = "%{public}s called with null metadata";
      goto LABEL_41;
    }

    if (!v18)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "set_outbound_message";
      BOOL v11 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_41;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = v19;
    BOOL v13 = os_log_type_enabled(v9, v19);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "set_outbound_message";
      BOOL v11 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_41;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v21 = "set_outbound_message";
      __int16 v22 = 2082;
      uint64_t v23 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_42:
    if (!v8) {
      return;
    }
    goto LABEL_43;
  }

  if (!nw_protocol_metadata_is_http(a2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "set_outbound_message";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "set_outbound_message";
      BOOL v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata))";
      goto LABEL_41;
    }

    if (!v18)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "set_outbound_message";
      BOOL v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), backtrace limit exceeded";
      goto LABEL_41;
    }

    __int128 v14 = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = v19;
    BOOL v15 = os_log_type_enabled(v9, v19);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v21 = "set_outbound_message";
        __int16 v22 = 2082;
        uint64_t v23 = v14;
        _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v14);
      if (!v8) {
        return;
      }
LABEL_43:
      free(v8);
      return;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "set_outbound_message";
      BOOL v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), no backtrace";
LABEL_41:
      _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      goto LABEL_42;
    }

    goto LABEL_42;
  }

  if (*((_BYTE *)this + 48))
  {
    id v4 = nw_http_metadata_copy_response(a2);
    nw_http_response_get_status_code(v4);
    if (*((_BYTE *)this + 49))
    {
      if (*((_BYTE *)this + 8))
      {
        *(void *)this = 0LL;
        if (!v4) {
          return;
        }
      }

      else
      {
        *((_BYTE *)this + _Block_object_dispose(&STACK[0x338], 8) = 1;
        *(void *)this = 0LL;
        if (!v4) {
          return;
        }
      }

uint64_t ___ZL30nw_http1_connection_send_bytesP19nw_http1_connectionPhjb_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void ___ZN2nw4http22content_length_manager20set_outbound_messageEP20nw_protocol_metadata_block_invoke( uint64_t a1, char *__s)
{
  if (__s)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
      abort();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v7 = v4 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__l.__cap_ = v8 | 0x8000000000000000LL;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }

    else
    {
      __dst.__r_.__value_.__s.__size_ = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        *(void *)uint64_t v3 = std::stoull(&__dst, 0LL, 10);
        *(_BYTE *)(v3 + _Block_object_dispose(&STACK[0x338], 8) = 1;
        return;
      }
    }

    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }

void ___ZN2nw4http22content_length_manager20set_outbound_messageEP20nw_protocol_metadata_block_invoke_2( uint64_t a1, char *__s)
{
  if (__s)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
      abort();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v7 = v4 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__l.__cap_ = v8 | 0x8000000000000000LL;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }

    else
    {
      __dst.__r_.__value_.__s.__size_ = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        *(void *)uint64_t v3 = std::stoull(&__dst, 0LL, 10);
        *(_BYTE *)(v3 + _Block_object_dispose(&STACK[0x338], 8) = 1;
        return;
      }
    }

    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }

__n128 __Block_byref_object_copy__102(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

BOOL ___ZL41nw_http1_connection_fulfill_frame_requestP19nw_http1_connectionP16nw_frame_array_sS2_bbjjjPj_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v122 = *MEMORY[0x1895F89C0];
  unsigned int v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  unsigned int v5 = v4;
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 24);
  uint64_t v8 = v7 + v4;
  if (__CFADD__(v7, v4))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    uint64_t v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
    __int16 v111 = 2082;
    uint64_t v112 = "bytes_count_with_this_frame";
    __int16 v113 = 2048;
    uint64_t v114 = v5;
    __int16 v115 = 2048;
    *(void *)int v116 = v8;
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v108 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v9, type, &v108))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (os_log_s *)gLogObj;
        os_log_type_t v11 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          uint64_t v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          __int16 v111 = 2082;
          uint64_t v112 = "bytes_count_with_this_frame";
          __int16 v113 = 2048;
          uint64_t v114 = v5;
          __int16 v115 = 2048;
          *(void *)int v116 = v8;
          char v12 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_17:
          _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0x2Au);
        }
      }

      else if (v108)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (os_log_s *)gLogObj;
        os_log_type_t v11 = type[0];
        BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136447234;
            uint64_t v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
            __int16 v111 = 2082;
            uint64_t v112 = "bytes_count_with_this_frame";
            __int16 v113 = 2048;
            uint64_t v114 = v5;
            __int16 v115 = 2048;
            *(void *)int v116 = v8;
            *(_WORD *)&v116[8] = 2082;
            os_log_type_t v117 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (v14)
        {
          *(_DWORD *)buf = 136446978;
          uint64_t v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          __int16 v111 = 2082;
          uint64_t v112 = "bytes_count_with_this_frame";
          __int16 v113 = 2048;
          uint64_t v114 = v5;
          __int16 v115 = 2048;
          *(void *)int v116 = v8;
          char v12 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_17;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (os_log_s *)gLogObj;
        os_log_type_t v11 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          uint64_t v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          __int16 v111 = 2082;
          uint64_t v112 = "bytes_count_with_this_frame";
          __int16 v113 = 2048;
          uint64_t v114 = v5;
          __int16 v115 = 2048;
          *(void *)int v116 = v8;
          char v12 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_17;
        }
      }
    }

uint64_t ___ZL41nw_http1_connection_fulfill_frame_requestP19nw_http1_connectionP16nw_frame_array_sS2_bbjjjPj_block_invoke_108( uint64_t a1, void *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 48))
  {
    uint64_t v3 = a2[2];
    unsigned int v4 = (void *)a2[3];
    uint64_t v2 = a2 + 2;
    if (v3)
    {
      *(void *)(v3 + 24) = v4;
      unsigned int v4 = (void *)a2[3];
LABEL_8:
      *unsigned int v4 = v3;
      goto LABEL_9;
    }

void ___ZL40nw_http1_connection_process_input_framesP19nw_http1_connectionPjS1_P16nw_frame_array_sS3_b_block_invoke( uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v156 = *MEMORY[0x1895F89C0];
  if (a2 && a3)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    if ((*(_BYTE *)(v6 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        int v104 = (os_log_s *)__nwlog_obj();
        BOOL v105 = os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG);
        uint64_t v6 = *(void *)(a1 + 72);
        if (v105)
        {
          char v106 = (const char *)(v6 + 74);
          uint64_t v107 = *(void *)(v6 + 488);
          int v108 = *(_DWORD *)(*(void *)(v6 + 480) + 372LL);
          int v109 = *(_DWORD *)(v6 + 860);
          if (v107) {
            LODWORD(v107) = *(_DWORD *)(v107 + 424);
          }
          *(_DWORD *)buf = 136448002;
          os_log_type_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
          __int16 v148 = 2082;
          BOOL v149 = v106;
          __int16 v150 = 2080;
          *(void *)os_log_type_t v151 = " ";
          *(_WORD *)&v151[8] = 1024;
          *(_DWORD *)&v151[10] = v108;
          *(_WORD *)&v151[14] = 1024;
          *(_DWORD *)&v151[16] = v109;
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v107;
          HIWORD(v152) = 2048;
          *(void *)uint64_t v153 = a2;
          *(_WORD *)&v153[8] = 1024;
          *(_DWORD *)&v153[10] = a3;
          _os_log_impl( &dword_181A5C000,  v104,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> body bytes found (%p, %u bytes):",  buf,  0x42u);
          uint64_t v6 = *(void *)(a1 + 72);
        }
      }
    }

    char v7 = *(_BYTE *)(v6 + 158) | (gLogDatapath == 0);
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == a3)
    {
      if ((v7 & 1) == 0)
      {
        uint64_t v110 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v111 = *(void *)(a1 + 72);
          uint64_t v112 = (const char *)(v111 + 74);
          uint64_t v113 = *(void *)(v111 + 488);
          int v114 = *(_DWORD *)(*(void *)(v111 + 480) + 372LL);
          int v115 = *(_DWORD *)(v111 + 860);
          if (v113) {
            LODWORD(v113) = *(_DWORD *)(v113 + 424);
          }
          uint64_t v116 = *(void *)(a1 + 80);
          *(_DWORD *)buf = 136447746;
          os_log_type_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
          __int16 v148 = 2082;
          BOOL v149 = v112;
          __int16 v150 = 2080;
          *(void *)os_log_type_t v151 = " ";
          *(_WORD *)&v151[8] = 1024;
          *(_DWORD *)&v151[10] = v114;
          *(_WORD *)&v151[14] = 1024;
          *(_DWORD *)&v151[16] = v115;
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v113;
          HIWORD(v152) = 2048;
          *(void *)uint64_t v153 = v116;
          _os_log_impl( &dword_181A5C000,  v110,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> entire frame is body, moving to destination array %p",  buf,  0x3Cu);
        }
      }

      uint64_t v8 = *(void *)(a1 + 80);
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
      if (*(_BYTE *)(a1 + 88))
      {
        *(void *)(v9 + 32) = 0LL;
        uint64_t v10 = v9 + 32;
      }

      else
      {
        *(void *)(v9 + 16) = 0LL;
        uint64_t v10 = v9 + 16;
      }

      uint64_t v37 = *(void **)(v8 + 8);
      *(void *)(v10 + _Block_object_dispose(&STACK[0x338], 8) = v37;
      *uint64_t v37 = v9;
      *(void *)(v8 + _Block_object_dispose(&STACK[0x338], 8) = v10;
      uint64_t v38 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v39 = *(unsigned int *)(v38 + 24) + 1LL;
      uint64_t v40 = v39 << 31 >> 31;
      *(_DWORD *)(v38 + 24) = v39;
      if (v40 == v39 && (v40 & 0x8000000000000000LL) == 0)
      {
LABEL_70:
        uint64_t v54 = *(void *)(*(void *)(a1 + 56) + 8LL);
        int v55 = *(_DWORD *)(v54 + 24);
        int v56 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        *(_DWORD *)(v54 + 24) = v55 + v56;
        if (!__CFADD__(v55, v56))
        {
LABEL_89:
          *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
          return;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v57 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        uint64_t v58 = *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
        __int16 v148 = 2082;
        BOOL v149 = "bytes_processed";
        __int16 v150 = 2048;
        *(void *)os_log_type_t v151 = v57;
        *(_WORD *)&v151[8] = 2048;
        *(void *)&v151[10] = v58;
        __int16 v59 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v144 = 0;
        if (__nwlog_fault(v59, &type, &v144))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v60 = (os_log_s *)gLogObj;
            os_log_type_t v61 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              uint64_t v62 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              uint64_t v63 = *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
              __int16 v148 = 2082;
              BOOL v149 = "bytes_processed";
              __int16 v150 = 2048;
              *(void *)os_log_type_t v151 = v62;
              *(_WORD *)&v151[8] = 2048;
              *(void *)&v151[10] = v63;
              int v64 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_85:
              _os_log_impl(&dword_181A5C000, v60, v61, v64, buf, 0x2Au);
            }
          }

          else if (v144)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v60 = (os_log_s *)gLogObj;
            os_log_type_t v61 = type;
            BOOL v66 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (backtrace_string)
            {
              if (v66)
              {
                uint64_t v67 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                uint64_t v68 = *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
                *(_DWORD *)buf = 136447234;
                os_log_type_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
                __int16 v148 = 2082;
                BOOL v149 = "bytes_processed";
                __int16 v150 = 2048;
                *(void *)os_log_type_t v151 = v67;
                *(_WORD *)&v151[8] = 2048;
                *(void *)&v151[10] = v68;
                *(_WORD *)&v151[18] = 2082;
                int v152 = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
              }

              free(backtrace_string);
              goto LABEL_86;
            }

            if (v66)
            {
              uint64_t v71 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              uint64_t v72 = *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
              __int16 v148 = 2082;
              BOOL v149 = "bytes_processed";
              __int16 v150 = 2048;
              *(void *)os_log_type_t v151 = v71;
              *(_WORD *)&v151[8] = 2048;
              *(void *)&v151[10] = v72;
              int v64 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_85;
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v60 = (os_log_s *)gLogObj;
            os_log_type_t v61 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              uint64_t v69 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              uint64_t v70 = *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
              __int16 v148 = 2082;
              BOOL v149 = "bytes_processed";
              __int16 v150 = 2048;
              *(void *)os_log_type_t v151 = v69;
              *(_WORD *)&v151[8] = 2048;
              *(void *)&v151[10] = v70;
              int v64 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_85;
            }
          }
        }

uint64_t nw_http1_connection_execute_parser( uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v82 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v65 = "nw_http1_connection_execute_parser";
    uint64_t v52 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v65 = "nw_http1_connection_execute_parser";
      int v55 = "%{public}s called with null bytes";
      goto LABEL_86;
    }

    if (!v62)
    {
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v65 = "nw_http1_connection_execute_parser";
      int v55 = "%{public}s called with null bytes, backtrace limit exceeded";
      goto LABEL_86;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v53 = (os_log_s *)__nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v59 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (!v59) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v65 = "nw_http1_connection_execute_parser";
      int v55 = "%{public}s called with null bytes, no backtrace";
      goto LABEL_86;
    }

    if (!v59) {
      goto LABEL_81;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v65 = "nw_http1_connection_execute_parser";
    __int16 v66 = 2082;
    uint64_t v67 = backtrace_string;
    uint64_t v58 = "%{public}s called with null bytes, dumping backtrace:%{public}s";
    goto LABEL_80;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v65 = "nw_http1_connection_execute_parser";
    uint64_t v52 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v65 = "nw_http1_connection_execute_parser";
      int v55 = "%{public}s called with null bytes_parsed";
      goto LABEL_86;
    }

    if (!v62)
    {
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v65 = "nw_http1_connection_execute_parser";
      int v55 = "%{public}s called with null bytes_parsed, backtrace limit exceeded";
      goto LABEL_86;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v53 = (os_log_s *)__nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v60 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (!v60) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v65 = "nw_http1_connection_execute_parser";
      int v55 = "%{public}s called with null bytes_parsed, no backtrace";
      goto LABEL_86;
    }

    if (!v60) {
      goto LABEL_81;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v65 = "nw_http1_connection_execute_parser";
    __int16 v66 = 2082;
    uint64_t v67 = backtrace_string;
    uint64_t v58 = "%{public}s called with null bytes_parsed, dumping backtrace:%{public}s";
    goto LABEL_80;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v65 = "nw_http1_connection_execute_parser";
    uint64_t v52 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v65 = "nw_http1_connection_execute_parser";
      int v55 = "%{public}s called with null body_block";
      goto LABEL_86;
    }

    if (!v62)
    {
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v65 = "nw_http1_connection_execute_parser";
      int v55 = "%{public}s called with null body_block, backtrace limit exceeded";
      goto LABEL_86;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v53 = (os_log_s *)__nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v61 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (!v61) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v65 = "nw_http1_connection_execute_parser";
      int v55 = "%{public}s called with null body_block, no backtrace";
      goto LABEL_86;
    }

    if (!v61) {
      goto LABEL_81;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v65 = "nw_http1_connection_execute_parser";
    __int16 v66 = 2082;
    uint64_t v67 = backtrace_string;
    uint64_t v58 = "%{public}s called with null body_block, dumping backtrace:%{public}s";
    goto LABEL_80;
  }

  unsigned int v7 = a3;
  if ((*(_WORD *)(a1 + 872) & 0x200) != 0)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(a5 + 16))(a5, a2, a3);
    return 1LL;
  }

  *(void *)(a1 + 792) = a5;
  __int16 v10 = *(_WORD *)(*(void *)(a1 + 488) + 428LL);
  uint64_t v11 = a3;
  int v12 = *(_DWORD *)(a1 + 224);
  if (!v12)
  {
    uint64_t v20 = &a2[a3];
    uint64_t v21 = *(void *)(a1 + 208);
    if (v21) {
      *(void *)(a1 + 20_Block_object_dispose(&STACK[0x338], 8) = a2;
    }
    unsigned int v22 = llhttp__internal__run(a1 + 200, a2, &a2[a3], v21);
    if (v22)
    {
      *(void *)(a1 + 256) = v22;
      uint64_t v23 = *(void *)(a1 + 208);
      if (!v23
        || (int v12 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(a1 + 216))(a1 + 200, v23, &a2[v11])) == 0)
      {
        *(void *)(a1 + 792) = 0LL;
        goto LABEL_50;
      }

      *(_DWORD *)(a1 + 224) = v12;
      *(void *)(a1 + 240) = v20;
    }

    else
    {
      int v12 = *(_DWORD *)(a1 + 224);
    }
  }

  os_log_type_t v13 = (__int16 *)(a1 + 872);
  *(void *)(a1 + 792) = 0LL;
  if (v12 == 22)
  {
    uint64_t v24 = *(void *)(a1 + 240) - (void)a2;
    if ((*(_BYTE *)(a1 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v25 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = *(void *)(a1 + 488);
        int v27 = *(_DWORD *)(*(void *)(a1 + 480) + 372LL);
        int v28 = *(_DWORD *)(a1 + 860);
        if (v26) {
          LODWORD(v26) = *(_DWORD *)(v26 + 424);
        }
        *(_DWORD *)buf = 136447746;
        uint64_t v65 = "nw_http1_connection_execute_parser";
        __int16 v66 = 2082;
        uint64_t v67 = (char *)(a1 + 74);
        __int16 v68 = 2080;
        uint64_t v69 = " ";
        __int16 v70 = 1024;
        int v71 = v27;
        __int16 v72 = 1024;
        int v73 = v28;
        __int16 v74 = 1024;
        int v75 = v26;
        __int16 v76 = 1024;
        LODWORD(v77) = v24;
        _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> upgraded after parsing %u bytes",  buf,  0x38u);
      }
    }

    *v13 |= 0x200u;
    uint64_t v11 = v24;
    if (v7 > v24) {
      (*(void (**)(uint64_t, unsigned __int8 *, void))(a5 + 16))( a5,  &a2[v24],  v7 - v24);
    }
    *a4 = v7;
    goto LABEL_56;
  }

  if (v12 != 21)
  {
    if (v12)
    {
      if ((*(_BYTE *)(a1 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v14 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v15 = *(void *)(a1 + 488);
          int v16 = *(_DWORD *)(*(void *)(a1 + 480) + 372LL);
          int v17 = *(_DWORD *)(a1 + 860);
          if (v15) {
            LODWORD(v15) = *(_DWORD *)(v15 + 424);
          }
          uint64_t v18 = *(void *)(a1 + 232);
          *(_DWORD *)buf = 136448258;
          uint64_t v65 = "nw_http1_connection_execute_parser";
          __int16 v66 = 2082;
          uint64_t v67 = (char *)(a1 + 74);
          __int16 v68 = 2080;
          uint64_t v69 = " ";
          __int16 v70 = 1024;
          int v71 = v16;
          __int16 v72 = 1024;
          int v73 = v17;
          __int16 v74 = 1024;
          int v75 = v15;
          __int16 v76 = 2080;
          uint64_t v77 = v18;
          __int16 v78 = 1040;
          unsigned int v79 = v7;
          __int16 v80 = 2096;
          uint64_t v81 = a2;
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> Failed to parse bytes (%s): \n%{network:data}.*P",  buf,  0x4Cu);
        }
      }

      uint64_t result = 0LL;
      *a4 = 0;
      return result;
    }

void nw_http1_connection_inbound_frame_finalizer(nw_frame *a1, int a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v28 = "nw_http1_connection_inbound_frame_finalizer";
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      os_log_type_t v13 = "%{public}s called with null frame";
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          int v28 = "nw_http1_connection_inbound_frame_finalizer";
          __int16 v29 = 2082;
          unsigned int v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_76:
        if (!v10) {
          return;
        }
        goto LABEL_77;
      }

      if (!v19) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      os_log_type_t v13 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      os_log_type_t v13 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    goto LABEL_75;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v28 = "nw_http1_connection_inbound_frame_finalizer";
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        uint64_t v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_76;
        }
        *(_DWORD *)buf = 136446210;
        int v28 = "nw_http1_connection_inbound_frame_finalizer";
        os_log_type_t v13 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_75;
      }

      uint64_t v20 = (char *)__nw_create_backtrace_string();
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v21 = os_log_type_enabled(v11, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_76;
        }
        *(_DWORD *)buf = 136446210;
        int v28 = "nw_http1_connection_inbound_frame_finalizer";
        os_log_type_t v13 = "%{public}s called with null context, no backtrace";
        goto LABEL_75;
      }

      if (!v21) {
        goto LABEL_57;
      }
      *(_DWORD *)buf = 136446466;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      __int16 v29 = 2082;
      unsigned int v30 = v20;
      unsigned int v22 = "%{public}s called with null context, dumping backtrace:%{public}s";
      goto LABEL_56;
    }

    uint64_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446210;
    int v28 = "nw_http1_connection_inbound_frame_finalizer";
    os_log_type_t v13 = "%{public}s called with null context";
LABEL_75:
    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_76;
  }

  if ((*((_WORD *)a1 + 102) & 4) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v28 = "nw_http1_connection_inbound_frame_finalizer";
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      os_log_type_t v13 = "%{public}s called with null metadata";
      goto LABEL_75;
    }

    if (!v25)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      os_log_type_t v13 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_75;
    }

    uint64_t v20 = (char *)__nw_create_backtrace_string();
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v23 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (!v23) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      os_log_type_t v13 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_75;
    }

    if (!v23) {
      goto LABEL_57;
    }
    *(_DWORD *)buf = 136446466;
    int v28 = "nw_http1_connection_inbound_frame_finalizer";
    __int16 v29 = 2082;
    unsigned int v30 = v20;
    unsigned int v22 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_56:
    _os_log_impl(&dword_181A5C000, v11, v12, v22, buf, 0x16u);
    goto LABEL_57;
  }

  uint64_t v5 = *((void *)a1 + 26);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v28 = "nw_http1_connection_inbound_frame_finalizer";
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      os_log_type_t v13 = "%{public}s called with null http1_connection";
      goto LABEL_75;
    }

    if (!v25)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      os_log_type_t v13 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_75;
    }

    uint64_t v20 = (char *)__nw_create_backtrace_string();
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (!v24) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      os_log_type_t v13 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_75;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      int v28 = "nw_http1_connection_inbound_frame_finalizer";
      __int16 v29 = 2082;
      unsigned int v30 = v20;
      unsigned int v22 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_56;
    }

uint64_t ___ZL34nw_protocol_http1_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 186) = *(_BYTE *)(a2 + 186) & 0x7F | ((*(_BYTE *)(a1 + 48) != 0) << 7);
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = (*(_WORD *)(v2 + 428) & 0x200) != 0 && **(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 8LL) == a2;
  nw_frame_set_metadata(a2, *(nw_protocol_metadata **)(v2 + 368), 1, v3);
  return 1LL;
}

uint64_t ___ZL22nw_http1_stream_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke( uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

void nw_http1_stream::~nw_http1_stream(nw_http1_stream *this)
{
  uint64_t v2 = (void *)*((void *)this + 52);
  if (v2)
  {
    free(v2);
    *((void *)this + 52) = 0LL;
  }

  if ((*((_BYTE *)this + 408) & 1) != 0)
  {
    int v3 = (void *)*((void *)this + 50);
    if (v3) {
      os_release(v3);
    }
  }

  *((void *)this + 50) = 0LL;
  if ((*((_BYTE *)this + 392) & 1) != 0)
  {
    unsigned int v4 = (void *)*((void *)this + 48);
    if (v4) {
      os_release(v4);
    }
  }

  *((void *)this + 4_Block_object_dispose(&STACK[0x338], 8) = 0LL;
  if ((*((_BYTE *)this + 376) & 1) != 0)
  {
    uint64_t v5 = (void *)*((void *)this + 46);
    if (v5) {
      os_release(v5);
    }
  }

  *((void *)this + 46) = 0LL;
  if ((*((_BYTE *)this + 360) & 1) != 0)
  {
    uint64_t v6 = (void *)*((void *)this + 44);
    if (v6) {
      os_release(v6);
    }
  }

  *((void *)this + 44) = 0LL;
  if ((*((_BYTE *)this + 344) & 1) != 0)
  {
    uint64_t v7 = (void *)*((void *)this + 42);
    if (v7) {
      os_release(v7);
    }
  }

  *((void *)this + 42) = 0LL;
  if ((*((_BYTE *)this + 328) & 1) != 0)
  {
    uint64_t v8 = (void *)*((void *)this + 40);
    if (v8) {
      os_release(v8);
    }
  }

  *((void *)this + 40) = 0LL;
  if ((*((_BYTE *)this + 272) & 1) != 0)
  {
    uint64_t v9 = (void *)*((void *)this + 33);
    if (v9) {
      os_release(v9);
    }
  }

  *((void *)this + 33) = 0LL;
}

void ___ZL23nw_protocol_http1_resetP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v145 = *MEMORY[0x1895F89C0];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  if ((*(_WORD *)(v1 + 872) & 0x100) == 0)
  {
    nw_protocol_disconnect(*(void **)(v1 + 32), v1);
    return;
  }

  uint64_t v3 = *(void *)(v1 + 480);
  if (v3)
  {
    nw_http_connection_metadata_closed(*(void **)(v1 + 768));
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (!gLogDatapath) {
        goto LABEL_7;
      }
      __int16 v80 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v81 = *(void *)(v2 + 488);
        int v82 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
        int v83 = *(_DWORD *)(v2 + 860);
        if (v81) {
          LODWORD(v81) = *(_DWORD *)(v81 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v2 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v137 = (uint64_t)" ";
        *(_WORD *)os_log_type_t v138 = 1024;
        *(_DWORD *)&v138[2] = v82;
        *(_WORD *)&v138[6] = 1024;
        *(_DWORD *)&v138[8] = v83;
        *(_WORD *)&v138[12] = 1024;
        *(_DWORD *)&v138[14] = v81;
        _os_log_impl( &dword_181A5C000,  v80,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing unprocessed_input_frames",  buf,  0x32u);
      }
    }

    if (gLogDatapath)
    {
      uint64_t v84 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(void *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_181A5C000, v84, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }

void ___ZL28nw_http1_add_idle_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v217 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1[4];
  if ((*(_BYTE *)(v3 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[4];
      uint64_t v6 = v5 + 74;
      uint64_t v7 = *(void *)(v5 + 488);
      int v8 = *(_DWORD *)(*(void *)(v5 + 480) + 372LL);
      int v9 = *(_DWORD *)(v5 + 860);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 424);
      }
      uint64_t v10 = a1[5];
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection_block_invoke";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v209 = (uint64_t)" ";
      *(_WORD *)int v210 = 1024;
      *(_DWORD *)&v210[2] = v8;
      *(_WORD *)&v210[6] = 1024;
      *(_DWORD *)&v210[8] = v9;
      *(_WORD *)&v210[12] = 1024;
      *(_DWORD *)&v210[14] = v7;
      *(_WORD *)&v210[18] = 2048;
      *(void *)&v210[20] = v10;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u:c%u:s%u> idle connection timed out after %lldms, tearing down",  buf,  0x3Cu);
    }

    uint64_t v3 = a1[4];
  }

  uint64_t v11 = a1[6];
  uint64_t v12 = &qword_18C45F000;
  if (!v11)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
    char v13 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v213) = 0;
    if (__nwlog_fault(v13, &type, &v213))
    {
      if (type == 17)
      {
        int v108 = (os_log_s *)__nwlog_obj();
        os_log_type_t v109 = type;
        if (os_log_type_enabled(v108, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          uint64_t v16 = "%{public}s called with null http1";
LABEL_334:
          BOOL v36 = v108;
          os_log_type_t v37 = v109;
          uint32_t v38 = 12;
          goto LABEL_41;
        }
      }

      else if ((_BYTE)v213)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v108 = (os_log_s *)__nwlog_obj();
        os_log_type_t v109 = type;
        BOOL v163 = os_log_type_enabled(v108, (os_log_type_t)type);
        if (backtrace_string)
        {
          if (v163)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v108,  v109,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          uint64_t v12 = &qword_18C45F000;
        }

        else
        {
          uint64_t v12 = &qword_18C45F000;
          if (v163)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
            uint64_t v16 = "%{public}s called with null http1, no backtrace";
            goto LABEL_334;
          }
        }
      }

      else
      {
        int v108 = (os_log_s *)__nwlog_obj();
        os_log_type_t v109 = type;
        if (os_log_type_enabled(v108, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          uint64_t v16 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_334;
        }
      }
    }

LABEL_346:
          BOOL v199 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_finalize_master_frame_array";
            _os_log_impl(&dword_181A5C000, v199, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }

          goto LABEL_150;
        }

        if (*(void *)(v85 + 248))
        {
          if ((*(_BYTE *)(v85 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v86 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              uint64_t v87 = *(void *)(v85 + 256);
              int v88 = *(_DWORD *)(*(void *)(v85 + 248) + 372LL);
              if (v87) {
                LODWORD(v87) = *(_DWORD *)(v87 + 860);
              }
              int v89 = *(_DWORD *)(v85 + 424);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v85 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v209 = (uint64_t)" ";
              *(_WORD *)int v210 = 1024;
              *(_DWORD *)&v210[2] = v88;
              *(_WORD *)&v210[6] = 1024;
              *(_DWORD *)&v210[8] = v87;
              *(_WORD *)&v210[12] = 1024;
              *(_DWORD *)&v210[14] = v89;
              *(_WORD *)&v210[18] = 2048;
              *(void *)&v210[20] = v85;
              __int16 v211 = 2048;
              uint64_t v212 = v46;
              _os_log_impl( &dword_181A5C000,  v86,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p",  buf,  0x46u);
            }
          }

          if (gLogDatapath)
          {
            BOOL v192 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_181A5C000, v192, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }

          *(void *)buf = v47;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
          uint64_t v209 = (uint64_t)&__block_descriptor_tmp_55_39717;
          *(void *)int v210 = v46 + 632;
          v210[8] = 0;
          uint64_t v90 = *(void *)(v46 + 632);
          do
          {
            if (!v90) {
              break;
            }
            uint64_t v91 = *(void *)(v90 + 32);
            char v92 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            uint64_t v90 = v91;
          }

          while ((v92 & 1) != 0);
          *(void *)(v85 + 256) = 0LL;
          *(void *)(v46 + 48_Block_object_dispose(&STACK[0x338], 8) = 0LL;
          nw_protocol_set_output_handler(v85, 0LL);
          nw_protocol_set_input_handler(v46, 0LL);
          uint64_t v12 = &qword_18C45F000;
          goto LABEL_143;
        }

        uint64_t v187 = v47;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
        BOOL v188 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v213) = 16;
        os_log_type_t v203 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v188, &v213, &v203))
        {
          if (v213 == 17)
          {
            uint64_t v189 = (os_log_s *)__nwlog_obj();
            os_log_type_t v190 = v213;
            if (os_log_type_enabled(v189, (os_log_type_t)v213))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              uint64_t v191 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_362:
              _os_log_impl(&dword_181A5C000, v189, v190, v191, buf, 0xCu);
            }
          }

          else if (v203)
          {
            int v200 = (char *)__nw_create_backtrace_string();
            uint64_t v189 = (os_log_s *)__nwlog_obj();
            os_log_type_t v190 = v213;
            BOOL v201 = os_log_type_enabled(v189, (os_log_type_t)v213);
            if (v200)
            {
              if (v201)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v200;
                _os_log_impl( &dword_181A5C000,  v189,  v190,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v200);
              goto LABEL_363;
            }

            if (v201)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              uint64_t v191 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
              goto LABEL_362;
            }
          }

          else
          {
            uint64_t v189 = (os_log_s *)__nwlog_obj();
            os_log_type_t v190 = v213;
            if (os_log_type_enabled(v189, (os_log_type_t)v213))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              uint64_t v191 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
              goto LABEL_362;
            }
          }
        }

    xpc_array_set_string(v140, 0xFFFFFFFFFFFFFFFFLL, v139);
    xpc_array_set_string(v209[22], 0xFFFFFFFFFFFFFFFFLL, (const char *)v221[3]);
  }

  BOOL v165 = *((_BYTE *)v119 + 473) & 0xFE | *((_BYTE *)v245 + 24);
  *((_BYTE *)v119 + 473) = v165;
  uint64_t v166 = v165 & 0xFD | (2 * *((_BYTE *)p_type + 24));
  *((_BYTE *)v119 + 473) = v166;
  BOOL v167 = v166 & 0xFB | (4 * *((_BYTE *)v237 + 24));
  *((_BYTE *)v119 + 473) = v167;
  *((_BYTE *)v119 + 473) = v167 & 0xF7 | (8 * *((_BYTE *)v233 + 24));
LABEL_348:
  BOOL v168 = (void *)v217[3];
  if (v168)
  {
    free(v168);
    v217[3] = 0LL;
  }

          if (v241) {
            free(v241);
          }
LABEL_413:
          os_log_type_t v131 = v382;
          if ((*((_BYTE *)v378 + 109) & 0x40) != 0) {
            goto LABEL_414;
          }
          goto LABEL_331;
        }

        v382->flow_duration_milliseconds = v239 - v225;
LABEL_330:
        if ((*((_BYTE *)v226 + 109) & 0x40) != 0) {
          goto LABEL_414;
        }
        goto LABEL_331;
      }

            if (v277) {
              free(v277);
            }
            uint64_t v46 = 0;
            goto LABEL_56;
          }

          int v173 = (char *)__nw_create_backtrace_string();
          logc = (os_log_s *)__nwlog_obj();
          typea = v330[0];
          uint64_t v179 = os_log_type_enabled(logc, (os_log_type_t)v330[0]);
          if (!v173)
          {
            if (!v179) {
              goto LABEL_346;
            }
            uint64_t v222 = v281->identifier->name;
            if (!v222) {
              uint64_t v222 = "invalid";
            }
            *(_DWORD *)unsigned int v323 = 136446722;
            *(void *)&v323[4] = "__nw_protocol_get_input_frames";
            *(_WORD *)&v323[12] = 2082;
            *(void *)&v323[14] = v222;
            *(_WORD *)&v323[22] = 2048;
            *(void *)uint64_t v324 = v281;
            __int128 v161 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
            uint64_t v217 = logc;
            int v218 = typea;
            goto LABEL_344;
          }

          if (!v179)
          {
LABEL_286:
            free(v173);
            goto LABEL_346;
          }

          BOOL v180 = v281->identifier->name;
          if (!v180) {
            BOOL v180 = "invalid";
          }
          *(_DWORD *)unsigned int v323 = 136446978;
          *(void *)&v323[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&v323[12] = 2082;
          *(void *)&v323[14] = v180;
          *(_WORD *)&v323[22] = 2048;
          *(void *)uint64_t v324 = v281;
          *(_WORD *)&v324[8] = 2082;
          *(void *)&v324[10] = v173;
          int v175 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s";
          int v176 = logc;
          int v177 = typea;
          int v178 = 42;
LABEL_285:
          _os_log_impl(&dword_181A5C000, v176, v177, v175, v323, v178);
          goto LABEL_286;
        }

        __nwlog_obj();
        *(_DWORD *)unsigned int v323 = 136446210;
        *(void *)&v323[4] = "__nw_protocol_get_input_frames";
        uint64_t v158 = (const char *)_os_log_send_and_compose_impl();
        v330[0] = 16;
        v321[0] = OS_LOG_TYPE_DEFAULT;
        unsigned int v277 = (char *)v158;
        if (v330[0] == 17)
        {
          int v159 = (os_log_s *)__nwlog_obj();
          int v160 = v330[0];
          int log = v159;
          if (!os_log_type_enabled(v159, (os_log_type_t)v330[0])) {
            goto LABEL_346;
          }
          *(_DWORD *)unsigned int v323 = 136446210;
          *(void *)&v323[4] = "__nw_protocol_get_input_frames";
          __int128 v161 = "%{public}s called with null return_array";
        }

        else
        {
          if (v321[0])
          {
            int v173 = (char *)__nw_create_backtrace_string();
            logb = (os_log_s *)__nwlog_obj();
            __int128 type = v330[0];
            int v174 = os_log_type_enabled(logb, (os_log_type_t)v330[0]);
            if (!v173)
            {
              if (!v174) {
                goto LABEL_346;
              }
              *(_DWORD *)unsigned int v323 = 136446210;
              *(void *)&v323[4] = "__nw_protocol_get_input_frames";
              __int128 v161 = "%{public}s called with null return_array, no backtrace";
              uint64_t v217 = logb;
              int v218 = type;
              int v219 = 12;
              goto LABEL_345;
            }

            if (!v174) {
              goto LABEL_286;
            }
            *(_DWORD *)unsigned int v323 = 136446466;
            *(void *)&v323[4] = "__nw_protocol_get_input_frames";
            *(_WORD *)&v323[12] = 2082;
            *(void *)&v323[14] = v173;
            int v175 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
            int v176 = logb;
            int v177 = type;
            int v178 = 22;
            goto LABEL_285;
          }

          unsigned int v216 = (os_log_s *)__nwlog_obj();
          int v160 = v330[0];
          int log = v216;
          if (!os_log_type_enabled(v216, (os_log_type_t)v330[0])) {
            goto LABEL_346;
          }
          *(_DWORD *)unsigned int v323 = 136446210;
          *(void *)&v323[4] = "__nw_protocol_get_input_frames";
          __int128 v161 = "%{public}s called with null return_array, backtrace limit exceeded";
        }

        uint64_t v217 = log;
        int v218 = v160;
        int v219 = 12;
LABEL_345:
        _os_log_impl(&dword_181A5C000, v217, v218, v161, v323, v219);
        goto LABEL_346;
      }

      *(_DWORD *)unsigned int v323 = 136446466;
      *(void *)&v323[4] = "nw_protocol_test_get_input_frames";
      *(_WORD *)&v323[12] = 2082;
      *(void *)&v323[14] = a1 + 2;
      BOOL v34 = "%{public}s %{public}s Disconnect on input enabled";
    }

    _os_log_impl(&dword_181A5C000, v33, OS_LOG_TYPE_DEBUG, v34, v323, 0x16u);
    goto LABEL_37;
  }

  BOOL v21 = malloc(0xAuLL);
  if (v21)
  {
    unsigned int v22 = (uint64_t)v21;
  }

  else
  {
    os_log_type_t v151 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v151, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "strict_malloc";
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = 10LL;
    int v152 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v152);
    if ((_DWORD)result) {
      goto LABEL_479;
    }
    free(v152);
    unsigned int v22 = 0LL;
  }

  os_log_type_t v23 = nw_frame_create(0, v22, 10, (uint64_t)__nw_frame_malloc_finalizer, 0LL);
  nw_frame_set_buffer_used_malloc(v23, 1);
  *(void *)(v23 + 32) = 0LL;
  uint32_t v24 = a6->tqh_last;
  *(void *)(v23 + 40) = v24;
  char *v24 = (nw_frame *)v23;
  a6->tqh_last = (nw_frame **)(v23 + 32);
  uint64_t v25 = malloc(0xAuLL);
  if (v25)
  {
    int v26 = (uint64_t)v25;
LABEL_25:
    uint64_t v27 = nw_frame_create(0, v26, 10, (uint64_t)__nw_frame_malloc_finalizer, 0LL);
    nw_frame_set_buffer_used_malloc(v27, 1);
    *(void *)(v27 + 32) = 0LL;
    uint64_t v28 = a6->tqh_last;
    *(void *)(v27 + 40) = v28;
    char *v28 = (nw_frame *)v27;
    a6->tqh_last = (nw_frame **)(v27 + 32);
    uint64_t v29 = nw_frame_create(0, 0LL, 0, (uint64_t)__nw_frame_malloc_finalizer, 0LL);
    *(void *)(v29 + 32) = 0LL;
    os_log_type_t v30 = a6->tqh_last;
    *(void *)(v29 + 40) = v30;
    char *v30 = (nw_frame *)v29;
    a6->tqh_last = (nw_frame **)(v29 + 32);
    return 3LL;
  }

  uint64_t v153 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v153, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  *(void *)&uint8_t buf[4] = "strict_malloc";
  *(_WORD *)&_BYTE buf[12] = 2048;
  *(void *)&buf[14] = 10LL;
  int v154 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v154);
  if (!(_DWORD)result)
  {
    free(v154);
    int v26 = 0LL;
    goto LABEL_25;
  }

uint64_t ___ZL35nw_protocol_http1_add_input_handlerP11nw_protocolS0__block_invoke(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    uint64_t result = nw_protocol_options_is_tls(a2);
    if ((_DWORD)result) {
      *(_BYTE *)(*(void *)(a1 + 40) + 376LL) |= 2u;
    }
  }

  else
  {
    uint64_t result = nw_protocol_options_get_protocol_handle(a2);
    if (result == *(void *)(a1 + 40)) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    }
  }

  return result;
}

void ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke(uint64_t a1, void *a2, int a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  switch(a3)
  {
    case 0:
      id outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v60[0] = MEMORY[0x1895F87A8];
        v60[1] = 0x40000000LL;
        v60[2] = ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_2;
        v60[3] = &__block_descriptor_tmp_79;
        v60[4] = *(void *)(a1 + 32);
        id v8 = v6;
        int v9 = v60;
        _nw_http_request_access_method((uint64_t)v8, v9);
      }

      if (!v7) {
        goto LABEL_31;
      }
      id v10 = v7;
      int status_code = _nw_http_response_get_status_code();

      if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) != 0) {
        goto LABEL_30;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v12 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_30;
      }
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = v13 + 74;
      uint64_t v15 = *(void *)(v13 + 256);
      int v16 = *(_DWORD *)(*(void *)(v13 + 248) + 372LL);
      if (v15) {
        LODWORD(v15) = *(_DWORD *)(v15 + 860);
      }
      int v17 = *(_DWORD *)(v13 + 424);
      *(_DWORD *)buf = 136447746;
      uint64_t v62 = "nw_protocol_http1_connected_block_invoke";
      __int16 v63 = 2082;
      uint64_t v64 = v14;
      __int16 v65 = 2080;
      uint64_t v66 = " ";
      __int16 v67 = 1024;
      int v68 = v16;
      __int16 v69 = 1024;
      int v70 = v15;
      __int16 v71 = 1024;
      int v72 = v17;
      __int16 v73 = 1024;
      LODWORD(v74) = status_code;
      uint64_t v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> sending response header {status=%hu}";
      goto LABEL_29;
    case 1:
      uint64_t outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) != 0) {
        return;
      }
      uint64_t v20 = outbound_body_size;
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      BOOL v21 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = v22 + 74;
      uint64_t v24 = *(void *)(v22 + 256);
      int v25 = *(_DWORD *)(*(void *)(v22 + 248) + 372LL);
      if (v24) {
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      }
      int v26 = *(_DWORD *)(v22 + 424);
      *(_DWORD *)buf = 136447746;
      uint64_t v62 = "nw_protocol_http1_connected_block_invoke";
      __int16 v63 = 2082;
      uint64_t v64 = v23;
      __int16 v65 = 2080;
      uint64_t v66 = " ";
      __int16 v67 = 1024;
      int v68 = v25;
      __int16 v69 = 1024;
      int v70 = v24;
      __int16 v71 = 1024;
      int v72 = v26;
      __int16 v73 = 2048;
      uint64_t v74 = v20;
      uint64_t v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> finished sending {body_bytes=%llu}";
      goto LABEL_42;
    case 2:
      id outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v28 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v59[0] = MEMORY[0x1895F87A8];
        v59[1] = 0x40000000LL;
        v59[2] = ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_80;
        v59[3] = &__block_descriptor_tmp_81;
        v59[4] = *(void *)(a1 + 32);
        id v29 = v6;
        os_log_type_t v30 = v59;
        _nw_http_request_access_method((uint64_t)v29, v30);
      }

      if (v28)
      {
        id v10 = v28;
        int v31 = _nw_http_response_get_status_code();

        if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          uint64_t v12 = (os_log_s *)ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = *(void *)(a1 + 32);
            uint64_t v33 = v32 + 74;
            uint64_t v34 = *(void *)(v32 + 256);
            int v35 = *(_DWORD *)(*(void *)(v32 + 248) + 372LL);
            if (v34) {
              LODWORD(v34) = *(_DWORD *)(v34 + 860);
            }
            int v36 = *(_DWORD *)(v32 + 424);
            *(_DWORD *)buf = 136447746;
            uint64_t v62 = "nw_protocol_http1_connected_block_invoke";
            __int16 v63 = 2082;
            uint64_t v64 = v33;
            __int16 v65 = 2080;
            uint64_t v66 = " ";
            __int16 v67 = 1024;
            int v68 = v35;
            __int16 v69 = 1024;
            int v70 = v34;
            __int16 v71 = 1024;
            int v72 = v36;
            __int16 v73 = 1024;
            LODWORD(v74) = v31;
            uint64_t v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> receiving response header {status=%hu}";
LABEL_29:
            _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_INFO, v18, buf, 0x38u);
          }
        }

void ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    uint64_t v4 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v5 + 74;
      uint64_t v7 = *(void *)(v5 + 256);
      int v8 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      }
      int v9 = *(_DWORD *)(v5 + 424);
      int v10 = 136447746;
      uint64_t v11 = "nw_protocol_http1_connected_block_invoke_2";
      __int16 v12 = 2082;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      uint64_t v15 = " ";
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> sending request header {method=%{public}s}",  (uint8_t *)&v10,  0x3Cu);
    }
  }

void ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_80(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    uint64_t v4 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v5 + 74;
      uint64_t v7 = *(void *)(v5 + 256);
      int v8 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      }
      int v9 = *(_DWORD *)(v5 + 424);
      int v10 = 136447746;
      uint64_t v11 = "nw_protocol_http1_connected_block_invoke";
      __int16 v12 = 2082;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      uint64_t v15 = " ";
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> receiving request header {method=%{public}s}",  (uint8_t *)&v10,  0x3Cu);
    }
  }

void ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_82(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  int start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  uint64_t start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  uint64_t end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_uint64_t start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_uint64_t end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_uint64_t start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_uint64_t end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  uint64_t outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  uint64_t inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  if ((*(_BYTE *)(*(void *)(a1 + 40) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    __int16 v12 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = a3;
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 256);
      if (v14) {
        int v34 = *(_DWORD *)(v14 + 860);
      }
      else {
        int v34 = 0;
      }
      uint64_t v15 = inbound_message_end_time;
      else {
        __int16 v16 = off_189BC6838[start_reason - 1];
      }
      int v35 = v16;
      int v37 = *(_DWORD *)(*(void *)(v13 + 248) + 372LL);
      int v17 = *(_DWORD *)(v13 + 424);
      int v18 = -1;
      if (start_time && end_time)
      {
        unint64_t v19 = nw_delta_nanos(start_time, end_time);
        uint64_t v15 = inbound_message_end_time;
        if (v19 > 0xF423FFFFFFFFFLL) {
          int v18 = -1;
        }
        else {
          int v18 = v19 / 0xF4240;
        }
      }

      LODWORD(v20) = -1;
      int v38 = v17;
      if (start_time)
      {
        if (outbound_message_start_time)
        {
          unint64_t v21 = nw_delta_nanos(start_time, outbound_message_start_time);
          uint64_t v15 = inbound_message_end_time;
          unint64_t v20 = v21 / 0xF4240;
          if (v21 > 0xF423FFFFFFFFFLL) {
            LODWORD(v20) = -1;
          }
        }
      }

      int v22 = -1;
      int v36 = v20;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        unint64_t v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        uint64_t v15 = inbound_message_end_time;
        if (v23 > 0xF423FFFFFFFFFLL) {
          int v22 = -1;
        }
        else {
          int v22 = v23 / 0xF4240;
        }
      }

      int v24 = v18;
      uint64_t v25 = v13 + 74;
      int v26 = -1;
      if (start_time)
      {
        uint64_t v28 = outbound_body_size;
        uint64_t v27 = inbound_body_size;
        if (inbound_message_start_time)
        {
          unint64_t v29 = nw_delta_nanos(start_time, inbound_message_start_time);
          uint64_t v15 = inbound_message_end_time;
          if (v29 > 0xF423FFFFFFFFFLL) {
            int v26 = -1;
          }
          else {
            int v26 = v29 / 0xF4240;
          }
        }

        LODWORD(v30) = -1;
        if (inbound_message_start_time) {
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t v28 = outbound_body_size;
        uint64_t v27 = inbound_body_size;
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
        {
LABEL_31:
          uint64_t v31 = a2;
          int v32 = v34;
          if (v15)
          {
            unint64_t v33 = nw_delta_nanos(inbound_message_start_time, v15);
            unint64_t v30 = v33 / 0xF4240;
            if (v33 > 0xF423FFFFFFFFFLL) {
              LODWORD(v30) = -1;
            }
          }

          goto LABEL_36;
        }
      }

      uint64_t v31 = a2;
      int v32 = v34;
LABEL_36:
      *(_DWORD *)buf = 136450050;
      int v44 = "nw_protocol_http1_connected_block_invoke";
      __int16 v45 = 2082;
      uint64_t v46 = v25;
      __int16 v47 = 2080;
      uint64_t v48 = " ";
      __int16 v49 = 1024;
      int v50 = v37;
      __int16 v51 = 1024;
      int v52 = v32;
      __int16 v53 = 1024;
      int v54 = v38;
      __int16 v55 = 2080;
      char v56 = v35;
      __int16 v57 = 1024;
      int v58 = v24;
      __int16 v59 = 2082;
      uint64_t v60 = v31;
      __int16 v61 = 1024;
      int v62 = v39;
      __int16 v63 = 1024;
      int v64 = v36;
      __int16 v65 = 1024;
      int v66 = v22;
      __int16 v67 = 1024;
      int v68 = v26;
      __int16 v69 = 1024;
      int v70 = v30;
      __int16 v71 = 2048;
      uint64_t v72 = v28;
      __int16 v73 = 2048;
      uint64_t v74 = v27;
      _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u:c%u:s%u> transaction summary {start_reason=%s, duration_ms=%d, request_method= %{public}s, response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_d uration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}",  buf,  0x7Eu);
    }
  }

uint64_t ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_84(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(unsigned __int16 *)(a1 + 40));
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke(uint64_t a1, void *a2, int a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  switch(a3)
  {
    case 0:
      id outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v60[0] = MEMORY[0x1895F87A8];
        v60[1] = 0x40000000LL;
        v60[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_2;
        v60[3] = &__block_descriptor_tmp_19_41132;
        v60[4] = *(void *)(a1 + 32);
        id v8 = v6;
        int v9 = v60;
        _nw_http_request_access_method((uint64_t)v8, v9);
      }

      if (!v7) {
        goto LABEL_31;
      }
      id v10 = v7;
      int status_code = _nw_http_response_get_status_code();

      if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) != 0) {
        goto LABEL_30;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      __int16 v12 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_30;
      }
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = v13 + 74;
      uint64_t v15 = *(void *)(v13 + 256);
      int v16 = *(_DWORD *)(*(void *)(v13 + 248) + 372LL);
      if (v15) {
        LODWORD(v15) = *(_DWORD *)(v15 + 860);
      }
      int v17 = *(_DWORD *)(v13 + 424);
      *(_DWORD *)buf = 136447746;
      int v62 = "nw_protocol_http1_connect_block_invoke";
      __int16 v63 = 2082;
      uint64_t v64 = v14;
      __int16 v65 = 2080;
      int v66 = " ";
      __int16 v67 = 1024;
      int v68 = v16;
      __int16 v69 = 1024;
      int v70 = v15;
      __int16 v71 = 1024;
      int v72 = v17;
      __int16 v73 = 1024;
      LODWORD(v74) = status_code;
      int v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> sending response header {status=%hu}";
      goto LABEL_29;
    case 1:
      uint64_t outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) != 0) {
        return;
      }
      uint64_t v20 = outbound_body_size;
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      unint64_t v21 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = v22 + 74;
      uint64_t v24 = *(void *)(v22 + 256);
      int v25 = *(_DWORD *)(*(void *)(v22 + 248) + 372LL);
      if (v24) {
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      }
      int v26 = *(_DWORD *)(v22 + 424);
      *(_DWORD *)buf = 136447746;
      int v62 = "nw_protocol_http1_connect_block_invoke";
      __int16 v63 = 2082;
      uint64_t v64 = v23;
      __int16 v65 = 2080;
      int v66 = " ";
      __int16 v67 = 1024;
      int v68 = v25;
      __int16 v69 = 1024;
      int v70 = v24;
      __int16 v71 = 1024;
      int v72 = v26;
      __int16 v73 = 2048;
      uint64_t v74 = v20;
      uint64_t v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> finished sending {body_bytes=%llu}";
      goto LABEL_42;
    case 2:
      id outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v28 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v59[0] = MEMORY[0x1895F87A8];
        v59[1] = 0x40000000LL;
        v59[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_20;
        v59[3] = &__block_descriptor_tmp_21_41135;
        v59[4] = *(void *)(a1 + 32);
        id v29 = v6;
        unint64_t v30 = v59;
        _nw_http_request_access_method((uint64_t)v29, v30);
      }

      if (v28)
      {
        id v10 = v28;
        int v31 = _nw_http_response_get_status_code();

        if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          __int16 v12 = (os_log_s *)ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = *(void *)(a1 + 32);
            uint64_t v33 = v32 + 74;
            uint64_t v34 = *(void *)(v32 + 256);
            int v35 = *(_DWORD *)(*(void *)(v32 + 248) + 372LL);
            if (v34) {
              LODWORD(v34) = *(_DWORD *)(v34 + 860);
            }
            int v36 = *(_DWORD *)(v32 + 424);
            *(_DWORD *)buf = 136447746;
            int v62 = "nw_protocol_http1_connect_block_invoke";
            __int16 v63 = 2082;
            uint64_t v64 = v33;
            __int16 v65 = 2080;
            int v66 = " ";
            __int16 v67 = 1024;
            int v68 = v35;
            __int16 v69 = 1024;
            int v70 = v34;
            __int16 v71 = 1024;
            int v72 = v36;
            __int16 v73 = 1024;
            LODWORD(v74) = v31;
            int v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> receiving response header {status=%hu}";
LABEL_29:
            _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_INFO, v18, buf, 0x38u);
          }
        }

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_29(uint64_t a1, void *a2, int a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  switch(a3)
  {
    case 0:
      id outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v60[0] = MEMORY[0x1895F87A8];
        v60[1] = 0x40000000LL;
        v60[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_2_30;
        v60[3] = &__block_descriptor_tmp_31_41121;
        v60[4] = *(void *)(a1 + 32);
        id v8 = v6;
        int v9 = v60;
        _nw_http_request_access_method((uint64_t)v8, v9);
      }

      if (!v7) {
        goto LABEL_31;
      }
      id v10 = v7;
      int status_code = _nw_http_response_get_status_code();

      if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) != 0) {
        goto LABEL_30;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      __int16 v12 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_30;
      }
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = v13 + 74;
      uint64_t v15 = *(void *)(v13 + 256);
      int v16 = *(_DWORD *)(*(void *)(v13 + 248) + 372LL);
      if (v15) {
        LODWORD(v15) = *(_DWORD *)(v15 + 860);
      }
      int v17 = *(_DWORD *)(v13 + 424);
      *(_DWORD *)buf = 136447746;
      int v62 = "nw_protocol_http1_connect_block_invoke";
      __int16 v63 = 2082;
      uint64_t v64 = v14;
      __int16 v65 = 2080;
      int v66 = " ";
      __int16 v67 = 1024;
      int v68 = v16;
      __int16 v69 = 1024;
      int v70 = v15;
      __int16 v71 = 1024;
      int v72 = v17;
      __int16 v73 = 1024;
      LODWORD(v74) = status_code;
      int v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> sending response header {status=%hu}";
      goto LABEL_29;
    case 1:
      uint64_t outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) != 0) {
        return;
      }
      uint64_t v20 = outbound_body_size;
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      unint64_t v21 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = v22 + 74;
      uint64_t v24 = *(void *)(v22 + 256);
      int v25 = *(_DWORD *)(*(void *)(v22 + 248) + 372LL);
      if (v24) {
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      }
      int v26 = *(_DWORD *)(v22 + 424);
      *(_DWORD *)buf = 136447746;
      int v62 = "nw_protocol_http1_connect_block_invoke";
      __int16 v63 = 2082;
      uint64_t v64 = v23;
      __int16 v65 = 2080;
      int v66 = " ";
      __int16 v67 = 1024;
      int v68 = v25;
      __int16 v69 = 1024;
      int v70 = v24;
      __int16 v71 = 1024;
      int v72 = v26;
      __int16 v73 = 2048;
      uint64_t v74 = v20;
      uint64_t v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> finished sending {body_bytes=%llu}";
      goto LABEL_42;
    case 2:
      id outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v28 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v59[0] = MEMORY[0x1895F87A8];
        v59[1] = 0x40000000LL;
        v59[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_32;
        v59[3] = &__block_descriptor_tmp_33_41124;
        v59[4] = *(void *)(a1 + 32);
        id v29 = v6;
        unint64_t v30 = v59;
        _nw_http_request_access_method((uint64_t)v29, v30);
      }

      if (v28)
      {
        id v10 = v28;
        int v31 = _nw_http_response_get_status_code();

        if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          __int16 v12 = (os_log_s *)ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = *(void *)(a1 + 32);
            uint64_t v33 = v32 + 74;
            uint64_t v34 = *(void *)(v32 + 256);
            int v35 = *(_DWORD *)(*(void *)(v32 + 248) + 372LL);
            if (v34) {
              LODWORD(v34) = *(_DWORD *)(v34 + 860);
            }
            int v36 = *(_DWORD *)(v32 + 424);
            *(_DWORD *)buf = 136447746;
            int v62 = "nw_protocol_http1_connect_block_invoke";
            __int16 v63 = 2082;
            uint64_t v64 = v33;
            __int16 v65 = 2080;
            int v66 = " ";
            __int16 v67 = 1024;
            int v68 = v35;
            __int16 v69 = 1024;
            int v70 = v34;
            __int16 v71 = 1024;
            int v72 = v36;
            __int16 v73 = 1024;
            LODWORD(v74) = v31;
            int v18 = "%{public}s %{public}s%s<i%u:c%u:s%u> receiving response header {status=%hu}";
LABEL_29:
            _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_INFO, v18, buf, 0x38u);
          }
        }

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_2_30(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    uint64_t v4 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v5 + 74;
      uint64_t v7 = *(void *)(v5 + 256);
      int v8 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      }
      int v9 = *(_DWORD *)(v5 + 424);
      int v10 = 136447746;
      uint64_t v11 = "nw_protocol_http1_connect_block_invoke_2";
      __int16 v12 = 2082;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      uint64_t v15 = " ";
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> sending request header {method=%{public}s}",  (uint8_t *)&v10,  0x3Cu);
    }
  }

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_32(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    uint64_t v4 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v5 + 74;
      uint64_t v7 = *(void *)(v5 + 256);
      int v8 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      }
      int v9 = *(_DWORD *)(v5 + 424);
      int v10 = 136447746;
      uint64_t v11 = "nw_protocol_http1_connect_block_invoke";
      __int16 v12 = 2082;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      uint64_t v15 = " ";
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> receiving request header {method=%{public}s}",  (uint8_t *)&v10,  0x3Cu);
    }
  }

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_34(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  int start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  uint64_t start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  uint64_t end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_uint64_t start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_uint64_t end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_uint64_t start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_uint64_t end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  uint64_t outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  uint64_t inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  if ((*(_BYTE *)(*(void *)(a1 + 40) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    __int16 v12 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = a3;
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 256);
      if (v14) {
        int v34 = *(_DWORD *)(v14 + 860);
      }
      else {
        int v34 = 0;
      }
      uint64_t v15 = inbound_message_end_time;
      else {
        __int16 v16 = off_189BC6838[start_reason - 1];
      }
      int v35 = v16;
      int v37 = *(_DWORD *)(*(void *)(v13 + 248) + 372LL);
      int v17 = *(_DWORD *)(v13 + 424);
      int v18 = -1;
      if (start_time && end_time)
      {
        unint64_t v19 = nw_delta_nanos(start_time, end_time);
        uint64_t v15 = inbound_message_end_time;
        if (v19 > 0xF423FFFFFFFFFLL) {
          int v18 = -1;
        }
        else {
          int v18 = v19 / 0xF4240;
        }
      }

      LODWORD(v20) = -1;
      int v38 = v17;
      if (start_time)
      {
        if (outbound_message_start_time)
        {
          unint64_t v21 = nw_delta_nanos(start_time, outbound_message_start_time);
          uint64_t v15 = inbound_message_end_time;
          unint64_t v20 = v21 / 0xF4240;
          if (v21 > 0xF423FFFFFFFFFLL) {
            LODWORD(v20) = -1;
          }
        }
      }

      int v22 = -1;
      int v36 = v20;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        unint64_t v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        uint64_t v15 = inbound_message_end_time;
        if (v23 > 0xF423FFFFFFFFFLL) {
          int v22 = -1;
        }
        else {
          int v22 = v23 / 0xF4240;
        }
      }

      int v24 = v18;
      uint64_t v25 = v13 + 74;
      int v26 = -1;
      if (start_time)
      {
        uint64_t v28 = outbound_body_size;
        uint64_t v27 = inbound_body_size;
        if (inbound_message_start_time)
        {
          unint64_t v29 = nw_delta_nanos(start_time, inbound_message_start_time);
          uint64_t v15 = inbound_message_end_time;
          if (v29 > 0xF423FFFFFFFFFLL) {
            int v26 = -1;
          }
          else {
            int v26 = v29 / 0xF4240;
          }
        }

        LODWORD(v30) = -1;
        if (inbound_message_start_time) {
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t v28 = outbound_body_size;
        uint64_t v27 = inbound_body_size;
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
        {
LABEL_31:
          uint64_t v31 = a2;
          int v32 = v34;
          if (v15)
          {
            unint64_t v33 = nw_delta_nanos(inbound_message_start_time, v15);
            unint64_t v30 = v33 / 0xF4240;
            if (v33 > 0xF423FFFFFFFFFLL) {
              LODWORD(v30) = -1;
            }
          }

          goto LABEL_36;
        }
      }

      uint64_t v31 = a2;
      int v32 = v34;
LABEL_36:
      *(_DWORD *)buf = 136450050;
      int v44 = "nw_protocol_http1_connect_block_invoke";
      __int16 v45 = 2082;
      uint64_t v46 = v25;
      __int16 v47 = 2080;
      uint64_t v48 = " ";
      __int16 v49 = 1024;
      int v50 = v37;
      __int16 v51 = 1024;
      int v52 = v32;
      __int16 v53 = 1024;
      int v54 = v38;
      __int16 v55 = 2080;
      char v56 = v35;
      __int16 v57 = 1024;
      int v58 = v24;
      __int16 v59 = 2082;
      uint64_t v60 = v31;
      __int16 v61 = 1024;
      int v62 = v39;
      __int16 v63 = 1024;
      int v64 = v36;
      __int16 v65 = 1024;
      int v66 = v22;
      __int16 v67 = 1024;
      int v68 = v26;
      __int16 v69 = 1024;
      int v70 = v30;
      __int16 v71 = 2048;
      uint64_t v72 = v28;
      __int16 v73 = 2048;
      uint64_t v74 = v27;
      _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u:c%u:s%u> transaction summary {start_reason=%s, duration_ms=%d, request_method= %{public}s, response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_d uration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}",  buf,  0x7Eu);
    }
  }

uint64_t ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_36(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(unsigned __int16 *)(a1 + 40));
}

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    uint64_t v4 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v5 + 74;
      uint64_t v7 = *(void *)(v5 + 256);
      int v8 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      }
      int v9 = *(_DWORD *)(v5 + 424);
      int v10 = 136447746;
      uint64_t v11 = "nw_protocol_http1_connect_block_invoke_2";
      __int16 v12 = 2082;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      uint64_t v15 = " ";
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> sending request header {method=%{public}s}",  (uint8_t *)&v10,  0x3Cu);
    }
  }

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_20(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    uint64_t v4 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v5 + 74;
      uint64_t v7 = *(void *)(v5 + 256);
      int v8 = *(_DWORD *)(*(void *)(v5 + 248) + 372LL);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 860);
      }
      int v9 = *(_DWORD *)(v5 + 424);
      int v10 = 136447746;
      uint64_t v11 = "nw_protocol_http1_connect_block_invoke";
      __int16 v12 = 2082;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      uint64_t v15 = " ";
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> receiving request header {method=%{public}s}",  (uint8_t *)&v10,  0x3Cu);
    }
  }

void ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_22(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  int start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  uint64_t start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  uint64_t end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_uint64_t start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_uint64_t end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_uint64_t start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_uint64_t end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  uint64_t outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  uint64_t inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  if ((*(_BYTE *)(*(void *)(a1 + 40) + 158LL) & 1) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    __int16 v12 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = a3;
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 256);
      if (v14) {
        int v34 = *(_DWORD *)(v14 + 860);
      }
      else {
        int v34 = 0;
      }
      uint64_t v15 = inbound_message_end_time;
      else {
        __int16 v16 = off_189BC6838[start_reason - 1];
      }
      int v35 = v16;
      int v37 = *(_DWORD *)(*(void *)(v13 + 248) + 372LL);
      int v17 = *(_DWORD *)(v13 + 424);
      int v18 = -1;
      if (start_time && end_time)
      {
        unint64_t v19 = nw_delta_nanos(start_time, end_time);
        uint64_t v15 = inbound_message_end_time;
        if (v19 > 0xF423FFFFFFFFFLL) {
          int v18 = -1;
        }
        else {
          int v18 = v19 / 0xF4240;
        }
      }

      LODWORD(v20) = -1;
      int v38 = v17;
      if (start_time)
      {
        if (outbound_message_start_time)
        {
          unint64_t v21 = nw_delta_nanos(start_time, outbound_message_start_time);
          uint64_t v15 = inbound_message_end_time;
          unint64_t v20 = v21 / 0xF4240;
          if (v21 > 0xF423FFFFFFFFFLL) {
            LODWORD(v20) = -1;
          }
        }
      }

      int v22 = -1;
      int v36 = v20;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        unint64_t v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        uint64_t v15 = inbound_message_end_time;
        if (v23 > 0xF423FFFFFFFFFLL) {
          int v22 = -1;
        }
        else {
          int v22 = v23 / 0xF4240;
        }
      }

      int v24 = v18;
      uint64_t v25 = v13 + 74;
      int v26 = -1;
      if (start_time)
      {
        uint64_t v28 = outbound_body_size;
        uint64_t v27 = inbound_body_size;
        if (inbound_message_start_time)
        {
          unint64_t v29 = nw_delta_nanos(start_time, inbound_message_start_time);
          uint64_t v15 = inbound_message_end_time;
          if (v29 > 0xF423FFFFFFFFFLL) {
            int v26 = -1;
          }
          else {
            int v26 = v29 / 0xF4240;
          }
        }

        LODWORD(v30) = -1;
        if (inbound_message_start_time) {
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t v28 = outbound_body_size;
        uint64_t v27 = inbound_body_size;
        LODWORD(v30) = -1;
        if (inbound_message_start_time)
        {
LABEL_31:
          uint64_t v31 = a2;
          int v32 = v34;
          if (v15)
          {
            unint64_t v33 = nw_delta_nanos(inbound_message_start_time, v15);
            unint64_t v30 = v33 / 0xF4240;
            if (v33 > 0xF423FFFFFFFFFLL) {
              LODWORD(v30) = -1;
            }
          }

          goto LABEL_36;
        }
      }

      uint64_t v31 = a2;
      int v32 = v34;
LABEL_36:
      *(_DWORD *)buf = 136450050;
      int v44 = "nw_protocol_http1_connect_block_invoke";
      __int16 v45 = 2082;
      uint64_t v46 = v25;
      __int16 v47 = 2080;
      uint64_t v48 = " ";
      __int16 v49 = 1024;
      int v50 = v37;
      __int16 v51 = 1024;
      int v52 = v32;
      __int16 v53 = 1024;
      int v54 = v38;
      __int16 v55 = 2080;
      char v56 = v35;
      __int16 v57 = 1024;
      int v58 = v24;
      __int16 v59 = 2082;
      uint64_t v60 = v31;
      __int16 v61 = 1024;
      int v62 = v39;
      __int16 v63 = 1024;
      int v64 = v36;
      __int16 v65 = 1024;
      int v66 = v22;
      __int16 v67 = 1024;
      int v68 = v26;
      __int16 v69 = 1024;
      int v70 = v30;
      __int16 v71 = 2048;
      uint64_t v72 = v28;
      __int16 v73 = 2048;
      uint64_t v74 = v27;
      _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u:c%u:s%u> transaction summary {start_reason=%s, duration_ms=%d, request_method= %{public}s, response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_d uration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}",  buf,  0x7Eu);
    }
  }

uint64_t ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_25(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(unsigned __int16 *)(a1 + 40));
}

uint64_t nw_protocol_copy_replicate_definition()
{
  if (nw_protocol_copy_replicate_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_replicate_definition::onceToken, &__block_literal_global_41150);
  }
  return nw_protocol_copy_replicate_definition::definition;
}

void __nw_protocol_copy_replicate_definition_block_invoke()
{
  nw_protocol_copy_replicate_definition::definition = (uint64_t)nw_protocol_definition_create_with_identifier((__int128 *)&g_replicate_protocol_identifier);
  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_replicate_definition::definition,  (uint64_t)nw_replicate_allocate_options,  (uint64_t)nw_replicate_copy_options,  (uint64_t)nw_replicate_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_replicate_definition::definition,  (uint64_t)nw_replicate_option_is_equal);
  nw_protocol_definition_set_metadata_allocator( (void *)nw_protocol_copy_replicate_definition::definition,  (uint64_t)nw_replicate_allocate_metadata,  (uint64_t)nw_replicate_deallocate_metadata);
}

uint64_t nw_replicate_allocate_options(nw_protocol_definition *a1)
{
  uint64_t v1 = nw_calloc_type<nw_protocol_replicate_options>();
  *(void *)(v1 + 144) = nw_array_create();
  return v1;
}

uint64_t nw_replicate_copy_options(nw_protocol_definition *a1, _OWORD *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    uint64_t v3 = nw_calloc_type<nw_protocol_replicate_options>();
    *(_OWORD *)uint64_t v3 = *a2;
    __int128 v4 = a2[1];
    __int128 v5 = a2[2];
    __int128 v6 = a2[4];
    *(_OWORD *)(v3 + 4_Block_object_dispose(&STACK[0x338], 8) = a2[3];
    *(_OWORD *)(v3 + 64) = v6;
    *(_OWORD *)(v3 + 16) = v4;
    *(_OWORD *)(v3 + 32) = v5;
    __int128 v8 = a2[7];
    __int128 v7 = a2[8];
    __int128 v9 = a2[6];
    *(_OWORD *)(v3 + 80) = a2[5];
    *(_OWORD *)(v3 + 96) = v9;
    *(_OWORD *)(v3 + 112) = v8;
    *(_OWORD *)(v3 + 12_Block_object_dispose(&STACK[0x338], 8) = v7;
    uint64_t v10 = *((void *)a2 + 18);
    uint64_t v11 = nw_array_create();
    uint64_t v12 = v11;
    if (v10)
    {
      if (v11 == v10) {
        uint64_t v12 = v10;
      }
      else {
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v11 + 16,  *(void ***)(v10 + 16),  *(void ***)(v10 + 24),  (uint64_t)(*(void *)(v10 + 24) - *(void *)(v10 + 16)) >> 3);
      }
    }

    *(void *)(v3 + 144) = v12;
    return v3;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v23 = "nw_replicate_copy_options";
  uint64_t v14 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v14, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_replicate_copy_options";
        int v17 = "%{public}s called with null existing_handle";
LABEL_21:
        _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v23 = "nw_replicate_copy_options";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_replicate_copy_options";
        int v17 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_replicate_copy_options";
        int v17 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
  }

void nw_replicate_deallocate_options(nw_protocol_definition *a1, void *a2)
{
  uint64_t v3 = (void *)a2[18];
  if (v3) {
    os_release(v3);
  }
  free(a2);
}

uint64_t nw_replicate_option_is_equal(nw_protocol_definition *a1, void *a2, void *a3)
{
  if (!a2 || !a3) {
    return a2 == a3;
  }
  if (*a2 == *a3 && a2[1] == a3[1])
  {
    BOOL v3 = a2[2] == a3[2] && a2[3] == a3[3];
    BOOL v4 = v3 && a2[4] == a3[4];
    BOOL v5 = v4 && a2[5] == a3[5];
    BOOL v6 = v5 && a2[6] == a3[6];
    BOOL v7 = v6 && a2[7] == a3[7];
    BOOL v8 = v7 && a2[8] == a3[8];
    if (v8 && a2[9] == a3[9])
    {
      BOOL v10 = a2[10] == a3[10] && a2[11] == a3[11];
      BOOL v11 = v10 && a2[12] == a3[12];
      BOOL v12 = v11 && a2[13] == a3[13];
      BOOL v13 = v12 && a2[14] == a3[14];
      BOOL v14 = v13 && a2[15] == a3[15];
      BOOL v15 = v14 && a2[16] == a3[16];
      if (v15 && a2[17] == a3[17]) {
        return nw_array_is_equal(a2[18], a3[18]);
      }
    }
  }

  return 0LL;
}

BOOL nw_replicate_allocate_metadata(nw_protocol_definition *a1)
{
  uint64_t v1 = calloc(1uLL, 0x18uLL);
  if (v1) {
    goto LABEL_2;
  }
  BOOL v3 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  BOOL v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
LABEL_2:
    v1[4] = 0;
    return (BOOL)v1;
  }

  __break(1u);
  return result;
}

void nw_replicate_deallocate_metadata(nw_protocol_definition *a1, _BYTE *a2)
{
  a2[20] = 1;
  BOOL v3 = (void *)*((void *)a2 + 1);
  if (v3) {
    os_release(v3);
  }
  free(a2);
}

BOOL nw_calloc_type<nw_protocol_replicate_options>()
{
  v0 = calloc(1uLL, 0x98uLL);
  if (v0) {
    return (BOOL)v0;
  }
  uint64_t v2 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  BOOL v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
    return (BOOL)v0;
  }

  __break(1u);
  return result;
}

BOOL ___ZL32nw_protocol_replicate_identifierv_block_invoke()
{
  *(void *)&algn_18C5A3D12[8] = 0LL;
  *(void *)algn_18C5A3D12 = 0LL;
  strcpy((char *)&g_replicate_protocol_identifier, "replicate");
  qword_18C5A3D70 = (uint64_t)nw_protocol_default_input_available;
  unk_18C5A3D78 = nw_protocol_default_output_available;
  qword_18C5A3DF0 = (uint64_t)nw_protocol_default_output_finished;
  unk_18C5A3DF8 = nw_protocol_default_get_output_local;
  qword_18C5A3D40 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_18C5A3D48 = nw_protocol_default_connect;
  qword_18C5A3D60 = (uint64_t)nw_protocol_default_disconnected;
  unk_18C5A3D68 = nw_protocol_default_error;
  qword_18C5A3E30 = (uint64_t)nw_protocol_default_reset;
  unk_18C5A3E38 = nw_protocol_default_input_flush;
  qword_18C5A3DE0 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_18C5A3DE8 = nw_protocol_default_input_finished;
  qword_18C5A3E00 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C5A3E08 = nw_protocol_default_waiting_for_output;
  qword_18C5A3DC0 = (uint64_t)nw_protocol_default_register_notification;
  unk_18C5A3DC8 = nw_protocol_default_unregister_notification;
  qword_18C5A3DD0 = (uint64_t)nw_protocol_default_notify;
  unk_18C5A3DD8 = nw_protocol_default_updated_path;
  qword_18C5A3E20 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_18C5A3E28 = nw_protocol_default_get_message_properties;
  g_replicate_protocol_callbacks = (uint64_t)nw_protocol_replicate_add_input_handler;
  *(void *)algn_18C5A3D38 = nw_protocol_replicate_remove_input_handler;
  qword_18C5A3D50 = (uint64_t)nw_protocol_default_disconnect;
  unk_18C5A3D58 = nw_protocol_replicate_connected;
  qword_18C5A3D80 = (uint64_t)nw_protocol_replicate_get_input_frames;
  unk_18C5A3D88 = nw_protocol_replicate_get_output_frames;
  qword_18C5A3DB0 = (uint64_t)nw_protocol_replicate_get_local_endpoint;
  unk_18C5A3DB8 = nw_protocol_replicate_get_remote_endpoint;
  qword_18C5A3D20 = 0LL;
  qword_18C5A3DA0 = (uint64_t)nw_protocol_replicate_get_parameters;
  unk_18C5A3DA8 = nw_protocol_default_get_path;
  qword_18C5A3D90 = (uint64_t)nw_protocol_replicate_finalize_output_frames;
  unk_18C5A3D98 = nw_protocol_default_link_state;
  qword_18C5A3E10 = (uint64_t)nw_protocol_replicate_copy_info;
  unk_18C5A3E18 = nw_protocol_default_add_listen_handler;
  qword_18C5A3D28 = 0x100000000LL;
  return nw_protocol_register_extended(&g_replicate_protocol_identifier, (uint64_t)nw_protocol_replicate_create);
}

uint64_t nw_protocol_replicate_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      *(_OWORD *)uint64_t handle = *(_OWORD *)a2->flow_id;
      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
      BOOL v4 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_path)(a2);
      if (v4) {
        int nexus_protocol_level = nw_path_get_nexus_protocol_level(v4);
      }
      else {
        int nexus_protocol_level = 4;
      }
      handle[92] = nexus_protocol_level;
      BOOL v6 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_remote_endpoint)(a2);
      if (v6) {
        BOOL v6 = os_retain(v6);
      }
      *((void *)handle + 9) = v6;
      BOOL v7 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_parameters)(a2);
      id v8 = nw_parameters_copy_context(v7);
      if (nw_protocol_copy_replicate_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_replicate_definition::onceToken, &__block_literal_global_41150);
      }
      singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_replicate_definition::definition);
      uint64_t v10 = MEMORY[0x1895F87A8];
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = ___ZL28nw_replicate_create_metadataP11nw_protocolP10nw_context_block_invoke;
      uint64_t v31 = &__block_descriptor_tmp_28_41307;
      int v32 = (os_log_type_t *)handle;
      id v33 = v8;
      nw_protocol_metadata_access_handle((uint64_t)singleton, (uint64_t)buf);
      *((void *)handle + _Block_object_dispose(&STACK[0x338], 8) = singleton;
      if (v8) {
        os_release(v8);
      }
      BOOL v11 = nw_parameters_copy_protocol_options_legacy(v7, (nw_protocol *)handle);
      if (v11)
      {
        BOOL v12 = v11;
        *(void *)os_log_type_t type = 0LL;
        uint64_t v27 = type;
        uint64_t v28 = 0x2000000000LL;
        uint64_t v29 = 0LL;
        *(void *)buf = v10;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = __nw_replicate_options_get_primary_expiration_adjustment_block_invoke;
        uint64_t v31 = &unk_189BBDB80;
        int v32 = type;
        nw_protocol_options_access_handle(v11, buf);
        uint64_t v13 = *((void *)v27 + 3);
        _Block_object_dispose(type, 8);
        *((void *)handle + 10) = v13;
        *(void *)os_log_type_t type = 0LL;
        uint64_t v27 = type;
        uint64_t v28 = 0x2000000000LL;
        uint64_t v29 = 0LL;
        *(void *)buf = v10;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = __nw_replicate_options_get_primary_maximum_expiration_block_invoke;
        uint64_t v31 = &unk_189BBDBA8;
        int v32 = type;
        nw_protocol_options_access_handle(v12, buf);
        uint64_t v14 = *((void *)v27 + 3);
        _Block_object_dispose(type, 8);
        *((void *)handle + 11) = v14;
        if (v14) {
          *((_BYTE *)handle + 372) |= 8u;
        }
        *(void *)os_log_type_t type = 0LL;
        uint64_t v27 = type;
        LODWORD(v29) = 0;
        uint64_t v28 = 0x2000000000LL;
        v24[0] = v10;
        v24[1] = 0x40000000LL;
        v24[2] = ___ZL39nw_protocol_replicate_add_input_handlerP11nw_protocolS0__block_invoke;
        v24[3] = &unk_189BBDC90;
        v24[4] = type;
        v24[5] = handle;
        *(void *)buf = v10;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke;
        uint64_t v31 = &unk_189BBDB58;
        int v32 = (os_log_type_t *)v24;
        nw_protocol_options_access_handle(v12, buf);
        os_release(v12);
        _Block_object_dispose(type, 8);
      }

      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_replicate_add_input_handler";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_add_input_handler";
        BOOL v19 = "%{public}s called with null replicate";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    if (!v25)
    {
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_add_input_handler";
        BOOL v19 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type[0];
    BOOL v23 = os_log_type_enabled(v17, type[0]);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_add_input_handler";
        BOOL v19 = "%{public}s called with null replicate, no backtrace";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_replicate_add_input_handler";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      int v22 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
      goto LABEL_33;
    }

    goto LABEL_34;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_replicate_add_input_handler";
  os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v25)
    {
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_add_input_handler";
        BOOL v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type[0];
    BOOL v21 = os_log_type_enabled(v17, type[0]);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_add_input_handler";
        BOOL v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_replicate_add_input_handler";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      int v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v17, v18, v22, buf, 0x16u);
    }

uint64_t nw_protocol_replicate_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v48 = "nw_protocol_replicate_remove_input_handler";
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v45)
      {
        int v32 = (os_log_s *)__nwlog_obj();
        os_log_type_t v33 = type;
        if (!os_log_type_enabled(v32, type)) {
          goto LABEL_86;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_protocol_replicate_remove_input_handler";
        uint64_t v34 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_85;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v36 = os_log_type_enabled(v32, type);
      if (!backtrace_string)
      {
        if (!v36) {
          goto LABEL_86;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_protocol_replicate_remove_input_handler";
        uint64_t v34 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_85;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v48 = "nw_protocol_replicate_remove_input_handler";
        __int16 v49 = 2082;
        int v50 = backtrace_string;
        int v37 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_181A5C000, v32, v33, v37, buf, 0x16u);
      }

void nw_protocol_replicate_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_replicate_connected";
    BOOL v38 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_replicate_connected";
      os_log_type_t v41 = "%{public}s called with null protocol";
    }

    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v43 = os_log_type_enabled(v39, type);
      if (backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v49 = "nw_protocol_replicate_connected";
          __int16 v50 = 2082;
          uint64_t v51 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v39,  v40,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_76:
        if (!v38) {
          return;
        }
        goto LABEL_77;
      }

      if (!v43) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_replicate_connected";
      os_log_type_t v41 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_replicate_connected";
      os_log_type_t v41 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_replicate_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle) {
      return (*(uint64_t (**)(void))(*(void *)(handle[4] + 24LL) + 80LL))();
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_replicate_get_input_frames";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_replicate_get_input_frames";
        uint64_t v11 = "%{public}s called with null replicate";
        goto LABEL_31;
      }

      if (!v16)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_replicate_get_input_frames";
        uint64_t v11 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_protocol_replicate_get_input_frames";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null replicate, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v8) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_replicate_get_input_frames";
        uint64_t v11 = "%{public}s called with null replicate, no backtrace";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_replicate_get_input_frames";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_replicate_get_input_frames";
      uint64_t v11 = "%{public}s called with null protocol";
      goto LABEL_31;
    }

    if (!v16)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_replicate_get_input_frames";
      uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }

    uint64_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_replicate_get_input_frames";
      uint64_t v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_replicate_get_input_frames";
      __int16 v20 = 2082;
      uint64_t v21 = v12;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v12);
  }

uint64_t nw_protocol_replicate_get_output_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle) {
      return (*(uint64_t (**)(void))(*(void *)(handle[4] + 24LL) + 88LL))();
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_replicate_get_output_frames";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_replicate_get_output_frames";
        uint64_t v11 = "%{public}s called with null replicate";
        goto LABEL_31;
      }

      if (!v16)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_replicate_get_output_frames";
        uint64_t v11 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_protocol_replicate_get_output_frames";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null replicate, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v8) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_replicate_get_output_frames";
        uint64_t v11 = "%{public}s called with null replicate, no backtrace";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_replicate_get_output_frames";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_replicate_get_output_frames";
      uint64_t v11 = "%{public}s called with null protocol";
      goto LABEL_31;
    }

    if (!v16)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_replicate_get_output_frames";
      uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }

    uint64_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_replicate_get_output_frames";
      uint64_t v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_replicate_get_output_frames";
      __int16 v20 = 2082;
      uint64_t v21 = v12;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v12);
  }

uint64_t nw_protocol_replicate_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle)
    {
      if ((*((_BYTE *)handle + 372) & 2) != 0) {
        return handle[12];
      }
      else {
        return ((uint64_t (*)(void))a1->default_input_handler->callbacks->get_remote_endpoint)();
      }
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_replicate_get_remote_endpoint";
    BOOL v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_replicate_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null replicate";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_replicate_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_replicate_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null replicate, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_replicate_get_remote_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_replicate_get_remote_endpoint";
  BOOL v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_replicate_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_replicate_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_replicate_get_remote_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_replicate_get_local_endpoint(nw_protocol *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle) {
      return ((uint64_t (*)(void))a1->default_input_handler->callbacks->get_local_endpoint)();
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v3 = (os_log_s *)__nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
        os_log_type_t v5 = "%{public}s called with null replicate";
        goto LABEL_31;
      }

      if (!v10)
      {
        BOOL v3 = (os_log_s *)__nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
        os_log_type_t v5 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
          __int16 v14 = 2082;
          __int16 v15 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null replicate, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v2) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
        os_log_type_t v5 = "%{public}s called with null replicate, no backtrace";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
      os_log_type_t v5 = "%{public}s called with null protocol";
      goto LABEL_31;
    }

    if (!v10)
    {
      BOOL v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
      os_log_type_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }

    uint64_t v6 = (char *)__nw_create_backtrace_string();
    BOOL v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
      os_log_type_t v5 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }

    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v13 = "nw_protocol_replicate_get_local_endpoint";
      __int16 v14 = 2082;
      __int16 v15 = v6;
      _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v6);
  }

uint64_t nw_protocol_replicate_get_parameters(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle)
    {
      if ((*((_BYTE *)handle + 372) & 2) != 0) {
        return handle[13];
      }
      else {
        return ((uint64_t (*)(void))a1->default_input_handler->callbacks->get_parameters)();
      }
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v14 = "nw_protocol_replicate_get_parameters";
    BOOL v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v14 = "nw_protocol_replicate_get_parameters";
        uint64_t v6 = "%{public}s called with null replicate";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (!v11)
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v14 = "nw_protocol_replicate_get_parameters";
        uint64_t v6 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v14 = "nw_protocol_replicate_get_parameters";
        uint64_t v6 = "%{public}s called with null replicate, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v14 = "nw_protocol_replicate_get_parameters";
      __int16 v15 = 2082;
      uint64_t v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v14 = "nw_protocol_replicate_get_parameters";
  BOOL v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v14 = "nw_protocol_replicate_get_parameters";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v14 = "nw_protocol_replicate_get_parameters";
        uint64_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v14 = "nw_protocol_replicate_get_parameters";
      __int16 v15 = 2082;
      uint64_t v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_replicate_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle)
    {
      if ((handle[372] & 8) != 0) {
        uint64_t v32 = mach_absolute_time();
      }
      else {
        uint64_t v32 = 0LL;
      }
      uint64_t v5 = 0LL;
      uint64_t v6 = MEMORY[0x1895F87A8];
      do
      {
        BOOL v7 = &handle[8 * v5];
        uint64_t v8 = v7[14];
        if (v8)
        {
          uint64_t v9 = v7[30];
          uint64_t v10 = v7[38];
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          int v56 = 0;
          *(void *)&buf[16] = 0x2000000000LL;
          v51[0] = v6;
          v51[1] = 0x40000000LL;
          uint64_t v52 = ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
          __int16 v53 = &unk_189BBDD50;
          int v54 = buf;
          tqh_first = a2->tqh_first;
          do
          {
            if (!tqh_first) {
              break;
            }
            uint64_t v12 = (nw_frame *)*((void *)tqh_first + 4);
            char v13 = v52((uint64_t)v51);
            tqh_first = v12;
          }

          while ((v13 & 1) != 0);
          v50[0] = 0LL;
          v50[1] = v50;
          if ((*(unsigned int (**)(uint64_t, nw_protocol *, uint64_t, uint64_t, void, void *))(*(void *)(v8 + 24) + 88LL))( v8,  a1,  1LL,  0xFFFFFFFFLL,  *(unsigned int *)(*(void *)&buf[8] + 24LL),  v50))
          {
            *(void *)os_log_type_t type = 0LL;
            __int16 v47 = type;
            uint64_t v48 = 0x2000000000LL;
            uint64_t v49 = v50[0];
            v38[0] = v6;
            v38[1] = 0x40000000LL;
            int v39 = (uint64_t (*)(void *))___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2;
            os_log_type_t v40 = &unk_189BBDD78;
            os_log_type_t v41 = type;
            uint64_t v42 = a1;
            uint64_t v43 = v32;
            uint64_t v44 = v9;
            uint64_t v45 = v10;
            __int16 v14 = a2->tqh_first;
            do
            {
              if (!v14) {
                break;
              }
              __int16 v15 = (nw_frame *)*((void *)v14 + 4);
              char v16 = v39(v38);
              __int16 v14 = v15;
            }

            while ((v16 & 1) != 0);
            (*(void (**)(uint64_t, void *))(*(void *)(v8 + 24) + 96LL))(v8, v50);
            _Block_object_dispose(type, 8);
          }

          _Block_object_dispose(buf, 8);
        }

        ++v5;
      }

      while (v5 != 8);
      if ((handle[372] & 4) != 0)
      {
        uint64_t v22 = a2->tqh_first;
        if (a2->tqh_first)
        {
          do
          {
            uint64_t v23 = (nw_frame *)*((void *)v22 + 4);
            nw_frame_finalize((uint64_t)v22);
            uint64_t v22 = v23;
          }

          while (v23);
        }

        return 1LL;
      }

      else
      {
        uint64_t v17 = *((void *)handle + 4);
        if (*((void *)handle + 10) || *((void *)handle + 11))
        {
          v33[0] = v6;
          v33[1] = 0x40000000LL;
          uint64_t v34 = ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_4;
          uint64_t v35 = &__block_descriptor_tmp_42_41190;
          uint64_t v36 = v32;
          int v37 = handle;
          uint64_t v18 = a2->tqh_first;
          do
          {
            if (!v18) {
              break;
            }
            uint64_t v19 = (nw_frame *)*((void *)v18 + 4);
            char v20 = ((uint64_t (*)(void *))v34)(v33);
            uint64_t v18 = v19;
          }

          while ((v20 & 1) != 0);
        }

        return (*(uint64_t (**)(uint64_t, nw_frame_array_s *))(*(void *)(v17 + 24) + 96LL))(v17, a2);
      }
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v50[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
        uint64_t v27 = "%{public}s called with null replicate";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    if (!LOBYTE(v50[0]))
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
        uint64_t v27 = "%{public}s called with null replicate, backtrace limit exceeded";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type[0];
    BOOL v31 = os_log_type_enabled(v25, type[0]);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
        uint64_t v27 = "%{public}s called with null replicate, no backtrace";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v30 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
      goto LABEL_45;
    }

    goto LABEL_46;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
  uint64_t v24 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v50[0]) = 0;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!LOBYTE(v50[0]))
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
        uint64_t v27 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type[0];
    BOOL v29 = os_log_type_enabled(v25, type[0]);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
        uint64_t v27 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v30 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_45:
      _os_log_impl(&dword_181A5C000, v25, v26, v30, buf, 0x16u);
    }

uint64_t nw_protocol_replicate_copy_info(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v20 = "nw_protocol_replicate_copy_info";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v20 = "nw_protocol_replicate_copy_info";
        uint64_t v12 = "%{public}s called with null protocol";
LABEL_39:
        _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      }

uint64_t nw_protocol_replicate_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  __memptr = 0LL;
  if (!posix_memalign(&__memptr, 8uLL, 0x178uLL))
  {
    uint64_t result = (uint64_t)__memptr;
    if (__memptr) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  int v7 = 136446722;
  uint64_t v8 = "strict_memalign";
  __int16 v9 = 2048;
  uint64_t v10 = 8LL;
  __int16 v11 = 2048;
  uint64_t v12 = 376LL;
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v5);
  if (!(_DWORD)result)
  {
    free(v5);
    uint64_t result = (uint64_t)__memptr;
LABEL_3:
    *(void *)(result + 36_Block_object_dispose(&STACK[0x338], 8) = 0LL;
    *(_OWORD *)(result + 336) = 0u;
    *(_OWORD *)(result + 352) = 0u;
    *(_OWORD *)(result + 304) = 0u;
    *(_OWORD *)(result + 320) = 0u;
    *(_OWORD *)(result + 272) = 0u;
    *(_OWORD *)(result + 28_Block_object_dispose(&STACK[0x338], 8) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 256) = 0u;
    *(_OWORD *)(result + 20_Block_object_dispose(&STACK[0x338], 8) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 12_Block_object_dispose(&STACK[0x338], 8) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 4_Block_object_dispose(&STACK[0x338], 8) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(void *)(result + 16) = &g_replicate_protocol_identifier;
    *(void *)(result + 24) = &g_replicate_protocol_callbacks;
    *(void *)(result + 40) = result;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1)
{
  return 1LL;
}

uint64_t ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2( void *a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  if (!*(void *)(*(void *)(a1[4] + 8LL) + 24LL)) {
    return 1LL;
  }
  unsigned int v58 = 0;
  uint64_t v4 = (const void *)nw_frame_unclaimed_bytes(a2, &v58);
  unsigned int v57 = 0;
  uint64_t v5 = (void *)nw_frame_unclaimed_bytes(*(void *)(*(void *)(a1[4] + 8LL) + 24LL), &v57);
  unsigned int v7 = v58;
  if (v57 < v58)
  {
    unsigned int v58 = v57;
    unsigned int v7 = v57;
  }

  if (v7)
  {
    memcpy(v5, v4, v7);
    int v8 = v58;
  }

  else
  {
    int v8 = 0;
  }

  nw_frame_claim(*(void *)(*(void *)(a1[4] + 8LL) + 24LL), v6, v8, 0);
  nw_frame_collapse(*(void *)(*(void *)(a1[4] + 8LL) + 24LL));
  nw_frame_unclaim(*(void *)(*(void *)(a1[4] + 8LL) + 24LL), v9, v58, 0);
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v62 = "__nw_frame_get_expire_time";
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v33 = (os_log_s *)__nwlog_obj();
      os_log_type_t v34 = type;
      if (!os_log_type_enabled(v33, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      int v62 = "__nw_frame_get_expire_time";
      uint64_t v35 = "%{public}s called with null frame";
    }

    else if (v59)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v33 = (os_log_s *)__nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v37 = os_log_type_enabled(v33, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          int v62 = "__nw_frame_get_expire_time";
          __int16 v63 = 2082;
          int v64 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (v32) {
          free(v32);
        }
        uint64_t v26 = *(void *)(*(void *)(a1[4] + 8LL) + 24LL);
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        int v62 = "__nw_frame_get_service_class";
        uint64_t v45 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v59 = 0;
        if (__nwlog_fault(v45, &type, &v59))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            char v46 = (os_log_s *)__nwlog_obj();
            os_log_type_t v47 = type;
            if (!os_log_type_enabled(v46, type)) {
              goto LABEL_75;
            }
            *(_DWORD *)buf = 136446210;
            int v62 = "__nw_frame_get_service_class";
            uint64_t v48 = "%{public}s called with null frame";
LABEL_74:
            _os_log_impl(&dword_181A5C000, v46, v47, v48, buf, 0xCu);
            goto LABEL_75;
          }

          if (!v59)
          {
            char v46 = (os_log_s *)__nwlog_obj();
            os_log_type_t v47 = type;
            if (!os_log_type_enabled(v46, type)) {
              goto LABEL_75;
            }
            *(_DWORD *)buf = 136446210;
            int v62 = "__nw_frame_get_service_class";
            uint64_t v48 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_74;
          }

          uint64_t v49 = (char *)__nw_create_backtrace_string();
          char v46 = (os_log_s *)__nwlog_obj();
          os_log_type_t v47 = type;
          BOOL v50 = os_log_type_enabled(v46, type);
          if (!v49)
          {
            if (!v50) {
              goto LABEL_75;
            }
            *(_DWORD *)buf = 136446210;
            int v62 = "__nw_frame_get_service_class";
            uint64_t v48 = "%{public}s called with null frame, no backtrace";
            goto LABEL_74;
          }

          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            int v62 = "__nw_frame_get_service_class";
            __int16 v63 = 2082;
            int v64 = v49;
            _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v49);
        }

uint64_t ___ZL44nw_protocol_replicate_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_4( uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "__nw_frame_get_expire_time";
    BOOL v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "__nw_frame_get_expire_time";
      uint64_t v23 = "%{public}s called with null frame";
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v25 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "__nw_frame_get_expire_time";
          __int16 v30 = 2082;
          BOOL v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_37;
      }

      if (!v25)
      {
LABEL_37:
        if (v20) {
          free(v20);
        }
        return 1LL;
      }

      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "__nw_frame_get_expire_time";
      uint64_t v23 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      unint64_t v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "__nw_frame_get_expire_time";
      uint64_t v23 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v21, v22, v23, buf, 0xCu);
    goto LABEL_37;
  }

  if ((*(_WORD *)(a2 + 204) & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a2 + 152);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(v4 + 80);
      uint64_t v7 = *(void *)(v4 + 88);
      unsigned int v8 = dword_18C45F3A4;
      if (v6 < 0)
      {
        uint64_t v11 = -1000000 * v6;
        if (!dword_18C45F3A4)
        {
          mach_timebase_info((mach_timebase_info_t)&time_base);
          unsigned int v8 = dword_18C45F3A4;
        }

        unsigned int v10 = time_base;
        unint64_t v12 = v11 * (unint64_t)v8 / time_base;
        BOOL v13 = v3 >= v12;
        unint64_t v15 = v3 - v12;
        BOOL v14 = v15 != 0 && v13;
        if (!v13) {
          unint64_t v15 = 0LL;
        }
        if (v14) {
          unint64_t v3 = v15;
        }
        if (!v5) {
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v9 = 1000000 * v6;
        if (!dword_18C45F3A4)
        {
          mach_timebase_info((mach_timebase_info_t)&time_base);
          unsigned int v8 = dword_18C45F3A4;
        }

        v3 += v9 * (unint64_t)v8 / time_base;
        unsigned int v10 = time_base;
        if (!v5)
        {
LABEL_20:
          unint64_t v16 = v3;
LABEL_21:
          __int16 v18 = *(_WORD *)(a2 + 204);
          uint64_t v17 = (_WORD *)(a2 + 204);
          *uint64_t v17 = v18 | 0x10;
          *(void *)(v17 - 26) = v16;
          return 1LL;
        }
      }

      if (v7)
      {
        if (!v8)
        {
          mach_timebase_info((mach_timebase_info_t)&time_base);
          unsigned int v10 = time_base;
          unsigned int v8 = dword_18C45F3A4;
        }

        unint64_t v16 = 1000000 * v7 * (unint64_t)v8 / v10 + v5;
        if (v16 < v3) {
          goto LABEL_21;
        }
      }

      goto LABEL_20;
    }
  }

  return 1LL;
}

BOOL nw_protocol_metadata_is_replicate(nw_protocol_metadata *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_replicate_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_replicate_definition::onceToken, &__block_literal_global_41150);
    }
    return nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_replicate_definition::definition);
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v13 = "nw_protocol_metadata_is_replicate";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_protocol_metadata_is_replicate";
        uint64_t v7 = "%{public}s called with null metadata";
LABEL_18:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }

    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v13 = "nw_protocol_metadata_is_replicate";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_protocol_metadata_is_replicate";
        uint64_t v7 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_protocol_metadata_is_replicate";
        uint64_t v7 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
  }

uint64_t ___ZL28nw_replicate_create_metadataP11nw_protocolP10nw_context_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void **)(a1 + 40);
  if (v3) {
    unint64_t v3 = os_retain(v3);
  }
  a2[1] = v3;
  return 1LL;
}

uint64_t __nw_replicate_options_get_primary_expiration_adjustment_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

uint64_t __nw_replicate_options_get_primary_maximum_expiration_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 8);
  return 1LL;
}

uint64_t ___ZL39nw_protocol_replicate_add_input_handlerP11nw_protocolS0__block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(unsigned __int8 **)(a2 + 144);
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke_2;
  v4[3] = &unk_189BBDB30;
  v4[4] = *(void *)(a1 + 32);
  v4[5] = a2;
  nw_array_apply(v2, (uint64_t)v4);
  return 1LL;
}

uint64_t __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke_2( uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 <= 7) {
    return (*(uint64_t (**)(void, uint64_t, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a3,  *(void *)(*(void *)(a1 + 40) + 8 * a2 + 16),  *(void *)(*(void *)(a1 + 40) + 8 * a2 + 80));
  }
  else {
    return 0LL;
  }
}

void nw_protocol_replicate_add_secondary_endpoint( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a3 < 8)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 32);
      *(_BYTE *)(a1 + 372) |= 2u;
      unint64_t v12 = (void *)(*(uint64_t (**)(void))(*(void *)(v10 + 24) + 112LL))();
      *(void *)(a1 + 96) = a2;
      id v13 = v12;
      __int16 v14 = (void *)-[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v13,  0,  0);

      *(void *)(a1 + 104) = v14;
      uint64_t v15 = a1 + 8LL * a3;
      *(void *)(v15 + 240) = a4;
      *(void *)(v15 + 304) = a5;
      if (a5) {
        *(_BYTE *)(a1 + 372) |= 8u;
      }
      if (!*(void *)(a1 + 96) || !v14)
      {
LABEL_14:
        *(void *)(a1 + 96) = 0LL;
        if (!v14) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }

      if ((*(_DWORD *)(a1 + 368) - 1) >= 3)
      {
        *(void *)(a1 + 96) = 0LL;
LABEL_17:
        os_release(v14);
        *(void *)(a1 + 104) = 0LL;
LABEL_18:
        *(_BYTE *)(a1 + 372) &= ~2u;
        nw_protocol_set_output_handler(a1, v11);
        return;
      }

      *(void *)uint64_t v43 = 0LL;
      *(void *)&v43[8] = v43;
      *(void *)&v43[16] = 0x2000000000LL;
      uint64_t v44 = a1;
      uint64_t v37 = 0LL;
      BOOL v38 = &v37;
      uint64_t v39 = 0x2000000000LL;
      char v40 = 0;
      uint64_t v16 = MEMORY[0x1895F87A8];
      v35[0] = MEMORY[0x1895F87A8];
      v35[1] = 0x40000000LL;
      v35[2] = ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke;
      v35[3] = &unk_189BBDCD8;
      v35[5] = &v37;
      v35[6] = a1;
      unsigned int v36 = a3;
      v35[4] = v43;
      nw_parameters_internal_iterate_protocol_stack(v14, 3, 0, v35);
      if (*((_BYTE *)v38 + 24))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (os_log_s *)gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
LABEL_12:
          _Block_object_dispose(&v37, 8);
LABEL_13:
          _Block_object_dispose(v43, 8);
          __int16 v14 = *(void **)(a1 + 104);
          goto LABEL_14;
        }

        *(_DWORD *)buf = 136446210;
        uint64_t v42 = "nw_protocol_replicate_add_secondary_endpoint";
        __int16 v18 = "%{public}s Failed to attach transport protocol";
LABEL_11:
        _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0xCu);
        goto LABEL_12;
      }

      _Block_object_dispose(&v37, 8);
      if ((*(_DWORD *)(a1 + 368) - 1) <= 1)
      {
        uint64_t v37 = 0LL;
        BOOL v38 = &v37;
        uint64_t v39 = 0x2000000000LL;
        char v40 = 0;
        BOOL v19 = *(void **)(a1 + 104);
        v33[0] = v16;
        v33[1] = 0x40000000LL;
        void v33[2] = ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke_31;
        v33[3] = &unk_189BBDD00;
        v33[5] = &v37;
        v33[6] = a1;
        unsigned int v34 = a3;
        v33[4] = v43;
        nw_parameters_internal_iterate_protocol_stack(v19, 2, 0, v33);
        if (*((_BYTE *)v38 + 24))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v17 = (os_log_s *)gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_12;
          }
          *(_DWORD *)buf = 136446210;
          uint64_t v42 = "nw_protocol_replicate_add_secondary_endpoint";
          __int16 v18 = "%{public}s Failed to attach internet protocol";
          goto LABEL_11;
        }

        _Block_object_dispose(&v37, 8);
        if (*(_DWORD *)(a1 + 368) == 1)
        {
          uint64_t v37 = 0LL;
          BOOL v38 = &v37;
          uint64_t v39 = 0x2000000000LL;
          char v40 = 0;
          BOOL v20 = *(void **)(a1 + 104);
          v31[0] = v16;
          v31[1] = 0x40000000LL;
          v31[2] = ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke_33;
          v31[3] = &unk_189BBDD28;
          v31[5] = &v37;
          v31[6] = a1;
          unsigned int v32 = a3;
          v31[4] = v43;
          nw_parameters_internal_iterate_protocol_stack(v20, 1, 0, v31);
          if (*((_BYTE *)v38 + 24))
          {
            uint64_t v17 = (os_log_s *)__nwlog_obj();
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
              goto LABEL_12;
            }
            *(_DWORD *)buf = 136446210;
            uint64_t v42 = "nw_protocol_replicate_add_secondary_endpoint";
            __int16 v18 = "%{public}s Failed to attach link protocol";
            goto LABEL_11;
          }

          _Block_object_dispose(&v37, 8);
        }
      }

      if ((*(_BYTE *)(a1 + 372) & 1) != 0)
      {
        uint64_t v21 = *(void *)(a1 + 32);
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = *(void *)(v21 + 32);
        }

        while (v21);
        nw_protocol_set_output_handler(*(void *)(*(void *)&v43[8] + 24LL), v22);
      }

      goto LABEL_13;
    }

    __nwlog_obj();
    *(_DWORD *)uint64_t v43 = 136446210;
    *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v37) = 16;
    buf[0] = 0;
    if (__nwlog_fault(v23, &v37, buf))
    {
      if (v37 == 17)
      {
        uint64_t v24 = (os_log_s *)__nwlog_obj();
        os_log_type_t v25 = v37;
        if (!os_log_type_enabled(v24, (os_log_type_t)v37)) {
          goto LABEL_61;
        }
        *(_DWORD *)uint64_t v43 = 136446210;
        *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
        char v26 = "%{public}s called with null (index < NW_PROTOCOL_REPLICATE_MAX_ENDPOINTS)";
        goto LABEL_60;
      }

      if (!buf[0])
      {
        uint64_t v24 = (os_log_s *)__nwlog_obj();
        os_log_type_t v25 = v37;
        if (!os_log_type_enabled(v24, (os_log_type_t)v37)) {
          goto LABEL_61;
        }
        *(_DWORD *)uint64_t v43 = 136446210;
        *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
        char v26 = "%{public}s called with null (index < NW_PROTOCOL_REPLICATE_MAX_ENDPOINTS), backtrace limit exceeded";
        goto LABEL_60;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = v37;
      BOOL v30 = os_log_type_enabled(v24, (os_log_type_t)v37);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)uint64_t v43 = 136446466;
          *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
          *(_WORD *)&v43[12] = 2082;
          *(void *)&v43[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null (index < NW_PROTOCOL_REPLICATE_MAX_ENDPOINTS), dumping backtrace:%{public}s",  v43,  0x16u);
        }

        free(backtrace_string);
        if (v23) {
          goto LABEL_62;
        }
        return;
      }

      if (v30)
      {
        *(_DWORD *)uint64_t v43 = 136446210;
        *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
        char v26 = "%{public}s called with null (index < NW_PROTOCOL_REPLICATE_MAX_ENDPOINTS), no backtrace";
LABEL_60:
        _os_log_impl(&dword_181A5C000, v24, v25, v26, v43, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)uint64_t v43 = 136446210;
    *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v37) = 16;
    buf[0] = 0;
    if (v37 == 17)
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = v37;
      if (!os_log_type_enabled(v24, (os_log_type_t)v37)) {
        goto LABEL_61;
      }
      *(_DWORD *)uint64_t v43 = 136446210;
      *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
      char v26 = "%{public}s called with null replicate";
      goto LABEL_60;
    }

    if (!buf[0])
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = v37;
      if (!os_log_type_enabled(v24, (os_log_type_t)v37)) {
        goto LABEL_61;
      }
      *(_DWORD *)uint64_t v43 = 136446210;
      *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
      char v26 = "%{public}s called with null replicate, backtrace limit exceeded";
      goto LABEL_60;
    }

    int v27 = (char *)__nw_create_backtrace_string();
    uint64_t v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = v37;
    BOOL v28 = os_log_type_enabled(v24, (os_log_type_t)v37);
    if (!v27)
    {
      if (!v28) {
        goto LABEL_61;
      }
      *(_DWORD *)uint64_t v43 = 136446210;
      *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
      char v26 = "%{public}s called with null replicate, no backtrace";
      goto LABEL_60;
    }

    if (v28)
    {
      *(_DWORD *)uint64_t v43 = 136446466;
      *(void *)&v43[4] = "nw_protocol_replicate_add_secondary_endpoint";
      *(_WORD *)&v43[12] = 2082;
      *(void *)&v43[14] = v27;
      _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null replicate, dumping backtrace:%{public}s",  v43,  0x16u);
    }

    free(v27);
  }

void sub_1821F1778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = nw_protocol_replicate_attach_protocol( *(void *)(a1 + 48),  a3,  a4,  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  *(_DWORD *)(a1 + 56));
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
  }
  else {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  return v5 != 0;
}

BOOL ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke_31( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = nw_protocol_replicate_attach_protocol( *(void *)(a1 + 48),  a3,  a4,  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  *(_DWORD *)(a1 + 56));
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
  }
  else {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  return v5 != 0;
}

BOOL ___ZL44nw_protocol_replicate_add_secondary_endpointP21nw_protocol_replicateP11nw_endpointjxy_block_invoke_33( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = nw_protocol_replicate_attach_protocol( *(void *)(a1 + 48),  a3,  a4,  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  *(_DWORD *)(a1 + 56));
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
  }
  else {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  return v5 != 0;
}

uint64_t nw_protocol_replicate_attach_protocol(uint64_t a1, void *a2, void *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (a5 >= 8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v38 = "nw_protocol_replicate_attach_protocol";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v38 = "nw_protocol_replicate_attach_protocol";
      unsigned int v32 = "%{public}s called with null (index < 8)";
    }

    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v34 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_protocol_replicate_attach_protocol";
          __int16 v39 = 2082;
          char v40 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s called with null (index < 8), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (!v34)
      {
LABEL_32:
        if (v29) {
          free(v29);
        }
        return 0LL;
      }

      *(_DWORD *)buf = 136446210;
      BOOL v38 = "nw_protocol_replicate_attach_protocol";
      unsigned int v32 = "%{public}s called with null (index < 8), no backtrace";
    }

    else
    {
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v38 = "nw_protocol_replicate_attach_protocol";
      unsigned int v32 = "%{public}s called with null (index < 8), backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
    goto LABEL_32;
  }

  identifier = nw_protocol_definition_get_identifier(a2);
  uint64_t internal = nw_protocol_create_internal((uint64_t)identifier, *(void **)(a1 + 96), *(const char **)(a1 + 104), 1);
  if (!internal)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v24 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v38 = "nw_protocol_replicate_attach_protocol";
      __int16 v39 = 2114;
      char v40 = (char *)a2;
      os_log_type_t v25 = "%{public}s Replicate could not create protocol for %{public}@";
      char v26 = (os_log_s *)v24;
LABEL_15:
      _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_ERROR, v25, buf, 0x16u);
    }

    return 0LL;
  }

  uint64_t v13 = internal;
  nw_parameters_set_protocol_instance(a3, v12, internal);
  char v14 = (**(uint64_t (***)(uint64_t, uint64_t))(v13 + 24))(v13, a4);
  uint64_t v15 = a1 + 8LL * a5;
  uint64_t v17 = *(void *)(v15 + 112);
  uint64_t v16 = (uint64_t *)(v15 + 112);
  if (!v17) {
    *uint64_t v16 = v13;
  }
  uint64_t v18 = a1 + 8LL * a5;
  uint64_t v20 = *(void *)(v18 + 176);
  BOOL v19 = (void **)(v18 + 176);
  if (!v20)
  {
    uint64_t v21 = *(void **)(a1 + 96);
    if (v21) {
      *BOOL v19 = os_retain(v21);
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v22 = (os_log_s *)gLogObj;
  if ((v14 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v27 = *(char **)(a1 + 96);
      *(_DWORD *)buf = 136446466;
      BOOL v38 = "nw_protocol_replicate_attach_protocol";
      __int16 v39 = 2112;
      char v40 = v27;
      os_log_type_t v25 = "%{public}s Replicate failed to add output handler for %@";
      char v26 = v22;
      goto LABEL_15;
    }

    return 0LL;
  }

  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    uint64_t v23 = *(void *)(a1 + 96);
    *(_DWORD *)buf = 136446722;
    BOOL v38 = "nw_protocol_replicate_attach_protocol";
    __int16 v39 = 2112;
    char v40 = (char *)a2;
    __int16 v41 = 2112;
    uint64_t v42 = v23;
    _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_INFO,  "%{public}s Replicate added output handler for %@ on %@",  buf,  0x20u);
  }

  return v13;
}

NWConcrete_nw_protocol_options *nw_replicate_create_options()
{
  if (nw_protocol_copy_replicate_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_replicate_definition::onceToken, &__block_literal_global_41150);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_replicate_definition::definition);
}

void nw_replicate_options_set_primary_expiration(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 0x40000000LL;
    v9[2] = __nw_replicate_options_set_primary_expiration_block_invoke;
    v9[3] = &__block_descriptor_tmp_4_41345;
    v9[4] = a2;
    v9[5] = a3;
    nw_protocol_options_access_handle(a1, v9);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v13 = "nw_replicate_options_set_primary_expiration";
  unint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v11 = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = v11;
      if (!os_log_type_enabled(v4, v11)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_replicate_options_set_primary_expiration";
      os_log_type_t v6 = "%{public}s called with null options";
      goto LABEL_17;
    }

    if (!v10)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = v11;
      if (!os_log_type_enabled(v4, v11)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_replicate_options_set_primary_expiration";
      os_log_type_t v6 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = v11;
    BOOL v8 = os_log_type_enabled(v4, v11);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v13 = "nw_replicate_options_set_primary_expiration";
        __int16 v14 = 2082;
        uint64_t v15 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_replicate_options_set_primary_expiration";
      os_log_type_t v6 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    }
  }

uint64_t __nw_replicate_options_set_primary_expiration_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  a2[1] = *(void *)(a1 + 40);
  return 1LL;
}

void nw_replicate_options_add_endpoint_with_expiration(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a2)
    {
      v12[0] = MEMORY[0x1895F87A8];
      v12[1] = 0x40000000LL;
      v12[2] = __nw_replicate_options_add_endpoint_with_expiration_block_invoke;
      v12[3] = &__block_descriptor_tmp_5_41356;
      v12[4] = a2;
      v12[5] = a3;
      v12[6] = a4;
      nw_protocol_options_access_handle(a1, v12);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v4, &v14, &v13))
    {
      if (v14 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = v14;
        if (!os_log_type_enabled(v5, v14)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
        uint64_t v7 = "%{public}s called with null endpoint";
        goto LABEL_32;
      }

      if (!v13)
      {
        os_log_type_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = v14;
        if (!os_log_type_enabled(v5, v14)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
        uint64_t v7 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = v14;
      BOOL v11 = os_log_type_enabled(v5, v14);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v4) {
          goto LABEL_34;
        }
        return;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
        uint64_t v7 = "%{public}s called with null endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (v14 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = v14;
      if (!os_log_type_enabled(v5, v14)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
      uint64_t v7 = "%{public}s called with null options";
      goto LABEL_32;
    }

    if (!v13)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = v14;
      if (!os_log_type_enabled(v5, v14)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
      uint64_t v7 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }

    BOOL v8 = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = v14;
    BOOL v9 = os_log_type_enabled(v5, v14);
    if (!v8)
    {
      if (!v9) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
      uint64_t v7 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v16 = "nw_replicate_options_add_endpoint_with_expiration";
      __int16 v17 = 2082;
      uint64_t v18 = v8;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v8);
  }

uint64_t __nw_replicate_options_add_endpoint_with_expiration_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a2 + 144);
  if (!v4)
  {
    uint64_t v6 = 0LL;
    goto LABEL_5;
  }

  uint64_t v5 = *(void *)(v4 + 24) - *(void *)(v4 + 16);
  if ((unint64_t)v5 <= 0x3F)
  {
    uint64_t v6 = v5 >> 3;
LABEL_5:
    nw_array_append(v4, *(void **)(a1 + 32));
    uint64_t v7 = a2 + 8 * v6;
    *(void *)(v7 + 16) = *(void *)(a1 + 40);
    *(void *)(v7 + 80) = *(void *)(a1 + 48);
    return 1LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v9 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    int v10 = 136446466;
    BOOL v11 = "nw_replicate_options_add_endpoint_with_expiration_block_invoke";
    __int16 v12 = 1024;
    int v13 = 8;
    _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s Cannot add more than %u endpoints to replicator",  (uint8_t *)&v10,  0x12u);
  }

  return 1LL;
}

void nw_replicate_options_add_endpoint(void *a1, uint64_t a2)
{
}

void nw_replicate_options_enumerate_endpoints(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a2)
    {
      v10[0] = MEMORY[0x1895F87A8];
      v10[1] = 0x40000000LL;
      v10[2] = __nw_replicate_options_enumerate_endpoints_block_invoke;
      v10[3] = &unk_189BBDB08;
      v10[4] = a2;
      nw_protocol_options_access_handle(a1, v10);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
    id v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v2, &v12, &v11))
    {
      if (v12 == OS_LOG_TYPE_FAULT)
      {
        unint64_t v3 = (os_log_s *)__nwlog_obj();
        os_log_type_t v4 = v12;
        if (!os_log_type_enabled(v3, v12)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
        uint64_t v5 = "%{public}s called with null enumerate_block";
        goto LABEL_32;
      }

      if (!v11)
      {
        unint64_t v3 = (os_log_s *)__nwlog_obj();
        os_log_type_t v4 = v12;
        if (!os_log_type_enabled(v3, v12)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
        uint64_t v5 = "%{public}s called with null enumerate_block, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = v12;
      BOOL v9 = os_log_type_enabled(v3, v12);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
        uint64_t v5 = "%{public}s called with null enumerate_block, no backtrace";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
    id v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (v12 == OS_LOG_TYPE_FAULT)
    {
      unint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = v12;
      if (!os_log_type_enabled(v3, v12)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
      uint64_t v5 = "%{public}s called with null options";
      goto LABEL_32;
    }

    if (!v11)
    {
      unint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = v12;
      if (!os_log_type_enabled(v3, v12)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
      uint64_t v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }

    uint64_t v6 = (char *)__nw_create_backtrace_string();
    unint64_t v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = v12;
    BOOL v7 = os_log_type_enabled(v3, v12);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
      uint64_t v5 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }

    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_replicate_options_enumerate_endpoints";
      __int16 v15 = 2082;
      uint64_t v16 = v6;
      _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v6);
  }

uint64_t __nw_replicate_options_enumerate_endpoints_block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(unsigned __int8 **)(a2 + 144);
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = __nw_replicate_options_enumerate_endpoints_block_invoke_2;
  v4[3] = &unk_189BBDAE0;
  v4[4] = *(void *)(a1 + 32);
  nw_array_apply(v2, (uint64_t)v4);
  return 1LL;
}

uint64_t __nw_replicate_options_enumerate_endpoints_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void nw_replicate_options_enumerate_endpoints_with_expiration(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a2)
    {
      v10[0] = MEMORY[0x1895F87A8];
      v10[1] = 0x40000000LL;
      v10[2] = __nw_replicate_options_enumerate_endpoints_with_expiration_block_invoke;
      v10[3] = &unk_189BBDB58;
      v10[4] = a2;
      nw_protocol_options_access_handle(a1, v10);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
    id v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v2, &v12, &v11))
    {
      if (v12 == OS_LOG_TYPE_FAULT)
      {
        unint64_t v3 = (os_log_s *)__nwlog_obj();
        os_log_type_t v4 = v12;
        if (!os_log_type_enabled(v3, v12)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
        uint64_t v5 = "%{public}s called with null enumerate_block";
        goto LABEL_32;
      }

      if (!v11)
      {
        unint64_t v3 = (os_log_s *)__nwlog_obj();
        os_log_type_t v4 = v12;
        if (!os_log_type_enabled(v3, v12)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
        uint64_t v5 = "%{public}s called with null enumerate_block, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = v12;
      BOOL v9 = os_log_type_enabled(v3, v12);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
        uint64_t v5 = "%{public}s called with null enumerate_block, no backtrace";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
    id v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (v12 == OS_LOG_TYPE_FAULT)
    {
      unint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = v12;
      if (!os_log_type_enabled(v3, v12)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
      uint64_t v5 = "%{public}s called with null options";
      goto LABEL_32;
    }

    if (!v11)
    {
      unint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = v12;
      if (!os_log_type_enabled(v3, v12)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
      uint64_t v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }

    uint64_t v6 = (char *)__nw_create_backtrace_string();
    unint64_t v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = v12;
    BOOL v7 = os_log_type_enabled(v3, v12);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
      uint64_t v5 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }

    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_replicate_options_enumerate_endpoints_with_expiration";
      __int16 v15 = 2082;
      uint64_t v16 = v6;
      _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v6);
  }

uint64_t nw_replicate_options_get_primary_expiration_adjustment(void *a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    uint64_t v13 = 0LL;
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 0x40000000LL;
    v9[2] = __nw_replicate_options_get_primary_expiration_adjustment_block_invoke;
    v9[3] = &unk_189BBDB80;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    uint64_t v1 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    return v1;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
  unint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
        uint64_t v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
        uint64_t v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_expiration_adjustment";
        uint64_t v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

uint64_t nw_replicate_options_get_primary_maximum_expiration(void *a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    uint64_t v13 = 0LL;
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 0x40000000LL;
    v9[2] = __nw_replicate_options_get_primary_maximum_expiration_block_invoke;
    v9[3] = &unk_189BBDBA8;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    uint64_t v1 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    return v1;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
  unint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
        uint64_t v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
        uint64_t v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_replicate_options_get_primary_maximum_expiration";
        uint64_t v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

void nw_replicate_metadata_add_endpoint_with_expiration( nw_protocol_metadata *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (nw_protocol_metadata_is_replicate(a1))
  {
    if (a2)
    {
      v16[0] = MEMORY[0x1895F87A8];
      v16[1] = 0x40000000LL;
      v16[2] = __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke;
      v16[3] = &__block_descriptor_tmp_14_41400;
      v16[4] = a1;
      void v16[5] = a2;
      v16[6] = a3;
      v16[7] = a4;
      nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)v16);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &v18, &v17))
    {
      if (v18 == OS_LOG_TYPE_FAULT)
      {
        BOOL v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = v18;
        if (!os_log_type_enabled(v9, v18)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
        char v11 = "%{public}s called with null endpoint";
        goto LABEL_32;
      }

      if (!v17)
      {
        BOOL v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = v18;
        if (!os_log_type_enabled(v9, v18)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
        char v11 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v18;
      BOOL v15 = os_log_type_enabled(v9, v18);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v8) {
          goto LABEL_34;
        }
        return;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
        char v11 = "%{public}s called with null endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v18;
      if (!os_log_type_enabled(v9, v18)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
      char v11 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
      goto LABEL_32;
    }

    if (!v17)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v18;
      if (!os_log_type_enabled(v9, v18)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
      char v11 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
      goto LABEL_32;
    }

    os_log_type_t v12 = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = v18;
    BOOL v13 = os_log_type_enabled(v9, v18);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
      char v11 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
      goto LABEL_32;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "nw_replicate_metadata_add_endpoint_with_expiration";
      __int16 v21 = 2082;
      uint64_t v22 = v12;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v12);
  }

uint64_t __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = (os_unfair_lock_s *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  if (!*(_BYTE *)(a2 + 20) && *(void *)a2 && *(void *)(a2 + 8))
  {
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6) {
      os_retain(v6);
    }
    BOOL v7 = *(void **)(a1 + 40);
    if (v7) {
      os_retain(v7);
    }
    BOOL is_inline = nw_context_is_inline(*(void **)(a2 + 8));
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 0x40000000LL;
    v10[2] = __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke_2;
    v10[3] = &__block_descriptor_tmp_13_41401;
    BOOL v13 = is_inline;
    __int128 v9 = *(_OWORD *)(a1 + 48);
    __int128 v11 = *(_OWORD *)(a1 + 32);
    __int128 v12 = v9;
    if (is_inline) {
      __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke_2((uint64_t)v10);
    }
    else {
      nw_queue_context_async(*(void **)(a2 + 8), v10);
    }
  }

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void __nw_replicate_metadata_add_endpoint_with_expiration_block_invoke_2(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v2 = *(nw_protocol_metadata **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(_BYTE *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  if (!nw_protocol_metadata_is_replicate(v2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    __int128 v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
      __int128 v12 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
LABEL_36:
      _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      goto LABEL_37;
    }

    if (!v17)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
      __int128 v12 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v14 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (!v14) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
      __int128 v12 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
      goto LABEL_36;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_37:
    if (!v9) {
      goto LABEL_4;
    }
    goto LABEL_38;
  }

  if (v3)
  {
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL43nw_replicate_metadata_add_endpoint_on_queueP20nw_protocol_metadataP11nw_endpointbxy_block_invoke;
    uint64_t v20 = &__block_descriptor_tmp_43_41412;
    char v24 = v4 ^ 1;
    uint64_t v21 = v3;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    nw_protocol_metadata_access_handle((uint64_t)v2, (uint64_t)buf);
    goto LABEL_4;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
  __int128 v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    __int128 v12 = "%{public}s called with null endpoint";
    goto LABEL_36;
  }

  if (!v17)
  {
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    __int128 v12 = "%{public}s called with null endpoint, backtrace limit exceeded";
    goto LABEL_36;
  }

  BOOL v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = (os_log_s *)__nwlog_obj();
  os_log_type_t v11 = type;
  BOOL v16 = os_log_type_enabled(v10, type);
  if (!v15)
  {
    if (!v16) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    __int128 v12 = "%{public}s called with null endpoint, no backtrace";
    goto LABEL_36;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_add_endpoint_on_queue";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v15;
    _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v9) {
LABEL_38:
  }
    free(v9);
LABEL_4:
  BOOL v7 = *(void **)(a1 + 32);
  BOOL v8 = *(void **)(a1 + 40);
  if (v7) {
    os_release(v7);
  }
  if (v8) {
    os_release(v8);
  }
}

uint64_t ___ZL43nw_replicate_metadata_add_endpoint_on_queueP20nw_protocol_metadataP11nw_endpointbxy_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 56)) {
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  }
  if (!*(_BYTE *)(a2 + 20))
  {
    if (*(void *)a2)
    {
      uint64_t v5 = *(void **)(a2 + 8);
      if (v5)
      {
        uint64_t v6 = v5;
        BOOL v7 = v6;
        if (((_BYTE)v6[17] & 8) == 0) {
          dispatch_assert_queue_V2(v6[1]);
        }

        uint64_t v8 = *(void *)(*(void *)a2 + 40LL);
        __int128 v9 = *(void **)(v8 + 72);
        if (v9 && nw_endpoint_is_equal(v9, *(void **)(a1 + 32), 0LL))
        {
          *(_BYTE *)(v8 + 372) &= ~4u;
          *(void *)(v8 + 80) = *(void *)(a1 + 40);
          *(void *)(v8 + 8_Block_object_dispose(&STACK[0x338], 8) = *(void *)(a1 + 48);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v10 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *(void *)(a1 + 32);
            int v29 = 136446466;
            BOOL v30 = "nw_replicate_metadata_add_endpoint_on_queue_block_invoke";
            __int16 v31 = 2112;
            uint64_t v32 = v11;
            _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}s Re-adding primary endpoint %@ for replication",  (uint8_t *)&v29,  0x16u);
          }

          goto LABEL_35;
        }

        __int128 v12 = *(void **)(v8 + 176);
        BOOL v13 = v12 == 0LL;
        if (v12)
        {
          int is_equal = nw_endpoint_is_equal(v12, *(void **)(a1 + 32), 0LL);
          BOOL v15 = *(void **)(v8 + 184);
          if (v15) {
            goto LABEL_17;
          }
        }

        else
        {
          int is_equal = 0;
          BOOL v15 = *(void **)(v8 + 184);
          if (v15)
          {
LABEL_17:
            unsigned int v16 = 0;
            is_equal |= nw_endpoint_is_equal(v15, *(void **)(a1 + 32), 0LL);
            char v17 = *(void **)(v8 + 192);
            if (v17) {
              goto LABEL_18;
            }
            goto LABEL_29;
          }
        }

        unsigned int v16 = 1;
        BOOL v13 = 1;
        char v17 = *(void **)(v8 + 192);
        if (v17)
        {
LABEL_18:
          is_equal |= nw_endpoint_is_equal(v17, *(void **)(a1 + 32), 0LL);
          os_log_type_t v18 = *(void **)(v8 + 200);
          if (v18) {
            goto LABEL_19;
          }
          goto LABEL_30;
        }

void sub_1821F3FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_replicate_metadata_add_endpoint(nw_protocol_metadata *a1, uint64_t a2)
{
}

void nw_replicate_metadata_remove_endpoint(nw_protocol_metadata *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (nw_protocol_metadata_is_replicate(a1))
  {
    if (a2)
    {
      v12[0] = MEMORY[0x1895F87A8];
      v12[1] = 0x40000000LL;
      v12[2] = __nw_replicate_metadata_remove_endpoint_block_invoke;
      v12[3] = &__block_descriptor_tmp_16_41427;
      v12[4] = a1;
      v12[5] = a2;
      nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)v12);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
    char v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v4, &v14, &v13))
    {
      if (v14 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = v14;
        if (!os_log_type_enabled(v5, v14)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
        BOOL v7 = "%{public}s called with null endpoint";
        goto LABEL_32;
      }

      if (!v13)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = v14;
        if (!os_log_type_enabled(v5, v14)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
        BOOL v7 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = v14;
      BOOL v11 = os_log_type_enabled(v5, v14);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v4) {
          goto LABEL_34;
        }
        return;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
        BOOL v7 = "%{public}s called with null endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
    char v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (v14 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = v14;
      if (!os_log_type_enabled(v5, v14)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
      BOOL v7 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
      goto LABEL_32;
    }

    if (!v13)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = v14;
      if (!os_log_type_enabled(v5, v14)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
      BOOL v7 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
      goto LABEL_32;
    }

    uint64_t v8 = (char *)__nw_create_backtrace_string();
    uint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = v14;
    BOOL v9 = os_log_type_enabled(v5, v14);
    if (!v8)
    {
      if (!v9) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
      BOOL v7 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
      goto LABEL_32;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v16 = "nw_replicate_metadata_remove_endpoint";
      __int16 v17 = 2082;
      os_log_type_t v18 = v8;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v8);
  }

uint64_t __nw_replicate_metadata_remove_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  char v4 = (os_unfair_lock_s *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  if (!*(_BYTE *)(a2 + 20) && *(void *)a2 && *(void *)(a2 + 8))
  {
    os_log_type_t v6 = *(void **)(a1 + 32);
    if (v6) {
      os_retain(v6);
    }
    BOOL v7 = *(void **)(a1 + 40);
    if (v7) {
      os_retain(v7);
    }
    BOOL is_inline = nw_context_is_inline(*(void **)(a2 + 8));
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 0x40000000LL;
    v9[2] = __nw_replicate_metadata_remove_endpoint_block_invoke_2;
    v9[3] = &__block_descriptor_tmp_15_41428;
    __int128 v10 = *(_OWORD *)(a1 + 32);
    BOOL v11 = is_inline;
    if (is_inline) {
      __nw_replicate_metadata_remove_endpoint_block_invoke_2((uint64_t)v9);
    }
    else {
      nw_queue_context_async(*(void **)(a2 + 8), v9);
    }
  }

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void __nw_replicate_metadata_remove_endpoint_block_invoke_2(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v2 = *(nw_protocol_metadata **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(_BYTE *)(a1 + 48);
  if (!nw_protocol_metadata_is_replicate(v2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
      __int128 v10 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
LABEL_36:
      _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      goto LABEL_37;
    }

    if (!v15)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
      __int128 v10 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
      __int128 v10 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
      goto LABEL_36;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_37:
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_38;
  }

  if (v3)
  {
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL46nw_replicate_metadata_remove_endpoint_on_queueP20nw_protocol_metadataP11nw_endpointb_block_invoke;
    os_log_type_t v18 = &__block_descriptor_tmp_44_41439;
    char v20 = v4 ^ 1;
    uint64_t v19 = v3;
    nw_protocol_metadata_access_handle((uint64_t)v2, (uint64_t)buf);
    goto LABEL_4;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    __int128 v10 = "%{public}s called with null endpoint";
    goto LABEL_36;
  }

  if (!v15)
  {
    uint64_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    __int128 v10 = "%{public}s called with null endpoint, backtrace limit exceeded";
    goto LABEL_36;
  }

  char v13 = (char *)__nw_create_backtrace_string();
  uint64_t v8 = (os_log_s *)__nwlog_obj();
  os_log_type_t v9 = type;
  BOOL v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    __int128 v10 = "%{public}s called with null endpoint, no backtrace";
    goto LABEL_36;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_replicate_metadata_remove_endpoint_on_queue";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v13;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v7) {
LABEL_38:
  }
    free(v7);
LABEL_4:
  uint64_t v5 = *(void **)(a1 + 32);
  os_log_type_t v6 = *(void **)(a1 + 40);
  if (v5) {
    os_release(v5);
  }
  if (v6) {
    os_release(v6);
  }
}

uint64_t ___ZL46nw_replicate_metadata_remove_endpoint_on_queueP20nw_protocol_metadataP11nw_endpointb_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 40)) {
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  }
  if (*(_BYTE *)(a2 + 20)) {
    goto LABEL_4;
  }
  if (!*(void *)a2) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void **)(a2 + 8);
  if (!v5) {
    goto LABEL_4;
  }
  os_log_type_t v6 = v5;
  BOOL v7 = v6;
  if (((_BYTE)v6[17] & 8) == 0) {
    dispatch_assert_queue_V2(v6[1]);
  }

  uint64_t v8 = *(void *)(*(void *)a2 + 40LL);
  os_log_type_t v9 = *(void **)(v8 + 72);
  if (v9)
  {
    char v10 = 0;
    if (nw_endpoint_is_equal(v9, *(void **)(a1 + 32), 0LL))
    {
      *(_BYTE *)(v8 + 372) |= 4u;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v42 = 136446466;
        uint64_t v43 = "nw_replicate_metadata_remove_endpoint_on_queue_block_invoke";
        __int16 v44 = 2112;
        uint64_t v45 = v12;
        _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}s Removing primary endpoint %@ for replication",  (uint8_t *)&v42,  0x16u);
      }

      char v10 = 1;
    }

    char v13 = *(void **)(v8 + 176);
    if (v13)
    {
LABEL_17:
      int is_equal = nw_endpoint_is_equal(v13, *(void **)(a1 + 32), 0LL);
      char v15 = *(void **)(v8 + 184);
      if (v15) {
        goto LABEL_18;
      }
LABEL_50:
      unsigned int v16 = 0;
      __int16 v17 = *(void **)(v8 + 192);
      if (v17) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
  }

  else
  {
    char v10 = 0;
    char v13 = *(void **)(v8 + 176);
    if (v13) {
      goto LABEL_17;
    }
  }

  int is_equal = 0;
  char v15 = *(void **)(v8 + 184);
  if (!v15) {
    goto LABEL_50;
  }
LABEL_18:
  unsigned int v16 = nw_endpoint_is_equal(v15, *(void **)(a1 + 32), 0LL);
  is_equal |= v16;
  __int16 v17 = *(void **)(v8 + 192);
  if (v17)
  {
LABEL_19:
    int v18 = nw_endpoint_is_equal(v17, *(void **)(a1 + 32), 0LL);
    if (v18) {
      unsigned int v16 = 2;
    }
    is_equal |= v18;
  }

void sub_1821F4CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!hostname)
  {
    __nwlog_obj();
    char v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_endpoint_create_host";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_endpoint_create_host";
        uint64_t v8 = "%{public}s called with null hostname";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }

uint64_t nw_endpoint_host_endpoint_matches_hostname(void *a1, const char *a2, int a3, int a4, int a5)
{
  *(void *)&v66[13] = *MEMORY[0x1895F89C0];
  id v9 = a1;
  char v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    BOOL v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v64 = "nw_endpoint_host_endpoint_matches_hostname";
    __int16 v39 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (__nwlog_fault(v39, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          int v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s called with null endpoint", buf, 0xCu);
        }

        goto LABEL_78;
      }

      if (!v61)
      {
        __nwlog_obj();
        char v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          int v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl( &dword_181A5C000,  v40,  v56,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_78;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type;
      BOOL v46 = os_log_type_enabled(v40, type);
      if (!backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          int v64 = "nw_endpoint_host_endpoint_matches_hostname";
          _os_log_impl(&dword_181A5C000, v40, v45, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }

        goto LABEL_78;
      }

      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        int v64 = "nw_endpoint_host_endpoint_matches_hostname";
        __int16 v65 = 2082;
        *(void *)int v66 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v40,  v45,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

void sub_1821F65FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_http_retry_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  os_log_type_t v6 = (char *)calloc(1uLL, 0x2A8uLL);
  if (!v6)
  {
    id v24 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    BOOL v28 = "strict_calloc";
    __int16 v29 = 2048;
    uint64_t v30 = 1LL;
    __int16 v31 = 2048;
    uint64_t v32 = 680LL;
    int v25 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v25);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v25);
  }

  bzero(v6, 0x2A8uLL);
  if (gLogDatapath)
  {
    int v26 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v28 = "nw_protocol_http_retry_create";
      __int16 v29 = 2082;
      uint64_t v30 = (uint64_t)(v6 + 114);
      __int16 v31 = 2080;
      uint64_t v32 = (uint64_t)" ";
      _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }

  if (nw_protocol_http_retry_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_retry_identifier::onceToken, &__block_literal_global_41658);
  }
  *((void *)v6 + 2) = &nw_protocol_http_retry_identifier::protocol_identifier;
  *((void *)v6 + 3) = &nw_protocol_http_retry_get_callbacks(void)::protocol_callbacks;
  *((void *)v6 + 5) = v6;
  if (a3) {
    a3 = os_retain(a3);
  }
  char v7 = v6[632];
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = (void *)*((void *)v6 + 78);
    if (v8)
    {
      os_release(v8);
      char v7 = v6[632];
    }
  }

  *((void *)v6 + 7_Block_object_dispose(&STACK[0x338], 8) = a3;
  v6[632] = v7 | 1;
  if (!a4)
  {
    id v9 = 0LL;
    char v10 = v6[648];
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_16:
    id v11 = (void *)*((void *)v6 + 80);
    if (v11)
    {
      os_release(v11);
      char v10 = v6[648];
    }

    goto LABEL_18;
  }

  id v9 = os_retain(a4);
  char v10 = v6[648];
  if ((v10 & 1) != 0) {
    goto LABEL_16;
  }
LABEL_18:
  *((void *)v6 + 80) = v9;
  v6[648] = v10 | 1;
  id v12 = nw_parameters_copy_context(a4);
  char v13 = v6[664];
  if ((v13 & 1) != 0)
  {
    char v14 = (void *)*((void *)v6 + 82);
    if (v14)
    {
      os_release(v14);
      char v13 = v6[664];
    }
  }

  *((void *)v6 + 82) = v12;
  v6[664] = v13 | 1;
  v6[676] = v6[676] & 0xFE | nw_parameters_get_server_mode(a4);
  if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73298);
  }
  id v15 = (id)nw_protocol_copy_http_retry_definition_http_retry_definition;
  unsigned int v16 = nw_parameters_copy_protocol_options_for_definition(a4, v15);
  *((_DWORD *)v6 + 16_Block_object_dispose(&STACK[0x338], 8) = nw_http_retry_options_get_limit(v16);
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  id v17 = (id)nw_protocol_copy_http_client_definition_definition;
  id v18 = nw_parameters_copy_protocol_options_for_definition(a4, v17);
  id v19 = nw_http_client_options_copy_retry_with_h1_handler(v18);
  char v20 = v6[616];
  if ((v20 & 1) != 0)
  {
    uint64_t v21 = (const void *)*((void *)v6 + 76);
    if (v21)
    {
      _Block_release(v21);
      char v20 = v6[616];
    }
  }

  *((void *)v6 + 25) = 0LL;
  *((void *)v6 + 76) = v19;
  v6[616] = v20 | 1;
  *((void *)v6 + 9) = v6 + 200;
  *((void *)v6 + 26) = v6 + 200;
  *((void *)v6 + 27) = 0LL;
  *((void *)v6 + 2_Block_object_dispose(&STACK[0x338], 8) = v6 + 216;
  *((void *)v6 + 29) = 0LL;
  *((void *)v6 + 30) = v6 + 232;
  v6[340] = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  id v22 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks( (uint64_t)v6,  v22,  (uint64_t)nw_protocol_http_retry_create::$_0::__invoke,  (uint64_t)nw_protocol_http_retry_create::$_1::__invoke);
  if (v22) {
    os_release(v22);
  }
  *((void *)v6 + 10) = v6 + 344;
  nw_protocol_plugin_reset_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_retry_create::$_2::__invoke);
  *((void *)v6 + 11) = v6 + 360;
  nw_protocol_plugin_retry_set_callbacks( (uint64_t)v6,  (uint64_t)nw_protocol_http_retry_create::$_3::__invoke,  (uint64_t)nw_protocol_http_retry_create::$_4::__invoke,  (uint64_t)nw_protocol_http_retry_create::$_5::__invoke,  (uint64_t)nw_protocol_http_retry_create::$_6::__invoke);
  *((void *)v6 + _Block_object_dispose(&STACK[0x338], 8) = v6 + 104;
  nw_protocol_plugin_name_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_retry_create::$_7::__invoke);
  if (v18) {
    os_release(v18);
  }
  if (v17) {
    os_release(v17);
  }
  if (v16) {
    os_release(v16);
  }
  if (v15) {
    os_release(v15);
  }
  return (BOOL)v6;
}

void nw_protocol_http_retry_create::$_0::__invoke( uint64_t a1, uint64_t a2, void *object, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v35 = "operator()";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        char v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_99;
        }
        *(_DWORD *)buf = 136446210;
        id v35 = "operator()";
        unsigned int v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_98;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (!v22) {
          goto LABEL_99;
        }
        *(_DWORD *)buf = 136446210;
        id v35 = "operator()";
        unsigned int v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_98;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        id v35 = "operator()";
        __int16 v36 = 2082;
        uint64_t v37 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
LABEL_99:
      if (v13) {
        goto LABEL_100;
      }
      return;
    }

    char v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446210;
    id v35 = "operator()";
    unsigned int v16 = "%{public}s called with null protocol";
    goto LABEL_98;
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v35 = "operator()";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        char v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_99;
        }
        *(_DWORD *)buf = 136446210;
        id v35 = "operator()";
        unsigned int v16 = "%{public}s called with null http_retry, backtrace limit exceeded";
        goto LABEL_98;
      }

      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v24 = os_log_type_enabled(v14, type);
      if (!v23)
      {
        if (!v24) {
          goto LABEL_99;
        }
        *(_DWORD *)buf = 136446210;
        id v35 = "operator()";
        unsigned int v16 = "%{public}s called with null http_retry, no backtrace";
        goto LABEL_98;
      }

      if (!v24) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446466;
      id v35 = "operator()";
      __int16 v36 = 2082;
      uint64_t v37 = v23;
      int v25 = "%{public}s called with null http_retry, dumping backtrace:%{public}s";
      goto LABEL_66;
    }

    char v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446210;
    id v35 = "operator()";
    unsigned int v16 = "%{public}s called with null http_retry";
LABEL_98:
    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_99;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v35 = "operator()";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        char v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_99;
        }
        *(_DWORD *)buf = 136446210;
        id v35 = "operator()";
        unsigned int v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_98;
      }

      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v26 = os_log_type_enabled(v14, type);
      if (!v23)
      {
        if (!v26) {
          goto LABEL_99;
        }
        *(_DWORD *)buf = 136446210;
        id v35 = "operator()";
        unsigned int v16 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_98;
      }

      if (!v26) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446466;
      id v35 = "operator()";
      __int16 v36 = 2082;
      uint64_t v37 = v23;
      int v25 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_66;
    }

    char v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446210;
    id v35 = "operator()";
    unsigned int v16 = "%{public}s called with null other_protocol";
    goto LABEL_98;
  }

  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v35 = "operator()";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446210;
      id v35 = "operator()";
      unsigned int v16 = "%{public}s called with null metadata";
      goto LABEL_98;
    }

    if (!v32)
    {
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446210;
      id v35 = "operator()";
      unsigned int v16 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_98;
    }

    os_log_type_t v23 = (char *)__nw_create_backtrace_string();
    char v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (!v27) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446210;
      id v35 = "operator()";
      unsigned int v16 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_98;
    }

    if (!v27) {
      goto LABEL_67;
    }
    *(_DWORD *)buf = 136446466;
    id v35 = "operator()";
    __int16 v36 = 2082;
    uint64_t v37 = v23;
    int v25 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_66:
    _os_log_impl(&dword_181A5C000, v14, v15, v25, buf, 0x16u);
    goto LABEL_67;
  }

  if (a5)
  {
    if (*(void *)(v5 + 576))
    {
      uint64_t v8 = os_retain(object);
      char v9 = *(_BYTE *)(v5 + 600);
      if ((v9 & 1) != 0)
      {
        char v10 = *(void **)(v5 + 592);
        if (v10)
        {
          os_release(v10);
          char v9 = *(_BYTE *)(v5 + 600);
        }
      }

      *(void *)(v5 + 592) = v8;
      *(_BYTE *)(v5 + 600) = v9 | 1;
      if ((*(_BYTE *)(v5 + 676) & 8) != 0)
      {
        (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 3LL, object);
        return;
      }

      if ((*(_BYTE *)(v5 + 676) & 5) == 0)
      {
        if (*(_DWORD *)(v5 + 672))
        {
          id v11 = *(void **)(v5 + 576);
          if (v11)
          {
            id v12 = nw_http_metadata_copy_request(v11);
            if (v12) {
              os_release(v12);
            }
          }
        }
      }

      if ((*(_BYTE *)(v5 + 198) & 1) == 0 && gLogDatapath)
      {
        __int16 v31 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          id v35 = "nw_http_retry_process";
          __int16 v36 = 2082;
          uint64_t v37 = (char *)(v5 + 114);
          __int16 v38 = 2080;
          __int16 v39 = " ";
          _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sCannot retry request on stream",  buf,  0x20u);
        }
      }

      goto LABEL_14;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v35 = "nw_http_retry_process";
    id v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v17, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_104;
        }
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_http_retry_process";
        char v20 = "%{public}s called with null http_retry->request_metadata";
        goto LABEL_103;
      }

      if (!v32)
      {
        id v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_104;
        }
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_http_retry_process";
        char v20 = "%{public}s called with null http_retry->request_metadata, backtrace limit exceeded";
        goto LABEL_103;
      }

      __int16 v29 = (char *)__nw_create_backtrace_string();
      id v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v30 = os_log_type_enabled(v18, type);
      if (v29)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          id v35 = "nw_http_retry_process";
          __int16 v36 = 2082;
          uint64_t v37 = v29;
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s called with null http_retry->request_metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v29);
        goto LABEL_104;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_http_retry_process";
        char v20 = "%{public}s called with null http_retry->request_metadata, no backtrace";
LABEL_103:
        _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
      }
    }

void nw_protocol_http_retry_create::$_1::__invoke(uint64_t a1, int a2, void *object, int a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "operator()";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "operator()";
      unsigned int v16 = "%{public}s called with null protocol";
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v27 = "operator()";
          __int16 v28 = 2082;
          __int16 v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_65:
        if (!v13) {
          return;
        }
        goto LABEL_66;
      }

      if (!v18) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "operator()";
      unsigned int v16 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "operator()";
      unsigned int v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_64;
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "operator()";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        char v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_65;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "operator()";
        unsigned int v16 = "%{public}s called with null http_retry, backtrace limit exceeded";
        goto LABEL_64;
      }

      os_log_type_t v19 = (char *)__nw_create_backtrace_string();
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (!v19)
      {
        if (!v20) {
          goto LABEL_65;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "operator()";
        unsigned int v16 = "%{public}s called with null http_retry, no backtrace";
        goto LABEL_64;
      }

      if (!v20) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v27 = "operator()";
      __int16 v28 = 2082;
      __int16 v29 = v19;
      uint64_t v21 = "%{public}s called with null http_retry, dumping backtrace:%{public}s";
      goto LABEL_45;
    }

    char v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "operator()";
    unsigned int v16 = "%{public}s called with null http_retry";
LABEL_64:
    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_65;
  }

  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "operator()";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "operator()";
      unsigned int v16 = "%{public}s called with null metadata";
      goto LABEL_64;
    }

    if (!v24)
    {
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "operator()";
      unsigned int v16 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_64;
    }

    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    char v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!v19)
    {
      if (!v22) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "operator()";
      unsigned int v16 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_64;
    }

    if (!v22) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v27 = "operator()";
    __int16 v28 = 2082;
    __int16 v29 = v19;
    uint64_t v21 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v14, v15, v21, buf, 0x16u);
    goto LABEL_46;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "operator()";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "operator()";
      unsigned int v16 = "%{public}s called with null completion";
      goto LABEL_64;
    }

    if (!v24)
    {
      char v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "operator()";
      unsigned int v16 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_64;
    }

    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    char v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v23 = os_log_type_enabled(v14, type);
    if (!v19)
    {
      if (!v23) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "operator()";
      unsigned int v16 = "%{public}s called with null completion, no backtrace";
      goto LABEL_64;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v27 = "operator()";
      __int16 v28 = 2082;
      __int16 v29 = v19;
      uint64_t v21 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_45;
    }

void nw_protocol_http_retry_create::$_2::__invoke( nw_protocol_http_retry_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "operator()";
    char v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v20 = "operator()";
      char v12 = "%{public}s called with null protocol";
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "operator()";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v9) {
          return;
        }
        goto LABEL_40;
      }

      if (!v14) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v20 = "operator()";
      char v12 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      char v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v20 = "operator()";
      char v12 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_http_retry_create::$_3::__invoke( nw_protocol_http_retry_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v77[0] = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v77[0])
      {
        __int16 v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        uint64_t v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_97;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type[0];
      BOOL v42 = os_log_type_enabled(v38, type[0]);
      if (!backtrace_string)
      {
        if (!v42) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        uint64_t v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_97;
      }

      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "operator()";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v43 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_87:
        _os_log_impl(&dword_181A5C000, v38, v39, v43, buf, 0x16u);
      }

uint64_t nw_protocol_http_retry_create::$_4::__invoke( nw_protocol_http_retry_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

uint64_t nw_protocol_http_retry_create::$_5::__invoke( nw_protocol_http_retry_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (this)
  {
    uint64_t v3 = *((void *)this + 5);
    if (v3)
    {
      *(_BYTE *)(v3 + 676) |= 4u;
      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "operator()";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "operator()";
        id v8 = "%{public}s called with null http_retry";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v13)
    {
      id v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "operator()";
        id v8 = "%{public}s called with null http_retry, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "operator()";
        id v8 = "%{public}s called with null http_retry, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v16 = "operator()";
      __int16 v17 = 2082;
      uint64_t v18 = backtrace_string;
      os_log_type_t v11 = "%{public}s called with null http_retry, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "operator()";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      id v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "operator()";
        id v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "operator()";
        id v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v16 = "operator()";
      __int16 v17 = 2082;
      uint64_t v18 = backtrace_string;
      os_log_type_t v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v6, v7, v11, buf, 0x16u);
    }

uint64_t nw_protocol_http_retry_create::$_6::__invoke( nw_protocol_http_retry_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

uint64_t nw_protocol_http_retry_create::$_7::__invoke( nw_protocol_http_retry_create::$_7 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

uint64_t __Block_byref_object_copy__41702(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(&STACK[0x338], 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__41703(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

uint64_t ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke( uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 572LL) |= 0x10u;
  return result;
}

uint64_t __Block_byref_object_copy__14_41705(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(&STACK[0x338], 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__15_41706(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

uint64_t ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_16( uint64_t a1, uint64_t *a2)
{
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 0x40000000LL;
  os_log_type_t v7 = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_2;
  id v8 = &unk_189BBDE60;
  __int128 v9 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *a2;
  do
  {
    if (!v2) {
      break;
    }
    uint64_t v3 = *(void *)(v2 + 32);
    char v4 = ((uint64_t (*)(void *))v7)(v6);
    uint64_t v2 = v3;
  }

  while ((v4 & 1) != 0);
  return 1LL;
}

uint64_t ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_3( void *a1)
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  id v2 = (id)nw_protocol_copy_http_client_definition_definition;
  identifier = nw_protocol_definition_get_identifier(v2);
  if (v2) {
    os_release(v2);
  }
  uint64_t v4 = a1[6];
  do
  {
    uint64_t v4 = *(void *)(v4 + 48);
    if (!v4) {
      return 1LL;
    }
  }

  while (!nw_protocols_are_equal(*(void **)(v4 + 16), identifier));
  uint64_t v5 = nw_parameters_copy_protocol_options_legacy(*(void **)(*(void *)(a1[4] + 8LL) + 40LL), (nw_protocol *)v4);
  id v6 = nw_http_client_options_copy_resend_handler(v5);
  BOOL v7 = v6 == 0LL;
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = a1[5];
    uint64_t v10 = *(void *)(a1[4] + 8LL);
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 0x40000000LL;
    v12[2] = ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_4;
    v12[3] = &unk_189BBDEB0;
    v12[4] = v9;
    (*((void (**)(void *, void, void *))v6 + 2))(v6, *(void *)(v10 + 40), v12);
    _Block_release(v8);
  }

  if (v5) {
    os_release(v5);
  }
  return v7;
}

void ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_5(uint64_t a1)
{
}

void nw_http_retry_destroy(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(a1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v12 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v13 = 136446722;
        uint64_t v14 = "nw_http_retry_destroy";
        __int16 v15 = 2082;
        uint64_t v16 = a1 + 114;
        __int16 v17 = 2080;
        uint64_t v18 = " ";
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v13, 0x20u);
      }
    }
  }

  if (*(_DWORD *)(a1 + 568))
  {
    *(_BYTE *)(a1 + 572) |= 0x40u;
    if ((*(_BYTE *)(a1 + 198) & 1) == 0 && gLogDatapath)
    {
      id v2 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        int v13 = 136446722;
        uint64_t v14 = "nw_http_retry_destroy";
        __int16 v15 = 2082;
        uint64_t v16 = a1 + 114;
        __int16 v17 = 2080;
        uint64_t v18 = " ";
        _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sdeferring destroy because the request is being reissued",  (uint8_t *)&v13,  0x20u);
      }
    }
  }

  else
  {
    if ((*(_BYTE *)(a1 + 664) & 1) != 0)
    {
      uint64_t v3 = *(void **)(a1 + 656);
      if (v3) {
        os_release(v3);
      }
    }

    *(void *)(a1 + 656) = 0LL;
    if ((*(_BYTE *)(a1 + 648) & 1) != 0)
    {
      uint64_t v4 = *(void **)(a1 + 640);
      if (v4) {
        os_release(v4);
      }
    }

    *(void *)(a1 + 640) = 0LL;
    if ((*(_BYTE *)(a1 + 632) & 1) != 0)
    {
      uint64_t v5 = *(void **)(a1 + 624);
      if (v5) {
        os_release(v5);
      }
    }

    *(void *)(a1 + 624) = 0LL;
    if ((*(_BYTE *)(a1 + 616) & 1) != 0)
    {
      id v6 = *(const void **)(a1 + 608);
      if (v6) {
        _Block_release(v6);
      }
    }

    *(void *)(a1 + 60_Block_object_dispose(&STACK[0x338], 8) = 0LL;
    if ((*(_BYTE *)(a1 + 600) & 1) != 0)
    {
      BOOL v7 = *(void **)(a1 + 592);
      if (v7) {
        os_release(v7);
      }
    }

    *(void *)(a1 + 592) = 0LL;
    if ((*(_BYTE *)(a1 + 584) & 1) != 0)
    {
      id v8 = *(void **)(a1 + 576);
      if (v8) {
        os_release(v8);
      }
    }

    *(void *)(a1 + 576) = 0LL;
    nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(a1 + 360));
    if ((*(_BYTE *)(a1 + 288) & 1) != 0)
    {
      uint64_t v9 = *(void **)(a1 + 280);
      if (v9) {
        os_release(v9);
      }
    }

    *(void *)(a1 + 280) = 0LL;
    if ((*(_BYTE *)(a1 + 272) & 1) != 0)
    {
      uint64_t v10 = *(void **)(a1 + 264);
      if (v10) {
        os_release(v10);
      }
    }

    *(void *)(a1 + 264) = 0LL;
    if ((*(_BYTE *)(a1 + 256) & 1) != 0)
    {
      os_log_type_t v11 = *(void **)(a1 + 248);
      if (v11) {
        os_release(v11);
      }
    }

    free((void *)a1);
  }

void ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_4( uint64_t a1, nw_content_context_t context)
{
}

uint64_t ___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke_2( uint64_t a1, uint64_t a2)
{
  nw_frame_set_metadata( a2,  *(nw_protocol_metadata **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL),  0,  (*(_BYTE *)(*(void *)(a1 + 40) + 676LL) & 2) == 0);
  return 1LL;
}

void ___ZL36nw_protocol_http_retry_get_callbacksv_block_invoke()
{
  qword_18C592930 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_18C592938 = nw_protocol_common_get_output_frames;
  qword_18C592950 = (uint64_t)nw_protocol_common_get_parameters;
  unk_18C592958 = nw_protocol_common_get_path;
  qword_18C592960 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_18C592968 = nw_protocol_common_get_remote_endpoint;
  qword_18C5928F0 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_18C5928F8 = nw_protocol_common_connect;
  qword_18C592900 = (uint64_t)nw_protocol_common_disconnect;
  unk_18C592908 = nw_protocol_common_connected;
  qword_18C592920 = (uint64_t)nw_protocol_common_input_available;
  unk_18C592928 = nw_protocol_common_output_available;
  qword_18C5929A0 = (uint64_t)nw_protocol_common_output_finished;
  unk_18C5929A8 = nw_protocol_common_get_output_local_endpoint;
  qword_18C5929E8 = (uint64_t)nw_protocol_common_input_flush;
  qword_18C592910 = (uint64_t)nw_protocol_common_disconnected;
  unk_18C592918 = nw_protocol_common_error;
  qword_18C5929D8 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_18C5929E0 = nw_protocol_common_reset;
  qword_18C5929C0 = (uint64_t)nw_protocol_common_copy_info;
  qword_18C592990 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_18C592998 = nw_protocol_common_input_finished;
  qword_18C5929B0 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_18C5929B8 = nw_protocol_common_waiting_for_output;
  qword_18C592970 = (uint64_t)nw_protocol_common_register_notification;
  unk_18C592978 = nw_protocol_common_unregister_notification;
  qword_18C592980 = (uint64_t)nw_protocol_common_notify;
  unk_18C592988 = nw_protocol_common_updated_path;
  qword_18C592940 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_18C592948 = nw_protocol_common_link_state;
  nw_protocol_http_retry_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  *(void *)algn_18C5928E8 = nw_protocol_http_retry_remove_input_handler;
}

uint64_t nw_protocol_http_retry_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle)
    {
      if ((handle[198] & 1) == 0 && gLogDatapath)
      {
        BOOL v12 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
          __int16 v24 = 2082;
          uint64_t v25 = handle + 114;
          __int16 v26 = 2080;
          uint64_t v27 = " ";
          _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }

      v19[0] = MEMORY[0x1895F87A8];
      v19[1] = 0x40000000LL;
      v19[2] = ___ZL43nw_protocol_http_retry_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v19[3] = &__block_descriptor_tmp_28_41825;
      v19[4] = handle;
      v17[0] = MEMORY[0x1895F87A8];
      v17[1] = 0x40000000LL;
      v17[2] = ___ZL43nw_protocol_http_retry_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v17[3] = &__block_descriptor_tmp_29_41826;
      char v18 = a3;
      v17[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v19, (uint64_t)v17);
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
        os_log_type_t v11 = "%{public}s called with null http_retry";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    if (!v20)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
        os_log_type_t v11 = "%{public}s called with null http_retry, backtrace limit exceeded";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = v21;
    BOOL v16 = os_log_type_enabled(v9, v21);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
        os_log_type_t v11 = "%{public}s called with null http_retry, no backtrace";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = backtrace_string;
      __int16 v15 = "%{public}s called with null http_retry, dumping backtrace:%{public}s";
      goto LABEL_25;
    }

    goto LABEL_26;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
  id v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
        os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = v21;
    BOOL v14 = os_log_type_enabled(v9, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
        os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_http_retry_remove_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = backtrace_string;
      __int16 v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_181A5C000, v9, v10, v15, buf, 0x16u);
    }

void ___ZL43nw_protocol_http_retry_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136446210;
      os_log_type_t v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }

  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(void *)(v2 + 32_Block_object_dispose(&STACK[0x338], 8) = 0LL;
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(_BYTE *)(v3 + 480);
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = *(const void **)(v3 + 472);
    if (v5)
    {
      _Block_release(v5);
      char v4 = *(_BYTE *)(v3 + 480);
    }
  }

  *(void *)(v3 + 472) = 0LL;
  *(_BYTE *)(v3 + 480) = v4 | 1;
  char v6 = *(_BYTE *)(v3 + 528);
  if ((v6 & 1) != 0)
  {
    BOOL v7 = *(const void **)(v3 + 520);
    if (v7)
    {
      _Block_release(v7);
      char v6 = *(_BYTE *)(v3 + 528);
    }
  }

  *(void *)(v3 + 520) = 0LL;
  *(_BYTE *)(v3 + 52_Block_object_dispose(&STACK[0x338], 8) = v6 | 1;
}

void ___ZL43nw_protocol_http_retry_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40)) {
    nw_http_retry_destroy(*(void *)(a1 + 32));
  }
}

double __nw_protocol_http_retry_identifier_block_invoke()
{
  *(void *)&double result = 0x100000005LL;
  qword_18C592720 = 0x100000005LL;
  return result;
}

const char *__cdecl nw_content_context_get_identifier(nw_content_context_t context)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v1 = context;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = "Final Message";
    char v4 = "Default Stream";
    if (v1 == (nw_content_context *)&__block_literal_global_5_41854) {
      uint64_t v5 = "New Inbound Message";
    }
    else {
      uint64_t v5 = (char *)v1 + 24;
    }
    if (v1 != (nw_content_context *)&__block_literal_global_4) {
      char v4 = v5;
    }
    if (v1 != (nw_content_context *)&__block_literal_global_3_41839) {
      uint64_t v3 = v4;
    }
    if (v1 == (nw_content_context *)&__block_literal_global_41831) {
      char v6 = "Default Message";
    }
    else {
      char v6 = v3;
    }
    goto LABEL_12;
  }

  __nwlog_obj();
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_content_context_get_identifier";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_content_context_get_identifier";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_content_context_get_identifier";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_content_context_get_identifier";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_content_context_get_identifier";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_content_context_get_expiration_milliseconds(nw_content_context_t context)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_content_context_t v1 = context;
  nw_content_context_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_content_context_get_expiration_milliseconds";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          char v16 = "nw_content_context_get_expiration_milliseconds";
          _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            char v16 = "nw_content_context_get_expiration_milliseconds";
            __int16 v17 = 2082;
            char v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          char v16 = "nw_content_context_get_expiration_milliseconds";
          _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          char v16 = "nw_content_context_get_expiration_milliseconds";
          _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_content_context_set_expiration_milliseconds( nw_content_context_t context, uint64_t expiration_milliseconds)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_content_context_t v3 = context;
  nw_content_context_t v4 = v3;
  if (v3)
  {
    if (v3 != (nw_content_context_t)&__block_literal_global_5_41854
      && v3 != (nw_content_context_t)&__block_literal_global_4
      && v3 != (nw_content_context_t)&__block_literal_global_3_41839
      && v3 != (nw_content_context_t)&__block_literal_global_41831)
    {
      *((void *)v3 + _Block_object_dispose(&STACK[0x338], 8) = expiration_milliseconds;
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_content_context_set_expiration_milliseconds";
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_content_context_set_expiration_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_content_context_set_expiration_milliseconds";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_content_context_set_expiration_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_content_context_set_expiration_milliseconds";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

double nw_content_context_get_relative_priority(nw_content_context_t context)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_content_context_t v1 = context;
  nw_content_context_t v2 = v1;
  if (v1)
  {
    double v3 = 0.5;
    if (v1 != (nw_content_context_t)&__block_literal_global_5_41854
      && v1 != (nw_content_context_t)&__block_literal_global_4
      && v1 != (nw_content_context_t)&__block_literal_global_3_41839
      && v1 != (nw_content_context_t)&__block_literal_global_41831
      && (*((_BYTE *)v1 + 118) & 1) == 0)
    {
      double v3 = *((double *)v1 + 10);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_content_context_get_relative_priority";
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_content_context_get_relative_priority";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_content_context_get_relative_priority";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_content_context_get_relative_priority";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_content_context_get_relative_priority";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_content_context_set_relative_priority(nw_content_context_t context, double relative_priority)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  double v3 = context;
  nw_content_context_t v4 = v3;
  if (v3)
  {
    if (relative_priority >= 0.0 && relative_priority <= 1.0)
    {
      if (v3 != (double *)&__block_literal_global_5_41854
        && v3 != (double *)&__block_literal_global_4
        && v3 != (double *)&__block_literal_global_3_41839
        && v3 != (double *)&__block_literal_global_41831)
      {
        v3[10] = relative_priority;
      }

      goto LABEL_12;
    }

    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_content_context_set_relative_priority";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_content_context_set_relative_priority";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null (relative_priority >= 0.0 && relative_priority <= 1.0)",  buf,  0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v24 = "nw_content_context_set_relative_priority";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null (relative_priority >= 0.0 && relative_priority <= 1.0), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v10) {
          goto LABEL_47;
        }
        goto LABEL_12;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_content_context_set_relative_priority";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null (relative_priority >= 0.0 && relative_priority <= 1.0), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_content_context_set_relative_priority";
        _os_log_impl( &dword_181A5C000,  v7,  v20,  "%{public}s called with null (relative_priority >= 0.0 && relative_priority <= 1.0), backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_45;
  }

  __nwlog_obj();
  char v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v24 = "nw_content_context_set_relative_priority";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v8 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_content_context_set_relative_priority";
      _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
    }

void nw_content_context_set_antecedent(nw_content_context_t context, nw_content_context_t antecendent_context)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  nw_content_context_t v3 = context;
  nw_content_context_t v4 = antecendent_context;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_content_context_set_antecedent";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_content_context_set_antecedent";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v22 = "nw_content_context_set_antecedent";
            __int16 v23 = 2082;
            __int16 v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_content_context_set_antecedent";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_content_context_set_antecedent";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

nw_content_context_t nw_content_context_copy_antecedent(nw_content_context_t context)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_content_context_t v1 = context;
  nw_content_context_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    nw_content_context_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_content_context_copy_antecedent";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_content_context_copy_antecedent";
          _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v16 = "nw_content_context_copy_antecedent";
            __int16 v17 = 2082;
            os_log_type_t v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_content_context_copy_antecedent";
          _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v16 = "nw_content_context_copy_antecedent";
          _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t __Block_byref_object_copy__42045(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__42046(uint64_t a1)
{
}

nw_protocol_metadata_t nw_content_context_copy_protocol_metadata( nw_content_context_t context, nw_protocol_definition_t protocol)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  nw_content_context_t v3 = context;
  nw_content_context_t v4 = protocol;
  if (v3)
  {
    uint64_t v5 = 0LL;
    if (v3 != (nw_content_context_t)&__block_literal_global_5_41854
      && v3 != (nw_content_context_t)&__block_literal_global_4
      && v3 != (nw_content_context_t)&__block_literal_global_3_41839
      && v3 != (nw_content_context_t)&__block_literal_global_41831)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v3 + 28);
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v28 = __Block_byref_object_copy__42045;
      uint64_t v29 = __Block_byref_object_dispose__42046;
      id v30 = 0LL;
      char v6 = (unsigned __int8 *)*((void *)v3 + 11);
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_content_context_copy_protocol_metadata_block_invoke;
      v22[3] = &unk_189BC7960;
      os_log_type_t v7 = v4;
      __int16 v23 = v7;
      __int16 v24 = buf;
      nw_array_apply(v6, (uint64_t)v22);
      os_unfair_lock_unlock((os_unfair_lock_t)v3 + 28);
      os_log_type_t v8 = *(void **)(*(void *)&buf[8] + 40LL);
      if (!v8)
      {
        os_log_type_t v9 = (nw_connection *)nw_content_context_copy_connection(v3);
        BOOL v10 = v9;
        if (v9)
        {
          nw_protocol_metadata_t v11 = nw_connection_copy_protocol_metadata(v9, v7);
          os_log_type_t v12 = *(void **)(*(void *)&buf[8] + 40LL);
          *(void *)(*(void *)&buf[8] + 40LL) = v11;
        }

        os_log_type_t v8 = *(void **)(*(void *)&buf[8] + 40LL);
      }

      uint64_t v5 = v8;

      _Block_object_dispose(buf, 8);
    }

    goto LABEL_11;
  }

  __nwlog_obj();
  os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_content_context_copy_protocol_metadata";
  BOOL v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v15, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_copy_protocol_metadata";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_content_context_copy_protocol_metadata";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_copy_protocol_metadata";
        _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_copy_protocol_metadata";
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1821FC9F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_content_context_copy_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  nw_protocol_definition_t v6 = nw_protocol_metadata_copy_definition(v5);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, *(void *)(a1 + 32));

  if (is_equal_unsafe) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  return !is_equal_unsafe;
}

void sub_1821FCAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_content_context_copy_connection(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  nw_content_context_t v1 = a1;
  nw_content_context_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = 0LL;
    if (v1 != (os_unfair_lock_s *)&__block_literal_global_5_41854
      && v1 != (os_unfair_lock_s *)&__block_literal_global_4
      && v1 != (os_unfair_lock_s *)&__block_literal_global_3_41839
      && v1 != (os_unfair_lock_s *)&__block_literal_global_41831)
    {
      os_unfair_lock_lock(v1 + 28);
      if ((v2[29]._os_unfair_lock_opaque & 0x100000) != 0
        && (uint64_t v4 = *(void *)&v2[26]._os_unfair_lock_opaque) != 0
        && *(void *)(v4 + 24) != *(void *)(v4 + 16))
      {
        uint64_t v3 = nw_array_get_object_at_index(v4, 0LL);
      }

      else
      {
        uint64_t v3 = 0LL;
      }

      os_unfair_lock_unlock(v2 + 28);
    }

    goto LABEL_12;
  }

  __nwlog_obj();
  nw_protocol_definition_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_content_context_copy_connection";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_content_context_copy_connection";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_content_context_copy_connection";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_content_context_copy_connection";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_content_context_copy_connection";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_content_context_foreach_protocol_metadata(nw_content_context_t context, void *foreach_block)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_content_context_t v3 = context;
  uint64_t v4 = foreach_block;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    nw_content_context_t v26 = "nw_content_context_foreach_protocol_metadata";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_content_context_t v26 = "nw_content_context_foreach_protocol_metadata";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          nw_content_context_t v26 = "nw_content_context_foreach_protocol_metadata";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8) {
          goto LABEL_8;
        }
LABEL_43:
        free(v8);
        goto LABEL_8;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        nw_content_context_t v26 = "nw_content_context_foreach_protocol_metadata";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_content_context_t v26 = "nw_content_context_foreach_protocol_metadata";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_content_context_foreach_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  nw_protocol_definition_t v6 = nw_protocol_metadata_copy_definition(v4);
  (*(void (**)(uint64_t, nw_protocol_definition_t, nw_protocol_metadata *))(v5 + 16))(v5, v6, v4);

  return 1LL;
}

void sub_1821FD39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_content_context_copy_first_repliable_metadata(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_content_context_t v1 = a1;
  nw_content_context_t v2 = v1;
  if (v1)
  {
    id v3 = 0LL;
    if (v1 != (os_unfair_lock_s *)&__block_literal_global_5_41854
      && v1 != (os_unfair_lock_s *)&__block_literal_global_4
      && v1 != (os_unfair_lock_s *)&__block_literal_global_3_41839
      && v1 != (os_unfair_lock_s *)&__block_literal_global_41831)
    {
      os_unfair_lock_lock(v1 + 28);
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      BOOL v18 = __Block_byref_object_copy__42045;
      os_log_type_t v19 = __Block_byref_object_dispose__42046;
      id v20 = 0LL;
      uint64_t v4 = *(unsigned __int8 **)&v2[22]._os_unfair_lock_opaque;
      v14[0] = MEMORY[0x1895F87A8];
      v14[1] = 3221225472LL;
      v14[2] = __nw_content_context_copy_first_repliable_metadata_block_invoke;
      v14[3] = &unk_189BC50D0;
      v14[4] = buf;
      nw_array_apply(v4, (uint64_t)v14);
      os_unfair_lock_unlock(v2 + 28);
      id v3 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  nw_protocol_definition_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_content_context_copy_first_repliable_metadata";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_copy_first_repliable_metadata";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_content_context_copy_first_repliable_metadata";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_copy_first_repliable_metadata";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_copy_first_repliable_metadata";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_content_context_copy_first_repliable_metadata_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = nw_protocol_metadata_supports_replies(v5);
  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
  }

  return v6 ^ 1u;
}

uint64_t nw_content_context_supports_replies(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_content_context_t v1 = a1;
  nw_content_context_t v2 = v1;
  if (v1)
  {
    if (v1 == (os_unfair_lock_s *)&__block_literal_global_5_41854)
    {
      uint64_t v3 = 1LL;
    }

    else
    {
      uint64_t v3 = 0LL;
      if (v1 != (os_unfair_lock_s *)&__block_literal_global_4
        && v1 != (os_unfair_lock_s *)&__block_literal_global_3_41839
        && v1 != (os_unfair_lock_s *)&__block_literal_global_41831)
      {
        os_unfair_lock_lock(v1 + 28);
        uint64_t v3 = (BYTE2(v2[29]._os_unfair_lock_opaque) >> 6) & 1;
        os_unfair_lock_unlock(v2 + 28);
      }
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_content_context_supports_replies";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_content_context_supports_replies";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_content_context_supports_replies";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_content_context_supports_replies";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_content_context_supports_replies";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_content_context_set_packet_id(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v22 = "nw_content_context_set_packet_id";
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_content_context_set_packet_id";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          id v22 = "nw_content_context_set_packet_id";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v6) {
          goto LABEL_8;
        }
LABEL_43:
        free(v6);
        goto LABEL_8;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_content_context_set_packet_id";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_content_context_set_packet_id";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL nw_content_context_get_is_wake_packet(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_content_context_t v2 = v1;
  if (v1)
  {
    BOOL v3 = 0LL;
    if (v1 != &__block_literal_global_5_41854
      && v1 != &__block_literal_global_4
      && v1 != &__block_literal_global_3_41839
      && v1 != &__block_literal_global_41831)
    {
      char v4 = *((_BYTE *)v1 + 118);
      BOOL v3 = v4 < 0;
      *((_BYTE *)v1 + 11_Block_object_dispose(&STACK[0x338], 8) = v4 & 0x7F;
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  int v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_content_context_get_is_wake_packet";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_content_context_get_is_wake_packet";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_content_context_get_is_wake_packet";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_content_context_get_is_wake_packet";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_content_context_get_is_wake_packet";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_content_context_set_app_metadata(void *a1, char a2, char a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  int v6 = v5;
  if (v5)
  {
    if (v5 != &__block_literal_global_5_41854
      && v5 != &__block_literal_global_4
      && v5 != &__block_literal_global_3_41839
      && v5 != &__block_literal_global_41831)
    {
      *((_BYTE *)v5 + 119) |= 1u;
      *((_BYTE *)v5 + 116) = a2;
      *((_BYTE *)v5 + 117) = a3;
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_content_context_set_app_metadata";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_content_context_set_app_metadata";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_content_context_set_app_metadata";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_content_context_set_app_metadata";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_content_context_set_app_metadata";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_content_context_copy_local_endpoint(void *a1)
{
  id v1 = a1;
  nw_content_context_t v2 = v1;
  if (v1 == (os_unfair_lock_s *)&__block_literal_global_5_41854
    || v1 == (os_unfair_lock_s *)&__block_literal_global_4
    || v1 == (os_unfair_lock_s *)&__block_literal_global_3_41839
    || v1 == (os_unfair_lock_s *)&__block_literal_global_41831)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    os_unfair_lock_lock(v1 + 28);
    if ((v2[29]._os_unfair_lock_opaque & 0x200000) != 0
      && (uint64_t v6 = *(void *)&v2[26]._os_unfair_lock_opaque) != 0
      && *(void *)(v6 + 24) != *(void *)(v6 + 16))
    {
      uint64_t v7 = nw_array_get_object_at_index(v6, 0LL);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    os_unfair_lock_unlock(v2 + 28);
  }

  return v7;
}

uint64_t nw_content_context_copy_remote_endpoint(void *a1)
{
  id v1 = a1;
  nw_content_context_t v2 = v1;
  if (v1 == (os_unfair_lock_s *)&__block_literal_global_5_41854
    || v1 == (os_unfair_lock_s *)&__block_literal_global_4
    || v1 == (os_unfair_lock_s *)&__block_literal_global_3_41839
    || v1 == (os_unfair_lock_s *)&__block_literal_global_41831)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    os_unfair_lock_lock(v1 + 28);
    if ((v2[29]._os_unfair_lock_opaque & 0x200000) != 0
      && (uint64_t v6 = *(void *)&v2[26]._os_unfair_lock_opaque) != 0
      && *(void *)(v6 + 24) - *(void *)(v6 + 16) >= 9uLL)
    {
      uint64_t v7 = nw_array_get_object_at_index(v6, 1uLL);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    os_unfair_lock_unlock(v2 + 28);
  }

  return v7;
}

uint64_t nw_content_context_copy_interface(void *a1)
{
  id v1 = a1;
  nw_content_context_t v2 = v1;
  if (v1 == (os_unfair_lock_s *)&__block_literal_global_5_41854
    || v1 == (os_unfair_lock_s *)&__block_literal_global_4
    || v1 == (os_unfair_lock_s *)&__block_literal_global_3_41839
    || v1 == (os_unfair_lock_s *)&__block_literal_global_41831)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    os_unfair_lock_lock(v1 + 28);
    if ((v2[29]._os_unfair_lock_opaque & 0x200000) != 0
      && (uint64_t v6 = *(void *)&v2[26]._os_unfair_lock_opaque) != 0
      && *(void *)(v6 + 24) - *(void *)(v6 + 16) >= 0x11uLL)
    {
      uint64_t v7 = nw_array_get_object_at_index(v6, 2uLL);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    os_unfair_lock_unlock(v2 + 28);
  }

  return v7;
}

uint64_t llhttp__after_headers_complete(uint64_t a1)
{
  __int16 v1 = *(_WORD *)(a1 + 82);
  if ((v1 & 8) != 0)
  {
    BOOL v2 = 1;
    if (!*(_BYTE *)(a1 + 80)) {
      goto LABEL_9;
    }
  }

  else
  {
    BOOL v2 = *(void *)(a1 + 64) != 0LL;
    if (!*(_BYTE *)(a1 + 80)) {
      goto LABEL_9;
    }
  }

  if (*(_BYTE *)(a1 + 73) == 5) {
    return 1LL;
  }
  if ((v1 & 0x40) != 0) {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 1LL;
  }
LABEL_9:
  int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 == 2)
  {
    int v4 = *(unsigned __int16 *)(a1 + 84);
    if (v4 == 101) {
      return 1LL;
    }
    uint64_t v7 = 0LL;
    if ((v1 & 0x40) != 0) {
      return v7;
    }
    if (v4 == 100) {
      return v7;
    }
    uint64_t v7 = 0LL;
  }

  else if ((v1 & 0x40) != 0)
  {
    return 0LL;
  }

  if ((v1 & 8) != 0) {
    return 2LL;
  }
  if ((*(_WORD *)(a1 + 82) & 0x200) == 0)
  {
    if ((v1 & 0x20) != 0)
    {
      if (*(void *)(a1 + 64)) {
        return 3LL;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      if (v3 == 1) {
        return 0LL;
      }
      int v6 = *(unsigned __int16 *)(a1 + 84);
      uint64_t v7 = 0LL;
      if (v6 != 204 && v6 != 304)
      {
        if ((v1 & 0x40) == 0)
        {
          int v8 = v1 & 0x208;
          unsigned int v9 = 4 * ((v1 & 0x28) == 0);
          if (v8 == 512) {
            return 4LL;
          }
          else {
            return v9;
          }
        }

        return 0LL;
      }
    }

    return v7;
  }

  if (v3 == 1 && (*(_WORD *)(a1 + 78) & 0xA) == 0) {
    return 5LL;
  }
  else {
    return 4LL;
  }
}

BOOL llhttp_message_needs_eof(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72) == 1) {
    return 0LL;
  }
  int v2 = *(unsigned __int16 *)(a1 + 84);
  uint64_t v3 = 0LL;
  if (v2 != 204 && v2 != 304)
  {
    __int16 v4 = *(_WORD *)(a1 + 82);
    BOOL v5 = (v4 & 0x208) == 0x200 || (v4 & 0x28) == 0;
    return (v4 & 0x40) == 0 && v5;
  }

  return v3;
}

void sub_18220056C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

uint64_t __Block_byref_object_copy__42530(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__42531(uint64_t a1)
{
}

void sub_1822057F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

uint64_t connectionMatchesEntitlementGroup(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v21 = a1;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id obj = a2;
  uint64_t v20 = [obj countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v20)
  {
    uint64_t v19 = *(void *)v23;
    while (2)
    {
      uint64_t v3 = 0LL;
      while (2)
      {
        if (*(void *)v23 != v19) {
          objc_enumerationMutation(obj);
        }
        __int16 v4 = *(void **)(*((void *)&v22 + 1) + 8 * v3);
        id v5 = v21;
        id v6 = v4;
        __int128 v26 = 0u;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        id v7 = v6;
        uint64_t v8 = [v7 countByEnumeratingWithState:&v26 objects:v31 count:16];
        if (!v8)
        {
LABEL_21:

          uint64_t v16 = 1LL;
          goto LABEL_22;
        }

        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v27;
LABEL_10:
        uint64_t v11 = 0LL;
        while (1)
        {
          if (*(void *)v27 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(id *)(*((void *)&v26 + 1) + 8 * v11);
          id v13 = v5;
          [v12 UTF8String];
          os_log_type_t v14 = (void *)xpc_connection_copy_entitlement_value();

          if (!v14 || object_getClass(v14) != (Class)MEMORY[0x1895F9228]) {
            break;
          }
          BOOL value = xpc_BOOL_get_value(v14);

          if (!value) {
            goto LABEL_5;
          }
          if (v9 == ++v11)
          {
            uint64_t v9 = [v7 countByEnumeratingWithState:&v26 objects:v31 count:16];
            if (v9) {
              goto LABEL_10;
            }
            goto LABEL_21;
          }
        }

LABEL_5:
        if (++v3 != v20) {
          continue;
        }
        break;
      }

      uint64_t v20 = [obj countByEnumeratingWithState:&v22 objects:v30 count:16];
      if (v20) {
        continue;
      }
      break;
    }
  }

  uint64_t v16 = 0LL;
LABEL_22:

  return v16;
}

uint64_t getMainQueue()
{
  uint64_t v0 = MEMORY[0x1895F8AE0];
  id v1 = MEMORY[0x1895F8AE0];
  return v0;
}

void sub_182207474( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
}

uint64_t __Block_byref_object_copy__42760(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__42761(uint64_t a1)
{
}

uint64_t handleOpportunistic(void *a1)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  [v1 request];
  int v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_opportunistic_ifname);

  if (!string)
  {
    uint64_t v8 = 0LL;
    uint64_t v11 = 22LL;
    goto LABEL_52;
  }

  int v4 = socket(2, 2, 0);
  if ((v4 & 0x80000000) == 0)
  {
    int v5 = v4;
    [v1 request];
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v7 = xpc_dictionary_get_BOOL(v6, (const char *)networkd_privileged_key_opportunistic_disable);

    *(_OWORD *)os_log_type_t type = 0u;
    __int128 v49 = 0u;
    __strlcpy_chk();
    LODWORD(v49) = v7;
    if (ioctl(v5, 0xC020698BuLL, type) != -1)
    {
      uint64_t v8 = DWORD1(v49);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if (v7) {
          uint64_t v10 = "";
        }
        else {
          uint64_t v10 = "un";
        }
        *(_DWORD *)buf = 136447234;
        BOOL v42 = "handleOpportunistic";
        __int16 v43 = 2082;
        *(void *)BOOL v44 = v10;
        *(_WORD *)&v44[8] = 2082;
        *(void *)&v44[10] = string;
        *(_WORD *)&v44[18] = 1024;
        int v45 = [v1 pid];
        __int16 v46 = 2048;
        uint64_t v47 = v8;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s Successfully %{public}sblocked opportunistic for %{public}s from %d count=%llu",  buf,  0x30u);
      }

      uint64_t v11 = 0LL;
LABEL_51:
      close(v5);
      goto LABEL_52;
    }

    int v18 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = (os_log_s *)(id)gLogObj;
    uint64_t v20 = v19;
    if (v18 == 6)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v42 = "handleOpportunistic";
        __int16 v43 = 1024;
        *(_DWORD *)BOOL v44 = v5;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = 6;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d",  buf,  0x18u);
      }

      uint64_t v8 = 0LL;
      uint64_t v11 = 6LL;
      goto LABEL_51;
    }

    *(_DWORD *)buf = 136446722;
    BOOL v42 = "handleOpportunistic";
    __int16 v43 = 1024;
    *(_DWORD *)BOOL v44 = v5;
    *(_WORD *)&v44[4] = 1024;
    *(_DWORD *)&v44[6] = v18;
    LODWORD(v3_Block_object_dispose(&STACK[0x338], 8) = 24;
    uint64_t v37 = buf;
    __int128 v24 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t v40 = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault((const char *)v24, &v40, &v39))
    {
LABEL_48:
      uint64_t v11 = v18;
      if (v24) {
        free(v24);
      }
      uint64_t v8 = 0LL;
      goto LABEL_51;
    }

    if (v40 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int128 v25 = (os_log_s *)(id)gLogObj;
      os_log_type_t v26 = v40;
      if (os_log_type_enabled(v25, v40))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v42 = "handleOpportunistic";
        __int16 v43 = 1024;
        *(_DWORD *)BOOL v44 = v5;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v18;
        __int128 v27 = "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d";
LABEL_45:
        uint64_t v33 = v25;
        os_log_type_t v34 = v26;
LABEL_46:
        _os_log_impl(&dword_181A5C000, v33, v34, v27, buf, 0x18u);
      }
    }

    else
    {
      if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int128 v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v31 = v40;
        BOOL v32 = os_log_type_enabled(v25, v40);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446978;
            BOOL v42 = "handleOpportunistic";
            __int16 v43 = 1024;
            *(_DWORD *)BOOL v44 = v5;
            *(_WORD *)&v44[4] = 1024;
            *(_DWORD *)&v44[6] = v18;
            *(_WORD *)&v44[10] = 2082;
            *(void *)&v44[12] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v31,  "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x22u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }

        if (!v32) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446722;
        BOOL v42 = "handleOpportunistic";
        __int16 v43 = 1024;
        *(_DWORD *)BOOL v44 = v5;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v18;
        __int128 v27 = "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d, no backtrace";
        uint64_t v33 = v25;
        os_log_type_t v34 = v31;
        goto LABEL_46;
      }

      __nwlog_obj();
      __int128 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = v40;
      if (os_log_type_enabled(v25, v40))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v42 = "handleOpportunistic";
        __int16 v43 = 1024;
        *(_DWORD *)BOOL v44 = v5;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v18;
        __int128 v27 = "%{public}s ioctl(%d, SIOCSIFOPPORTUNISTIC, ...) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_45;
      }
    }

uint64_t handleCreateNetworkAgentKernelSocket(void *a1)
{
  return internalHandleCreateKernelSocket(a1, (uint64_t)"com.apple.net.netagent");
}

uint64_t handleCreateNetworkAdvisoryKernelSocket(void *a1)
{
  return internalHandleCreateKernelSocket(a1, (uint64_t)"com.apple.network.advisory");
}

uint64_t handleSetNetworkAgentOnInterface(void *a1)
{
  return internalHandleSetNetworkAgentOnInterface(a1, 0);
}

uint64_t handleSetPersistentNetworkAgentOnInterface(void *a1)
{
  return internalHandleSetNetworkAgentOnInterface(a1, 1);
}

uint64_t handleReloadManagedNetworkSettings()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v0 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136446210;
    int v5 = "handleReloadManagedNetworkSettings";
    _os_log_impl( &dword_181A5C000,  v0,  OS_LOG_TYPE_DEFAULT,  "%{public}s Reloading managed network settings",  (uint8_t *)&v4,  0xCu);
  }

  id v1 = +[ManagedNetworkSettings sharedMNS](&OBJC_CLASS___ManagedNetworkSettings, "sharedMNS");
  [v1 reloadNetworkdSettings];

  id v2 = +[ManagedNetworkSettings sharedMNS](&OBJC_CLASS___ManagedNetworkSettings, "sharedMNS");
  [v2 reloadMNS];

  return 0LL;
}

uint64_t handleCheckMobileAsset()
{
  v34[3] = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v1 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nwphCheckMobileAsset";
    _os_log_impl(&dword_181A5C000, v1, OS_LOG_TYPE_DEBUG, "%{public}s starting mobile asset check", buf, 0xCu);
  }

  gotLoadHelper_x26__OBJC_CLASS___MAAsset(v2);
  if (objc_opt_class())
  {
    [MEMORY[0x189603FC8] dictionaryWithContentsOfFile:@"/Library/Preferences/com.apple.networkd.networknomicon.plist"];
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    if (!v3) {
      id v3 = objc_alloc_init(MEMORY[0x189603FC8]);
    }
    int v4 = (void *)MEMORY[0x189603F50];
    id v5 = v3;
    [v4 date];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 objectForKeyedSubscript:@"LastAttempt"];
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 objectForKeyedSubscript:@"LastSuccess"];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 objectForKeyedSubscript:@"PollFrequencySeconds"];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      uint64_t v10 = [v9 longLongValue];
      double v11 = 86400.0;
    }

    else
    {
      double v11 = 86400.0;
    }

    char v12 = nwphShouldRunCheck(v6, v7, v8, 1, 3600.0, v11);

    if ((v12 & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphCheckMobileAsset";
        _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_DEBUG, "%{public}s skipping Mobile Asset attempt", buf, 0xCu);
      }

      goto LABEL_37;
    }

    [MEMORY[0x189603F50] date];
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 setObject:v13 forKeyedSubscript:@"LastAttempt"];

    if ([v5 writeToFile:@"/Library/Preferences/com.apple.networkd.networknomicon.plist" atomically:1])
    {
LABEL_34:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int128 v25 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphCheckMobileAsset";
        _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEFAULT,  "%{public}s starting mobile asset catalog download",  buf,  0xCu);
      }

      os_log_type_t v26 = *(void **)(v0 + 216);
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nwphCheckMobileAsset_block_invoke;
      uint64_t v33 = (const __CFString *)&unk_189BB92F0;
      v34[0] = v5;
      [v26 startCatalogDownload:@"com.apple.MobileAsset.network.networknomicon" then:buf];
      uint64_t v19 = (os_log_s *)v34[0];
LABEL_37:

      goto LABEL_38;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nwphCheckMobileAsset";
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 2114;
    uint64_t v33 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
    char v15 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault((const char *)v15, &type, &v30))
    {
LABEL_32:
      if (v15) {
        free(v15);
      }
      goto LABEL_34;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nwphCheckMobileAsset";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        uint64_t v33 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
        int v18 = "%{public}s Failed to save mobile asset networknomicon attempt %{public}@ to %{public}@";
LABEL_29:
        BOOL v23 = v16;
        os_log_type_t v24 = v17;
LABEL_30:
        _os_log_impl(&dword_181A5C000, v23, v24, v18, buf, 0x20u);
      }
    }

    else
    {
      if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nwphCheckMobileAsset";
            *(_WORD *)&_BYTE buf[12] = 2114;
            *(void *)&buf[14] = v5;
            *(_WORD *)&buf[22] = 2114;
            uint64_t v33 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
            LOWORD(v34[0]) = 2082;
            *(void *)((char *)v34 + 2) = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s Failed to save mobile asset networknomicon attempt %{public}@ to %{public}@, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (!v22) {
          goto LABEL_31;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nwphCheckMobileAsset";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        uint64_t v33 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
        int v18 = "%{public}s Failed to save mobile asset networknomicon attempt %{public}@ to %{public}@, no backtrace";
        BOOL v23 = v16;
        os_log_type_t v24 = v21;
        goto LABEL_30;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nwphCheckMobileAsset";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        uint64_t v33 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
        int v18 = "%{public}s Failed to save mobile asset networknomicon attempt %{public}@ to %{public}@, backtrace limit exceeded";
        goto LABEL_29;
      }
    }

uint64_t handleSetNetworkdSetting(void *a1)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  [v1 request];
  double v2 = (void *)objc_claimAutoreleasedReturnValue();
  string = xpc_dictionary_get_string(v2, (const char *)networkd_privileged_key_settings_key);

  if (string)
  {
    [v1 request];
    int v4 = (void *)objc_claimAutoreleasedReturnValue();
    id v5 = xpc_dictionary_get_string(v4, (const char *)networkd_privileged_key_settings_file_prefix);

    if (v5)
    {
      [NSString stringWithUTF8String:v5];
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
      [MEMORY[0x189607930] characterSetWithCharactersInString:@"_-"];
      BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();
      [MEMORY[0x189607810] alphanumericCharacterSet];
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
      [v7 formUnionWithCharacterSet:v8];

      [v7 invertedSet];
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
      if ([v6 rangeOfCharacterFromSet:v9] != 0x7FFFFFFFFFFFFFFFLL)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v14 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "handleSetNetworkdSetting";
          __int16 v41 = 1024;
          *(_DWORD *)BOOL v42 = [v1 pid];
          *(_WORD *)&v42[4] = 2082;
          *(void *)&v42[6] = v5;
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s pid %d sent us file_prefix %{public}s containing invalid characters",  buf,  0x1Cu);
        }

        id v10 = 0LL;
        uint64_t v11 = 22LL;
        goto LABEL_33;
      }

      [NSString stringWithFormat:@"%@%@%@", @"/Library/Preferences/com.apple.networkd.", v6, @".plist"];
      id v10 = (id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      [NSString stringWithUTF8String:nw_file_path_settings];
      id v10 = (id)objc_claimAutoreleasedReturnValue();
    }

    [v1 request];
    char v12 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_get_value(v12, (const char *)networkd_privileged_key_settings_value);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();

    [MEMORY[0x189603FC8] dictionaryWithContentsOfFile:v10];
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    if (v6) {
      BOOL v7 = (void *)_CFXPCCreateCFObjectFromXPCObject();
    }
    else {
      BOOL v7 = 0LL;
    }
    [NSString stringWithUTF8String:string];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      if (!v13)
      {
        [MEMORY[0x189603FC8] dictionary];
        id v13 = (id)objc_claimAutoreleasedReturnValue();
      }

      [v13 objectForKeyedSubscript:v9];
      char v15 = (void *)objc_claimAutoreleasedReturnValue();
      char v16 = [v7 isEqual:v15];

      if ((v16 & 1) == 0)
      {
        [v13 setObject:v7 forKeyedSubscript:v9];
        if (!v13) {
          goto LABEL_45;
        }
        goto LABEL_25;
      }
    }

    else if (v13)
    {
      [v13 objectForKeyedSubscript:v9];
      os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (v17)
      {
        [v13 removeObjectForKey:v9];
        if (![v13 count])
        {

LABEL_45:
          if (unlink((const char *)[v10 UTF8String]))
          {
            int v29 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v30 = (id)gLogObj;
            *(_DWORD *)buf = 136446722;
            os_log_type_t v40 = "handleSetNetworkdSetting";
            __int16 v41 = 2114;
            *(void *)BOOL v42 = v10;
            *(_WORD *)&v42[8] = 1024;
            *(_DWORD *)&v42[10] = v29;
            os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v37 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v32 = (os_log_s *)(id)gLogObj;
              os_log_type_t v33 = type;
              if (os_log_type_enabled(v32, type))
              {
                *(_DWORD *)buf = 136446722;
                os_log_type_t v40 = "handleSetNetworkdSetting";
                __int16 v41 = 2114;
                *(void *)BOOL v42 = v10;
                *(_WORD *)&v42[8] = 1024;
                *(_DWORD *)&v42[10] = v29;
                os_log_type_t v34 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d";
LABEL_70:
                _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0x1Cu);
              }
            }

            else
            {
              if (v37)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                BOOL v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v33 = type;
                BOOL v36 = os_log_type_enabled(v32, type);
                if (backtrace_string)
                {
                  if (v36)
                  {
                    *(_DWORD *)buf = 136446978;
                    os_log_type_t v40 = "handleSetNetworkdSetting";
                    __int16 v41 = 2114;
                    *(void *)BOOL v42 = v10;
                    *(_WORD *)&v42[8] = 1024;
                    *(_DWORD *)&v42[10] = v29;
                    *(_WORD *)&v42[14] = 2082;
                    *(void *)&v42[16] = backtrace_string;
                    _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s unlink(%{public}@) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x26u);
                  }

                  free(backtrace_string);
                  goto LABEL_72;
                }

                if (!v36) {
                  goto LABEL_71;
                }
                *(_DWORD *)buf = 136446722;
                os_log_type_t v40 = "handleSetNetworkdSetting";
                __int16 v41 = 2114;
                *(void *)BOOL v42 = v10;
                *(_WORD *)&v42[8] = 1024;
                *(_DWORD *)&v42[10] = v29;
                os_log_type_t v34 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, no backtrace";
                goto LABEL_70;
              }

              __nwlog_obj();
              BOOL v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v33 = type;
              if (os_log_type_enabled(v32, type))
              {
                *(_DWORD *)buf = 136446722;
                os_log_type_t v40 = "handleSetNetworkdSetting";
                __int16 v41 = 2114;
                *(void *)BOOL v42 = v10;
                *(_WORD *)&v42[8] = 1024;
                *(_DWORD *)&v42[10] = v29;
                os_log_type_t v34 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, backtrace limit exceeded";
                goto LABEL_70;
              }
            }