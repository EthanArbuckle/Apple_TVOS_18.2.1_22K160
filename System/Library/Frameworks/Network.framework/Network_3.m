LABEL_37:
  if (v10) {
    free(v10);
  }
  v7 = 0LL;
LABEL_4:

  return v7;
}

    goto LABEL_38;
  }

  if (v4)
  {
    nw_context_activate(v4);
    v6 = nw_context_copy_cache_context(v5);
    v7 = v3[13];
    v8 = *(void **)(v7 + 136);
    *(void *)(v7 + 136) = v6;

    goto LABEL_4;
  }

  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_parameters_set_context";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_parameters_set_context";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null context", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_parameters_set_context";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_parameters_set_context";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null context, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_parameters_set_context";
    v27 = 2082;
    v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v7) {
    free(v7);
  }
  if (v5)
  {
LABEL_40:
    free((void *)v5);
    return 0LL;
  }

  return v5;
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return v6;
}

    goto LABEL_38;
  }

  if (v4)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_connection_set_queue_block_invoke;
    v22[3] = &unk_189BC9238;
    v6 = v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_set_queue_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_set_queue";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_set_queue";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null queue", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_set_queue";
      _os_log_impl(&dword_181A5C000, v10, v21, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_set_queue";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_set_queue";
    v27 = 2082;
    v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

LABEL_38:
    if (!v3) {
      return 0LL;
    }
    goto LABEL_12;
  }

  if (gLogDatapath)
  {
    __nwlog_obj();
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v19 = 136446467;
      *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
      *(_WORD *)&v19[12] = 2117;
      *(void *)&v19[14] = url;
      _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_DEBUG, "%{public}s Sanitizing URL: %{sensitive}@", v19, 0x16u);
    }
  }

  v2 = CFURLGetBytes(url, 0LL, 0LL);
  v3 = nw_calloc_type<unsigned char>(v2 + 1);
  CFURLGetBytes(url, (UInt8 *)v3, v2);
  CFURLGetByteRangeForComponent(url, kCFURLComponentQuery, &rangeIncludingSeparators);
  v4 = rangeIncludingSeparators.location;
  if (rangeIncludingSeparators.location != -1
    || (CFURLGetByteRangeForComponent(url, kCFURLComponentFragment, (CFRange *)v19),
        v4 = *(void *)v19,
        *(void *)v19 != -1LL))
  {
    *(_BYTE *)(v3 + v4) = 0;
  }

  v5 = CFURLGetByteRangeForComponent(url, kCFURLComponentUser, 0LL);
  v6 = CFURLGetByteRangeForComponent(url, kCFURLComponentPassword, 0LL);
  if (v5.location != -1)
  {
    v7 = v5.location + v5.length;
    if (v6.location != -1) {
      v7 = v6.location + v6.length;
    }
    memmove((void *)(v3 + v5.location), (const void *)(v3 + v7 + 1), v2 - v7);
  }

  if (gLogDatapath)
  {
    __nwlog_obj();
    v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v19 = 136446466;
      *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
      *(_WORD *)&v19[12] = 2082;
      *(void *)&v19[14] = v3;
      _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_DEBUG, "%{public}s Sanitized URL: %{public}s", v19, 0x16u);
    }

    if (!*(_BYTE *)v3) {
      goto LABEL_12;
    }
  }

  else if (!*(_BYTE *)v3)
  {
LABEL_12:
    free((void *)v3);
    return 0LL;
  }

  return v3;
}

    goto LABEL_38;
  }

  if (v4)
  {
    objc_storeStrong(v3 + 1, a2);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_endpoint_set_context";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_endpoint_set_context";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_endpoint_set_context";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_endpoint_set_context";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_endpoint_set_context";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v9) {
    free(v9);
  }
  is_equal_unsafe = 0LL;
LABEL_4:

  return is_equal_unsafe;
}

  if (v11) {
    free(v11);
  }
  v8 = 0LL;
LABEL_4:

  return v8;
}

  if (v11) {
    free(v11);
  }
  return 0LL;
}

    goto LABEL_38;
  }

  uuid_clear(a2);
  if (v3)
  {
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 452);
    goto LABEL_4;
  }

  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_connection_get_uuid";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v9 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "nw_connection_get_uuid";
      _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null connection", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v18)
  {
    __nwlog_obj();
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "nw_connection_get_uuid";
      _os_log_impl( &dword_181A5C000,  v6,  v17,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v13 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v14 = type;
  v15 = os_log_type_enabled(v6, type);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v21 = "nw_connection_get_uuid";
      _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v21 = "nw_connection_get_uuid";
    v22 = 2082;
    v23 = v13;
    _os_log_impl( &dword_181A5C000,  v6,  v14,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v5) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v8) {
    free(v8);
  }
  v5 = 0LL;
LABEL_4:

  return v5;
}

  if (v8) {
    free(v8);
  }
  v5 = 0LL;
LABEL_4:

  return v5;
}

    goto LABEL_38;
  }

  output_handler = a1->output_handler;
  if (!output_handler)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_flow_passthrough_get_output_frames";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_output_frames";
        v15 = "%{public}s called with null protocol->output_handler";
        goto LABEL_36;
      }
    }

    else
    {
      if (v21)
      {
        v19 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v14 = type;
        v20 = os_log_type_enabled(v13, type);
        if (v19)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_flow_passthrough_get_output_frames";
            v25 = 2082;
            v26 = v19;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v19);
          if (!v12) {
            return 0LL;
          }
          goto LABEL_39;
        }

        if (!v20) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_output_frames";
        v15 = "%{public}s called with null protocol->output_handler, no backtrace";
        goto LABEL_36;
      }

      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_output_frames";
        v15 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
        goto LABEL_36;
      }
    }

    goto LABEL_37;
  }

  callbacks = output_handler->callbacks;
  if (callbacks)
  {
    get_output_frames = (uint64_t (*)(void))callbacks->get_output_frames;
    if (get_output_frames) {
      return get_output_frames();
    }
  }

  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v24 = "nw_flow_passthrough_get_output_frames";
    _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_INFO,  "%{public}s Output protocol handler does not support get_output_frames",  buf,  0xCu);
  }

  return 0LL;
}

    goto LABEL_38;
  }

  output_handler = a1->output_handler;
  if (!output_handler)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_flow_passthrough_finalize_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_flow_passthrough_finalize_output_frames";
        v11 = "%{public}s called with null protocol->output_handler";
        goto LABEL_36;
      }
    }

    else
    {
      if (v17)
      {
        v15 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v10 = type;
        v16 = os_log_type_enabled(v9, type);
        if (v15)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_flow_passthrough_finalize_output_frames";
            v21 = 2082;
            v22 = v15;
            _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v15);
          if (!v8) {
            return 0LL;
          }
          goto LABEL_39;
        }

        if (!v16) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        v20 = "nw_flow_passthrough_finalize_output_frames";
        v11 = "%{public}s called with null protocol->output_handler, no backtrace";
        goto LABEL_36;
      }

      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_flow_passthrough_finalize_output_frames";
        v11 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
        goto LABEL_36;
      }
    }

    goto LABEL_37;
  }

  callbacks = output_handler->callbacks;
  if (callbacks)
  {
    finalize_output_frames = (uint64_t (*)(void))callbacks->finalize_output_frames;
    if (finalize_output_frames) {
      return finalize_output_frames();
    }
  }

  __nwlog_obj();
  v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v20 = "nw_flow_passthrough_finalize_output_frames";
    _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s Output protocol handler does not support finalize_output_frames",  buf,  0xCu);
  }

  return 0LL;
}

    goto LABEL_38;
  }

  output_handler = a1->output_handler;
  if (!output_handler)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_flow_passthrough_get_input_frames";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_input_frames";
        v15 = "%{public}s called with null protocol->output_handler";
        goto LABEL_36;
      }
    }

    else
    {
      if (v21)
      {
        v19 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v14 = type;
        v20 = os_log_type_enabled(v13, type);
        if (v19)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_flow_passthrough_get_input_frames";
            v25 = 2082;
            v26 = v19;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v19);
          if (!v12) {
            return 0LL;
          }
          goto LABEL_39;
        }

        if (!v20) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_input_frames";
        v15 = "%{public}s called with null protocol->output_handler, no backtrace";
        goto LABEL_36;
      }

      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_input_frames";
        v15 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
        goto LABEL_36;
      }
    }

    goto LABEL_37;
  }

  callbacks = output_handler->callbacks;
  if (callbacks)
  {
    get_input_frames = (uint64_t (*)(void))callbacks->get_input_frames;
    if (get_input_frames) {
      return get_input_frames();
    }
  }

  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v24 = "nw_flow_passthrough_get_input_frames";
    _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_INFO,  "%{public}s Output protocol handler does not support get_input_frames",  buf,  0xCu);
  }

  return 0LL;
}

  if (v7) {
    free(v7);
  }
  v4 = 0LL;
LABEL_4:

  return v4;
}

    goto LABEL_38;
  }

  if (a3)
  {
    nw_connection_modify_estimated_bytes(v5, a2, 1, a3);
    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_connection_increment_estimated_bytes";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_increment_estimated_bytes";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null estimated_bytes", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v21)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_increment_estimated_bytes";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null estimated_bytes, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_increment_estimated_bytes";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null estimated_bytes, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_connection_increment_estimated_bytes";
    v25 = 2082;
    v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null estimated_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)*((void *)v3 + 9);
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_establishment_report_enumerate_resolution_reports_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_resolution_reports";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_resolution_reports";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_resolution_reports";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_resolution_reports";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_resolution_reports";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)*((void *)v3 + 8);
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_establishment_report_enumerate_protocols_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_protocols";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_protocols";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_protocols";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_protocols";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_protocols";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_38;
  }

  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks && (output_finished = (void (*)(void))callbacks->output_finished) != 0LL)
    {
      output_finished();
    }

    else
    {
      v6 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        identifier = (nw_protocol_identifier *)"<null>";
        if (a1->identifier) {
          identifier = a1->identifier;
        }
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_default_output_finished";
        v20 = 2082;
        v21 = identifier;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Protocol %{public}s does not support output finished",  buf,  0x16u);
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_default_output_finished";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v9 = (os_log_s *)__nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_default_output_finished";
    v11 = "%{public}s called with null protocol->output_handler";
    goto LABEL_37;
  }

  if (!v16)
  {
    v9 = (os_log_s *)__nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_default_output_finished";
    v11 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  v9 = (os_log_s *)__nwlog_obj();
  v10 = type;
  v15 = os_log_type_enabled(v9, type);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_default_output_finished";
    v11 = "%{public}s called with null protocol->output_handler, no backtrace";
    goto LABEL_37;
  }

  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v19 = "nw_protocol_default_output_finished";
    v20 = 2082;
    v21 = (nw_protocol_identifier *)v14;
    _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v8) {
LABEL_39:
  }
    free(v8);
}

    if (!v19) {
      goto LABEL_39;
    }
LABEL_38:
    free(v19);
    goto LABEL_39;
  }

  v8 = (unsigned int *)v6;
  v9 = v8[29];

  if ((_DWORD)v9 == 5)
  {
    child_endpoint_handlers = (unsigned __int8 *)self->child_endpoint_handlers;
    v36[0] = MEMORY[0x1895F87A8];
    v36[1] = 3221225472LL;
    v36[2] = __61__NWConcrete_nw_endpoint_transform_cancelWithHandler_forced___block_invoke;
    v36[3] = &__block_descriptor_33_e35_B24__0Q8__NSObject_OS_nw_object__16l;
    v37 = a4;
    nw_array_apply(child_endpoint_handlers, (uint64_t)v36);
    v11 = self->child_endpoint_handlers;
    self->child_endpoint_handlers = 0LL;

    failed_child_endpoint_handlers = self->failed_child_endpoint_handlers;
    self->failed_child_endpoint_handlers = 0LL;

    blocked_protocols = self->blocked_protocols;
    self->blocked_protocols = 0LL;

    self->next_child_endpoint_index = 0;
    fallback_modes = self->fallback_modes;
    self->fallback_modes = 0LL;

    child_timer = self->child_timer;
    if (child_timer)
    {
      nw_queue_cancel_source((uint64_t)child_timer, v15);
      self->child_timer = 0LL;
    }

    goto LABEL_39;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v17 = (id)gLogObj;
  else {
    v18 = off_189BBBBC0[v9];
  }
  *(_DWORD *)buf = 136446722;
  v41 = "-[NWConcrete_nw_endpoint_transform cancelWithHandler:forced:]";
  v42 = 2082;
  v43 = (void *)v18;
  v44 = 2082;
  v45 = "transform";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v38 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (os_log_s *)(id)gLogObj;
    v21 = type;
    if (os_log_type_enabled(v20, type))
    {
      else {
        v22 = off_189BBBBC0[v9];
      }
      *(_DWORD *)buf = 136446722;
      v41 = "-[NWConcrete_nw_endpoint_transform cancelWithHandler:forced:]";
      v42 = 2082;
      v43 = (void *)v22;
      v44 = 2082;
      v45 = "transform";
      _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

  if (v17) {
    free(v17);
  }
LABEL_20:

  return v2 != 0LL;
}

      free(backtrace_string);
    }
  }

  __break(1u);
  return result;
}

    v12 = sub_18264F4EC();
    goto LABEL_38;
  }

  return v12 & 1;
}

  v46 = a2;
  v47 = v12;
  v48 = sub_181C94200;
  v49 = 0LL;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
  sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
  sub_18264EB14();
  v15 = 0LL;
  v17 = 0xE000000000000000LL;
LABEL_38:
  if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v15, v17)) {
    goto LABEL_93;
  }
LABEL_39:
  if (!a3)
  {
    v22 = 0LL;
    goto LABEL_52;
  }

  v18 = strlen(a3);
  if (!v18) {
    goto LABEL_48;
  }
  if ((*a3 & 0x80000000) == 0)
  {
    if (v18 == 1) {
      goto LABEL_48;
    }
    if ((a3[1] & 0x80000000) == 0)
    {
      v19 = v18 - 2;
      if (v18 != 2)
      {
        v20 = a3 + 2;
        while ((*v20 & 0x80000000) == 0)
        {
          ++v20;
          if (!--v19) {
            goto LABEL_48;
          }
        }

        goto LABEL_50;
      }
}

    free(v16);
    goto LABEL_38;
  }

  if ((*((_BYTE *)v3 + 52) & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_browse_result_remove_interface";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = (os_log_s *)(id)gLogObj;
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_browse_result_remove_interface";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s browse_result was marked immutable", buf, 0xCu);
      }

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (void *)*((void *)v3 + 2);
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_browse_result_enumerate_interfaces_block_invoke;
    v22[3] = &unk_189BC8628;
    v23 = v4;
    v7 = v6;
    nw_array_apply(v7, (uint64_t)v22);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_browse_result_enumerate_interfaces";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_browse_result_enumerate_interfaces";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null enumerator", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_browse_result_enumerate_interfaces";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_browse_result_enumerate_interfaces";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_browse_result_enumerate_interfaces";
    v28 = 2082;
    v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v34 = v26;
      v35 = [v34 countByEnumeratingWithState:&v49 objects:v57 count:16];
      if (v35)
      {
        v36 = *(void *)v50;
        do
        {
          v37 = 0LL;
          do
          {
            if (*(void *)v50 != v36) {
              objc_enumerationMutation(v34);
            }
            (*(void (**)(void))(*(void *)(*((void *)&v49 + 1) + 8 * v37) + 16LL))(*(void *)(*((void *)&v49 + 1) + 8 * v37));
            ++v37;
          }

          while (v35 != v37);
          v35 = [v34 countByEnumeratingWithState:&v49 objects:v57 count:16];
        }

        while (v35);
      }

      if (v30) {
        goto LABEL_50;
      }
      v38 = *(void *)(a1 + 32);
      if (!v38) {
        goto LABEL_63;
      }
      if (!*(_BYTE *)(v38 + 9))
      {
        *(_BYTE *)(v38 + 9) = 1;
        v39 = *(void *)(a1 + 32);
        if (v39) {
          v40 = *(nw_connection **)(v39 + 64);
        }
        else {
LABEL_63:
        }
          v40 = 0LL;
        nw_connection_cancel(v40);
      }

  if (v6) {
    free(v6);
  }
  return 0LL;
}

    free(backtrace_string);
    goto LABEL_51;
  }

  v8 = (os_log_s *)__nwlog_obj();
  v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_shoes_get_parameters";
    v10 = "%{public}s called with null protocol->default_input_handler";
    goto LABEL_50;
  }

    free(backtrace_string);
    goto LABEL_47;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_shoes_get_local_endpoint";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = (os_log_s *)__nwlog_obj();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_shoes_get_local_endpoint";
        v11 = "%{public}s called with null shoes";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (!v16)
    {
      v9 = (os_log_s *)__nwlog_obj();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_shoes_get_local_endpoint";
        v11 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = (os_log_s *)__nwlog_obj();
    v10 = type;
    v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_shoes_get_local_endpoint";
        v11 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_shoes_get_local_endpoint";
      v20 = 2082;
      v21 = backtrace_string;
      v14 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  v3 = handle[235];
  if ((v3 & 0x20) == 0)
  {
    handle[235] = v3 | 0x20;
    if (*((void *)handle + 9))
    {
      output_handler = a1->output_handler;
      if (!output_handler
        || (get_output_local_endpoint = (uint64_t (*)(void))output_handler->callbacks->get_output_local_endpoint) == 0LL
        || (result = get_output_local_endpoint()) == 0)
      {
        result = (uint64_t)a1->default_input_handler;
        if (result)
        {
          v7 = *(uint64_t (**)(void))(*(void *)(result + 24) + 128LL);
          if (v7) {
            result = v7();
          }
          else {
            result = 0LL;
          }
        }
      }

      goto LABEL_15;
    }
  }

  result = (uint64_t)a1->default_input_handler;
  if (!result)
  {
LABEL_14:
    if ((v3 & 0x20) != 0) {
      return result;
    }
    goto LABEL_15;
  }

  if (*(void *)(*(void *)(result + 24) + 128LL))
  {
    result = nw_protocol_get_local_endpoint(result);
    goto LABEL_14;
  }

  result = 0LL;
  if ((v3 & 0x20) == 0) {
LABEL_15:
  }
    handle[235] &= ~0x20u;
  return result;
}

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_38;
  }

  v3 = a1;
  v4 = *((id *)v3 + 1);

  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_shoes_get_definition(void)::proxy_definition))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    v21 = 0LL;
    v5 = MEMORY[0x1895F87A8];
    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 0x40000000LL;
    v17[2] = __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke;
    v17[3] = &unk_189BB5720;
    v17[4] = buf;
    v6 = *((void *)v3 + 4);
    if (v6)
    {
      __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke((uint64_t)v17, v6);
      v7 = *(unsigned __int8 **)(*(void *)&buf[8] + 24LL);
      if (v7)
      {
        v16[0] = v5;
        v16[1] = 0x40000000LL;
        v16[2] = __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke_2;
        v16[3] = &unk_189BB5748;
        v16[4] = a2;
        nw_array_apply(v7, (uint64_t)v16);
      }
    }

    _Block_object_dispose(buf, 8);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();
  v19 = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (v19 == OS_LOG_TYPE_FAULT)
  {
    v9 = (os_log_s *)__nwlog_obj();
    v10 = v19;
    if (!os_log_type_enabled(v9, v19)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    v11 = "%{public}s metadata must be shoes";
    goto LABEL_37;
  }

  if (!v18)
  {
    v9 = (os_log_s *)__nwlog_obj();
    v10 = v19;
    if (!os_log_type_enabled(v9, v19)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    v11 = "%{public}s metadata must be shoes, backtrace limit exceeded";
    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  v9 = (os_log_s *)__nwlog_obj();
  v10 = v19;
  v15 = os_log_type_enabled(v9, v19);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    v11 = "%{public}s metadata must be shoes, no backtrace";
    goto LABEL_37;
  }

  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v14;
    _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s metadata must be shoes, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v8) {
    goto LABEL_39;
  }
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)nw_context_copy_proxy_configs(v3);
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_context_enumerate_proxy_configs_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v5;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_context_enumerate_proxy_configs";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_context_enumerate_proxy_configs";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_context_enumerate_proxy_configs";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_context_enumerate_proxy_configs";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_context_enumerate_proxy_configs";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  v5 = *((void *)v3 + 5);
  if (v5)
  {
    *(void *)(v5 + 96) = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_context_set_association_dormant_delay";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_context_set_association_dormant_delay";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context->isolated_context", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_context_set_association_dormant_delay";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null context->isolated_context, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_context_set_association_dormant_delay";
      _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null context->isolated_context, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_context_set_association_dormant_delay";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null context->isolated_context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  v5 = *((void *)v3 + 5);
  if (v5)
  {
    *(void *)(v5 + 104) = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_context_set_context_purge_delay";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_context_set_context_purge_delay";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context->isolated_context", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_context_set_context_purge_delay";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null context->isolated_context, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_context_set_context_purge_delay";
      _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null context->isolated_context, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_context_set_context_purge_delay";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null context->isolated_context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v11) {
    free(v11);
  }
  v8 = 0LL;
LABEL_4:

  return v8;
}

  if (v10) {
    free(v10);
  }
  v7 = 0LL;
LABEL_4:

  return v7;
}

  if (v16) {
    free(v16);
  }
  v11 = 0LL;
LABEL_7:

  return v11;
}

      return 0LL;
    }

    if (a4 == 8 && a6 == 1) {
      return 0LL;
    }
LABEL_71:
    v26 = (v14 & 4) == 0;
    v27 = a5 ^ 1;
    if ((v14 & 4) != 0 && (a7 & 1) == 0 && !v27) {
      return 0LL;
    }
    goto LABEL_74;
  }

  if (!a4)
  {
    if (a7)
    {
      if (*((_DWORD *)a1 + 42) == -1)
      {
        __nwlog_obj();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_ws_validate_frame";
          v44 = 2082;
          v45 = (char *)a1 + 227;
          v19 = "%{public}s %{public}s input continuation frame was received without context";
          goto LABEL_64;
        }

        goto LABEL_65;
      }

      if (!a3)
      {
        if (a2) {
          *((_DWORD *)a1 + 42) = -1;
        }
        goto LABEL_68;
      }

      __nwlog_obj();
      v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_65;
      }
    }

    else
    {
      if (*((_DWORD *)a1 + 43) == -1)
      {
        __nwlog_obj();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_ws_validate_frame";
          v44 = 2082;
          v45 = (char *)a1 + 227;
          v19 = "%{public}s %{public}s output continuation frame was sent without context";
          goto LABEL_64;
        }

        goto LABEL_65;
      }

      if (!a3)
      {
        if (a2) {
          *((_DWORD *)a1 + 43) = -1;
        }
        goto LABEL_71;
      }

      __nwlog_obj();
      v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_65;
      }
    }

    *(_DWORD *)buf = 136446466;
    v43 = "nw_ws_validate_frame";
    v44 = 2082;
    v45 = (char *)a1 + 227;
    v19 = "%{public}s %{public}s rsv1 cannot be set on continuation frame";
    goto LABEL_64;
  }

  if (a4 > 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v21 = "output";
      *(_DWORD *)buf = 136446978;
      v43 = "nw_ws_validate_frame";
      v45 = (char *)a1 + 227;
      v44 = 2082;
      if (a7) {
        v21 = "input";
      }
      v46 = 2082;
      v47 = v21;
      v48 = 1024;
      LODWORD(v49) = a4;
      v17 = "%{public}s %{public}s %{public}s unknown opcode %d for message";
      v22 = v15;
      v23 = 38;
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if (!a7)
  {
    if (*((_DWORD *)a1 + 43) == -1)
    {
      if ((v14 & 0x40) != 0 || !a3)
      {
        if ((a2 & 1) == 0) {
          *((_DWORD *)a1 + 43) = a4;
        }
        goto LABEL_71;
      }

      __nwlog_obj();
      v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v43 = "nw_ws_validate_frame";
        v44 = 2082;
        v45 = (char *)a1 + 227;
        v19 = "%{public}s %{public}s sending compressed data without correct state";
        goto LABEL_64;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v43 = "nw_ws_validate_frame";
        v44 = 2082;
        v45 = (char *)a1 + 227;
        v19 = "%{public}s %{public}s output continuation context should be invalid here";
        goto LABEL_64;
      }
    }

    goto LABEL_65;
  }

  if (*((_DWORD *)a1 + 42) != -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v43 = "nw_ws_validate_frame";
      v44 = 2082;
      v45 = (char *)a1 + 227;
      v19 = "%{public}s %{public}s input continuation context should be invalid here";
LABEL_64:
      _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x16u);
    }

    if (v19) {
      free(v19);
    }
LABEL_39:
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_instance_registrar_copy_next_registered_endpoint";
    v27 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_instance_registrar_copy_next_registered_endpoint";
          _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s finding the next endpoint requires a registered endpoint",  buf,  0xCu);
        }
      }

      else if (v35)
      {
        v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_protocol_instance_registrar_copy_next_registered_endpoint";
            v39 = 2082;
            v40 = v30;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s finding the next endpoint requires a registered endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v30);
          goto LABEL_55;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_instance_registrar_copy_next_registered_endpoint";
          _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s finding the next endpoint requires a registered endpoint, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_instance_registrar_copy_next_registered_endpoint";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s finding the next endpoint requires a registered endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    nw_frame_finalize(v4);
    v34 = *(void *)(v4 + 32);
    v35 = *(void **)(v4 + 40);
    if (v34)
    {
      *(void *)(v34 + 40) = v35;
      v35 = *(void **)(v4 + 40);
    }

    else
    {
      *(void *)(a1[8] + 8LL) = v35;
    }

    *v35 = v34;
    *(void *)(v4 + 32) = 0LL;
    *(void *)(v4 + 40) = 0LL;
    goto LABEL_41;
  }

  if (v8) {
    free(v8);
  }
  options = 0LL;
LABEL_4:

  return (nw_protocol_options_t)options;
}

    goto LABEL_38;
  }

  if (!nw_protocol_options_has_standard_framer_options(v3))
  {
LABEL_40:
    v6 = 0LL;
    goto LABEL_41;
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  v26 = __Block_byref_object_copy__4444;
  v27 = __Block_byref_object_dispose__4445;
  v28 = 0LL;
  v22[0] = MEMORY[0x1895F87A8];
  v22[1] = 3221225472LL;
  v22[2] = __nw_framer_options_copy_peer_protocol_definition_block_invoke;
  v22[3] = &unk_189BC60A8;
  v22[4] = buf;
  nw_protocol_options_access_handle(v3, v22);
  v6 = *(id *)(*(void *)&buf[8] + 40LL);
  _Block_object_dispose(buf, 8);

LABEL_41:
  return v6;
}

    free(v25);
    if (!v15) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }

  v33[0] = MEMORY[0x1895F87A8];
  v33[1] = 3221225472LL;
  v33[2] = __nw_framer_message_set_value_block_invoke;
  v33[3] = &unk_189BB67C0;
  v33[5] = key;
  v12 = v8;
  v33[4] = v12;
  v33[6] = value;
  v13 = *((void *)v9 + 4);
  if (v13) {
    __nw_framer_message_set_value_block_invoke((uint64_t)v33, v13);
  }

LABEL_7:
}

    free(v23);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }

  v31[0] = MEMORY[0x1895F87A8];
  v31[1] = 3221225472LL;
  v31[2] = __nw_framer_message_set_object_value_block_invoke;
  v31[3] = &unk_189BC64E8;
  v31[5] = key;
  v10 = v6;
  v31[4] = v10;
  v11 = *((void *)v7 + 4);
  if (v11) {
    __nw_framer_message_set_object_value_block_invoke((uint64_t)v31, v11);
  }

LABEL_7:
}

      v50 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8)) {
        v13 = 0LL;
      }
LABEL_39:
      if (v50) {
        v51 = 1;
      }
      else {
        v51 = (v13 & 7) == 4;
      }
      if (v51) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v52 = objc_alloc_init(&OBJC_CLASS___NWPBAddressEndpoint);
          objc_storeStrong((id *)(a1 + 8), v52);
          goto LABEL_64;
        case 2u:
          v52 = objc_alloc_init(&OBJC_CLASS___NWPBHostEndpoint);
          objc_storeStrong((id *)(a1 + 16), v52);
          goto LABEL_56;
        case 3u:
          v52 = objc_alloc_init(&OBJC_CLASS___NWPBServiceEndpoint);
          objc_storeStrong((id *)(a1 + 32), v52);
          goto LABEL_56;
        case 4u:
          v52 = objc_alloc_init(&OBJC_CLASS___NWPBInterface);
          objc_storeStrong((id *)(a1 + 24), v52);
          if (!PBReaderPlaceMark() || (NWPBInterfaceReadFrom((uint64_t)v52, a2) & 1) == 0)
          {
LABEL_64:

            return 0LL;
          }

    goto LABEL_38;
  }

  if (v4)
  {
    os_unfair_lock_lock(v3 + 3);
    v6 = _Block_copy(v5);
    v7 = *(void **)&v3[26]._os_unfair_lock_opaque;
    *(void *)&v3[26]._os_unfair_lock_opaque = v6;

    os_unfair_lock_unlock(v3 + 3);
    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_resolver_set_cancel_handler";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_resolver_set_cancel_handler";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null cancel_handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v22)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_resolver_set_cancel_handler";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null cancel_handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_resolver_set_cancel_handler";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null cancel_handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_resolver_set_cancel_handler";
    v26 = 2082;
    v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null cancel_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_endpoint_append_public_key_block_invoke;
    v22[3] = &unk_189BC9238;
    v6 = v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v3 + 44);
    __nw_endpoint_append_public_key_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v3 + 44);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_endpoint_append_public_key";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_endpoint_append_public_key";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null publicKey", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_endpoint_append_public_key";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null publicKey, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_endpoint_append_public_key";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null publicKey, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_endpoint_append_public_key";
    v27 = 2082;
    v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null publicKey, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    objc_storeStrong(v3 + 14, v4[14]);
    v6 = *((_BYTE *)v3 + 231) & 0xFD | (2 * ((*((unsigned __int8 *)v5 + 231) >> 1) & 1));
    *((_BYTE *)v3 + 231) = v6;
    *((_WORD *)v3 + 114) = *((_WORD *)v5 + 114);
    *((_BYTE *)v3 + 231) = *((_BYTE *)v5 + 231) & 0x20 | v6 & 0xDF;
    objc_storeStrong(v3 + 24, v5[24]);
    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_endpoint_clone_parent_endpoint_properties";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_endpoint_clone_parent_endpoint_properties";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null original_endpoint", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v21)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_endpoint_clone_parent_endpoint_properties";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null original_endpoint, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_endpoint_clone_parent_endpoint_properties";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null original_endpoint, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_endpoint_clone_parent_endpoint_properties";
    v25 = 2082;
    v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null original_endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v10) {
    free(v10);
  }
  v7 = 0;
LABEL_4:

  return v7;
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)v3[5];
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_establishment_report_enumerate_proxy_endpoints_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_proxy_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxy_endpoints";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxy_endpoints";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxy_endpoints";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_proxy_endpoints";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)v3[6];
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_resolution_report_enumerate_endpoints_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_resolution_report_enumerate_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_resolution_report_enumerate_endpoints";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_resolution_report_enumerate_endpoints";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_resolution_report_enumerate_endpoints";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_resolution_report_enumerate_endpoints";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)*((void *)v3 + 9);
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_establishment_report_enumerate_resolutions_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_resolutions";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_resolutions";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_resolutions";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_resolutions";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_resolutions";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)v3[8];
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_establishment_report_enumerate_protocol_l4s_state_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)v3[6];
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_establishment_report_enumerate_proxied_next_hop_endpoints_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v18 = "nw_data_transfer_update_path_report_begin";
        v19 = 2048;
        v20 = a1;
        v21 = 2048;
        v22 = a2;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s updating path report %p with beginning snapshot %p",  buf,  0x20u);
      }
    }

    *(_OWORD *)&a1->incremental.received_ip_packet_count = *(_OWORD *)&a2->var1;
    *(_OWORD *)&a1->incremental.received_ip_ect0_packet_count = *(_OWORD *)&a2->var3;
    *(_OWORD *)&a1->incremental.sent_ip_packet_count = *(_OWORD *)&a2->var5;
    *(_OWORD *)&a1->incremental.received_transport_duplicate_byte_count = *(_OWORD *)&a2->var7;
    *(_OWORD *)&a1->incremental.sent_transport_byte_count = *(_OWORD *)&a2->var9;
    *(_OWORD *)&a1->incremental.sent_transport_ecn_capable_packet_count = *(_OWORD *)&a2->var11;
    *(_OWORD *)&a1->incremental.sent_transport_ecn_capable_marked_packet_count = *(_OWORD *)&a2->var13;
    *(_OWORD *)&a1->incremental.received_application_byte_count = *(_OWORD *)&a2->var21;
    *(_OWORD *)&a1->total.transport_smoothed_rtt_milliseconds = *(_OWORD *)&a2->var15;
    *(_OWORD *)&a1->total.transport_current_rtt_milliseconds = *(_OWORD *)&a2->var17;
    *(_OWORD *)&a1->total.transport_congestion_window = *(_OWORD *)&a2->var19;
    return;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_data_transfer_update_path_report_begin";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v7 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "nw_data_transfer_update_path_report_begin";
      v8 = "%{public}s called with null snapshot";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if (!v15)
  {
    __nwlog_obj();
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v7 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "nw_data_transfer_update_path_report_begin";
      v8 = "%{public}s called with null snapshot, backtrace limit exceeded";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  v13 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v7 = type;
  v14 = os_log_type_enabled(v6, type);
  if (!v13)
  {
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      v18 = "nw_data_transfer_update_path_report_begin";
      v8 = "%{public}s called with null snapshot, no backtrace";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_data_transfer_update_path_report_begin";
    v19 = 2082;
    v20 = (nw_data_transfer_path_report *)v13;
    _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null snapshot, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v5) {
    goto LABEL_39;
  }
}

  if (v19) {
    free(v19);
  }
LABEL_17:
}

LABEL_38:
    if (v19) {
      free(v19);
    }
    return;
  }

  v4 = notify_register_check(a1, &nw_interface_use_observer_post_notification::token);
  if (v4)
  {
    v5 = v4;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v28 = "nw_interface_use_observer_post_notification";
      v29 = 2082;
      v30 = (void *)a1;
      v31 = 1024;
      LODWORD(v32) = v5;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s notify_register_check(%{public}s) failed: %d",  buf,  0x1Cu);
    }

    nw_interface_use_observer_post_notification::token = -1;
    goto LABEL_6;
  }

  if (nw_interface_use_observer_post_notification::token == -1)
  {
LABEL_6:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
LABEL_9:

      return;
    }

    *(_DWORD *)buf = 136446466;
    v28 = "nw_interface_use_observer_post_notification";
    v29 = 2082;
    v30 = (void *)a1;
    v8 = "%{public}s Nobody observing %{public}s";
    v9 = v7;
    v10 = OS_LOG_TYPE_DEBUG;
    v11 = 22;
LABEL_8:
    _os_log_impl(&dword_181A5C000, v9, v10, v8, buf, v11);
    goto LABEL_9;
  }

  v12 = a2;
  v13 = notify_set_state(nw_interface_use_observer_post_notification::token, a2);
  if (v13)
  {
    v14 = v13;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v28 = "nw_interface_use_observer_post_notification";
      v29 = 2082;
      v30 = (void *)a1;
      v31 = 2048;
      v32 = v12;
      v33 = 1024;
      v34 = v14;
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s notify_set_state for %{public}s %#llx failed: %d",  buf,  0x26u);
    }
  }

  else
  {
    v16 = notify_post(a1);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (os_log_s *)(id)gLogObj;
    v7 = v17;
    if (!v16)
    {
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_9;
      }
      *(_DWORD *)buf = 136446722;
      v28 = "nw_interface_use_observer_post_notification";
      v29 = 2082;
      v30 = (void *)a1;
      v31 = 1024;
      LODWORD(v32) = a2;
      v8 = "%{public}s successfully posted notification %{public}s for interface in use: %{BOOL}d";
      v9 = v7;
      v10 = OS_LOG_TYPE_DEFAULT;
      v11 = 28;
      goto LABEL_8;
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v28 = "nw_interface_use_observer_post_notification";
      v29 = 2082;
      v30 = (void *)a1;
      v31 = 1024;
      LODWORD(v32) = v16;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s notify_post for %{public}s failed: %d",  buf,  0x1Cu);
    }
  }

  notify_cancel(nw_interface_use_observer_post_notification::token);
  nw_interface_use_observer_post_notification::token = -1;
}

    goto LABEL_38;
  }

  if (v4)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = ___ZL36nw_connection_group_touch_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
    aBlock[3] = &unk_189BC9238;
    v22 = v3;
    v23 = v5;
    v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
    v6[2](v6);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_connection_group_touch_connection";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_connection_group_touch_connection";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null connection", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_connection_group_touch_connection";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_connection_group_touch_connection";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_connection_group_touch_connection";
    v28 = 2082;
    v29 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return (nw_connection_group_t)v6;
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return v6;
}

  return v9;
}

        free(backtrace_string);
        goto LABEL_50;
      }

      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_connection_group_create_request";
        _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }

      goto LABEL_49;
    }

    goto LABEL_50;
  }

  v12 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_connection_group_send_request);
  objc_storeStrong((id *)&v12->group, (id)v2);
  objc_storeStrong((id *)&v12->data, v4);
  objc_storeStrong((id *)&v12->endpoint, v3);
  objc_storeStrong((id *)&v12->context, v6);
  v13 = _Block_copy(v11);
  completion = v12->completion;
  v12->completion = v13;

LABEL_7:
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56LL)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    v25 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(_DWORD *)(*(void *)(a1 + 32) + 168LL);
      *(_DWORD *)buf = 136446722;
      v39 = "nw_connection_group_send_message_block_invoke";
      v40 = 1024;
      *(_DWORD *)v41 = v26;
      v41[2] = 2112;
      *(void *)&v41[3] = v12;
      _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] enqueuing send request %@", buf, 0x1Cu);
    }
  }

  v15 = *(void *)(*(void *)(a1 + 32) + 112LL);
  if (!v15)
  {
    v16 = nw_array_create();
    v17 = *(void *)(a1 + 32);
    v18 = *(void **)(v17 + 112);
    *(void *)(v17 + 112) = v16;

    v15 = *(void *)(*(void *)(a1 + 32) + 112LL);
  }

  nw_array_append(v15, v12);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
}

  if (v10) {
    free(v10);
  }
  v7 = 0LL;
LABEL_4:

  return (nw_protocol_metadata_t)v7;
}

          free(backtrace_string);
          goto LABEL_86;
        }

        if (!v32)
        {
LABEL_49:

          if (!v18) {
            goto LABEL_88;
          }
          goto LABEL_87;
        }

        *(_DWORD *)buf = 136446210;
        v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
        v21 = "%{public}s called with null networkDescriptionArray, no backtrace";
        v42 = v19;
        v43 = v31;
LABEL_48:
        _os_log_impl(&dword_181A5C000, v42, v43, v21, buf, 0xCu);
        goto LABEL_49;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (os_log_s *)(id)gLogObj;
      v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      v21 = "%{public}s called with null networkDescriptionArray, backtrace limit exceeded";
    }

    v42 = v19;
    v43 = v20;
    goto LABEL_48;
  }

  if (![v8 count])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (os_log_s *)(id)gLogObj;
      v28 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_85;
      }
      *(_DWORD *)buf = 136446210;
      v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      v29 = "%{public}s called with null networkDescriptionArray (empty)";
      goto LABEL_59;
    }

    if (!v75)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (os_log_s *)(id)gLogObj;
      v28 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_85;
      }
      *(_DWORD *)buf = 136446210;
      v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      v29 = "%{public}s called with null networkDescriptionArray (empty), backtrace limit exceeded";
LABEL_59:
      v46 = v19;
      v47 = v28;
      goto LABEL_60;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (os_log_s *)(id)gLogObj;
    v31 = type;
    v34 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_85;
      }
      *(_DWORD *)buf = 136446210;
      v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      v29 = "%{public}s called with null networkDescriptionArray (empty), no backtrace";
      v46 = v19;
      v47 = v31;
LABEL_60:
      v48 = 12;
LABEL_84:
      _os_log_impl(&dword_181A5C000, v46, v47, v29, buf, v48);
      goto LABEL_85;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      v79 = 2082;
      v80 = (const __CFString *)backtrace_string;
      v33 = "%{public}s called with null networkDescriptionArray (empty), dumping backtrace:%{public}s";
      goto LABEL_35;
    }

    goto LABEL_37;
  }

  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v11 = v8;
  v12 = [v11 countByEnumeratingWithState:&v71 objects:v83 count:16];
  if (!v12) {
    goto LABEL_11;
  }
  v13 = v12;
  v14 = *(void *)v72;
  while (2)
  {
    for (i = 0LL; i != v13; ++i)
    {
      if (*(void *)v72 != v14) {
        objc_enumerationMutation(v11);
      }
      [*(id *)(*((void *)&v71 + 1) + 8 * i) ssidOptions];
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {

        if (currentProcessHasSSIDEntitlement_onceToken != -1) {
          dispatch_once(&currentProcessHasSSIDEntitlement_onceToken, &__block_literal_global_214);
        }
        if (currentProcessHasSSIDEntitlement_hasSSIDEntitlement) {
          goto LABEL_19;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v40 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
        v79 = 2114;
        v80 = @"com.apple.private.corewifi";
        v18 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v75 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (os_log_s *)(id)gLogObj;
          v41 = type;
          if (!os_log_type_enabled(v19, type)) {
            goto LABEL_85;
          }
          *(_DWORD *)buf = 136446466;
          v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
          v79 = 2114;
          v80 = @"com.apple.private.corewifi";
          v29 = "%{public}s This process does not have the %{public}@ entitlement required to monitor SSID";
LABEL_82:
          v46 = v19;
          v47 = v41;
LABEL_83:
          v48 = 22;
          goto LABEL_84;
        }

        if (!v75)
        {
          __nwlog_obj();
          v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v41 = type;
          if (!os_log_type_enabled(v19, type)) {
            goto LABEL_85;
          }
          *(_DWORD *)buf = 136446466;
          v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
          v79 = 2114;
          v80 = @"com.apple.private.corewifi";
          v29 = "%{public}s This process does not have the %{public}@ entitlement required to monitor SSID, backtrace limit exceeded";
          goto LABEL_82;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (os_log_s *)(id)gLogObj;
        v44 = type;
        v45 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (!v45) {
            goto LABEL_37;
          }
          *(_DWORD *)buf = 136446722;
          v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
          v79 = 2114;
          v80 = @"com.apple.private.corewifi";
          v81 = 2082;
          v82 = backtrace_string;
          v33 = "%{public}s This process does not have the %{public}@ entitlement required to monitor SSID, dumping backtrace:%{public}s";
          v35 = v19;
          v36 = v44;
          v37 = 32;
          goto LABEL_36;
        }

        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
          v79 = 2114;
          v80 = @"com.apple.private.corewifi";
          v29 = "%{public}s This process does not have the %{public}@ entitlement required to monitor SSID, no backtrace";
          v46 = v19;
          v47 = v44;
          goto LABEL_83;
        }

    goto LABEL_38;
  }

  if (v4)
  {
    nw_array_remove_object(v3[4], (uint64_t)v4);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_group_descriptor_remove_endpoint";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_group_descriptor_remove_endpoint";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null endpoint", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_group_descriptor_remove_endpoint";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_group_descriptor_remove_endpoint";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_group_descriptor_remove_endpoint";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)*((void *)v3 + 4);
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_group_descriptor_enumerate_endpoints_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_group_descriptor_enumerate_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_group_descriptor_enumerate_endpoints";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_group_descriptor_enumerate_endpoints";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_group_descriptor_enumerate_endpoints";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_group_descriptor_enumerate_endpoints";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }

    if (!v22)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_37;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_interface_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }

    if (!v22)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_37;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_get_priority_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }

    if (!v22)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_37;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_local_cid_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }

    if (!v22)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_37;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_remote_cid_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }

    if (!v22)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_37;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_copy_initial_data_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }

    if (!v22)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_37;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_instance_get_sockfd_for_path";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

  if (v7) {
    free(v7);
  }
  v4 = 0LL;
LABEL_4:

  return v4;
}

  if (v9) {
    free(v9);
  }
  buffer_manager_with_context = 0LL;
LABEL_4:

  return buffer_manager_with_context;
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = _Block_copy(v4);
    v7 = (void *)v3[33];
    v3[33] = v6;

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_protocol_instance_set_wakeup_handler";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_instance_set_wakeup_handler";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null wakeup_handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v22)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_instance_set_wakeup_handler";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null wakeup_handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_instance_set_wakeup_handler";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null wakeup_handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_protocol_instance_set_wakeup_handler";
    v26 = 2082;
    v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null wakeup_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    *((void *)v3 + 14) = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_options_equality_check";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_options_equality_check";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null check_equality_function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_options_equality_check";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null check_equality_function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_options_equality_check";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null check_equality_function, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_options_equality_check";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null check_equality_function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    *((void *)v3 + 15) = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_options_comparator";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_options_comparator";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null comparator_function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_options_comparator";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null comparator_function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_options_comparator";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null comparator_function, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_options_comparator";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null comparator_function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    *(void *)(*((void *)v3 + 10) + 248LL) = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_options_should_serialize";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_options_should_serialize";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null should_serialize", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_options_should_serialize";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null should_serialize, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_options_should_serialize";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null should_serialize, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_options_should_serialize";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null should_serialize, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    nw_protocol_definition_initialize_common_state(v3);
    v4->common_state->var6 = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_metadata_copy_message_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_metadata_copy_message_options";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null copy_message_options", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_metadata_copy_message_options";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null copy_message_options, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_metadata_copy_message_options";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null copy_message_options, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_metadata_copy_message_options";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null copy_message_options, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    *((void *)v3 + 20) = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_metadata_comparator";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_metadata_comparator";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null comparator_function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_metadata_comparator";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null comparator_function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_metadata_comparator";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null comparator_function, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_metadata_comparator";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null comparator_function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    nw_protocol_definition_initialize_common_state(v3);
    v4->common_state->var7 = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_cache_entry_deallocator";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_cache_entry_deallocator";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null deallocate_function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_cache_entry_deallocator";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null deallocate_function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_cache_entry_deallocator";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null deallocate_function, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_cache_entry_deallocator";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null deallocate_function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    nw_protocol_definition_initialize_common_state(v3);
    v4->common_state->var8 = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_should_flush_cache_entry";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_should_flush_cache_entry";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null should_flush_cache_function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_should_flush_cache_entry";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null should_flush_cache_function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_should_flush_cache_entry";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null should_flush_cache_function, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_should_flush_cache_entry";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null should_flush_cache_function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v2 = &g_registration_list;
  while (1)
  {
    v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    if (*a1 == v2[4] && a1[1] == v2[5] && a1[2] == v2[6] && a1[3] == v2[7] && a1[4] == v2[8])
    {
      v7 = (void *)v2[14];
      if (v7)
      {
        v8 = os_retain(v7);
        goto LABEL_21;
      }

      break;
    }
  }

  v8 = 0LL;
LABEL_21:
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  return v8;
}

    goto LABEL_38;
  }

  if (a2)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var5 = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_initialize";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_initialize";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_initialize";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_initialize";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null function, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_initialize";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var6 = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_destroy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_destroy";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_destroy";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_destroy";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null function, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_destroy";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var7 = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_handle_inbound";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_handle_inbound";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_handle_inbound";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_handle_inbound";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null function, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_handle_inbound";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var8 = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_handle_outbound";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_handle_outbound";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_handle_outbound";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_handle_outbound";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null function, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_handle_outbound";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var9 = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_definition_set_handle_error";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_handle_error";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null function", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_handle_error";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null function, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_definition_set_handle_error";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null function, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_definition_set_handle_error";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null function, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    ++v3[6];
    *((void *)v4 + 4) = 0LL;
    v6 = (void *)*((void *)v3 + 2);
    *((void *)v4 + 5) = v6;
    *v6 = v4;
    *((void *)v3 + 2) = v4 + 32;
    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_protocol_data_array_append";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_data_array_append";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null data", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v21)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_data_array_append";
      _os_log_impl(&dword_181A5C000, v9, v20, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_data_array_append";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null data, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_protocol_data_array_append";
    v25 = 2082;
    v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null data, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    free(v23);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }

  ++v5[6];
  v9 = v5 + 4;
  v10 = v7 + 4;
  v11 = v7[4];
  v6[4] = v11;
  if (v11) {
    v9 = (void *)(v11 + 40);
  }
  *v9 = v6 + 4;
  *v10 = v6;
  v6[5] = v10;
LABEL_7:
}

LABEL_38:
      if (v8) {
        free(v8);
      }
      goto LABEL_40;
    }

    if (!v21)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_message_options";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null metadata->definition, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_message_options";
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null metadata->definition, no backtrace",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_protocol_metadata_copy_message_options";
      v25 = 2082;
      v26 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null metadata->definition, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_38:
      if (v8) {
        free(v8);
      }
      goto LABEL_40;
    }

    if (!v21)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_create_reply";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null metadata->definition, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_create_reply";
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null metadata->definition, no backtrace",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_protocol_metadata_create_reply";
      v25 = 2082;
      v26 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null metadata->definition, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_38:
      if (v8) {
        free(v8);
      }
      goto LABEL_40;
    }

    if (!v21)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null metadata->definition, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null metadata->definition, no backtrace",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_protocol_metadata_copy_original";
      v25 = 2082;
      v26 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null metadata->definition, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_38;
  }

  if (v4)
  {
    snprintf((char *)v4 + 48, 0x54uLL, "%s", v3 + 48);
    v5[68] = *((_WORD *)v3 + 68);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_options_inherit_log_id";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_options_inherit_log_id";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null new_options", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_options_inherit_log_id";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null new_options, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_options_inherit_log_id";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null new_options, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_protocol_options_inherit_log_id";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null new_options, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }

  v3 = a3[5];
  if (v3)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    v19 = *(void *)(v3 + 944);
    if (CFStringCompare(a1, @"Set-Cookie", 1uLL))
    {
      if (*(int *)(v3 + 1040) >= 4)
      {
        v6 = *(__CFDictionary **)(v3 + 736);
        if (v6) {
          CFDictionaryAddValue(v6, a1, a2);
        }
      }

      v15[0] = MEMORY[0x1895F87A8];
      v15[1] = 0x40000000LL;
      v15[2] = ___ZL43nw_http_authentication_apply_appsso_headersPKvS0_Pv_block_invoke;
      v15[3] = &unk_189BB7D78;
      v15[4] = buf;
      v15[5] = a2;
      nw_utilities_get_c_string_from_cfstring(a1, 0x201u, v15);
    }

    _Block_object_dispose(buf, 8);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
  v7 = (char *)_os_log_send_and_compose_impl();
  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    v8 = (os_log_s *)__nwlog_obj();
    v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
    v10 = "%{public}s called with null http_authentication";
    goto LABEL_37;
  }

  if (!v16)
  {
    v8 = (os_log_s *)__nwlog_obj();
    v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
    v10 = "%{public}s called with null http_authentication, backtrace limit exceeded";
    goto LABEL_37;
  }

  v13 = (char *)__nw_create_backtrace_string();
  v8 = (os_log_s *)__nwlog_obj();
  v9 = v17;
  v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
    v10 = "%{public}s called with null http_authentication, no backtrace";
    goto LABEL_37;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v13;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null http_authentication, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v7) {
    goto LABEL_39;
  }
}

        v34 = *v32;
        v35 = @"Proxy-Authorization";
        goto LABEL_44;
      }
    }

    return 0LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v27 = gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446722;
    v59 = "nw_http_authentication_apply_authorization";
    v60 = 2048;
    v61 = error.domain;
    v62 = 1024;
    LODWORD(v63) = error.error;
    v29 = "%{public}s _CFHTTPAuthenticationSetPreferredScheme failed [%ld:%d]";
    v30 = (os_log_s *)v27;
    v31 = 28;
LABEL_47:
    _os_log_impl(&dword_181A5C000, v30, OS_LOG_TYPE_ERROR, v29, buf, v31);
    return 0LL;
  }

  return result;
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

    goto LABEL_38;
  }

  if (*((_DWORD *)v3 + 2) == 1)
  {
    *((_BYTE *)v3 + 72) = *((_BYTE *)v3 + 72) & 0xFE | no_auto_rename;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_advertise_descriptor_set_no_auto_rename";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_no_auto_rename";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_no_auto_rename";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_no_auto_rename";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_advertise_descriptor_set_no_auto_rename";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v6) {
    free(v6);
  }
  v3 = 0;
LABEL_4:

  return v3;
}

    goto LABEL_38;
  }

  if (*((_DWORD *)v3 + 2) == 1)
  {
    objc_storeStrong((id *)v3 + 5, txt_record);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_advertise_descriptor_set_txt_record_object";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_txt_record_object";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_txt_record_object";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_txt_record_object";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_advertise_descriptor_set_txt_record_object";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }

  handle = a1->handle;
  if (handle)
  {
    if (a2)
    {
      get_input_frames = (unsigned int (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, _BYTE *))a2->callbacks->get_input_frames;
      if (get_input_frames)
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        if (get_input_frames(a2, a1, 1LL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, buf))
        {
          v15[0] = MEMORY[0x1895F87A8];
          v15[1] = 0x40000000LL;
          v16 = ___ZL35nw_protocol_trainer_input_availableP11nw_protocolS0__block_invoke;
          v17 = &__block_descriptor_tmp_20_17507;
          v18 = buf;
          v19 = handle;
          v4 = *(void *)buf;
          do
          {
            if (!v4) {
              break;
            }
            v5 = *(void *)(v4 + 32);
            v6 = ((uint64_t (*)(void *))v16)(v15);
            v4 = v5;
          }

          while ((v6 & 1) != 0);
        }
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_protocol_trainer_input_available";
  v7 = (char *)_os_log_send_and_compose_impl();
  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (v21 == OS_LOG_TYPE_FAULT)
  {
    v8 = (os_log_s *)__nwlog_obj();
    v9 = v21;
    if (!os_log_type_enabled(v8, v21)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_trainer_input_available";
    v10 = "%{public}s called with null trainer";
    goto LABEL_37;
  }

  if (!v20)
  {
    v8 = (os_log_s *)__nwlog_obj();
    v9 = v21;
    if (!os_log_type_enabled(v8, v21)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_trainer_input_available";
    v10 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_37;
  }

  v13 = (char *)__nw_create_backtrace_string();
  v8 = (os_log_s *)__nwlog_obj();
  v9 = v21;
  v14 = os_log_type_enabled(v8, v21);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_trainer_input_available";
    v10 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_37;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = "nw_protocol_trainer_input_available";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v13;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null trainer, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v7) {
    goto LABEL_39;
  }
}

  if (v7) {
    free(v7);
  }
  return 0LL;
}

    goto LABEL_38;
  }

  if (v7)
  {
    nw_context_assert_queue(*((void **)v5 + 3));
    v9 = (nw_group_descriptor *)*((void *)v5 + 4);
    enumerate_block[0] = MEMORY[0x1895F87A8];
    enumerate_block[1] = 3221225472LL;
    enumerate_block[2] = ___ZL66nw_listener_enumerate_multicast_parameters_for_descriptor_on_queueP22NWConcrete_nw_listenerPU33objcproto22OS_nw_group_descriptor8NSObjectU13block_pointerFbPU27objcproto16OS_nw_parametersS1_E_block_invoke;
    enumerate_block[3] = &unk_189BB8B28;
    v25 = v5;
    v26 = v8;
    nw_group_descriptor_enumerate_endpoints(v9, enumerate_block);

    goto LABEL_4;
  }

  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null enumerator", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v27)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
    v31 = 2082;
    v32 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_39;
  }
LABEL_4:
}

    if (v8) {
      free(v8);
    }
    goto LABEL_39;
  }

    goto LABEL_38;
  }

  if (v4)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_set_queue_block_invoke;
    aBlock[3] = &unk_189BC9238;
    v22 = v3;
    v23 = v5;
    v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v6[2](v6);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_listener_set_queue";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_listener_set_queue";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null queue", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_listener_set_queue";
      _os_log_impl(&dword_181A5C000, v9, v20, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_listener_set_queue";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_listener_set_queue";
    v28 = 2082;
    v29 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    nw_parameters_set_context(v3, v4);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_set_privacy_context";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_privacy_context";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null privacy_context", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_privacy_context";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null privacy_context, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_privacy_context";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_parameters_set_privacy_context";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null privacy_context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 8);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_get_parent_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_parent_id";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null destination", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_parent_id";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null destination, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_parent_id";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null destination, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_parameters_get_parent_id";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null destination, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (expired_dns_behavior < 0xFF)
  {
    *((_BYTE *)v3 + 95) = expired_dns_behavior;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_expired_dns_behavior";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_expired_dns_behavior";
      _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX)",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_expired_dns_behavior";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX), backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_expired_dns_behavior";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX), no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_parameters_set_expired_dns_behavior";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX), dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2 < 0xFF)
  {
    *((_BYTE *)v3 + 93) = a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_ecn_mode";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_ecn_mode";
      _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX)",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_ecn_mode";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX), backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_ecn_mode";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX), no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_parameters_set_ecn_mode";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null (static_cast<uint32_t>(ecn_mode) < UINT8_MAX), dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v11) {
    free(v11);
  }
  v8 = 0LL;
LABEL_4:

  return v8;
}

    goto LABEL_38;
  }

  if (v4)
  {
    nw_protocol_stack_remove_protocol(v3[19], v4);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_remove_definition_from_protocol_stack";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_remove_definition_from_protocol_stack";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null definition", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_remove_definition_from_protocol_stack";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_remove_definition_from_protocol_stack";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null definition, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_parameters_remove_definition_from_protocol_stack";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    nw_parameters_allow_sharing_port_with_listener_for_connection(v3, v4, 0LL);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_allow_sharing_port_with_listener";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_allow_sharing_port_with_listener";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_allow_sharing_port_with_listener";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_allow_sharing_port_with_listener";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null listener, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_parameters_allow_sharing_port_with_listener";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 24);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_get_listener_uuid";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_listener_uuid";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null listener_uuid", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_listener_uuid";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null listener_uuid, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_listener_uuid";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null listener_uuid, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_parameters_get_listener_uuid";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null listener_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v7) {
    free(v7);
  }
  necp_parameters = 0LL;
LABEL_4:

  return necp_parameters;
}

  if (v10) {
    free(v10);
  }
  v7 = 0LL;
LABEL_4:

  return v7;
}

  if (v11) {
    free(v11);
  }
  v8 = 0LL;
LABEL_4:

  return v8;
}

    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_38;
  }

  v1 = *(void *)(a1 + 40);
  if (v1)
  {
    nw_protocol_remove_instance(*(void *)(a1 + 40));
    v2 = *(void *)(v1 + 136);
    if (v2)
    {
      nw_protocol_remove_listen_handler(v2, v1 + 64);
      *(void *)(v1 + 136) = 0LL;
    }

    if ((*(_BYTE *)(v1 + 294) & 8) == 0 && !*(void *)(v1 + 48) && *(void *)(v1 + 184) == *(void *)(v1 + 192)) {
      nw_http_client_bottom_destroy(v1);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_http_client_bottom_teardown";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = (os_log_s *)__nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_teardown";
    v6 = "%{public}s called with null http_client_bottom";
    goto LABEL_37;
  }

  if (!v11)
  {
    v4 = (os_log_s *)__nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_teardown";
    v6 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    goto LABEL_37;
  }

  v9 = (char *)__nw_create_backtrace_string();
  v4 = (os_log_s *)__nwlog_obj();
  v5 = type;
  v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_client_bottom_teardown";
    v6 = "%{public}s called with null http_client_bottom, no backtrace";
    goto LABEL_37;
  }

  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v14 = "nw_protocol_http_client_bottom_teardown";
    v15 = 2082;
    v16 = v9;
    _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v9);
  if (v3) {
    goto LABEL_39;
  }
}

  *((void *)handle + 15) = v20;
  handle[128] = v21 | 1;
  http_messaging_options = nw_parameters_find_http_messaging_options(*((void **)handle + 13), (uint64_t)handle);
  v24 = http_messaging_options;
  if (http_messaging_options)
  {
    v25 = MEMORY[0x1895F87A8];
    v26 = *((void *)handle + 22);
    v51[0] = MEMORY[0x1895F87A8];
    v51[1] = 0x40000000LL;
    v51[2] = ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke;
    v51[3] = &unk_189BB9108;
    v51[4] = v26;
    v27 = http_messaging_options;
    v28 = v51;
    v29 = (id *)v27;
    v30 = v29[1];

    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
    }
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v30,  nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal_unsafe)
    {
      *(void *)buf = v25;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_http_messaging_options_set_override_protocol_handler_block_invoke;
      v55 = (const char *)&unk_189BC6110;
      v56 = v28;
      nw_protocol_options_access_handle(v29, buf);
    }

    v50[0] = v25;
    v50[1] = 0x40000000LL;
    v50[2] = ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke_2;
    v50[3] = &unk_189BB9130;
    v50[4] = v26;
    v50[5] = handle;
    v32 = v29;
    v33 = v50;
    v34 = v32;
    v35 = v29[1];

    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
    }
    v36 = nw_protocol_definition_is_equal_unsafe((uint64_t)v35, nw_protocol_copy_http_messaging_definition_definition);

    if (v36)
    {
      *(void *)buf = v25;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_http_messaging_options_set_can_accept_handler_block_invoke;
      v55 = (const char *)&unk_189BC6110;
      v56 = v33;
      nw_protocol_options_access_handle(v34, buf);
    }
  }

  v37 = *((void *)handle + 4);
  if (v37)
  {
    v8 = nw_protocol_connect(v37, (uint64_t)handle);
    if (!v24) {
      return v8;
    }
    goto LABEL_54;
  }

  if ((handle[294] & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&buf[4] = "nw_protocol_http_client_bottom_connect";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 208;
      *(_WORD *)&buf[22] = 2080;
      v55 = " ";
      _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sconnect bottom protocol, resuming child handler",  buf,  0x20u);
    }
  }

  buf[0] = 0;
  v8 = 1LL;
  nw_protocol_notify(*((void **)handle + 6), (uint64_t)handle, 23);
  if (v24) {
LABEL_54:
  }
    os_release(v24);
  return v8;
}

    freemptcpinfo(v3);
  }

  return 1LL;
}

      free(v11);
      if (!v7) {
        return 0LL;
      }
      goto LABEL_59;
    }

    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_endpoint_create_apple_service";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
    {
LABEL_58:
      if (!v7) {
        return 0LL;
      }
LABEL_59:
      free(v7);
      return 0LL;
    }

    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_181A5C000, v8, v38, "%{public}s called with null service", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v42 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_endpoint_create_apple_service";
        _os_log_impl( &dword_181A5C000,  v8,  v42,  "%{public}s called with null service, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v40 = type[0];
    v41 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_181A5C000, v8, v40, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_endpoint_create_apple_service";
      v48 = 2082;
      v49 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v40,  "%{public}s called with null service, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      goto LABEL_38;
    }

    if (!v37)
    {
      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_endpoint_create_application_service";
        _os_log_impl( &dword_181A5C000,  v8,  v36,  "%{public}s called with null service_uuid, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_181A5C000, v8, v34, "%{public}s called with null service_uuid, no backtrace", buf, 0xCu);
      }

      goto LABEL_37;
    }

    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_endpoint_create_application_service";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v34,  "%{public}s called with null service_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      free(v11);
      if (!v7) {
        return 0LL;
      }
      goto LABEL_59;
    }

    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_endpoint_create_application_service_with_alias";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
    {
LABEL_58:
      if (!v7) {
        return 0LL;
      }
LABEL_59:
      free(v7);
      return 0LL;
    }

    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_181A5C000, v8, v38, "%{public}s called with null alias", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v42 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl( &dword_181A5C000,  v8,  v42,  "%{public}s called with null alias, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v40 = type[0];
    v41 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_181A5C000, v8, v40, "%{public}s called with null alias, no backtrace", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_endpoint_create_application_service_with_alias";
      v48 = 2082;
      v49 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v40,  "%{public}s called with null alias, dumping backtrace:%{public}s",  buf,  0x16u);
    }
}

    goto LABEL_38;
  }

  if (v6)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    v31 = __Block_byref_object_copy__23863;
    v32 = __Block_byref_object_dispose__23864;
    v33 = v6;
    v8 = +[ManagedNetworkSettings sharedMNS](&OBJC_CLASS___ManagedNetworkSettings, "sharedMNS");
    [v8 queue];
    v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nwphProbesComplete_block_invoke;
    block[3] = &unk_189BC77A8;
    v27 = a1;
    v25 = v5;
    v26 = buf;
    dispatch_async(v9, block);

    _Block_object_dispose(buf, 8);
    goto LABEL_4;
  }

  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nwphProbesComplete";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nwphProbesComplete";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null transaction", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v28)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nwphProbesComplete";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nwphProbesComplete";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = "nwphProbesComplete";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return v6;
}

    goto LABEL_38;
  }

  if (v4)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_connection_access_probe_connections_block_invoke;
    v22[3] = &unk_189BC91E8;
    v6 = v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_access_probe_connections_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_access_probe_connections";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_access_probe_connections";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_access_probe_connections";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_access_probe_connections";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_access_probe_connections";
    v27 = 2082;
    v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_connection_remove_probe_block_invoke;
    v22[3] = &unk_189BC9238;
    v6 = v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_remove_probe_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_remove_probe";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_remove_probe";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null probe", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_remove_probe";
      _os_log_impl(&dword_181A5C000, v10, v21, "%{public}s called with null probe, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_remove_probe";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null probe, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_remove_probe";
    v27 = 2082;
    v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null probe, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:
  _Block_object_dispose(&v27, 8);

  return v6;
}

  if (v11) {
    free(v11);
  }
  v8 = 0LL;
LABEL_4:
  _Block_object_dispose(&v30, 8);

  return v8;
}

    goto LABEL_38;
  }

  if (v6)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_connection_add_initial_inbound_data_block_invoke;
    v22[3] = &unk_189BC92F0;
    v23 = v5;
    v24 = v7;
    v25 = a3;
    nw_connection_async_if_needed(v23, v22);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_connection_add_initial_inbound_data";
  v9 = (char *)_os_log_send_and_compose_impl();

  v27 = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (v27 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = v27;
    if (os_log_type_enabled(v10, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_add_initial_inbound_data";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null initial_inbound_data", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v26)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = v27;
    if (os_log_type_enabled(v10, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_add_initial_inbound_data";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null initial_inbound_data, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = v27;
  v19 = os_log_type_enabled(v10, v27);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_add_initial_inbound_data";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null initial_inbound_data, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_connection_add_initial_inbound_data";
    v30 = 2082;
    v31 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null initial_inbound_data, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a3)
  {
    nw_connection_modify_estimated_bytes(v5, a2, 0, a3);
    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_connection_decrement_estimated_bytes";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_decrement_estimated_bytes";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null estimated_bytes", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v21)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_decrement_estimated_bytes";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null estimated_bytes, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_decrement_estimated_bytes";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null estimated_bytes, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_connection_decrement_estimated_bytes";
    v25 = 2082;
    v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null estimated_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v13) {
    free(v13);
  }
  v10 = 0LL;
LABEL_4:

  return v10;
}

    goto LABEL_38;
  }

  if (v4)
  {
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 3221225472LL;
    v20[2] = __nw_connection_register_context_block_invoke;
    v20[3] = &unk_189BC9238;
    v21 = v3;
    v22 = v5;
    nw_connection_async_if_needed(v21, v20);

    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_register_context";
  v7 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_register_context";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null content_context", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_register_context";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null content_context, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = v24;
  v17 = os_log_type_enabled(v8, v24);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_register_context";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null content_context, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_register_context";
    v27 = 2082;
    v28 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null content_context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 3221225472LL;
    v20[2] = __nw_connection_unregister_context_block_invoke;
    v20[3] = &unk_189BC9238;
    v21 = v3;
    v22 = v5;
    nw_connection_async_if_needed(v21, v20);

    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_unregister_context";
  v7 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_unregister_context";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null content_context", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_unregister_context";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null content_context, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = v24;
  v17 = os_log_type_enabled(v8, v24);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_unregister_context";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null content_context, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_unregister_context";
    v27 = 2082;
    v28 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null content_context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v11) {
    free(v11);
  }
  v8 = 0LL;
LABEL_4:

  return v8;
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return v6;
}

    goto LABEL_38;
  }

  if (v4)
  {
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 3221225472LL;
    v20[2] = __nw_connection_append_and_start_application_protocol_block_invoke;
    v20[3] = &unk_189BC9238;
    v21 = v3;
    v22 = v5;
    nw_connection_async_if_needed(v21, v20);

    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_append_and_start_application_protocol";
  v7 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_append_and_start_application_protocol";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null protocol", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_append_and_start_application_protocol";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = v24;
  v17 = os_log_type_enabled(v8, v24);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_append_and_start_application_protocol";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_append_and_start_application_protocol";
    v27 = 2082;
    v28 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (os_log_s *)(id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      else {
        v21 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_read_handler";
      v33 = 2082;
      v34 = (void *)v21;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (os_log_s *)(id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      else {
        v22 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_read_handler";
      v33 = 2082;
      v34 = (void *)v22;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl( &dword_181A5C000,  v13,  v17,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    else {
      v19 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    v32 = "nw_endpoint_handler_set_adaptive_read_handler";
    v33 = 2082;
    v34 = (void *)v19;
    v35 = 2082;
    v36 = "flow";
    v37 = 2082;
    v38 = v16;
    _os_log_impl( &dword_181A5C000,  v13,  v17,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v16);
  if (v12) {
    goto LABEL_39;
  }
LABEL_40:
}

    goto LABEL_38;
  }

  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (os_log_s *)(id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      else {
        v21 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_write_handler";
      v33 = 2082;
      v34 = (void *)v21;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (os_log_s *)(id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      else {
        v22 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_adaptive_write_handler";
      v33 = 2082;
      v34 = (void *)v22;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl( &dword_181A5C000,  v13,  v17,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    else {
      v19 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    v32 = "nw_endpoint_handler_set_adaptive_write_handler";
    v33 = 2082;
    v34 = (void *)v19;
    v35 = 2082;
    v36 = "flow";
    v37 = 2082;
    v38 = v16;
    _os_log_impl( &dword_181A5C000,  v13,  v17,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v16);
  if (v12) {
    goto LABEL_39;
  }
LABEL_40:
}

    goto LABEL_38;
  }

  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (os_log_s *)(id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      else {
        v21 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_keepalive_handler";
      v33 = 2082;
      v34 = (void *)v21;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (os_log_s *)(id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      else {
        v22 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_keepalive_handler";
      v33 = 2082;
      v34 = (void *)v22;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl( &dword_181A5C000,  v13,  v17,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    else {
      v19 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    v32 = "nw_endpoint_handler_set_keepalive_handler";
    v33 = 2082;
    v34 = (void *)v19;
    v35 = 2082;
    v36 = "flow";
    v37 = 2082;
    v38 = v16;
    _os_log_impl( &dword_181A5C000,  v13,  v17,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v16);
  if (v12) {
    goto LABEL_39;
  }
LABEL_40:
}

    goto LABEL_38;
  }

  if (v6)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_connection_set_metadata_changed_handler_block_invoke;
    v22[3] = &unk_189BC50A8;
    v23 = v5;
    v24 = v6;
    v25 = v7;
    nw_connection_async_if_needed(v23, v22);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_connection_set_metadata_changed_handler";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_set_metadata_changed_handler";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null protocol", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v26)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_set_metadata_changed_handler";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_set_metadata_changed_handler";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_connection_set_metadata_changed_handler";
    v30 = 2082;
    v31 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  uuid_clear(a2);
  if (v3)
  {
    v19[0] = MEMORY[0x1895F87A8];
    v19[1] = 3221225472LL;
    v19[2] = __nw_connection_get_parent_uuid_block_invoke;
    v19[3] = &unk_189BC66E8;
    v19[5] = a2;
    v4 = v3;
    v19[4] = v4;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_get_parent_uuid_block_invoke((uint64_t)v19);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_get_parent_uuid";
  v6 = (char *)_os_log_send_and_compose_impl();

  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (v21 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = v21;
    if (os_log_type_enabled(v7, v21))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_parent_uuid";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = v21;
    if (os_log_type_enabled(v7, v21))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_parent_uuid";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = v21;
  v16 = os_log_type_enabled(v7, v21);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_parent_uuid";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_connection_get_parent_uuid";
    v24 = 2082;
    v25 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v3)
  {
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 3221225472LL;
    v20[2] = __nw_connection_set_group_uuid_block_invoke;
    v20[3] = &unk_189BC66E8;
    v5 = v3;
    v20[4] = v5;
    v20[5] = a2;
    os_unfair_lock_lock(v4 + 34);
    __nw_connection_set_group_uuid_block_invoke((uint64_t)v20);
    os_unfair_lock_unlock(v4 + 34);

    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_connection_set_group_uuid";
  v7 = (char *)_os_log_send_and_compose_impl();

  v22 = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (v22 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = v22;
    if (os_log_type_enabled(v8, v22))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_set_group_uuid";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null connection", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v21)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = v22;
    if (os_log_type_enabled(v8, v22))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_set_group_uuid";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = v22;
  v17 = os_log_type_enabled(v8, v22);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_connection_set_group_uuid";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_connection_set_group_uuid";
    v25 = 2082;
    v26 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  uuid_clear(a2);
  if (v3)
  {
    v19[0] = MEMORY[0x1895F87A8];
    v19[1] = 3221225472LL;
    v19[2] = __nw_connection_get_group_uuid_block_invoke;
    v19[3] = &unk_189BC66E8;
    v19[5] = a2;
    v4 = v3;
    v19[4] = v4;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_get_group_uuid_block_invoke((uint64_t)v19);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_get_group_uuid";
  v6 = (char *)_os_log_send_and_compose_impl();

  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (v21 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = v21;
    if (os_log_type_enabled(v7, v21))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_group_uuid";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = v21;
    if (os_log_type_enabled(v7, v21))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_group_uuid";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = v21;
  v16 = os_log_type_enabled(v7, v21);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_get_group_uuid";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_connection_get_group_uuid";
    v24 = 2082;
    v25 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v10) {
    free(v10);
  }
  return 1LL;
}

    if (!v14)
    {
LABEL_39:
      v11 = 1;
      goto LABEL_40;
    }

                nw_protocol_stack_append_application_protocol(v32, options);
LABEL_131:
                if ((v152 & 1) == 0)
                {
                  if (nw_proxy_config_get_mode(*((void **)v165 + 5)) == 1
                    && (v121 = nw_proxy_config_use_over_privacy_proxy(*((void **)v165 + 5)), object)
                    && v121
                    && *((void *)object + 2) != *((void *)object + 3))
                  {
                    v159[0] = MEMORY[0x1895F87A8];
                    v159[1] = 3221225472LL;
                    v159[2] = ___ZL42nw_endpoint_proxy_add_config_if_applicableP30NWConcrete_nw_endpoint_handlerPU27objcproto16OS_nw_parameters8NSObjectPU29objcproto18OS_nw_proxy_configS1_PU22objcproto11OS_nw_arrayS1_S5_b_block_invoke;
                    v159[3] = &unk_189BC1378;
                    v162 = type;
                    v160 = v14;
                    v161 = v11;
                    nw_array_apply(object, (uint64_t)v159);

                    merged = (NWConcrete_nw_proxy_config *)v160;
                  }

                  else if (v158 && nw_proxy_config_is_privacy_proxy(*((void **)v165 + 5), 0LL))
                  {
                    merged = nw_proxy_config_create_merged(*((void **)v165 + 5), v158);
                    nw_array_append(*((void *)v14 + 7), merged);
                    if ((nw_endpoint_handler_get_logging_disabled(v11) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                      }
                      v123 = (os_log_s *)(id)gconnectionLogObj;
                      if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
                      {
                        v150 = v14;
                        v124 = nw_endpoint_handler_get_id_string(v11);
                        v125 = nw_endpoint_handler_dry_run_string(v11);
                        v153 = nw_endpoint_handler_copy_endpoint(v11);
                        v126 = nw_endpoint_get_logging_description(v153);
                        v127 = nw_endpoint_handler_state_string(v11);
                        v128 = nw_endpoint_handler_mode_string(v11);
                        v129 = nw_endpoint_handler_copy_current_path(v11);
                        v130 = (const char *)*((void *)v165 + 5);
                        *(_DWORD *)buf = 136448002;
                        v173 = "nw_endpoint_proxy_add_config_if_applicable";
                        v174 = 2082;
                        v175 = (void *)v124;
                        v176 = 2082;
                        v177 = v125;
                        v178 = 2082;
                        v179 = v126;
                        v180 = 2082;
                        v181 = v127;
                        v182 = 2082;
                        v183 = v128;
                        v184 = 2114;
                        v185 = v129;
                        v186 = 2114;
                        v187 = v130;
                        _os_log_impl( &dword_181A5C000,  v123,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding proxy merged with companion %{public}@",  buf,  0x52u);

                        v14 = v150;
                      }
                    }
                  }

                  else
                  {
                    nw_array_append(*((void *)v14 + 7), *((void **)v165 + 5));
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    merged = (NWConcrete_nw_proxy_config *)(id)gconnectionLogObj;
                    if (os_log_type_enabled((os_log_t)merged, OS_LOG_TYPE_DEBUG))
                    {
                      v151 = v14;
                      v131 = nw_endpoint_handler_get_id_string(v11);
                      v132 = nw_endpoint_handler_dry_run_string(v11);
                      v133 = nw_endpoint_handler_copy_endpoint(v11);
                      v134 = nw_endpoint_get_logging_description(v133);
                      v135 = nw_endpoint_handler_state_string(v11);
                      v136 = nw_endpoint_handler_mode_string(v11);
                      v137 = nw_endpoint_handler_copy_current_path(v11);
                      v138 = (const char *)*((void *)v165 + 5);
                      *(_DWORD *)buf = 136448002;
                      v173 = "nw_endpoint_proxy_add_config_if_applicable";
                      v174 = 2082;
                      v175 = (void *)v131;
                      v176 = 2082;
                      v177 = v132;
                      v178 = 2082;
                      v179 = v134;
                      v180 = 2082;
                      v181 = v135;
                      v182 = 2082;
                      v183 = v136;
                      v184 = 2114;
                      v185 = v137;
                      v186 = 2114;
                      v187 = v138;
                      _os_log_impl( &dword_181A5C000,  (os_log_t)merged,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding proxy %{public}@",  buf,  0x52u);

                      v14 = v151;
                    }
                  }

LABEL_151:
                }

    goto LABEL_38;
  }

  if (v7)
  {
    -[NWCandidatePathMonitor setQueue:](self, "setQueue:", v6);
    -[NWCandidatePathMonitor setUpdateHandler:](self, "setUpdateHandler:", v8);
    objc_initWeak((id *)location, self);
    v9 = -[NWCandidatePathMonitor primaryEvaluator](self, "primaryEvaluator");
    v25[0] = MEMORY[0x1895F87A8];
    v25[1] = 3221225472LL;
    v25[2] = __55__NWCandidatePathMonitor_startWithQueue_updateHandler___block_invoke;
    v25[3] = &unk_189BC8C90;
    objc_copyWeak(&v26, (id *)location);
    nw_path_evaluator_set_update_handler(v9, v6, v25);
    v10 = -[NWCandidatePathMonitor primaryEvaluator](self, "primaryEvaluator");
    nw_path_evaluator_call_update_handler(v10);

    objc_destroyWeak(&v26);
    objc_destroyWeak((id *)location);
    goto LABEL_4;
  }

  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)location = 136446210;
  *(void *)&location[4] = "-[NWCandidatePathMonitor startWithQueue:updateHandler:]";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)location = 136446210;
      *(void *)&location[4] = "-[NWCandidatePathMonitor startWithQueue:updateHandler:]";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null updateHandler", location, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v27)
  {
    __nwlog_obj();
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)location = 136446210;
      *(void *)&location[4] = "-[NWCandidatePathMonitor startWithQueue:updateHandler:]";
      _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null updateHandler, backtrace limit exceeded",  location,  0xCu);
    }

    goto LABEL_37;
  }

  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v21 = type;
  v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)location = 136446210;
      *(void *)&location[4] = "-[NWCandidatePathMonitor startWithQueue:updateHandler:]";
      _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s called with null updateHandler, no backtrace",  location,  0xCu);
    }

    goto LABEL_37;
  }

  if (v22)
  {
    *(_DWORD *)location = 136446466;
    *(void *)&location[4] = "-[NWCandidatePathMonitor startWithQueue:updateHandler:]";
    v30 = 2082;
    v31 = v20;
    _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s called with null updateHandler, dumping backtrace:%{public}s",  location,  0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v10) {
    free(v10);
  }
  return 1LL;
}

      free(backtrace_string);
      goto LABEL_51;
    }

    if (!v25) {
      goto LABEL_51;
    }
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_ohttp_get_output_frames";
    v20 = "%{public}s called with null return_array, no backtrace";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
LABEL_51:
    if (v17) {
      free(v17);
    }
    return 0LL;
  }

  LODWORD(v8) = a4;
  context_for_protocol = nw_protocol_ohttp_get_context_for_protocol((uint64_t)handle, (uint64_t)a2);
  if (!context_for_protocol) {
    return 0LL;
  }
  v10 = context_for_protocol;
  else {
    v8 = v8;
  }
  if ((_DWORD)v8)
  {
    v11 = nw_calloc_type<unsigned char>(v8);
    v12 = v8;
  }

  else
  {
    v11 = 0LL;
    v12 = 0;
  }

  v13 = nw_frame_create(0, v11, v12, (uint64_t)nw_protocol_ohttp_output_frame_finalizer, v10);
  v14 = 1LL;
  nw_frame_set_buffer_used_malloc(v13, 1);
  *(void *)(v13 + 16) = 0LL;
  v15 = *(uint64_t **)(v10 + 16);
  *(void *)(v13 + 24) = v15;
  *v15 = v13;
  *(void *)(v10 + 16) = v13 + 16;
  *(void *)(v13 + 32) = 0LL;
  tqh_last = a6->tqh_last;
  *(void *)(v13 + 40) = tqh_last;
  *tqh_last = (nw_frame *)v13;
  a6->tqh_last = (nw_frame **)(v13 + 32);
  return v14;
}

    if (!v14)
    {
LABEL_39:
      v11 = 1;
      goto LABEL_40;
    }

LABEL_38:
      if (v10) {
        free(v10);
      }
      goto LABEL_40;
    }

    if (!v23)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null stats, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null stats, no backtrace", buf, 0xCu);
      }

      goto LABEL_37;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_endpoint_handler_fillout_route_stats";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null stats, dumping backtrace:%{public}s",  buf,  0x16u);
    }

          free(v26);
          goto LABEL_38;
        }

        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWEndpoint initWithCoder:]";
          v29 = "%{public}s nw_endpoint_create_from_dictionary failed";
          goto LABEL_56;
        }

        if (!v51)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWEndpoint initWithCoder:]";
          v29 = "%{public}s nw_endpoint_create_from_dictionary failed, backtrace limit exceeded";
          goto LABEL_56;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (os_log_s *)(id)gLogObj;
        v35 = type;
        v38 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "-[NWEndpoint initWithCoder:]";
            v56 = 2082;
            v57 = backtrace_string;
            v37 = "%{public}s nw_endpoint_create_from_dictionary failed, dumping backtrace:%{public}s";
            goto LABEL_34;
          }

          goto LABEL_35;
        }

        if (!v38)
        {
LABEL_58:

          if (!v26) {
            goto LABEL_38;
          }
          goto LABEL_37;
        }

        *(_DWORD *)buf = 136446210;
        v55 = "-[NWEndpoint initWithCoder:]";
        v29 = "%{public}s nw_endpoint_create_from_dictionary failed, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v55 = "-[NWEndpoint initWithCoder:]";
        v26 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWEndpoint initWithCoder:]";
          v29 = "%{public}s NWUtilsCreateXPCDictionaryFromNSDictionary failed";
LABEL_56:
          v42 = v27;
          v43 = v28;
LABEL_57:
          _os_log_impl(&dword_181A5C000, v42, v43, v29, buf, 0xCu);
          goto LABEL_58;
        }

        if (!v51)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWEndpoint initWithCoder:]";
          v29 = "%{public}s NWUtilsCreateXPCDictionaryFromNSDictionary failed, backtrace limit exceeded";
          goto LABEL_56;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (os_log_s *)(id)gLogObj;
        v35 = type;
        v36 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "-[NWEndpoint initWithCoder:]";
            v56 = 2082;
            v57 = backtrace_string;
            v37 = "%{public}s NWUtilsCreateXPCDictionaryFromNSDictionary failed, dumping backtrace:%{public}s";
LABEL_34:
            _os_log_impl(&dword_181A5C000, v27, v35, v37, buf, 0x16u);
          }

    v12 = 0LL;
    goto LABEL_29;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_30;
    }
    v18 = objc_alloc_init(&OBJC_CLASS___NWPBAddressEndpoint);
    if (v3) {
      objc_storeStrong((id *)&v3->_address, v18);
    }
    v11 = -[NWEndpoint addressData](self, "addressData");
    if (v3)
    {
      v12 = v3->_address;
      if (v12)
      {
        v13 = 1LL;
        goto LABEL_28;
      }

      goto LABEL_29;
    }

    goto LABEL_37;
  }

  v14 = objc_alloc_init(&OBJC_CLASS___NWPBHostEndpoint);
  if (v3) {
    objc_storeStrong((id *)&v3->_host, v14);
  }
  v15 = -[NWEndpoint hostname](self, "hostname");
  if (v3)
  {
    v16 = v3->_host;
    v17 = v16;
    if (v16) {
      objc_storeStrong((id *)&v16->_hostname, v15);
    }
  }

  else
  {
    v17 = 0LL;
  }
  v11 = -[NWEndpoint port](self, "port");
  if (!v3) {
    goto LABEL_37;
  }
  v12 = v3->_host;
  if (v12)
  {
    v13 = 2LL;
    goto LABEL_28;
  }

  return (NWEndpoint *)v16;
}

      free(v14);
      if (!v5) {
        return;
      }
LABEL_55:
      free(v5);
      return;
    }

    v6 = (os_log_s *)__nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_54;
    }
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_webtransport_stream_error";
    v8 = "%{public}s called with null webtransport_stream";
LABEL_53:
    _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
    goto LABEL_54;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_webtransport_stream_error";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = (os_log_s *)__nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_webtransport_stream_error";
      v8 = "%{public}s called with null other_protocol";
      goto LABEL_53;
    }

    if (!v19)
    {
      v6 = (os_log_s *)__nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_webtransport_stream_error";
      v8 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_53;
    }

    v14 = (char *)__nw_create_backtrace_string();
    v6 = (os_log_s *)__nwlog_obj();
    v7 = type;
    v17 = os_log_type_enabled(v6, type);
    if (!v14)
    {
      if (!v17) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_webtransport_stream_error";
      v8 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_53;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_webtransport_stream_error";
      v23 = 2082;
      v24 = v14;
      v16 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if ((*((_BYTE *)handle + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      v9 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = handle[11];
        if (v10) {
          v11 = *(_DWORD *)(v10 + 460);
        }
        else {
          v11 = -1;
        }
        v18 = handle[8];
        *(_DWORD *)buf = 136447234;
        v22 = "nw_protocol_webtransport_stream_error";
        v23 = 2082;
        v24 = (char *)(handle + 24);
        v25 = 2080;
        v26 = " ";
        v27 = 1024;
        v28 = v11;
        v29 = 2048;
        v30 = v18;
        _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }

  nw_protocol_error(a1->default_input_handler->flow_id, (uint64_t)a2);
}

    free(backtrace_string);
    goto LABEL_53;
  }

  v16 = (os_log_s *)__nwlog_obj();
  v17 = type;
  if (os_log_type_enabled(v16, type))
  {
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
    v18 = "%{public}s called with null input_protocol";
    goto LABEL_52;
  }

      free(v19);
      if (!v10) {
        return;
      }
LABEL_65:
      free(v10);
      return;
    }

    v11 = (os_log_s *)__nwlog_obj();
    v12 = type[0];
    if (!os_log_type_enabled(v11, type[0])) {
      goto LABEL_64;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
    v13 = "%{public}s called with null webtransport_stream";
LABEL_63:
    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_64;
  }

  if ((*((_BYTE *)handle + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      v14 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v15 = handle[11];
        if (v15) {
          v16 = *(_DWORD *)(v15 + 460);
        }
        else {
          v16 = -1;
        }
        v24 = handle[8];
        *(_DWORD *)buf = 136447234;
        *(void *)&buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 24;
        *(_WORD *)&buf[22] = 2080;
        v33 = (uint64_t)" ";
        LOWORD(v34) = 1024;
        *(_DWORD *)((char *)&v34 + 2) = v16;
        HIWORD(v34) = 2048;
        v35 = v24;
        _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }

  if (*((_DWORD *)handle + 47) != 2 || (*((_BYTE *)handle + 276) & 8) != 0) {
    return;
  }
  v3 = handle[11];
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_webtransport_http2_send_control_capsule";
    v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v11 = (os_log_s *)__nwlog_obj();
      v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_webtransport_http2_send_control_capsule";
      v13 = "%{public}s called with null webtransport_session";
      goto LABEL_63;
    }

    if (!v26)
    {
      v11 = (os_log_s *)__nwlog_obj();
      v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_webtransport_http2_send_control_capsule";
      v13 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
      goto LABEL_63;
    }

    v19 = (char *)__nw_create_backtrace_string();
    v11 = (os_log_s *)__nwlog_obj();
    v12 = type[0];
    v25 = os_log_type_enabled(v11, type[0]);
    if (!v19)
    {
      if (!v25) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_webtransport_http2_send_control_capsule";
      v13 = "%{public}s called with null webtransport_session, no backtrace";
      goto LABEL_63;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_webtransport_http2_send_control_capsule";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v19;
      v21 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  v4 = handle[8];
  if (!*(void *)(v3 + 192)) {
    *(void *)(v3 + 192) = nw_array_create();
  }
  v5 = calloc(1uLL, 0x18uLL);
  if (!v5)
  {
    v22 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(void *)&buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = 1LL;
    *(_WORD *)&buf[22] = 2048;
    v33 = 24LL;
    v23 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v23))
    {
      __break(1u);
      return;
    }

    free(v23);
  }

  *v5 = 420171068LL;
  v5[1] = v4;
  v5[2] = -1LL;
  nw_array_append(*(void *)(v3 + 192), v5);
  v6 = *(void *)(v3 + 192);
  if (v6 && *(void *)(v6 + 16) != *(void *)(v6 + 24))
  {
    v7 = nw_array_create();
    v8 = *(unsigned __int8 **)(v3 + 192);
    v9 = MEMORY[0x1895F87A8];
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke;
    v33 = (uint64_t)&__block_descriptor_tmp_37_33692;
    v34 = v3;
    v35 = v7;
    nw_array_apply(v8, (uint64_t)buf);
    *(void *)type = v9;
    v28 = 0x40000000LL;
    v29 = ___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke_38;
    v30 = &__block_descriptor_tmp_39_33693;
    v31 = v3;
    nw_array_apply((unsigned __int8 *)v7, (uint64_t)type);
    if (v7) {
      os_release((void *)v7);
    }
  }

      free(v18);
      if (!v12) {
        return 0LL;
      }
      goto LABEL_53;
    }

    v13 = (os_log_s *)__nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_webtransport_stream_get_input_frames";
    v15 = "%{public}s called with null webtransport_stream";
LABEL_51:
    _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
    goto LABEL_52;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_webtransport_stream_get_input_frames";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = (os_log_s *)__nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_webtransport_stream_get_input_frames";
      v15 = "%{public}s called with null input_protocol";
      goto LABEL_51;
    }

    if (!v22)
    {
      v13 = (os_log_s *)__nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_webtransport_stream_get_input_frames";
      v15 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_51;
    }

    v18 = (char *)__nw_create_backtrace_string();
    v13 = (os_log_s *)__nwlog_obj();
    v14 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_webtransport_stream_get_input_frames";
      v15 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_51;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_webtransport_stream_get_input_frames";
      v26 = 2082;
      v27 = v18;
      v20 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if ((*((_BYTE *)handle + 276) & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v8 = handle[11];
      if (v8) {
        v9 = *(_DWORD *)(v8 + 460);
      }
      else {
        v9 = -1;
      }
      v10 = handle[8];
      *(_DWORD *)buf = 136447234;
      v25 = "nw_protocol_webtransport_stream_get_input_frames";
      v26 = 2082;
      v27 = (char *)(handle + 24);
      v28 = 2080;
      v29 = " ";
      v30 = 1024;
      v31 = v9;
      v32 = 2048;
      v33 = v10;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> called, stream transport mode not yet set, returning 0 frames",  buf,  0x30u);
    }
  }

  return 0LL;
}

      free(v18);
      if (!v12) {
        return 0LL;
      }
      goto LABEL_53;
    }

    v13 = (os_log_s *)__nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_webtransport_stream_get_output_frames";
    v15 = "%{public}s called with null webtransport_stream";
LABEL_51:
    _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
    goto LABEL_52;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_webtransport_stream_get_output_frames";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = (os_log_s *)__nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_webtransport_stream_get_output_frames";
      v15 = "%{public}s called with null return_array";
      goto LABEL_51;
    }

    if (!v22)
    {
      v13 = (os_log_s *)__nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_webtransport_stream_get_output_frames";
      v15 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_51;
    }

    v18 = (char *)__nw_create_backtrace_string();
    v13 = (os_log_s *)__nwlog_obj();
    v14 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_webtransport_stream_get_output_frames";
      v15 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_51;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_webtransport_stream_get_output_frames";
      v26 = 2082;
      v27 = v18;
      v20 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if ((*((_BYTE *)handle + 276) & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v8 = handle[11];
      if (v8) {
        v9 = *(_DWORD *)(v8 + 460);
      }
      else {
        v9 = -1;
      }
      v10 = handle[8];
      *(_DWORD *)buf = 136447234;
      v25 = "nw_protocol_webtransport_stream_get_output_frames";
      v26 = 2082;
      v27 = (char *)(handle + 24);
      v28 = 2080;
      v29 = " ";
      v30 = 1024;
      v31 = v9;
      v32 = 2048;
      v33 = v10;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> called, stream transport mode not yet set, returning 0 frames",  buf,  0x30u);
    }
  }

  return 0LL;
}

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_38;
  }

  handle = a1->handle;
  if (handle)
  {
    if ((*((_BYTE *)handle + 276) & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v4 = handle[11];
        if (v4) {
          v5 = *(_DWORD *)(v4 + 460);
        }
        else {
          v5 = -1;
        }
        v6 = handle[8];
        *(_DWORD *)buf = 136447234;
        v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
        v20 = 2082;
        v21 = (char *)(handle + 24);
        v22 = 2080;
        v23 = " ";
        v24 = 1024;
        v25 = v5;
        v26 = 2048;
        v27 = v6;
        _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> finalize_output_frames called on stream with no transport mode",  buf,  0x30u);
      }
    }

    return 0LL;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v9 = (os_log_s *)__nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
    v11 = "%{public}s called with null webtransport_stream";
    goto LABEL_37;
  }

  if (!v16)
  {
    v9 = (os_log_s *)__nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
    v11 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  v9 = (os_log_s *)__nwlog_obj();
  v10 = type;
  v15 = os_log_type_enabled(v9, type);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
    v11 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_37;
  }

  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
    v20 = 2082;
    v21 = v14;
    _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v8) {
    goto LABEL_39;
  }
  return 0LL;
}

  if (v7) {
    free(v7);
  }
  v4 = 0LL;
LABEL_4:

  return v4;
}

      free(v31);
      if (!v18) {
        goto LABEL_6;
      }
      goto LABEL_67;
    }

    __nwlog_obj();
    v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = v48;
    if (!os_log_type_enabled(v19, v48)) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    v50 = "nw_socks5_server_register_udp_associate_request";
    v21 = "%{public}s called with null handler";
LABEL_64:
    _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
    goto LABEL_65;
  }

  if (!v12)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_socks5_server_register_udp_associate_request";
    v18 = (char *)_os_log_send_and_compose_impl();

    v48 = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (v48 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = v48;
      if (os_log_type_enabled(v19, v48))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_socks5_server_register_udp_associate_request";
        v21 = "%{public}s called with null queue";
        goto LABEL_64;
      }

      if (v6) {
        goto LABEL_38;
      }
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v57 = "nw_protocol_http2_transport_frame_input_finalizer";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v54)
      {
        v15 = (char *)__nw_create_backtrace_string();
        v7 = (os_log_s *)__nwlog_obj();
        v8 = type;
        v49 = os_log_type_enabled(v7, type);
        if (v15)
        {
          if (v49)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "nw_protocol_http2_transport_frame_input_finalizer";
            v58 = 2082;
            v59 = (uint64_t)v15;
            v17 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
            goto LABEL_18;
          }

          goto LABEL_19;
        }

        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_protocol_http2_transport_frame_input_finalizer";
          v9 = "%{public}s called with null http2_transport, no backtrace";
          goto LABEL_36;
        }
      }

      else
      {
        v7 = (os_log_s *)__nwlog_obj();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_protocol_http2_transport_frame_input_finalizer";
          v9 = "%{public}s called with null http2_transport, backtrace limit exceeded";
          goto LABEL_36;
        }
      }

      goto LABEL_37;
    }

    v7 = (os_log_s *)__nwlog_obj();
    v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    v57 = "nw_protocol_http2_transport_frame_input_finalizer";
    v9 = "%{public}s called with null http2_transport";
    goto LABEL_36;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v57 = "nw_protocol_http2_transport_frame_input_finalizer";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v54 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v7 = (os_log_s *)__nwlog_obj();
    v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    v57 = "nw_protocol_http2_transport_frame_input_finalizer";
    v9 = "%{public}s called with null input_frame_context";
    goto LABEL_36;
  }

  if (!v54)
  {
    v7 = (os_log_s *)__nwlog_obj();
    v8 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v57 = "nw_protocol_http2_transport_frame_input_finalizer";
      v9 = "%{public}s called with null input_frame_context, backtrace limit exceeded";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  v7 = (os_log_s *)__nwlog_obj();
  v8 = type;
  v44 = os_log_type_enabled(v7, type);
  if (!v15)
  {
    if (v44)
    {
      *(_DWORD *)buf = 136446210;
      v57 = "nw_protocol_http2_transport_frame_input_finalizer";
      v9 = "%{public}s called with null input_frame_context, no backtrace";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if (v44)
  {
    *(_DWORD *)buf = 136446466;
    v57 = "nw_protocol_http2_transport_frame_input_finalizer";
    v58 = 2082;
    v59 = (uint64_t)v15;
    v17 = "%{public}s called with null input_frame_context, dumping backtrace:%{public}s";
    goto LABEL_18;
  }

    if (!v9) {
      return 1LL;
    }
LABEL_38:
    free(v9);
    return 1LL;
  }

  v4 = *(void *)(a2 + 16);
  if (v4)
  {
    v5 = *(void *)(v4 + 24);
    if (v5 && (v6 = *(void (**)(uint64_t, void, void, void, void))(v5 + 160)) != 0LL)
    {
      v6(v4, *(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 56));
    }

    else
    {
      v27 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v28 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v37 = "nw_protocol_http2_transport_notify_block_invoke";
        if (v28) {
          v29 = (const char *)(v28 + 205);
        }
        else {
          v29 = "";
        }
        v38 = 2082;
        v39 = (void *)v29;
        v40 = 2048;
        v41 = v4;
        _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s notify callback not set on input handler %p, skipping notify",  buf,  0x20u);
      }
    }

    return 1LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = *(void *)(a1 + 32);
  if (v7) {
    v8 = (const char *)(v7 + 205);
  }
  else {
    v8 = "";
  }
  *(_DWORD *)buf = 136446722;
  v37 = "nw_protocol_http2_transport_notify_block_invoke";
  v38 = 2082;
  v39 = (void *)v8;
  v40 = 2048;
  v41 = a2;
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (os_log_s *)gLogObj;
    v11 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_37;
    }
    v12 = *(void *)(a1 + 32);
    if (v12) {
      v13 = (const char *)(v12 + 205);
    }
    else {
      v13 = "";
    }
    *(_DWORD *)buf = 136446722;
    v37 = "nw_protocol_http2_transport_notify_block_invoke";
    v38 = 2082;
    v39 = (void *)v13;
    v40 = 2048;
    v41 = a2;
    v14 = "%{public}s %{public}s no object for hash node %p, skipping notify";
LABEL_35:
    v23 = v10;
    v24 = v11;
    v25 = 32;
LABEL_36:
    _os_log_impl(&dword_181A5C000, v23, v24, v14, buf, v25);
    goto LABEL_37;
  }

  if (!v34)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (os_log_s *)gLogObj;
    v11 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_37;
    }
    v19 = *(void *)(a1 + 32);
    if (v19) {
      v20 = (const char *)(v19 + 205);
    }
    else {
      v20 = "";
    }
    *(_DWORD *)buf = 136446722;
    v37 = "nw_protocol_http2_transport_notify_block_invoke";
    v38 = 2082;
    v39 = (void *)v20;
    v40 = 2048;
    v41 = a2;
    v14 = "%{public}s %{public}s no object for hash node %p, skipping notify, backtrace limit exceeded";
    goto LABEL_35;
  }

  v15 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (os_log_s *)gLogObj;
  v11 = type;
  v16 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v15)
  {
    if (!v16) {
      goto LABEL_37;
    }
    v21 = *(void *)(a1 + 32);
    if (v21) {
      v22 = (const char *)(v21 + 205);
    }
    else {
      v22 = "";
    }
    *(_DWORD *)buf = 136446722;
    v37 = "nw_protocol_http2_transport_notify_block_invoke";
    v38 = 2082;
    v39 = (void *)v22;
    v40 = 2048;
    v41 = a2;
    v14 = "%{public}s %{public}s no object for hash node %p, skipping notify, no backtrace";
    goto LABEL_35;
  }

  if (v16)
  {
    v17 = *(void *)(a1 + 32);
    if (v17) {
      v18 = (const char *)(v17 + 205);
    }
    else {
      v18 = "";
    }
    *(_DWORD *)buf = 136446978;
    v37 = "nw_protocol_http2_transport_notify_block_invoke";
    v38 = 2082;
    v39 = (void *)v18;
    v40 = 2048;
    v41 = a2;
    v42 = 2082;
    v43 = v15;
    _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s %{public}s no object for hash node %p, skipping notify, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v15);
  if (v9) {
    goto LABEL_38;
  }
  return 1LL;
}

    free(backtrace_string);
    if (!v3) {
      return;
    }
    goto LABEL_46;
  }

  if (*(_DWORD *)(v5 + 40)) {
    return;
  }
  nw_protocol_set_input_handler(v2, 0LL);
  if (gLogDatapath)
  {
    v56 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v3 + 205;
      _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s no more input handlers, destroying",  buf,  0x16u);
    }
  }

  v7 = *(char **)(v3 + 120);
  if (v7)
  {
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL35nw_protocol_http2_transport_destroyP11nw_protocol_block_invoke;
    v77 = (char *)&__block_descriptor_tmp_34_38173;
    v78 = v3;
    nw_hash_table_apply(v7, (uint64_t)buf);
    v8 = *(os_unfair_lock_s **)(v3 + 120);
    if (v8)
    {
      _nw_hash_table_release(v8, v6);
      *(void *)(v3 + 120) = 0LL;
    }
  }

  v9 = *(os_unfair_lock_s **)(v3 + 112);
  if (v9)
  {
    _nw_hash_table_release(v9, v6);
    *(void *)(v3 + 112) = 0LL;
  }

  v10 = *(void *)(v2 + 32);
  if (v10)
  {
    v11 = *(void *)(v10 + 24);
    if (v11)
    {
      v12 = *(void (**)(void))(v11 + 8);
      if (v12)
      {
        v12();
        goto LABEL_18;
      }
    }
  }

  __nwlog_obj();
  v33 = *(void *)(v2 + 32);
  v34 = "invalid";
  if (v33)
  {
    v35 = *(const char **)(v33 + 16);
    if (v35) {
      v34 = v35;
    }
  }

  *(_DWORD *)type = 136446466;
  v71 = "nw_protocol_http2_transport_destroy";
  v72 = 2082;
  v73 = v34;
  v36 = (char *)_os_log_send_and_compose_impl();
  v69 = OS_LOG_TYPE_ERROR;
  v68 = 0;
  if (__nwlog_fault(v36, &v69, &v68))
  {
    if (v69 == OS_LOG_TYPE_FAULT)
    {
      v37 = (os_log_s *)__nwlog_obj();
      v38 = v69;
      if (!os_log_type_enabled(v37, v69)) {
        goto LABEL_116;
      }
      v39 = *(void *)(v2 + 32);
      v40 = "invalid";
      if (v39)
      {
        v41 = *(const char **)(v39 + 16);
        if (v41) {
          v40 = v41;
        }
      }

      *(_DWORD *)type = 136446466;
      v71 = "nw_protocol_http2_transport_destroy";
      v72 = 2082;
      v73 = v40;
      v42 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
      goto LABEL_115;
    }

    if (!v68)
    {
      v37 = (os_log_s *)__nwlog_obj();
      v38 = v69;
      if (!os_log_type_enabled(v37, v69)) {
        goto LABEL_116;
      }
      v60 = *(void *)(v2 + 32);
      v61 = "invalid";
      if (v60)
      {
        v62 = *(const char **)(v60 + 16);
        if (v62) {
          v61 = v62;
        }
      }

      *(_DWORD *)type = 136446466;
      v71 = "nw_protocol_http2_transport_destroy";
      v72 = 2082;
      v73 = v61;
      v42 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
      goto LABEL_115;
    }

    v45 = (char *)__nw_create_backtrace_string();
    v37 = (os_log_s *)__nwlog_obj();
    v38 = v69;
    v46 = os_log_type_enabled(v37, v69);
    if (v45)
    {
      if (v46)
      {
        v47 = *(void *)(v2 + 32);
        v48 = "invalid";
        if (v47)
        {
          v49 = *(const char **)(v47 + 16);
          if (v49) {
            v48 = v49;
          }
        }

        *(_DWORD *)type = 136446722;
        v71 = "nw_protocol_http2_transport_destroy";
        v72 = 2082;
        v73 = v48;
        v74 = 2082;
        v75 = v45;
        _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s",  (uint8_t *)type,  0x20u);
      }

      free(v45);
      goto LABEL_116;
    }

    if (v46)
    {
      v63 = *(void *)(v2 + 32);
      v64 = "invalid";
      if (v63)
      {
        v65 = *(const char **)(v63 + 16);
        if (v65) {
          v64 = v65;
        }
      }

      *(_DWORD *)type = 136446466;
      v71 = "nw_protocol_http2_transport_destroy";
      v72 = 2082;
      v73 = v64;
      v42 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_115:
      _os_log_impl(&dword_181A5C000, v37, v38, v42, (uint8_t *)type, 0x16u);
    }
  }

    goto LABEL_38;
  }

  if (a2)
  {
    *(_OWORD *)(v3 + 72) = *a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_config_set_fallback_proxy_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_set_fallback_proxy_agent";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null fallback_proxy_agent_uuid", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_set_fallback_proxy_agent";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null fallback_proxy_agent_uuid, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_set_fallback_proxy_agent";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null fallback_proxy_agent_uuid, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_config_set_fallback_proxy_agent";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null fallback_proxy_agent_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 72);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_config_copy_fallback_proxy_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_copy_fallback_proxy_agent";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null out_fallback_proxy_agent_uuid", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_copy_fallback_proxy_agent";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null out_fallback_proxy_agent_uuid, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_copy_fallback_proxy_agent";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null out_fallback_proxy_agent_uuid, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_config_copy_fallback_proxy_agent";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null out_fallback_proxy_agent_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    objc_storeStrong(v3 + 11, a2);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_proxy_config_set_fallback_proxy_config";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_config_set_fallback_proxy_config";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null fallback_proxy_config", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_config_set_fallback_proxy_config";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null fallback_proxy_config, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_config_set_fallback_proxy_config";
      _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null fallback_proxy_config, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_proxy_config_set_fallback_proxy_config";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null fallback_proxy_config, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

  if (v7) {
    free(v7);
  }
  v4 = 0LL;
LABEL_4:

  return v4;
}

    if (gLogDatapath)
    {
      v62 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v32;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = &v231;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v12 + 616;
        _os_log_impl(&dword_181A5C000, v62, OS_LOG_TYPE_DEBUG, "%{public}s moved %u frames from %p to %p", buf, 0x26u);
      }
    }

    if (v17) {
      free(v17);
    }
    *(_DWORD *)(v3 + 336) = 0;
    v4 = MEMORY[0x1895F87A8];
    v14 = (uint64_t *)(v2 + 696);
    if ((*(_BYTE *)(v3 + 158) & 1) != 0)
    {
LABEL_41:
      if ((*(_WORD *)(v2 + 872) & 0x800) == 0) {
        goto LABEL_62;
      }
      v27 = *(_DWORD *)(v3 + 368);
      *(_DWORD *)(v3 + 368) = v27 - 1;
      if (v27)
      {
LABEL_60:
        if ((*(_BYTE *)(v3 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v113 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
            {
              v114 = *(_DWORD *)(v3 + 372);
              v115 = *(_DWORD *)(v3 + 368) + *(_DWORD *)(v3 + 364);
              *(_DWORD *)buf = 136447490;
              *(void *)&buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v3 + 74;
              *(_WORD *)&buf[22] = 2080;
              v140 = (uint64_t)" ";
              *(_WORD *)v141 = 1024;
              *(_DWORD *)&v141[2] = v114;
              *(_WORD *)&v141[6] = 1024;
              *(_DWORD *)&v141[8] = v115;
              *(_WORD *)&v141[12] = 2048;
              *(void *)&v141[14] = v2;
              _os_log_impl( &dword_181A5C000,  v113,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> decreased connection pool width to %u after removing non-reusable connection %p",  buf,  0x36u);
            }
          }
        }

    if (v17) {
      free(v17);
    }
    *(_DWORD *)(v3 + 336) = 0;
    v4 = MEMORY[0x1895F87A8];
    v14 = (uint64_t *)(v2 + 696);
    goto LABEL_40;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http1_tear_down_connection";
  v67 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v141) = 0;
  if (__nwlog_fault(v67, &type, &v141))
  {
    if (type == 17)
    {
      v68 = (os_log_s *)__nwlog_obj();
      v69 = type;
      if (!os_log_type_enabled(v68, (os_log_type_t)type)) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_tear_down_connection";
      v70 = "%{public}s called with null http1";
      goto LABEL_192;
    }

    if (!(_BYTE)v141)
    {
      v68 = (os_log_s *)__nwlog_obj();
      v69 = type;
      if (!os_log_type_enabled(v68, (os_log_type_t)type)) {
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_tear_down_connection";
      v70 = "%{public}s called with null http1, backtrace limit exceeded";
      goto LABEL_192;
    }

    v114 = (char *)__nw_create_backtrace_string();
    v68 = (os_log_s *)__nwlog_obj();
    v69 = type;
    v115 = os_log_type_enabled(v68, (os_log_type_t)type);
    if (v114)
    {
      if (v115)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v114;
        _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v114);
      goto LABEL_193;
    }

    if (v115)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_tear_down_connection";
      v70 = "%{public}s called with null http1, no backtrace";
LABEL_192:
      _os_log_impl(&dword_181A5C000, v68, v69, v70, buf, 0xCu);
    }
  }

  if (v11) {
LABEL_38:
  }
    free(v11);
  return 0;
}
  }
  }
  }

  if (v19) {
    free(v19);
  }
  v16 = 0LL;
LABEL_8:

  return v16;
}

    free(v23);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }

  v8 = (os_unfair_lock_s *)nw_endpoint_copy_registrar_for_identifier(v5, v4, 0);
  v9 = v8;
  if (v8)
  {
    *(void *)aBlock = MEMORY[0x1895F87A8];
    *(void *)&aBlock[8] = 3221225472LL;
    *(void *)&aBlock[16] = __nw_protocol_instance_registrar_enumerate_instances_block_invoke;
    v34 = &unk_189BC6EB0;
    v35 = v8;
    v37 = v4;
    v36 = v7;
    v10 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v9 + 2);
    v10[2](v10);
    os_unfair_lock_unlock(v9 + 2);
  }

LABEL_7:
  return 1LL;
}

    free(backtrace_string);
    goto LABEL_56;
  }

  if (!a2)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null client_key", buf, 0xCu);
      }

      goto LABEL_55;
    }

    if (!v31)
    {
      __nwlog_obj();
      v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s called with null client_key, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_181A5C000, v14, v23, "%{public}s called with null client_key, no backtrace", buf, 0xCu);
      }

      goto LABEL_55;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null client_key, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_37;
  }

  if (v7)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x16812000000LL;
    v34 = __Block_byref_object_copy__44609;
    v35 = __Block_byref_object_dispose__44610;
    v36 = "!0!2/\x130";
    v37 = 0LL;
    v39 = 0LL;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    memset(v57, 0, sizeof(v57));
    v38 = a2;
    v40 = a1;
    v30[0] = MEMORY[0x1895F87A8];
    v30[1] = 3221225472LL;
    v30[2] = __nw_ws_validate_server_response_with_protocol_options_block_invoke;
    v30[3] = &unk_189BC60A8;
    v30[4] = buf;
    nw_protocol_options_access_handle(v7, v30);
    v9 = nw_ws_validate_server_response(*(void *)&buf[8] + 48LL);
    v10 = *(void *)&buf[8];
    if (a4) {
      *a4 = *(_DWORD *)(*(void *)&buf[8] + 260LL);
    }
    nw_ws_options_set_permessage_deflate(v8, (*(_WORD *)(v10 + 273) & 0x40) != 0);
    nw_ws_options_set_permessage_deflate_client_context_takeover(v8, HIBYTE(*(_WORD *)(*(void *)&buf[8] + 273LL)) & 1);
    nw_ws_options_set_permessage_deflate_server_context_takeover( v8,  (*(_WORD *)(*(void *)&buf[8] + 273LL) & 0x80) != 0);
    nw_ws_options_set_permessage_deflate_client_max_window_bits(v8, *(_BYTE *)(*(void *)&buf[8] + 269LL));
    nw_ws_options_set_permessage_deflate_server_max_window_bits(v8, *(_BYTE *)(*(void *)&buf[8] + 268LL));
    _Block_object_dispose(buf, 8);

    goto LABEL_7;
  }

  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v13, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null options", buf, 0xCu);
      }

  if (v10) {
    free(v10);
  }
  v7 = 0LL;
LABEL_4:

  return v7;
}

        v38 = 0LL;
        goto LABEL_30;
      }

          free(v26);
          goto LABEL_38;
        }

        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWParameters initWithCoder:]";
          v29 = "%{public}s nw_parameters_create_from_dictionary failed";
          goto LABEL_56;
        }

        if (!v51)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWParameters initWithCoder:]";
          v29 = "%{public}s nw_parameters_create_from_dictionary failed, backtrace limit exceeded";
          goto LABEL_56;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (os_log_s *)(id)gLogObj;
        v35 = type;
        v38 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "-[NWParameters initWithCoder:]";
            v56 = 2082;
            v57 = backtrace_string;
            v37 = "%{public}s nw_parameters_create_from_dictionary failed, dumping backtrace:%{public}s";
            goto LABEL_34;
          }

          goto LABEL_35;
        }

        if (!v38)
        {
LABEL_58:

          if (!v26) {
            goto LABEL_38;
          }
          goto LABEL_37;
        }

        *(_DWORD *)buf = 136446210;
        v55 = "-[NWParameters initWithCoder:]";
        v29 = "%{public}s nw_parameters_create_from_dictionary failed, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v55 = "-[NWParameters initWithCoder:]";
        v26 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWParameters initWithCoder:]";
          v29 = "%{public}s NWUtilsCreateXPCDictionaryFromNSDictionary failed";
LABEL_56:
          v42 = v27;
          v43 = v28;
LABEL_57:
          _os_log_impl(&dword_181A5C000, v42, v43, v29, buf, 0xCu);
          goto LABEL_58;
        }

        if (!v51)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWParameters initWithCoder:]";
          v29 = "%{public}s NWUtilsCreateXPCDictionaryFromNSDictionary failed, backtrace limit exceeded";
          goto LABEL_56;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (os_log_s *)(id)gLogObj;
        v35 = type;
        v36 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "-[NWParameters initWithCoder:]";
            v56 = 2082;
            v57 = backtrace_string;
            v37 = "%{public}s NWUtilsCreateXPCDictionaryFromNSDictionary failed, dumping backtrace:%{public}s";
LABEL_34:
            _os_log_impl(&dword_181A5C000, v27, v35, v37, buf, 0x16u);
          }

                      if (a2 == a3) {
                        return 234LL;
                      }
                      *(void *)(a1 + 8) = a2;
                      *(void *)(a1 + 16) = llhttp__on_method;
LABEL_39:
                      if (a2 == a3) {
                        return 233LL;
                      }
                      if (*a2 != 72) {
                        goto LABEL_207;
                      }
                      ++a2;
LABEL_42:
                      if (a2 == a3) {
                        return 232LL;
                      }
                      a4 = *a2;
                      if (a4 != 84)
                      {
                        if (a4 != 69) {
                          goto LABEL_207;
                        }
                        ++a2;
LABEL_46:
                        if (a2 == a3) {
                          return 229LL;
                        }
                        v21 = *(_DWORD *)a1;
                        while (1)
                        {
                          v22 = *a2;
                          v23 = llparse_blob59[v21];
                          if (v21 == 1)
                          {
                            a4 = 0;
                            v24 = 5;
                          }

                          else
                          {
                            v24 = 0;
                          }

                          if (v22 != v23)
                          {
                            a4 = 2;
                            v24 = 5;
                          }

                          if (v24) {
                            break;
                          }
                          if (v22 == v23) {
                            ++v21;
                          }
                          if (++a2 == a3)
                          {
                            a4 = 1;
                            a2 = a3;
                            goto LABEL_59;
                          }
                        }

                        v21 = 0;
LABEL_59:
                        *(_DWORD *)a1 = v21;
                        if (!a4)
                        {
                          ++a2;
                          *(_WORD *)(a1 + 72) = 513;
                          v25 = *(void *)(a1 + 8);
                          *(void *)(a1 + 8) = 0LL;
                          v26 = *(void *)(a1 + 88);
                          if (v26)
                          {
                            v27 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v26 + 24);
                            if (v27)
                            {
                              v28 = v27(a1, v25, &a2[-v25]);
                              if (v28)
                              {
                                v29 = v28;
                                if (v28 == -1)
                                {
                                  *(void *)(a1 + 32) = "Span callback error in on_method";
                                  v29 = 24;
                                }

                                result = 0LL;
                                *(_DWORD *)(a1 + 24) = v29;
                                *(void *)(a1 + 40) = a2;
                                *(void *)(a1 + 56) = 228LL;
                                return result;
                              }
                            }
                          }

                          goto LABEL_1029;
                        }

                        if (a4 == 1) {
                          return 229LL;
                        }
LABEL_206:
                        if (a4 == 2)
                        {
LABEL_207:
                          result = 0LL;
                          *(_DWORD *)(a1 + 24) = 8;
                          v8 = "Invalid word encountered";
                          goto LABEL_2272;
                        }

    goto LABEL_38;
  }

  if (v7)
  {
    v9 = objc_alloc_init(&OBJC_CLASS___NWPBSendData);
    [v8 clientID];
    messageData = (void *)objc_claimAutoreleasedReturnValue();
    [messageData UUIDString];
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v9)
    {
      objc_storeStrong((id *)&v9->_clientUUID, v11);

      v13 = (NSData *)v6;
      messageData = v9->_messageData;
      v9->_messageData = v13;
    }

    else
    {
    }

    v14 = objc_alloc_init(&OBJC_CLASS___NWPBCommandMessage);
    p_isa = (id *)&v14->super.super.isa;
    if (v14)
    {
      *(_BYTE *)&v14->_has |= 1u;
      v14->_command = 4;
      v16 = -[PBCodable data](v9, "data");
      objc_storeStrong(p_isa + 2, v16);
    }

    else
    {
      v16 = -[PBCodable data](v9, "data");
    }
    v17 = -[NWRemoteConnectionActor delegate](self, "delegate");
    [p_isa data];
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v18;
    [MEMORY[0x189603F18] arrayWithObjects:&v32 count:1];
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    [v17 sendRemoteReplies:v19];

    goto LABEL_8;
  }

  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "-[NWRemoteConnectionActor sendData:forConnection:]";
  v21 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v22, type))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "-[NWRemoteConnectionActor sendData:forConnection:]";
      v24 = "%{public}s called with null wrapper";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if (!v30)
  {
    __nwlog_obj();
    v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v22, type))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "-[NWRemoteConnectionActor sendData:forConnection:]";
      v24 = "%{public}s called with null wrapper, backtrace limit exceeded";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  v28 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v23 = type;
  v29 = os_log_type_enabled(v22, type);
  if (!v28)
  {
    if (v29)
    {
      *(_DWORD *)buf = 136446210;
      v34 = "-[NWRemoteConnectionActor sendData:forConnection:]";
      v24 = "%{public}s called with null wrapper, no backtrace";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    v34 = "-[NWRemoteConnectionActor sendData:forConnection:]";
    v35 = 2082;
    v36 = v28;
    _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null wrapper, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v28);
  if (v21) {
    goto LABEL_39;
  }
LABEL_8:
}

      free(v17);
      if (!v11) {
        return 0LL;
      }
      goto LABEL_53;
    }

    v12 = (os_log_s *)__nwlog_obj();
    v13 = v28;
    if (!os_log_type_enabled(v12, v28)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http_capsule_framer_finalize_output_frames";
    v14 = "%{public}s called with null protocol";
LABEL_51:
    _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
    goto LABEL_52;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http_capsule_framer_finalize_output_frames";
    v11 = (char *)_os_log_send_and_compose_impl();
    v28 = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (v28 == OS_LOG_TYPE_FAULT)
    {
      v12 = (os_log_s *)__nwlog_obj();
      v13 = v28;
      if (!os_log_type_enabled(v12, v28)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v14 = "%{public}s called with null frames";
      goto LABEL_51;
    }

    if (!v27)
    {
      v12 = (os_log_s *)__nwlog_obj();
      v13 = v28;
      if (!os_log_type_enabled(v12, v28)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v14 = "%{public}s called with null frames, backtrace limit exceeded";
      goto LABEL_51;
    }

    v17 = (char *)__nw_create_backtrace_string();
    v12 = (os_log_s *)__nwlog_obj();
    v13 = v28;
    v20 = os_log_type_enabled(v12, v28);
    if (!v17)
    {
      if (!v20) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v14 = "%{public}s called with null frames, no backtrace";
      goto LABEL_51;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v31 = 2082;
      v32 = v17;
      v19 = "%{public}s called with null frames, dumping backtrace:%{public}s";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  v5 = *(void *)(a2 + 32);
  if (!v5) {
    return 0LL;
  }
  v6 = *(void *)(v5 + 24);
  if (!v6 || !*(void *)(v6 + 96)) {
    return 0LL;
  }
  v21[0] = MEMORY[0x1895F87A8];
  v21[1] = 0x40000000LL;
  v22 = __nw_http_capsule_framer_finalize_output_frames_block_invoke;
  v23 = &__block_descriptor_tmp_8_48726;
  v24 = a3;
  v25 = a1;
  v26 = a2;
  v7 = *a4;
  do
  {
    if (!v7) {
      break;
    }
    v8 = *(void *)(v7 + 32);
    v9 = ((uint64_t (*)(void *))v22)(v21);
    v7 = v8;
  }

  while ((v9 & 1) != 0);
  return nw_protocol_finalize_output_frames(v5, (uint64_t)a4);
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (dispatch_queue_s *)v3[4];
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nw_service_connector_set_service_available_block_block_invoke;
    block[3] = &unk_189BC91E8;
    v22 = v3;
    v23 = v5;
    dispatch_async(v6, block);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_service_connector_set_service_available_block";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_service_connector_set_service_available_block";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null serviceAvailableBlock", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_service_connector_set_service_available_block";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null serviceAvailableBlock, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_service_connector_set_service_available_block";
      _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null serviceAvailableBlock, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_service_connector_set_service_available_block";
    v28 = 2082;
    v29 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null serviceAvailableBlock, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  v6 = v3[12];
  if (v6)
  {
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = ___ZL47nwsc_restart_outgoing_requests_waiting_for_pathP31NWConcrete_nw_service_connectorPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
    v21[3] = &unk_189BC1300;
    v22 = v4;
    v23 = v3;
    nw_dictionary_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
      _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null serviceConnector->activeOutgoingRequests",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
      _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
    v28 = 2082;
    v29 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    free(v18);
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }

  incomingReqBytesToVerify = v4->incomingReqBytesToVerify;
  if (incomingReqBytesToVerify)
  {
    free(incomingReqBytesToVerify);
    *(void *)(v5 + 560) = 0LL;
  }

  *(_DWORD *)(v5 + 568) = 0;
  nw_array_remove_object((uint64_t)v3->pendingUnverifiedIncomingRequests, v5);
LABEL_7:
}

    goto LABEL_38;
  }

  if (subprotocol)
  {
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 3221225472LL;
    v18[2] = __nw_ws_options_add_subprotocol_block_invoke;
    v18[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v18[4] = subprotocol;
    nw_protocol_options_access_handle(v3, v18);
    goto LABEL_4;
  }

  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_ws_options_add_subprotocol";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v9 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_ws_options_add_subprotocol";
      _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null subprotocol", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_ws_options_add_subprotocol";
      _os_log_impl( &dword_181A5C000,  v6,  v17,  "%{public}s called with null subprotocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v13 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v14 = type;
  v15 = os_log_type_enabled(v6, type);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_ws_options_add_subprotocol";
      _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null subprotocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_ws_options_add_subprotocol";
    v23 = 2082;
    v24 = v13;
    _os_log_impl( &dword_181A5C000,  v6,  v14,  "%{public}s called with null subprotocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v5) {
    goto LABEL_39;
  }
LABEL_4:
}

      v32 = v9->u32[0];
      v33 = v9->u32[1];
      ++v9;
      v8 += v32 + v33;
      if ((v6 & 4) == 0)
      {
LABEL_15:
        if ((v6 & 2) == 0) {
          goto LABEL_16;
        }
        goto LABEL_39;
      }

  if (v10) {
    free(v10);
  }
  v7 = 0LL;
LABEL_4:

  return v7;
}

    free(v24);
    if (!v14) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }

  v9 = MEMORY[0x1895F87A8];
  v34[0] = MEMORY[0x1895F87A8];
  v34[1] = 3221225472LL;
  v34[2] = __nw_resolver_config_watch_updates_block_invoke;
  v34[3] = &unk_189BC50A8;
  v10 = (NWConcrete_nw_resolver_config *)v5;
  v34[4] = v10;
  v11 = (dispatch_queue_s *)v6;
  v34[5] = v11;
  v12 = v8;
  v34[6] = v12;
  os_unfair_lock_lock(&v10->lock.m_mutex);
  __nw_resolver_config_watch_updates_block_invoke(v34);
  os_unfair_lock_unlock(&v10->lock.m_mutex);
  if (!nw_resolver_config_update_from_path(v10))
  {
    block[0] = v9;
    block[1] = 3221225472LL;
    block[2] = __nw_resolver_config_watch_updates_block_invoke_2;
    block[3] = &unk_189BC8740;
    v33 = v12;
    dispatch_async(v11, block);
  }

LABEL_7:
}

    free(v23);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  v39 = 0;
  v31[0] = MEMORY[0x1895F87A8];
  v31[1] = 3221225472LL;
  v31[2] = __nw_resolver_config_cancel_updates_block_invoke;
  v31[3] = &unk_189BC0C90;
  v32 = (os_unfair_lock_s *)v5;
  v9 = (dispatch_queue_s *)v6;
  v33 = v9;
  v10 = v8;
  v34 = v10;
  v35 = buf;
  v11 = v32 + 22;
  os_unfair_lock_lock(v32 + 22);
  __nw_resolver_config_cancel_updates_block_invoke((uint64_t)v31);
  os_unfair_lock_unlock(v11);
  if (!*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
    dispatch_async(v9, v10);
  }

  _Block_object_dispose(buf, 8);
LABEL_7:
}
  }

  if (v11) {
LABEL_38:
  }
    free(v11);
  return 0LL;
}
  }

    goto LABEL_38;
  }

  if (nw_protocol_metadata_is_quic_connection(v4))
  {
    v19[0] = MEMORY[0x1895F87A8];
    v19[1] = 3221225472LL;
    v19[2] = __nw_quic_metadata_set_original_block_invoke;
    v19[3] = &unk_189BC6260;
    v20 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v19);

    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_quic_metadata_set_original";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_quic_metadata_set_original";
      _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata)",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (!v21)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_quic_metadata_set_original";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_quic_metadata_set_original";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_quic_metadata_set_original";
    v25 = 2082;
    v26 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v10) {
    free(v10);
  }
  v7 = 0LL;
LABEL_4:

  return v7;
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return v6;
}

    goto LABEL_38;
  }

  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    objc_storeStrong((id *)v3 + 2, queue);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_browser_set_queue";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_browser_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null queue", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_browser_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v19, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_browser_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_browser_set_queue";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return v6;
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return v6;
}

  if (v9) {
    free(v9);
  }
  v6 = 0;
LABEL_4:

  return v6;
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

    goto LABEL_38;
  }

  if ((v3[140] & 4) != 0)
  {
    *a2 = *(_OWORD *)(v3 + 8);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446466;
  v22 = "nw_activity_get_token";
  v23 = 2082;
  v24 = "Cannot get token before activation";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_activity_get_token";
      v23 = 2082;
      v24 = "Cannot get token before activation";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_activity_get_token";
      v23 = 2082;
      v24 = "Cannot get token before activation";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_activity_get_token";
      v23 = 2082;
      v24 = "Cannot get token before activation";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446722;
    v22 = "nw_activity_get_token";
    v23 = 2082;
    v24 = "Cannot get token before activation";
    v25 = 2082;
    v26 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

    goto LABEL_38;
  }

  if (a3)
  {
    nw_activity_complete_with_reason_and_underlying_error_string_internal(v7, a2, a3, 0, a4);
    goto LABEL_4;
  }

  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446466;
  v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
  v27 = 2082;
  v28 = "underlying_error_domain_string must not be null";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
      v27 = 2082;
      v28 = "underlying_error_domain_string must not be null";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
      v27 = 2082;
      v28 = "underlying_error_domain_string must not be null";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
    }

    goto LABEL_37;
  }

  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
      v27 = 2082;
      v28 = "underlying_error_domain_string must not be null";
      _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
    }

    goto LABEL_37;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446722;
    v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
    v27 = 2082;
    v28 = "underlying_error_domain_string must not be null";
    v29 = 2082;
    v30 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
  }

  free(v18);
  if (v10) {
    goto LABEL_39;
  }
LABEL_4:
}

          free(v26);
          goto LABEL_38;
        }

        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWInterface initWithCoder:]";
          v29 = "%{public}s nw_interface_create_from_dictionary failed";
          goto LABEL_56;
        }

        if (!v51)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWInterface initWithCoder:]";
          v29 = "%{public}s nw_interface_create_from_dictionary failed, backtrace limit exceeded";
          goto LABEL_56;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (os_log_s *)(id)gLogObj;
        v35 = type;
        v38 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "-[NWInterface initWithCoder:]";
            v56 = 2082;
            v57 = backtrace_string;
            v37 = "%{public}s nw_interface_create_from_dictionary failed, dumping backtrace:%{public}s";
            goto LABEL_34;
          }

          goto LABEL_35;
        }

        if (!v38)
        {
LABEL_58:

          if (!v26) {
            goto LABEL_38;
          }
          goto LABEL_37;
        }

        *(_DWORD *)buf = 136446210;
        v55 = "-[NWInterface initWithCoder:]";
        v29 = "%{public}s nw_interface_create_from_dictionary failed, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v55 = "-[NWInterface initWithCoder:]";
        v26 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWInterface initWithCoder:]";
          v29 = "%{public}s NWUtilsCreateXPCDictionaryFromNSDictionary failed";
LABEL_56:
          v42 = v27;
          v43 = v28;
LABEL_57:
          _os_log_impl(&dword_181A5C000, v42, v43, v29, buf, 0xCu);
          goto LABEL_58;
        }

        if (!v51)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446210;
          v55 = "-[NWInterface initWithCoder:]";
          v29 = "%{public}s NWUtilsCreateXPCDictionaryFromNSDictionary failed, backtrace limit exceeded";
          goto LABEL_56;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (os_log_s *)(id)gLogObj;
        v35 = type;
        v36 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "-[NWInterface initWithCoder:]";
            v56 = 2082;
            v57 = backtrace_string;
            v37 = "%{public}s NWUtilsCreateXPCDictionaryFromNSDictionary failed, dumping backtrace:%{public}s";
LABEL_34:
            _os_log_impl(&dword_181A5C000, v27, v35, v37, buf, 0x16u);
          }

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

    goto LABEL_38;
  }

  if (nw_protocol_options_is_webtransport(v3))
  {
    v19[0] = MEMORY[0x1895F87A8];
    v19[1] = 3221225472LL;
    v19[2] = __nw_webtransport_options_set_is_unidirectional_block_invoke;
    v19[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v20 = a2;
    nw_protocol_options_access_handle(v4, v19);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_webtransport_options_set_is_unidirectional";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_webtransport_options_set_is_unidirectional";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s protocol options are not webtransport", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v21)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_webtransport_options_set_is_unidirectional";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s protocol options are not webtransport, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_webtransport_options_set_is_unidirectional";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s protocol options are not webtransport, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_webtransport_options_set_is_unidirectional";
    v25 = 2082;
    v26 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s protocol options are not webtransport, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v6) {
    free(v6);
  }
  v3 = 0LL;
LABEL_4:

  return v3;
}

    goto LABEL_38;
  }

  if (nw_protocol_options_is_webtransport(v3))
  {
    v19[0] = MEMORY[0x1895F87A8];
    v19[1] = 3221225472LL;
    v19[2] = __nw_webtransport_options_set_is_datagram_block_invoke;
    v19[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v20 = a2;
    nw_protocol_options_access_handle(v4, v19);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_webtransport_options_set_is_datagram";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_webtransport_options_set_is_datagram";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s protocol options are not webtransport", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v21)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_webtransport_options_set_is_datagram";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s protocol options are not webtransport, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_webtransport_options_set_is_datagram";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s protocol options are not webtransport, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_webtransport_options_set_is_datagram";
    v25 = 2082;
    v26 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s protocol options are not webtransport, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

      free(v11);
      if (!v3) {
        return;
      }
LABEL_53:
      free(v3);
      return;
    }

    v4 = (os_log_s *)__nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http3_input_finished";
    v6 = "%{public}s called with null http3";
LABEL_51:
    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_52;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http3_input_finished";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = (os_log_s *)__nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http3_input_finished";
      v6 = "%{public}s called with null other_protocol";
      goto LABEL_51;
    }

    if (!v15)
    {
      v4 = (os_log_s *)__nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http3_input_finished";
      v6 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_51;
    }

    v11 = (char *)__nw_create_backtrace_string();
    v4 = (os_log_s *)__nwlog_obj();
    v5 = type;
    v14 = os_log_type_enabled(v4, type);
    if (!v11)
    {
      if (!v14) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http3_input_finished";
      v6 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_51;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_http3_input_finished";
      v19 = 2082;
      v20 = v11;
      v13 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      v7 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136446978;
        v18 = "nw_protocol_http3_input_finished";
        v19 = 2082;
        v20 = handle + 1289;
        v21 = 2080;
        v22 = " ";
        v23 = 1024;
        v24 = v8;
        _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
  }

  if ((*(_WORD *)(handle + 1373) & 8) == 0) {
    nw_http3_fail_all_streams((uint64_t)handle, 260LL);
  }
}

  if (v4) {
    free(v4);
  }
  return 0LL;
}

  v26 = *((void *)handle + 42);
  if (v26)
  {
    if (((*(unsigned __int16 *)(v26 + 1373) | (*(unsigned __int8 *)(v26 + 1375) << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v80 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
        {
          v81 = *(_DWORD *)(v26 + 1280);
          *(_DWORD *)buf = 136446978;
          *(void *)&buf[4] = "nw_http3_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v26 + 1289;
          *(_WORD *)&buf[22] = 2080;
          v151 = (uint64_t)" ";
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v81;
          _os_log_impl(&dword_181A5C000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }

    if (!*((_DWORD *)handle + 93))
    {
      v29 = *((void *)handle + 29);
      if (v29)
      {
        v30 = mach_continuous_approximate_time();
        v31 = v30 <= 1 ? 1LL : v30;
        v32 = nw_delta_nanos(v29, v31);
        if (v32 > 1000000000
                 * networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_setup_threshold_seconds, 5LL))
        {
          v33 = (unsigned __int16)(*(_WORD *)(v26 + 1284))++ + 1;
          if ((v33 & 0x10000) != 0)
          {
            if (gLogDatapath)
            {
              v137 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
              {
                v138 = *(unsigned __int16 *)(v26 + 1284);
                *(_DWORD *)buf = 136446978;
                *(void *)&buf[4] = "nw_http3_remove_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http3->stream_stall_count";
                *(_WORD *)&buf[22] = 2048;
                v151 = 1LL;
                LOWORD(v152) = 2048;
                *(void *)((char *)&v152 + 2) = v138;
                _os_log_impl( &dword_181A5C000,  v137,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
              }
            }

            *(_WORD *)(v26 + 1284) = -1;
          }

          if (((*(unsigned __int16 *)(v26 + 1373) | (*(unsigned __int8 *)(v26 + 1375) << 16)) & 0x400000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v34 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              v35 = *(_DWORD *)(v26 + 1280);
              v36 = *(unsigned __int16 *)(v26 + 1284);
              *(_DWORD *)buf = 136447234;
              *(void *)&buf[4] = "nw_http3_remove_stream";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v26 + 1289;
              *(_WORD *)&buf[22] = 2080;
              v151 = (uint64_t)" ";
              LOWORD(v152) = 1024;
              *(_DWORD *)((char *)&v152 + 2) = v35;
              WORD3(v152) = 1024;
              DWORD2(v152) = v36;
              _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> stream setup stalls incremented to %u",  buf,  0x2Cu);
            }
          }
        }
      }
    }

    v27 = *((void *)handle + 68);
    v28 = (void *)*((void *)handle + 69);
    if (v27)
    {
      *(void *)(v27 + 552) = v28;
      v28 = (void *)*((void *)handle + 69);
    }

    else
    {
      *(void *)(v26 + 888) = v28;
    }

    *v28 = v27;
    *((void *)handle + 68) = 0LL;
    *((void *)handle + 69) = 0LL;
    nw_protocol_http3_remove_input_handler((nw_protocol *)v26, *((nw_protocol **)handle + 6));
    goto LABEL_56;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http3_remove_stream";
  v76 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v148 = 0;
  if (__nwlog_fault(v76, &type, &v148))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v77 = (os_log_s *)__nwlog_obj();
      v78 = type;
      if (!os_log_type_enabled(v77, type)) {
        goto LABEL_238;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http3_remove_stream";
      v79 = "%{public}s called with null http3";
LABEL_236:
      v136 = v77;
LABEL_237:
      _os_log_impl(&dword_181A5C000, v136, v78, v79, buf, 0xCu);
      goto LABEL_238;
    }

    if (!v148)
    {
      v77 = (os_log_s *)__nwlog_obj();
      v78 = type;
      if (!os_log_type_enabled(v77, type)) {
        goto LABEL_238;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http3_remove_stream";
      v79 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_236;
    }

    v107 = (char *)__nw_create_backtrace_string();
    v108 = (os_log_s *)__nwlog_obj();
    v78 = type;
    v144 = v108;
    v109 = os_log_type_enabled(v108, type);
    if (v107)
    {
      if (v109)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_http3_remove_stream";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v107;
        _os_log_impl( &dword_181A5C000,  v144,  v78,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v107);
      goto LABEL_238;
    }

    if (v109)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http3_remove_stream";
      v79 = "%{public}s called with null http3, no backtrace";
      v136 = v144;
      goto LABEL_237;
    }
  }

  if (v8) {
    free(v8);
  }
  return 0LL;
}

  if (v11) {
    free(v11);
  }
  return 0LL;
}

LABEL_38:
        if (!v5) {
          goto LABEL_40;
        }
LABEL_39:
        free(v5);
        goto LABEL_40;
      }

      if (!v34)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (os_log_s *)(id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v6, type))
        {
          v23 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 1024;
          *(_DWORD *)v39 = v23;
          _os_log_impl( &dword_181A5C000,  v6,  v22,  "%{public}s attempt to relinquish guarded fd %d, backtrace limit exceeded",  buf,  0x12u);
        }

        goto LABEL_37;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (os_log_s *)(id)gLogObj;
      v17 = type;
      v18 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          v25 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 1024;
          *(_DWORD *)v39 = v25;
          _os_log_impl( &dword_181A5C000,  v6,  v17,  "%{public}s attempt to relinquish guarded fd %d, no backtrace",  buf,  0x12u);
        }

        goto LABEL_37;
      }

      if (v18)
      {
        v19 = v2[2]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        v37 = "nw_fd_wrapper_relinquish_fd";
        v38 = 1024;
        *(_DWORD *)v39 = v19;
        v39[2] = 2082;
        *(void *)&v39[3] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v6,  v17,  "%{public}s attempt to relinquish guarded fd %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }
    }

    free(backtrace_string);
    if (!v5) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }

  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v37 = "nw_fd_wrapper_relinquish_fd";
  v27 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (__nwlog_fault(v27, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_fd_wrapper_relinquish_fd";
        _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null wrapper", buf, 0xCu);
      }
    }

    else if (v34)
    {
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v28, type);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 2082;
          *(void *)v39 = v30;
          _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null wrapper, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v30);
        goto LABEL_58;
      }

      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_fd_wrapper_relinquish_fd";
        _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null wrapper, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_fd_wrapper_relinquish_fd";
        _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null wrapper, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    goto LABEL_38;
  }

  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    objc_storeStrong((id *)v3 + 9, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_interpose_set_queue";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_interpose_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null queue", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_interpose_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v19, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_interpose_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_interpose_set_queue";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    os_unfair_lock_lock(v3 + 2);
    v6 = v3;
    v7 = _Block_copy(v5);
    v8 = *(void **)&v6[14]._os_unfair_lock_opaque;
    *(void *)&v6[14]._os_unfair_lock_opaque = v7;

    os_unfair_lock_unlock(v3 + 2);
    goto LABEL_4;
  }

  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_interpose_set_flow_event_handler";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_interpose_set_flow_event_handler";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_interpose_set_flow_event_handler";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_interpose_set_flow_event_handler";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_interpose_set_flow_event_handler";
    v27 = 2082;
    v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v9) {
    free(v9);
  }
LABEL_7:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = v4;
    v7 = v3;
    os_unfair_lock_lock(v3 + 24);
    v8 = _Block_copy(v6);

    v9 = *(void **)&v7[18]._os_unfair_lock_opaque;
    *(void *)&v7[18]._os_unfair_lock_opaque = v8;

    os_unfair_lock_unlock(v3 + 24);
    goto LABEL_4;
  }

  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_path_monitor_set_cancel_handler";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_path_monitor_set_cancel_handler";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null cancel_handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_path_monitor_set_cancel_handler";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null cancel_handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_path_monitor_set_cancel_handler";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null cancel_handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_path_monitor_set_cancel_handler";
    v28 = 2082;
    v29 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null cancel_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = v3;
    v7 = v5;
    os_unfair_lock_lock(v6 + 24);
    v8 = _Block_copy(v7);
    v9 = *(void **)&v6[16]._os_unfair_lock_opaque;
    *(void *)&v6[16]._os_unfair_lock_opaque = v8;

    os_unfair_lock_unlock(v6 + 24);
    goto LABEL_4;
  }

  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_path_monitor_set_update_handler";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_path_monitor_set_update_handler";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null update_handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_path_monitor_set_update_handler";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null update_handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_path_monitor_set_update_handler";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null update_handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_path_monitor_set_update_handler";
    v28 = 2082;
    v29 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null update_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    nw_path_evaluator_set_queue(v3, v4);
    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_path_monitor_set_queue";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_path_monitor_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null queue", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_path_monitor_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v19, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_path_monitor_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_path_monitor_set_queue";
    v24 = 2082;
    v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_finalize_output_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = (os_log_s *)__nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      v18 = "nw_socket_finalize_output_frames";
      v10 = "%{public}s called with null socket_handler";
      goto LABEL_37;
    }

    if (!v15)
    {
      v8 = (os_log_s *)__nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      v18 = "nw_socket_finalize_output_frames";
      v10 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_37;
    }

    v13 = (char *)__nw_create_backtrace_string();
    v8 = (os_log_s *)__nwlog_obj();
    v9 = type;
    v14 = os_log_type_enabled(v8, type);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      v18 = "nw_socket_finalize_output_frames";
      v10 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_37;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_socket_finalize_output_frames";
      v19 = 2082;
      v20 = v13;
      _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v13);
LABEL_38:
    if (!v7) {
      return 0LL;
    }
LABEL_39:
    free(v7);
    return 0LL;
  }

  while (1)
  {
    tqh_first = a2->tqh_first;
    if (!a2->tqh_first) {
      break;
    }
    v4 = *((void *)tqh_first + 4);
    v5 = (nw_frame **)*((void *)tqh_first + 5);
    if (v4)
    {
      *(void *)(v4 + 40) = v5;
      v5 = (nw_frame **)*((void *)tqh_first + 5);
    }

    else
    {
      a2->tqh_last = v5;
    }

    *v5 = (nw_frame *)v4;
    *((void *)tqh_first + 4) = 0LL;
    *((void *)tqh_first + 5) = 0LL;
    nw_frame_finalize((uint64_t)tqh_first);
  }

  return 1LL;
}

  _Block_object_dispose(buf, 8);
  if ((object[8] & 1) != 0 && *(void *)object) {
    os_release(*(void **)object);
  }
  _Block_object_dispose(&v165, 8);
  if (!v23) {
    return 0LL;
  }
  v26 = a1[3].callbacks;
  if (v26)
  {
    if ((*(_WORD *)v5 & 0x80) != 0) {
      return 0LL;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v7 = (os_log_s *)gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = "nw_socket_setup_output_events";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)a1 + 404;
    v8 = "%{public}s %{public}s Already set up output event notification";
LABEL_11:
    _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_ERROR, v8, buf, 0x16u);
    return 0LL;
  }

  v165 = 0LL;
  v166 = &v165;
  v167 = 0x2000000000LL;
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    v32 = a1[1].callbacks;
    v26 = (nw_protocol_callbacks *)a1;
    if (v32)
    {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v32->add_input_handler + 1);
      v26 = (nw_protocol_callbacks *)a1;
    }
  }

  v168 = v26;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000LL;
  *(void *)&v170 = __Block_byref_object_copy__64064;
  *((void *)&v170 + 1) = __Block_byref_object_dispose__64065;
  v33 = a1[2].output_handler;
  if (v33) {
    v33 = os_retain(v33);
  }
  *(void *)object = v33;
  object[8] |= 1u;
  v34 = a1[3].output_handler;
  v35 = *(_DWORD *)&a1[4].flow_id[12];
  v161 = 0x40000000LL;
  v162 = ___ZL29nw_socket_setup_output_eventsP9nw_socket_block_invoke;
  v163 = &__block_descriptor_tmp_36_64961;
  v164 = p_output_handler;
  *(void *)&type.sae_srcif = v21;
  type.sae_srcaddr = (const sockaddr *)0x40000000;
  *(void *)&type.sae_srcaddrlen = ___ZL29nw_socket_setup_output_eventsP9nw_socket_block_invoke_2;
  type.sae_dstaddr = (const sockaddr *)&unk_189BC4EC8;
  *(void *)&type.sae_dstaddrlen = buf;
  v159 = &v165;
  v160 = v21;
  v36 = nw_queue_context_create_source(v34, v35, 2, 0, &v160, &type);
  a1[3].callbacks = (nw_protocol_callbacks *)v36;
  if (!v36)
  {
    v154 = p_output_handler;
    __nwlog_obj();
    *(_DWORD *)v179 = 136446210;
    v180 = "nw_socket_setup_output_events";
    v62 = (char *)_os_log_send_and_compose_impl();
    v157 = OS_LOG_TYPE_ERROR;
    v156 = 0;
    if (__nwlog_fault(v62, &v157, &v156))
    {
      if (v157 == OS_LOG_TYPE_FAULT)
      {
        v64 = (os_log_s *)__nwlog_obj();
        v65 = v157;
        if (os_log_type_enabled(v64, v157))
        {
          *(_DWORD *)v179 = 136446210;
          v180 = "nw_socket_setup_output_events";
          v66 = "%{public}s nw_queue_context_create_source output_source failed";
LABEL_276:
          _os_log_impl(&dword_181A5C000, v64, v65, v66, v179, 0xCu);
        }
      }

      else if (v156)
      {
        v76 = (char *)__nw_create_backtrace_string();
        v64 = (os_log_s *)__nwlog_obj();
        v65 = v157;
        v77 = os_log_type_enabled(v64, v157);
        if (v76)
        {
          if (v77)
          {
            *(_DWORD *)v179 = 136446466;
            v180 = "nw_socket_setup_output_events";
            v181 = 2082;
            v182 = v76;
            _os_log_impl( &dword_181A5C000,  v64,  v65,  "%{public}s nw_queue_context_create_source output_source failed, dumping backtrace:%{public}s",  v179,  0x16u);
          }

          free(v76);
          goto LABEL_277;
        }

        if (v77)
        {
          *(_DWORD *)v179 = 136446210;
          v180 = "nw_socket_setup_output_events";
          v66 = "%{public}s nw_queue_context_create_source output_source failed, no backtrace";
          goto LABEL_276;
        }
      }

      else
      {
        v64 = (os_log_s *)__nwlog_obj();
        v65 = v157;
        if (os_log_type_enabled(v64, v157))
        {
          *(_DWORD *)v179 = 136446210;
          v180 = "nw_socket_setup_output_events";
          v66 = "%{public}s nw_queue_context_create_source output_source failed, backtrace limit exceeded";
          goto LABEL_276;
        }
      }
    }

    goto LABEL_38;
  }

  if (nw_protocol_options_is_masque(v3[5]))
  {
    nw_masque_options_set_version(v4[5], a2);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_hop_set_masque_version";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_masque_version";
      _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_masque(hop->options)",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_masque_version";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_masque_version";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_hop_set_masque_version";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (nw_protocol_options_is_oblivious_http(v3[5]))
  {
    nw_oblivious_http_set_use_chunks(v4[5], a2);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
      _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options)",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (nw_protocol_options_is_oblivious_http(v3[5]))
  {
    nw_oblivious_http_set_context_id(v4[5], a2);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_hop_set_oblivious_http_context_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_oblivious_http_context_id";
      _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options)",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_oblivious_http_context_id";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_oblivious_http_context_id";
      _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_hop_set_oblivious_http_context_id";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

        goto LABEL_38;
      }

      if (!v33)
      {
        __nwlog_obj();
        v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl( &dword_181A5C000,  v11,  v32,  "%{public}s called with null browse_descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_37;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl( &dword_181A5C000,  v11,  v30,  "%{public}s called with null browse_descriptor, no backtrace",  buf,  0xCu);
        }

        goto LABEL_37;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_path_create_evaluator_for_browse";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v30,  "%{public}s called with null browse_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

  if (v10) {
    free(v10);
  }
  v7 = 0LL;
LABEL_4:

  return v7;
}

  if (v17) {
    free(v17);
  }
  v14 = 0LL;
LABEL_20:

  return v14;
}

        goto LABEL_38;
      }

      if (!v24)
      {
        __nwlog_obj();
        v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null proxy_config, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_37;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null proxy_config, no backtrace", buf, 0xCu);
        }

        goto LABEL_37;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_path_has_proxy_config";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null proxy_config, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_25;
    }
  }

  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_path_has_proxy_config";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }

        goto LABEL_37;
      }

      if (!v24)
      {
        __nwlog_obj();
        v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_37;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }

        goto LABEL_37;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_path_has_proxy_config";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  v43 = *(void *)(a1 + 40);
  if (!v43)
  {
    v47 = 0LL;
    goto LABEL_47;
  }

  [*(id *)(v43 + 24) _storagePartitionIdentifier];
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = v44 == 0LL;

  if (v45) {
    goto LABEL_48;
  }
  v46 = *(void *)(a1 + 40);
  if (v46)
  {
    [*(id *)(v46 + 24) _storagePartitionIdentifier];
    v47 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    v47 = 0LL;
  }

  v48 = objc_msgSend(v47, "cStringUsingEncoding:", 4, v388, v389);
  v49 = v35;
  v50 = v49;
  if (!v49)
  {
    __nwlog_obj();
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_http_cookie_options_set_cookie_partition_identifier";
    LODWORD(v389) = 12;
    v388 = buf;
    v145 = (char *)_os_log_send_and_compose_impl();

    v427 = OS_LOG_TYPE_ERROR;
    v426 = 0;
    if (v427 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v146 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v147 = v427;
      if (os_log_type_enabled(v146, v427))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_cookie_options_set_cookie_partition_identifier";
        _os_log_impl(&dword_181A5C000, v146, v147, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v426)
    {
      v179 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v146 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v180 = v427;
      v181 = os_log_type_enabled(v146, v427);
      if (v179)
      {
        if (v181)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_http_cookie_options_set_cookie_partition_identifier";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v179;
          _os_log_impl( &dword_181A5C000,  v146,  v180,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v179);
LABEL_375:
        if (!v145) {
          goto LABEL_46;
        }
LABEL_376:
        free(v145);
        goto LABEL_46;
      }

      if (v181)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_cookie_options_set_cookie_partition_identifier";
        _os_log_impl(&dword_181A5C000, v146, v180, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v146 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v227 = v427;
      if (os_log_type_enabled(v146, v427))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_cookie_options_set_cookie_partition_identifier";
        _os_log_impl( &dword_181A5C000,  v146,  v227,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    v8 = 0;
  }

    free(v20);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }

  v28[0] = MEMORY[0x1895F87A8];
  v28[1] = 3221225472LL;
  v28[2] = __nw_http_authentication_options_set_credential_cache_block_invoke;
  v28[3] = &unk_189BC6260;
  v29 = v5;
  nw_protocol_options_access_handle(v6, v28);

LABEL_7:
}

    free(v20);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }

  v28[0] = MEMORY[0x1895F87A8];
  v28[1] = 3221225472LL;
  v28[2] = __nw_http_authentication_options_set_h1_fallback_cache_block_invoke;
  v28[3] = &unk_189BC6260;
  v29 = v5;
  nw_protocol_options_access_handle(v6, v28);

LABEL_7:
}
  }

    goto LABEL_38;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_messaging_options_create_transaction_in_parameters";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v11, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        v14 = "%{public}s called with null parameters";
LABEL_30:
        _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
      }
    }

    else
    {
      if (v24)
      {
        v20 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v13 = type;
        v21 = os_log_type_enabled(v12, type);
        if (v20)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_http_messaging_options_create_transaction_in_parameters";
            v28 = 2082;
            v29 = v20;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v20);
          goto LABEL_32;
        }

        if (!v21) {
          goto LABEL_31;
        }
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        v14 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_30;
      }

      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        v14 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_30;
      }
    }

  if (v8) {
    free(v8);
  }
  v5 = 0LL;
LABEL_4:

  return v5;
}

    goto LABEL_38;
  }

  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 88);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_application_id_get_persona";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_application_id_get_persona";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null persona_id", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_application_id_get_persona";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null persona_id, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_application_id_get_persona";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null persona_id, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_application_id_get_persona";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null persona_id, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    free(backtrace_string);
    goto LABEL_56;
  }

  if (a2 <= 0x23)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v13 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t)))",  buf,  0xCu);
      }

      goto LABEL_55;
    }

    if (!v26)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v24 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v10,  v24,  "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t))), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type[0];
    v20 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t))), no backtrace",  buf,  0xCu);
      }

      goto LABEL_55;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t))), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_37;
  }

  if (a2 < 0x45)
  {
    v3 = *a1;
    *(_OWORD *)type = a1[1];
    *(_OWORD *)buf = v3;
    v4 = nw_application_id_create_with_uuid(buf);
    v5 = v4;
    if (v4)
    {
      *(_OWORD *)(v4 + 88) = *(_OWORD *)type;
      v6 = *((unsigned int *)a1 + 8);
      *(_DWORD *)(v4 + 32) = v6;
    }

    return v5;
  }

  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
  v9 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v9, type, &v26))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v15 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32))",  buf,  0xCu);
      }

    if (!v14)
    {
LABEL_39:
      v11 = 1;
      goto LABEL_40;
    }

  if (v8) {
    free(v8);
  }
  v5 = 0LL;
LABEL_4:

  return v5;
}
  }

  if (v11) {
    free(v11);
  }
  v8 = 0LL;
LABEL_4:

  return v8;
}

    goto LABEL_38;
  }

  if (v4)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_agent_set_activate_handler_block_invoke;
    v22[3] = &unk_189BC91E8;
    v6 = (os_unfair_lock_s *)v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v6 + 2);
    __nw_agent_set_activate_handler_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v6 + 2);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_agent_set_activate_handler";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_activate_handler";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null activate_handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_activate_handler";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null activate_handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_activate_handler";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null activate_handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_agent_set_activate_handler";
    v27 = 2082;
    v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null activate_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_agent_set_error_handler_block_invoke;
    v22[3] = &unk_189BC91E8;
    v6 = (os_unfair_lock_s *)v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v6 + 2);
    __nw_agent_set_error_handler_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v6 + 2);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_agent_set_error_handler";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_error_handler";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null error_handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_error_handler";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null error_handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_error_handler";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null error_handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_agent_set_error_handler";
    v27 = 2082;
    v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null error_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v6)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_agent_set_token_low_water_mark_block_invoke;
    v24[3] = &unk_189BC9440;
    v8 = (os_unfair_lock_s *)v5;
    v24[4] = v8;
    v25 = a2;
    v9 = v7;
    v24[5] = v9;
    os_unfair_lock_lock(v8 + 2);
    __nw_agent_set_token_low_water_mark_block_invoke((uint64_t)v24);
    os_unfair_lock_unlock(v8 + 2);

    goto LABEL_4;
  }

  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_agent_set_token_low_water_mark";
  v11 = (char *)_os_log_send_and_compose_impl();

  v27 = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (v27 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v15 = v27;
    if (os_log_type_enabled(v12, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_agent_set_token_low_water_mark";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null tokens_needed_handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v26)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = v27;
    if (os_log_type_enabled(v12, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_agent_set_token_low_water_mark";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null tokens_needed_handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v20 = v27;
  v21 = os_log_type_enabled(v12, v27);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_agent_set_token_low_water_mark";
      _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null tokens_needed_handler, no backtrace",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_agent_set_token_low_water_mark";
    v30 = 2082;
    v31 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null tokens_needed_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (dispatch_queue_s *)v3[27];
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nw_agent_add_token_block_invoke;
    block[3] = &unk_189BC9238;
    v22 = v3;
    v23 = v5;
    dispatch_async(v6, block);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_agent_add_token";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_agent_add_token";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null token", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_agent_add_token";
      _os_log_impl(&dword_181A5C000, v9, v20, "%{public}s called with null token, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_agent_add_token";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null token, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_agent_add_token";
    v28 = 2082;
    v29 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null token, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return v6;
}

  if (v9) {
    free(v9);
  }
  v6 = 0LL;
LABEL_4:

  return v6;
}

    goto LABEL_38;
  }

  if (a2)
  {
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 3221225472LL;
    v20[2] = __nw_agent_add_flow_request_endpoint_type_block_invoke;
    v20[3] = &unk_189BC76E8;
    v5 = (os_unfair_lock_s *)v3;
    v20[4] = v5;
    v21 = a2;
    os_unfair_lock_lock(v5 + 2);
    __nw_agent_add_flow_request_endpoint_type_block_invoke((uint64_t)v20);
    os_unfair_lock_unlock(v5 + 2);

    goto LABEL_4;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_agent_add_flow_request_endpoint_type";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_agent_add_flow_request_endpoint_type";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null endpoint_type", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v22)
  {
    __nwlog_obj();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_agent_add_flow_request_endpoint_type";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null endpoint_type, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_agent_add_flow_request_endpoint_type";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null endpoint_type, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_agent_add_flow_request_endpoint_type";
    v26 = 2082;
    v27 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null endpoint_type, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_agent_set_flow_context_block_invoke;
    v22[3] = &unk_189BC9238;
    v6 = (os_unfair_lock_s *)v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v6 + 2);
    __nw_agent_set_flow_context_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v6 + 2);

    goto LABEL_4;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_agent_set_flow_context";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_flow_context";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null context", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_flow_context";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_flow_context";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null context, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_agent_set_flow_context";
    v27 = 2082;
    v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (os_log_s *)(id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      else {
        v21 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_metadata_changed_handler";
      v33 = 2082;
      v34 = (void *)v21;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (os_log_s *)(id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      else {
        v22 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_metadata_changed_handler";
      v33 = 2082;
      v34 = (void *)v22;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl( &dword_181A5C000,  v13,  v17,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    else {
      v19 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    v32 = "nw_endpoint_handler_set_metadata_changed_handler";
    v33 = 2082;
    v34 = (void *)v19;
    v35 = 2082;
    v36 = "flow";
    v37 = 2082;
    v38 = v16;
    _os_log_impl( &dword_181A5C000,  v13,  v17,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v16);
  if (v12) {
    goto LABEL_39;
  }
LABEL_40:
}

  buf[0] = v15;
  buf[1] = 0x40000000LL;
  buf[2] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_81998;
  v92 = (const char *)&__block_descriptor_tmp_30_81999;
  v93 = v90;
  LOBYTE(v94[0]) = 0;
  v27 = v90[0];
  do
  {
    if (!v27) {
      break;
    }
    v28 = *(void *)(v27 + 32);
    v29 = ((uint64_t (*)(void *))buf[2])(buf);
    v27 = v28;
  }

  while ((v29 & 1) != 0);
  v26 = *((unsigned int *)v86 + 6);
  _Block_object_dispose(&v81, 8);
  _Block_object_dispose(type, 8);
  return v26;
}

    if (v12) {
      free(v12);
    }
    goto LABEL_39;
  }

  if ((v2 & 0x8000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v39 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v40 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136446978;
      *(void *)&buf[4] = "nw_http2_session_send";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 390;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v40;
      v41 = "%{public}s %{public}s%s<i%u> in mem recv, skipping";
LABEL_94:
      _os_log_impl(&dword_181A5C000, v39, OS_LOG_TYPE_DEBUG, v41, buf, 0x26u);
    }
  }

      os_release(v7);
    }
  }

  if (v9) {
    free(v9);
  }
  return 0LL;
}

          free((void *)v5);
          goto LABEL_18;
        }

        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v38 = "%{public}s called with null other_protocol, no backtrace";
      }

      else
      {
        v36 = (os_log_s *)__nwlog_obj();
        v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_106;
        }
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v38 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v36, v37, v38, buf, 0xCu);
      goto LABEL_106;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "__nw_protocol_disconnected";
    v4 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v33 = (os_log_s *)__nwlog_obj();
        v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_101;
        }
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v35 = "%{public}s called with null protocol";
        goto LABEL_100;
      }

      if (!v48)
      {
        v33 = (os_log_s *)__nwlog_obj();
        v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_101;
        }
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v35 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_100;
      }

      v42 = (char *)__nw_create_backtrace_string();
      v33 = (os_log_s *)__nwlog_obj();
      v34 = type;
      v43 = os_log_type_enabled(v33, type);
      if (v42)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "__nw_protocol_disconnected";
          v52 = 2082;
          v53 = v42;
          _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v42);
        if (!v4) {
          goto LABEL_20;
        }
LABEL_29:
        free((void *)v4);
LABEL_20:
        result = 0LL;
        *(_BYTE *)(a1[4] + 117LL) |= 1u;
        return result;
      }

      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v35 = "%{public}s called with null protocol, no backtrace";
LABEL_100:
        _os_log_impl(&dword_181A5C000, v33, v34, v35, buf, 0xCu);
      }
    }

    goto LABEL_38;
  }

  if (v4)
  {
    v6 = (unsigned __int8 *)v3[13];
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_browse_descriptor_enumerate_device_filters_block_invoke;
    v21[3] = &unk_189BC8628;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_browse_descriptor_enumerate_device_filters";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_browse_descriptor_enumerate_device_filters";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v23)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_browse_descriptor_enumerate_device_filters";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_browse_descriptor_enumerate_device_filters";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_browse_descriptor_enumerate_device_filters";
    v27 = 2082;
    v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

      if (v18) {
        free(v18);
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v34 = "__nw_frame_get_dscp_value";
      v24 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v31 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v25 = (os_log_s *)__nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "__nw_frame_get_dscp_value";
          v27 = "%{public}s called with null frame";
LABEL_52:
          _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
        }
      }

      else if (v31)
      {
        v28 = (char *)__nw_create_backtrace_string();
        v25 = (os_log_s *)__nwlog_obj();
        v26 = type;
        v29 = os_log_type_enabled(v25, type);
        if (v28)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            v34 = "__nw_frame_get_dscp_value";
            v35 = 2082;
            v36 = v28;
            _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v28);
          goto LABEL_53;
        }

        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "__nw_frame_get_dscp_value";
          v27 = "%{public}s called with null frame, no backtrace";
          goto LABEL_52;
        }
      }

      else
      {
        v25 = (os_log_s *)__nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "__nw_frame_get_dscp_value";
          v27 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_52;
        }
      }

        _os_log_impl(&dword_181A5C000, v15, v16, v21, buf, 0x36u);
        goto LABEL_38;
      }

      v54 = *(void *)(a1 + 40);
      if (v54 && (*(_BYTE *)(v54 + 136) & 1) != 0) {
        return 0LL;
      }
      __nwlog_obj();
      v55 = *(void *)(a1 + 40);
      v56 = (const char *)(v55 + 137);
      if (!v55) {
        v56 = "";
      }
      *(_DWORD *)buf = 136447490;
      v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
      v121 = 2082;
      if (v55) {
        v57 = " ";
      }
      else {
        v57 = "";
      }
      v122 = v56;
      v123 = 2080;
      v124 = v57;
      v125 = 2048;
      v126 = v55;
      v127 = 1024;
      v128 = v118;
      v129 = 1024;
      *(_DWORD *)v130 = v4;
      v47 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v116 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v58 = (os_log_s *)__nwlog_obj();
        v59 = type;
        if (!os_log_type_enabled(v58, type)) {
          goto LABEL_143;
        }
        v60 = *(void *)(a1 + 40);
        v61 = (const char *)(v60 + 137);
        if (v60)
        {
          v62 = " ";
        }

        else
        {
          v61 = "";
          v62 = "";
        }

        *(_DWORD *)buf = 136447490;
        v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
        v121 = 2082;
        v122 = v61;
        v123 = 2080;
        v124 = v62;
        v125 = 2048;
        v126 = v60;
        v127 = 1024;
        v128 = v118;
        v129 = 1024;
        *(_DWORD *)v130 = v4;
        v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u < ip_length %u)";
        goto LABEL_141;
      }

      if (!v116)
      {
        v58 = (os_log_s *)__nwlog_obj();
        v59 = type;
        if (!os_log_type_enabled(v58, type)) {
          goto LABEL_143;
        }
        v94 = *(void *)(a1 + 40);
        v95 = (const char *)(v94 + 137);
        if (v94)
        {
          v96 = " ";
        }

        else
        {
          v95 = "";
          v96 = "";
        }

        *(_DWORD *)buf = 136447490;
        v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
        v121 = 2082;
        v122 = v95;
        v123 = 2080;
        v124 = v96;
        v125 = 2048;
        v126 = v94;
        v127 = 1024;
        v128 = v118;
        v129 = 1024;
        *(_DWORD *)v130 = v4;
        v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u < ip_length %u), backtrace limit exceeded";
        goto LABEL_141;
      }

      v79 = (char *)__nw_create_backtrace_string();
      v58 = (os_log_s *)__nwlog_obj();
      v59 = type;
      v80 = os_log_type_enabled(v58, type);
      if (v79)
      {
        if (v80)
        {
          v81 = *(void *)(a1 + 40);
          v82 = (const char *)(v81 + 137);
          if (v81)
          {
            v83 = " ";
          }

          else
          {
            v82 = "";
            v83 = "";
          }

          *(_DWORD *)buf = 136447746;
          v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          v121 = 2082;
          v122 = v82;
          v123 = 2080;
          v124 = v83;
          v125 = 2048;
          v126 = v81;
          v127 = 1024;
          v128 = v118;
          v129 = 1024;
          *(_DWORD *)v130 = v4;
          v130[2] = 2082;
          *(void *)&v130[3] = v79;
          _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u < ip_length %u), dumping backtrace:%{public}s",  buf,  0x40u);
        }

        free(v79);
        if (!v47) {
          return 0LL;
        }
LABEL_144:
        v37 = (char *)v47;
        goto LABEL_40;
      }

      if (v80)
      {
        v108 = *(void *)(a1 + 40);
        v109 = (const char *)(v108 + 137);
        if (v108)
        {
          v110 = " ";
        }

        else
        {
          v109 = "";
          v110 = "";
        }

        *(_DWORD *)buf = 136447490;
        v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
        v121 = 2082;
        v122 = v109;
        v123 = 2080;
        v124 = v110;
        v125 = 2048;
        v126 = v108;
        v127 = 1024;
        v128 = v118;
        v129 = 1024;
        *(_DWORD *)v130 = v4;
        v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u < ip_length %u), no backtrace";
LABEL_141:
        v105 = v58;
        v106 = v59;
        v107 = 54;
        goto LABEL_142;
      }
    }

    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_38;
  }

  if (a2)
  {
    v19 = 0uLL;
    v3 = a2;
    if (!uuid_is_null(v3 + 32)) {
      v19 = *((_OWORD *)v3 + 2);
    }

    node = nw_hash_table_get_node(*(void *)(a1 + 280), (uint64_t)&v19, 16LL);
    if (node)
    {
      *(_BYTE *)(node + 153) |= 0x10u;
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v16 = "nw_channel_set_keep_path_flow_registration_open";
        v17 = 1042;
        LODWORD(v18[0]) = 16;
        WORD2(v18[0]) = 2098;
        *(void *)((char *)v18 + 6) = &v19;
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s Node not found for flow id %{public,uuid_t}.16P",  buf,  0x1Cu);
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_channel_set_keep_path_flow_registration_open";
  v6 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v19) = 16;
  v14 = 0;
  if (v19 == 17)
  {
    v7 = (os_log_s *)__nwlog_obj();
    v8 = v19;
    if (!os_log_type_enabled(v7, (os_log_type_t)v19)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v16 = "nw_channel_set_keep_path_flow_registration_open";
    v9 = "%{public}s called with null flow_registration";
    goto LABEL_37;
  }

  if (!v14)
  {
    v7 = (os_log_s *)__nwlog_obj();
    v8 = v19;
    if (!os_log_type_enabled(v7, (os_log_type_t)v19)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v16 = "nw_channel_set_keep_path_flow_registration_open";
    v9 = "%{public}s called with null flow_registration, backtrace limit exceeded";
    goto LABEL_37;
  }

  v12 = (char *)__nw_create_backtrace_string();
  v7 = (os_log_s *)__nwlog_obj();
  v8 = v19;
  v13 = os_log_type_enabled(v7, (os_log_type_t)v19);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    v16 = "nw_channel_set_keep_path_flow_registration_open";
    v9 = "%{public}s called with null flow_registration, no backtrace";
    goto LABEL_37;
  }

  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    v16 = "nw_channel_set_keep_path_flow_registration_open";
    v17 = 2082;
    v18[0] = v12;
    _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v12);
  if (v6) {
    goto LABEL_39;
  }
}

    goto LABEL_38;
  }

  if (v4)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_masque_server_set_state_changed_handler_block_invoke;
    aBlock[3] = &unk_189BC91E8;
    v22 = v3;
    v23 = v5;
    v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v6[2](v6);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_masque_server_set_state_changed_handler";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_masque_server_set_state_changed_handler";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_masque_server_set_state_changed_handler";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_masque_server_set_state_changed_handler";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_masque_server_set_state_changed_handler";
    v28 = 2082;
    v29 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (v4)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_masque_server_set_error_handler_block_invoke;
    aBlock[3] = &unk_189BC91E8;
    v22 = v3;
    v23 = v5;
    v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v6[2](v6);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_4;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_masque_server_set_error_handler";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_masque_server_set_error_handler";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null handler", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v24)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_masque_server_set_error_handler";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_masque_server_set_error_handler";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_masque_server_set_error_handler";
    v28 = 2082;
    v29 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  v3 = (dispatch_queue_s *)v1[3];
  if (v3)
  {
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nw_masque_server_cancel_block_invoke;
    block[3] = &unk_189BC93A0;
    v19 = v1;
    dispatch_async(v3, block);

    goto LABEL_4;
  }

  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_masque_server_cancel";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v9 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_masque_server_cancel";
      _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null server->ms_queue", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v20)
  {
    __nwlog_obj();
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_masque_server_cancel";
      _os_log_impl( &dword_181A5C000,  v6,  v17,  "%{public}s called with null server->ms_queue, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v13 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v14 = type;
  v15 = os_log_type_enabled(v6, type);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_masque_server_cancel";
      _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null server->ms_queue, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_masque_server_cancel";
    v24 = 2082;
    v25 = v13;
    _os_log_impl( &dword_181A5C000,  v6,  v14,  "%{public}s called with null server->ms_queue, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v5) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    *a2 = *((_OWORD *)v3 + 2);
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_interface_option_details_get_nexus_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_interface_option_details_get_nexus_agent";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null out_nexus_agent", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_interface_option_details_get_nexus_agent";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null out_nexus_agent, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_interface_option_details_get_nexus_agent";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null out_nexus_agent, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_interface_option_details_get_nexus_agent";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null out_nexus_agent, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    goto LABEL_38;
  }

  if (a2)
  {
    *((_OWORD *)v3 + 2) = *a2;
    goto LABEL_4;
  }

  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_interface_option_details_set_nexus_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_interface_option_details_set_nexus_agent";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null nexus_agent", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (!v19)
  {
    __nwlog_obj();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_interface_option_details_set_nexus_agent";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null nexus_agent, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_interface_option_details_set_nexus_agent";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null nexus_agent, no backtrace", buf, 0xCu);
    }

    goto LABEL_37;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_interface_option_details_set_nexus_agent";
    v23 = 2082;
    v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null nexus_agent, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

    if (!v3) {
      goto LABEL_7;
    }
LABEL_38:
    free(v3);
    goto LABEL_7;
  }

void sub_181A6E9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_create_host_with_numeric_port(const char *a1, unsigned int a2)
{
  uint64_t v70 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    buf.ai_flags = 136446210;
    *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62.receiver) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        buf.ai_flags = 136446210;
        *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
        _os_log_impl(&dword_181A5C000, v8, v38, "%{public}s called with null hostname", (uint8_t *)&buf, 0xCu);
      }
    }

    else if (LOBYTE(v62.receiver))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = type[0];
      BOOL v41 = os_log_type_enabled(v8, type[0]);
      if (backtrace_string)
      {
        if (v41)
        {
          buf.ai_flags = 136446466;
          *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
          LOWORD(buf.ai_protocol) = 2082;
          *(void *)((char *)&buf.ai_protocol + 2) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v40,  "%{public}s called with null hostname, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x16u);
        }

        free(backtrace_string);
LABEL_60:
        if (!v7) {
          return 0LL;
        }
LABEL_61:
        free(v7);
        return 0LL;
      }

      if (v41)
      {
        buf.ai_flags = 136446210;
        *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
        _os_log_impl( &dword_181A5C000,  v8,  v40,  "%{public}s called with null hostname, no backtrace",  (uint8_t *)&buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v48 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        buf.ai_flags = 136446210;
        *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
        _os_log_impl( &dword_181A5C000,  v8,  v48,  "%{public}s called with null hostname, backtrace limit exceeded",  (uint8_t *)&buf,  0xCu);
      }
    }

    goto LABEL_59;
  }

  size_t v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    buf.ai_flags = 136446466;
    *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
    LOWORD(buf.ai_protocol) = 2082;
    *(void *)((char *)&buf.ai_protocol + 2) = "hostname";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62.receiver) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        buf.ai_flags = 136446466;
        *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
        LOWORD(buf.ai_protocol) = 2082;
        *(void *)((char *)&buf.ai_protocol + 2) = "hostname";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s invalid empty string %{public}s", (uint8_t *)&buf, 0x16u);
      }
    }

    else if (LOBYTE(v62.receiver))
    {
      v16 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = type[0];
      BOOL v18 = os_log_type_enabled(v8, type[0]);
      if (v16)
      {
        if (v18)
        {
          buf.ai_flags = 136446722;
          *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
          LOWORD(buf.ai_protocol) = 2082;
          *(void *)((char *)&buf.ai_protocol + 2) = "hostname";
          *((_WORD *)&buf.ai_addrlen + 3) = 2082;
          buf.ai_canonname = v16;
          _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x20u);
        }

        goto LABEL_26;
      }

      if (v18)
      {
        buf.ai_flags = 136446466;
        *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
        LOWORD(buf.ai_protocol) = 2082;
        *(void *)((char *)&buf.ai_protocol + 2) = "hostname";
        _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s invalid empty string %{public}s, no backtrace",  (uint8_t *)&buf,  0x16u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        buf.ai_flags = 136446466;
        *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
        LOWORD(buf.ai_protocol) = 2082;
        *(void *)((char *)&buf.ai_protocol + 2) = "hostname";
        _os_log_impl( &dword_181A5C000,  v8,  v29,  "%{public}s invalid empty string %{public}s, backtrace limit exceeded",  (uint8_t *)&buf,  0x16u);
      }
    }

LABEL_59:
    goto LABEL_60;
  }

  if (v4 >= 0x400)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      buf.ai_flags = 136446722;
      *(void *)&buf.ai_family = "nw_endpoint_create_host_with_numeric_port";
      LOWORD(buf.ai_protocol) = 2082;
      *(void *)((char *)&buf.ai_protocol + 2) = "hostname";
      *((_WORD *)&buf.ai_addrlen + 3) = 1024;
      LODWORD(buf.ai_canonname) = 1024;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s is longer than %d",  (uint8_t *)&buf,  0x1Cu);
    }

    return 0LL;
  }

  memset(&buf, 0, sizeof(buf));
  buf.ai_flags = 4;
  buf.ai_socktype = 1;
  v59 = 0LL;
  if (!getaddrinfo(a1, 0LL, &buf, &v59))
  {
    if (v59)
    {
      ai_addr = v59->ai_addr;
      if (ai_addr)
      {
        socklen_t ai_addrlen = v59->ai_addrlen;
        if (ai_addrlen <= 0x1C)
        {
          unsigned int sa_len = ai_addr->sa_len;
          if (ai_addrlen == sa_len)
          {
            int sa_family = ai_addr->sa_family;
            BOOL v23 = sa_len >= 0x10 && sa_family == 2;
            if (v23 || (sa_len >= 0x1C ? (BOOL v24 = sa_family == 30) : (BOOL v24 = 0), v24)) {
              *(_WORD *)ai_addr->sa_data = __rev16(a2);
            }
            address = nw_endpoint_create_address(v59->ai_addr);
LABEL_73:
            if (v59)
            {
              freeaddrinfo(v59);
              v59 = 0LL;
            }

            if (address) {
              return (BOOL)address;
            }
            goto LABEL_13;
          }
        }
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v25 = (id)gLogObj;
    *(_DWORD *)type = 136446467;
    v64 = "nw_endpoint_create_host_with_numeric_port";
    __int16 v65 = 2085;
    v66 = (void *)a1;
    v26 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v62.receiver) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, &v62, &v61))
    {
      if (LOBYTE(v62.receiver) == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (os_log_s *)(id)gLogObj;
        os_log_type_t receiver = (os_log_type_t)v62.receiver;
        if (os_log_type_enabled(v27, (os_log_type_t)v62.receiver))
        {
          *(_DWORD *)type = 136446467;
          v64 = "nw_endpoint_create_host_with_numeric_port";
          __int16 v65 = 2085;
          v66 = (void *)a1;
          _os_log_impl( &dword_181A5C000,  v27,  receiver,  "%{public}s getaddrinfo(%{sensitive}s...) failed",  (uint8_t *)type,  0x16u);
        }
      }

      else if (v61)
      {
        v30 = __nw_create_backtrace_string();
        if (v30)
        {
          v31 = (char *)v30;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v32 = (os_log_s *)(id)gLogObj;
          os_log_type_t v33 = (os_log_type_t)v62.receiver;
          if (os_log_type_enabled(v32, (os_log_type_t)v62.receiver))
          {
            *(_DWORD *)type = 136446723;
            v64 = "nw_endpoint_create_host_with_numeric_port";
            __int16 v65 = 2085;
            v66 = (void *)a1;
            __int16 v67 = 2082;
            v68 = v31;
            _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s getaddrinfo(%{sensitive}s...) failed, dumping backtrace:%{public}s",  (uint8_t *)type,  0x20u);
          }

          free(v31);
          if (!v26) {
            goto LABEL_72;
          }
          goto LABEL_71;
        }

        __nwlog_obj();
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = (os_log_type_t)v62.receiver;
        if (os_log_type_enabled(v27, (os_log_type_t)v62.receiver))
        {
          *(_DWORD *)type = 136446467;
          v64 = "nw_endpoint_create_host_with_numeric_port";
          __int16 v65 = 2085;
          v66 = (void *)a1;
          _os_log_impl( &dword_181A5C000,  v27,  v36,  "%{public}s getaddrinfo(%{sensitive}s...) failed, no backtrace",  (uint8_t *)type,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = (os_log_type_t)v62.receiver;
        if (os_log_type_enabled(v27, (os_log_type_t)v62.receiver))
        {
          *(_DWORD *)type = 136446467;
          v64 = "nw_endpoint_create_host_with_numeric_port";
          __int16 v65 = 2085;
          v66 = (void *)a1;
          _os_log_impl( &dword_181A5C000,  v27,  v35,  "%{public}s getaddrinfo(%{sensitive}s...) failed, backtrace limit exceeded",  (uint8_t *)type,  0x16u);
        }
      }
    }

    if (!v26)
    {
LABEL_72:
      address = 0LL;
      goto LABEL_73;
    }

LABEL_60:
      if (v13) {
        free(v13);
      }
      goto LABEL_62;
    }

    if (!v31)
    {
      __nwlog_obj();
      size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v14,  v29,  "%{public}s called with null options->definition, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_59;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v25 = type;
    v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null options->definition, no backtrace",  buf,  0xCu);
      }

      goto LABEL_59;
    }

    if (v26)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v34 = "nw_protocol_options_copy_serialized_bytes";
      os_log_type_t v35 = 2082;
      os_log_type_t v36 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null options->definition, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_60:
      if (v12) {
        free(v12);
      }
      goto LABEL_62;
    }

    if (!v25)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v28 = "nw_path_can_support_endpoint";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_59;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_181A5C000, v13, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v28 = "nw_path_can_support_endpoint";
      os_log_type_t v29 = 2082;
      v30 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v13) {
      free(v13);
    }
    v10 = 0LL;
    goto LABEL_10;
  }

  *a2 = 0;
  v7 = v5 + 48;
  if (a3 == 1)
  {
LABEL_8:
    *a2 = 0;
  }

  else
  {
    v8 = v6 + 48;
    while (1)
    {
      os_log_type_t v9 = *v8;
      *a2 = v9;
      if (!v9) {
        break;
      }
      ++a2;
      ++v8;
    }
  }

  v10 = strlen(v7);
LABEL_10:

  return v10;
}

      if (!nw_flow_has_final_read((nw_flow_protocol *)a2))
      {
        v43 = v5;
        state = v43->state;

        if ((state & 0xFFFFFFFE) == 4)
        {
          os_log_type_t v45 = v43;
          v46 = (*((_BYTE *)v45 + 268) & 0x20) == 0;

          if (v46)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v47 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v48 = v45;

              v49 = v48;
              os_log_type_t v50 = (*((_BYTE *)v45 + 268) & 1) == 0;

              if (v50) {
                BOOL v51 = "";
              }
              else {
                BOOL v51 = "dry-run ";
              }
              os_log_type_t v52 = nw_endpoint_handler_copy_endpoint(v49);
              id v53 = nw_endpoint_get_logging_description(v52);
              v54 = v49;
              os_log_type_t v55 = v54;
              os_log_type_t v56 = v43->state;
              else {
                BOOL v57 = off_189BBBBF0[v56];
              }

              os_log_type_t v61 = v55;
              objc_super v62 = v61;
              v63 = "path";
              switch(v5->mode)
              {
                case 0:
                  break;
                case 1:
                  v63 = "resolver";
                  break;
                case 2:
                  v63 = nw_endpoint_flow_mode_string(v61[31]);
                  break;
                case 3:
                  v63 = "proxy";
                  break;
                case 4:
                  v63 = "fallback";
                  break;
                case 5:
                  v63 = "transform";
                  break;
                default:
                  v63 = "unknown-mode";
                  break;
              }

              v92 = v62;
              os_unfair_lock_lock((os_unfair_lock_t)v92 + 28);
              v93 = v92[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v92 + 28);

              *(_DWORD *)addrinfo buf = 136447746;
              v242 = "nw_flow_add_read_request";
              v243 = 2082;
              id_str = v48 + 168;
              v245 = 2082;
              v246 = v51;
              v247 = 2082;
              v248 = (void *)v53;
              v249 = 2082;
              v250 = v57;
              v251 = 2082;
              v252 = v63;
              v253 = 2114;
              v254 = v93;
              _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] cannot accept read requests",  buf,  0x48u);
            }
          }
        }

        else
        {
          if ((*(_WORD *)(a2 + 332) & 0x80) == 0)
          {
            request_list_append = nw_read_request_list_append(*(void **)(a2 + 216), v234);
            v59 = *(void **)(a2 + 216);
            *(void *)(a2 + 216) = request_list_append;

LABEL_115:
            v91 = 1LL;
LABEL_250:

            return v91;
          }

          char v60 = *(void **)(a2 + 320);
          if (v60)
          {
            nw_read_request_report_error_with_override(v234, 0LL, v60);
          }

          else
          {
            v64 = v43;
            __int16 v65 = (*((_BYTE *)v64 + 268) & 0x20) == 0;

            if (v65)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v66 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
              {
                __int16 v67 = nw_endpoint_handler_get_id_string(v64);
                v68 = nw_endpoint_handler_dry_run_string(v64);
                v69 = nw_endpoint_handler_copy_endpoint(v64);
                uint64_t v70 = nw_endpoint_get_logging_description(v69);
                v71 = nw_endpoint_handler_state_string(v64);
                v72 = nw_endpoint_handler_mode_string(v64);
                v73 = nw_endpoint_handler_copy_current_path(v64);
                *(_DWORD *)addrinfo buf = 136447746;
                v242 = "nw_flow_add_read_request";
                v243 = 2082;
                id_str = (char *)v67;
                v245 = 2082;
                v246 = v68;
                v247 = 2082;
                v248 = (void *)v70;
                v249 = 2082;
                v250 = v71;
                v251 = 2082;
                v252 = v72;
                v253 = 2114;
                v254 = v73;
                _os_log_impl( &dword_181A5C000,  v66,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already delivered fin al read, cannot accept read requests",  buf,  0x48u);
              }
            }

            v74 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 96);
            nw_read_request_report_error_with_override(v234, 0LL, v74);
          }
        }

    default_input_handler = v5->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        error = (void (*)(void))callbacks->error;
        if (error) {
          error();
        }
      }
    }

    goto LABEL_64;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    else {
      size_t v14 = off_189BBBBC0[mode];
    }
    *(_DWORD *)addrinfo buf = 136446722;
    v102 = "nw_flow_error";
    v103 = 2082;
    v104 = (void *)v14;
    v105 = 2082;
    v106 = "flow";
    _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
  }

LABEL_64:
}

      free(backtrace_string);
    }
  }

        free(v46);
        goto LABEL_60;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v47 = (os_log_s *)(id)gLogObj;
      os_log_type_t v55 = __str[0];
      if (os_log_type_enabled(v47, __str[0]))
      {
        os_log_type_t v56 = **(_DWORD **)(StatusReg + 8);
        *(_DWORD *)type = 136446722;
        *(void *)&os_log_type_t type[4] = "nw_candidate_endpoint_for_ids_connection";
        *(_WORD *)&type[12] = 2048;
        *(void *)&type[14] = v42;
        *(_WORD *)&type[22] = 1024;
        LODWORD(v183[0]) = v56;
        _os_log_impl( &dword_181A5C000,  v47,  v55,  "%{public}s proc_pidinfo PROC_PIDUNIQIDENTIFIERINFO for %llu failed: %{darwin.errno}d, backtrace limit exceeded",  type,  0x1Cu);
      }
    }

    goto LABEL_58;
  }

  v42 = *(void *)&buf[16];
LABEL_61:
  nw_parameters_set_delegated_unique_pid(v16, v42);
LABEL_62:
  *(void *)uu = 0LL;
  *(void *)&uu[8] = 0LL;
  os_log_type_t v58 = v41;
  *(_OWORD *)uu = *(_OWORD *)(v58 + 120);

  if (!uuid_is_null(uu)) {
    nw_parameters_set_parent_id_inner(v16, uu, 1);
  }
  nw_parameters_set_preferred_interface_subtypes(v16, 0LL);
  nw_parameters_set_multipath_service((nw_parameters_t)v16, nw_multipath_service_disabled);
  v59 = nw_path_copy_effective_remote_endpoint((nw_path_t)v58);
  evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(v59, v16);

  os_log_type_t v61 = nw_path_copy_effective_remote_endpoint((nw_path_t)v58);
  if (!v61)
  {
    __nwlog_obj();
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
    v134 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (type[0] == 17)
    {
      __nwlog_obj();
      v135 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v136 = type[0];
      if (os_log_type_enabled(v135, (os_log_type_t)type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v135, v136, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (LOBYTE(__str[0]))
    {
      v157 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v135 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v158 = type[0];
      v159 = os_log_type_enabled(v135, (os_log_type_t)type[0]);
      if (v157)
      {
        if (v159)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v157;
          _os_log_impl( &dword_181A5C000,  v135,  v158,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v157);
        if (!v134) {
          goto LABEL_336;
        }
        goto LABEL_335;
      }

      if (v159)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v135, v158, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v135 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v170 = type[0];
      if (os_log_type_enabled(v135, (os_log_type_t)type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v135,  v170,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_333;
  }

  objc_super v62 = v61;
  v63 = (void *)-[nw_endpoint copy](v61, "copy");

  if (!v63)
  {
    __nwlog_obj();
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
    v134 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (type[0] == 17)
    {
      __nwlog_obj();
      v135 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v138 = type[0];
      if (os_log_type_enabled(v135, (os_log_type_t)type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v135, v138, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (LOBYTE(__str[0]))
    {
      v160 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v135 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v161 = type[0];
      v162 = os_log_type_enabled(v135, (os_log_type_t)type[0]);
      if (v160)
      {
        if (v162)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v160;
          _os_log_impl( &dword_181A5C000,  v135,  v161,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v160);
LABEL_334:
        if (!v134)
        {
LABEL_336:
          v96 = 0LL;
          goto LABEL_179;
        }

    if (v4) {
      goto LABEL_60;
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
  size_t v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  unint64_t v15 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_59;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    v7 = "%{public}s called with null reset_plugin";
    goto LABEL_58;
  }

  if (!v15)
  {
    v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_59;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    v7 = "%{public}s called with null reset_plugin, backtrace limit exceeded";
    goto LABEL_58;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  v5 = (os_log_s *)__nwlog_obj();
  id v6 = type;
  v12 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (!v12) {
      goto LABEL_59;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    v7 = "%{public}s called with null reset_plugin, no backtrace";
    goto LABEL_58;
  }

  if (v12)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    v19 = 2082;
    v20 = backtrace_string;
    v10 = "%{public}s called with null reset_plugin, dumping backtrace:%{public}s";
    goto LABEL_34;
  }

    goto LABEL_60;
  }

  if (!a2)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v34 = "nw_endpoint_set_custom_metadata_for_key";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null key", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (!v31)
    {
      __nwlog_obj();
      size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_181A5C000, v14, v29, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }

      goto LABEL_59;
    }

    BOOL v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v24 = type;
    id v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_181A5C000, v14, v24, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (v25)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v34 = "nw_endpoint_set_custom_metadata_for_key";
      os_log_type_t v35 = 2082;
      os_log_type_t v36 = v23;
      _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null key, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_40;
  }

  if (a3 && !a4)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v34 = "nw_endpoint_set_custom_metadata_for_key";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_181A5C000, v14, v22, "%{public}s called with null metadata_len", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (!v31)
    {
      __nwlog_obj();
      size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl( &dword_181A5C000,  v14,  v30,  "%{public}s called with null metadata_len, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_59;
    }

    BOOL v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_181A5C000, v14, v26, "%{public}s called with null metadata_len, no backtrace", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (v27)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v34 = "nw_endpoint_set_custom_metadata_for_key";
      os_log_type_t v35 = 2082;
      os_log_type_t v36 = v23;
      _os_log_impl( &dword_181A5C000,  v14,  v26,  "%{public}s called with null metadata_len, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      free(v37);
    }
  }

    if (v24) {
      free(v24);
    }
    goto LABEL_18;
  }

  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v40 = "nw_flow_replay_remove_input_handler";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v20, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_flow_replay_remove_input_handler";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v37)
    {
      v27 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v28 = type;
      os_log_type_t v29 = os_log_type_enabled(v21, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v40 = "nw_flow_replay_remove_input_handler";
          BOOL v41 = 2082;
          v42 = v27;
          _os_log_impl( &dword_181A5C000,  v21,  v28,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v27);
        goto LABEL_53;
      }

      if (v29)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_flow_replay_remove_input_handler";
        _os_log_impl(&dword_181A5C000, v21, v28, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_flow_replay_remove_input_handler";
        _os_log_impl( &dword_181A5C000,  v21,  v33,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }
}

        free(v18);
        goto LABEL_60;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v67 = "nw_parameters_create_quic_stream";
      size_t v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v64 = 0;
      if (__nwlog_fault(v14, &type, &v64))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v15 = (os_log_s *)(id)gLogObj;
          v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            __int16 v67 = "nw_parameters_create_quic_stream";
            _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s nw_parameters_create failed", buf, 0xCu);
          }
        }

        else if (v64)
        {
          v21 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v15 = (os_log_s *)(id)gLogObj;
          v22 = type;
          BOOL v23 = os_log_type_enabled(v15, type);
          if (v21)
          {
            if (v23)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              __int16 v67 = "nw_parameters_create_quic_stream";
              v68 = 2082;
              v69 = v21;
              _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v21);
            if (!v14) {
              goto LABEL_51;
            }
            goto LABEL_50;
          }

          if (v23)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            __int16 v67 = "nw_parameters_create_quic_stream";
            _os_log_impl(&dword_181A5C000, v15, v22, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v15 = (os_log_s *)(id)gLogObj;
          v28 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            __int16 v67 = "nw_parameters_create_quic_stream";
            _os_log_impl( &dword_181A5C000,  v15,  v28,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v14)
      {
LABEL_51:
        v7 = 0LL;
LABEL_62:

        goto LABEL_63;
      }

  if (v26) {
    free(v26);
  }
LABEL_17:
}

  if (v32) {
    free(v32);
  }
  v28 = 0LL;
LABEL_16:

  nw_protocol_transform_modify_parameters(v4, v28);
  os_log_type_t v29 = (*(uint64_t (**)(void, id *))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v28);

  return v29;
}

      free(v20);
      if (!v14) {
        return;
      }
LABEL_75:
      v13 = (char *)v14;
LABEL_31:
      free(v13);
      return;
    }

    unint64_t v15 = (os_log_s *)__nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_74;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v27 = "nw_protocol_http_client_bottom_disconnect";
    os_log_type_t v17 = "%{public}s called with null http_client_bottom";
LABEL_73:
    _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
    goto LABEL_74;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v27 = "nw_protocol_http_client_bottom_disconnect";
    size_t v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    BOOL v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v15 = (os_log_s *)__nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      os_log_type_t v17 = "%{public}s called with null other_protocol";
      goto LABEL_73;
    }

    if (!v24)
    {
      unint64_t v15 = (os_log_s *)__nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      os_log_type_t v17 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_73;
    }

    v20 = (char *)__nw_create_backtrace_string();
    unint64_t v15 = (os_log_s *)__nwlog_obj();
    v16 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23) {
        goto LABEL_74;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      os_log_type_t v17 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_73;
    }

    if (v23)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v27 = "nw_protocol_http_client_bottom_disconnect";
      v28 = 2082;
      os_log_type_t v29 = (nw_protocol *)v20;
      v22 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_58;
    }

    goto LABEL_59;
  }

  if (*((nw_protocol **)handle + 6) != a2)
  {
    nw_protocol_disconnected(a2, (uint64_t)handle);
    size_t v4 = *((void *)handle + 23);
    v5 = *((void *)handle + 24);
    if (v4 != v5)
    {
      while (*(nw_protocol **)v4 != a2)
      {
        v4 += 16LL;
        if (v4 == v5) {
          goto LABEL_15;
        }
      }
    }

    if (v4 != v5)
    {
      *(_DWORD *)(v4 + 8) = 2;
      return;
    }

    if (v21) {
      free(v21);
    }
    close(v6);
    BOOL v18 = 0LL;
    goto LABEL_62;
  }

  v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)addrinfo buf = 136446466;
  *(void *)&buf[4] = "network_config_mptcp_watcher_create";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  v8 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  BOOL v41 = OS_LOG_TYPE_DEFAULT;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (os_log_s *)gLogObj;
    v10 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
      goto LABEL_44;
    }
    *(_DWORD *)addrinfo buf = 136446466;
    *(void *)&buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    v11 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d";
    goto LABEL_43;
  }

  if (v41 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (os_log_s *)gLogObj;
    v10 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
      goto LABEL_44;
    }
    *(_DWORD *)addrinfo buf = 136446466;
    *(void *)&buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    v11 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, backtrace limit exceeded";
    goto LABEL_43;
  }

  v19 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v9 = (os_log_s *)gLogObj;
  v10 = type[0];
  v20 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
  if (v19)
  {
    if (v20)
    {
      *(_DWORD *)addrinfo buf = 136446722;
      *(void *)&buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v19;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
    }

    free(v19);
    if (!v8) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }

  if (v20)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    *(void *)&buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    v11 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, no backtrace";
LABEL_43:
    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0x12u);
  }

  return 1LL;
}

    if (v18) {
      free(v18);
    }
    v5 = 0LL;
    goto LABEL_5;
  }

  v5 = (v3[108] >> 4) & 1;
LABEL_5:

LABEL_26:
  return v5;
}
}

  *(_BYTE *)(v5 + 188) = self->_prohibitExpensive;
  *(_WORD *)(v5 + 196) |= 0x400u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_8:
    if ((has & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_61;
  }

    if (v34) {
      free(v34);
    }
    if ((*(_WORD *)(v13 + 204) & 0x100) == 0
      || !g_channel_check_validity
      || g_channel_check_validity(v13, *(void *)(v13 + 88)))
    {
      v44 = *(void **)(v13 + 112);
      if (v44) {
        free(v44);
      }
    }

    nw_frame_reset(v13, 0LL, 0, 0LL, 0LL);
    os_release((void *)v13);
    return 4294966394LL;
  }

  memcpy(v25, a4, a5);
  *(void *)(v13 + 16) = 0LL;
  os_log_type_t v29 = *(uint64_t **)(v11 + 8);
  *(void *)(v13 + 24) = v29;
  *os_log_type_t v29 = v13;
  *(void *)(v11 + 8) = v13 + 16;
  if (!*(void *)v66)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446722;
      v69 = "on_data_chunk_recv_callback";
      uint64_t v70 = 2082;
      v71 = a6 + 205;
      v72 = 2048;
      *(void *)v73 = v11;
      _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s stream (%p) did not have protocol extra",  buf,  0x20u);
    }
  }

  if ((*(_BYTE *)(v11 + 36) & 1) != 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v61 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        objc_super v62 = *(_DWORD *)(v11 + 32);
        *(_DWORD *)addrinfo buf = 136446978;
        v69 = "on_data_chunk_recv_callback";
        uint64_t v70 = 2082;
        v71 = a6 + 205;
        v72 = 2048;
        *(void *)v73 = *(void *)v66;
        *(_WORD *)&v73[8] = 1024;
        *(_DWORD *)&v73[10] = v62;
        _os_log_impl( &dword_181A5C000,  v61,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s calling input_available on protocol %p for stream %d",  buf,  0x26u);
      }
    }

    if (*(void *)v66)
    {
      os_log_type_t v38 = *(void *)(*(void *)v66 + 24LL);
      if (v38)
      {
        v39 = *(void (**)(void))(v38 + 64);
        if (v39)
        {
          v39();
          return 0LL;
        }
      }
    }

    __nwlog_obj();
    os_log_type_t v52 = "invalid";
    if (*(void *)v66 && *(void *)(*(void *)v66 + 16LL)) {
      os_log_type_t v52 = *(const char **)(*(void *)v66 + 16LL);
    }
    *(_DWORD *)addrinfo buf = 136446466;
    v69 = "on_data_chunk_recv_callback";
    uint64_t v70 = 2082;
    v71 = (uint64_t)v52;
    id v53 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    __int16 v65 = 0;
    if (__nwlog_fault(v53, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type;
        if (!os_log_type_enabled(v54, type)) {
          goto LABEL_118;
        }
        os_log_type_t v56 = "invalid";
        if (*(void *)v66 && *(void *)(*(void *)v66 + 16LL)) {
          os_log_type_t v56 = *(const char **)(*(void *)v66 + 16LL);
        }
        *(_DWORD *)addrinfo buf = 136446466;
        v69 = "on_data_chunk_recv_callback";
        uint64_t v70 = 2082;
        v71 = (uint64_t)v56;
        BOOL v57 = "%{public}s protocol %{public}s has invalid input_available callback";
        goto LABEL_117;
      }

      if (!v65)
      {
        v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type;
        if (!os_log_type_enabled(v54, type)) {
          goto LABEL_118;
        }
        v63 = "invalid";
        if (*(void *)v66 && *(void *)(*(void *)v66 + 16LL)) {
          v63 = *(const char **)(*(void *)v66 + 16LL);
        }
        *(_DWORD *)addrinfo buf = 136446466;
        v69 = "on_data_chunk_recv_callback";
        uint64_t v70 = 2082;
        v71 = (uint64_t)v63;
        BOOL v57 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
        goto LABEL_117;
      }

      os_log_type_t v58 = (char *)__nw_create_backtrace_string();
      v54 = (os_log_s *)__nwlog_obj();
      os_log_type_t v55 = type;
      v59 = os_log_type_enabled(v54, type);
      if (v58)
      {
        if (v59)
        {
          char v60 = "invalid";
          if (*(void *)v66 && *(void *)(*(void *)v66 + 16LL)) {
            char v60 = *(const char **)(*(void *)v66 + 16LL);
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v69 = "on_data_chunk_recv_callback";
          uint64_t v70 = 2082;
          v71 = (uint64_t)v60;
          v72 = 2082;
          *(void *)v73 = v58;
          _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v58);
        goto LABEL_118;
      }

      if (v59)
      {
        v64 = "invalid";
        if (*(void *)v66 && *(void *)(*(void *)v66 + 16LL)) {
          v64 = *(const char **)(*(void *)v66 + 16LL);
        }
        *(_DWORD *)addrinfo buf = 136446466;
        v69 = "on_data_chunk_recv_callback";
        uint64_t v70 = 2082;
        v71 = (uint64_t)v64;
        BOOL v57 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_117:
        _os_log_impl(&dword_181A5C000, v54, v55, v57, buf, 0x16u);
      }
    }

    if (!v14) {
      return 1LL;
    }
    goto LABEL_60;
  }

  if (!nw_http2_transport_stream_connect(*(void *)(a1 + 32), v4, object))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v25 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v26 = *(void *)(a1 + 32);
      v27 = (const char *)(v26 + 205);
      v28 = v26 == 0;
      os_log_type_t v29 = *(_DWORD *)(v4 + 32);
      if (v28) {
        v27 = "";
      }
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
      v59 = 2082;
      char v60 = v27;
      os_log_type_t v61 = 1024;
      *(_DWORD *)objc_super v62 = v29;
      *(_WORD *)&v62[4] = 2048;
      *(void *)&v62[6] = v4;
      v8 = "%{public}s %{public}s nw_http2_transport_stream_connect failed for stream id %d (%p)";
      os_log_type_t v9 = (os_log_s *)v25;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 38;
      goto LABEL_37;
    }
  }

  return 1LL;
}

      if (v18) {
        free(v18);
      }
    }
  }

  return 0LL;
}

        goto LABEL_60;
      }

      if (!v35)
      {
        __nwlog_obj();
        BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl( &dword_181A5C000,  v24,  v34,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_59;
      }

      v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v24, type);
      if (!v28)
      {
        if (v32)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_181A5C000, v24, v31, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }

        goto LABEL_59;
      }

      if (v32)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v38 = "nw_proxy_config_create_with_stack";
        v39 = 2082;
        os_log_type_t v40 = v28;
        _os_log_impl( &dword_181A5C000,  v24,  v31,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_47;
    }
  }

  else
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v38 = "nw_proxy_config_create_with_stack";
    BOOL v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v35 = 0;
    if (__nwlog_fault(v23, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null proxy_endpoint", buf, 0xCu);
        }

        goto LABEL_59;
      }

      if (!v35)
      {
        __nwlog_obj();
        BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl( &dword_181A5C000,  v24,  v33,  "%{public}s called with null proxy_endpoint, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_59;
      }

      v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      v30 = os_log_type_enabled(v24, type);
      if (!v28)
      {
        if (v30)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null proxy_endpoint, no backtrace",  buf,  0xCu);
        }

        goto LABEL_59;
      }

      if (v30)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v38 = "nw_proxy_config_create_with_stack";
        v39 = 2082;
        os_log_type_t v40 = v28;
        _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    free(backtrace_string);
    goto LABEL_71;
  }

  v11 = (os_log_s *)__nwlog_obj();
  v12 = type;
  if (os_log_type_enabled(v11, type))
  {
    *(_DWORD *)addrinfo buf = 136446210;
    v30 = "nw_http1_on_message_complete";
    v13 = "%{public}s called with null parser";
LABEL_70:
    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
  }

    if (!v20 || v7 <= v20) {
      break;
    }
    [v5 data];
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "subdataWithRange:", v20, v7 - v20);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 setData:v47];
  }

  return v20 != 0;
}

      if (v12) {
        free(v12);
      }
LABEL_61:
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      return v7;
    }
  }

  v20 = calloc(1uLL, 0x78uLL);
  if (v20)
  {
LABEL_27:
    v21 = *(_OWORD *)a1;
    v22 = *(_OWORD *)(a1 + 16);
    v20[8] = *(void *)(a1 + 32);
    *((_OWORD *)v20 + 2) = v21;
    *((_OWORD *)v20 + 3) = v22;
    v20[11] = a2;
    v20[13] = a3;
    BOOL v23 = g_registration_list;
    *v20 = g_registration_list;
    if (v23) {
      *(void *)(v23 + 8) = v20;
    }
    g_registration_list = (uint64_t)v20;
    v20[1] = &g_registration_list;
    if (a3)
    {
      BOOL v24 = g_many_to_one_list;
      v20[2] = g_many_to_one_list;
      if (v24) {
        *(void *)(v24 + 24) = v20 + 2;
      }
      g_many_to_one_list = (uint64_t)v20;
      v20[3] = &g_many_to_one_list;
    }

    v20[9] = nw_array_create();
    if (gLogDatapath)
    {
      id v25 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v36 = "nw_protocol_register_many_to_one";
        v37 = 2080;
        os_log_type_t v38 = a1;
        _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s created new registration for many-to-one protocol %s",  buf,  0x16u);
      }
    }

    goto LABEL_61;
  }

  v31 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  os_log_type_t v36 = "strict_calloc";
  v37 = 2048;
  os_log_type_t v38 = 1LL;
  v39 = 2048;
  os_log_type_t v40 = 120LL;
  v32 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v32);
  if (!result)
  {
    free(v32);
    goto LABEL_27;
  }

  __break(1u);
  return result;
}

        if (!v19)
        {
LABEL_61:
          v16 = 0LL;
LABEL_8:

          *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v16;
          os_release(v9);
          return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0LL;
        }

  __break(1u);
}

    free(v30);
    if (!v19) {
      goto LABEL_8;
    }
    goto LABEL_88;
  }

  os_log_type_t v17 = (dispatch_queue_s *)v11[2];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = __nw_storage_store_items_block_invoke;
  block[3] = &unk_189BC6FC8;
  os_log_type_t v38 = v11;
  v44 = a2;
  v39 = v13;
  os_log_type_t v40 = 0LL;
  BOOL v41 = v12;
  v42 = v14;
  v43 = v16;
  dispatch_async(v17, block);

LABEL_8:
}

      free(v39);
      goto LABEL_60;
    }
  }

      v47 = 0LL;
      goto LABEL_62;
    }

    while (1)
    {
      BOOL v23 = *(void *)(v17 + 544);
      if ((*(_WORD *)(v17 + 736) & 0x20) != 0 && datagram_variant_flow_id == *(void *)(v17 + 248)) {
        break;
      }
      os_log_type_t v17 = *(void *)(v17 + 544);
      if (!v23) {
        goto LABEL_15;
      }
    }

    if ((*(_WORD *)(v17 + 736) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v98 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
        {
          v99 = *(_DWORD *)(*(void *)(v17 + 336) + 1280LL);
          v100 = *(nw_endpoint **)(v17 + 240);
          *(_DWORD *)aBlock = 136447490;
          *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v17 + 636;
          *(_WORD *)&aBlock[22] = 2080;
          v128 = (uint64_t)" ";
          LOWORD(v129) = 1024;
          *(_DWORD *)((char *)&v129 + 2) = v99;
          HIWORD(v129) = 2048;
          v130 = v100;
          v131 = 2048;
          v132 = datagram_variant_flow_id;
          _os_log_impl( &dword_181A5C000,  v98,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> Accepting datagram flow ID %llu",  aBlock,  0x3Au);
        }
      }
    }

    BOOL v24 = *(_WORD *)(v17 + 736) & 0xFFDF | (*(unsigned __int8 *)(v17 + 738) << 16);
    *(_WORD *)(v17 + 736) = *(_WORD *)(v17 + 736) & 0xFFCF | 0x10;
    *(_BYTE *)(v17 + 738) = BYTE2(v24);
    if (*(_DWORD *)(v17 + 372) == 4) {
      *(_DWORD *)(v17 + 372) = 8;
    }
    id v25 = v17 + 64;
    nw_protocol_set_input_handler(v17 + 64, *(void *)(v17 + 48));
    *(_OWORD *)(v17 + 64) = *(_OWORD *)v17;
    if (v8)
    {
      v26 = *(void (***)(uint64_t, uint64_t))(v8 + 24);
      if (v26)
      {
        v27 = *v26;
        if (v27)
        {
          v27(v8, v17 + 64);
          nw_protocol_set_output_handler(v17 + 64, v8);
          goto LABEL_29;
        }
      }

      __nwlog_obj();
      v85 = *(const char **)(v8 + 16);
      if (!v85) {
        v85 = "invalid";
      }
    }

    else
    {
      __nwlog_obj();
      v85 = "invalid";
    }

    *(_DWORD *)aBlock = 136446466;
    *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    *(_WORD *)&aBlock[12] = 2082;
    *(void *)&aBlock[14] = v85;
    v90 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v117 = 0;
    if (__nwlog_fault(v90, type, &v117))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v91 = (os_log_s *)__nwlog_obj();
        v92 = type[0];
        if (!os_log_type_enabled(v91, type[0])) {
          goto LABEL_172;
        }
        v93 = "invalid";
        if (v8 && *(void *)(v8 + 16)) {
          v93 = *(const char **)(v8 + 16);
        }
        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v93;
        v94 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_171:
        _os_log_impl(&dword_181A5C000, v91, v92, v94, aBlock, 0x16u);
        goto LABEL_172;
      }

      if (!v117)
      {
        v91 = (os_log_s *)__nwlog_obj();
        v92 = type[0];
        if (!os_log_type_enabled(v91, type[0])) {
          goto LABEL_172;
        }
        v104 = "invalid";
        if (v8 && *(void *)(v8 + 16)) {
          v104 = *(const char **)(v8 + 16);
        }
        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v104;
        v94 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_171;
      }

      v95 = (char *)__nw_create_backtrace_string();
      v91 = (os_log_s *)__nwlog_obj();
      v92 = type[0];
      v96 = os_log_type_enabled(v91, type[0]);
      if (!v95)
      {
        if (!v96) {
          goto LABEL_172;
        }
        v105 = "invalid";
        if (v8 && *(void *)(v8 + 16)) {
          v105 = *(const char **)(v8 + 16);
        }
        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v105;
        v94 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
        goto LABEL_171;
      }

      if (v96)
      {
        v97 = "invalid";
        if (v8 && *(void *)(v8 + 16)) {
          v97 = *(const char **)(v8 + 16);
        }
        *(_DWORD *)aBlock = 136446722;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = v97;
        *(_WORD *)&aBlock[22] = 2082;
        v128 = (uint64_t)v95;
        _os_log_impl( &dword_181A5C000,  v91,  v92,  "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s",  aBlock,  0x20u);
      }

      free(v95);
    }

  os_log_type_t v38 = (nw_error *)-[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
LABEL_109:
  BOOL v24 = v38;
LABEL_110:

LABEL_111:
  return v24;
}

    free(v40);
    if (!v15) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }

  v8 = v4;
  os_log_type_t v9 = [v8 type];

  if (v9 == 4)
  {
    v49[0] = MEMORY[0x1895F87A8];
    v49[1] = 3221225472LL;
    v49[2] = __nw_http_metadata_set_endpoint_block_invoke;
    v49[3] = &unk_189BC6260;
    v10 = v8;
    v49[4] = v10;
    v11 = *((void *)v5 + 4);
    if (v11) {
      __nw_http_metadata_set_endpoint_block_invoke((uint64_t)v49, v11);
    }

    goto LABEL_29;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  v13 = v8;
  size_t v14 = [v13 type];

  *(_DWORD *)addrinfo buf = 136446466;
  id v53 = "nw_http_metadata_set_endpoint";
  v54 = 1024;
  *(_DWORD *)os_log_type_t v55 = v14;
  LODWORD(v48) = 18;
  unint64_t v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  os_log_type_t v50 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (os_log_s *)(id)gLogObj;
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v16, type))
    {
      BOOL v18 = v13;
      v19 = objc_msgSend(v18, "type", buf, v48);

      *(_DWORD *)addrinfo buf = 136446466;
      id v53 = "nw_http_metadata_set_endpoint";
      v54 = 1024;
      *(_DWORD *)os_log_type_t v55 = v19;
      _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }

  if (v16) {
    free(v16);
  }
LABEL_10:
}

  if (v16) {
    free(v16);
  }
LABEL_10:
}

  if (v11) {
    free(v11);
  }
  v8 = 0.0;
LABEL_10:

  return v8;
}

      free(v20);
      if (!v14) {
        return;
      }
LABEL_75:
      v13 = (char *)v14;
LABEL_31:
      free(v13);
      return;
    }

    unint64_t v15 = (os_log_s *)__nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_74;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v27 = "nw_protocol_http_messaging_disconnect";
    os_log_type_t v17 = "%{public}s called with null http_messaging";
LABEL_73:
    _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
    goto LABEL_74;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v27 = "nw_protocol_http_messaging_disconnect";
    size_t v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    BOOL v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v15 = (os_log_s *)__nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v27 = "nw_protocol_http_messaging_disconnect";
      os_log_type_t v17 = "%{public}s called with null other_protocol";
      goto LABEL_73;
    }

    if (!v24)
    {
      unint64_t v15 = (os_log_s *)__nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v27 = "nw_protocol_http_messaging_disconnect";
      os_log_type_t v17 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_73;
    }

    v20 = (char *)__nw_create_backtrace_string();
    unint64_t v15 = (os_log_s *)__nwlog_obj();
    v16 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23) {
        goto LABEL_74;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v27 = "nw_protocol_http_messaging_disconnect";
      os_log_type_t v17 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_73;
    }

    if (v23)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v27 = "nw_protocol_http_messaging_disconnect";
      v28 = 2082;
      os_log_type_t v29 = (nw_protocol *)v20;
      v22 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_58;
    }

    goto LABEL_59;
  }

  if (*((nw_protocol **)handle + 6) != a2)
  {
    nw_protocol_disconnected(a2, (uint64_t)handle);
    size_t v4 = *((void *)handle + 20);
    v5 = *((void *)handle + 21);
    if (v4 != v5)
    {
      while (*(nw_protocol **)v4 != a2)
      {
        v4 += 16LL;
        if (v4 == v5) {
          goto LABEL_15;
        }
      }
    }

    if (v4 != v5)
    {
      *(_DWORD *)(v4 + 8) = 2;
      return;
    }

  free(v20);
  if (v14)
  {
LABEL_79:
    v13 = (char *)v14;
LABEL_23:
    free(v13);
  }

  if (v30) {
    free(v30);
  }
  v21 = 0LL;
LABEL_29:

  return v21;
}

  if (v12) {
LABEL_60:
  }
    free(v12);
}

    if (v25) {
      free(v25);
    }
    return 2LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_socksv5_parse_hello_block_invoke";
    _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_ERROR, "%{public}s Received NULL server hello", buf, 0xCu);
  }

  return 0LL;
}

  if (v24) {
    free(v24);
  }
}

LABEL_71:
    free(v26);
    goto LABEL_72;
  }

                goto LABEL_133;
              }

              if (!v130)
              {
                __nwlog_obj();
                char v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v83 = type;
                if (os_log_type_enabled(v60, type))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  _os_log_impl( &dword_181A5C000,  v60,  v83,  "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded",  buf,  0xCu);
                }

                goto LABEL_71;
              }

              v72 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v74 = type;
              v75 = os_log_type_enabled(v73, type);
              if (v72)
              {
                if (v75)
                {
                  *(_DWORD *)addrinfo buf = 136446466;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  v134 = 2082;
                  v135 = v72;
                  _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v72);
                if (!v59) {
                  goto LABEL_135;
                }
                goto LABEL_134;
              }

              if (v75)
              {
                *(_DWORD *)addrinfo buf = 136446210;
                v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s nw_protocol_transform_create failed, no backtrace",  buf,  0xCu);
              }
            }

  if (v20) {
    free(v20);
  }
  return 0LL;
}

      if (v27) {
        free(v27);
      }
      if ((*(_BYTE *)(a1 + 48) & 2) != 0)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 52));
        return 0LL;
      }

      return 0LL;
    }

    v30 = v7;
    v31 = v19;
    v32 = 12;
    goto LABEL_80;
  }

  size_t v4 = *(void *)(a1 + 40);
  if (!v4)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v36 = "nw_necp_append_tlv";
    id v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v36 = "nw_necp_append_tlv";
      v20 = "%{public}s called with null beyond";
      goto LABEL_71;
    }

    if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v19 = type;
      id v25 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v25) {
          goto LABEL_16;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v36 = "nw_necp_append_tlv";
        v37 = 2082;
        *(void *)os_log_type_t v38 = backtrace_string;
        v13 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_48:
        size_t v14 = v7;
        unint64_t v15 = v19;
        v16 = 22;
LABEL_15:
        _os_log_impl(&dword_181A5C000, v14, v15, v13, buf, v16);
LABEL_16:

        free(backtrace_string);
        goto LABEL_17;
      }

      if (!v25) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v36 = "nw_necp_append_tlv";
      v20 = "%{public}s called with null beyond, no backtrace";
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v36 = "nw_necp_append_tlv";
      v20 = "%{public}s called with null beyond, backtrace limit exceeded";
    }

    goto LABEL_71;
  }

  if (v3 >= v4)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136447234;
    os_log_type_t v36 = "nw_necp_append_tlv";
    v37 = 2048;
    *(void *)os_log_type_t v38 = v3;
    *(_WORD *)&v38[8] = 2048;
    *(void *)v39 = v4;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)os_log_type_t v40 = 150;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 16;
    id v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136447234;
      os_log_type_t v36 = "nw_necp_append_tlv";
      v37 = 2048;
      *(void *)os_log_type_t v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)os_log_type_t v40 = 150;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      v20 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }

    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      v28 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v28) {
          goto LABEL_16;
        }
        *(_DWORD *)addrinfo buf = 136447490;
        os_log_type_t v36 = "nw_necp_append_tlv";
        v37 = 2048;
        *(void *)os_log_type_t v38 = v3;
        *(_WORD *)&v38[8] = 2048;
        *(void *)v39 = v4;
        *(_WORD *)&v39[8] = 1024;
        *(_DWORD *)os_log_type_t v40 = 150;
        *(_WORD *)&v40[4] = 1024;
        *(_DWORD *)&v40[6] = 16;
        *(_WORD *)BOOL v41 = 2082;
        *(void *)&v41[2] = backtrace_string;
        v13 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        size_t v14 = v7;
        unint64_t v15 = v23;
        v16 = 54;
        goto LABEL_15;
      }

      if (!v28) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136447234;
      os_log_type_t v36 = "nw_necp_append_tlv";
      v37 = 2048;
      *(void *)os_log_type_t v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)os_log_type_t v40 = 150;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      v20 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136447234;
      os_log_type_t v36 = "nw_necp_append_tlv";
      v37 = 2048;
      *(void *)os_log_type_t v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)os_log_type_t v40 = 150;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      v20 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }

    v30 = v7;
    v31 = v23;
    v32 = 44;
LABEL_80:
    _os_log_impl(&dword_181A5C000, v30, v31, v20, buf, v32);
    goto LABEL_81;
  }

  if (v4 - v3 <= 0x14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136447490;
    os_log_type_t v36 = "nw_necp_append_tlv";
    v37 = 2048;
    *(void *)os_log_type_t v38 = v3;
    *(_WORD *)&v38[8] = 2048;
    *(void *)v39 = 21LL;
    *(_WORD *)&v39[8] = 2048;
    *(void *)os_log_type_t v40 = v4;
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)BOOL v41 = 150;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = 16;
    id v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (os_log_s *)(id)gLogObj;
      v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)addrinfo buf = 136447490;
      os_log_type_t v36 = "nw_necp_append_tlv";
      v37 = 2048;
      *(void *)os_log_type_t v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)v39 = 21LL;
      *(_WORD *)&v39[8] = 2048;
      *(void *)os_log_type_t v40 = v4;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)BOOL v41 = 150;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = 16;
      os_log_type_t v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }

    if (!v33)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (os_log_s *)(id)gLogObj;
      v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)addrinfo buf = 136447490;
      os_log_type_t v36 = "nw_necp_append_tlv";
      v37 = 2048;
      *(void *)os_log_type_t v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)v39 = 21LL;
      *(_WORD *)&v39[8] = 2048;
      *(void *)os_log_type_t v40 = v4;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)BOOL v41 = 150;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = 16;
      os_log_type_t v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (os_log_s *)(id)gLogObj;
    v8 = type;
    v12 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_26;
      }
      *(_DWORD *)addrinfo buf = 136447490;
      os_log_type_t v36 = "nw_necp_append_tlv";
      v37 = 2048;
      *(void *)os_log_type_t v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)v39 = 21LL;
      *(_WORD *)&v39[8] = 2048;
      *(void *)os_log_type_t v40 = v4;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)BOOL v41 = 150;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = 16;
      os_log_type_t v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0x36u);
LABEL_26:

      if (!v6) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }

    if (!v12) {
      goto LABEL_16;
    }
    *(_DWORD *)addrinfo buf = 136447746;
    os_log_type_t v36 = "nw_necp_append_tlv";
    v37 = 2048;
    *(void *)os_log_type_t v38 = v3;
    *(_WORD *)&v38[8] = 2048;
    *(void *)v39 = 21LL;
    *(_WORD *)&v39[8] = 2048;
    *(void *)os_log_type_t v40 = v4;
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)BOOL v41 = 150;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = 16;
    v42 = 2082;
    v43 = backtrace_string;
    v13 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    size_t v14 = v7;
    unint64_t v15 = v8;
    v16 = 64;
    goto LABEL_15;
  }

  *(_BYTE *)v3 = -106;
  *(_DWORD *)(v3 + 1) = 16;
  if (!a2)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v36 = "nw_necp_append_tlv";
    v37 = 1024;
    *(_DWORD *)os_log_type_t v38 = 150;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = 16;
    id v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v36 = "nw_necp_append_tlv";
        v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = 150;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 16;
        v20 = "%{public}s type=%u length=%u but value is NULL";
LABEL_79:
        v30 = v7;
        v31 = v27;
        v32 = 24;
        goto LABEL_80;
      }
    }

    else
    {
      if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v27 = type;
        os_log_type_t v29 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (!v29) {
            goto LABEL_16;
          }
          *(_DWORD *)addrinfo buf = 136446978;
          os_log_type_t v36 = "nw_necp_append_tlv";
          v37 = 1024;
          *(_DWORD *)os_log_type_t v38 = 150;
          *(_WORD *)&v38[4] = 1024;
          *(_DWORD *)&v38[6] = 16;
          *(_WORD *)v39 = 2082;
          *(void *)&v39[2] = backtrace_string;
          v13 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          size_t v14 = v7;
          unint64_t v15 = v27;
          v16 = 34;
          goto LABEL_15;
        }

        if (!v29) {
          goto LABEL_81;
        }
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v36 = "nw_necp_append_tlv";
        v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = 150;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 16;
        v20 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_79;
      }

      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v36 = "nw_necp_append_tlv";
        v37 = 1024;
        *(_DWORD *)os_log_type_t v38 = 150;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 16;
        v20 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_79;
      }
    }

          if (v6) {
            *id v6 = v51;
          }
          return v9;
        }

        os_log_type_t v55 = *(_DWORD *)(v8 + 40);
        os_log_type_t v56 = *(void *)(v8 + 24);
        BOOL v57 = *(void *)(v8 + 32);
        *(_DWORD *)addrinfo buf = 136447234;
        v68 = "nw_mem_region_alloc";
        v69 = 1024;
        *(_DWORD *)uint64_t v70 = v55;
        *(_WORD *)&v70[4] = 2048;
        *(void *)&v70[6] = v8;
        *(_WORD *)&v70[14] = 2048;
        *(void *)&v70[16] = v56;
        *(_WORD *)&v70[24] = 2048;
        v71 = v57;
        os_log_type_t v48 = "%{public}s   [%u] seg %p [0x%llu-0x%llu) mirrored";
        v49 = v54;
        os_log_type_t v50 = 48;
LABEL_81:
        _os_log_impl(&dword_181A5C000, v49, OS_LOG_TYPE_DEBUG, v48, buf, v50);
        goto LABEL_64;
      }

      if (!gLogDatapath) {
        goto LABEL_64;
      }
    }

    else if (!gLogDatapath)
    {
      goto LABEL_64;
    }

    v44 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_64;
    }
    os_log_type_t v45 = *(_DWORD *)(v8 + 40);
    v46 = *(void *)(v8 + 24);
    v47 = *(void *)(v8 + 32);
    *(_DWORD *)addrinfo buf = 136446978;
    v68 = "nw_mem_region_alloc";
    v69 = 1024;
    *(_DWORD *)uint64_t v70 = v45;
    *(_WORD *)&v70[4] = 2048;
    *(void *)&v70[6] = v46;
    *(_WORD *)&v70[14] = 2048;
    *(void *)&v70[16] = v47;
    os_log_type_t v48 = "%{public}s   [%u] [0x%llu-0x%llu)";
    v49 = v44;
    os_log_type_t v50 = 38;
    goto LABEL_81;
  }

  v64 = a1 + 160;
  p_cache = &OBJC_CLASS___NWConcrete_nw_activity.cache;
  unint64_t v15 = (vm_map_t *)MEMORY[0x1895FBBE0];
  v63 = a5;
  while (1)
  {
    address = 0LL;
    else {
      v16 = *(void *)(a1 + 96) - *(void *)(a1 + 16);
    }
    if (v16)
    {
      os_log_type_t v17 = *(void *)(a1 + 312);
      if (v17)
      {
        BOOL v18 = 0LL;
LABEL_26:
        v19 = 0LL;
        v20 = 0;
        while (1)
        {
          v21 = v17 - 1 == v19 ? (*(_DWORD *)(a1 + 96) - 1) & 0x3F : 63;
          v22 = (0xFFFFFFFFFFFFFFFFLL >> (v21 ^ 0x3Fu)) & *(void *)(*(void *)(a1 + 304) + 8 * v19);
          if (v22) {
            break;
          }
          v19 = ++v20;
          if (v17 <= v20) {
            goto LABEL_42;
          }
        }

        BOOL v23 = __clz(__rbit64(v22));
        BOOL v24 = v23 | (v20 << 6);
        if (mach_vm_allocate(*v15, &address, *(void *)(a1 + 88), 1493172227))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v25 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            v26 = *(void *)(a1 + 88);
            v27 = *(void *)(a1 + 96);
            *(_DWORD *)addrinfo buf = 136447234;
            v68 = "nw_segment_freelist_grow";
            v69 = 2082;
            *(void *)uint64_t v70 = v64;
            *(_WORD *)&v70[8] = 1024;
            *(_DWORD *)&v70[10] = v26;
            *(_WORD *)&v70[14] = 1024;
            *(_DWORD *)&v70[16] = v27;
            *(_WORD *)&v70[20] = 1024;
            *(_DWORD *)&v70[22] = v24;
            _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s: [%u * %u] mach_vm_allocate idx %u failed",  buf,  0x28u);
          }

          goto LABEL_42;
        }

        if (*(void *)(a1 + 88) != ((*(void *)(a1 + 88) + *MEMORY[0x1895FD590] - 1LL) & -*MEMORY[0x1895FD590]))
        {
          v34 = (os_log_s *)__nwlog_obj();
          os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
          *(_DWORD *)addrinfo buf = 136446466;
          v68 = "nw_segment_create";
          v69 = 2082;
          *(void *)uint64_t v70 = "VERIFY segsize == round_page(segsize) failed";
          os_log_type_t v35 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v35);
          if (result) {
            goto LABEL_84;
          }
          free(v35);
        }

        v28 = *(void *)(a1 + 304);
        os_log_type_t v29 = v20 & 0x3FFFFFF;
        v30 = 1LL << v23;
        if ((*(void *)(v28 + 8LL * v29) & (1LL << v23)) == 0)
        {
          v37 = (os_log_s *)__nwlog_obj();
          os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
          *(_DWORD *)addrinfo buf = 136446466;
          v68 = "nw_segment_create";
          v69 = 2082;
          *(void *)uint64_t v70 = "VERIFY bit_test(*bmap, i % BMAPSZ) failed";
          os_log_type_t v38 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v38);
          if (result) {
            goto LABEL_84;
          }
          free(v38);
        }

        v31 = malloc_zone_calloc((malloc_zone_t *)g_slab_zone, 1uLL, 0x38uLL);
        if (!v31)
        {
          v39 = (os_log_s *)__nwlog_obj();
          os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
          *(_DWORD *)addrinfo buf = 136446722;
          v68 = "strict_malloc_zone_calloc";
          v69 = 2048;
          *(void *)uint64_t v70 = 1LL;
          *(_WORD *)&v70[8] = 2048;
          *(void *)&v70[10] = 56LL;
          v59 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v59);
          if (result) {
            goto LABEL_84;
          }
          free(v59);
        }

        v31[2] = a1;
        *((_DWORD *)v31 + 10) = v24;
        *((_DWORD *)v31 + 12) = 1;
        *(void *)(v28 + 8 * v29) &= ~v30;
        v32 = address;
        v31[3] = address;
        os_log_type_t v33 = *(void *)(a1 + 88) + v32;
        v31[4] = v33;
        if (!v32 || !v33)
        {
          os_log_type_t v40 = (os_log_s *)__nwlog_obj();
          os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
          *(_DWORD *)addrinfo buf = 136446466;
          v68 = "nw_segment_freelist_grow";
          v69 = 2082;
          *(void *)uint64_t v70 = "VERIFY sg->sg_start != 0 && sg->sg_end != 0 failed";
          BOOL v41 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v41);
          if (result) {
            goto LABEL_84;
          }
          free(v41);
        }

        *((_DWORD *)v31 + 12) = 3;
        nw_segment_freelist_insert((void *)a1, (uint64_t)v31, 1);
        ++*(void *)(a1 + 32);
        if (gLogDatapath)
        {
          v42 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            v43 = *(void *)(a1 + 96);
            *(_DWORD *)addrinfo buf = 136446722;
            v68 = "nw_segment_freelist_grow";
            v69 = 1024;
            *(_DWORD *)uint64_t v70 = v24 + 1;
            *(_WORD *)&v70[4] = 2048;
            *(void *)&v70[6] = v43;
            _os_log_impl(&dword_181A5C000, v42, OS_LOG_TYPE_DEBUG, "%{public}s sg %u/%zu", buf, 0x1Cu);
          }
        }
    }
  }

  else
  {
    __nwlog_obj();
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v156 = "nw_endpoint_handler_add_write_request";
    size_t v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v153 = 0;
    if (__nwlog_fault(v14, &type, &v153))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v82 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v156 = "nw_endpoint_handler_add_write_request";
          _os_log_impl(&dword_181A5C000, v15, v82, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v153)
      {
        v91 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v92 = type;
        v93 = os_log_type_enabled(v15, type);
        if (v91)
        {
          if (v93)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v156 = "nw_endpoint_handler_add_write_request";
            v157 = 2082;
            id_str = v91;
            _os_log_impl( &dword_181A5C000,  v15,  v92,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v91);
          if (!v14) {
            goto LABEL_74;
          }
          goto LABEL_73;
        }

        if (v93)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v156 = "nw_endpoint_handler_add_write_request";
          _os_log_impl(&dword_181A5C000, v15, v92, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v94 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v156 = "nw_endpoint_handler_add_write_request";
          _os_log_impl( &dword_181A5C000,  v15,  v94,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_71;
    }
  }

  if (v14) {
LABEL_73:
  }
    free(v14);
LABEL_74:
  BOOL v24 = 0LL;
LABEL_180:

  return v24;
}

          minimize_logging = nw_endpoint_handler_get_minimize_logging(v229);
          logging_disabled = nw_endpoint_handler_get_logging_disabled(v229);
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0) {
              goto LABEL_78;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v54 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
            {
              v151 = nw_endpoint_handler_get_id_string(v229);
              v152 = nw_endpoint_handler_dry_run_string(v229);
              v153 = nw_endpoint_handler_copy_endpoint(v229);
              v154 = nw_endpoint_get_logging_description(v153);
              v155 = nw_endpoint_handler_state_string(v229);
              v156 = nw_endpoint_handler_mode_string(v229);
              v157 = nw_endpoint_handler_copy_current_path(v229);
              *(_DWORD *)addrinfo buf = 136447746;
              *(void *)&buf[4] = "nw_flow_process_input_frames";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v151;
              *(_WORD *)&buf[22] = 2082;
              v273 = (uint64_t (*)(uint64_t, uint64_t))v152;
              *(_WORD *)v274 = 2082;
              *(void *)&v274[2] = v154;
              *(_WORD *)&v274[10] = 2082;
              *(void *)&v274[12] = v155;
              v275 = 2082;
              v276 = v156;
              v277 = 2114;
              v278 = v157;
              _os_log_impl( &dword_181A5C000,  v54,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] content_context is wake packet",  buf,  0x48u);
            }

            goto LABEL_77;
          }

          if ((logging_disabled & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v54 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v55 = nw_endpoint_handler_get_id_string(v229);
              os_log_type_t v56 = nw_endpoint_handler_dry_run_string(v229);
              BOOL v57 = nw_endpoint_handler_copy_endpoint(v229);
              os_log_type_t v58 = nw_endpoint_get_logging_description(v57);
              v59 = nw_endpoint_handler_state_string(v229);
              char v60 = nw_endpoint_handler_mode_string(v229);
              os_log_type_t v61 = nw_endpoint_handler_copy_current_path(v229);
              *(_DWORD *)addrinfo buf = 136447746;
              *(void *)&buf[4] = "nw_flow_process_input_frames";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v55;
              *(_WORD *)&buf[22] = 2082;
              v273 = (uint64_t (*)(uint64_t, uint64_t))v56;
              *(_WORD *)v274 = 2082;
              *(void *)&v274[2] = v58;
              *(_WORD *)&v274[10] = 2082;
              *(void *)&v274[12] = v59;
              v275 = 2082;
              v276 = v60;
              v277 = 2114;
              v278 = v61;
              _os_log_impl( &dword_181A5C000,  v54,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] content_context is wake packet",  buf,  0x48u);
            }

LABEL_72:
      if (v11) {
        free(v11);
      }
      goto LABEL_17;
    }

    if (!v28)
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl( &dword_181A5C000,  v12,  v27,  "%{public}s Activity not completed, cannot check duration threshold, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    BOOL v24 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s Activity not completed, cannot check duration threshold, no backtrace",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v31 = "nw_activity_duration_exceeds_threshold";
      v32 = 2082;
      os_log_type_t v33 = (unint64_t)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s Activity not completed, cannot check duration threshold, dumping backtrace:%{public}s",  buf,  0x16u);
    }

        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

  nw_protocol_plugin_retry_set_getting_input_frames((uint64_t)(handle + 216), (uint64_t)a1, 0);
  if ((handle[198] & 1) == 0)
  {
    if (*((_BYTE *)v21 + 1537))
    {
      id v53 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446978;
        *(void *)&buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 114;
        *(_WORD *)&buf[22] = 2080;
        __int16 v67 = (__n128 (*)(uint64_t, uint64_t))" ";
        *(_WORD *)v68 = 1024;
        *(_DWORD *)&v68[2] = input_frames;
        _os_log_impl(&dword_181A5C000, v53, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreturning %u frames", buf, 0x26u);
      }
    }
  }

  return input_frames;
}

        goto LABEL_72;
      }

      if (!(_BYTE)v47)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v43 = v51[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v51[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl( &dword_181A5C000,  v33,  v43,  "%{public}s called with null new_candidate, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = v51[0];
      BOOL v41 = os_log_type_enabled(v33, (os_log_type_t)v51[0]);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl(&dword_181A5C000, v33, v40, "%{public}s called with null new_candidate, no backtrace", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (v41)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&buf[4] = "nw_candidate_manager_process_candidate_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v33,  v40,  "%{public}s called with null new_candidate, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_59;
    }
  }

  else
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_candidate_manager_process_candidate_internal";
    v32 = (char *)_os_log_send_and_compose_impl();

    v51[0] = 16;
    LOBYTE(v47) = 0;
    if (__nwlog_fault(v32, v51, &v47))
    {
      if (v51[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v34 = v51[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v51[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s called with null candidate_manager", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (!(_BYTE)v47)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v42 = v51[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v51[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl( &dword_181A5C000,  v33,  v42,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = v51[0];
      v39 = os_log_type_enabled(v33, (os_log_type_t)v51[0]);
      if (!backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl( &dword_181A5C000,  v33,  v38,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      if (v39)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&buf[4] = "nw_candidate_manager_process_candidate_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v33,  v38,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    os_log_type_t v48 = *(void *)(v24 + 8);
    v49 = *(_DWORD *)(v48 + 228);
    if (v49 == 4)
    {
      if (*((_BYTE *)v22 + 1537))
      {
        __nwlog_obj();
        v75 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
        {
          v76 = *(void *)(*(void *)(a1 + 40) + 8LL) + 275LL;
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v76;
          _os_log_impl( &dword_181A5C000,  v75,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s input nw_ws_parse_state_mask_key",  buf,  0x16u);
        }

        os_log_type_t v48 = *(void *)(*(void *)(a1 + 40) + 8LL);
        v22 = &qword_18C45F000;
      }

      if (!nw_framer_parse_input( *(nw_framer_t *)(a1 + 32),  4uLL,  4uLL,  (uint8_t *)(v48 + 252),  &__block_literal_global_19))
      {
        v99 = 4LL;
        goto LABEL_143;
      }

      if (*((_BYTE *)v22 + 1537))
      {
        __nwlog_obj();
        v83 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
        {
          v84 = *(void *)(*(void *)(a1 + 40) + 8LL);
          v85 = v84 + 48;
          v86 = v84 + 275;
          v87 = *(_DWORD *)(v84 + 252);
          v88 = (*(_WORD *)(v85 + 225) & 4) == 0;
          v89 = "server";
          if (v88) {
            v89 = "client";
          }
          *(_DWORD *)addrinfo buf = 136446978;
          *(void *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke_2";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v86;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)v158 = v87;
          *(_WORD *)&v158[4] = 2082;
          *(void *)&v158[6] = v89;
          _os_log_impl( &dword_181A5C000,  v83,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s input masking_key = %u, %{public}s",  buf,  0x26u);
        }

        v22 = &qword_18C45F000;
      }

      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 228LL) = 5;
      os_log_type_t v48 = *(void *)(*(void *)(a1 + 40) + 8LL);
      v49 = *(_DWORD *)(v48 + 228);
    }

    if (v49 == 5)
    {
      os_log_type_t v50 = *(_DWORD *)(v48 + 232);
      if ((v50 - 8) > 2)
      {
        os_log_type_t v52 = *(void **)(v48 + 244);
        if (v52)
        {
          metadata = v52;
          if (*((_BYTE *)v22 + 1537)) {
            goto LABEL_114;
          }
        }

        else
        {
          metadata = nw_ws_create_metadata(v50);
          nw_ws_metadata_set_negotiated_permessage_deflate( metadata,  (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 273LL) >> 6) & 1);
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 244LL), metadata);
          if (gLogDatapath)
          {
LABEL_114:
            __nwlog_obj();
            v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
            {
              v78 = *(void *)(*(void *)(a1 + 40) + 8LL);
              v79 = v78 + 275;
              v82 = v78 + 160;
              v80 = *(void *)(v78 + 160);
              v81 = *(void *)(v82 + 8);
              *(_DWORD *)addrinfo buf = 136446978;
              *(void *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v79;
              *(_WORD *)&buf[22] = 2048;
              *(void *)v158 = v81;
              *(_WORD *)&v158[8] = 2048;
              *(void *)&v158[10] = v80;
              _os_log_impl( &dword_181A5C000,  v77,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s input nw_ws_parse_state_payload, itr=%zu, len=%zu",  buf,  0x2Au);
            }
          }
        }
      }

      else
      {
        metadata = nw_ws_create_metadata(v50);
        nw_ws_metadata_set_negotiated_permessage_deflate( metadata,  (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 273LL) >> 6) & 1);
        nw_ws_metadata_set_permessage_deflate(metadata, 0);
        if (*((_BYTE *)v22 + 1537)) {
          goto LABEL_114;
        }
      }

      *(void *)type = 0LL;
      v148 = type;
      v149 = 0x2020000000LL;
      LOBYTE(v150) = 0;
      id v53 = *(void *)(a1 + 40);
      v54 = *(void *)(v53 + 8);
      os_log_type_t v55 = *(void *)(v54 + 160);
      os_log_type_t v56 = *(void *)(v54 + 168);
      while (1)
      {
        BOOL v57 = *(void **)(a1 + 32);
        v137[0] = v23;
        v137[1] = 3221225472LL;
        v137[2] = __nw_protocol_copy_ws_definition_block_invoke_20;
        v137[3] = &unk_189BB65B8;
        v140 = v53;
        v141 = type;
        os_log_type_t v58 = v57;
        v138 = v58;
        v59 = metadata;
        v139 = v59;
        char v60 = v58;
        os_log_type_t v61 = v137;
        objc_super v62 = v61;
        v63 = v55 - v56;
        if (v63)
        {
          *(void *)addrinfo buf = v23;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = ___ZL17nw_ws_parse_inputPU23objcproto12OS_nw_framer8NSObjectP13nw_ws_state_tmmPhU13block_pointerFmS4_mbbE_block_invoke;
          *(void *)v158 = &unk_189BB6658;
          v159 = v54 + 48;
          __int16 v65 = (nw_framer *)v60;
          *(void *)&v158[8] = v65;
          *(void *)&v158[16] = v62;
          v66 = nw_framer_parse_input(v65, 1uLL, v63, 0LL, buf);
        }

        else
        {
          v64 = (*(_WORD *)(v54 + 273) & 8) != 0 && *(void *)(v54 + 168) == *(void *)(v54 + 160);
          v66 = 1;
          __nw_protocol_copy_ws_definition_block_invoke_20((uint64_t)v61, 0LL, 0LL, 1LL, v64);
        }

        __int16 v67 = !*((_BYTE *)v148 + 24) && v66;
        id v53 = *(void *)(a1 + 40);
        v54 = *(void *)(v53 + 8);
        if (!v67) {
          break;
        }
        os_log_type_t v55 = *(void *)(v54 + 160);
        os_log_type_t v56 = *(void *)(v54 + 168);
        if (v56 >= v55) {
          goto LABEL_99;
        }
      }

      if (*((_BYTE *)v148 + 24))
      {
        nw_ws_write_header(v54 + 48, *(void **)(a1 + 32), 8, 0x3EAu, 0LL, 0, 1);
        nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
        v100 = 0xFFFFFFFFLL;
LABEL_141:
        v136 = v100;
        _Block_object_dispose(type, 8);

        goto LABEL_144;
      }

      if (*(void *)(v54 + 168) < *(void *)(v54 + 160))
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v127 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
          {
            v128 = *(void *)(*(void *)(a1 + 40) + 8LL);
            v129 = v128 + 275;
            v130 = *(void *)(v128 + 160) - *(void *)(v128 + 168);
            *(_DWORD *)addrinfo buf = 136446722;
            *(void *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v129;
            *(_WORD *)&buf[22] = 2048;
            *(void *)v158 = v130;
            _os_log_impl( &dword_181A5C000,  v127,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s input nw_ws_parse_state_payload is asking for %zu bytes",  buf,  0x20u);
          }

          v54 = *(void *)(*(void *)(a1 + 40) + 8LL);
        }

        v100 = *(void *)(v54 + 160) - *(void *)(v54 + 168);
        goto LABEL_141;
      }

          v3 = 4;
          goto LABEL_24;
        }
      }

      else if (gLogDatapath)
      {
        __nwlog_obj();
        v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_71;
        }
        size_t v14 = *(void *)(a1 + 32);
        unint64_t v15 = *(void *)(v4 + 16);
        v16 = *(os_log_s **)(a1 + 72);
        *(_DWORD *)addrinfo buf = 136447234;
        char v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
        os_log_type_t v61 = 2112;
        objc_super v62 = v14;
        v63 = 2048;
        v64 = v4;
        __int16 v65 = 2080;
        v66 = v15;
        __int16 v67 = 2080;
        v68 = v16;
        os_log_type_t v17 = v7;
        BOOL v18 = "%{public}s %@ instance %p (%s) not eligible for joining by %s, identifier doesn't match";
        v19 = 52;
LABEL_70:
        _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_DEBUG, v18, buf, v19);
        goto LABEL_71;
      }
    }

    else if (gLogDatapath)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_71;
      }
      os_log_type_t v48 = *(void *)(a1 + 32);
      v49 = v2[2];
      os_log_type_t v50 = *(void *)(a1 + 72);
      *(_DWORD *)addrinfo buf = 136446978;
      char v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
      os_log_type_t v61 = 2112;
      objc_super v62 = v48;
      v63 = 2048;
      v64 = v49;
      __int16 v65 = 2080;
      v66 = v50;
      os_log_type_t v17 = v7;
      BOOL v18 = "%{public}s %@ instance %p of %s not eligible, missing protocol handle";
LABEL_69:
      v19 = 42;
      goto LABEL_70;
    }

    v3 = 4;
  }

  while (v3 == 4);
}

      if (!v17)
      {
LABEL_15:

        return;
      }

    goto LABEL_72;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  v37 = "nw_framer_protocol_disconnected";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (__nwlog_fault(v11, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v34)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      BOOL v23 = os_log_type_enabled(v12, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v37 = "nw_framer_protocol_disconnected";
          os_log_type_t v38 = 2082;
          v39 = v21;
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
        goto LABEL_64;
      }

      if (v23)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_181A5C000, v12, v22, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "nw_framer_protocol_disconnected";
        _os_log_impl( &dword_181A5C000,  v12,  v31,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

        goto LABEL_72;
      }

      if (!v44)
      {
        __nwlog_obj();
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v41 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl( &dword_181A5C000,  v27,  v41,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = type;
      os_log_type_t v38 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl( &dword_181A5C000,  v27,  v37,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      if (v38)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v47 = "nw_framer_protocol_get_input_frames";
        os_log_type_t v48 = 2082;
        log_str = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v27,  v37,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      id v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      v47 = "nw_framer_protocol_get_input_frames";
      v26 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null framer", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (!v44)
      {
        __nwlog_obj();
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl( &dword_181A5C000,  v27,  v40,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      os_log_type_t v36 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_181A5C000, v27, v35, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (v36)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v47 = "nw_framer_protocol_get_input_frames";
        os_log_type_t v48 = 2082;
        log_str = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v27,  v35,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_72;
  }

  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  v47 = "nw_framer_protocol_get_input_frames";
  v22 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (__nwlog_fault(v22, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v47 = "nw_framer_protocol_get_input_frames";
        _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v44)
    {
      v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v32 = type;
      os_log_type_t v33 = os_log_type_enabled(v23, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v47 = "nw_framer_protocol_get_input_frames";
          os_log_type_t v48 = 2082;
          log_str = v31;
          _os_log_impl( &dword_181A5C000,  v23,  v32,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v31);
        goto LABEL_63;
      }

      if (v33)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v47 = "nw_framer_protocol_get_input_frames";
        _os_log_impl(&dword_181A5C000, v23, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v47 = "nw_framer_protocol_get_input_frames";
        _os_log_impl( &dword_181A5C000,  v23,  v39,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v42) {
LABEL_72:
  }
    free(v42);
LABEL_73:
  v10 = 0LL;
LABEL_74:

LABEL_75:
}

        free(v24);
        goto LABEL_72;
      }

      if (v33)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_181A5C000, v25, v32, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl( &dword_181A5C000,  v25,  v37,  "%{public}s called with null group, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_72;
  }

  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null allocate_function", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v33)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v30,  "%{public}s called with null allocate_function, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null allocate_function, no backtrace",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
      v37 = 2082;
      os_log_type_t v38 = v22;
      _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null allocate_function, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_46;
  }

  if (!a3)
  {
    __nwlog_obj();
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null deallocate_function", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v33)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v31,  "%{public}s called with null deallocate_function, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v25 = type;
    v26 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null deallocate_function, no backtrace",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (v26)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
      v37 = 2082;
      os_log_type_t v38 = v22;
      _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null deallocate_function, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_46;
  }

  if (!a4)
  {
    __nwlog_obj();
    os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v18 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null replace_function", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v33)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v32,  "%{public}s called with null replace_function, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v28)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null replace_function, no backtrace",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (v28)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v36 = "nw_protocol_definition_set_flow_state_allocator";
      v37 = 2082;
      os_log_type_t v38 = v22;
      _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null replace_function, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_72;
  }

  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null allocate_function", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v33)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v30,  "%{public}s called with null allocate_function, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null allocate_function, no backtrace",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
      v37 = 2082;
      os_log_type_t v38 = v22;
      _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null allocate_function, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_46;
  }

  if (!a3)
  {
    __nwlog_obj();
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null copy_function", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v33)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v31,  "%{public}s called with null copy_function, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v25 = type;
    v26 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
        _os_log_impl(&dword_181A5C000, v11, v25, "%{public}s called with null copy_function, no backtrace", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (v26)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
      v37 = 2082;
      os_log_type_t v38 = v22;
      _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null copy_function, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_46;
  }

  if (!a4)
  {
    __nwlog_obj();
    os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v18 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null deallocate_function", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v33)
    {
      __nwlog_obj();
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v32,  "%{public}s called with null deallocate_function, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v28)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
        _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null deallocate_function, no backtrace",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (v28)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v36 = "nw_protocol_definition_set_options_allocator";
      v37 = 2082;
      os_log_type_t v38 = v22;
      _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null deallocate_function, dumping backtrace:%{public}s",  buf,  0x16u);
    }

        goto LABEL_72;
      }

      if (!v44)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl( &dword_181A5C000,  v33,  v43,  "%{public}s called with null handle, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (v41)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_181A5C000, v33, v40, "%{public}s called with null handle, no backtrace", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (v41)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v47 = "nw_protocol_implementation_create";
        os_log_type_t v48 = 2082;
        v49 = v37;
        _os_log_impl( &dword_181A5C000,  v33,  v40,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_59;
    }
  }

  else
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v47 = "nw_protocol_implementation_create";
    v32 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v32, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s called with null identifier", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (!v44)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl( &dword_181A5C000,  v33,  v42,  "%{public}s called with null identifier, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type;
      v39 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (v39)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_181A5C000, v33, v38, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (v39)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v47 = "nw_protocol_implementation_create";
        os_log_type_t v48 = 2082;
        v49 = v37;
        _os_log_impl( &dword_181A5C000,  v33,  v38,  "%{public}s called with null identifier, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v12) {
    free(v12);
  }
  return 0LL;
}

        goto LABEL_72;
      }

      v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = v35;
      os_log_type_t v29 = os_log_type_enabled(v25, v35);
      if (!v28)
      {
        if (v29)
        {
          *(_DWORD *)BOOL v41 = 136446210;
          v42 = "nw_authentication_credential_cache_entry_set_type";
          v27 = "%{public}s called with null cache_entry, no backtrace";
          goto LABEL_70;
        }

        goto LABEL_71;
      }

      if (v29)
      {
        *(_DWORD *)BOOL v41 = 136446466;
        v42 = "nw_authentication_credential_cache_entry_set_type";
        v43 = 2082;
        v44 = v28;
        _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null cache_entry, dumping backtrace:%{public}s",  v41,  0x16u);
      }

      free(v28);
    }

    free(v19);
    goto LABEL_72;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)addrinfo buf = 136446210;
  objc_super v62 = "nw_parameters_create_secure_tcp";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v59 = 0;
  if (__nwlog_fault(v12, &type, &v59))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (os_log_s *)(id)gLogObj;
      size_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        objc_super v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }

    else if (v59)
    {
      unint64_t v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (os_log_s *)(id)gLogObj;
      v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v13, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          objc_super v62 = "nw_parameters_create_secure_tcp";
          v63 = 2082;
          v64 = v15;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        if (!v12) {
          goto LABEL_73;
        }
        goto LABEL_60;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        objc_super v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (os_log_s *)(id)gLogObj;
      v30 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        objc_super v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl( &dword_181A5C000,  v13,  v30,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v12) {
LABEL_60:
  }
    free(v12);
LABEL_73:
  v10 = 0LL;
LABEL_81:

LABEL_82:
  return v10;
}

    goto LABEL_72;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v46 = "nw_parameters_prohibit_interface";
    size_t v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v43)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v15, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v46 = "nw_parameters_prohibit_interface";
          v47 = 2082;
          os_log_type_t v48 = (uint64_t)v26;
          _os_log_impl( &dword_181A5C000,  v15,  v27,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v26);
        if (!v14) {
          goto LABEL_12;
        }
        goto LABEL_73;
      }

      if (v28)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_181A5C000, v15, v27, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl( &dword_181A5C000,  v15,  v37,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_71;
  }

  id v6 = nw_interface_copy_dictionary(v4);
  if (!v6)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v46 = "nw_parameters_prohibit_interface";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null interface_dictionary", buf, 0xCu);
      }
    }

    else if (v43)
    {
      os_log_type_t v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v21, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v46 = "nw_parameters_prohibit_interface";
          v47 = 2082;
          os_log_type_t v48 = (uint64_t)v29;
          _os_log_impl( &dword_181A5C000,  v21,  v30,  "%{public}s called with null interface_dictionary, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v29);
LABEL_83:
        if (!v20) {
          goto LABEL_11;
        }
LABEL_84:
        free(v20);
        goto LABEL_11;
      }

      if (v31)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl( &dword_181A5C000,  v21,  v30,  "%{public}s called with null interface_dictionary, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl( &dword_181A5C000,  v21,  v38,  "%{public}s called with null interface_dictionary, backtrace limit exceeded",  buf,  0xCu);
      }
    }

      if (v31) {
        free(v31);
      }
LABEL_73:
      v20 = 0LL;
      goto LABEL_74;
    }

    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v55 = "nw_protocol_parameters_iterate_stack";
    id v25 = (char *)_os_log_send_and_compose_impl();

    id v53 = OS_LOG_TYPE_ERROR;
    os_log_type_t v52 = 0;
    if (__nwlog_fault(v25, &v53, &v52))
    {
      if (v53 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = v53;
        if (os_log_type_enabled(v26, v53))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_181A5C000, v26, v29, "%{public}s called with null iterator", buf, 0xCu);
        }

        goto LABEL_72;
      }

      if (!v51)
      {
        __nwlog_obj();
        v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl( &dword_181A5C000,  v26,  v43,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = type;
      os_log_type_t v38 = os_log_type_enabled(v26, type);
      if (!v34)
      {
        if (v38)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl(&dword_181A5C000, v26, v37, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (v38)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&buf[4] = "nw_parameters_copy_protocol_options_for_definition";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v34;
        _os_log_impl( &dword_181A5C000,  v26,  v37,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_51;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_parameters_copy_protocol_options_for_definition";
    id v25 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    BOOL v51 = 0;
    if (__nwlog_fault(v25, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (!v51)
      {
        __nwlog_obj();
        v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl( &dword_181A5C000,  v26,  v42,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      os_log_type_t v36 = os_log_type_enabled(v26, type);
      if (!v34)
      {
        if (v36)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl(&dword_181A5C000, v26, v35, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (v36)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&buf[4] = "nw_parameters_copy_protocol_options_for_definition";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v34;
        _os_log_impl( &dword_181A5C000,  v26,  v35,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v30) {
    free(v30);
  }
  unint64_t v15 = 0LL;
LABEL_25:

  return v15;
}

      if (v40) {
        free(v40);
      }
      v28 = 0LL;
      goto LABEL_14;
    }

    __nwlog_obj();
    os_log_type_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_parameters_copy_with_protocol_instances";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v55 = 0;
    if (__nwlog_fault(v36, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_parameters_copy_with_protocol_instances";
          _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s called with null new_stack", buf, 0xCu);
        }
      }

      else if (v55)
      {
        v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v47 = type;
        os_log_type_t v48 = os_log_type_enabled(v37, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&buf[4] = "nw_parameters_copy_with_protocol_instances";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v46;
            _os_log_impl( &dword_181A5C000,  v37,  v47,  "%{public}s called with null new_stack, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v46);
          goto LABEL_65;
        }

        if (v48)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_parameters_copy_with_protocol_instances";
          _os_log_impl(&dword_181A5C000, v37, v47, "%{public}s called with null new_stack, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v53 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_parameters_copy_with_protocol_instances";
          _os_log_impl( &dword_181A5C000,  v37,  v53,  "%{public}s called with null new_stack, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      free(v30);
      if (!v17) {
        return;
      }
LABEL_133:
      free(v17);
      return;
    }
  }

  while (1)
  {
    identifier = v9->identifier;
    if (nw_protocol_http_messaging_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_76181);
    }
    if (nw_protocols_are_equal(identifier, nw_protocol_http_messaging_identifier::protocol_identifier)) {
      break;
    }
    v11 = v9->identifier;
    if (nw_protocol_http1_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
    }
    if (nw_protocols_are_equal(v11, &nw_protocol_http1_identifier::http1_protocol_identifier)) {
      break;
    }
    v12 = v9->identifier;
    if (nw_protocol_http2_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_http2_identifier::onceToken, &__block_literal_global_83570);
    }
    if (nw_protocols_are_equal(v12, &nw_protocol_http2_identifier::http2_protocol_identifier)) {
      break;
    }
    v13 = v9->identifier;
    if (nw_protocol_http3_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
    }
    if (nw_protocols_are_equal(v13, &nw_protocol_http3_identifier::http3_protocol_identifier)) {
      break;
    }
    size_t v14 = v9->identifier;
    if (nw_protocol_oblivious_http_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28577);
    }
    if (nw_protocols_are_equal(v14, &nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier)) {
      break;
    }
    unint64_t v15 = v9->identifier;
    if (nw_protocol_oblivious_http_contexts_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28583);
    }
    if (nw_protocols_are_equal(v15, &nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier)) {
      break;
    }
    os_log_type_t v9 = v9->output_handler;
    if (!v9) {
      goto LABEL_58;
    }
  }

  v16 = v9->identifier;
  if (nw_protocol_oblivious_http_contexts_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28583);
  }
  if (nw_protocols_are_equal(v16, &nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)addrinfo buf = 136446210;
    v77 = "nw_http_client_bottom_get_out_of_the_way";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = (os_log_s *)gLogObj;
      v19 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v77 = "nw_http_client_bottom_get_out_of_the_way";
      v20 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom";
      goto LABEL_131;
    }

    if (!v74)
    {
      BOOL v18 = (os_log_s *)__nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v77 = "nw_http_client_bottom_get_out_of_the_way";
      v20 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom, backtrace limit exceeded";
      goto LABEL_131;
    }

    v30 = (char *)__nw_create_backtrace_string();
    BOOL v18 = (os_log_s *)__nwlog_obj();
    v19 = type;
    v31 = os_log_type_enabled(v18, type);
    if (!v30)
    {
      if (!v31) {
        goto LABEL_132;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v77 = "nw_http_client_bottom_get_out_of_the_way";
      v20 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom, no backtrace";
      goto LABEL_131;
    }

    if (v31)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v77 = "nw_http_client_bottom_get_out_of_the_way";
      v78 = 2082;
      v79 = v30;
      v32 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom, dumping backtrace:%{public}s";
LABEL_70:
      _os_log_impl(&dword_181A5C000, v18, v19, v32, buf, 0x16u);
      goto LABEL_71;
    }

    goto LABEL_71;
  }

  v21 = nw_protocol_copy_info((uint64_t)v9, 253);
  if (v21) {
    os_log_type_t v9 = *(nw_protocol **)(v21 + 24);
  }
  v22 = *((void *)handle + 6);
  nw_protocol_set_input_handler((uint64_t)handle, 0LL);
  nw_protocol_set_output_handler(v22, 0LL);
  nw_protocol_replace_input_handler(*((void *)handle + 4), (uint64_t)handle, v22);
  nw_protocol_set_output_handler((uint64_t)handle, 0LL);
  nw_protocol_connect(*(void *)(v22 + 32), v22);
  parameters = (void *)nw_protocol_get_parameters((uint64_t)v9);
  BOOL v24 = nw_parameters_copy_effective_proxy_config(parameters);
  if (!v24) {
    goto LABEL_55;
  }
  id v25 = v24;
  v26 = v25;
  if (v25[38] != 1)
  {

    if ((handle[294] & 2) != 0) {
      goto LABEL_112;
    }
    goto LABEL_74;
  }

  v27 = v25[39];

  if (v27 == 2001)
  {
    v28 = handle[168];
    if ((v28 & 1) != 0)
    {
      os_log_type_t v29 = (void *)*((void *)handle + 20);
      if (v29)
      {
        os_release(v29);
        v28 = handle[168];
      }
    }

    *((void *)handle + 20) = v26;
    handle[168] = v28 | 1;
LABEL_55:
    v26 = 0LL;
  }

  if ((handle[294] & 2) != 0) {
    goto LABEL_112;
  }
LABEL_74:
  if (v9->identifier->mapping == 2)
  {
    *((void *)handle + 17) = v9;
    nw_protocol_add_listen_handler((uint64_t)v9, (uint64_t)(handle + 64));
    v34 = "nw_http_client_bottom_get_out_of_the_way";
    while (1)
    {
      os_log_type_t v36 = *((void *)handle + 23);
      os_log_type_t v35 = *((void *)handle + 24);
      v37 = v36;
      if (v36 != v35)
      {
        while (*(_DWORD *)(v37 + 8) == 2)
        {
          v37 += 16LL;
          if (v37 == v35) {
            goto LABEL_121;
          }
        }
      }

      if (v37 == v35) {
        goto LABEL_121;
      }
      os_log_type_t v38 = *(void **)v37;
      v39 = *(_DWORD *)(v37 + 8);
      os_log_type_t v40 = v37 + 16;
      if (v37 + 16 != v35)
      {
        BOOL v41 = v35 - v37 - 32;
        if (v41 >= 0x10)
        {
          v42 = (v37 - v36) >> 4;
          v43 = (v41 >> 4) + 1;
          v44 = 16 * (v43 & 0x1FFFFFFFFFFFFFFELL);
          v37 += v44;
          os_log_type_t v45 = v36 + 16 * v42 + 24;
          v46 = v43 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v47 = *(void *)(v45 + 8);
            *(void *)(v45 - 24) = *(void *)(v45 - 8);
            *(void *)(v45 - 8) = v47;
            LODWORD(v47) = *(_DWORD *)(v45 + 16);
            *(_DWORD *)(v45 - 16) = *(_DWORD *)v45;
            *(_DWORD *)os_log_type_t v45 = v47;
            v45 += 32LL;
            v46 -= 2LL;
          }

          while (v46);
          if (v43 == (v43 & 0x1FFFFFFFFFFFFFFELL)) {
            goto LABEL_88;
          }
          v40 += v44;
        }

        do
        {
          *(void *)v37 = *(void *)v40;
          *(_DWORD *)(v37 + 8) = *(_DWORD *)(v40 + 8);
          v37 += 16LL;
          v40 += 16LL;
        }

        while (v40 != v35);
      }

    goto LABEL_72;
  }

  v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    else {
      os_log_type_t v17 = off_189BBBBC0[mode];
    }
    *(_DWORD *)applier = 136446722;
    *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    *(_WORD *)&applier[12] = 2082;
    *(void *)&applier[14] = v17;
    *(_WORD *)&applier[22] = 2082;
    *(void *)v77 = "flow";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (__nwlog_fault(v18, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (os_log_s *)(id)gLogObj;
        v20 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          else {
            v21 = off_189BBBBC0[mode];
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v21;
          *(_WORD *)&applier[22] = 2082;
          *(void *)v77 = "flow";
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  applier,  0x20u);
        }
      }

      else if ((_BYTE)v68)
      {
        v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (os_log_s *)(id)gLogObj;
        BOOL v23 = type[0];
        BOOL v24 = os_log_type_enabled(v19, type[0]);
        if (v22)
        {
          if (v24)
          {
            else {
              id v25 = off_189BBBBC0[mode];
            }
            *(_DWORD *)applier = 136446978;
            *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v25;
            *(_WORD *)&applier[22] = 2082;
            *(void *)v77 = "flow";
            *(_WORD *)&v77[8] = 2082;
            *(void *)&v77[10] = v22;
            _os_log_impl( &dword_181A5C000,  v19,  v23,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  applier,  0x2Au);
          }

          free(v22);
          if (!v18) {
            goto LABEL_74;
          }
          goto LABEL_73;
        }

        if (v24)
        {
          else {
            os_log_type_t v36 = off_189BBBBC0[mode];
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v36;
          *(_WORD *)&applier[22] = 2082;
          *(void *)v77 = "flow";
          _os_log_impl( &dword_181A5C000,  v19,  v23,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  applier,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (os_log_s *)(id)gLogObj;
        v28 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          else {
            os_log_type_t v29 = off_189BBBBC0[mode];
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v29;
          *(_WORD *)&applier[22] = 2082;
          *(void *)v77 = "flow";
          _os_log_impl( &dword_181A5C000,  v19,  v28,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  applier,  0x20u);
        }
      }

      goto LABEL_71;
    }

  free(backtrace_string);
  if (v6) {
LABEL_85:
  }
    free(v6);
}

        free(v50);
        goto LABEL_72;
      }
    }

    if (!v18)
    {
      os_log_type_t v40 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 9);
      BOOL v41 = *(void **)(*(void *)&v118[8] + 40LL);
      *(void *)(*(void *)&v118[8] + 40LL) = v40;

      size_t v14 = v107;
    }

    v42 = *((_DWORD *)v12 + 48);
    v108[0] = v16;
    v108[1] = 3221225472LL;
    v108[2] = __nw_connection_send_file_at_path_with_progress_block_invoke_39;
    v108[3] = &unk_189BBF570;
    v109 = v14;
    v110 = v118;
    nw_connection_async_client_if_needed_with_override(v12, 0LL, v42, v108);

    goto LABEL_96;
  }

  __nwlog_obj();
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v118 = 136446210;
  *(void *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
  uint64_t v70 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  LOBYTE(v112) = 0;
  if (__nwlog_fault(v70, buf, &v112))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v74 = buf[0];
      if (os_log_type_enabled(v71, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v118 = 136446210;
        *(void *)&v118[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_181A5C000, v71, v74, "%{public}s called with null handler", v118, 0xCu);
      }

    if (!v8)
    {
LABEL_73:
      frame_cache_remove_from_cache(*(void *)(a1 + 48), (void *)a2);
      return 1LL;
    }

        free(v44);
        goto LABEL_83;
      }

      if (!v51) {
        goto LABEL_83;
      }
      v59 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)addrinfo buf = 136446722;
      v76 = "frame_cache_purge_if_necessary";
      v77 = 1024;
      *(_DWORD *)v78 = v28;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v59;
      v39 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v41 = gLogObj;
      v42 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_83;
      }
      v54 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)addrinfo buf = 136446722;
      v76 = "frame_cache_purge_if_necessary";
      v77 = 1024;
      *(_DWORD *)v78 = v28;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v54;
      v39 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, backtrace limit exceeded";
    }

    os_log_type_t v56 = (os_log_s *)v41;
    BOOL v57 = v42;
    os_log_type_t v58 = 24;
    goto LABEL_82;
  }

  __nwlog_obj();
  *(_DWORD *)addrinfo buf = 136446210;
  v76 = "nw_frame_cache_return_frame";
  char v60 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v73 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v61 = (os_log_s *)__nwlog_obj();
    objc_super v62 = type;
    if (!os_log_type_enabled(v61, type)) {
      goto LABEL_125;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v76 = "nw_frame_cache_return_frame";
    v63 = "%{public}s called with null frame";
    goto LABEL_124;
  }

  if (!v73)
  {
    os_log_type_t v61 = (os_log_s *)__nwlog_obj();
    objc_super v62 = type;
    if (!os_log_type_enabled(v61, type)) {
      goto LABEL_125;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v76 = "nw_frame_cache_return_frame";
    v63 = "%{public}s called with null frame, backtrace limit exceeded";
    goto LABEL_124;
  }

  uint64_t v70 = (char *)__nw_create_backtrace_string();
  os_log_type_t v61 = (os_log_s *)__nwlog_obj();
  objc_super v62 = type;
  v71 = os_log_type_enabled(v61, type);
  if (!v70)
  {
    if (!v71) {
      goto LABEL_125;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v76 = "nw_frame_cache_return_frame";
    v63 = "%{public}s called with null frame, no backtrace";
    goto LABEL_124;
  }

  if (v71)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    v76 = "nw_frame_cache_return_frame";
    v77 = 2082;
    *(void *)v78 = v70;
    _os_log_impl( &dword_181A5C000,  v61,  v62,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v70);
  if (v60) {
    goto LABEL_126;
  }
}

        v11 = 1LL;
LABEL_99:

        goto LABEL_100;
      }
    }

    else
    {
      *((_BYTE *)v1 + 268) &= ~2u;
      v30 = v1->inactive_agent_uuids;
      v1->inactive_agent_uuids = 0LL;

      v31 = v2->inactive_agent_dictionaries;
      v2->inactive_agent_dictionaries = 0LL;

      v32 = v2->triggered_agent_uuids;
      v2->triggered_agent_uuids = 0LL;

      os_log_type_t v33 = v2;
      v34 = *((_BYTE *)v2 + 268);

      if ((v34 & 0x20) != 0)
      {
        v11 = 1LL;
        goto LABEL_102;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v5 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      v132 = v5;
      os_log_type_t v35 = v33;

      os_log_type_t v36 = v35;
      v37 = *((_BYTE *)v2 + 268);

      if ((v37 & 1) != 0) {
        os_log_type_t v38 = "dry-run ";
      }
      else {
        os_log_type_t v38 = "";
      }
      v39 = nw_endpoint_handler_copy_endpoint(v36);
      os_log_type_t v40 = nw_endpoint_get_logging_description(v39);
      BOOL v41 = v35 + 168;
      v42 = v36;
      v43 = v42;
      v44 = v42[30];
      else {
        os_log_type_t v45 = off_189BBBBF0[v44];
      }

      v49 = v43;
      os_log_type_t v50 = v49;
      BOOL v51 = "path";
      switch(*((_DWORD *)v49 + 29))
      {
        case 0:
          break;
        case 1:
          BOOL v51 = "resolver";
          break;
        case 2:
          BOOL v51 = nw_endpoint_flow_mode_string(v49[31]);
          break;
        case 3:
          BOOL v51 = "proxy";
          break;
        case 4:
          BOOL v51 = "fallback";
          break;
        case 5:
          BOOL v51 = "transform";
          break;
        default:
          BOOL v51 = "unknown-mode";
          break;
      }

      v90 = v50;
      os_unfair_lock_lock((os_unfair_lock_t)v90 + 28);
      v91 = v90[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v90 + 28);

      *(_DWORD *)addrinfo buf = 136447746;
      v140 = "nw_endpoint_handler_triggered_agents_updated";
      v141 = 2082;
      v142 = v41;
      v143 = 2082;
      v144 = v38;
      v145 = 2082;
      v146 = v40;
      v147 = 2082;
      v148 = v45;
      v149 = 2082;
      v150 = v51;
      v151 = 2114;
      v152 = v91;
      _os_log_impl( &dword_181A5C000,  v132,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no inactive agent information",  buf,  0x48u);
    }

    v11 = 1LL;
LABEL_100:
    v5 = v132;
    goto LABEL_101;
  }

  v11 = 0LL;
LABEL_102:

  return v11;
}

      free(v17);
      goto LABEL_72;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v14 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    v49 = "nw_pac_resolver_start";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (os_log_s *)(id)gLogObj;
      unint64_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v49 = "nw_pac_resolver_start";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s CFNetworkExecuteProxyAutoConfigurationURL failed",  buf,  0xCu);
      }

    if (v32) {
      free(v32);
    }
    os_log_type_t v40 = *(dispatch_source_s **)(v28 + 8);
    if (v40)
    {
      dispatch_source_cancel(v40);
      if (!*(_BYTE *)(v28 + 20)) {
        dispatch_resume(*(dispatch_object_t *)(v28 + 8));
      }
    }

    else
    {
      BOOL v41 = *(_DWORD *)(v28 + 16);
      if (v41 != -1) {
        close(v41);
      }
    }

    free((void *)v28);
    goto LABEL_79;
  }

  id v6 = string;
  *(void *)fds = 0LL;
  cnt = 0LL;
  v7 = launch_activate_socket(string, (int **)fds, &cnt);
  if (v7 || !*(void *)fds || !cnt) {
    goto LABEL_35;
  }
  v8 = 0LL;
  os_log_type_t v9 = 2;
  do
  {
    BOOL v57 = 4;
    if (getsockopt(*(_DWORD *)(*(void *)fds + 4 * v8), 0xFFFF, 4104, &v60, &v57)) {
      v10 = 0;
    }
    else {
      v10 = v60 == 1;
    }
    if (!v10)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        objc_super v62 = "tcp_listener_setup_sockets_launchd";
        v63 = 2082;
        v64 = (uint64_t)v6;
        __int16 v65 = 2048;
        v66 = v8;
        _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s Sockets:%{public}s[%zu] is not SOCK_STREAM - not supported",  buf,  0x20u);
      }

    v19 = v24;
    v20 = v25;
    v21 = 12;
    goto LABEL_26;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v24 = (os_log_s *)__nwlog_obj();
      id v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      v12 = "%{public}s called with null http_connect";
      goto LABEL_71;
    }

    if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v24 = (os_log_s *)__nwlog_obj();
      id v25 = type;
      os_log_type_t v29 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (!v29) {
          goto LABEL_19;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
        v34 = 2082;
        os_log_type_t v35 = backtrace_string;
        unint64_t v15 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
LABEL_58:
        v16 = v24;
        os_log_type_t v17 = v25;
        BOOL v18 = 22;
        goto LABEL_18;
      }

      if (!v29) {
        goto LABEL_27;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      v12 = "%{public}s called with null http_connect, no backtrace";
    }

    else
    {
      BOOL v24 = (os_log_s *)__nwlog_obj();
      id v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      v12 = "%{public}s called with null http_connect, backtrace limit exceeded";
    }

    goto LABEL_71;
  }

  if (*((_DWORD *)handle + 70) != 2)
  {
    if ((handle[184] & 0x80) != 0) {
      return 0LL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (char *)(handle + 142);
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
    v34 = 2082;
    os_log_type_t v35 = (char *)(handle + 142);
    os_log_type_t v36 = 2080;
    v37 = " ";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (os_log_s *)gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      v34 = 2082;
      os_log_type_t v35 = v8;
      os_log_type_t v36 = 2080;
      v37 = " ";
      v12 = "%{public}s %{public}s%sCannot finalize output frames when not connected";
      goto LABEL_25;
    }

    if (!v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (os_log_s *)gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      v34 = 2082;
      os_log_type_t v35 = v8;
      os_log_type_t v36 = 2080;
      v37 = " ";
      v12 = "%{public}s %{public}s%sCannot finalize output frames when not connected, backtrace limit exceeded";
      goto LABEL_25;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (os_log_s *)gLogObj;
    v11 = type;
    size_t v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v14) {
        goto LABEL_27;
      }
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      v34 = 2082;
      os_log_type_t v35 = v8;
      os_log_type_t v36 = 2080;
      v37 = " ";
      v12 = "%{public}s %{public}s%sCannot finalize output frames when not connected, no backtrace";
      goto LABEL_25;
    }

    if (v14)
    {
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      v34 = 2082;
      os_log_type_t v35 = v8;
      os_log_type_t v36 = 2080;
      v37 = " ";
      os_log_type_t v38 = 2082;
      v39 = backtrace_string;
      unint64_t v15 = "%{public}s %{public}s%sCannot finalize output frames when not connected, dumping backtrace:%{public}s";
      v16 = v10;
      os_log_type_t v17 = v11;
      BOOL v18 = 42;
LABEL_18:
      _os_log_impl(&dword_181A5C000, v16, v17, v15, buf, v18);
    }

        ++*(_DWORD *)(a1 + 272);
        size_t v4 = *(const void **)(a1 + 208);
        if (!v4)
        {
LABEL_8:
          if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v5 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)addrinfo buf = 136446722;
              os_log_type_t v40 = "nw_http_connect_send_auth_request";
              BOOL v41 = 2082;
              v42 = (char *)(a1 + 284);
              v43 = 2080;
              v44 = " ";
              _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%shttp connect calling out for proxy authorization",  buf,  0x20u);
            }
          }

          nw_http_connect_start_async(a1);
          _CFHTTPAuthenticationApplyProxyAuthorizationToRequest();
          if (Mutable) {
            CFRelease(Mutable);
          }
          _Block_object_dispose(v34, 8);
          return;
        }

  PBDataWriterWriteInt32Field();
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_16:
    if ((has & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_73;
  }

    if (v20) {
      free(v20);
    }
    v7 = 0LL;
    goto LABEL_85;
  }

  if (!a3)
  {
    __nwlog_obj();
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v45 = "nw_proxy_config_copy_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_181A5C000, v17, v24, "%{public}s called with null proxy_protocol_level", buf, 0xCu);
      }

      goto LABEL_82;
    }

    if (!v42)
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v39,  "%{public}s called with null proxy_protocol_level, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_82;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = type;
    v34 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v33,  "%{public}s called with null proxy_protocol_level, no backtrace",  buf,  0xCu);
      }

      goto LABEL_82;
    }

    if (v34)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v45 = "nw_proxy_config_copy_protocol_stack";
      v46 = 2082;
      v47 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v17,  v33,  "%{public}s called with null proxy_protocol_level, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_55;
  }

  if (!*((void *)v5 + 1))
  {
LABEL_85:
    size_t v14 = 0LL;
    goto LABEL_86;
  }

  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
  }
  v8 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

  if (is_equal_unsafe)
  {
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
    }
    v10 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;

    v7 = v10;
  }

  identifier = nw_protocol_definition_get_identifier(v7);
  if (!identifier)
  {
    __nwlog_obj();
    id v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v45 = "nw_proxy_config_copy_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_181A5C000, v17, v26, "%{public}s called with null transport_identifier", buf, 0xCu);
      }

    os_log_type_t v29 = v7;
    v30 = v18;
    v31 = 12;
    goto LABEL_80;
  }

  size_t v4 = *(void *)(a1 + 40);
  if (!v4)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v35 = "nw_necp_append_tlv";
    id v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v18 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v35 = "nw_necp_append_tlv";
      v19 = "%{public}s called with null beyond";
      goto LABEL_71;
    }

    if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v18 = type;
      BOOL v24 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v24) {
          goto LABEL_16;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v35 = "nw_necp_append_tlv";
        os_log_type_t v36 = 2082;
        *(void *)v37 = backtrace_string;
        v13 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_48:
        size_t v14 = v7;
        unint64_t v15 = v18;
        v16 = 22;
LABEL_15:
        _os_log_impl(&dword_181A5C000, v14, v15, v13, buf, v16);
LABEL_16:

        free(backtrace_string);
        goto LABEL_17;
      }

      if (!v24) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v35 = "nw_necp_append_tlv";
      v19 = "%{public}s called with null beyond, no backtrace";
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v18 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v35 = "nw_necp_append_tlv";
      v19 = "%{public}s called with null beyond, backtrace limit exceeded";
    }

    goto LABEL_71;
  }

  if (v3 >= v4)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136447234;
    os_log_type_t v35 = "nw_necp_append_tlv";
    os_log_type_t v36 = 2048;
    *(void *)v37 = v3;
    *(_WORD *)&v37[8] = 2048;
    *(void *)os_log_type_t v38 = v4;
    *(_WORD *)&v38[8] = 1024;
    *(_DWORD *)v39 = 17;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = 16;
    id v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136447234;
      os_log_type_t v35 = "nw_necp_append_tlv";
      os_log_type_t v36 = 2048;
      *(void *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = v4;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)v39 = 17;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = 16;
      v19 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      v27 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v27) {
          goto LABEL_16;
        }
        *(_DWORD *)addrinfo buf = 136447490;
        os_log_type_t v35 = "nw_necp_append_tlv";
        os_log_type_t v36 = 2048;
        *(void *)v37 = v3;
        *(_WORD *)&v37[8] = 2048;
        *(void *)os_log_type_t v38 = v4;
        *(_WORD *)&v38[8] = 1024;
        *(_DWORD *)v39 = 17;
        *(_WORD *)&v39[4] = 1024;
        *(_DWORD *)&v39[6] = 16;
        *(_WORD *)os_log_type_t v40 = 2082;
        *(void *)&v40[2] = backtrace_string;
        v13 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        size_t v14 = v7;
        unint64_t v15 = v22;
        v16 = 54;
        goto LABEL_15;
      }

      if (!v27) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136447234;
      os_log_type_t v35 = "nw_necp_append_tlv";
      os_log_type_t v36 = 2048;
      *(void *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = v4;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)v39 = 17;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = 16;
      v19 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136447234;
      os_log_type_t v35 = "nw_necp_append_tlv";
      os_log_type_t v36 = 2048;
      *(void *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = v4;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)v39 = 17;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = 16;
      v19 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }

    os_log_type_t v29 = v7;
    v30 = v22;
    v31 = 44;
LABEL_80:
    _os_log_impl(&dword_181A5C000, v29, v30, v19, buf, v31);
    goto LABEL_81;
  }

  if (v4 - v3 <= 0x14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136447490;
    os_log_type_t v35 = "nw_necp_append_tlv";
    os_log_type_t v36 = 2048;
    *(void *)v37 = v3;
    *(_WORD *)&v37[8] = 2048;
    *(void *)os_log_type_t v38 = 21LL;
    *(_WORD *)&v38[8] = 2048;
    *(void *)v39 = v4;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)os_log_type_t v40 = 17;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 16;
    id v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (os_log_s *)(id)gLogObj;
      v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)addrinfo buf = 136447490;
      os_log_type_t v35 = "nw_necp_append_tlv";
      os_log_type_t v36 = 2048;
      *(void *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = 21LL;
      *(_WORD *)&v38[8] = 2048;
      *(void *)v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)os_log_type_t v40 = 17;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      os_log_type_t v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }

    if (!v32)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (os_log_s *)(id)gLogObj;
      v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)addrinfo buf = 136447490;
      os_log_type_t v35 = "nw_necp_append_tlv";
      os_log_type_t v36 = 2048;
      *(void *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = 21LL;
      *(_WORD *)&v38[8] = 2048;
      *(void *)v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)os_log_type_t v40 = 17;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      os_log_type_t v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (os_log_s *)(id)gLogObj;
    v8 = type;
    v12 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_26;
      }
      *(_DWORD *)addrinfo buf = 136447490;
      os_log_type_t v35 = "nw_necp_append_tlv";
      os_log_type_t v36 = 2048;
      *(void *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = 21LL;
      *(_WORD *)&v38[8] = 2048;
      *(void *)v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)os_log_type_t v40 = 17;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      os_log_type_t v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0x36u);
LABEL_26:

      if (!v6) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }

    if (!v12) {
      goto LABEL_16;
    }
    *(_DWORD *)addrinfo buf = 136447746;
    os_log_type_t v35 = "nw_necp_append_tlv";
    os_log_type_t v36 = 2048;
    *(void *)v37 = v3;
    *(_WORD *)&v37[8] = 2048;
    *(void *)os_log_type_t v38 = 21LL;
    *(_WORD *)&v38[8] = 2048;
    *(void *)v39 = v4;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)os_log_type_t v40 = 17;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 16;
    BOOL v41 = 2082;
    v42 = backtrace_string;
    v13 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    size_t v14 = v7;
    unint64_t v15 = v8;
    v16 = 64;
    goto LABEL_15;
  }

  *(_BYTE *)v3 = 17;
  *(_DWORD *)(v3 + 1) = 16;
  if (!a2)
  {
    __nwlog_obj();
    id v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v35 = "nw_necp_append_tlv";
    os_log_type_t v36 = 1024;
    *(_DWORD *)v37 = 17;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = 16;
    id v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v35 = "nw_necp_append_tlv";
        os_log_type_t v36 = 1024;
        *(_DWORD *)v37 = 17;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 16;
        v19 = "%{public}s type=%u length=%u but value is NULL";
LABEL_79:
        os_log_type_t v29 = v7;
        v30 = v26;
        v31 = 24;
        goto LABEL_80;
      }
    }

    else
    {
      if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v26 = type;
        v28 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (!v28) {
            goto LABEL_16;
          }
          *(_DWORD *)addrinfo buf = 136446978;
          os_log_type_t v35 = "nw_necp_append_tlv";
          os_log_type_t v36 = 1024;
          *(_DWORD *)v37 = 17;
          *(_WORD *)&v37[4] = 1024;
          *(_DWORD *)&v37[6] = 16;
          *(_WORD *)os_log_type_t v38 = 2082;
          *(void *)&v38[2] = backtrace_string;
          v13 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          size_t v14 = v7;
          unint64_t v15 = v26;
          v16 = 34;
          goto LABEL_15;
        }

        if (!v28) {
          goto LABEL_81;
        }
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v35 = "nw_necp_append_tlv";
        os_log_type_t v36 = 1024;
        *(_DWORD *)v37 = 17;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 16;
        v19 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_79;
      }

      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v35 = "nw_necp_append_tlv";
        os_log_type_t v36 = 1024;
        *(_DWORD *)v37 = 17;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 16;
        v19 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_79;
      }
    }

  if (v10) {
    free(v10);
  }
  return 0xFFFFFFFFLL;
}

LABEL_72:
            v11 = v29;
            if (v31) {
              free(v31);
            }
            goto LABEL_33;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = (id)gLogObj;
          if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v40 = "handleSetNetworkdSetting";
            BOOL v41 = 2114;
            *(void *)v42 = v9;
            _os_log_impl( &dword_181A5C000,  (os_log_t)v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s Successfully removed value of setting %{public}@",  buf,  0x16u);
          }

      if (v39) {
        free(v39);
      }
LABEL_82:
      *((_BYTE *)&v68 + v19 + 4) = 0;
      nw_framer_write_output(a2, output_buffer, (v19 + 9));
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v45 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        objc_super v62 = "nw_socksv4_send_connect";
        _os_log_impl(&dword_181A5C000, v45, OS_LOG_TYPE_DEBUG, "%{public}s Sent client request", buf, 0xCu);
      }

      v3[2] = 1;
      if (!v13) {
        return 2LL;
      }
LABEL_85:
      os_release((void *)v13);
      return 2LL;
    }

    __nwlog_obj();
    *(_DWORD *)output_buffer = 136446210;
    v68 = "nw_socksv4_send_connect";
    v49 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v49, buf, &type))
    {
      if (buf[0] == 17)
      {
        os_log_type_t v50 = (os_log_s *)__nwlog_obj();
        BOOL v51 = buf[0];
        if (!os_log_type_enabled(v50, (os_log_type_t)buf[0])) {
          goto LABEL_105;
        }
        *(_DWORD *)output_buffer = 136446210;
        v68 = "nw_socksv4_send_connect";
        os_log_type_t v52 = "%{public}s called with null framer";
        goto LABEL_104;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v50 = (os_log_s *)__nwlog_obj();
        BOOL v51 = buf[0];
        if (!os_log_type_enabled(v50, (os_log_type_t)buf[0])) {
          goto LABEL_105;
        }
        *(_DWORD *)output_buffer = 136446210;
        v68 = "nw_socksv4_send_connect";
        os_log_type_t v52 = "%{public}s called with null framer, backtrace limit exceeded";
        goto LABEL_104;
      }

      id v53 = (char *)__nw_create_backtrace_string();
      os_log_type_t v50 = (os_log_s *)__nwlog_obj();
      BOOL v51 = buf[0];
      v54 = os_log_type_enabled(v50, (os_log_type_t)buf[0]);
      if (v53)
      {
        if (v54)
        {
          *(_DWORD *)output_buffer = 136446466;
          v68 = "nw_socksv4_send_connect";
          v69 = 2082;
          uint64_t v70 = (uint64_t)v53;
          _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s called with null framer, dumping backtrace:%{public}s",  output_buffer,  0x16u);
        }

        free(v53);
        goto LABEL_105;
      }

      if (v54)
      {
        *(_DWORD *)output_buffer = 136446210;
        v68 = "nw_socksv4_send_connect";
        os_log_type_t v52 = "%{public}s called with null framer, no backtrace";
LABEL_104:
        _os_log_impl(&dword_181A5C000, v50, v51, v52, output_buffer, 0xCu);
      }
    }

  if (v45) {
LABEL_72:
  }
    free(v45);
LABEL_18:

  BOOL v24 = *(void *)(a1 + 32);
  id v25 = *(void **)(a1 + 48);
  v26 = *(void **)(a1 + 56);
  v60[0] = v18;
  v60[1] = 3221225472LL;
  v60[2] = __95__NWURLSessionTask_loaderDidReceiveServerTrustChallenge_secProtocolMetadata_completionHandler___block_invoke_3;
  v60[3] = &unk_189BBF040;
  v27 = *(id *)(a1 + 64);
  v28 = *(void *)(a1 + 32);
  os_log_type_t v29 = *(void **)(a1 + 40);
  objc_super v62 = v27;
  v60[4] = v28;
  os_log_type_t v61 = v29;
  v30 = v25;
  v31 = v26;
  v32 = v13;
  os_log_type_t v33 = v60;
  if (v24)
  {
    if (__nwlog_url_log::onceToken != -1) {
      dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
    }
    v34 = (os_log_s *)(id)gurlLogObj;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      [(id)v24 logDescription];
      [(id)v24 logDescription];
      *(_DWORD *)addrinfo buf = 68289282;
      *(_DWORD *)&buf[4] = 16;
      *(_WORD *)&buf[8] = 2098;
      *(void *)&buf[10] = v72;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v71;
      _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_INFO,  "Task <%{public,uuid_t}.16P>.<%u> received server trust challenge",  buf,  0x18u);
    }

    os_log_type_t v35 = objc_alloc(MEMORY[0x189601ED8]);
    if (v32) {
      os_log_type_t v36 = [v32 integerValue];
    }
    else {
      os_log_type_t v36 = 443LL;
    }
    v37 = (void *)objc_msgSend( v35,  "initWithHost:port:protocol:realm:authenticationMethod:",  v31,  v36,  *MEMORY[0x189601E60],  0,  *MEMORY[0x189601E58],  v58,  v59);
    os_log_type_t v38 = sec_trust_copy_ref(v30);
    [v37 _setServerTrust:v38];
    CFRelease(v38);
    os_log_type_t v40 = (void *)[objc_alloc(MEMORY[0x189601EB8]) initWithProtectionSpace:v37 proposedCredential:0 previousFailureCount:0 failureResponse:0 error:0 sender:0];
    if (*(double *)(v24 + 328) > 0.0)
    {
      BOOL v41 = *(void *)(v24 + 336);
      if (v41)
      {
        if (*(void *)v41)
        {
          dispatch_source_set_timer( *(dispatch_source_t *)v41,  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0x3B9ACA00uLL);
        }

        else
        {
          *(void *)(v41 + 32) = -1LL;
          *(void *)(v41 + 40) = -1LL;
          if (*(_BYTE *)(v41 + 48) && *(_BYTE *)(v41 + 49)) {
            nw_queue_source_run_timer(v41, v39);
          }
        }
      }
    }

    v42 = 248LL;
    if (!*(void *)(v24 + 248)) {
      v42 = 240LL;
    }
    v43 = *(void *)(v24 + v42);
    *(void *)addrinfo buf = v18;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __80__NWURLSessionTask_challengeDelegateForServerTrust_host_port_completionHandler___block_invoke;
    v64 = &unk_189BBF018;
    __int16 v65 = (id)v24;
    v66 = v30;
    __int16 v67 = v31;
    v68 = v32;
    v69 = v33;
    -[NWURLSessionDelegateWrapper task:didReceiveChallenge:completionHandler:](v43, (void *)v24, v40, buf);
  }
}

            if (v33) {
              free(v33);
            }
            v28 = v32;
            goto LABEL_74;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v40 = (id)gLogObj;
          BOOL v41 = *p_endpoint;
          *(_DWORD *)v100 = 136446722;
          *(void *)&v100[4] = "nw_service_connector_add_active_connection";
          *(_WORD *)&v100[12] = 2114;
          *(void *)&v100[14] = v41;
          *(_WORD *)&v100[22] = 2082;
          v101 = v9->service;
          v42 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v98 = 0;
          if (__nwlog_fault(v42, &type, &v98))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v43 = (os_log_s *)(id)gLogObj;
              v44 = type;
              if (os_log_type_enabled(v43, type))
              {
                os_log_type_t v45 = *p_endpoint;
                *(_DWORD *)v100 = 136446722;
                *(void *)&v100[4] = "nw_service_connector_add_active_connection";
                *(_WORD *)&v100[12] = 2114;
                *(void *)&v100[14] = v45;
                *(_WORD *)&v100[22] = 2082;
                v101 = v9->service;
                _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s",  v100,  0x20u);
              }
            }

            else
            {
              if (v98)
              {
                v46 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v48 = type;
                v49 = os_log_type_enabled(v47, type);
                if (v46)
                {
                  if (v49)
                  {
                    os_log_type_t v50 = *p_endpoint;
                    *(_DWORD *)v100 = 136446978;
                    *(void *)&v100[4] = "nw_service_connector_add_active_connection";
                    *(_WORD *)&v100[12] = 2114;
                    *(void *)&v100[14] = v50;
                    *(_WORD *)&v100[22] = 2082;
                    v101 = v9->service;
                    v102 = 2082;
                    v103 = v46;
                    _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s",  v100,  0x2Au);
                  }

                  free(v46);
                  if (!v42) {
                    goto LABEL_75;
                  }
                  goto LABEL_64;
                }

                if (v49)
                {
                  BOOL v57 = *p_endpoint;
                  *(_DWORD *)v100 = 136446722;
                  *(void *)&v100[4] = "nw_service_connector_add_active_connection";
                  *(_WORD *)&v100[12] = 2114;
                  *(void *)&v100[14] = v57;
                  *(_WORD *)&v100[22] = 2082;
                  v101 = v9->service;
                  _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace",  v100,  0x20u);
                }

                goto LABEL_63;
              }

              __nwlog_obj();
              v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v55 = type;
              if (os_log_type_enabled(v43, type))
              {
                os_log_type_t v56 = *p_endpoint;
                *(_DWORD *)v100 = 136446722;
                *(void *)&v100[4] = "nw_service_connector_add_active_connection";
                *(_WORD *)&v100[12] = 2114;
                *(void *)&v100[14] = v56;
                *(_WORD *)&v100[22] = 2082;
                v101 = v9->service;
                _os_log_impl( &dword_181A5C000,  v43,  v55,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded",  v100,  0x20u);
              }
            }
          }

        goto LABEL_75;
      }

      if (!v74)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (os_log_s *)(id)gLogObj;
        v43 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl( &dword_181A5C000,  v20,  v43,  "%{public}s called with null service, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (os_log_s *)(id)gLogObj;
      v30 = type;
      v31 = os_log_type_enabled(v20, type);
      if (!v27)
      {
        if (v31)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_181A5C000, v20, v30, "%{public}s called with null service, no backtrace", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (v31)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v77 = "nw_service_connector_cancel_active_connection";
        v78 = 2082;
        v79 = (size_t)v27;
        _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null service, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      v19 = (const char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v74 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (os_log_s *)(id)gLogObj;
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null endpoint", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (!v74)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (os_log_s *)(id)gLogObj;
        v39 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl( &dword_181A5C000,  v20,  v39,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_71;
      }

      v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (os_log_s *)(id)gLogObj;
      v28 = type;
      os_log_type_t v29 = os_log_type_enabled(v20, type);
      if (!v27)
      {
        if (v29)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_181A5C000, v20, v28, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }

        goto LABEL_71;
      }

      if (v29)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v77 = "nw_service_connector_cancel_active_connection";
        v78 = 2082;
        v79 = (size_t)v27;
        _os_log_impl( &dword_181A5C000,  v20,  v28,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(v27);
    if (!v19) {
      goto LABEL_78;
    }
    goto LABEL_76;
  }

  __nwlog_obj();
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  v77 = "nw_service_connector_cancel_active_connection";
  os_log_type_t v56 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v74 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v60 = type;
    if (os_log_type_enabled(v57, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      _os_log_impl(&dword_181A5C000, v57, v60, "%{public}s called with null completionBlock", buf, 0xCu);
    }

    goto LABEL_135;
  }

  if (!v74)
  {
    __nwlog_obj();
    BOOL v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v68 = type;
    if (os_log_type_enabled(v57, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      _os_log_impl( &dword_181A5C000,  v57,  v68,  "%{public}s called with null completionBlock, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_135;
  }

  v64 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  __int16 v65 = type;
  v66 = os_log_type_enabled(v57, type);
  if (!v64)
  {
    if (v66)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      _os_log_impl(&dword_181A5C000, v57, v65, "%{public}s called with null completionBlock, no backtrace", buf, 0xCu);
    }

    goto LABEL_135;
  }

  if (v66)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    v77 = "nw_service_connector_cancel_active_connection";
    v78 = 2082;
    v79 = (size_t)v64;
    _os_log_impl( &dword_181A5C000,  v57,  v65,  "%{public}s called with null completionBlock, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v64);
  if (v56) {
    goto LABEL_137;
  }
LABEL_79:
}

    free(backtrace_string);
    goto LABEL_84;
  }

  if (*(void *)a2)
  {
    size = dispatch_data_get_size(*(dispatch_data_t *)a2);
    v7 = *(dispatch_data_s **)(a2 + 8);
    if (v7) {
      goto LABEL_5;
    }
  }

  else
  {
    size = 0LL;
    v7 = *(dispatch_data_s **)(a2 + 8);
    if (v7)
    {
LABEL_5:
      v8 = dispatch_data_get_size(v7);
      os_log_type_t v9 = *(dispatch_data_s **)(a2 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_10:
      v10 = 0LL;
      v11 = *(dispatch_data_s **)(a2 + 24);
      if (v11) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }

  v8 = 0LL;
  os_log_type_t v9 = *(dispatch_data_s **)(a2 + 16);
  if (!v9) {
    goto LABEL_10;
  }
LABEL_6:
  v10 = dispatch_data_get_size(v9);
  v11 = *(dispatch_data_s **)(a2 + 24);
  if (v11)
  {
LABEL_7:
    v12 = dispatch_data_get_size(v11);
    goto LABEL_12;
  }

    goto LABEL_72;
  }

  if (!nw_protocol_options_is_masque(v5[5]))
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v34 = "nw_proxy_hop_add_extra_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null nw_protocol_options_is_masque(hop->options)",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl( &dword_181A5C000,  v9,  v28,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v34 = "nw_proxy_hop_add_extra_header";
      os_log_type_t v35 = 2082;
      os_log_type_t v36 = v20;
      _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_46;
  }

  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v34 = "nw_proxy_hop_add_extra_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null header", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl( &dword_181A5C000,  v9,  v29,  "%{public}s called with null header, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    BOOL v24 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_181A5C000, v9, v23, "%{public}s called with null header, no backtrace", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v34 = "nw_proxy_hop_add_extra_header";
      os_log_type_t v35 = 2082;
      os_log_type_t v36 = v20;
      _os_log_impl( &dword_181A5C000,  v9,  v23,  "%{public}s called with null header, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_46;
  }

  if (!a3)
  {
    __nwlog_obj();
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v34 = "nw_proxy_hop_add_extra_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null value", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl( &dword_181A5C000,  v9,  v30,  "%{public}s called with null value, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v25 = type;
    v26 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_181A5C000, v9, v25, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (v26)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v34 = "nw_proxy_hop_add_extra_header";
      os_log_type_t v35 = 2082;
      os_log_type_t v36 = v20;
      _os_log_impl( &dword_181A5C000,  v9,  v25,  "%{public}s called with null value, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_72;
  }

  if (!nw_protocol_options_is_masque(v5[5]))
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v34 = "nw_proxy_hop_set_server_raw_public_key";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null nw_protocol_options_is_masque(hop->options)",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v9,  v28,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v34 = "nw_proxy_hop_set_server_raw_public_key";
      os_log_type_t v35 = 2082;
      os_log_type_t v36 = v20;
      _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_46;
  }

  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v34 = "nw_proxy_hop_set_server_raw_public_key";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null key_bytes", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v9,  v29,  "%{public}s called with null key_bytes, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    BOOL v24 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v9, v23, "%{public}s called with null key_bytes, no backtrace", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v34 = "nw_proxy_hop_set_server_raw_public_key";
      os_log_type_t v35 = 2082;
      os_log_type_t v36 = v20;
      _os_log_impl( &dword_181A5C000,  v9,  v23,  "%{public}s called with null key_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_46;
  }

  if (!a3)
  {
    __nwlog_obj();
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v34 = "nw_proxy_hop_set_server_raw_public_key";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null key_length", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v9,  v30,  "%{public}s called with null key_length, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v25 = type;
    v26 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v9, v25, "%{public}s called with null key_length, no backtrace", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (v26)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v34 = "nw_proxy_hop_set_server_raw_public_key";
      os_log_type_t v35 = 2082;
      os_log_type_t v36 = v20;
      _os_log_impl( &dword_181A5C000,  v9,  v25,  "%{public}s called with null key_length, dumping backtrace:%{public}s",  buf,  0x16u);
    }

          free(v42);
          if (!v30)
          {
LABEL_144:
            v74 = v274;
            if (posix_error)
            {
LABEL_145:
              close(v74);
LABEL_434:
              BOOL v24 = posix_error;

              goto LABEL_110;
            }

    goto LABEL_98;
  }

  if ((nw_path_shared_necp_observer_fd(v3) & 0x80000000) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v14 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    v59 = "nw_path_copy_path_for_client_with_context";
    v5 = (char *)_os_log_send_and_compose_impl();

    v62[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v63) = 0;
    if (v62[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (os_log_s *)(id)gLogObj;
      unint64_t v15 = v62[0];
      if (os_log_type_enabled(v6, v62[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v59 = "nw_path_copy_path_for_client_with_context";
        _os_log_impl(&dword_181A5C000, v6, v15, "%{public}s nw_path_shared_necp_observer_fd failed", buf, 0xCu);
      }
    }

    else if ((_BYTE)v63)
    {
      v20 = __nw_create_backtrace_string();
      if (v20)
      {
        v21 = (char *)v20;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (os_log_s *)(id)gLogObj;
        BOOL v23 = v62[0];
        if (os_log_type_enabled(v22, v62[0]))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v59 = "nw_path_copy_path_for_client_with_context";
          char v60 = 2082;
          v61[0] = v21;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s nw_path_shared_necp_observer_fd failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
        if (!v5) {
          goto LABEL_100;
        }
        goto LABEL_99;
      }

      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = v62[0];
      if (os_log_type_enabled(v6, v62[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v59 = "nw_path_copy_path_for_client_with_context";
        _os_log_impl( &dword_181A5C000,  v6,  v37,  "%{public}s nw_path_shared_necp_observer_fd failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v29 = v62[0];
      if (os_log_type_enabled(v6, v62[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v59 = "nw_path_copy_path_for_client_with_context";
        _os_log_impl( &dword_181A5C000,  v6,  v29,  "%{public}s nw_path_shared_necp_observer_fd failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_71;
  }

  bzero(v62, 0x400uLL);
  v8 = necp_client_action();
  if (v8 <= 0)
  {
    os_log_type_t v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v18 = (os_log_s *)(id)gLogObj;
    v19 = v18;
    if (v17 == 2)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v59 = "nw_path_copy_path_for_client_with_context";
        char v60 = 1024;
        LODWORD(v61[0]) = 2;
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS failed %{darwin.errno}d",  buf,  0x12u);
      }

      goto LABEL_100;
    }

    *(_DWORD *)addrinfo buf = 136446466;
    v59 = "nw_path_copy_path_for_client_with_context";
    char v60 = 1024;
    LODWORD(v61[0]) = v17;
    v5 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v63) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v5, &v63, &type))
    {
      if (v63 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (os_log_s *)(id)gLogObj;
        v28 = v63;
        if (os_log_type_enabled(v27, (os_log_type_t)v63))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v59 = "nw_path_copy_path_for_client_with_context";
          char v60 = 1024;
          LODWORD(v61[0]) = v17;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS failed %{darwin.errno}d",  buf,  0x12u);
        }
      }

      else if (type)
      {
        v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v31 = v63;
        v32 = os_log_type_enabled(v27, (os_log_type_t)v63);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)addrinfo buf = 136446722;
            v59 = "nw_path_copy_path_for_client_with_context";
            char v60 = 1024;
            LODWORD(v61[0]) = v17;
            WORD2(v61[0]) = 2082;
            *(void *)((char *)v61 + 6) = v30;
            _os_log_impl( &dword_181A5C000,  v27,  v31,  "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v30);
          if (!v5) {
            goto LABEL_100;
          }
          goto LABEL_99;
        }

        if (v32)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v59 = "nw_path_copy_path_for_client_with_context";
          char v60 = 1024;
          LODWORD(v61[0]) = v17;
          _os_log_impl( &dword_181A5C000,  v27,  v31,  "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
        }
      }

      else
      {
        __nwlog_obj();
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v41 = v63;
        if (os_log_type_enabled(v27, (os_log_type_t)v63))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v59 = "nw_path_copy_path_for_client_with_context";
          char v60 = 1024;
          LODWORD(v61[0]) = v17;
          _os_log_impl( &dword_181A5C000,  v27,  v41,  "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

    goto LABEL_98;
  }

  bzero(buf, 0x1800uLL);
  os_log_type_t v9 = necp_client_action();
  if (v9 > 0)
  {
    v10 = 0LL;
    v5 = (char *)buf;
    goto LABEL_11;
  }

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  id v25 = **(_DWORD **)(StatusReg + 8);
  if (v25 != 22)
  {
    if (v25 == 2)
    {
      __nwlog_obj();
      v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        v63 = 136446466;
        v64 = "nw_path_copy_path_for_client_with_context";
        __int16 v65 = 1024;
        *(_DWORD *)v66 = 2;
        _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_DEBUG,  "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d",  (uint8_t *)&v63,  0x12u);
      }

      goto LABEL_100;
    }

    __nwlog_obj();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v63 = 136446466;
    v64 = "nw_path_copy_path_for_client_with_context";
    __int16 v65 = 1024;
    *(_DWORD *)v66 = v25;
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v56 = 0;
    if (__nwlog_fault(v5, &type, &v56))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          v63 = 136446466;
          v64 = "nw_path_copy_path_for_client_with_context";
          __int16 v65 = 1024;
          *(_DWORD *)v66 = v25;
          _os_log_impl( &dword_181A5C000,  v35,  v36,  "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d",  (uint8_t *)&v63,  0x12u);
        }

    free(backtrace_string);
    goto LABEL_32;
  }

  if (uuid_is_null(a2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v45 = "nw_path_copy_token_from_agent";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v42 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null agent_uuid", buf, 0xCu);
      }
    }

    else if (v42)
    {
      size_t v14 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      unint64_t v15 = type[0];
      v16 = os_log_type_enabled(v8, type[0]);
      if (v14)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v45 = "nw_path_copy_token_from_agent";
          v46 = 2082;
          *(void *)v47 = v14;
          _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null agent_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v14);
        if (!v7) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_181A5C000, v8, v15, "%{public}s called with null agent_uuid, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_path_copy_token_from_agent";
        _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s called with null agent_uuid, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_31;
  }

  *a3 = 0LL;
  v10 = nw_parameters_copy_context(v5[2]);
  v11 = nw_path_shared_necp_fd(v10);

  if (v11 < 0) {
    goto LABEL_34;
  }
  *(_OWORD *)type = *(_OWORD *)a2;
  v12 = calloc(1uLL, 0x1000uLL);
  if (v12)
  {
LABEL_11:
    v13 = necp_client_action();
    if (v13 > 0)
    {
      *a3 = v13;
LABEL_35:

      return (BOOL)v12;
    }

    if (v12) {
      free(v12);
    }
    BOOL v18 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v18 == 96 || v18 == 2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v45 = "nw_path_copy_token_from_agent";
        v46 = 1024;
        *(_DWORD *)v47 = v18;
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s NECP_CLIENT_ACTION_ACQUIRE_AGENT_TOKEN %{darwin.errno}d",  buf,  0x12u);
      }

      goto LABEL_34;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v45 = "nw_path_copy_token_from_agent";
    v46 = 1024;
    *(_DWORD *)v47 = v18;
    v7 = (char *)_os_log_send_and_compose_impl();

    v42 = OS_LOG_TYPE_ERROR;
    BOOL v41 = 0;
    if (__nwlog_fault(v7, &v42, &v41))
    {
      if (v42 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v23 = v42;
        if (os_log_type_enabled(v22, v42))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v45 = "nw_path_copy_token_from_agent";
          v46 = 1024;
          *(_DWORD *)v47 = v18;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s NECP_CLIENT_ACTION_ACQUIRE_AGENT_TOKEN %{darwin.errno}d",  buf,  0x12u);
        }

  char v60 = *(void *)(a1 + 32);
  if (v60) {
    os_log_type_t v61 = *(void *)(v60 + 88);
  }
  else {
    os_log_type_t v61 = 0LL;
  }
  (*(void (**)(void, dispatch_data_s *, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v9,  a4,  v61);
}

    if (v17) {
      free(v17);
    }
    size_t v14 = 0LL;
    goto LABEL_8;
  }

  os_log_type_t v9 = (nw_error *)v7;
  error_code = nw_error_get_error_code(v9);
  error_domain = nw_error_get_error_domain(v9);
  v12 = (char *)calloc(1uLL, 0xDuLL);
  v13 = (unsigned __int8 *)v12;
  if (v12)
  {
    char *v12 = -40;
    *(_DWORD *)(v12 + 1) = 8;
    *(_DWORD *)(v12 + 5) = error_code;
    v12[9] = error_domain;
LABEL_6:

    size_t v14 = nw_agent_assign(v5, v13, 0xDuLL, v6 + 8, 0);
    if (v13) {
      free(v13);
    }
LABEL_8:

    return v14;
  }

  __nwlog_obj();
  BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  v47 = "strict_calloc";
  os_log_type_t v48 = 2048;
  v49 = 1LL;
  os_log_type_t v50 = 2048;
  BOOL v51 = 13LL;
  id v25 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v25);
  if (!result)
  {
    free(v25);
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v47 = "nw_necp_append_tlv";
    v27 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v27, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null tlv_start", buf, 0xCu);
        }
      }

      else if (v44)
      {
        v37 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        v39 = os_log_type_enabled(v28, type);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v47 = "nw_necp_append_tlv";
            os_log_type_t v48 = 2082;
            v49 = (uint64_t)v37;
            _os_log_impl( &dword_181A5C000,  v28,  v38,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v37);
          goto LABEL_77;
        }

        if (v39)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v28, v38, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl( &dword_181A5C000,  v28,  v43,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    free(v35);
    goto LABEL_72;
  }

  if (!identifier)
  {
    __nwlog_obj();
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v36, v55, "%{public}s called with null identifier", buf, 0xCu);
      }

      goto LABEL_161;
    }

    if (!v91)
    {
      __nwlog_obj();
      os_log_type_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v70 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v36,  v70,  "%{public}s called with null identifier, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_161;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v63 = type;
    v64 = os_log_type_enabled(v36, type);
    if (!backtrace_string)
    {
      if (v64)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v36, v63, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }

      goto LABEL_161;
    }

    if (v64)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v94 = 2082;
      v95 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v36,  v63,  "%{public}s called with null identifier, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_128;
  }

  if (!v16)
  {
    __nwlog_obj();
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v60 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v36, v60, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_161;
    }

    if (!v91)
    {
      __nwlog_obj();
      os_log_type_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v71 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v36,  v71,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_161;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v65 = type;
    v66 = os_log_type_enabled(v36, type);
    if (!backtrace_string)
    {
      if (v66)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v36, v65, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_161;
    }

    if (v66)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v94 = 2082;
      v95 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v36,  v65,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_128;
  }

  if (!v90)
  {
    __nwlog_obj();
    os_log_type_t v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      objc_super v62 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v36, v62, "%{public}s called with null parameters", buf, 0xCu);
      }

    free(v33);
    goto LABEL_72;
  }

  if (!identifier)
  {
    __nwlog_obj();
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v129 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v89 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v34, v89, "%{public}s called with null identifier", buf, 0xCu);
      }

      goto LABEL_205;
    }

    if (!v129)
    {
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v104 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v34,  v104,  "%{public}s called with null identifier, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_205;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v97 = type;
    v98 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v98)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v34, v97, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }

      goto LABEL_205;
    }

    if (v98)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v132 = 2082;
      v133 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v34,  v97,  "%{public}s called with null identifier, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_172;
  }

  if (!v124)
  {
    __nwlog_obj();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v129 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v94 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v34, v94, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_205;
    }

    if (!v129)
    {
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v105 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v34,  v105,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_205;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v99 = type;
    v100 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v100)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v34, v99, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_205;
    }

    if (v100)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v132 = 2082;
      v133 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v34,  v99,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_172;
  }

  if (!v126)
  {
    __nwlog_obj();
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v129 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v96 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v34, v96, "%{public}s called with null parameters", buf, 0xCu);
      }

      os_log_type_t v58 = *(void *)(a1 + 64);
      *(void *)(v13 + 32) = 0LL;
      v59 = *(uint64_t **)(v58 + 8);
      *(void *)(v13 + 40) = v59;
      addrinfo *v59 = v13;
      *(void *)(v58 + 8) = v13 + 32;
      char v60 = *(void *)(*(void *)(a1 + 32) + 8LL);
      os_log_type_t v61 = *(unsigned int *)(v60 + 24) + 1LL;
      objc_super v62 = v61 << 31 >> 31;
      *(_DWORD *)(v60 + 24) = v61;
      if (v62 == v61 && (v62 & 0x8000000000000000LL) == 0) {
        return 1LL;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v63 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      *(_DWORD *)addrinfo buf = 136446978;
      v213 = "nw_protocol_http2_get_input_frames_block_invoke";
      v214 = 2082;
      v215 = "return_frame_count";
      v216 = 2048;
      v217 = 1LL;
      v218 = 2048;
      *(void *)v219 = v63;
      v64 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v210 = 0;
      if (__nwlog_fault(v64, &type, &v210))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v65 = (os_log_s *)gLogObj;
          v66 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            __int16 v67 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
            *(_DWORD *)addrinfo buf = 136446978;
            v213 = "nw_protocol_http2_get_input_frames_block_invoke";
            v214 = 2082;
            v215 = "return_frame_count";
            v216 = 2048;
            v217 = 1LL;
            v218 = 2048;
            *(void *)v219 = v67;
            v68 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_115:
            _os_log_impl(&dword_181A5C000, v65, v66, v68, buf, 0x2Au);
          }
        }

        else if (v210)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v65 = (os_log_s *)gLogObj;
          v66 = type;
          uint64_t v70 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v70)
            {
              v71 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)addrinfo buf = 136447234;
              v213 = "nw_protocol_http2_get_input_frames_block_invoke";
              v214 = 2082;
              v215 = "return_frame_count";
              v216 = 2048;
              v217 = 1LL;
              v218 = 2048;
              *(void *)v219 = v71;
              *(_WORD *)&v219[8] = 2082;
              *(void *)&v219[10] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(backtrace_string);
            goto LABEL_116;
          }

          if (v70)
          {
            v98 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
            *(_DWORD *)addrinfo buf = 136446978;
            v213 = "nw_protocol_http2_get_input_frames_block_invoke";
            v214 = 2082;
            v215 = "return_frame_count";
            v216 = 2048;
            v217 = 1LL;
            v218 = 2048;
            *(void *)v219 = v98;
            v68 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_115;
          }
        }

        else
        {
          __int16 v65 = (os_log_s *)__nwlog_obj();
          v66 = type;
          if (os_log_type_enabled(v65, type))
          {
            v97 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
            *(_DWORD *)addrinfo buf = 136446978;
            v213 = "nw_protocol_http2_get_input_frames_block_invoke";
            v214 = 2082;
            v215 = "return_frame_count";
            v216 = 2048;
            v217 = 1LL;
            v218 = 2048;
            *(void *)v219 = v97;
            v68 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_115;
          }
        }
      }

      if (v27) {
        free(v27);
      }
      goto LABEL_73;
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v9 = *(_DWORD *)(v3 + 368);
    *(_DWORD *)addrinfo buf = 136446978;
    *(void *)&buf[4] = "nw_protocol_http2_destroy";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v3 + 390;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&buf[24] = " ";
    LOWORD(v136) = 1024;
    *(_DWORD *)((char *)&v136 + 2) = v9;
    v10 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v134 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v10, type, &v134))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v11 = (os_log_s *)gconnectionLogObj;
        v12 = type[0];
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type[0])) {
          goto LABEL_64;
        }
        v13 = *(_DWORD *)(v3 + 368);
        *(_DWORD *)addrinfo buf = 136446978;
        *(void *)&buf[4] = "nw_protocol_http2_destroy";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v3 + 390;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        LOWORD(v136) = 1024;
        *(_DWORD *)((char *)&v136 + 2) = v13;
        size_t v14 = "%{public}s %{public}s%s<i%u> http2_streams_protocol NULL when destroying";
        goto LABEL_63;
      }

      if (v134 == OS_LOG_TYPE_DEFAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v11 = (os_log_s *)gconnectionLogObj;
        v12 = type[0];
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type[0])) {
          goto LABEL_64;
        }
        os_log_type_t v38 = *(_DWORD *)(v3 + 368);
        *(_DWORD *)addrinfo buf = 136446978;
        *(void *)&buf[4] = "nw_protocol_http2_destroy";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v3 + 390;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        LOWORD(v136) = 1024;
        *(_DWORD *)((char *)&v136 + 2) = v38;
        size_t v14 = "%{public}s %{public}s%s<i%u> http2_streams_protocol NULL when destroying, backtrace limit exceeded";
        goto LABEL_63;
      }

      v32 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v11 = (os_log_s *)gconnectionLogObj;
      v12 = type[0];
      os_log_type_t v33 = os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]);
      if (v32)
      {
        if (v33)
        {
          v34 = *(_DWORD *)(v3 + 368);
          *(_DWORD *)addrinfo buf = 136447234;
          *(void *)&buf[4] = "nw_protocol_http2_destroy";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v3 + 390;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = " ";
          LOWORD(v136) = 1024;
          *(_DWORD *)((char *)&v136 + 2) = v34;
          HIWORD(v136) = 2082;
          v137 = (uint64_t)v32;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s %{public}s%s<i%u> http2_streams_protocol NULL when destroying, dumping backtrace:%{public}s",  buf,  0x30u);
        }

        free(v32);
        goto LABEL_64;
      }

      if (v33)
      {
        v39 = *(_DWORD *)(v3 + 368);
        *(_DWORD *)addrinfo buf = 136446978;
        *(void *)&buf[4] = "nw_protocol_http2_destroy";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v3 + 390;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        LOWORD(v136) = 1024;
        *(_DWORD *)((char *)&v136 + 2) = v39;
        size_t v14 = "%{public}s %{public}s%s<i%u> http2_streams_protocol NULL when destroying, no backtrace";
LABEL_63:
        _os_log_impl(&dword_181A5C000, v11, v12, v14, buf, 0x26u);
      }
    }

    _os_log_impl(&dword_181A5C000, v30, v31, v32, (uint8_t *)out, 0xCu);
    goto LABEL_72;
  }

  if (((*(unsigned __int16 *)(a1 + 444) | (*(unsigned __int8 *)(a1 + 446) << 16)) & 0x80000) == 0)
  {
    if (_nw_signposts_once != -1) {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
    }
    v2 = (__int16 *)(a1 + 444);
    *(_BYTE *)(a1 + 446) = ((unsigned __int16)*v2 | (*(unsigned __int8 *)(a1 + 446) << 16) | 0x80000u) >> 16;
    memset(out, 0, 48);
    v3 = *(_DWORD *)(a1 + 428);
    uuid_unparse((const unsigned __int8 *)(a1 + 88), (char *)out);
    snprintf((char *)&out[9], 0xCuLL, "-%u", v3);
    v5 = *(void *)(a1 + 152);
    if (!v5 || *(_DWORD *)(v5 + 124) != 4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        v7 = *(_DWORD *)(a1 + 432);
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v40 = "nw_channel_handle_defunct";
        BOOL v41 = 2082;
        v42 = out;
        v43 = 1024;
        v44 = v7;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s Defunct channel destroyed with key: %{public}s and fd: %d",  buf,  0x1Cu);
      }
    }

    v8 = *(void *)(a1 + 192);
    if (v8)
    {
      nw_queue_cancel_source(v8, v4);
      *(void *)(a1 + 192) = 0LL;
    }

    os_log_type_t v9 = *(void *)(a1 + 200);
    if (v9)
    {
      nw_queue_cancel_source(v9, v4);
      *(void *)(a1 + 200) = 0LL;
    }

    v10 = *(void *)(a1 + 184);
    if (v10)
    {
      nw_queue_cancel_source(v10, v4);
      *(void *)(a1 + 184) = 0LL;
    }

    v11 = *(void *)(a1 + 168);
    if (v11)
    {
      nw_queue_cancel_source(*(void *)(a1 + 168), v4);
      *(void *)(a1 + 168) = 0LL;
      if ((*v2 & 8) != 0)
      {
        nw_queue_resume_source(v11, v4);
        v12 = (unsigned __int16)*v2;
        v13 = v12 & 0xFFFFFFF7 | (*(unsigned __int8 *)(a1 + 446) << 16);
        void *v2 = v12 & 0xFFF7;
        *(_BYTE *)(a1 + 446) = BYTE2(v13);
      }
    }

    size_t v14 = *(void *)(a1 + 176);
    if (v14)
    {
      nw_queue_cancel_source(*(void *)(a1 + 176), v4);
      *(void *)(a1 + 176) = 0LL;
      if ((*v2 & 0x10) != 0)
      {
        nw_queue_resume_source(v14, v15);
        v16 = (unsigned __int16)*v2;
        os_log_type_t v17 = v16 & 0xFFFFFFEF | (*(unsigned __int8 *)(a1 + 446) << 16);
        void *v2 = v16 & 0xFFEF;
        *(_BYTE *)(a1 + 446) = BYTE2(v17);
      }
    }

    BOOL v18 = *(char **)(a1 + 280);
    if (v18)
    {
      v37[0] = MEMORY[0x1895F87A8];
      v37[1] = 0x40000000LL;
      v37[2] = ___ZL25nw_channel_handle_defunctP10nw_channel_block_invoke;
      v37[3] = &__block_descriptor_tmp_63_86698;
      v37[4] = a1;
      nw_hash_table_apply(v18, (uint64_t)v37);
    }

    v19 = *(void **)(a1 + 152);
    if (v19)
    {
      globals_for_channel = nw_context_get_globals_for_channel(v19);
      v21 = globals_for_channel;
      v22 = *v2;
      if ((*v2 & 0x4000) == 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 20));
        BOOL v23 = (unsigned __int16)*v2;
        BOOL v24 = v23 | (*(unsigned __int8 *)(a1 + 446) << 16);
        if ((v23 & 0x4000) == 0)
        {
          *(_BYTE *)(a1 + 446) = BYTE2(v24);
          void *v2 = v24 | 0x4000;
          nw_array_append(*(void *)(v21 + 8), (void *)a1);
        }

        os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 20));
        v22 = *v2;
      }

      if ((v22 & 0x2000) != 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v21 + 16));
        id v25 = (unsigned __int16)*v2;
        if ((v25 & 0x2000) != 0)
        {
          v26 = v25 & 0xFFFFDFFF | (*(unsigned __int8 *)(a1 + 446) << 16);
          void *v2 = v25 & 0xDFFF;
          *(_BYTE *)(a1 + 446) = BYTE2(v26);
          nw_dictionary_set_value(*(void *)v21, (const char *)out, 0LL);
        }

        os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 16));
      }
    }

    if (*(void *)(a1 + 136))
    {
      if (*(void *)(a1 + 208)) {
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 208));
      }
      else {
        os_channel_destroy();
      }
      *(void *)(a1 + 136) = 0LL;
    }

    *(void *)(a1 + 216) = 0LL;
    *(void *)(a1 + 224) = 0LL;
    if (*(void *)(a1 + 144))
    {
      os_channel_attr_destroy();
      *(void *)(a1 + 144) = 0LL;
    }

    v27 = (unsigned __int16)*v2;
    v28 = (v27 | (*(unsigned __int8 *)(a1 + 446) << 16)) & 0xFFF7FFFF;
    void *v2 = v27;
    *(_BYTE *)(a1 + 446) = BYTE2(v28);
    return;
  }

  __nwlog_obj();
  out[0] = 136446210;
  *(void *)&out[1] = "nw_channel_handle_defunct";
  os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();
  buf[0] = 16;
  os_log_type_t v38 = 0;
  if (buf[0] == 17)
  {
    v30 = (os_log_s *)__nwlog_obj();
    v31 = buf[0];
    if (!os_log_type_enabled(v30, (os_log_type_t)buf[0])) {
      goto LABEL_72;
    }
    out[0] = 136446210;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    v32 = "%{public}s called with null !channel->processing_defunct";
    goto LABEL_71;
  }

  if (!v38)
  {
    v30 = (os_log_s *)__nwlog_obj();
    v31 = buf[0];
    if (!os_log_type_enabled(v30, (os_log_type_t)buf[0])) {
      goto LABEL_72;
    }
    out[0] = 136446210;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    v32 = "%{public}s called with null !channel->processing_defunct, backtrace limit exceeded";
    goto LABEL_71;
  }

  os_log_type_t v35 = (char *)__nw_create_backtrace_string();
  v30 = (os_log_s *)__nwlog_obj();
  v31 = buf[0];
  os_log_type_t v36 = os_log_type_enabled(v30, (os_log_type_t)buf[0]);
  if (!v35)
  {
    if (!v36) {
      goto LABEL_72;
    }
    out[0] = 136446210;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    v32 = "%{public}s called with null !channel->processing_defunct, no backtrace";
    goto LABEL_71;
  }

  if (v36)
  {
    out[0] = 136446466;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    LOWORD(out[3]) = 2082;
    *(void *)((char *)&out[3] + 2) = v35;
    _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s called with null !channel->processing_defunct, dumping backtrace:%{public}s",  (uint8_t *)out,  0x16u);
  }

  free(v35);
  if (v29) {
    goto LABEL_73;
  }
}

LABEL_13:
  v10 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_host_endpoint);
  if (!v10)
  {
LABEL_113:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v53 = (id)gLogObj;
    *(_DWORD *)type = 136446210;
    v64 = "nw_endpoint_create_host_with_numeric_port";
    v7 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v62.receiver) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(v62.receiver) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v54 = (os_log_s *)(id)gLogObj;
      os_log_type_t v55 = (os_log_type_t)v62.receiver;
      if (os_log_type_enabled(v54, (os_log_type_t)v62.receiver))
      {
        *(_DWORD *)type = 136446210;
        v64 = "nw_endpoint_create_host_with_numeric_port";
        _os_log_impl(&dword_181A5C000, v54, v55, "%{public}s NWOSHostEndpoint alloc/init failed", (uint8_t *)type, 0xCu);
      }

    free(v9);
    goto LABEL_14;
  }

  __nwlog_obj();
  os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  v28 = "nw_protocol_definition_create_with_identifier";
  BOOL v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  id v25 = 0;
  if (__nwlog_fault(v18, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v28 = "nw_protocol_definition_create_with_identifier";
        _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null identifier", buf, 0xCu);
      }
    }

    else if (v25)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      BOOL v23 = os_log_type_enabled(v19, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v28 = "nw_protocol_definition_create_with_identifier";
          os_log_type_t v29 = 2082;
          v30 = v21;
          _os_log_impl( &dword_181A5C000,  v19,  v22,  "%{public}s called with null identifier, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
        goto LABEL_44;
      }

      if (v23)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v28 = "nw_protocol_definition_create_with_identifier";
        _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v28 = "nw_protocol_definition_create_with_identifier";
        _os_log_impl( &dword_181A5C000,  v19,  v24,  "%{public}s called with null identifier, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

      nw_parameters_set_tfo_no_cookie(v6, 1);
      goto LABEL_14;
    }

LABEL_14:
    if (!v10) {
      goto LABEL_16;
    }
LABEL_15:
    free(v10);
    goto LABEL_16;
  }

  if (!v18)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (os_log_s *)(id)gLogObj;
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v21 = "nw_endpoint_resolver_create_child_parameters";
      _os_log_impl( &dword_181A5C000,  v11,  v17,  "%{public}s nw_parameters_copy failed, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_13;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (os_log_s *)(id)gLogObj;
  unint64_t v15 = type;
  v16 = os_log_type_enabled(v11, type);
  if (!backtrace_string)
  {
    if (v16)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v21 = "nw_endpoint_resolver_create_child_parameters";
      _os_log_impl(&dword_181A5C000, v11, v15, "%{public}s nw_parameters_copy failed, no backtrace", buf, 0xCu);
    }

    goto LABEL_13;
  }

  if (v16)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    v21 = "nw_endpoint_resolver_create_child_parameters";
    v22 = 2082;
    BOOL v23 = backtrace_string;
    _os_log_impl( &dword_181A5C000,  v11,  v15,  "%{public}s nw_parameters_copy failed, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(backtrace_string);
  if (v10) {
    goto LABEL_15;
  }
LABEL_16:

  return v4;
}

    BOOL result = sub_181BF7B88(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  v8 = sub_18264F228();
  if (!v8)
  {
    sub_18264F318();
    __break(1u);
LABEL_17:
    BOOL result = sub_18264F360();
    __break(1u);
    return result;
  }

  __break(1u);
  return result;
}

  os_log_type_t v9 = 65540LL;
LABEL_14:
  v10 = v8 - 48;
  if ((v10 & 0xFFFFFF00) != 0)
  {
    __break(1u);
  }

  else
  {
    BOOL v18 = v2;
    v2 = 4 * v7;
    if (4 * v7 != v9 >> 14)
    {
      v19 = v3;
      v3 = 4LL << v1;
      v1 = v9 & 0xC;
      v11 = v9;
      if (v1 != v3) {
        goto LABEL_17;
      }
      goto LABEL_54;
    }
  }

  __break(1u);
LABEL_54:
  v11 = sub_181C23710(v9, v5, v6);
LABEL_17:
  v12 = v11 >> 16;
  if (v11 >> 16 < v7)
  {
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      v12 = sub_18264EBC8();
      if (v1 != v3) {
        goto LABEL_25;
      }
    }

    else
    {
      if ((v6 & 0x2000000000000000LL) == 0)
      {
        if ((v5 & 0x1000000000000000LL) != 0)
        {
          v13 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
          goto LABEL_22;
        }

        goto LABEL_64;
      }

      v20 = v5;
      v21 = v6 & 0xFFFFFFFFFFFFFFLL;
      v12 = *((unsigned __int8 *)&v20 + v12);
      if (v1 != v3) {
        goto LABEL_25;
      }
    }

  swift_bridgeObjectRelease();
  return sub_181BCEE10(a8);
}

    sub_181C86A84((uint64_t)v26, v27);
    BOOL v18 = sub_18264EB20();
    v20 = v19;
LABEL_15:
    v21 = sub_181C024EC(v18, v20);
    BOOL v23 = v22;
    swift_bridgeObjectRelease();
    v26 = (char *)v13;
    v27 = v12;
    v28 = v14;
    os_log_type_t v29 = v15;
    v30 = 0;
    v31 = v21;
    v32 = v23;
    sub_181C7DE74(v13, v12);
    v11[2](v11, (uint64_t *)&v26);
    _Block_release(v11);
    MEMORY[0x1895F8858](v24);
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(void *)a1 + 80LL))(sub_181C86B38);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  BOOL result = sub_18264F324();
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
  swift_endAccess();
  _Block_release(v3);
  swift_release();
  _Block_release(v3);
}

  if (v3 != v6) {
    goto LABEL_15;
  }
  v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}
}

LABEL_14:
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), *(id *)(a1 + 40));
    *(void *)(*(void *)(a1 + 32) + 40LL) = *(void *)(a1 + 48);
    return;
  }

  objc_msgSend(v7, "objectForKeyedSubscript:");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v17 = [v16 unsignedLongLongValue];

  [MEMORY[0x189607968] numberWithUnsignedLongLong:v17 + (unint64_t)v9];
  BOOL v18 = (void *)objc_claimAutoreleasedReturnValue();
  [*(id *)(*(void *)(a1 + 32) + 24) setObject:v18 forKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 32)];

  v19 = [*(id *)(*(void *)(a1 + 32) + 32) isEqualToString:*(void *)(a1 + 40)];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v20 = (os_log_s *)(id)gLogObj;
  v10 = v20;
  if ((v19 & 1) == 0)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v28 = *(void *)(a1 + 32);
      os_log_type_t v29 = *(void *)(a1 + 40);
      v30 = *(double *)(v28 + 32);
      v31 = *(void *)(a1 + 48);
      *(_DWORD *)addrinfo buf = 136447746;
      os_log_type_t v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
      v46 = 2112;
      v47 = (char *)v28;
      os_log_type_t v48 = 2112;
      v49 = v30;
      os_log_type_t v50 = 2048;
      BOOL v51 = v17;
      os_log_type_t v52 = 2048;
      id v53 = v17 + (unint64_t)v9;
      v54 = 2112;
      os_log_type_t v55 = v29;
      os_log_type_t v56 = 2048;
      BOOL v57 = v31;
      _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_INFO,  "%{public}s %@ exiting state: %@, previous duration %llu, new duration %llu, entering state: %@ at time %f",  buf,  0x48u);
    }

    goto LABEL_13;
  }

  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    v21 = *(void *)(a1 + 32);
    v22 = *(void *)(a1 + 40);
    BOOL v23 = *(double *)(v21 + 32);
    BOOL v24 = *(void *)(a1 + 48);
    *(_DWORD *)addrinfo buf = 136447746;
    os_log_type_t v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
    v46 = 2112;
    v47 = (char *)v21;
    os_log_type_t v48 = 2112;
    v49 = v23;
    os_log_type_t v50 = 2048;
    BOOL v51 = v17;
    os_log_type_t v52 = 2048;
    id v53 = v17 + (unint64_t)v9;
    v54 = 2112;
    os_log_type_t v55 = v22;
    os_log_type_t v56 = 2048;
    BOOL v57 = v24;
    _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ exiting state: %@, previous duration %llu, new duration %llu, entering state: %@ at time %f",  buf,  0x48u);
  }

  if (v9 >= 1.0) {
    goto LABEL_14;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v25 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(char **)(*(void *)(a1 + 32) + 40LL);
    v27 = *(double *)(a1 + 48);
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
    v46 = 2048;
    v47 = v26;
    os_log_type_t v48 = 2048;
    v49 = v27;
    _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s delta is less than one second, not updating timestamp from %f (ignoring new timestamp %f)",  buf,  0x20u);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), *(id *)(a1 + 40));
}

    free(v6);
    goto LABEL_14;
  }

  [MEMORY[0x189603F48] dataWithBytes:address length:address->sa_len];
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  return (NSData *)v4;
}
}

      size_t v14 = v31;
      if (v8 - v7 == 1 || !weight)
      {
        while (v8 <= v13)
        {
          nw_array_get_object_at_index((uint64_t)v2, v8);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          nw_array_append(v4, v16);

          ++v8;
        }
      }

      else
      {
        unint64_t v15 = v7 - v8;
        if (v7 != v8)
        {
          if (v8 <= v13)
          {
            v30 = 0LL;
            do
            {
              os_log_type_t v17 = v8;
              if (weight)
              {
                BOOL v18 = arc4random() % weight;
                v19 = v8;
                while (1)
                {
                  nw_array_get_object_at_index((uint64_t)v2, v19);
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  v21 = v20;
                  if (!v4 || !v20) {
                    goto LABEL_35;
                  }
                  BOOL v23 = *(void ***)(v4 + 16);
                  v22 = *(void ***)(v4 + 24);
                  if (v23 != v22)
                  {
                    while (*v23 != v20)
                    {
                      if (++v23 == v22)
                      {
                        BOOL v23 = *(void ***)(v4 + 24);
                        break;
                      }
                    }
                  }

                  if (v23 == v22)
                  {
LABEL_35:
                    BOOL v24 = nw_endpoint_get_weight(v20);
                    id v25 = v24;
                    if (v18 < v24) {
                      goto LABEL_47;
                    }
                    v18 -= v24;
                  }

                  if (++v19 > v13) {
                    goto LABEL_23;
                  }
                }
              }

              while (1)
              {
                nw_array_get_object_at_index((uint64_t)v2, v17);
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                v21 = v26;
                if (!v4 || !v26) {
                  break;
                }
                v28 = *(void ***)(v4 + 16);
                v27 = *(void ***)(v4 + 24);
                if (v28 != v27)
                {
                  while (*v28 != v26)
                  {
                    if (++v28 == v27)
                    {
                      v28 = *(void ***)(v4 + 24);
                      break;
                    }
                  }
                }

                if (v28 == v27) {
                  break;
                }

                if (++v17 > v13)
                {
                  weight = 0;
LABEL_23:
                  id v6 = v29;
                  goto LABEL_24;
                }
              }

              id v25 = nw_endpoint_get_weight(v26);
LABEL_47:
              id v6 = v29;
              nw_array_append(v4, v21);
              weight -= v25;

LABEL_24:
              ++v30;
              size_t v14 = v31;
            }

            while (v30 != v7 - v8);
          }

          else
          {
            do
            {
              arc4random();
              --v15;
            }

            while (v15);
          }
        }
      }
    }

    while (v7 < v6);
  }

  else
  {
    size_t v4 = v1;
  }

  return v4;
}

    id v6 = *(void *)(a1 + 32);
    goto LABEL_14;
  }

  if ((*(_BYTE *)(v6 + 346) & 0x20) == 0)
  {
    if (*(_BYTE *)(v6 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v7 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_13;
      }
      v8 = *(void *)(a1 + 32) + 256LL;
      *(_DWORD *)addrinfo buf = 136446978;
      *(void *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = a2;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a3;
      os_log_type_t v9 = "%{public}s [C%{public}s] Received %d NAT64 prefixes [%p]";
      v10 = v7;
      v11 = 38;
      goto LABEL_12;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(*(void *)(a1 + 32) + 340LL);
      *(_DWORD *)addrinfo buf = 136446978;
      *(void *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a2;
      *(_WORD *)&buf[24] = 2048;
      *(void *)&buf[26] = a3;
      os_log_type_t v9 = "%{public}s [R%u] Received %d NAT64 prefixes [%p]";
      v10 = v7;
      v11 = 34;
      goto LABEL_12;
    }

    goto LABEL_13;
  }

  v2 = *(void *)(a1 + 32);
LABEL_14:
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 12));
  v10 = a1 + 32;
  os_log_type_t v9 = *(void **)(a1 + 32);
  v11 = (unsigned __int8 *)v9[19];
  v22[0] = MEMORY[0x1895F87A8];
  v22[1] = 3221225472LL;
  v22[2] = ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke_254;
  v22[3] = &unk_189BC85B0;
  BOOL v23 = v9;
  nw_array_apply(v11, (uint64_t)v22);
  v12 = *(void **)(*(void *)(a1 + 32) + 152LL);
  *(void *)(*(void *)v10 + 152LL) = 0LL;

  *(_BYTE *)(*(void *)v10 + 348LL) |= 1u;
  size_t v14 = *(void **)(a1 + 32);
  if (v14[20])
  {
    nw_queue_cancel_source(*(void *)(*(void *)v10 + 160LL), v13);
    *(void *)(*(void *)(a1 + 32) + 160LL) = 0LL;
    size_t v14 = *(void **)(a1 + 32);
  }

  nw_resolver_update_status_locked(v14, 0LL);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
  unint64_t v15 = *(void *)(a1 + 32);
  if (!v15)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      id v25 = "nw_resolver_bonjour_resolve_callback_block_invoke_2";
      BOOL v18 = "%{public}s Marking preferred weighting as completed";
      v19 = v16;
      v20 = 12;
LABEL_27:
      _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_DEBUG, v18, buf, v20);
    }

    v5 = *(_BYTE **)(a1 + 32);
    goto LABEL_14;
  }

  if ((v5[346] & 0x20) == 0)
  {
    if (v5[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v6 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      v7 = *(void *)(a1 + 32) + 256LL;
      v13 = 136446722;
      size_t v14 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      unint64_t v15 = 2082;
      *(void *)v16 = v7;
      *(_WORD *)&v16[8] = 2112;
      *(void *)&v16[10] = v4;
      v8 = "%{public}s [C%{public}s] Inserting non-preferred host endpoint %@";
      os_log_type_t v9 = v6;
      v10 = 32;
      goto LABEL_12;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v11 = *(_DWORD *)(*(void *)(a1 + 32) + 340LL);
      v13 = 136446722;
      size_t v14 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      unint64_t v15 = 1024;
      *(_DWORD *)v16 = v11;
      *(_WORD *)&v16[4] = 2112;
      *(void *)&v16[6] = v4;
      v8 = "%{public}s [R%u] Inserting non-preferred host endpoint %@";
      os_log_type_t v9 = v6;
      v10 = 28;
      goto LABEL_12;
    }

    goto LABEL_13;
  }
}

  v2 = *(void *)(a1 + 32);
LABEL_14:
  nw_resolver_cancel_delayed_reporting_timer((NWConcrete_nw_resolver *)v2);
  v13 = *(void *)(a1 + 32);
  if (*(void *)(v13 + 96))
  {
    nw_resolver_update_client((void *)v13, 0LL);
    v13 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 12));
}

    v2 = *(void *)(a1 + 32);
    goto LABEL_14;
  }

  if ((*(_BYTE *)(v2 + 346) & 0x20) == 0)
  {
    if (*(_BYTE *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v3 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      size_t v4 = *(void *)(a1 + 32);
      v5 = nw_endpoint_get_logging_description(*(void **)(v4 + 24));
      v13 = 136446722;
      size_t v14 = "nw_resolver_start_query_timer_block_invoke";
      unint64_t v15 = 2082;
      *(void *)v16 = v4 + 256;
      *(_WORD *)&v16[8] = 2082;
      *(void *)&v16[10] = v5;
      id v6 = "%{public}s [C%{public}s] Query fired: did not receive all answers in time for %{public}s";
      v7 = v3;
      v8 = 32;
      goto LABEL_12;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v10 = *(void *)(a1 + 32);
      v11 = *(_DWORD *)(v10 + 340);
      v12 = nw_endpoint_get_logging_description(*(void **)(v10 + 24));
      v13 = 136446722;
      size_t v14 = "nw_resolver_start_query_timer_block_invoke";
      unint64_t v15 = 1024;
      *(_DWORD *)v16 = v11;
      *(_WORD *)&v16[4] = 2082;
      *(void *)&v16[6] = v12;
      id v6 = "%{public}s [R%u] Query fired: did not receive all answers in time for %{public}s";
      v7 = v3;
      v8 = 28;
      goto LABEL_12;
    }

    goto LABEL_13;
  }

  if (object_getClass(v2) == v4
    && (v22 = xpc_dictionary_get_value(v2, "resolution_reports")) != 0LL
    && (BOOL v23 = v22, object_getClass(v22) == (Class)MEMORY[0x1895F9220]))
  {
    v10 = xpc_retain(v23);
    if (v10)
    {
      BOOL v24 = nw_array_create();
      resolution_reports = v5->resolution_reports;
      v5->resolution_reports = (OS_nw_array *)v24;

      v48[0] = MEMORY[0x1895F87A8];
      v48[1] = 3221225472LL;
      v48[2] = __nw_establishment_report_create_from_dictionary_block_invoke_4;
      v48[3] = &unk_189BC8CB8;
      v49 = v5;
      xpc_array_apply(v10, v48);
    }
  }

  else
  {
    v10 = 0LL;
  }

  v11 = v5;

LABEL_16:
LABEL_17:

  return v5;
}

    free(v4);
    goto LABEL_14;
  }

  v8 = state64 != 0;
  os_log_type_t v9 = 1;
  return v8 | (v9 << 8);
}

    free(v10);
    goto LABEL_14;
  }
  v8 = +[NWEndpoint endpointWithInternalEndpoint:](&OBJC_CLASS___NWEndpoint, "endpointWithInternalEndpoint:", host);
LABEL_15:

  return (NWHostEndpoint *)v8;
}

    free(v6);
    goto LABEL_14;
  }

  [NSString stringWithUTF8String:v3];
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  free(v3);
  return (NSString *)v4;
}
      }
    }

    else if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      os_log_type_t v9 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v11 = v5[42]._os_unfair_lock_opaque;
        v12 = _Block_copy(v6);
        *(_DWORD *)addrinfo buf = 136446722;
        v27 = "nw_connection_group_set_new_connection_handler";
        v28 = 1024;
        os_log_type_t v29 = v11;
        v30 = 2048;
        v31 = v12;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] set new connection handler: %p",  buf,  0x1Cu);
      }

      goto LABEL_13;
    }

    _Block_object_dispose(v32, 8);
    goto LABEL_15;
  }

  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v32 = 136446210;
  *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
  size_t v14 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  id v25 = 0;
  if (__nwlog_fault(v14, buf, &v25))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = buf[0];
      if (os_log_type_enabled(v15, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v32 = 136446210;
        *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null group", v32, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v18 = buf[0];
      v19 = os_log_type_enabled(v15, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)v32 = 136446466;
          *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
          *(_WORD *)&v32[12] = 2082;
          *(void *)&v32[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null group, dumping backtrace:%{public}s",  v32,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (v19)
      {
        *(_DWORD *)v32 = 136446210;
        *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null group, no backtrace", v32, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = buf[0];
      if (os_log_type_enabled(v15, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v32 = 136446210;
        *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null group, backtrace limit exceeded",  v32,  0xCu);
      }
    }
  }

    os_log_type_t v17 = (id *)v10;
    os_log_type_t v9 = (nw_endpoint *)v17[1];
  }

  v10 = (void *)*((void *)v43 + 5);
  if (v10)
  {
    v11 = v10;
    os_log_type_t v48 = 0LL;
    v49 = &v48;
    os_log_type_t v50 = 0x2020000000LL;
    BOOL v51 = 0;
    v12 = v11 + 34;
    *(void *)addrinfo buf = v6;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
    *(void *)&buf[24] = &unk_189BC9210;
    v54 = &v48;
    v13 = v11;
    id v53 = v13;
    os_unfair_lock_lock(v12);
    __nw_connection_is_cancelled_or_failed_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v12);
    LODWORD(v12) = *((unsigned __int8 *)v49 + 24);

    _Block_object_dispose(&v48, 8);
    if ((_DWORD)v12)
    {
      if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        size_t v14 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          unint64_t v15 = *((_DWORD *)v3 + 42);
          v16 = *((void *)v43 + 5);
          *(_DWORD *)addrinfo buf = 136446722;
          *(void *)&buf[4] = "nw_connection_group_extract_connection_for_message";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          *(_WORD *)&buf[18] = 2112;
          *(void *)&buf[20] = v16;
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] Connection %@ already cancelled or failed",  buf,  0x1Cu);
        }
      }

      os_log_type_t v17 = (void *)*((void *)v43 + 5);
      *((void *)v43 + 5) = 0LL;
    }

    else
    {
      nw_connection_reset_client(*((void **)v43 + 5));
    }
  }

  if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    BOOL v18 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v19 = *((_DWORD *)v3 + 42);
      v20 = *((void *)v43 + 5);
      *(_DWORD *)addrinfo buf = 136446722;
      *(void *)&buf[4] = "nw_connection_group_extract_connection_for_message";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v19;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v20;
      _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] returning connection %@", buf, 0x1Cu);
    }
  }

  v21 = (nw_connection *)*((id *)v43 + 5);
  _Block_object_dispose(type, 8);

LABEL_30:
  return v21;
}

        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v13 = *(void *)(a2 + 88);
          if (v13)
          {
            size_t v14 = v13 - 1;
            *(void *)(a2 + 88) = v14;
            if (!v14)
            {
              unint64_t v15 = *(void (***)(void))(a2 + 64);
              if (v15)
              {
                *(void *)(a2 + 64) = 0LL;
                v15[2](v15);
                _Block_release(v15);
              }

              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v16 = *(const void **)(a2 + 64);
                if (v16) {
                  _Block_release(v16);
                }
              }

              free((void *)a2);
            }
          }
        }

        goto LABEL_14;
      }

      __nwlog_obj();
      *(_DWORD *)addrinfo buf = 136446210;
      v30 = "__nw_protocol_register_notification";
      v21 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (__nwlog_fault(v21, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v22 = (os_log_s *)__nwlog_obj();
          BOOL v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_48;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "__nw_protocol_register_notification";
          BOOL v24 = "%{public}s called with null type";
LABEL_47:
          _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
          goto LABEL_48;
        }

        if (!v27)
        {
          v22 = (os_log_s *)__nwlog_obj();
          BOOL v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_48;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "__nw_protocol_register_notification";
          BOOL v24 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_47;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        v22 = (os_log_s *)__nwlog_obj();
        BOOL v23 = type;
        v26 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v26) {
            goto LABEL_48;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "__nw_protocol_register_notification";
          BOOL v24 = "%{public}s called with null type, no backtrace";
          goto LABEL_47;
        }

        if (v26)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v30 = "__nw_protocol_register_notification";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null type, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
      }

        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          v13 = *(void *)(a2 + 88);
          if (v13)
          {
            size_t v14 = v13 - 1;
            *(void *)(a2 + 88) = v14;
            if (!v14)
            {
              unint64_t v15 = *(void (***)(void))(a2 + 64);
              if (v15)
              {
                *(void *)(a2 + 64) = 0LL;
                v15[2](v15);
                _Block_release(v15);
              }

              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                v16 = *(const void **)(a2 + 64);
                if (v16) {
                  _Block_release(v16);
                }
              }

              free((void *)a2);
            }
          }
        }

        goto LABEL_14;
      }

      __nwlog_obj();
      *(_DWORD *)addrinfo buf = 136446210;
      v30 = "__nw_protocol_unregister_notification";
      v21 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (__nwlog_fault(v21, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v22 = (os_log_s *)__nwlog_obj();
          BOOL v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_48;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "__nw_protocol_unregister_notification";
          BOOL v24 = "%{public}s called with null type";
LABEL_47:
          _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
          goto LABEL_48;
        }

        if (!v27)
        {
          v22 = (os_log_s *)__nwlog_obj();
          BOOL v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_48;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "__nw_protocol_unregister_notification";
          BOOL v24 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_47;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        v22 = (os_log_s *)__nwlog_obj();
        BOOL v23 = type;
        v26 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v26) {
            goto LABEL_48;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "__nw_protocol_unregister_notification";
          BOOL v24 = "%{public}s called with null type, no backtrace";
          goto LABEL_47;
        }

        if (v26)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v30 = "__nw_protocol_unregister_notification";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null type, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
      }

    free(v14);
    goto LABEL_14;
  }

  v26 = v8;
  [MEMORY[0x189603F18] arrayWithObjects:&v26 count:1];
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  [a1 monitorWithNetworkDescriptionArray:v11 endpoint:v9 parameters:v10];
  v12 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_15:
  return (NWMonitor *)v12;
}

    v8 = 0LL;
    goto LABEL_14;
  }

  v7 = node;
  if ((v4[405] & 0x80000000) == 0 && gLogDatapath)
  {
    __nwlog_obj();
    BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      BOOL v24 = *(void *)(v7 + 32);
      *(_DWORD *)addrinfo buf = 136447234;
      v30 = "nw_protocol_instance_get_flow_for_key";
      v31 = 2082;
      v32 = v4 + 407;
      os_log_type_t v33 = 2080;
      v34 = " ";
      os_log_type_t v35 = 2048;
      os_log_type_t v36 = v24;
      v37 = 2048;
      os_log_type_t v38 = a2;
      _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sFound flow %llx for custom flow mapping key %p",  buf,  0x34u);
    }
  }

  v8 = *(void *)(v7 + 32);
LABEL_14:

  return v8;
}

  v6[98] = v8;
  *((_BYTE *)v6 + 792) = v9 | 1;
  if (a4)
  {
    v11 = (dispatch_object_s *)os_retain(a4);
    v12 = *((_BYTE *)v6 + 824);
    if ((v12 & 1) == 0) {
      goto LABEL_19;
    }
  }

  else
  {
    v11 = 0LL;
    v12 = *((_BYTE *)v6 + 824);
    if ((v12 & 1) == 0) {
      goto LABEL_19;
    }
  }

  v13 = v6[102];
  if (v13)
  {
    os_release(v13);
    v12 = *((_BYTE *)v6 + 824);
  }

    free(v6);
    goto LABEL_14;
  }

  +[NWEndpoint endpointWithInternalEndpoint:](&OBJC_CLASS___NWEndpoint, "endpointWithInternalEndpoint:", v3);
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:

  return (NWEndpoint *)v4;
}

    free(v6);
    goto LABEL_14;
  }

  +[NWParameters parametersWithCParameters:](&OBJC_CLASS___NWParameters, "parametersWithCParameters:", v3);
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:

  return (NWParameters *)v4;
}

    return 0LL;
  }

  if (a6)
  {
    v12 = v7;
    v13 = v6;
    while (*v12)
    {
      ++v12;
      if (!--v13) {
        goto LABEL_23;
      }
    }

    if (v13 >= 2) {
      *v12++ = 64;
    }
    char *v12 = 0;
LABEL_23:
    while (*v7)
    {
      ++v7;
      if (!--v6) {
        return 1LL;
      }
    }

    if (v6 < 2)
    {
LABEL_31:
      char *v7 = 0;
    }

    else
    {
      size_t v14 = 0LL;
      while (1)
      {
        unint64_t v15 = *(unsigned __int8 *)(a6 + v14);
        v7[v14] = v15;
        if (!v15) {
          break;
        }
        --v6;
        ++v14;
        if (v6 <= 1)
        {
          v7 += v14;
          goto LABEL_31;
        }
      }
    }
  }

  return 1LL;
}

  nw_socks5_connection_remove_prefer_wifi_request(self);
  if (!self->sc_busy_counter) {
    goto LABEL_21;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v9 = (id)gLogObj;
  sc_busy_counter = self->sc_busy_counter;
  *(_DWORD *)addrinfo buf = 136446722;
  v32 = "-[NWConcrete_nw_socks5_connection dealloc]";
  os_log_type_t v33 = 2112;
  v34 = self;
  os_log_type_t v35 = 2048;
  os_log_type_t v36 = sc_busy_counter;
  v27 = 32;
  v26 = buf;
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  os_log_type_t v29 = 0;
  if (__nwlog_fault(v11, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (os_log_s *)(id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        size_t v14 = self->sc_busy_counter;
        *(_DWORD *)addrinfo buf = 136446722;
        v32 = "-[NWConcrete_nw_socks5_connection dealloc]";
        os_log_type_t v33 = 2112;
        v34 = self;
        os_log_type_t v35 = 2048;
        os_log_type_t v36 = v14;
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s %@ dealloc while busy count is %llu, not zero", buf, 0x20u);
      }
    }

    else if (v29)
    {
      BOOL v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (os_log_s *)(id)gLogObj;
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (v18)
      {
        if (v20)
        {
          v21 = self->sc_busy_counter;
          *(_DWORD *)addrinfo buf = 136446978;
          v32 = "-[NWConcrete_nw_socks5_connection dealloc]";
          os_log_type_t v33 = 2112;
          v34 = self;
          os_log_type_t v35 = 2048;
          os_log_type_t v36 = v21;
          v37 = 2082;
          os_log_type_t v38 = v18;
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s %@ dealloc while busy count is %llu, not zero, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v18);
        if (v11) {
          goto LABEL_20;
        }
        goto LABEL_21;
      }

      if (v20)
      {
        id v25 = self->sc_busy_counter;
        *(_DWORD *)addrinfo buf = 136446722;
        v32 = "-[NWConcrete_nw_socks5_connection dealloc]";
        os_log_type_t v33 = 2112;
        v34 = self;
        os_log_type_t v35 = 2048;
        os_log_type_t v36 = v25;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s %@ dealloc while busy count is %llu, not zero, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (os_log_s *)(id)gLogObj;
      BOOL v23 = type;
      if (os_log_type_enabled(v12, type))
      {
        BOOL v24 = self->sc_busy_counter;
        *(_DWORD *)addrinfo buf = 136446722;
        v32 = "-[NWConcrete_nw_socks5_connection dealloc]";
        os_log_type_t v33 = 2112;
        v34 = self;
        os_log_type_t v35 = 2048;
        os_log_type_t v36 = v24;
        _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s %@ dealloc while busy count is %llu, not zero, backtrace limit exceeded",  buf,  0x20u);
      }
    }
  }

  if (v11) {
LABEL_20:
  }
    free(v11);
LABEL_21:
  v28.os_log_type_t receiver = self;
  v28.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_socks5_connection;
  -[NWConcrete_nw_socks5_connection dealloc](&v28, sel_dealloc, v26, v27);
}

  v13 = v21;
  size_t v14 = v21[14];
  if (!v14)
  {
    unint64_t v15 = mach_continuous_time();
    if (v15 <= 1) {
      v16 = 1LL;
    }
    else {
      v16 = v15;
    }
    v13 = v21;
    v21[15] = v16;
    size_t v14 = v21[14];
  }

  v13[14] = v14 + 1;
LABEL_19:
}

    free(v23);
    goto LABEL_14;
  }

  *(void *)v54 = 0LL;
  *(void *)&v54[8] = v54;
  *(void *)&v54[16] = 0x3032000000LL;
  os_log_type_t v55 = __Block_byref_object_copy__16053;
  os_log_type_t v56 = __Block_byref_object_dispose__16054;
  WeakRetained = objc_loadWeakRetained((id *)v5 + 3);
  v16 = (nw_connection *)*((void *)v5 + 18);
  os_log_type_t v17 = MEMORY[0x1895F87A8];
  handler[0] = MEMORY[0x1895F87A8];
  handler[1] = 3221225472LL;
  handler[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke;
  handler[3] = &unk_189BBBDE8;
  BOOL v18 = v5;
  v46 = v18;
  nw_connection_set_viability_changed_handler(v16, handler);
  v19 = (nw_connection *)*((void *)v5 + 18);
  v42[0] = v17;
  v42[1] = 3221225472LL;
  v42[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_157;
  v42[3] = &unk_189BB82D8;
  v20 = v18;
  v43 = v20;
  v44 = v54;
  nw_connection_set_state_changed_handler(v19, v42);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v21 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)addrinfo buf = 136446722;
    v49 = "nw_socks5_connection_connect_outer_on_queue";
    os_log_type_t v50 = 2114;
    BOOL v51 = v20;
    os_log_type_t v52 = 2112;
    id v53 = v6;
    _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ connecting to remote %@",  buf,  0x20u);
  }

  nw_connection_set_queue(*((nw_connection_t *)v5 + 18), v20[5]);
  nw_socks5_connection_increment_busy_on_queue(v20, *(void **)(*(void *)&v54[8] + 40LL));
  nw_connection_start(*((nw_connection_t *)v5 + 18));

  _Block_object_dispose(v54, 8);
LABEL_29:
}

  v16 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(*(void *)(a1 + 32) + 192LL) += *(void *)(a1 + 48);
  os_log_type_t v17 = *(void *)(a1 + 32);
  if (!v16)
  {
LABEL_30:
    nw_socks5_connection_inner_connection_read_on_queue((NWConcrete_nw_socks5_connection *)v17);
    goto LABEL_31;
  }

  *(_BYTE *)(v17 + 160) |= 1u;
  BOOL v18 = *(unsigned __int8 **)(a1 + 32);
  if ((~v18[160] & 3) == 0) {
    nw_socks5_connection_cancel_on_queue(v18, 0LL);
  }
LABEL_31:
}

  v13 = v23[14];
  if (!v13 || (size_t v14 = v13 - 1, (v23[14] = v14) == 0LL))
  {
    unint64_t v15 = v23[15];
    if (v15)
    {
      v16 = mach_continuous_time();
      if (v16 <= 1) {
        os_log_type_t v17 = 1LL;
      }
      else {
        os_log_type_t v17 = v16;
      }
      BOOL v18 = v23[16] + nw_delta_nanos(v15, v17);
      v23[15] = 0LL;
      v23[16] = v18;
    }
  }

  agentData = self->_agentData;
  if (agentData) {
    [v3 setObject:agentData forKey:@"agentData"];
  }
  return v3;
}

  if (self->_agentData)
  {
    PBDataWriterWriteDataField();
    size_t v4 = v6;
  }
}
}
}
}

    free(v5);
    goto LABEL_14;
  }

  os_unfair_lock_lock(v1 + 30);
  v3 = *(id *)&v2[10]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 30);
LABEL_15:

  return v3;
}

    free(v5);
    goto LABEL_14;
  }

  os_unfair_lock_lock(v1 + 30);
  v3 = *(id *)&v2[12]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 30);
LABEL_15:

  return v3;
}

  return v5;
}

  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 30);
  if (v6)
  {
    v10 = (unsigned __int8 *)v1;
    v11 = v5;
    v12 = v11;
    if (!v11 || v10[156] == 255)
    {
      v13 = v14;
      if (!v14) {
        goto LABEL_18;
      }
    }

    else
    {
      v13 = v14;
      (*((void (**)(id, void, void *))v11 + 2))(v11, v15, v14);
      if (!v13)
      {
LABEL_18:

        goto LABEL_19;
      }
    }

    free(v13);
    goto LABEL_18;
  }

  if (!*((void *)v5 + 9))
  {
    v10 = (void **)(v5 + 24);
    v22 = *((void *)v5 + 3);
    if (!v22) {
      goto LABEL_59;
    }
    if (!*((void *)v5 + 5))
    {
      (*(void (**)(uint64_t, id))(v22 + 16))(v22, v7);
LABEL_58:
      os_log_type_t v48 = *v10;
      NWConcrete_nw_host_endpoint *v10 = 0LL;

      goto LABEL_59;
    }

    if (!v7)
    {
LABEL_57:
      v44 = _Block_copy(*((const void **)v5 + 3));
      os_log_type_t v45 = (void *)*((void *)v5 + 5);
      v46 = *((_DWORD *)v5 + 12);
      v55[0] = MEMORY[0x1895F87A8];
      v55[1] = 3221225472LL;
      v55[2] = ___ZL23nw_write_request_reportP27NWConcrete_nw_write_requestPU28objcproto17OS_dispatch_queue8NSObjectPU22objcproto11OS_nw_errorS1__block_invoke;
      v55[3] = &unk_189BC91E8;
      BOOL v57 = v44;
      os_log_type_t v56 = v7;
      v47 = v44;
      nw_connection_async_client_if_needed_with_override(v45, v6, v46, v55);

      goto LABEL_58;
    }

    BOOL v23 = v7;
    BOOL v24 = v23[2];

    if (v24 == 1 && (id v25 = v23, v26 = v25[3], v25, v26 == 89))
    {
      v27 = *(void *)(*((void *)v5 + 5) + 16LL);
      if (!v27 || nw_path_parameters_get_logging_disabled(*(void *)(v27 + 104))) {
        goto LABEL_57;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v28 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_INFO)) {
        goto LABEL_56;
      }
      os_log_type_t v29 = *(_DWORD *)(*((void *)v5 + 5) + 448LL);
      *(_DWORD *)addrinfo buf = 136446466;
      v59 = "nw_write_request_report";
      char v60 = 1024;
      os_log_type_t v61 = v29;
      v30 = "%{public}s [C%u] Send cancelled";
      v31 = v28;
      v32 = OS_LOG_TYPE_INFO;
      os_log_type_t v33 = 18;
    }

    else
    {
      v42 = *(void *)(*((void *)v5 + 5) + 16LL);
      if (!v42 || nw_path_parameters_get_logging_disabled(*(void *)(v42 + 104))) {
        goto LABEL_57;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v28 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      v43 = *(_DWORD *)(*((void *)v5 + 5) + 448LL);
      *(_DWORD *)addrinfo buf = 136446722;
      v59 = "nw_write_request_report";
      char v60 = 1024;
      os_log_type_t v61 = v43;
      objc_super v62 = 2114;
      v63 = v23;
      v30 = "%{public}s [C%u] Send failed with error %{public}@";
      v31 = v28;
      v32 = OS_LOG_TYPE_ERROR;
      os_log_type_t v33 = 28;
    }

    _os_log_impl(&dword_181A5C000, v31, v32, v30, buf, v33);
LABEL_56:

    goto LABEL_57;
  }

  v10 = (void **)(v5 + 32);
  os_log_type_t v9 = *((void *)v5 + 4);
  if (v9)
  {
    if (!*((void *)v5 + 5))
    {
      (*(void (**)(uint64_t, void, BOOL, id))(v9 + 16))(v9, *((void *)v5 + 14), v7 == 0LL, v7);
      goto LABEL_46;
    }

    if (!v7)
    {
LABEL_45:
      v37 = _Block_copy(*((const void **)v5 + 4));
      os_log_type_t v38 = (void *)*((void *)v5 + 5);
      v39 = *((_DWORD *)v5 + 12);
      v51[0] = MEMORY[0x1895F87A8];
      v51[1] = 3221225472LL;
      v51[2] = ___ZL23nw_write_request_reportP27NWConcrete_nw_write_requestPU28objcproto17OS_dispatch_queue8NSObjectPU22objcproto11OS_nw_errorS1__block_invoke_93;
      v51[3] = &unk_189BC50A8;
      v54 = v37;
      os_log_type_t v52 = v5;
      id v53 = v7;
      os_log_type_t v40 = v37;
      nw_connection_async_client_if_needed_with_override(v38, v6, v39, v51);

LABEL_46:
      BOOL v41 = *((void *)v5 + 10);
      if (v41)
      {
        nw_queue_cancel_source(v41, v34);
        *((void *)v5 + 10) = 0LL;
      }

      goto LABEL_58;
    }

    v11 = v7;
    v12 = v11[2];

    if (v12 == 1 && (v13 = v11, size_t v14 = v13[3], v13, v14 == 89))
    {
      unint64_t v15 = *(void *)(*((void *)v5 + 5) + 16LL);
      if (!v15 || nw_path_parameters_get_logging_disabled(*(void *)(v15 + 104))) {
        goto LABEL_45;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v16 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_INFO)) {
        goto LABEL_44;
      }
      os_log_type_t v17 = *(_DWORD *)(*((void *)v5 + 5) + 448LL);
      *(_DWORD *)addrinfo buf = 136446466;
      v59 = "nw_write_request_report";
      char v60 = 1024;
      os_log_type_t v61 = v17;
      BOOL v18 = "%{public}s [C%u] Send cancelled";
      v19 = v16;
      v20 = OS_LOG_TYPE_INFO;
      v21 = 18;
    }

    else
    {
      os_log_type_t v35 = *(void *)(*((void *)v5 + 5) + 16LL);
      if (!v35 || nw_path_parameters_get_logging_disabled(*(void *)(v35 + 104))) {
        goto LABEL_45;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v16 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        goto LABEL_44;
      }
      os_log_type_t v36 = *(_DWORD *)(*((void *)v5 + 5) + 448LL);
      *(_DWORD *)addrinfo buf = 136446722;
      v59 = "nw_write_request_report";
      char v60 = 1024;
      os_log_type_t v61 = v36;
      objc_super v62 = 2114;
      v63 = v11;
      BOOL v18 = "%{public}s [C%u] Send failed with error %{public}@";
      v19 = v16;
      v20 = OS_LOG_TYPE_ERROR;
      v21 = 28;
    }

    _os_log_impl(&dword_181A5C000, v19, v20, v18, buf, v21);
LABEL_44:

    goto LABEL_45;
  }

      os_release(v4);
      return;
    }

    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 0x40000000LL;
    v17[2] = ___ZN2nw4http22content_length_manager20set_outbound_messageEP20nw_protocol_metadata_block_invoke;
    v17[3] = &__block_descriptor_tmp_131_40551;
    v17[4] = this;
    v7 = v17;
  }

  else
  {
    size_t v4 = nw_http_metadata_copy_request(a2);
    has_method = nw_http_request_has_method(v4, (uint64_t)"HEAD");
    id v6 = MEMORY[0x1895F87A8];
    *((_BYTE *)this + 49) = has_method;
    v16[0] = v6;
    v16[1] = 0x40000000LL;
    v16[2] = ___ZN2nw4http22content_length_manager20set_outbound_messageEP20nw_protocol_metadata_block_invoke_2;
    v16[3] = &__block_descriptor_tmp_132;
    v16[4] = this;
    v7 = v16;
  }

  nw_http_fields_access_value_by_name(v4, (unint64_t)"Content-Length", v7);
  if (v4) {
    goto LABEL_13;
  }
}

    free(v6);
    goto LABEL_14;
  }

  size_t v4 = nw_nsstring((uint64_t)bonjour_service_name);
  return (NSString *)(id)v4;
}

    free(v6);
    goto LABEL_14;
  }

  size_t v4 = nw_nsstring((uint64_t)bonjour_service_type);
  return (NSString *)(id)v4;
}

    free(v6);
    goto LABEL_14;
  }

  size_t v4 = nw_nsstring((uint64_t)bonjour_service_domain);
  return (NSString *)(id)v4;
}

      *(_OWORD *)v9->uuid = *(_OWORD *)v7->uuid;
      v9->receivedSequenceNumber = v7->sequenceNumber;
      *((_BYTE *)v9 + 500) = *((_BYTE *)v9 + 500) & 0xFE | *((_BYTE *)v7 + 616) & 1;
      if (!v97) {
        goto LABEL_15;
      }
      unint64_t v15 = (os_unfair_lock_s *)v97;
      *(void *)v100 = 0LL;
      *(void *)&v100[8] = v100;
      *(void *)&v100[16] = 0x2020000000LL;
      LOBYTE(v101) = 0;
      v16 = MEMORY[0x1895F87A8];
      os_log_type_t v17 = v15 + 34;
      *(void *)addrinfo buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
      *(void *)&buf[24] = &unk_189BC9210;
      *(void *)&buf[40] = v100;
      BOOL v18 = v15;
      *(void *)&buf[32] = v18;
      os_unfair_lock_lock(v17);
      (*(void (**)(uint8_t *))&buf[16])(buf);
      os_unfair_lock_unlock(v17);
      v19 = *(unsigned __int8 *)(*(void *)&v100[8] + 24LL);

      _Block_object_dispose(v100, 8);
      if (v19)
      {
LABEL_15:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)addrinfo buf = 136446722;
          *(void *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 2114;
          *(void *)&buf[24] = v7;
          _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ Bad connection for request %{public}@",  buf,  0x20u);
        }

        v21 = 57LL;
LABEL_18:
        v96[2](v96, v21);
LABEL_19:

        goto LABEL_20;
      }

      v22 = v18;
      *(void *)v100 = 0LL;
      *(void *)&v100[8] = v100;
      LODWORD(v101) = -1;
      *(void *)&v100[16] = 0x2020000000LL;
      *(void *)addrinfo buf = v16;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_connection_get_connected_socket_block_invoke;
      *(void *)&buf[24] = &unk_189BC9210;
      *(void *)&buf[32] = v22;
      *(void *)&buf[40] = v100;
      BOOL v23 = *(void **)&buf[32];
      os_unfair_lock_lock(v17);
      (*(void (**)(uint8_t *))&buf[16])(buf);
      os_unfair_lock_unlock(v17);
      BOOL v24 = *(_DWORD *)(*(void *)&v100[8] + 24LL);

      _Block_object_dispose(v100, 8);
      if (v24 < 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v36 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)addrinfo buf = 136446978;
          *(void *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 2114;
          *(void *)&buf[24] = v23;
          *(_WORD *)&buf[32] = 2114;
          *(void *)&buf[34] = v9;
          _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ failed to extract socket of connection %{public}@ for activeConnection %{public}@",  buf,  0x2Au);
        }

        v37 = 57LL;
LABEL_79:
        v96[2](v96, v37);
        goto LABEL_19;
      }

      id v25 = dup(v24);
      v26 = v25;
      if (v25 < 0)
      {
        os_log_type_t v38 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v39 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)addrinfo buf = 136447490;
          *(void *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v24;
          *(_WORD *)&buf[28] = 2114;
          *(void *)&buf[30] = v23;
          *(_WORD *)&buf[38] = 2114;
          *(void *)&buf[40] = v9;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = v38;
          _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ failed to dup socket from internal [socket%d] of connection %{public}@ for activeConne ction %{public}@ %{darwin.errno}d",  buf,  0x36u);
        }

        v96[2](v96, v38);
        goto LABEL_19;
      }

      v9->dupedSocketFD = v25;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)addrinfo buf = 136447490;
        *(void *)&buf[4] = "nw_service_connector_accept_connection_for_request";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v95;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v26;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v24;
        *(_WORD *)&buf[34] = 2114;
        *(void *)&buf[36] = v23;
        *(_WORD *)&buf[44] = 2114;
        *(void *)&buf[46] = v9;
        _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ duped [socket%d] from internal [socket%d] of connection %{public}@ for activeConnection %{public}@",  buf,  0x36u);
      }

      v28 = v95;
      v93 = v9;
      v94 = (NWConcrete_nw_service_connector *)v28;
      if (v28)
      {
        if (*((void *)v28 + 11))
        {
          v130 = 0;
          v128 = 0u;
          v129 = 0u;
          v126 = 0u;
          v127 = 0u;
          v124 = 0u;
          v125 = 0u;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v107 = 0u;
          memset(buf, 0, sizeof(buf));
          if (nwsc_get_identifier(*p_endpoint, (uint64_t)v9->service, buf))
          {
            os_log_type_t v29 = nw_dictionary_copy_value(*((void *)v28 + 11), (uint64_t)buf);
            v30 = v29;
            if (!v29 || (*((_DWORD *)v29 + 124) & 0x80000000) != 0)
            {
LABEL_74:
              nw_dictionary_set_value(*((void *)v28 + 11), (const char *)buf, v93);

              goto LABEL_75;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v31 = (id)gLogObj;
            *(_DWORD *)v100 = 136446978;
            *(void *)&v100[4] = "nw_service_connector_add_active_connection";
            *(_WORD *)&v100[12] = 2114;
            v32 = v28;
            *(void *)&v100[14] = v28;
            *(_WORD *)&v100[22] = 2114;
            v101 = (char *)v30;
            v102 = 2114;
            v103 = (char *)v93;
            os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v98 = 0;
            if (__nwlog_fault(v33, &type, &v98))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v35 = type;
                if (os_log_type_enabled(v34, type))
                {
                  *(_DWORD *)v100 = 136446978;
                  *(void *)&v100[4] = "nw_service_connector_add_active_connection";
                  *(_WORD *)&v100[12] = 2114;
                  *(void *)&v100[14] = v28;
                  *(_WORD *)&v100[22] = 2114;
                  v101 = (char *)v30;
                  v102 = 2114;
                  v103 = (char *)v93;
                  _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s %{public}@ previous %{public}@ has socket when adding new %{public}@",  v100,  0x2Au);
                }
              }

              else
              {
                if (v98)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  os_log_type_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  id v53 = type;
                  v54 = os_log_type_enabled(v52, type);
                  if (backtrace_string)
                  {
                    if (v54)
                    {
                      *(_DWORD *)v100 = 136447234;
                      *(void *)&v100[4] = "nw_service_connector_add_active_connection";
                      *(_WORD *)&v100[12] = 2114;
                      *(void *)&v100[14] = v32;
                      *(_WORD *)&v100[22] = 2114;
                      v101 = (char *)v30;
                      v102 = 2114;
                      v103 = (char *)v93;
                      v104 = 2082;
                      v105 = backtrace_string;
                      _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s %{public}@ previous %{public}@ has socket when adding new %{public}@, dumping backtrace:%{public}s",  v100,  0x34u);
                    }

                    free(backtrace_string);
                  }

                  else
                  {
                    if (v54)
                    {
                      *(_DWORD *)v100 = 136446978;
                      *(void *)&v100[4] = "nw_service_connector_add_active_connection";
                      *(_WORD *)&v100[12] = 2114;
                      *(void *)&v100[14] = v32;
                      *(_WORD *)&v100[22] = 2114;
                      v101 = (char *)v30;
                      v102 = 2114;
                      v103 = (char *)v93;
                      _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s %{public}@ previous %{public}@ has socket when adding new %{public}@, no backtrace",  v100,  0x2Au);
                    }
                  }

                  goto LABEL_71;
                }

                __nwlog_obj();
                v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v58 = type;
                if (os_log_type_enabled(v34, type))
                {
                  *(_DWORD *)v100 = 136446978;
                  *(void *)&v100[4] = "nw_service_connector_add_active_connection";
                  *(_WORD *)&v100[12] = 2114;
                  *(void *)&v100[14] = v28;
                  *(_WORD *)&v100[22] = 2114;
                  v101 = (char *)v30;
                  v102 = 2114;
                  v103 = (char *)v93;
                  _os_log_impl( &dword_181A5C000,  v34,  v58,  "%{public}s %{public}@ previous %{public}@ has socket when adding new %{public}@, backtrace limit exceeded",  v100,  0x2Au);
                }
              }
            }

  LODWORD(v20) = v11 >> 3;
  if ((v11 & 7) != 0) {
    v20 = (v20 + 1);
  }
  else {
    v20 = v20;
  }
  if (v20 < __n)
  {
    v21 = ~(-1LL << a1);
    v22 = vdupq_n_s64(-1LL << a1);
    if (v21 > v20) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = 2;
    }
    BOOL v24 = (uint64x2_t)vdupq_n_s64(v20);
    id v25 = (int16x8_t)vandq_s8( (int8x16_t)vuzp1q_s16( (int16x8_t)vuzp1q_s32( (int32x4_t)vcgeq_u64( v24,  (uint64x2_t)vsubq_s64((int64x2_t)xmmword_18272D7B0, v22)),  (int32x4_t)vcgeq_u64( v24,  (uint64x2_t)vsubq_s64((int64x2_t)xmmword_18272D7C0, v22))),  (int16x8_t)vuzp1q_s32( (int32x4_t)vcgeq_u64( v24,  (uint64x2_t)vsubq_s64((int64x2_t)xmmword_18272D7D0, v22)),  (int32x4_t)vcgeq_u64( v24,  (uint64x2_t)vsubq_s64((int64x2_t)xmmword_18272D7E0, v22)))),  (int8x16_t)xmmword_18272D7F0);
    v25.i32[0] = vaddvq_s16(v25);
    v26 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v25.i8);
    v26.i16[0] = vaddlv_u8(v26);
    BOOL result = (v23 + v26.i32[0] + v20);
    if (result <= a3)
    {
      v28 = *a2 & (-2 << a1) | (1 << a1);
      if (v21 <= v20)
      {
        v37 = -1 << a1;
        os_log_type_t v38 = ~v37;
        *a2 = v28 | ~(_BYTE)v37;
        v39 = a2 + 1;
        v28 = v20 - v38;
        if (v20 - v38 < 0x80)
        {
          LOBYTE(v20) = v20 - v38;
        }

        else
        {
          do
          {
            *v39++ = v28 | 0x80;
            v20 = v28 >> 7;
            os_log_type_t v40 = v28 >> 14;
            v28 >>= 7;
          }

          while (v40);
        }

        *v39 = v20;
      }

      else
      {
        *a2 = *a2 & (-2 << a1) | (1 << a1) | v20;
      }

      v46 = &a2[v23 + v26.i32[0]];
      if (__n < 0xF)
      {
        v47 = 0;
        if (__src != (unsigned __int8 *)v7)
        {
          do
          {
LABEL_47:
            char v60 = v28;
            while (1)
            {
              os_log_type_t v61 = *__src++;
              objc_super v62 = &encode_table[2 * v61];
              v28 = *v62;
              v63 = v62[1];
              v64 = v63 + v47;
              if (v63 + v47 > 0x3F) {
                break;
              }
              char v60 = (v60 << v63) | v28;
              v47 += v63;
              if (__src == (unsigned __int8 *)v7)
              {
                v66 = v46;
                v47 = v64;
                v28 = v60;
                goto LABEL_52;
              }
            }

            __int16 v65 = v60 << -(uint64_t)v47;
            v47 = v63 - (64 - v47);
            os_log_s *v46 = HIBYTE(v65);
            v46[1] = BYTE6(v65);
            v46[2] = BYTE5(v65);
            v46[3] = BYTE4(v65);
            LODWORD(v65) = v65 | (v28 >> v47);
            v46[4] = BYTE3(v65);
            v46[5] = BYTE2(v65);
            v46[6] = BYTE1(v65);
            v66 = v46 + 8;
            v46[7] = v65;
            v46 += 8;
          }

          while (__src != (unsigned __int8 *)v7);
LABEL_52:
          if (!v47) {
            goto LABEL_65;
          }
          goto LABEL_56;
        }
      }

      else
      {
        v47 = 0;
        os_log_type_t v48 = &a2[v23 + v26.i32[0]];
        while (1)
        {
          os_log_type_t v50 = __src + 2;
          v49 = *(unsigned __int16 *)__src;
          BOOL v51 = hencs[2 * v49];
          os_log_type_t v52 = v51 + v47;
          if (v51 + v47 > 0x3F)
          {
            os_log_type_t v56 = (unsigned __int16 *)__src;
          }

          else
          {
            do
            {
              v47 = v52;
              id v53 = v28 << v51;
              v54 = hencs[2 * v49 + 1];
              os_log_type_t v55 = *(unsigned __int16 *)v50;
              v50 += 2;
              v49 = v55;
              v28 = v53 | v54;
              BOOL v51 = hencs[2 * v55];
              v52 += v51;
            }

            while (v52 < 0x40);
            os_log_type_t v56 = (unsigned __int16 *)(v50 - 2);
          }

          __src = v50;
          if (v51 > 0x3F) {
            break;
          }
          BOOL v57 = 64 - v47;
          os_log_type_t v58 = v28 << -(uint64_t)v47;
          v28 = hencs[2 * v49 + 1];
          v47 = v51 - (64 - v47);
          *os_log_type_t v48 = HIBYTE(v58);
          v48[1] = BYTE6(v58);
          v48[2] = BYTE5(v58);
          v48[3] = BYTE4(v58);
          v59 = v58 | (v28 >> (v51 - v57));
          v48[4] = HIBYTE(v59);
          v48[5] = BYTE2(v59);
          v48[6] = BYTE1(v59);
          v46 = v48 + 8;
          v48[7] = v59;
          v48 += 8;
          if (__src + 14 >= (unsigned __int8 *)v7)
          {
            goto LABEL_47;
          }
        }

        v46 = v48;
        __src = (unsigned __int8 *)v56;
      }

        ;
      }

      while (v8 < v4);
      if ((v5 & 1) != 0) {
        v16 = 0;
      }
      else {
        v16 = *(_DWORD *)(a2 + 152);
      }
      BOOL v23 = v16 + (_DWORD)v8 - (_DWORD)__src;
      if (v23 > 0xA) {
        return 3LL;
      }
      *(void *)(a2 + 160) = v6;
      *(_DWORD *)(a2 + 148) = v7;
      *(_DWORD *)(a2 + 152) = v23;
      BOOL v24 = 1LL;
      *(_DWORD *)(a2 + 144) = 1;
      id v25 = 2 * *(_DWORD *)(a1 + 20);
      if (v25 >= 0xFF) {
        BOOL v24 = 2LL;
      }
      if (v25 > 0x17E) {
        ++v24;
      }
      if (v25 > 0x40FE) {
        ++v24;
      }
      if (v25 > 0x2000FE) {
        ++v24;
      }
      if (v25 > 0x100000FE) {
        ++v24;
      }
      if (*(void *)(a2 + 48) - *(void *)(a2 + 56) <= v24) {
        return 2LL;
      }
      else {
        return 3LL;
      }
    case 2:
      goto LABEL_23;
    case 3:
      if (*(_DWORD *)(a2 + 144))
      {
        os_log_type_t v9 = 0;
        v10 = *(void *)(a2 + 160);
        v11 = *(_DWORD *)(a2 + 148);
        v12 = __src;
        while (1)
        {
          v30 = *v12++;
          os_log_type_t v29 = v30;
          v10 += (unint64_t)(v30 & 0x7F) << v11;
          v11 += 7;
          if ((v30 & 0x80) == 0) {
            break;
          }
LABEL_57:
          if (v12 >= v4)
          {
            if ((v9 & 1) != 0) {
              v31 = 0;
            }
            else {
              v31 = *(_DWORD *)(a2 + 152);
            }
            os_log_type_t v35 = v31 + (_DWORD)v12 - (_DWORD)__src;
            if (v35 < 0xB)
            {
              *(void *)(a2 + 160) = v10;
              *(_DWORD *)(a2 + 148) = v11;
              *(_DWORD *)(a2 + 152) = v35;
              *(_DWORD *)(a2 + 144) = 1;
              return 2LL;
            }

            return 3LL;
          }
        }

        if (v11 >= 0x40)
        {
          if (v11 != 70) {
            return 3LL;
          }
          v22 = 3LL;
          if (v29 > 1 || (v10 & 0x8000000000000000LL) == 0) {
            return v22;
          }
        }
      }

      else
      {
        v13 = -1;
LABEL_24:
        v20 = -1 << v13;
        v12 = __src + 1;
        v21 = v20 & 0x80 ^ 0xFFu;
        v10 = *__src & v21;
        if (v10 >= v21)
        {
          v11 = 0;
          os_log_type_t v9 = 1;
          goto LABEL_57;
        }
      }

      *(void *)(a2 + 168) = v10;
      if ((*(_BYTE *)(a2 + 104) & 2) == 0)
      {
        v32 = 0;
LABEL_76:
        *(_DWORD *)(a2 + 68) = v32;
        *(void *)(a2 + 96) = parse_header_data;
        *(_DWORD *)(a2 + 136) = 0;
        if (v4 == v12) {
          return 2LL;
        }
        return parse_header_data(a1, a2, v12, v4 - v12);
      }

      v32 = *(_DWORD *)(a1 + 20);
      if (*(_DWORD *)(a2 + 176))
      {
        if (!v32) {
          goto LABEL_76;
        }
        os_log_type_t v33 = 2 * v32;
        v34 = *(_DWORD *)(a2 + 64) + v33 + ~v10;
      }

      else
      {
        if (!v32) {
          goto LABEL_76;
        }
        v34 = v10 + *(unsigned int *)(a2 + 64);
        os_log_type_t v33 = 2 * v32;
      }

      v32 = v34 % v33;
      goto LABEL_76;
    default:
      __assert_rtn("parse_header_prefix", "lsqpack.c", 3987, "0");
  }
}

        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          v22 = *(void *)(a1 + 88);
          if (v22)
          {
            BOOL v23 = v22 - 1;
            *(void *)(a1 + 88) = v23;
            if (!v23)
            {
              BOOL v24 = *(void (***)(void))(a1 + 64);
              if (v24)
              {
                *(void *)(a1 + 64) = 0LL;
                v24[2](v24);
                _Block_release(v24);
              }

              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                id v25 = *(const void **)(a1 + 64);
                if (v25) {
                  _Block_release(v25);
                }
              }

              free((void *)a1);
            }
          }
        }

        goto LABEL_14;
      }
    }

    __nwlog_obj();
    v27 = *(const char **)(v3 + 16);
    *(_DWORD *)addrinfo buf = 136446722;
    v43 = "__nw_protocol_connect";
    if (!v27) {
      v27 = "invalid";
    }
    v44 = 2082;
    os_log_type_t v45 = (void *)v27;
    v46 = 2048;
    v47 = v3;
    v28 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v40 = 0;
    if (__nwlog_fault(v28, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v29 = (os_log_s *)__nwlog_obj();
        v30 = type;
        if (!os_log_type_enabled(v29, type)) {
          goto LABEL_95;
        }
        v31 = *(const char **)(v3 + 16);
        if (!v31) {
          v31 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v43 = "__nw_protocol_connect";
        v44 = 2082;
        os_log_type_t v45 = (void *)v31;
        v46 = 2048;
        v47 = v3;
        v32 = "%{public}s protocol %{public}s (%p) has invalid connect callback";
LABEL_94:
        _os_log_impl(&dword_181A5C000, v29, v30, v32, buf, 0x20u);
        goto LABEL_95;
      }

      if (!v40)
      {
        os_log_type_t v29 = (os_log_s *)__nwlog_obj();
        v30 = type;
        if (!os_log_type_enabled(v29, type)) {
          goto LABEL_95;
        }
        os_log_type_t v38 = *(const char **)(v3 + 16);
        if (!v38) {
          os_log_type_t v38 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v43 = "__nw_protocol_connect";
        v44 = 2082;
        os_log_type_t v45 = (void *)v38;
        v46 = 2048;
        v47 = v3;
        v32 = "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded";
        goto LABEL_94;
      }

      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v29 = (os_log_s *)__nwlog_obj();
      v30 = type;
      v34 = os_log_type_enabled(v29, type);
      if (!v33)
      {
        if (!v34) {
          goto LABEL_95;
        }
        v39 = *(const char **)(v3 + 16);
        if (!v39) {
          v39 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v43 = "__nw_protocol_connect";
        v44 = 2082;
        os_log_type_t v45 = (void *)v39;
        v46 = 2048;
        v47 = v3;
        v32 = "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace";
        goto LABEL_94;
      }

      if (v34)
      {
        os_log_type_t v35 = *(const char **)(v3 + 16);
        if (!v35) {
          os_log_type_t v35 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446978;
        v43 = "__nw_protocol_connect";
        v44 = 2082;
        os_log_type_t v45 = (void *)v35;
        v46 = 2048;
        v47 = v3;
        os_log_type_t v48 = 2082;
        v49 = v33;
        _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v33);
    }

        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          v22 = *(void *)(a1 + 88);
          if (v22)
          {
            BOOL v23 = v22 - 1;
            *(void *)(a1 + 88) = v23;
            if (!v23)
            {
              BOOL v24 = *(void (***)(void))(a1 + 64);
              if (v24)
              {
                *(void *)(a1 + 64) = 0LL;
                v24[2](v24);
                _Block_release(v24);
              }

              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                id v25 = *(const void **)(a1 + 64);
                if (v25) {
                  _Block_release(v25);
                }
              }

              free((void *)a1);
            }
          }
        }

        goto LABEL_14;
      }
    }

    __nwlog_obj();
    v27 = *(const char **)(v3 + 16);
    *(_DWORD *)addrinfo buf = 136446722;
    v43 = "__nw_protocol_reset";
    if (!v27) {
      v27 = "invalid";
    }
    v44 = 2082;
    os_log_type_t v45 = (void *)v27;
    v46 = 2048;
    v47 = v3;
    v28 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v40 = 0;
    if (__nwlog_fault(v28, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v29 = (os_log_s *)__nwlog_obj();
        v30 = type;
        if (!os_log_type_enabled(v29, type)) {
          goto LABEL_95;
        }
        v31 = *(const char **)(v3 + 16);
        if (!v31) {
          v31 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v43 = "__nw_protocol_reset";
        v44 = 2082;
        os_log_type_t v45 = (void *)v31;
        v46 = 2048;
        v47 = v3;
        v32 = "%{public}s protocol %{public}s (%p) has invalid reset callback";
LABEL_94:
        _os_log_impl(&dword_181A5C000, v29, v30, v32, buf, 0x20u);
        goto LABEL_95;
      }

      if (!v40)
      {
        os_log_type_t v29 = (os_log_s *)__nwlog_obj();
        v30 = type;
        if (!os_log_type_enabled(v29, type)) {
          goto LABEL_95;
        }
        os_log_type_t v38 = *(const char **)(v3 + 16);
        if (!v38) {
          os_log_type_t v38 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v43 = "__nw_protocol_reset";
        v44 = 2082;
        os_log_type_t v45 = (void *)v38;
        v46 = 2048;
        v47 = v3;
        v32 = "%{public}s protocol %{public}s (%p) has invalid reset callback, backtrace limit exceeded";
        goto LABEL_94;
      }

      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v29 = (os_log_s *)__nwlog_obj();
      v30 = type;
      v34 = os_log_type_enabled(v29, type);
      if (!v33)
      {
        if (!v34) {
          goto LABEL_95;
        }
        v39 = *(const char **)(v3 + 16);
        if (!v39) {
          v39 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v43 = "__nw_protocol_reset";
        v44 = 2082;
        os_log_type_t v45 = (void *)v39;
        v46 = 2048;
        v47 = v3;
        v32 = "%{public}s protocol %{public}s (%p) has invalid reset callback, no backtrace";
        goto LABEL_94;
      }

      if (v34)
      {
        os_log_type_t v35 = *(const char **)(v3 + 16);
        if (!v35) {
          os_log_type_t v35 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446978;
        v43 = "__nw_protocol_reset";
        v44 = 2082;
        os_log_type_t v45 = (void *)v35;
        v46 = 2048;
        v47 = v3;
        os_log_type_t v48 = 2082;
        v49 = v33;
        _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s protocol %{public}s (%p) has invalid reset callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v33);
    }

        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          v22 = *(void *)(a1 + 88);
          if (v22)
          {
            BOOL v23 = v22 - 1;
            *(void *)(a1 + 88) = v23;
            if (!v23)
            {
              BOOL v24 = *(void (***)(void))(a1 + 64);
              if (v24)
              {
                *(void *)(a1 + 64) = 0LL;
                v24[2](v24);
                _Block_release(v24);
              }

              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                id v25 = *(const void **)(a1 + 64);
                if (v25) {
                  _Block_release(v25);
                }
              }

              free((void *)a1);
            }
          }
        }

        goto LABEL_14;
      }
    }

    __nwlog_obj();
    v27 = *(const char **)(v3 + 16);
    *(_DWORD *)addrinfo buf = 136446722;
    v43 = "__nw_protocol_waiting_for_output";
    if (!v27) {
      v27 = "invalid";
    }
    v44 = 2082;
    os_log_type_t v45 = (void *)v27;
    v46 = 2048;
    v47 = v3;
    v28 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    os_log_type_t v40 = 0;
    if (__nwlog_fault(v28, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v29 = (os_log_s *)__nwlog_obj();
        v30 = type;
        if (!os_log_type_enabled(v29, type)) {
          goto LABEL_95;
        }
        v31 = *(const char **)(v3 + 16);
        if (!v31) {
          v31 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v43 = "__nw_protocol_waiting_for_output";
        v44 = 2082;
        os_log_type_t v45 = (void *)v31;
        v46 = 2048;
        v47 = v3;
        v32 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback";
LABEL_94:
        _os_log_impl(&dword_181A5C000, v29, v30, v32, buf, 0x20u);
        goto LABEL_95;
      }

      if (!v40)
      {
        os_log_type_t v29 = (os_log_s *)__nwlog_obj();
        v30 = type;
        if (!os_log_type_enabled(v29, type)) {
          goto LABEL_95;
        }
        os_log_type_t v38 = *(const char **)(v3 + 16);
        if (!v38) {
          os_log_type_t v38 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v43 = "__nw_protocol_waiting_for_output";
        v44 = 2082;
        os_log_type_t v45 = (void *)v38;
        v46 = 2048;
        v47 = v3;
        v32 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, backtrace limit exceeded";
        goto LABEL_94;
      }

      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v29 = (os_log_s *)__nwlog_obj();
      v30 = type;
      v34 = os_log_type_enabled(v29, type);
      if (!v33)
      {
        if (!v34) {
          goto LABEL_95;
        }
        v39 = *(const char **)(v3 + 16);
        if (!v39) {
          v39 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v43 = "__nw_protocol_waiting_for_output";
        v44 = 2082;
        os_log_type_t v45 = (void *)v39;
        v46 = 2048;
        v47 = v3;
        v32 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, no backtrace";
        goto LABEL_94;
      }

      if (v34)
      {
        os_log_type_t v35 = *(const char **)(v3 + 16);
        if (!v35) {
          os_log_type_t v35 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446978;
        v43 = "__nw_protocol_waiting_for_output";
        v44 = 2082;
        os_log_type_t v45 = (void *)v35;
        v46 = 2048;
        v47 = v3;
        os_log_type_t v48 = 2082;
        v49 = v33;
        _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v33);
    }

      goto LABEL_52;
    }

    v3 = nw_parameters_create();
    if (v3)
    {
      required_interface_index = nw_parameters_get_required_interface_index(*((void **)v1 + 2));
      v5 = required_interface_index;
      if (required_interface_index)
      {
        id v6 = nw_interface_create_with_index(required_interface_index);
        if (!v6)
        {
          os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
            v46 = 1024;
            *(_DWORD *)v47 = v5;
            _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s nw_interface_create_with_index failed for index %u",  buf,  0x12u);
          }

          goto LABEL_51;
        }

        nw_parameters_require_interface(v3, (nw_interface_t)v6);
      }

      if (nw_parameters_get_required_address_family(*((void **)v1 + 2)))
      {
        nw_nat64_prefixes_resolver_start_dns_query_locked((NWConcrete_nw_nat64_prefixes_resolver *)v1);
LABEL_33:
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
LABEL_51:

        goto LABEL_52;
      }

      evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0LL, v3);
      unint64_t v15 = (void *)*((void *)v1 + 12);
      *((void *)v1 + 12) = evaluator_for_endpoint;

      v16 = (void *)*((void *)v1 + 12);
      if (v16)
      {
        nw_path_evaluator_set_logging(v16);
        os_log_type_t v17 = (void *)*((void *)v1 + 12);
        BOOL v18 = (void *)*((void *)v1 + 10);
        v40[0] = MEMORY[0x1895F87A8];
        v40[1] = 3221225472LL;
        v40[2] = __nw_nat64_prefixes_resolver_start_block_invoke;
        v40[3] = &unk_189BC8678;
        v19 = v1;
        BOOL v41 = v19;
        nw_path_evaluator_set_update_handler(v17, v18, v40);
        v20 = nw_path_evaluator_copy_path(*((os_unfair_lock_s **)v1 + 12));
        nw_nat64_prefixes_resolver_path_update_callback_locked(v19, v20);

        goto LABEL_33;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
      __nwlog_obj();
      BOOL v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
      v46 = 1024;
      *(_DWORD *)v47 = v5;
      BOOL v24 = (const char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v42 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          v46 = 1024;
          *(_DWORD *)v47 = v5;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed",  buf,  0x12u);
        }
      }

      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        v30 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)addrinfo buf = 136446722;
            os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
            v46 = 1024;
            *(_DWORD *)v47 = v5;
            v47[2] = 2082;
            *(void *)&v47[3] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_64;
        }

        if (v30)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          v46 = 1024;
          *(_DWORD *)v47 = v5;
          _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed, no backtrace",  buf,  0x12u);
        }
      }

      else
      {
        __nwlog_obj();
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          v46 = 1024;
          *(_DWORD *)v47 = v5;
          _os_log_impl( &dword_181A5C000,  v25,  v31,  "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed, backtrace limit exceeded",  buf,  0x12u);
        }
      }

LABEL_64:
      if (!v24) {
        goto LABEL_51;
      }
      v27 = (char *)v24;
      goto LABEL_50;
    }

    os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
    v8 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v8, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (os_log_s *)(id)gLogObj;
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }

      else if (v42)
      {
        v11 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
            v46 = 2082;
            *(void *)v47 = v11;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v11);
          if (!v8) {
            goto LABEL_51;
          }
LABEL_49:
          v27 = (char *)v8;
LABEL_50:
          free(v27);
          goto LABEL_51;
        }

        if (v13)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          _os_log_impl( &dword_181A5C000,  v9,  v22,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v8) {
      goto LABEL_51;
    }
    goto LABEL_49;
  }

  __nwlog_obj();
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
  os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v42 = 0;
  if (__nwlog_fault(v33, &type, &v42))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
        _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s called with null resolver", buf, 0xCu);
      }
    }

    else if (v42)
    {
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = type;
      os_log_type_t v38 = os_log_type_enabled(v34, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
          v46 = 2082;
          *(void *)v47 = v36;
          _os_log_impl( &dword_181A5C000,  v34,  v37,  "%{public}s called with null resolver, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
        goto LABEL_82;
      }

      if (v38)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
        _os_log_impl(&dword_181A5C000, v34, v37, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_nat64_prefixes_resolver_start";
        _os_log_impl( &dword_181A5C000,  v34,  v39,  "%{public}s called with null resolver, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }
}

LABEL_30:
    start_of_key_locked = nw_txt_record_find_key_invalid;
    goto LABEL_5;
  }

  os_unfair_lock_lock(v4 + 8);
  start_of_key_locked = nw_txt_record_find_start_of_key_locked(v4, key, 0LL, 0LL, 0LL, 0LL);
  os_unfair_lock_unlock(v4 + 8);
LABEL_5:

  return start_of_key_locked;
}

    v3 = "unknown";
    return (id)[NSString stringWithUTF8String:v3];
  }

  if ((_DWORD)a3 == 1002)
  {
    v3 = "wifi_awdl";
    return (id)[NSString stringWithUTF8String:v3];
  }

  if ((_DWORD)a3 == 4001)
  {
    v3 = "coprocessor";
    return (id)[NSString stringWithUTF8String:v3];
  }

  if ((_DWORD)a3 != 5001) {
    goto LABEL_13;
  }
  v3 = "companion";
  return (id)[NSString stringWithUTF8String:v3];
}

  if ((*v2 & 0x600) == 0x200)
  {
    if (_nw_signposts_once == -1)
    {
      if (_nw_signposts_enabled) {
        goto LABEL_16;
      }
    }

    else
    {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_18_64095);
      if (_nw_signposts_enabled)
      {
LABEL_16:
      }
    }

    nw_queue_suspend_source(*((void *)a1 + 14));
    *v2 |= 0x400u;
  }
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

    free(v9);
    goto LABEL_14;
  }

  v6[8] = nw_listen_protocol_new_flow;
  v6[9] = nw_listen_protocol_disconnected;
  v6[13] = v6;
  v6[10] = v6 + 8;
  if (((*(uint64_t (**)(uint64_t))(*(void *)(a2 + 24) + 232LL))(a2) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v21 = "-[nw_listener_inbox_protocol initWithProtocol:delegate:]";
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to add input handler to listening protocol",  buf,  0xCu);
    }

    goto LABEL_14;
  }

    free(v6);
    goto LABEL_14;
  }

  size_t v4 = nw_nsstring((uint64_t)bonjour_service_type);
  return (NSString *)(id)v4;
}

    free(v6);
    goto LABEL_14;
  }

  size_t v4 = nw_nsstring((uint64_t)bonjour_service_domain);
  return (NSString *)(id)v4;
}

    free(v10);
    goto LABEL_14;
  }
  v8 = +[NWBrowseDescriptor descriptorWithInternalDescriptor:]( &OBJC_CLASS___NWBonjourBrowseDescriptor,  "descriptorWithInternalDescriptor:",  bonjour_service);
LABEL_15:

  return v8;
}

  __break(1u);
  return result;
}

LABEL_15:
  return v8;
}
}

    free(v21);
    goto LABEL_14;
  }

  objc_initWeak((id *)location, v10);
  internalEvaluator = v10->_internalEvaluator;
  if (NWCopyInternalQueue_init_once != -1) {
    dispatch_once(&NWCopyInternalQueue_init_once, &__block_literal_global_62911);
  }
  os_log_type_t v17 = (id)NWCopyInternalQueue_nwQueue;
  v49[0] = MEMORY[0x1895F87A8];
  v49[1] = 3221225472LL;
  v49[2] = __48__NWPathEvaluator_initWithEvaluator_parameters___block_invoke;
  v49[3] = &unk_189BC8C90;
  objc_copyWeak(&v50, (id *)location);
  nw_path_evaluator_set_update_handler(internalEvaluator, v17, v49);

  BOOL v18 = v10;
  objc_destroyWeak(&v50);
  objc_destroyWeak((id *)location);

LABEL_16:
  return v18;
}

LABEL_128:
      goto LABEL_60;
    }

    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v58 = (os_log_type_t)v62.receiver;
      if (os_log_type_enabled(v54, (os_log_type_t)v62.receiver))
      {
        *(_DWORD *)type = 136446210;
        v64 = "nw_endpoint_create_host_with_numeric_port";
        _os_log_impl( &dword_181A5C000,  v54,  v58,  "%{public}s NWOSHostEndpoint alloc/init failed, backtrace limit exceeded",  (uint8_t *)type,  0xCu);
      }

      goto LABEL_128;
    }

    v16 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v56 = (os_log_type_t)v62.receiver;
    BOOL v57 = os_log_type_enabled(v54, (os_log_type_t)v62.receiver);
    if (!v16)
    {
      if (v57)
      {
        *(_DWORD *)type = 136446210;
        v64 = "nw_endpoint_create_host_with_numeric_port";
        _os_log_impl( &dword_181A5C000,  v54,  v56,  "%{public}s NWOSHostEndpoint alloc/init failed, no backtrace",  (uint8_t *)type,  0xCu);
      }

      goto LABEL_128;
    }

    if (v57)
    {
      *(_DWORD *)type = 136446466;
      v64 = "nw_endpoint_create_host_with_numeric_port";
      __int16 v65 = 2082;
      v66 = v16;
      _os_log_impl( &dword_181A5C000,  v54,  v56,  "%{public}s NWOSHostEndpoint alloc/init failed, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
    }

LABEL_26:
    free(v16);
    if (!v7) {
      return 0LL;
    }
    goto LABEL_61;
  }

  v62.os_log_type_t receiver = v10;
  v62.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_host_endpoint;
  address = objc_msgSendSuper2(&v62, sel_init);
  if (!address)
  {
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)type = 136446210;
    v64 = "-[NWConcrete_nw_host_endpoint initWithHostname:port:]";
    v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v61 = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if ((__nwlog_fault(v43, &v61, &v60) & 1) != 0)
    {
      if (v61 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v45 = v61;
        if (os_log_type_enabled(v44, v61))
        {
          *(_DWORD *)type = 136446210;
          v64 = "-[NWConcrete_nw_host_endpoint initWithHostname:port:]";
          _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s [super init] failed", (uint8_t *)type, 0xCu);
        }
      }

      else if (v60)
      {
        v49 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v50 = v61;
        BOOL v51 = os_log_type_enabled(v44, v61);
        if (v49)
        {
          if (v51)
          {
            *(_DWORD *)type = 136446466;
            v64 = "-[NWConcrete_nw_host_endpoint initWithHostname:port:]";
            __int16 v65 = 2082;
            v66 = v49;
            _os_log_impl( &dword_181A5C000,  v44,  v50,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
          }

          free(v49);
          goto LABEL_111;
        }

        if (v51)
        {
          *(_DWORD *)type = 136446210;
          v64 = "-[NWConcrete_nw_host_endpoint initWithHostname:port:]";
          _os_log_impl( &dword_181A5C000,  v44,  v50,  "%{public}s [super init] failed, no backtrace",  (uint8_t *)type,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = v61;
        if (os_log_type_enabled(v44, v61))
        {
          *(_DWORD *)type = 136446210;
          v64 = "-[NWConcrete_nw_host_endpoint initWithHostname:port:]";
          _os_log_impl( &dword_181A5C000,  v44,  v52,  "%{public}s [super init] failed, backtrace limit exceeded",  (uint8_t *)type,  0xCu);
        }
      }
    }

    free(backtrace_string);
    goto LABEL_163;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v82 = "nw_channel_connect";
    v49 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v50 = (os_log_s *)__nwlog_obj();
      BOOL v51 = type;
      if (os_log_type_enabled(v50, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel";
        goto LABEL_162;
      }

      goto LABEL_163;
    }

    if (!v79)
    {
      os_log_type_t v50 = (os_log_s *)__nwlog_obj();
      BOOL v51 = type;
      if (os_log_type_enabled(v50, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel, backtrace limit exceeded";
        goto LABEL_162;
      }

      goto LABEL_163;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v50 = (os_log_s *)__nwlog_obj();
    BOOL v51 = type;
    v66 = os_log_type_enabled(v50, type);
    if (!backtrace_string)
    {
      if (v66)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel, no backtrace";
        goto LABEL_162;
      }

      goto LABEL_163;
    }

    if (v66)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v82 = "nw_channel_connect";
      v83 = 2082;
      v84 = backtrace_string;
      __int16 v65 = "%{public}s called with null channel, dumping backtrace:%{public}s";
      goto LABEL_127;
    }

    goto LABEL_128;
  }

  size_t v4 = a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v82 = "__nw_protocol_get_output_handler_context";
    id v53 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (__nwlog_fault(v53, &type, &v79))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v82 = "__nw_protocol_get_output_handler_context";
          os_log_type_t v56 = "%{public}s called with null protocol";
LABEL_168:
          _os_log_impl(&dword_181A5C000, v54, v55, v56, buf, 0xCu);
        }
      }

      else if (v79)
      {
        __int16 v67 = (char *)__nw_create_backtrace_string();
        v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type;
        v68 = os_log_type_enabled(v54, type);
        if (v67)
        {
          if (v68)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v82 = "__nw_protocol_get_output_handler_context";
            v83 = 2082;
            v84 = v67;
            _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v67);
          goto LABEL_169;
        }

        if (v68)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v82 = "__nw_protocol_get_output_handler_context";
          os_log_type_t v56 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_168;
        }
      }

      else
      {
        v54 = (os_log_s *)__nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v82 = "__nw_protocol_get_output_handler_context";
          os_log_type_t v56 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_168;
        }
      }
    }

    free(v32);
    goto LABEL_129;
  }

  if (nw_path_parameters_get_logging_disabled(*((void *)v3 + 2))) {
    goto LABEL_130;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  v42 = (id)gconnectionLogObj;
  v43 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
  *(_DWORD *)addrinfo buf = 136446722;
  v84 = "nw_association_unregister";
  v85 = 2082;
  v86 = (void *)v43;
  v87 = 2048;
  v88 = (uint64_t)v5;
  os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v81 = 0;
  if (__nwlog_fault(v38, &type, &v81))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v39 = (os_log_s *)(id)gconnectionLogObj;
      v44 = type;
      if (os_log_type_enabled(v39, type))
      {
        os_log_type_t v45 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)addrinfo buf = 136446722;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v45;
        v87 = 2048;
        v88 = (uint64_t)v5;
        _os_log_impl( &dword_181A5C000,  v39,  v44,  "%{public}s <nw_association %{public}s> does not have handle %p registered",  buf,  0x20u);
      }

  __break(1u);
  return result;
}
        }
      }

      nw_frame_set_external_data((uint64_t)v3, 0LL, 0LL);
      v87 = v3[4];
      v88 = (void *)v3[5];
      if (v87)
      {
        *(void *)(v87 + 40) = v88;
        v88 = (void *)v3[5];
      }

      else
      {
        *(void *)(a1[4] + 576LL) = v88;
      }

      *v88 = v87;
      v3[4] = 0LL;
      v3[5] = 0LL;
      nw_frame_finalize((uint64_t)v3);
      v89 = size;
      *(_DWORD *)(a1[4] + 600LL) += size;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v89;
      if (!gLogDatapath) {
        goto LABEL_68;
      }
      __nwlog_obj();
      v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
      {
        v107 = a1[4];
        v108 = (const char *)(v107 + 609);
        if (!v107) {
          v108 = "";
        }
        v109 = *(_DWORD *)(v107 + 600);
        v110 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
        *(_DWORD *)addrinfo buf = 136446978;
        v132 = "nw_framer_write_output_no_copy_block_invoke";
        v133 = 2080;
        v134 = v108;
        v135 = 1024;
        *(_DWORD *)v136 = v109;
        *(_WORD *)&v136[4] = 2048;
        *(void *)&v136[6] = v110;
        _os_log_impl( &dword_181A5C000,  v82,  OS_LOG_TYPE_DEBUG,  "%{public}s %s Pending output cursor %u, remaining output %zu",  buf,  0x26u);
      }

      goto LABEL_62;
    }

    v69 = *(void *)(a1[6] + 8LL);
    v72 = *(dispatch_data_s **)(v69 + 40);
    uint64_t v70 = (id *)(v69 + 40);
    v71 = v72;
    if (v72)
    {
      v73 = dispatch_data_create_concat(v71, v4);
      v74 = *(void *)(a1[6] + 8LL);
      v75 = *(void **)(v74 + 40);
      *(void *)(v74 + 40) = v73;

      if (gLogDatapath)
      {
        __nwlog_obj();
        v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
        {
          v77 = a1[4];
          if (v77) {
            v78 = (const char *)(v77 + 609);
          }
          else {
            v78 = "";
          }
          v79 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8LL) + 40LL));
          *(_DWORD *)addrinfo buf = 136446722;
          v132 = "nw_framer_write_output_no_copy_block_invoke";
          v133 = 2080;
          v134 = v78;
          v135 = 2048;
          *(void *)v136 = v79;
          v80 = "%{public}s %s Appending message data to output data, now %zu bytes";
LABEL_134:
          _os_log_impl(&dword_181A5C000, v76, OS_LOG_TYPE_DEBUG, v80, buf, 0x20u);
          goto LABEL_135;
        }

        goto LABEL_135;
      }
    }

    else
    {
      objc_storeStrong(v70, v4);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
        {
          v127 = a1[4];
          if (v127) {
            v128 = (const char *)(v127 + 609);
          }
          else {
            v128 = "";
          }
          v129 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8LL) + 40LL));
          *(_DWORD *)addrinfo buf = 136446722;
          v132 = "nw_framer_write_output_no_copy_block_invoke";
          v133 = 2080;
          v134 = v128;
          v135 = 2048;
          *(void *)v136 = v129;
          v80 = "%{public}s %s Setting message data as output data, %zu bytes";
          goto LABEL_134;
        }

            free(v59);
          }
        }

        v101 = *((void *)a1 + 11);
        v102 = nw_parameters_get_logging_disabled(*((void *)a1 + 7));
        if (v101)
        {
          if (!v102)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            v103 = (os_log_s *)(id)gconnection_groupLogObj;
            if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_140;
            }
            v104 = *((_DWORD *)a1 + 42);
            v106 = *((void *)a1 + 7);
            v105 = *((void *)a1 + 8);
            id_string = nw_listener_get_id_string(*((void **)a1 + 11));
            *(_DWORD *)addrinfo buf = 136447234;
            v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
            v165 = 1024;
            *(_DWORD *)v166 = v104;
            *(_WORD *)&v166[4] = 2112;
            *(void *)&v166[6] = v105;
            *(_WORD *)&v166[14] = 2112;
            *(void *)&v166[16] = v106;
            v167 = 2080;
            v168 = id_string;
            v108 = "%{public}s [G%u] create with descriptor: %@, parameters: %@, listener: [%s]";
            v109 = v103;
            v110 = 48;
LABEL_139:
            _os_log_impl(&dword_181A5C000, v109, OS_LOG_TYPE_DEFAULT, v108, buf, v110);
LABEL_140:
          }
        }

        else if (!v102)
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          v103 = (os_log_s *)(id)gconnection_groupLogObj;
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_140;
          }
          v111 = *((_DWORD *)a1 + 42);
          v113 = *((void *)a1 + 7);
          v112 = *((void *)a1 + 8);
          *(_DWORD *)addrinfo buf = 136446978;
          v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
          v165 = 1024;
          *(_DWORD *)v166 = v111;
          *(_WORD *)&v166[4] = 2112;
          *(void *)&v166[6] = v112;
          *(_WORD *)&v166[14] = 2112;
          *(void *)&v166[16] = v113;
          v108 = "%{public}s [G%u] create with descriptor: %@, parameters: %@";
          v109 = v103;
          v110 = 38;
          goto LABEL_139;
        }

        v76 = a1;
        goto LABEL_142;
      }

      if (!*((void *)a1 + 8))
      {
LABEL_109:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v93 = (id)gLogObj;
        *(_DWORD *)addrinfo buf = 136446210;
        v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
        v94 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v154) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v95 = (os_log_s *)(id)gLogObj;
          v96 = type[0];
          if (os_log_type_enabled(v95, type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
            _os_log_impl(&dword_181A5C000, v95, v96, "%{public}s Group descriptor is not set", buf, 0xCu);
          }
        }

        else if ((_BYTE)v154)
        {
          v97 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v95 = (os_log_s *)(id)gLogObj;
          v98 = type[0];
          v99 = os_log_type_enabled(v95, type[0]);
          if (v97)
          {
            if (v99)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
              v165 = 2082;
              *(void *)v166 = v97;
              _os_log_impl( &dword_181A5C000,  v95,  v98,  "%{public}s Group descriptor is not set, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v97);
            if (!v94) {
              goto LABEL_128;
            }
LABEL_127:
            free(v94);
            goto LABEL_128;
          }

          if (v99)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
            _os_log_impl(&dword_181A5C000, v95, v98, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v95 = (os_log_s *)(id)gLogObj;
          v100 = type[0];
          if (os_log_type_enabled(v95, type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
            _os_log_impl( &dword_181A5C000,  v95,  v100,  "%{public}s Group descriptor is not set, backtrace limit exceeded",  buf,  0xCu);
          }
        }

        goto LABEL_125;
      }

      __nwlog_obj();
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      v91 = nw_group_descriptor_get_type(*((void **)a1 + 8));
      if (v91 > 4) {
        v92 = "unknown";
      }
      else {
        v92 = off_189BB74C8[v91];
      }
      *(_DWORD *)addrinfo buf = 136446466;
      v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
      v165 = 2080;
      *(void *)v166 = v92;
      v94 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v154) = 0;
      if (__nwlog_fault(v94, type, &v154))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v115 = type[0];
          if (os_log_type_enabled(v95, type[0]))
          {
            v116 = nw_group_descriptor_get_type(*((void **)a1 + 8));
            if (v116 > 4) {
              v117 = "unknown";
            }
            else {
              v117 = off_189BB74C8[v116];
            }
            *(_DWORD *)addrinfo buf = 136446466;
            v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
            v165 = 2080;
            *(void *)v166 = v117;
            _os_log_impl(&dword_181A5C000, v95, v115, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
          }

          goto LABEL_135;
        }

        if (v121 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          os_log_type_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v51 = type[0];
          if (os_log_type_enabled(v38, type[0]))
          {
            *(_DWORD *)v132 = 136446210;
            *(void *)&v132[4] = "nw_http_cookie_options_get_should_not_save_cookies";
            _os_log_impl( &dword_181A5C000,  v38,  v51,  "%{public}s protocol options are not http_cookie, backtrace limit exceeded",  v132,  0xCu);
          }

          goto LABEL_128;
        }

        v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v48 = type[0];
        v49 = os_log_type_enabled(v47, type[0]);
        if (v46)
        {
          if (v49)
          {
            *(_DWORD *)v132 = 136446466;
            *(void *)&v132[4] = "nw_http_cookie_options_get_should_not_save_cookies";
            *(_WORD *)&v132[12] = 2082;
            *(void *)&v132[14] = v46;
            _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s",  v132,  0x16u);
          }

          BOOL v18 = (void *)&unk_182665000;
          free(v46);
          if (!v37) {
            goto LABEL_137;
          }
          goto LABEL_136;
        }

        if (v49)
        {
          *(_DWORD *)v132 = 136446210;
          *(void *)&v132[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s protocol options are not http_cookie, no backtrace",  v132,  0xCu);
        }

        BOOL v18 = &unk_182665000;
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v132 = 136446210;
      *(void *)&v132[4] = "nw_http_cookie_options_get_should_not_save_cookies";
      LODWORD(v109) = 12;
      v108 = v132;
      v37 = (char *)_os_log_send_and_compose_impl();

      BOOL v18 = (void *)&unk_182665000;
      type[0] = OS_LOG_TYPE_ERROR;
      v121 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v39 = type[0];
        if (os_log_type_enabled(v38, type[0]))
        {
          *(_DWORD *)v132 = 136446210;
          *(void *)&v132[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          _os_log_impl(&dword_181A5C000, v38, v39, "%{public}s called with null options", v132, 0xCu);
        }

        goto LABEL_128;
      }

      if (v121 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        os_log_type_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v50 = type[0];
        if (os_log_type_enabled(v38, type[0]))
        {
          *(_DWORD *)v132 = 136446210;
          *(void *)&v132[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          _os_log_impl( &dword_181A5C000,  v38,  v50,  "%{public}s called with null options, backtrace limit exceeded",  v132,  0xCu);
        }

        goto LABEL_128;
      }

      v42 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v44 = type[0];
      os_log_type_t v45 = os_log_type_enabled(v43, type[0]);
      if (v42)
      {
        if (v45)
        {
          *(_DWORD *)v132 = 136446466;
          *(void *)&v132[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          *(_WORD *)&v132[12] = 2082;
          *(void *)&v132[14] = v42;
          _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s called with null options, dumping backtrace:%{public}s",  v132,  0x16u);
        }

        BOOL v18 = (void *)&unk_182665000;
        free(v42);
      }

      else
      {
        if (v45)
        {
          *(_DWORD *)v132 = 136446210;
          *(void *)&v132[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s called with null options, no backtrace", v132, 0xCu);
        }

        BOOL v18 = (void *)&unk_182665000;
      }
    }

                      if (!v55)
                      {
LABEL_130:
                        os_log_type_t v33 = 0LL;
LABEL_151:

LABEL_152:
                        goto LABEL_153;
                      }

                xpc_dictionary_set_BOOL(v2, "always_open_listener_socket", 1);
                os_log_type_t v35 = *((void *)v1 + 12);
                if ((v35 & 0x10000000) == 0)
                {
LABEL_93:
                  if ((v35 & 0x20000000) == 0) {
                    goto LABEL_94;
                  }
                  goto LABEL_130;
                }

LABEL_129:
      if (v52) {
        free(v52);
      }
      goto LABEL_11;
    }

    if (!v64)
    {
      __nwlog_obj();
      id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v63 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v67 = "nw_connection_add_probe_locked";
        _os_log_impl( &dword_181A5C000,  v53,  v63,  "%{public}s called with null probe, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_128;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v60 = type;
    os_log_type_t v61 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_181A5C000, v53, v60, "%{public}s called with null probe, no backtrace", buf, 0xCu);
      }

      goto LABEL_128;
    }

    if (v61)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      __int16 v67 = "nw_connection_add_probe_locked";
      v68 = 2082;
      *(void *)v69 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v53,  v60,  "%{public}s called with null probe, dumping backtrace:%{public}s",  buf,  0x16u);
    }

        v87 = 0LL;
LABEL_204:

        v129 = (void *)v186[18];
        v186[18] = v87;

        v130 = *(void *)(v10 + 16);
        if (v186[18])
        {
          if (v130 && !nw_path_parameters_get_logging_disabled(*(void *)(v130 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v131 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
            {
              v132 = *(_DWORD *)(v10 + 448);
              v133 = v19[112];
              *(_DWORD *)addrinfo buf = 136446722;
              *(void *)&buf[4] = "nw_connection_create_with_connection";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v132;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v133;
              _os_log_impl( &dword_181A5C000,  v131,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] create connection from [C%u]",  buf,  0x18u);
            }
          }

          v39 = v186;
          goto LABEL_221;
        }

        if (!v130 || nw_path_parameters_get_logging_disabled(*(void *)(v130 + 104)))
        {
LABEL_220:
          v39 = 0LL;
LABEL_221:

          goto LABEL_222;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v48 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          v134 = *(_DWORD *)(v10 + 448);
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&buf[4] = "nw_connection_create_with_connection";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v134;
          _os_log_impl( &dword_181A5C000,  v48,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] nw_endpoint_handler_create_with_existing failed",  buf,  0x12u);
        }

      if (*v3) {
        nw_http_fields_append(*(void **)(a1 + 48), (uint64_t)a2, (uint64_t)v3);
      }
LABEL_130:
      v78 = __dst[0];
      if (!__dst[0]) {
        return 1LL;
      }
LABEL_131:
      free(v78);
      return 1LL;
    }

    if (nw_utilities_get_user_agent::onceToken != -1) {
      dispatch_once(&nw_utilities_get_user_agent::onceToken, &__block_literal_global_9_44154);
    }
    v3 = (const char *)nw_utilities_get_user_agent::user_agent_string;
    v76 = *(_DWORD *)(*(void *)(a1 + 40) + 527LL);
    if ((v76 & 0x1000000) != 0)
    {
      asprintf(__dst, "%s (nwhttp)", (const char *)nw_utilities_get_user_agent::user_agent_string);
      v3 = __dst[0];
      v77 = *(void *)(a1 + 40);
      if (!v77)
      {
LABEL_126:
        if (gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
          }
          v164 = (os_log_s *)gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            v165 = *(void *)(a1 + 40);
            v166 = v165 == 0;
            if (v165) {
              v167 = (const char *)(v165 + 531);
            }
            else {
              v167 = "";
            }
            *(_DWORD *)addrinfo buf = 136446978;
            *(void *)&buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
            *(void *)&buf[14] = v167;
            v168 = " ";
            *(_WORD *)&buf[12] = 2082;
            if (v166) {
              v168 = "";
            }
            *(_WORD *)&buf[22] = 2080;
            *(void *)&buf[24] = v168;
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = v3;
            _os_log_impl( &dword_181A5C000,  v164,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sUsing process user agent %{public}s",  buf,  0x2Au);
          }
        }

    v37 = v44;
    os_log_type_t v38 = v45;
    v39 = 12;
    goto LABEL_61;
  }

  if (!*((void *)handle + 14))
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v68 = "nw_http2_transport_remove_input_handler";
    v46 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    __int16 v65 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v68 = "nw_http2_transport_remove_input_handler";
      v49 = "%{public}s called with null table";
    }

    else if (v65)
    {
      os_log_type_t v56 = (char *)__nw_create_backtrace_string();
      v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v57 = os_log_type_enabled(v47, type);
      if (v56)
      {
        if (v57)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v68 = "nw_http2_transport_remove_input_handler";
          v69 = 2082;
          uint64_t v70 = (nw_protocol *)v56;
          _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s called with null table, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v56);
        goto LABEL_132;
      }

      if (!v57)
      {
LABEL_132:
        if (v46) {
          free(v46);
        }
        goto LABEL_14;
      }

      *(_DWORD *)addrinfo buf = 136446210;
      v68 = "nw_http2_transport_remove_input_handler";
      v49 = "%{public}s called with null table, no backtrace";
    }

    else
    {
      v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v68 = "nw_http2_transport_remove_input_handler";
      v49 = "%{public}s called with null table, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v47, v48, v49, buf, 0xCu);
    goto LABEL_132;
  }

  if (gLogDatapath)
  {
    os_log_type_t v50 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v68 = "nw_http2_transport_remove_input_handler";
      v69 = 2082;
      uint64_t v70 = (nw_protocol *)(handle + 205);
      _os_log_impl(&dword_181A5C000, v50, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }

  output_handler_context = a2->output_handler_context;
  if (output_handler_context)
  {
    id v6 = output_handler_context[4];
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 36) & 1) != 0 || *(_DWORD *)(v6 + 32) != -1)
      {
        nw_http2_transport_stream_close((uint64_t)handle, v6);
LABEL_21:
        if (!nw_http2_transport_remove_from_protocol_table((uint64_t)handle, (uint64_t)a2))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v15 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)addrinfo buf = 136446722;
            v68 = "nw_http2_transport_remove_input_handler";
            v69 = 2082;
            uint64_t v70 = (nw_protocol *)(handle + 205);
            v71 = 2048;
            *(void *)v72 = a2;
            _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s unable to remove protocol %p from protocol table",  buf,  0x20u);
          }
        }

        if (a2->output_handler == a1) {
          nw_protocol_set_output_handler((uint64_t)a2, 0LL);
        }
        if (v6)
        {
          nw_http2_transport_release_frame_array((nw_frame_array_s *)v6);
          nw_http2_transport_release_frame_array((nw_frame_array_s *)(v6 + 16));
          free((void *)v6);
        }

        v16 = *((void *)handle + 14);
        if (v16)
        {
          os_log_type_t v17 = *(_DWORD *)(v16 + 40);
          if (v17)
          {
            if (gLogDatapath)
            {
              os_log_type_t v58 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)addrinfo buf = 136446722;
                v68 = "nw_protocol_http2_transport_remove_input_handler";
                v69 = 2082;
                uint64_t v70 = (nw_protocol *)(handle + 205);
                v71 = 1024;
                *(_DWORD *)v72 = v17;
                _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s not destroying, still have %u input handlers",  buf,  0x1Cu);
              }
            }

            if (a1->default_input_handler == a2)
            {
              BOOL v18 = (char *)*((void *)handle + 14);
              v63[0] = MEMORY[0x1895F87A8];
              v63[1] = 0x40000000LL;
              v63[2] = ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke_32;
              v63[3] = &__block_descriptor_tmp_33_38154;
              v63[4] = a1;
              v63[5] = handle;
              nw_hash_table_apply(v18, (uint64_t)v63);
            }

            return 1LL;
          }

          if (gLogDatapath)
          {
            v59 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)addrinfo buf = 136446466;
              v68 = "nw_protocol_http2_transport_remove_input_handler";
              v69 = 2082;
              uint64_t v70 = (nw_protocol *)(handle + 205);
              _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s no more input handlers, scheduling destroy",  buf,  0x16u);
            }
          }

          nw_protocol_set_input_handler((uint64_t)a1, 0LL);
          id v25 = *((void *)handle + 9);
          if (v25) {
            nw_queue_cancel_source(v25, v24);
          }
          v26 = nw_parameters_copy_context(*((void **)handle + 11));
          v64[0] = MEMORY[0x1895F87A8];
          v64[1] = 0x40000000LL;
          v64[2] = ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke;
          v64[3] = &__block_descriptor_tmp_31_38148;
          v64[4] = a1;
          *((void *)handle + 9) = nw_queue_context_create_source(v26, 2, 3, 0, v64, 0LL);
          if (v26) {
            os_release(v26);
          }
          v27 = nw_parameters_copy_protocol_value(*((void **)handle + 11), (uint64_t)handle, "tunnelTeardownDelay");
          if (v27)
          {
            v28 = v27;
            *((void *)handle + 8) = xpc_uint64_get_value(v27);
            if (gLogDatapath)
            {
              char v60 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
              {
                os_log_type_t v61 = *((void *)handle + 8);
                *(_DWORD *)addrinfo buf = 136446722;
                v68 = "nw_protocol_http2_transport_remove_input_handler";
                v69 = 2082;
                uint64_t v70 = (nw_protocol *)(handle + 205);
                v71 = 2048;
                *(void *)v72 = v61;
                _os_log_impl( &dword_181A5C000,  v60,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s destroy timeout set to %lld milliseconds via first stream parameters",  buf,  0x20u);
              }
            }

            xpc_release(v28);
            goto LABEL_68;
          }

          v31 = (const char *)nw_setting_http2_transport_teardown_delay;
          networkd_settings_init();
          if (sCachedSettings)
          {
            pthread_mutex_lock(&sSettingsMutex);
            if (sCachedSettings)
            {
              int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v31);
              pthread_mutex_unlock(&sSettingsMutex);
              os_log_type_t v33 = (int64_t *)(handle + 64);
              if (int64)
              {
                *os_log_type_t v33 = int64;
                if (!gLogDatapath) {
                  goto LABEL_68;
                }
                v34 = (os_log_s *)__nwlog_obj();
                if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_68;
                }
                os_log_type_t v35 = *((void *)handle + 8);
                *(_DWORD *)addrinfo buf = 136446722;
                v68 = "nw_protocol_http2_transport_remove_input_handler";
                v69 = 2082;
                uint64_t v70 = (nw_protocol *)(handle + 205);
                v71 = 2048;
                *(void *)v72 = v35;
                os_log_type_t v36 = "%{public}s %{public}s destroy timeout set to %lld milliseconds via the defaults write";
LABEL_138:
                _os_log_impl(&dword_181A5C000, v34, OS_LOG_TYPE_DEBUG, v36, buf, 0x20u);
LABEL_68:
                os_log_type_t v40 = *((void *)handle + 9);
                BOOL v41 = dispatch_time(0x8000000000000000LL, 1000000LL * *((void *)handle + 8));
                nw_queue_set_timer_values(v40, v41, 0xFFFFFFFFFFFFFFFFLL, 1000LL * *((void *)handle + 8));
                nw_queue_activate_source(*((void *)handle + 9), v42);
                return 1LL;
              }

      free(v78);
      if (!v67)
      {
LABEL_148:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
        v84 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v107 = OS_LOG_TYPE_DEFAULT;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v85 = (os_log_s *)gLogObj;
          v86 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_162;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          v87 = "%{public}s called with null update_http1_connection";
        }

        else if (v107)
        {
          v88 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v85 = (os_log_s *)gLogObj;
          v86 = type[0];
          v89 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v88)
          {
            if (v89)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              *(void *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v88;
              _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s called with null update_http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v88);
            goto LABEL_162;
          }

          if (!v89)
          {
LABEL_162:
            if (v84) {
              free(v84);
            }
            return;
          }

          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          v87 = "%{public}s called with null update_http1_connection, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v85 = (os_log_s *)gLogObj;
          v86 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_162;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          v87 = "%{public}s called with null update_http1_connection, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v85, v86, v87, buf, 0xCu);
        goto LABEL_162;
      }

      if (v39) {
        free(v39);
      }
      goto LABEL_179;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
    v161 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v643) = 16;
    LOBYTE(v647) = 0;
    if (v643 == 17)
    {
      v162 = (os_log_s *)__nwlog_obj();
      v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
        goto LABEL_898;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null http1_connection->current_stream";
      goto LABEL_897;
    }

    if (!(_BYTE)v647)
    {
      v162 = (os_log_s *)__nwlog_obj();
      v163 = v643;
      if (!os_log_type_enabled(v162, (os_log_type_t)v643)) {
        goto LABEL_898;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null http1_connection->current_stream, backtrace limit exceeded";
      goto LABEL_897;
    }

    v189 = (char *)__nw_create_backtrace_string();
    v162 = (os_log_s *)__nwlog_obj();
    v163 = v643;
    v503 = os_log_type_enabled(v162, (os_log_type_t)v643);
    if (!v189)
    {
      if (!v503) {
        goto LABEL_898;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v164 = "%{public}s called with null http1_connection->current_stream, no backtrace";
      goto LABEL_897;
    }

    if (v503)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&buf[4] = "nw_http1_connection_output_frame_finalizer";
      v638 = 2082;
      *(void *)v639 = v189;
      v191 = "%{public}s called with null http1_connection->current_stream, dumping backtrace:%{public}s";
      goto LABEL_844;
    }

              v86 = *v7++;
              v85 = v86;
              v13 += (unint64_t)(v86 & 0x7F) << v14;
              v14 += 7;
            }

            while ((v86 & 0x80) != 0);
            if (v14 >= 0x40)
            {
              if (v13 > -1 || v85 > 1) {
                v152 = v10;
              }
              else {
                v152 = v7;
              }
              v154 = v14 == 70;
              v161 = 3590;
              if (v154) {
                v10 = v152;
              }
              size_t v4 = __src;
              goto LABEL_349;
            }

            v161 = 3590;
            goto LABEL_277;
          }

  v11 = v286;
  if (!nw_endpoint_flow_attach_protocols(v9, a2, a3))
  {
    char v60 = 0LL;
    v137 = v281;
LABEL_238:
    if (!v60 && v137)
    {
      nw_endpoint_flow_failed_with_error(v9, 1, 0LL);
      char v60 = 0LL;
    }

    goto LABEL_242;
  }

  *((_BYTE *)v286 + 32) |= 0x40u;
  if (!v281) {
    goto LABEL_241;
  }
LABEL_130:
  v119 = *((_BYTE *)v11 + 32);
  v120 = v9;
  v121 = v120;
  v280 = v120;
  if ((v119 & 2) != 0)
  {
    v138 = (*((_BYTE *)v120 + 268) & 0x20) == 0;

    v11 = v286;
    if (v138)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v139 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
      {
        v140 = v280;

        v141 = v140;
        v142 = (*((_BYTE *)v280 + 268) & 1) == 0;

        if (v142) {
          v143 = "";
        }
        else {
          v143 = "dry-run ";
        }
        v144 = nw_endpoint_handler_copy_endpoint(v141);
        v145 = nw_endpoint_get_logging_description(v144);
        v146 = v141;
        v147 = v146;
        v148 = v146[30];
        else {
          v149 = off_189BBBBF0[v148];
        }

        v159 = v147;
        v160 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            v160 = "resolver";
            break;
          case 2:
            v160 = nw_endpoint_flow_mode_string(v159[31]);
            break;
          case 3:
            v160 = "proxy";
            break;
          case 4:
            v160 = "fallback";
            break;
          case 5:
            v160 = "transform";
            break;
          default:
            v160 = "unknown-mode";
            break;
        }

        v276 = v160;

        v171 = v159;
        os_unfair_lock_lock((os_unfair_lock_t)v171 + 28);
        v172 = v171[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v171 + 28);

        *(_DWORD *)addrinfo buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = v140 + 168;
        v295 = 2082;
        v296 = (nw_protocol *)v143;
        v297 = 2082;
        v298 = (void *)v145;
        v299 = 2082;
        v300 = (void *)v149;
        v301 = 2082;
        v302 = v276;
        v303 = 2114;
        v304 = v172;
        _os_log_impl( &dword_181A5C000,  v139,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] leaf flow starting",  buf,  0x48u);
      }

      goto LABEL_193;
    }

    goto LABEL_194;
  }

  v122 = v120->endpoint;

  v123 = (void *)*((void *)v286 + 121);
  *((void *)v286 + 121) = v122;

  v11 = v286;
  if (*((void *)v286 + 117))
  {
    v124 = v280;
    v125 = (*((_BYTE *)v124 + 268) & 0x20) == 0;

    v11 = v286;
    if (v125)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v126 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        v127 = v124;

        v128 = v127;
        v129 = (*((_BYTE *)v124 + 268) & 1) == 0;

        if (v129) {
          v130 = "";
        }
        else {
          v130 = "dry-run ";
        }
        v131 = nw_endpoint_handler_copy_endpoint(v128);
        v132 = nw_endpoint_get_logging_description(v131);
        v133 = v128;
        v134 = v133;
        v135 = v133[30];
        else {
          v136 = off_189BBBBF0[v135];
        }
        v275 = v136;

        v168 = v134;
        v169 = v168;
        v170 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            v170 = "resolver";
            break;
          case 2:
            v170 = nw_endpoint_flow_mode_string(v168[31]);
            break;
          case 3:
            v170 = "proxy";
            break;
          case 4:
            v170 = "fallback";
            break;
          case 5:
            v170 = "transform";
            break;
          default:
            v170 = "unknown-mode";
            break;
        }

        v181 = v169;
        os_unfair_lock_lock((os_unfair_lock_t)v181 + 28);
        v182 = v181[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v181 + 28);

        *(_DWORD *)addrinfo buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = v127 + 168;
        v295 = 2082;
        v296 = (nw_protocol *)v130;
        v297 = 2082;
        v298 = (void *)v132;
        v299 = 2082;
        v300 = (void *)v275;
        v301 = 2082;
        v302 = v170;
        v303 = 2114;
        v304 = v182;
        _os_log_impl( &dword_181A5C000,  v126,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child flow connected, starting",  buf,  0x48u);
      }

    free(backtrace_string);
    if (!v35) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }

  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v19 = &g_registration_list;
  do
  {
    v19 = (uint64_t *)*v19;
    if (!v19)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_31;
    }
  }

  while (*(void *)identifier != v19[4]
       || *((void *)identifier + 1) != v19[5]
       || *((void *)identifier + 2) != v19[6]
       || *((void *)identifier + 3) != v19[7]
       || *((void *)identifier + 4) != v19[8]);
  BOOL v24 = v19[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v24)
  {
LABEL_31:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v17) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v29 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v17);
        v84 = nw_endpoint_handler_dry_run_string(v17);
        v31 = nw_endpoint_handler_copy_endpoint(v17);
        logging_description = nw_endpoint_get_logging_description(v31);
        v32 = nw_endpoint_handler_state_string(v17);
        os_log_type_t v33 = nw_endpoint_handler_mode_string(v17);
        v34 = nw_endpoint_handler_copy_current_path(v17);
        *(_DWORD *)addrinfo buf = 136448258;
        *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v94 = 2082;
        v95 = (void *)id_string;
        v96 = 2082;
        v97 = v84;
        v98 = 2082;
        v99 = (void *)logging_description;
        v100 = 2082;
        v101 = v32;
        v102 = 2082;
        v103 = v33;
        v104 = 2114;
        v105 = v34;
        v106 = 2080;
        v107 = identifier;
        v108 = 2048;
        v109 = (uint64_t)identifier;
        _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not hav e accept function, cannot search for protocol to join",  buf,  0x5Cu);
      }
    }

    goto LABEL_72;
  }

  id v25 = v16;
  v26 = v25;
  while (1)
  {
    registered_endpoint = nw_protocol_instance_registrar_search_for_instance_to_join( (uint64_t)identifier,  a2,  v89,  v26,  v25,  v90,  v11 != 0);
    registered_endpoint = (uint64_t)nw_protocol_instance_registrar_copy_next_registered_endpoint(v26, v11 != 0);

    v26 = (void *)registered_endpoint;
  }

  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v17) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v73 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
    {
      v85 = nw_endpoint_handler_get_id_string(v17);
      v83 = nw_endpoint_handler_dry_run_string(v17);
      v74 = nw_endpoint_handler_copy_endpoint(v17);
      v81 = nw_endpoint_get_logging_description(v74);
      v80 = nw_endpoint_handler_state_string(v17);
      v75 = nw_endpoint_handler_mode_string(v17);
      v76 = nw_endpoint_handler_copy_current_path(v17);
      v77 = v76;
      *(void *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v78 = "invalid";
      v79 = *(const char **)(registered_endpoint + 16);
      *(_DWORD *)addrinfo buf = 136448258;
      if (v79) {
        v78 = v79;
      }
      v94 = 2082;
      v95 = (void *)v85;
      v96 = 2082;
      v97 = v83;
      v98 = 2082;
      v99 = (void *)v81;
      v100 = 2082;
      v101 = v80;
      v102 = 2082;
      v103 = v75;
      v104 = 2114;
      v105 = v76;
      v106 = 2080;
      v107 = (void *)v78;
      v108 = 2048;
      v109 = registered_endpoint;
      _os_log_impl( &dword_181A5C000,  v73,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)",  buf,  0x5Cu);
    }
  }

LABEL_111:
    if (v43) {
      free(v43);
    }
    goto LABEL_113;
  }

  v12 = strdup(a1);
  if (v12)
  {
LABEL_16:
    *((void *)address + 29) = v12;
    *((_WORD *)address + 120) = __rev16(a2);
    v13 = (const char *)*((void *)address + 29);
    size_t v14 = strlen(v13);
    if (v14 >= 7)
    {
      unint64_t v15 = v14;
      if (!strcmp(&v13[v14 - 6], ".local") || v15 >= 8 && !strcmp(&v13[v15 - 7], ".local.")) {
        *((_BYTE *)address + 231) |= 1u;
      }
    }

    return (BOOL)address;
  }

  __nwlog_obj();
  v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
  *(_DWORD *)type = 136446210;
  v64 = "strict_strdup";
  v47 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v47);
  if (!result)
  {
    free(v47);
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

        free(v48);
        goto LABEL_112;
      }

      if (v58)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v66 = "nw_connection_create_with_id";
        _os_log_impl(&dword_181A5C000, v49, v57, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v60 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v66 = "nw_connection_create_with_id";
        _os_log_impl( &dword_181A5C000,  v49,  v60,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    v43 = v227;
  }

    if (v54) {
      free(v54);
    }
    goto LABEL_57;
  }

  if (v12) {
    nw_protocol_definition_deallocate_cache_entry(v5, v9[9]);
  }
  nw_context_remove_cache_entry(v6, v9 + 4);
  if (nw_hash_table_remove_node(*((void *)v3 + 7), (uint64_t)v9)
    || nw_path_parameters_get_logging_disabled(*((void *)v3 + 2)))
  {
    goto LABEL_56;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  v13 = (id)gconnectionLogObj;
  logging_description = nw_endpoint_get_logging_description(*((void **)v3 + 1));
  *(_DWORD *)addrinfo buf = 136446722;
  v66 = "nw_association_get_cached_content_for_protocol";
  __int16 v67 = 2082;
  v68 = (void *)logging_description;
  v69 = 2048;
  uint64_t v70 = v9;
  unint64_t v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v63 = 0;
  if (__nwlog_fault(v15, &type, &v63))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v16 = (os_log_s *)(id)gconnectionLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        BOOL v18 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)addrinfo buf = 136446722;
        v66 = "nw_association_get_cached_content_for_protocol";
        __int16 v67 = 2082;
        v68 = (void *)v18;
        v69 = 2048;
        uint64_t v70 = v9;
        _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p",  buf,  0x20u);
      }
    }

    else if (v63)
    {
      v31 = __nw_create_backtrace_string();
      if (v31)
      {
        v32 = (char *)v31;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v33 = (os_log_s *)(id)gconnectionLogObj;
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          os_log_type_t v35 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)addrinfo buf = 136446978;
          v66 = "nw_association_get_cached_content_for_protocol";
          __int16 v67 = 2082;
          v68 = (void *)v35;
          v69 = 2048;
          uint64_t v70 = v9;
          v71 = 2082;
          v72 = v32;
          _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v32);
        if (!v15) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v16 = (os_log_s *)(id)gconnectionLogObj;
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v16, type))
      {
        v39 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)addrinfo buf = 136446722;
        v66 = "nw_association_get_cached_content_for_protocol";
        __int16 v67 = 2082;
        v68 = (void *)v39;
        v69 = 2048;
        uint64_t v70 = v9;
        _os_log_impl( &dword_181A5C000,  v16,  v38,  "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v16 = (os_log_s *)(id)gconnectionLogObj;
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v16, type))
      {
        v37 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)addrinfo buf = 136446722;
        v66 = "nw_association_get_cached_content_for_protocol";
        __int16 v67 = 2082;
        v68 = (void *)v37;
        v69 = 2048;
        uint64_t v70 = v9;
        _os_log_impl( &dword_181A5C000,  v16,  v36,  "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, backtrace limit exceeded",  buf,  0x20u);
      }
    }
  }

  if (v15) {
LABEL_55:
  }
    free(v15);
LABEL_56:
  v12 = 0LL;
LABEL_57:

LABEL_58:
  return v12;
}

                BOOL v18 = 0LL;
                goto LABEL_112;
              }

              __nwlog_obj();
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)addrinfo buf = 136446210;
              *(void *)&buf[4] = "nw_endpoint_get_connected_flow_count";
              BOOL v41 = (void *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v61 = 0;
              if (!__nwlog_fault((const char *)v41, type, &v61))
              {
LABEL_109:
                if (v41) {
                  free(v41);
                }
                goto LABEL_111;
              }

              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v45 = type[0];
                if (os_log_type_enabled(v42, type[0]))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  *(void *)&buf[4] = "nw_endpoint_get_connected_flow_count";
                  _os_log_impl(&dword_181A5C000, v42, v45, "%{public}s called with null endpoint->context", buf, 0xCu);
                }

          BOOL v24 = 0LL;
          goto LABEL_179;
        }

        v19 = nw_flow_add_write_request(v5, (void **)v7 + 47, v4);
      }

      BOOL v24 = v19;
LABEL_179:

      goto LABEL_180;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    else {
      v13 = off_189BBBBC0[mode];
    }
    *(_DWORD *)addrinfo buf = 136446722;
    v156 = "nw_endpoint_handler_add_write_request";
    v157 = 2082;
    id_str = (char *)v13;
    v159 = 2082;
    v160 = "flow";
    size_t v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v153 = 0;
    if (__nwlog_fault(v14, &type, &v153))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v15 = (os_log_s *)(id)gLogObj;
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          else {
            os_log_type_t v17 = off_189BBBBC0[mode];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v156 = "nw_endpoint_handler_add_write_request";
          v157 = 2082;
          id_str = (char *)v17;
          v159 = 2082;
          v160 = "flow";
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v153)
      {
        v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v15 = (os_log_s *)(id)gLogObj;
        v21 = type;
        v22 = os_log_type_enabled(v15, type);
        if (v20)
        {
          if (v22)
          {
            else {
              BOOL v23 = off_189BBBBC0[mode];
            }
            *(_DWORD *)addrinfo buf = 136446978;
            v156 = "nw_endpoint_handler_add_write_request";
            v157 = 2082;
            id_str = (char *)v23;
            v159 = 2082;
            v160 = "flow";
            v161 = 2082;
            v162 = v20;
            _os_log_impl( &dword_181A5C000,  v15,  v21,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v20);
          if (!v14) {
            goto LABEL_74;
          }
          goto LABEL_73;
        }

        if (v22)
        {
          else {
            os_log_type_t v52 = off_189BBBBC0[mode];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v156 = "nw_endpoint_handler_add_write_request";
          v157 = 2082;
          id_str = (char *)v52;
          v159 = 2082;
          v160 = "flow";
          _os_log_impl( &dword_181A5C000,  v15,  v21,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v15, type))
        {
          else {
            v39 = off_189BBBBC0[mode];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v156 = "nw_endpoint_handler_add_write_request";
          v157 = 2082;
          id_str = (char *)v39;
          v159 = 2082;
          v160 = "flow";
          _os_log_impl( &dword_181A5C000,  v15,  v38,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

  ++qword_18C5A2820;
}

    if (v49) {
      free(v49);
    }
    return 0LL;
  }

  id v6 = a1->handle;
  v7 = v6;
  if (!v6)
  {
    __nwlog_obj();
    os_log_type_t v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
    id v53 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_181A5C000, v54, v55, "%{public}s called with null framer", buf, 0xCu);
      }

      goto LABEL_119;
    }

    if (!v74)
    {
      __nwlog_obj();
      v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v71 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl( &dword_181A5C000,  v54,  v71,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_119;
    }

    objc_super v62 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v63 = type;
    v64 = os_log_type_enabled(v54, type);
    if (!v62)
    {
      if (v64)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_181A5C000, v54, v63, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }

      goto LABEL_119;
    }

    if (v64)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v62;
      _os_log_impl( &dword_181A5C000,  v54,  v63,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_86;
  }

  if (!v6[1])
  {
    __nwlog_obj();
    os_log_type_t v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
    id v53 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v57 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_181A5C000, v54, v57, "%{public}s called with null framer->parent_definition", buf, 0xCu);
      }

    if (v49) {
      free(v49);
    }
LABEL_113:
    v31 = 0LL;
    v7 = v5;
    goto LABEL_41;
  }

  v8 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_interface_use_observer);
  if (!v8)
  {
LABEL_119:
    os_log_type_t v9 = 0LL;
    goto LABEL_8;
  }

  v81.os_log_type_t receiver = v8;
  v81.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_interface_use_observer;
  os_log_type_t v9 = objc_msgSendSuper2(&v81, sel_init);
  if (!v9)
  {
    __nwlog_obj();
    os_log_type_t v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
    id v53 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if ((__nwlog_fault(v53, &type, &v79) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
          _os_log_impl(&dword_181A5C000, v54, v55, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v79)
      {
        __int16 v67 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v68 = type;
        v69 = os_log_type_enabled(v54, type);
        if (v67)
        {
          if (v69)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
            v84 = 2082;
            v85 = v67;
            _os_log_impl( &dword_181A5C000,  v54,  v68,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v67);
          goto LABEL_117;
        }

        if (v69)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
          _os_log_impl(&dword_181A5C000, v54, v68, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v73 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
          _os_log_impl( &dword_181A5C000,  v54,  v73,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v34) {
    free(v34);
  }
  return 0LL;
}

    goto LABEL_112;
  }

  __nwlog_obj();
  id v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  *(void *)&buf[4] = "nw_protocol_implementation_link_state";
  v22 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v54 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v26 = type;
    if (os_log_type_enabled(v23, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_implementation_link_state";
      _os_log_impl(&dword_181A5C000, v23, v26, "%{public}s called with null protocol", buf, 0xCu);
    }

    goto LABEL_100;
  }

  if (!v54)
  {
    __nwlog_obj();
    BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v50 = type;
    if (os_log_type_enabled(v23, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_implementation_link_state";
      _os_log_impl( &dword_181A5C000,  v23,  v50,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_100;
  }

  os_log_type_t v38 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v39 = type;
  os_log_type_t v40 = os_log_type_enabled(v23, type);
  if (!v38)
  {
    if (v40)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_implementation_link_state";
      _os_log_impl(&dword_181A5C000, v23, v39, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_100;
  }

  if (v40)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    *(void *)&buf[4] = "nw_protocol_implementation_link_state";
    BOOL v57 = 2082;
    os_log_type_t v58 = v38;
    _os_log_impl( &dword_181A5C000,  v23,  v39,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v38);
  if (v22) {
    goto LABEL_102;
  }
LABEL_27:
}
        }
      }

      else
      {
        __nwlog_obj();
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&buf[4] = "nw_protocol_utilities_add_input_handler";
        v91 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v212 = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v157 = type[0];
          if (os_log_type_enabled(v92, type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&buf[4] = "nw_protocol_utilities_add_input_handler";
            _os_log_impl(&dword_181A5C000, v92, v157, "%{public}s called with null protocol", buf, 0xCu);
          }

          goto LABEL_174;
        }

        if (!v212)
        {
          __nwlog_obj();
          v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v180 = type[0];
          if (os_log_type_enabled(v92, type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&buf[4] = "nw_protocol_utilities_add_input_handler";
            _os_log_impl( &dword_181A5C000,  v92,  v180,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_174;
        }

        v160 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v161 = type[0];
        v162 = os_log_type_enabled(v105, type[0]);
        if (!v160)
        {
          if (v162)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&buf[4] = "nw_protocol_utilities_add_input_handler";
            _os_log_impl(&dword_181A5C000, v105, v161, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }

          goto LABEL_111;
        }

        if (v162)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&buf[4] = "nw_protocol_utilities_add_input_handler";
          v215 = 2082;
          v216 = (uint64_t)v160;
          _os_log_impl( &dword_181A5C000,  v105,  v161,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v160);
      }

            v196 = "generic";
            goto LABEL_114;
          }
        }

        else
        {
          v99 = off_189BB8FC8[v98];
          if (*v99) {
            goto LABEL_104;
          }
        }

        v218[0] = 0;
        v100 = v11->default_stack;
        if (v100) {
          goto LABEL_105;
        }
        goto LABEL_111;
      }

        if (v41) {
          free(v41);
        }
        size_t v4 = 0LL;
        goto LABEL_16;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446210;
      id v53 = "nw_parameters_create_quic_connection";
      size_t v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      os_log_type_t v50 = 0;
      if (__nwlog_fault(v14, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v15 = (os_log_s *)(id)gLogObj;
          v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v53 = "nw_parameters_create_quic_connection";
            _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s nw_quic_create_connection_options failed", buf, 0xCu);
          }
        }

        else if (v50)
        {
          v20 = __nw_create_backtrace_string();
          if (v20)
          {
            v21 = (char *)v20;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v22 = (os_log_s *)(id)gLogObj;
            BOOL v23 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)addrinfo buf = 136446466;
              id v53 = "nw_parameters_create_quic_connection";
              v54 = 2082;
              os_log_type_t v55 = v21;
              _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s nw_quic_create_connection_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v21);
            if (!v14) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }

          __nwlog_obj();
          unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v26 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v53 = "nw_parameters_create_quic_connection";
            _os_log_impl( &dword_181A5C000,  v15,  v26,  "%{public}s nw_quic_create_connection_options failed, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v15 = (os_log_s *)(id)gLogObj;
          id v25 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v53 = "nw_parameters_create_quic_connection";
            _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s nw_quic_create_connection_options failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v14)
      {
LABEL_56:
        size_t v4 = 0LL;
        goto LABEL_57;
      }

      if (!v38) {
        return 0LL;
      }
      os_log_type_t v36 = (char *)v38;
      goto LABEL_64;
    }

    if (!v49)
    {
      v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        BOOL v41 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_110;
      }

      goto LABEL_111;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = type;
    v46 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        BOOL v41 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_110;
      }

      goto LABEL_111;
    }

    if (v46)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v52 = "nw_protocol_http_client_bottom_remove_input_handler";
      id v53 = 2082;
      v54 = (nw_protocol *)backtrace_string;
      v44 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_94;
    }

  __nwlog_obj();
  v121 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
  {
    v122 = *(void *)(a1 + 32);
    v123 = v229[5];
    *(_DWORD *)applier = 136446722;
    *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
    *(_WORD *)&applier[12] = 2114;
    *(void *)&applier[14] = v122;
    *(_WORD *)&applier[22] = 2112;
    *(void *)v286 = v123;
    _os_log_impl( &dword_181A5C000,  v121,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ Failed to parse target host and path out of request path: %@",  applier,  0x20u);
  }

  v124 = (void *)_nw_http_response_create_well_known(501LL);
  v125 = nw_http_create_metadata_for_response(v124);
  v126 = nw_content_context_create("response");
  nw_content_context_set_metadata_for_protocol(v126, (nw_protocol_metadata_t)v125);
  v127 = *(void **)(a1 + 32);
  v128 = (nw_connection *)v127[6];
  v205[0] = MEMORY[0x1895F87A8];
  v205[1] = 3221225472LL;
  v205[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_244;
  v205[3] = &unk_189BC5E68;
  v206 = v127;
  nw_connection_send(v128, 0LL, v126, 1, v205);

LABEL_142:
LABEL_34:
  _Block_object_dispose(&v228, 8);

  _Block_object_dispose(&v236, 8);
  _Block_object_dispose(&v240, 8);
  _Block_object_dispose(&v245, 8);

  _Block_object_dispose(&v253, 8);
  _Block_object_dispose(&v259, 8);

  _Block_object_dispose(&v265, 8);
  _Block_object_dispose(&v271, 8);

LABEL_35:
LABEL_36:

  v8 = 0LL;
LABEL_37:
}

    if (v96) {
      free(v96);
    }
    goto LABEL_94;
  }

  v3 = v1;
  mode = v3->mode;

  if ((_DWORD)mode == 4)
  {
    v5 = nw_endpoint_handler_copy_fallback(v3);
    v7 = v5;
    if ((*((_BYTE *)v5 + 108) & 0x40) != 0)
    {
      v28 = v3;
      os_log_type_t v29 = *((_BYTE *)v28 + 268);

      if ((v29 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        size_t v14 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          v121 = v14;
          v30 = v28;

          v31 = v30;
          v32 = *((_BYTE *)v28 + 268);

          if ((v32 & 1) != 0) {
            os_log_type_t v33 = "dry-run ";
          }
          else {
            os_log_type_t v33 = "";
          }
          v126 = v7;
          v34 = nw_endpoint_handler_copy_endpoint(v31);
          logging_description = nw_endpoint_get_logging_description(v34);
          id_str = v30->id_str;
          v37 = v31;
          os_log_type_t v38 = v37;
          v39 = v37[30];
          else {
            os_log_type_t v40 = off_189BBBBF0[v39];
          }

          __int16 v67 = v38;
          v68 = v67;
          v69 = v3->mode;
          uint64_t v70 = "path";
          switch(v69)
          {
            case 0:
              break;
            case 1:
              uint64_t v70 = "resolver";
              break;
            case 2:
              uint64_t v70 = nw_endpoint_flow_mode_string(v67[31]);
              break;
            case 3:
              uint64_t v70 = "proxy";
              break;
            case 4:
              uint64_t v70 = "fallback";
              break;
            case 5:
              uint64_t v70 = "transform";
              break;
            default:
              uint64_t v70 = "unknown-mode";
              break;
          }

          v89 = v68;
          os_unfair_lock_lock((os_unfair_lock_t)v89 + 28);
          v90 = v89[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v89 + 28);

          *(_DWORD *)addrinfo buf = 136447746;
          v133 = "nw_endpoint_fallback_start_fallback_child";
          v134 = 2082;
          v135 = id_str;
          v136 = 2082;
          v137 = v33;
          v138 = 2082;
          v139 = logging_description;
          v140 = 2082;
          v141 = v40;
          v142 = 2082;
          v143 = v70;
          v144 = 2114;
          v145 = v90;
          size_t v14 = v121;
          _os_log_impl( &dword_181A5C000,  v121,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Already started fallback, skipping",  buf,  0x48u);

          v7 = v126;
        }

        goto LABEL_92;
      }

      goto LABEL_93;
    }

    v8 = *((void *)v5 + 9);
    if (v8)
    {
      nw_queue_cancel_source(v8, v6);
      *((void *)v7 + 9) = 0LL;
    }

    os_log_type_t v9 = (void *)*((void *)v7 + 5);
    if (!v9)
    {
      BOOL v41 = v3;
      v42 = *((_BYTE *)v41 + 268);

      if ((v42 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        size_t v14 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v122 = v14;
          v43 = v41;

          v44 = v43;
          os_log_type_t v45 = *((_BYTE *)v41 + 268);

          if ((v45 & 1) != 0) {
            v46 = "dry-run ";
          }
          else {
            v46 = "";
          }
          v127 = v7;
          v47 = nw_endpoint_handler_copy_endpoint(v44);
          os_log_type_t v48 = nw_endpoint_get_logging_description(v47);
          v49 = v43->id_str;
          os_log_type_t v50 = v44;
          BOOL v51 = v50;
          os_log_type_t v52 = v50[30];
          else {
            id v53 = off_189BBBBF0[v52];
          }

          v81 = v51;
          v82 = v81;
          v83 = v3->mode;
          v84 = "path";
          switch(v83)
          {
            case 0:
              break;
            case 1:
              v84 = "resolver";
              break;
            case 2:
              v84 = nw_endpoint_flow_mode_string(v81[31]);
              break;
            case 3:
              v84 = "proxy";
              break;
            case 4:
              v84 = "fallback";
              break;
            case 5:
              v84 = "transform";
              break;
            default:
              v84 = "unknown-mode";
              break;
          }

          v91 = v82;
          os_unfair_lock_lock((os_unfair_lock_t)v91 + 28);
          v92 = v91[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v91 + 28);

          *(_DWORD *)addrinfo buf = 136447746;
          v133 = "nw_endpoint_fallback_start_fallback_child";
          v134 = 2082;
          v135 = v49;
          v136 = 2082;
          v137 = v46;
          v138 = 2082;
          v139 = v48;
          v140 = 2082;
          v141 = v53;
          v142 = 2082;
          v143 = v84;
          v144 = 2114;
          v145 = v92;
          size_t v14 = v122;
          _os_log_impl( &dword_181A5C000,  v122,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No fallback child found",  buf,  0x48u);

          v7 = v127;
        }

        goto LABEL_92;
      }

      goto LABEL_93;
    }

    v10 = v9;
    v11 = v10[30];

    if (v11 == 5)
    {
      v12 = v3;
      v13 = *((_BYTE *)v12 + 268);

      if ((v13 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        size_t v14 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v120 = v14;
          unint64_t v15 = v12;

          v16 = v15;
          os_log_type_t v17 = *((_BYTE *)v12 + 268);

          if ((v17 & 1) != 0) {
            BOOL v18 = "dry-run ";
          }
          else {
            BOOL v18 = "";
          }
          v125 = v7;
          v19 = nw_endpoint_handler_copy_endpoint(v16);
          v20 = nw_endpoint_get_logging_description(v19);
          v21 = v15->id_str;
          v22 = v16;
          BOOL v23 = v22;
          BOOL v24 = v22[30];
          else {
            id v25 = off_189BBBBF0[v24];
          }

          v85 = v23;
          v86 = v85;
          v87 = v3->mode;
          v88 = "path";
          switch(v87)
          {
            case 0:
              break;
            case 1:
              v88 = "resolver";
              break;
            case 2:
              v88 = nw_endpoint_flow_mode_string(v85[31]);
              break;
            case 3:
              v88 = "proxy";
              break;
            case 4:
              v88 = "fallback";
              break;
            case 5:
              v88 = "transform";
              break;
            default:
              v88 = "unknown-mode";
              break;
          }

          v93 = v86;
          os_unfair_lock_lock((os_unfair_lock_t)v93 + 28);
          v94 = v93[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v93 + 28);

          *(_DWORD *)addrinfo buf = 136447746;
          v133 = "nw_endpoint_fallback_start_fallback_child";
          v134 = 2082;
          v135 = v21;
          v136 = 2082;
          v137 = v18;
          v138 = 2082;
          v139 = v20;
          v140 = 2082;
          v141 = v25;
          v142 = 2082;
          v143 = v88;
          v144 = 2114;
          v145 = v94;
          size_t v14 = v120;
          _os_log_impl( &dword_181A5C000,  v120,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Fallback child already cancelled",  buf,  0x48u);

          v7 = v125;
        }

        goto LABEL_92;
      }

    if (!v9) {
      goto LABEL_25;
    }
    goto LABEL_112;
  }

  if (gLogDatapath)
  {
    id v6 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v54 = "nw_http2_transport_send_goaway";
      os_log_type_t v55 = 2082;
      os_log_type_t v56 = a1 + 205;
      v7 = "%{public}s %{public}s already sent goaway, skipping";
      goto LABEL_23;
    }
  }

  __int16 v67 = *v13;
  v68 = v67 | (*((unsigned __int8 *)v13 + 2) << 16);
  if ((v67 & 0x100) != 0)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v81 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          v82 = *(void *)(v12 + 488);
          v83 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
          v84 = *(_DWORD *)(v12 + 860);
          if (v82) {
            LODWORD(v82) = *(_DWORD *)(v82 + 424);
          }
          *(_DWORD *)addrinfo buf = 136447490;
          *(void *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v83;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v84;
          LOWORD(v265) = 1024;
          *(_DWORD *)((char *)&v265 + 2) = v82;
          _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> already closed",  buf,  0x32u);
        }
      }
    }

    goto LABEL_237;
  }

  *((_BYTE *)v13 + 2) = BYTE2(v68);
  const char *v13 = v68 | 0x100;
  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v189 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
      {
        v190 = *(void *)(v12 + 488);
        v191 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
        v192 = *(_DWORD *)(v12 + 860);
        if (v190) {
          LODWORD(v190) = *(_DWORD *)(v190 + 424);
        }
        *(_DWORD *)addrinfo buf = 136447490;
        *(void *)&buf[4] = "nw_http1_connection_close";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v191;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v192;
        LOWORD(v265) = 1024;
        *(_DWORD *)((char *)&v265 + 2) = v190;
        _os_log_impl( &dword_181A5C000,  v189,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
      }
    }
  }

  v69 = *(void *)(v12 + 480);
  if (!v69)
  {
    v184 = v13;
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
    v185 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (v268[0] == 17)
    {
      v186 = (os_log_s *)__nwlog_obj();
      v187 = v268[0];
      if (!os_log_type_enabled(v186, (os_log_type_t)v268[0])) {
        goto LABEL_449;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v188 = "%{public}s called with null http1";
    }

    else if (v260[0])
    {
      v199 = (char *)__nw_create_backtrace_string();
      v186 = (os_log_s *)__nwlog_obj();
      v187 = v268[0];
      v200 = os_log_type_enabled(v186, (os_log_type_t)v268[0]);
      if (v199)
      {
        if (v200)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v199;
          v201 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          v202 = buf;
          goto LABEL_402;
        }

                  if (v51) {
                    free(v51);
                  }
                  v11 = v1042;
                  goto LABEL_114;
                }

                if ((*(_BYTE *)(v14 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  BOOL v57 = (os_log_s *)gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                  {
                    os_log_type_t v58 = *(void *)(v14 + 256);
                    v59 = *(_DWORD *)(*(void *)(v14 + 248) + 372LL);
                    if (v58) {
                      LODWORD(v58) = *(_DWORD *)(v58 + 860);
                    }
                    char v60 = *(_DWORD *)(v14 + 424);
                    *(_DWORD *)addrinfo buf = 136448002;
                    *(void *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v14 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v1051 = (uint64_t)" ";
                    *(_WORD *)v1052 = 1024;
                    *(_DWORD *)&v1052[2] = v59;
                    *(_WORD *)&v1052[6] = 1024;
                    *(_DWORD *)&v1052[8] = v58;
                    *(_WORD *)&v1052[12] = 1024;
                    *(_DWORD *)&v1052[14] = v60;
                    *(_WORD *)&v1052[18] = 2048;
                    *(void *)&v1052[20] = v14;
                    *(_WORD *)&v1052[28] = 2048;
                    *(void *)&v1052[30] = v49;
                    _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p",  buf,  0x46u);
                  }
                }

                if (gLogDatapath)
                {
                  v733 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v733, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    *(void *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_181A5C000, v733, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                  }
                }

                *(void *)addrinfo buf = MEMORY[0x1895F87A8];
                *(void *)&buf[8] = 0x40000000LL;
                *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
                v1051 = (uint64_t)&__block_descriptor_tmp_55_39717;
                *(void *)v1052 = v49 + 632;
                v1052[8] = 0;
                os_log_type_t v61 = *(void *)(v49 + 632);
                do
                {
                  if (!v61) {
                    break;
                  }
                  objc_super v62 = *(void *)(v61 + 32);
                  v63 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  os_log_type_t v61 = v62;
                }

                while ((v63 & 1) != 0);
                *(void *)(v14 + 256) = 0LL;
                *(void *)(v49 + 488) = 0LL;
                nw_protocol_set_output_handler(v14, 0LL);
                nw_protocol_set_input_handler(v49, 0LL);
LABEL_114:
                if (v22)
                {
                  unint64_t v15 = &qword_18C45F000;
                  if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v574 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v574, OS_LOG_TYPE_DEBUG))
                      {
                        v575 = *(void *)(v16 + 488);
                        v576 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                        v577 = *(_DWORD *)(v16 + 860);
                        if (v575) {
                          LODWORD(v575) = *(_DWORD *)(v575 + 424);
                        }
                        *(_DWORD *)addrinfo buf = 136447746;
                        *(void *)&buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v16 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v1051 = (uint64_t)" ";
                        *(_WORD *)v1052 = 1024;
                        *(_DWORD *)&v1052[2] = v576;
                        *(_WORD *)&v1052[6] = 1024;
                        *(_DWORD *)&v1052[8] = v577;
                        *(_WORD *)&v1052[12] = 1024;
                        *(_DWORD *)&v1052[14] = v575;
                        *(_WORD *)&v1052[18] = 2048;
                        *(void *)&v1052[20] = v16;
                        _os_log_impl( &dword_181A5C000,  v574,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection (%p)",  buf,  0x3Cu);
                        v11 = v1042;
                      }
                    }
                  }

                  if (((*(unsigned __int16 *)(v16 + 872) | (*(unsigned __int8 *)(v16 + 874) << 16)) & 0x80000) == 0)
                  {
                    v69 = (_WORD *)(v16 + 872);
                    v71 = (uint64_t *)(v11 + 208);
                    uint64_t v70 = *(void *)(v11 + 208);
                    *(void *)(v16 + 592) = v70;
                    if (v70) {
                      v72 = (void *)(v70 + 600);
                    }
                    else {
                      v72 = (void *)(v11 + 216);
                    }
                    *v72 = v16 + 592;
                    *v71 = v16;
                    *(void *)(v16 + 600) = v71;
                    v73 = *(unsigned int *)(v11 + 340) + 1LL;
                    v74 = v73 << 31 >> 31;
                    *(_DWORD *)(v11 + 340) = v73;
                    if (v74 == v73 && (v74 & 0x8000000000000000LL) == 0) {
                      goto LABEL_229;
                    }
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v75 = *(unsigned int *)(v11 + 340);
                    *(_DWORD *)addrinfo buf = 136446978;
                    *(void *)&buf[4] = "nw_http1_add_idle_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->idle_connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v1051 = 1LL;
                    *(_WORD *)v1052 = 2048;
                    *(void *)&v1052[2] = v75;
                    v76 = (char *)_os_log_send_and_compose_impl();
                    v1065[0] = 16;
                    aBlock[0] = 0;
                    if (__nwlog_fault(v76, v1065, aBlock))
                    {
                      if (v1065[0] == 17)
                      {
                        v77 = (os_log_s *)__nwlog_obj();
                        v78 = v1065[0];
                        if (os_log_type_enabled(v77, (os_log_type_t)v1065[0]))
                        {
                          v79 = *(unsigned int *)(v11 + 340);
                          *(_DWORD *)addrinfo buf = 136446978;
                          *(void *)&buf[4] = "nw_http1_add_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->idle_connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v79;
                          v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_225:
                          _os_log_impl(&dword_181A5C000, v77, v78, v80, buf, 0x2Au);
                        }
                      }

                      else if (aBlock[0])
                      {
                        v109 = (char *)__nw_create_backtrace_string();
                        v77 = (os_log_s *)__nwlog_obj();
                        v78 = v1065[0];
                        v110 = os_log_type_enabled(v77, (os_log_type_t)v1065[0]);
                        if (v109)
                        {
                          if (v110)
                          {
                            v111 = *(unsigned int *)(v1042 + 340);
                            *(_DWORD *)addrinfo buf = 136447234;
                            *(void *)&buf[4] = "nw_http1_add_idle_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = "http1->idle_connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            v1051 = 1LL;
                            *(_WORD *)v1052 = 2048;
                            *(void *)&v1052[2] = v111;
                            *(_WORD *)&v1052[10] = 2082;
                            *(void *)&v1052[12] = v109;
                            _os_log_impl( &dword_181A5C000,  v77,  v78,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                          }

                          free(v109);
                          v11 = v1042;
                          goto LABEL_226;
                        }

                        v11 = v1042;
                        if (v110)
                        {
                          v142 = *(unsigned int *)(v1042 + 340);
                          *(_DWORD *)addrinfo buf = 136446978;
                          *(void *)&buf[4] = "nw_http1_add_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->idle_connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v142;
                          v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_225;
                        }
                      }

                      else
                      {
                        v77 = (os_log_s *)__nwlog_obj();
                        v78 = v1065[0];
                        if (os_log_type_enabled(v77, (os_log_type_t)v1065[0]))
                        {
                          v121 = *(unsigned int *)(v11 + 340);
                          *(_DWORD *)addrinfo buf = 136446978;
                          *(void *)&buf[4] = "nw_http1_add_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->idle_connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1051 = 1LL;
                          *(_WORD *)v1052 = 2048;
                          *(void *)&v1052[2] = v121;
                          v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_225;
                        }
                      }
                    }

      free(v39);
      if (!v29) {
        goto LABEL_139;
      }
      goto LABEL_138;
    }

    v30 = (os_log_s *)__nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_137;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v63 = "nw_http1_get_http1_protocol";
    v32 = "%{public}s called with null handle";
LABEL_136:
    _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
    goto LABEL_137;
  }

  v7 = *((_DWORD *)handle + 6);
  v8 = (uint64_t *)a1->handle;
  if (v7 == 1) {
    goto LABEL_10;
  }
  if (v7 != 2)
  {
    if (v7 != 3)
    {
LABEL_139:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      char v60 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = (os_log_s *)gLogObj;
        os_log_type_t v35 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_171;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        os_log_type_t v36 = "%{public}s called with null http1";
        goto LABEL_170;
      }

      if (!v60)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = (os_log_s *)gLogObj;
        os_log_type_t v35 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_171;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        os_log_type_t v36 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_170;
      }

      v46 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = (os_log_s *)gLogObj;
      os_log_type_t v35 = type;
      os_log_type_t v58 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v46)
      {
        if (!v58) {
          goto LABEL_171;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        os_log_type_t v36 = "%{public}s called with null http1, no backtrace";
        goto LABEL_170;
      }

      if (!v58) {
        goto LABEL_165;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      v63 = "nw_protocol_http1_replace_input_handler";
      v64 = 2082;
      __int16 v65 = (nw_protocol *)v46;
      os_log_type_t v48 = "%{public}s called with null http1, dumping backtrace:%{public}s";
      goto LABEL_164;
    }

    os_log_type_t v9 = *((void *)handle + 2);
    if (v9)
    {
      v8 = (uint64_t *)(v9 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v63 = "nw_http1_get_http1_protocol";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = (os_log_s *)__nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_137;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_connection";
      goto LABEL_136;
    }

    if (!v60)
    {
      v30 = (os_log_s *)__nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_137;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_136;
    }

    v39 = (char *)__nw_create_backtrace_string();
    v30 = (os_log_s *)__nwlog_obj();
    v31 = type;
    v54 = os_log_type_enabled(v30, type);
    if (!v39)
    {
      if (!v54) {
        goto LABEL_137;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_136;
    }

    if (v54)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v63 = "nw_http1_get_http1_protocol";
      v64 = 2082;
      __int16 v65 = (nw_protocol *)v39;
      BOOL v41 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    goto LABEL_111;
  }

  v10 = *((void *)handle + 1);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v63 = "nw_http1_get_http1_protocol";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = (os_log_s *)__nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_137;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_stream";
      goto LABEL_136;
    }

    if (!v60)
    {
      v30 = (os_log_s *)__nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_137;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_136;
    }

    v39 = (char *)__nw_create_backtrace_string();
    v30 = (os_log_s *)__nwlog_obj();
    v31 = type;
    os_log_type_t v55 = os_log_type_enabled(v30, type);
    if (!v39)
    {
      if (!v55) {
        goto LABEL_137;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_136;
    }

    if (v55)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v63 = "nw_http1_get_http1_protocol";
      v64 = 2082;
      __int16 v65 = (nw_protocol *)v39;
      BOOL v41 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    goto LABEL_111;
  }

  v8 = (uint64_t *)(v10 + 248);
LABEL_10:
  v11 = *v8;
  if (!*v8) {
    goto LABEL_139;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v63 = "nw_protocol_http1_replace_input_handler";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      os_log_type_t v36 = "%{public}s called with null old_input_protocol";
      goto LABEL_170;
    }

    if (!v60)
    {
      v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      os_log_type_t v36 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
      goto LABEL_170;
    }

    v46 = (char *)__nw_create_backtrace_string();
    v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type;
    v47 = os_log_type_enabled(v34, type);
    if (!v46)
    {
      if (!v47) {
        goto LABEL_171;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      os_log_type_t v36 = "%{public}s called with null old_input_protocol, no backtrace";
      goto LABEL_170;
    }

    if (!v47) {
      goto LABEL_165;
    }
    *(_DWORD *)addrinfo buf = 136446466;
    v63 = "nw_protocol_http1_replace_input_handler";
    v64 = 2082;
    __int16 v65 = (nw_protocol *)v46;
    os_log_type_t v48 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_164:
    _os_log_impl(&dword_181A5C000, v34, v35, v48, buf, 0x16u);
    goto LABEL_165;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v63 = "nw_protocol_http1_replace_input_handler";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      os_log_type_t v36 = "%{public}s called with null new_input_protocol";
      goto LABEL_170;
    }

    if (!v60)
    {
      v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      os_log_type_t v36 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_170;
    }

    v46 = (char *)__nw_create_backtrace_string();
    v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type;
    v49 = os_log_type_enabled(v34, type);
    if (!v46)
    {
      if (!v49) {
        goto LABEL_171;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      os_log_type_t v36 = "%{public}s called with null new_input_protocol, no backtrace";
      goto LABEL_170;
    }

    if (!v49) {
      goto LABEL_165;
    }
    *(_DWORD *)addrinfo buf = 136446466;
    v63 = "nw_protocol_http1_replace_input_handler";
    v64 = 2082;
    __int16 v65 = (nw_protocol *)v46;
    os_log_type_t v48 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
    goto LABEL_164;
  }

  if (v7 != 2)
  {
    if (v7 != 3)
    {
LABEL_156:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)addrinfo buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      char v60 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = (os_log_s *)gLogObj;
        os_log_type_t v35 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_171;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        os_log_type_t v36 = "%{public}s called with null http1_stream";
        goto LABEL_170;
      }

      if (!v60)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = (os_log_s *)gLogObj;
        os_log_type_t v35 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_171;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        os_log_type_t v36 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_170;
      }

      v46 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = (os_log_s *)gLogObj;
      os_log_type_t v35 = type;
      v59 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v46)
      {
        if (v59)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v63 = "nw_protocol_http1_replace_input_handler";
          v64 = 2082;
          __int16 v65 = (nw_protocol *)v46;
          os_log_type_t v48 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
          goto LABEL_164;
        }

    if (v30) {
      free(v30);
    }
    goto LABEL_113;
  }

  v10 = (uint64_t *)(handle + 8);
LABEL_16:
  v11 = *v10;
  if (!*v10) {
    goto LABEL_113;
  }
  v12 = *(void *)(v11 + 256);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 864);
    size_t v14 = *(void *)(v12 + 32);
    if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
      goto LABEL_25;
    }
  }

  else
  {
    size_t v14 = 0LL;
    v13 = 5;
    if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
      goto LABEL_25;
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v15 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    v16 = *(void *)(v11 + 256);
    os_log_type_t v17 = *(_DWORD *)(*(void *)(v11 + 248) + 372LL);
    if (v16) {
      LODWORD(v16) = *(_DWORD *)(v16 + 860);
    }
    BOOL v18 = *(_DWORD *)(v11 + 424);
    *(_DWORD *)addrinfo buf = 136448514;
    v49 = "nw_protocol_http1_updated_path";
    os_log_type_t v50 = 2082;
    BOOL v51 = (char *)(v11 + 74);
    os_log_type_t v52 = 2080;
    id v53 = " ";
    v54 = 1024;
    os_log_type_t v55 = v17;
    os_log_type_t v56 = 1024;
    BOOL v57 = v16;
    os_log_type_t v58 = 1024;
    v59 = v18;
    char v60 = 2048;
    os_log_type_t v61 = v11;
    objc_super v62 = 2048;
    v63 = v12;
    v64 = 1024;
    __int16 v65 = v13;
    v66 = 2048;
    __int16 v67 = v14;
    _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream, protocol: %p, connection protocol: %p, connection state: % u, output_handler: %p",  buf,  0x56u);
  }

      goto LABEL_112;
    }

    if (!v51)
    {
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl( &dword_181A5C000,  v25,  v49,  "%{public}s called with null publicKey, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_111;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v41 = type;
    v42 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_181A5C000, v25, v41, "%{public}s called with null publicKey, no backtrace", buf, 0xCu);
      }

      goto LABEL_111;
    }

    if (v42)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v55 = "nw_utilities_public_key_info_for_sec_identity";
      os_log_type_t v56 = 2082;
      BOOL v57 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v25,  v41,  "%{public}s called with null publicKey, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_77;
  }

  unint64_t v15 = (void *)SecKeyCopySubjectPublicKeyInfo();
  CFRelease(v14);
  if (!v15)
  {
    __nwlog_obj();
    os_log_type_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v55 = "nw_utilities_public_key_info_for_sec_identity";
    v30 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    BOOL v51 = 0;
    if (__nwlog_fault(v30, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v55 = "nw_utilities_public_key_info_for_sec_identity";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null result", buf, 0xCu);
        }
      }

      else if (v51)
      {
        v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v44 = type;
        os_log_type_t v45 = os_log_type_enabled(v31, type);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v55 = "nw_utilities_public_key_info_for_sec_identity";
            os_log_type_t v56 = 2082;
            BOOL v57 = v43;
            _os_log_impl( &dword_181A5C000,  v31,  v44,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v43);
          goto LABEL_118;
        }

        if (v45)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v55 = "nw_utilities_public_key_info_for_sec_identity";
          _os_log_impl(&dword_181A5C000, v31, v44, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v55 = "nw_utilities_public_key_info_for_sec_identity";
          _os_log_impl( &dword_181A5C000,  v31,  v50,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

                v73 = *v7++;
                v72 = v73;
                v16 += (unint64_t)(v73 & 0x7F) << v17;
                v17 += 7;
              }

              while ((v73 & 0x80) != 0);
              if (v17 >= 0x40)
              {
                v155 = 3802;
                if (v16 > -1 || v72 > 1) {
                  v157 = v10;
                }
                else {
                  v157 = v7;
                }
                v161 = 3802;
                goto LABEL_314;
              }

              v161 = 3802;
              goto LABEL_348;
            }

  v80 = v43->i32[0];
  v43 = (uint32x2_t *)((char *)v43 + 4);
  v41 += v80;
  if ((v42 & 2) != 0) {
    goto LABEL_112;
  }
LABEL_103:
  if ((v42 & 1) != 0) {
LABEL_104:
  }
    v41 += v43->u8[0];
LABEL_105:
  v22 = 0;
  _ZF = (v40 & 1) == 0LL;
  v73 = __ROR8__(v41, 56);
  if (_ZF) {
    v73 = v41;
  }
  v74 = ((unint64_t)(v63 + v73 + HIDWORD(v73)) >> 32) + (v63 + v73 + HIDWORD(v73));
  a6 += (unsigned __int16)(((HIDWORD(v74) + (unsigned __int16)v74 + WORD1(v74)) >> 16)
                         + WORD2(v74)
                         + v74
                         + WORD1(v74)
LABEL_22:
  BOOL v23 = a2 - (a4 + a5);
  os_log_type_t v36 = (unsigned __int8 *)(a1 + a4 + a5);
  if ((v36 & 1) != 0)
  {
    os_log_type_t v38 = (uint32x2_t *)(v36 + 1);
    v37 = (unint64_t)*v36 << 8;
    --v23;
  }

  else
  {
    v37 = 0LL;
    os_log_type_t v38 = (uint32x2_t *)(a1 + a4 + a5);
  }

  if ((v38 & 2) != 0)
  {
    if (v23 < 2)
    {
      v39 = 0LL;
      if ((v23 & 1) == 0) {
        goto LABEL_69;
      }
      goto LABEL_68;
    }

    v44 = v38->u16[0];
    os_log_type_t v38 = (uint32x2_t *)((char *)v38 + 2);
    v37 += v44;
    v23 -= 2;
  }

  if (v23 < 0x40)
  {
    v39 = 0LL;
  }

  else
  {
    v39 = 0LL;
    _X14 = v38;
    do
    {
      __asm { PRFM            #0, [X14,#0x20] }

      os_log_type_t v38 = _X14 + 8;
      __asm { PRFM            #0, [X14,#0x40] }

      v37 += vaddvq_s64( vaddq_s64( vaddq_s64((int64x2_t)vaddl_u32(*_X14, _X14[4]), (int64x2_t)vaddl_u32(_X14[2], _X14[6])),  vaddq_s64( (int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X14->i8, *(uint32x4_t *)_X14[4].i8),  (int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X14[2].i8, *(uint32x4_t *)_X14[6].i8))));
      v23 -= 64;
      os_log_type_t v48 = __ROR8__(v37, 56);
      v49 = v39 + HIDWORD(v48) + v48;
      if (v37 >> 62)
      {
        v37 = 0LL;
        v39 = v49;
      }

      _X14 += 8;
    }

    while (v23 > 0x3F);
  }

  if (v23 >= 0x20)
  {
    os_log_type_t v56 = *(uint32x4_t *)v38->i8;
    BOOL v57 = *(uint32x4_t *)v38[2].i8;
    v38 += 4;
    v37 += vaddvq_s64( vaddq_s64( (int64x2_t)vaddl_u32(*(uint32x2_t *)v56.i8, *(uint32x2_t *)v57.i8),  (int64x2_t)vaddl_high_u32(v56, v57)));
    if ((v23 & 0x10) == 0)
    {
LABEL_64:
      if ((v23 & 8) == 0) {
        goto LABEL_65;
      }
      goto LABEL_77;
    }
  }

  else if ((v23 & 0x10) == 0)
  {
    goto LABEL_64;
  }

  os_log_type_t v58 = *(uint32x4_t *)v38->i8;
  v38 += 2;
  v37 += vaddlvq_u32(v58);
  if ((v23 & 8) == 0)
  {
LABEL_65:
    if ((v23 & 4) == 0) {
      goto LABEL_66;
    }
    goto LABEL_78;
  }

    if (v47) {
      free(v47);
    }
    v13 = 0LL;
    goto LABEL_65;
  }

  v8 = v6 + 28;
  os_unfair_lock_lock(v6 + 28);
  if (v7[29]._os_unfair_lock_opaque != 2)
  {
    v13 = 0LL;
    goto LABEL_64;
  }

  os_log_type_t v9 = *(id *)&v7[62]._os_unfair_lock_opaque;
  v10 = v9;
  if (!v9)
  {
    v32 = 0LL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v50 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
    BOOL v51 = (char *)_os_log_send_and_compose_impl();

    v67[0] = OS_LOG_TYPE_ERROR;
    v71[0] = 0;
    if (__nwlog_fault(v51, v67, v71))
    {
      if (v67[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v52 = (os_log_s *)(id)gLogObj;
        id v53 = v67[0];
        if (os_log_type_enabled(v52, v67[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
          _os_log_impl(&dword_181A5C000, v52, v53, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }

      else if (v71[0])
      {
        BOOL v57 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v52 = (os_log_s *)(id)gLogObj;
        os_log_type_t v58 = v67[0];
        v59 = os_log_type_enabled(v52, v67[0]);
        if (v57)
        {
          if (v59)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v57;
            _os_log_impl( &dword_181A5C000,  v52,  v58,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v57);
          goto LABEL_120;
        }

        if (v59)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
          _os_log_impl(&dword_181A5C000, v52, v58, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v52 = (os_log_s *)(id)gLogObj;
        os_log_type_t v61 = v67[0];
        if (os_log_type_enabled(v52, v67[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_flow_copy_multipath_subflow_counts";
          _os_log_impl( &dword_181A5C000,  v52,  v61,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

            v92 = *(void *)(a1 + 336);
            if (v92)
            {
              if ((*v6 & 0x800) == 0)
              {
                if (gLogDatapath)
                {
                  v256 = (os_log_s *)__nwlog_obj();
                  v257 = os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG);
                  v92 = *(void *)(a1 + 336);
                  if (v257)
                  {
                    v258 = *(_DWORD *)(v92 + 1280);
                    v259 = *(void **)(a1 + 240);
                    *(_DWORD *)addrinfo buf = 136447234;
                    *(void *)&buf[4] = "nw_http3_stream_serialize_fields";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = a1 + 636;
                    *(_WORD *)&buf[22] = 2080;
                    v427 = (__n128 (*)(uint64_t, uint64_t))" ";
                    LOWORD(v428) = 1024;
                    *(_DWORD *)((char *)&v428 + 2) = v258;
                    HIWORD(v428) = 2048;
                    v429 = v259;
                    _os_log_impl( &dword_181A5C000,  v256,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> called",  buf,  0x30u);
                    v92 = *(void *)(a1 + 336);
                  }
                }
              }

              *(void *)type = 0LL;
              *(void *)&type[8] = type;
              *(void *)&type[16] = 0x2000000000LL;
              v418 = 0LL;
              v413 = 0LL;
              v414 = &v413;
              v415 = 0x2000000000LL;
              v416 = 0LL;
              v408[3] = 0LL;
              *(void *)v409 = 0LL;
              v410 = v409;
              v411 = 0x2000000000LL;
              v412 = 0LL;
              v408[0] = 0LL;
              v408[1] = v408;
              v408[2] = 0x2000000000LL;
              v404 = 0LL;
              v405 = &v404;
              v406 = 0x2000000000LL;
              v407 = 22LL;
              v400 = 0LL;
              v401 = &v400;
              v402 = 0x2000000000LL;
              v403 = 0LL;
              v399[0] = 0LL;
              v399[1] = v399;
              v399[2] = 0x2000000000LL;
              v399[3] = 512LL;
              v398[0] = 0LL;
              v398[1] = v398;
              v398[2] = 0x2000000000LL;
              v398[3] = 512LL;
              v394 = 0LL;
              v395 = &v394;
              v396 = 0x2000000000LL;
              alloc = dispatch_data_create_alloc();
              v390 = 0LL;
              v391 = &v390;
              v392 = 0x2000000000LL;
              v393 = dispatch_data_create_alloc();
              v93 = *(_DWORD *)(a1 + 624);
              if ((*(_BYTE *)(v92 + 268) & 1) == 0)
              {
                log = v64;
                v94 = *(void *)(*(void *)&type[8] + 24LL);
                v95 = *(void *)(a1 + 240);
                v96 = *(FILE **)(v92 + 456);
                if (v96)
                {
                  fwrite("qenc: debug: ", 0xDuLL, 1uLL, v96);
                  fprintf(*(FILE **)(v92 + 456), "Start header for stream %llu", v95);
                  fputc(10, *(FILE **)(v92 + 456));
                }

                v97 = (void *)(v92 + 336);
                while (1)
                {
                  v97 = (void *)*v97;
                  if (!v97) {
                    break;
                  }
                  v98 = v97[1];
                  if (v98 != -1) {
                    goto LABEL_129;
                  }
                }

                if ((*(_BYTE *)(v92 + 268) & 4) != 0
                  || 4112 * (unint64_t)*(unsigned int *)(v92 + 300) < *(unsigned int *)(v92 + 276))
                {
                  v97 = malloc(0x1010uLL);
                  if (v97)
                  {
                    v98 = 0LL;
                    *v97 = 0LL;
                    v97[1] = 0LL;
                    **(void **)(v92 + 344) = v97;
                    *(void *)(v92 + 344) = v97;
                    ++*(_DWORD *)(v92 + 300);
LABEL_129:
                    v103 = __clz(__rbit64(~v98));
                    v97[1] = (1LL << v103) | v98;
                    v104 = &v97[8 * v103];
                    v104[2] = 0LL;
                    v104 += 2;
                    *(_OWORD *)(v104 + 3) = 0u;
                    *(_OWORD *)(v104 + 5) = 0u;
                    v104[7] = 0LL;
                    *(_OWORD *)(v104 + 1) = 0u;
                    v104[4] = v104;
                    v105 = *(void **)(v92 + 360);
                    v104[1] = v105;
                    *v105 = v104;
                    *(void *)(v92 + 360) = v104;
                    v106 = (void *)(v92 + 384);
                    *(void *)(v92 + 384) = v104;
                    v104[5] = v95;
                    *((_DWORD *)v104 + 12) = v93;
                    goto LABEL_130;
                  }
                }

                v106 = (void *)(v92 + 384);
                *(void *)(v92 + 384) = 0LL;
                v110 = *(FILE **)(v92 + 456);
                if (v110)
                {
                  fwrite("qenc: info: ", 0xCuLL, 1uLL, v110);
                  fprintf(*(FILE **)(v92 + 456), "could not allocate hinfo for stream %llu", v95);
                  fputc(10, *(FILE **)(v92 + 456));
                }

  if (v48) {
    free(v48);
  }
  v19 = 0LL;
  BOOL v18 = v174;
  if (!v10) {
    goto LABEL_114;
  }
LABEL_43:
  v34 = strlen(v10);
  if (v19)
  {
    v169 = v12;
    os_log_type_t v35 = (v34 + 1);
    os_log_type_t v36 = v175;
    if (v19 < v175)
    {
      if (v175 - v19 >= v35 + 5)
      {
        *v19 = 8;
        *(_DWORD *)(v19 + 1) = v35;
        if (v34 != -1) {
          memcpy(v19 + 5, v10, v35);
        }
        v19 += v35 + 5;
LABEL_67:
        unint64_t v15 = v172;
        if ((v169 & 1) != 0) {
          goto LABEL_139;
        }
        goto LABEL_115;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)addrinfo buf = 136447490;
      v179 = "nw_necp_append_tlv";
      v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v35 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 8;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v35;
      v37 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v176 = 0;
      if (__nwlog_fault(v37, &type, &v176))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v38 = gLogObj;
          v39 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_64;
          }
          *(_DWORD *)addrinfo buf = 136447490;
          v179 = "nw_necp_append_tlv";
          v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v35 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 8;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v35;
          os_log_type_t v40 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
LABEL_61:
          os_log_type_t v45 = (os_log_s *)v38;
          v46 = v39;
LABEL_62:
          v47 = 54;
LABEL_63:
          _os_log_impl(&dword_181A5C000, v45, v46, v40, buf, v47);
          goto LABEL_64;
        }

        if (!v176)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v38 = gLogObj;
          v39 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_64;
          }
          *(_DWORD *)addrinfo buf = 136447490;
          v179 = "nw_necp_append_tlv";
          v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v35 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 8;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v35;
          os_log_type_t v40 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
          goto LABEL_61;
        }

        BOOL v41 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v42 = (os_log_s *)gLogObj;
        v43 = type;
        v44 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v41)
        {
          if (v44)
          {
            *(_DWORD *)addrinfo buf = 136447746;
            v179 = "nw_necp_append_tlv";
            v180 = 2048;
            *(void *)v181 = v19;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v35 + 5;
            *(_WORD *)&v182[8] = 2048;
            *(void *)&v182[10] = v175;
            *(_WORD *)&v182[18] = 1024;
            *(_DWORD *)&v182[20] = 8;
            *(_WORD *)&v182[24] = 1024;
            *(_DWORD *)&v182[26] = v35;
            *(_WORD *)&v182[30] = 2082;
            *(void *)&v182[32] = v41;
            _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
          }

          free(v41);
          if (!v37) {
            goto LABEL_66;
          }
          goto LABEL_65;
        }

        if (v44)
        {
          *(_DWORD *)addrinfo buf = 136447490;
          v179 = "nw_necp_append_tlv";
          v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v35 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 8;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v35;
          os_log_type_t v40 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
          os_log_type_t v45 = v42;
          v46 = v43;
          goto LABEL_62;
        }
      }

  __break(1u);
  return result;
}

    free(backtrace_string);
    goto LABEL_173;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (os_log_s *)gLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v58 = "nw_http_decrypt_chunked_oblivious_request_header";
  _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_ERROR, "%{public}s Media type exceeds max length", buf, 0xCu);
  return 0LL;
}

      if (v53) {
        free(v53);
      }
      os_log_type_t v29 = 0LL;
      goto LABEL_52;
    }

    __nwlog_obj();
    os_log_type_t v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
    v47 = (char *)_os_log_send_and_compose_impl();

    v79[0] = 16;
    v78 = 0;
    if (__nwlog_fault(v47, v79, &v78))
    {
      if (v79[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v51 = v79[0];
        if (os_log_type_enabled(v48, (os_log_type_t)v79[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_181A5C000, v48, v51, "%{public}s called with null interface", buf, 0xCu);
        }

        metadata = nw_http_connection_create_metadata(0LL, 0LL, 0LL);
        v87 = nw_connection_get_privacy_stance(*(void **)(a1 + 32));
        nw_http_connection_metadata_set_privacy_stance(metadata, v87);
        *(void *)addrinfo buf = 0LL;
        *(void *)&buf[8] = 0LL;
        nw_connection_get_uuid(*(void **)(a1 + 32), buf);
        nw_http_connection_metadata_set_uuid(metadata, (uint64_t)buf);
        v88 = *(void *)(a1 + 40);
        if (v88) {
          v89 = *(void **)(v88 + 48);
        }
        else {
          v89 = 0LL;
        }
        [v89 clientMetadata];
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        v91 = nw_http_client_metadata_copy_current_transaction_metadata(v90);

        nw_http_transaction_metadata_set_connection_metadata(v91, metadata);
        nw_http_transaction_metadata_set_first_on_connection(v91);
        -[NWURLLoaderHTTP cancelConnection](*(void *)(a1 + 40));
        v92 = *(void *)(a1 + 40);
        if (v92)
        {
          v93 = *(void **)(v92 + 48);
          v94 = *(void *)(v92 + 88);
        }

        else
        {
          v93 = 0LL;
          v94 = 0LL;
        }

        v95 = v93;
        [v95 loaderFailedToConnect:v94];

LABEL_116:
        id v6 = v59;
        goto LABEL_107;
      }

      *(_BYTE *)(v62 + 8) = 1;
      os_log_type_t v58 = *(void *)(a1 + 40);
      id v6 = v59;
LABEL_72:
      if (!v58)
      {
        v59 = v6;
        goto LABEL_76;
      }

    if (v67) {
      free(v67);
    }
    mode = 0;
    goto LABEL_114;
  }

  mode = v1->mode;

  if (mode == 2)
  {
    size_t v4 = nw_endpoint_handler_copy_flow(v2);
    v5 = v2;
    state = v5->state;

    if ((state & 0xFFFFFFFE) == 4) {
      goto LABEL_119;
    }
    if (*((void *)v4 + 114))
    {
      if ((*((char *)v4 + 32) & 0x80000000) == 0)
      {
        v7 = v5;
        v8 = v7[7];

        if (v8) {
          nw_association_force_update(v8, *((void **)v4 + 104));
        }
      }

      os_log_type_t v9 = (void *)*((void *)v4 + 51);
      if (v9)
      {
        v10 = v9[3];
        if (v10)
        {
          v11 = *(uint64_t (**)(void))(v10 + 224);
          if (v11)
          {
            v12 = (void *)v9[5];
            if (v12 == &nw_protocol_ref_counted_handle)
            {
              size_t v14 = v9[11];
              if (v14) {
                v9[11] = v14 + 1;
              }
              v13 = -1;
            }

            else
            {
              v13 = 0;
            }

            *(void *)addrinfo buf = v9;
            buf[8] = v13;
            unint64_t v15 = v11();
            if (v12 == &nw_protocol_ref_counted_handle) {
              nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
            }
            os_unfair_lock_lock((os_unfair_lock_t)v4 + 220);
            v16 = (void *)*((void *)v4 + 111);
            *((void *)v4 + 111) = v15;

            os_unfair_lock_unlock((os_unfair_lock_t)v4 + 220);
          }
        }
      }
    }

    os_log_type_t v17 = v5;
    BOOL v18 = v2->mode;

    if ((_DWORD)v18 == 2)
    {
      v19 = nw_endpoint_handler_copy_flow(v17);
      v20 = v17;
      v21 = v20[4];

      sleep_keepalive_interval = nw_parameters_get_sleep_keepalive_interval(v21);
      if (sleep_keepalive_interval)
      {
        BOOL v23 = (void *)*((void *)v19 + 111);
        if (v23)
        {
          *(void *)addrinfo buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = ___ZL45nw_endpoint_flow_enable_sleep_proxy_if_neededP30NWConcrete_nw_endpoint_handler_block_invoke;
          v95 = (const char *)&unk_189BC79B0;
          *(void *)v96 = v19;
          *(_DWORD *)&v96[16] = sleep_keepalive_interval;
          *(void *)&v96[8] = v20;
          nw_fd_wrapper_get_fd(v23, buf);

          BOOL v24 = *(id *)v96;
LABEL_42:

          goto LABEL_43;
        }

        os_log_type_t v36 = v20;
        v37 = (*((_BYTE *)v36 + 268) & 0x20) == 0;

        if (v37)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v24 = (id)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
          {
            id_string = nw_endpoint_handler_get_id_string(v36);
            loga = nw_endpoint_handler_dry_run_string(v36);
            v87 = id_string;
            obja = nw_endpoint_handler_copy_endpoint(v36);
            logging_description = nw_endpoint_get_logging_description(obja);
            os_log_type_t v40 = nw_endpoint_handler_state_string(v36);
            BOOL v41 = nw_endpoint_handler_mode_string(v36);
            v42 = nw_endpoint_handler_copy_current_path(v36);
            *(_DWORD *)addrinfo buf = 136447746;
            *(void *)&buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v87;
            *(_WORD *)&buf[22] = 2082;
            v95 = loga;
            *(_WORD *)v96 = 2082;
            *(void *)&v96[2] = logging_description;
            *(_WORD *)&v96[10] = 2082;
            *(void *)&v96[12] = v40;
            v97 = 2082;
            v98 = v41;
            v99 = 2114;
            v100 = v42;
            _os_log_impl( &dword_181A5C000,  (os_log_t)v24,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Sleep proxy is only suppo rted for socket flows",  buf,  0x48u);
          }

          goto LABEL_42;
        }
      }

    if (v33)
    {
      __int16 v67 = (void *)v33;
LABEL_140:
      free(v67);
    }

    return 4294966775LL;
  }

  if (!*(void *)(a3 + 144))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v39 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775LL;
    }
    os_log_type_t v40 = *(_DWORD *)(a3 + 368);
    BOOL v41 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)addrinfo buf = 136447234;
    v107 = "on_begin_headers_callback";
    v108 = 2082;
    v109 = a3 + 390;
    v110 = 2080;
    v111 = (uint64_t)" ";
    v112 = 1024;
    v113 = v40;
    v114 = 1024;
    LODWORD(v115[0]) = v41;
    v11 = "%{public}s %{public}s%s<i%u> http2 has no listen handler when new stream (%d) is being opened, closing";
    v12 = (os_log_s *)v39;
    v13 = 44;
    goto LABEL_16;
  }

  v16 = *(__int16 *)(a3 + 388);
  if (!*(void *)(a3 + 112))
  {
    if (v16 < 0) {
      return 4294966775LL;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v46 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)addrinfo buf = 136446978;
    v107 = "on_begin_headers_callback";
    v108 = 2082;
    v109 = a3 + 390;
    v110 = 2080;
    v111 = (uint64_t)" ";
    v112 = 1024;
    v113 = v46;
    BOOL v18 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v104 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v47 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v48 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        v49 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)addrinfo buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 390;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v49;
        os_log_type_t v50 = "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened";
LABEL_126:
        _os_log_impl(&dword_181A5C000, v47, v48, v50, buf, 0x26u);
      }
    }

    else if (v104)
    {
      v59 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v47 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v48 = type;
      char v60 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (!v59)
      {
        if (!v60) {
          goto LABEL_127;
        }
        v72 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)addrinfo buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 390;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v72;
        os_log_type_t v50 = "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened, no backtrace";
        goto LABEL_126;
      }

      if (v60)
      {
        os_log_type_t v61 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)addrinfo buf = 136447234;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 390;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v61;
        v114 = 2082;
        v115[0] = v59;
        _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened, dumping backtrace:%{public}s",  buf,  0x30u);
      }

      free(v59);
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v47 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v48 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        v71 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)addrinfo buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 390;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v71;
        os_log_type_t v50 = "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened, backtrace limit exceeded";
        goto LABEL_126;
      }
    }

void sub_181A6F890(_Unwind_Exception *a1)
{
}

nw_parameters *nw_parameters_create_secure_tcp_or_quic_connection(void *a1, void *a2, void *a3)
{
  return nw_parameters_create_quic_connection_with_tls_fallback(a1, a2, 0LL, a3);
}

nw_parameters *nw_parameters_create_quic_connection_with_tls_fallback( void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v136 = *MEMORY[0x1895F89C0];
  v7 = a1;
  v8 = a2;
  id v129 = a3;
  os_log_type_t v9 = a4;
  v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v89 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_181A5C000, v88, v89, "%{public}s called with null configure_security", buf, 0xCu);
      }

      goto LABEL_243;
    }

    if (!v130)
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v114 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v114,  "%{public}s called with null configure_security, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_243;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v99 = type;
    BOOL v100 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v100)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v99,  "%{public}s called with null configure_security, no backtrace",  buf,  0xCu);
      }

      goto LABEL_243;
    }

    if (v100)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      __int16 v134 = 2082;
      v135 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v88,  v99,  "%{public}s called with null configure_security, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_197;
  }

  if (!v9)
  {
    __nwlog_obj();
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v91 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_181A5C000, v88, v91, "%{public}s called with null configure_tcp_fallback", buf, 0xCu);
      }

      goto LABEL_243;
    }

    if (!v130)
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v115 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v115,  "%{public}s called with null configure_tcp_fallback, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_243;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v101 = type;
    BOOL v102 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v102)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v101,  "%{public}s called with null configure_tcp_fallback, no backtrace",  buf,  0xCu);
      }

      goto LABEL_243;
    }

    if (v102)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      __int16 v134 = 2082;
      v135 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v88,  v101,  "%{public}s called with null configure_tcp_fallback, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_197;
  }

  if (!v8)
  {
    __nwlog_obj();
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v93 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_181A5C000, v88, v93, "%{public}s called with null configure_quic_connection", buf, 0xCu);
      }

      goto LABEL_243;
    }

    if (!v130)
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v116 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v116,  "%{public}s called with null configure_quic_connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_243;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v103 = type;
    BOOL v104 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v104)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v103,  "%{public}s called with null configure_quic_connection, no backtrace",  buf,  0xCu);
      }

      goto LABEL_243;
    }

    if (v104)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      __int16 v134 = 2082;
      v135 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v88,  v103,  "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_197;
  }

  if (v8 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18956)
  {
    __nwlog_obj();
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v95 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v95,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
      }

      goto LABEL_243;
    }

    if (!v130)
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v117 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v117,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtr ace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_243;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v105 = type;
    BOOL v106 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v106)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v105,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace",  buf,  0xCu);
      }

      goto LABEL_243;
    }

    if (v106)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      __int16 v134 = 2082;
      v135 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v88,  v105,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_197:
    free(backtrace_string);
    if (!v87) {
      goto LABEL_246;
    }
    goto LABEL_245;
  }

  if (v9 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18956)
  {
    __nwlog_obj();
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v97 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v97,  "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
      }
    }

    else if (v130)
    {
      v107 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v108 = type;
      BOOL v109 = os_log_type_enabled(v88, type);
      if (v107)
      {
        if (v109)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          __int16 v134 = 2082;
          v135 = v107;
          _os_log_impl( &dword_181A5C000,  v88,  v108,  "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v107);
LABEL_244:
        if (!v87)
        {
LABEL_246:
          v30 = 0LL;
          goto LABEL_152;
        }

          nw_frame_collapse(v45);
          nw_frame_unclaim(v45, v115, *(_DWORD *)(v322 + 24), 0);
          os_log_type_t v116 = *(void *)(v45 + 32);
          os_log_type_t v117 = *(void **)(v45 + 40);
          if (v116)
          {
            *(void *)(v116 + 40) = v117;
            os_log_type_t v117 = *(void **)(v45 + 40);
          }

          else
          {
            v319 = *(id **)(v45 + 40);
          }

          *os_log_type_t v117 = v116;
          os_log_type_t v118 = v336;
          *(void *)(v45 + 32) = 0LL;
          *(void *)(v45 + 40) = v118;
          *os_log_type_t v118 = v45;
          v336 = (uint64_t *)(v45 + 32);

          _Block_object_dispose(&v321, 8);
          if (v42) {
            v119 = v316 != 0LL;
          }
          else {
            v119 = 0;
          }
          BOOL v48 = v46;
          v120 = (uint64_t)v316;
          os_log_type_t v45 = (uint64_t)v316;
          if (!v119) {
            goto LABEL_247;
          }
        }

        os_log_type_t v84 = *(_DWORD *)(v45 + 52);
        if (v84)
        {
          v85 = v84 - (*(_DWORD *)(v45 + 56) + *(_DWORD *)(v45 + 60));
          if ((v320 & 0x100000000LL) == 0) {
            goto LABEL_124;
          }
        }

        else
        {
          v85 = 0;
          if ((v320 & 0x100000000LL) == 0) {
            goto LABEL_124;
          }
        }

        if (v301 > v85)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v294) & 1) != 0)
          {
            v143 = 40;
          }

          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v137 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
            {
              v310 = v137;
              v138 = nw_endpoint_handler_get_id_string(v294);
              v139 = nw_endpoint_handler_dry_run_string(v294);
              v140 = nw_endpoint_handler_copy_endpoint(v294);
              v141 = nw_endpoint_get_logging_description(v140);
              v297 = nw_endpoint_handler_state_string(v294);
              v285 = nw_endpoint_handler_mode_string(v294);
              v142 = nw_endpoint_handler_copy_current_path(v294);
              *(_DWORD *)addrinfo buf = 136448258;
              *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v138;
              *(_WORD *)&buf[22] = 2082;
              v338 = v139;
              *(_WORD *)v339 = 2082;
              *(void *)&v339[2] = v141;
              *(_WORD *)&v339[10] = 2082;
              *(void *)&v339[12] = v297;
              *(_WORD *)&v339[20] = 2082;
              *(void *)&v339[22] = v285;
              v340 = 2114;
              v341 = v142;
              v342 = 1024;
              v343 = v85;
              v344 = 2048;
              v345 = v301;
              _os_log_impl( &dword_181A5C000,  v310,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Data won't fit in frame (%u < %zu)",  buf,  0x58u);

              v143 = 40;
              goto LABEL_240;
            }

            v143 = 40;
LABEL_243:
          }

          goto LABEL_244;
        }

    if (v55) {
      free(v55);
    }
LABEL_16:
    if (v8 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v34 = a1[1].callbacks;
      if (v34)
      {
        id v35 = (nw_protocol_callbacks *)((char *)v34 - 1);
        a1[1].callbacks = v35;
        if (!v35)
        {
          os_log_type_t v36 = *(void (***)(void))a1[1].flow_id;
          if (v36)
          {
            *(void *)a1[1].flow_id = 0LL;
            v36[2](v36);
            _Block_release(v36);
          }

          if ((a1[1].flow_id[8] & 1) != 0)
          {
            v37 = *(const void **)a1[1].flow_id;
            if (v37) {
              _Block_release(v37);
            }
          }

          free(a1);
        }
      }
    }

    if (v6 == &nw_protocol_ref_counted_handle && a2->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v38 = a2[1].callbacks;
      if (v38)
      {
        v39 = (nw_protocol_callbacks *)((char *)v38 - 1);
        a2[1].callbacks = v39;
        if (!v39)
        {
          os_log_type_t v40 = *(void (***)(void))a2[1].flow_id;
          if (v40)
          {
            *(void *)a2[1].flow_id = 0LL;
            v40[2](v40);
            _Block_release(v40);
          }

          if ((a2[1].flow_id[8] & 1) != 0)
          {
            BOOL v41 = *(const void **)a2[1].flow_id;
            if (v41) {
              _Block_release(v41);
            }
          }

          free(a2);
        }
      }
    }

    v12 = *(uint64_t (***)(void))(v4 + 160);
    v13 = *(_BYTE *)(v4 + 168);
    *(void *)(v4 + 160) = 0LL;
    *(_BYTE *)(v4 + 168) = v13 | 1;
    size_t v14 = v12[2](v12);
    _Block_release(v12);
    if ((v14 & 1) == 0) {
      return 1LL;
    }
    goto LABEL_23;
  }

  __nwlog_obj();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v102 = "nw_protocol_plugin_retry_connect";
  char v60 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v99 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v99)
    {
      os_log_type_t v61 = (os_log_s *)__nwlog_obj();
      objc_super v62 = type;
      if (os_log_type_enabled(v61, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v102 = "nw_protocol_plugin_retry_connect";
        v63 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_207;
      }

      goto LABEL_208;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v61 = (os_log_s *)__nwlog_obj();
    objc_super v62 = type;
    os_log_type_t v79 = os_log_type_enabled(v61, type);
    if (!backtrace_string)
    {
      if (v79)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v102 = "nw_protocol_plugin_retry_connect";
        v63 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_207;
      }

      goto LABEL_208;
    }

    if (v79)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v102 = "nw_protocol_plugin_retry_connect";
      os_log_type_t v103 = 2082;
      BOOL v104 = (nw_protocol *)backtrace_string;
      os_log_type_t v76 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_156;
    }

      free(v81);
      goto LABEL_198;
    }

    if (v98)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl(&dword_181A5C000, v93, v97, "%{public}s called with null fd_wrapper, no backtrace", buf, 0xCu);
    }

        if (v88) {
          free(v88);
        }
        id v6 = &qword_18C45F000;
        goto LABEL_157;
      }

      __nwlog_obj();
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v101 = "nw_webtransport_http3_get_quic_stream_id";
      BOOL v51 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v98 = 0;
      if (__nwlog_fault(v51, &type, &v98))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v52 = (os_log_s *)__nwlog_obj();
          id v53 = type;
          if (!os_log_type_enabled(v52, type)) {
            goto LABEL_130;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v101 = "nw_webtransport_http3_get_quic_stream_id";
          v54 = "%{public}s called with null output_protocol";
          goto LABEL_129;
        }

        if (!v98)
        {
          os_log_type_t v52 = (os_log_s *)__nwlog_obj();
          id v53 = type;
          if (!os_log_type_enabled(v52, type)) {
            goto LABEL_130;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v101 = "nw_webtransport_http3_get_quic_stream_id";
          v54 = "%{public}s called with null output_protocol, backtrace limit exceeded";
          goto LABEL_129;
        }

        v59 = (char *)__nw_create_backtrace_string();
        os_log_type_t v52 = (os_log_s *)__nwlog_obj();
        id v53 = type;
        char v60 = os_log_type_enabled(v52, type);
        if (!v59)
        {
          if (!v60) {
            goto LABEL_130;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v101 = "nw_webtransport_http3_get_quic_stream_id";
          v54 = "%{public}s called with null output_protocol, no backtrace";
          goto LABEL_129;
        }

        if (v60)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v101 = "nw_webtransport_http3_get_quic_stream_id";
          BOOL v102 = 2082;
          os_log_type_t v103 = v59;
          _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s called with null output_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v59);
      }

      free(backtrace_string);
      goto LABEL_207;
    }

    v90 = (os_log_s *)__nwlog_obj();
    os_log_type_t v91 = type[0];
    if (!os_log_type_enabled(v90, type[0])) {
      goto LABEL_207;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
    v92 = "%{public}s called with null protocol";
LABEL_206:
    _os_log_impl(&dword_181A5C000, v90, v91, v92, buf, 0xCu);
LABEL_207:
    if (v89) {
      free(v89);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
    os_log_type_t v89 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v111 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v90 = (os_log_s *)__nwlog_obj();
      os_log_type_t v91 = type[0];
      if (!os_log_type_enabled(v90, type[0])) {
        goto LABEL_207;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
      v92 = "%{public}s called with null http_connect";
      goto LABEL_206;
    }

    if (!v111)
    {
      v90 = (os_log_s *)__nwlog_obj();
      os_log_type_t v91 = type[0];
      if (!os_log_type_enabled(v90, type[0])) {
        goto LABEL_207;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
      v92 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_206;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v90 = (os_log_s *)__nwlog_obj();
    os_log_type_t v91 = type[0];
    v96 = os_log_type_enabled(v90, type[0]);
    if (backtrace_string)
    {
      if (v96)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v95 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
        goto LABEL_196;
      }

      goto LABEL_197;
    }

    if (!v96) {
      goto LABEL_207;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
    v92 = "%{public}s called with null http_connect, no backtrace";
    goto LABEL_206;
  }

  if (a2)
  {
    callbacks = a2->callbacks;
    if (callbacks)
    {
      get_parameters = (uint64_t (*)(nw_protocol *))callbacks->get_parameters;
      if (get_parameters)
      {
        v7 = (uint64_t *)get_parameters(a2);
        if (v7)
        {
          v8 = v7;
          os_log_type_t v9 = nw_parameters_copy_protocol_options_legacy(v7, a1);
          v10 = v9;
          if (v9)
          {
            nw_parameters_t v11 = v9;
            v12 = v11;
            handle[284] = 0;
            v13 = 84LL;
            size_t v14 = 284LL;
            while (1)
            {
              unint64_t v15 = v11[v14 - 236];
              handle[v14] = v15;
              if (!v15) {
                break;
              }
              --v13;
              ++v14;
              if (v13 <= 1)
              {
                handle[v14] = 0;
                break;
              }
            }

            v16 = v11[48];

            if (!v16)
            {
              os_log_type_t v17 = v12;
              BOOL v18 = *((unsigned __int16 *)v17 + 68);

              if ((_DWORD)v18) {
                snprintf(handle + 284, 0x54uLL, "C%llu", v18);
              }
            }
          }

          if (!handle[284]) {
            snprintf( handle + 284,  0x54uLL,  "http_connect[%llu]",  ++nw_protocol_http_connect_add_input_handler(nw_protocol *,nw_protocol *)::http_connect_count);
          }
          if (nw_path_parameters_get_logging_disabled(v8[13])) {
            v19 = 128;
          }
          else {
            v19 = 0;
          }
          *((_WORD *)handle + 184) = *((_WORD *)handle + 184) & 0xFF7F | v19;
          v20 = a2->callbacks;
          if (v20)
          {
            get_path = (uint64_t (*)(nw_protocol *))v20->get_path;
            if (get_path)
            {
              v22 = (void *)get_path(a2);
              if (v22)
              {
                *((_WORD *)handle + 184) = *((_WORD *)handle + 184) & 0xFFFE | nw_path_get_nexus_agent_uuid( v22,  (_OWORD *)handle + 15);
                BOOL v23 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_remote_endpoint)(a2);
                if (v23)
                {
                  BOOL v24 = os_retain(v23);
                  *((void *)handle + 17) = v24;
                  if (v24)
                  {
                    id v25 = v24;
                    v26 = [v25 type];

                    if ((v26 - 3) <= 0xFFFFFFFD)
                    {
                      if ((*((_WORD *)handle + 184) & 0x80) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        *(_DWORD *)addrinfo buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&buf[22] = 2080;
                        os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        v27 = (char *)_os_log_send_and_compose_impl();
                        type[0] = OS_LOG_TYPE_ERROR;
                        v111 = 0;
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          BOOL v28 = (os_log_s *)gLogObj;
                          os_log_type_t v29 = type[0];
                          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                            goto LABEL_157;
                          }
                          *(_DWORD *)addrinfo buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&buf[22] = 2080;
                          os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          v30 = "%{public}s %{public}s%sRemote endpoint is wrong type";
                          goto LABEL_156;
                        }

                        if (!v111)
                        {
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          BOOL v28 = (os_log_s *)gLogObj;
                          os_log_type_t v29 = type[0];
                          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                            goto LABEL_157;
                          }
                          *(_DWORD *)addrinfo buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&buf[22] = 2080;
                          os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          v30 = "%{public}s %{public}s%sRemote endpoint is wrong type, backtrace limit exceeded";
                          goto LABEL_156;
                        }

                        v37 = (char *)__nw_create_backtrace_string();
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        BOOL v28 = (os_log_s *)gLogObj;
                        os_log_type_t v29 = type[0];
                        os_log_type_t v52 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
                        if (!v37)
                        {
                          if (!v52) {
                            goto LABEL_157;
                          }
                          *(_DWORD *)addrinfo buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&buf[22] = 2080;
                          os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          v30 = "%{public}s %{public}s%sRemote endpoint is wrong type, no backtrace";
LABEL_156:
                          _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0x20u);
LABEL_157:
                          if (v27) {
                            free(v27);
                          }
                          goto LABEL_159;
                        }

                        if (v52)
                        {
                          *(_DWORD *)addrinfo buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&buf[22] = 2080;
                          os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          LOWORD(v114) = 2082;
                          *(void *)((char *)&v114 + 2) = v37;
                          v39 = "%{public}s %{public}s%sRemote endpoint is wrong type, dumping backtrace:%{public}s";
                          goto LABEL_89;
                        }

  __break(1u);
  return result;
}

            v73 = (os_log_s *)__nwlog_obj();
            os_log_type_t v74 = type[0];
            if (!os_log_type_enabled(v73, type[0])) {
              goto LABEL_212;
            }
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            BOOL v75 = "%{public}s called with null http1, backtrace limit exceeded";
            goto LABEL_201;
          }

          goto LABEL_187;
        }
      }

      else
      {
        BOOL v18 = *v15;
      }

      if ((v18 & 0x1000) == 0 || nw_path_is_viable(v11) || (*v15 & 0x400) != 0) {
        goto LABEL_81;
      }
      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        id v35 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v36 = *(void *)(v9 + 488);
          v37 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
          os_log_type_t v38 = *(_DWORD *)(v9 + 860);
          if (v36) {
            LODWORD(v36) = *(_DWORD *)(v36 + 424);
          }
          *(_DWORD *)addrinfo buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          BOOL v109 = (uint64_t)" ";
          *(_WORD *)v110 = 1024;
          *(_DWORD *)&v110[2] = v37;
          *(_WORD *)&v110[6] = 1024;
          *(_DWORD *)&v110[8] = v38;
          LOWORD(v111) = 1024;
          *(_DWORD *)((char *)&v111 + 2) = v36;
          _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> Path became nonviable, marking do-not-reuse",  buf,  0x32u);
        }
      }

      v39 = *(unsigned __int8 *)(v9 + 874);
      os_log_type_t v40 = *v15;
      *unint64_t v15 = v40 | 0x400;
      BOOL v41 = *(void *)(v9 + 480);
      if (!v41)
      {
        __nwlog_obj();
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v72 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v107 = OS_LOG_TYPE_DEFAULT;
        if (type[0] != OS_LOG_TYPE_FAULT)
        {
          if (v107)
          {
            os_log_type_t v95 = (char *)__nw_create_backtrace_string();
            v73 = (os_log_s *)__nwlog_obj();
            os_log_type_t v74 = type[0];
            os_log_type_t v83 = os_log_type_enabled(v73, type[0]);
            if (v95)
            {
              if (v83)
              {
                *(_DWORD *)addrinfo buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v95;
                os_log_type_t v97 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                os_log_type_t v99 = buf;
                goto LABEL_182;
              }

              goto LABEL_183;
            }

            goto LABEL_199;
          }

          goto LABEL_197;
        }

                  goto LABEL_163;
                }

                if (!v90)
                {
                  __nwlog_obj();
                  os_log_type_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  BOOL v80 = type;
                  if (os_log_type_enabled(v55, type))
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    _os_log_impl( &dword_181A5C000,  v55,  v80,  "%{public}s Should have removed from new results, backtrace limit exceeded",  buf,  0xCu);
                  }

                  goto LABEL_197;
                }

                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                os_log_type_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v67 = type;
                id v68 = os_log_type_enabled(v55, type);
                if (!backtrace_string)
                {
                  if (v68)
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    _os_log_impl( &dword_181A5C000,  v55,  v67,  "%{public}s Should have removed from new results, no backtrace",  buf,  0xCu);
                  }

                  goto LABEL_197;
                }

                if (v68)
                {
                  *(_DWORD *)addrinfo buf = 136446466;
                  os_log_type_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                  v94 = 2082;
                  *(void *)os_log_type_t v95 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v55,  v67,  "%{public}s Should have removed from new results, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                goto LABEL_162;
              }

          v73 = *(void *)(v1 + 96);
          if (v73)
          {
            nw_queue_cancel_source(v73, (uint64_t)v3);
            *(void *)(v1 + 96) = 0LL;
          }

          BOOL v102 = 4;
          *(_DWORD *)os_log_type_t v103 = -1;
          if (!getsockopt(*(_DWORD *)(v1 + 172), 0xFFFF, 4103, v103, &v102))
          {
            os_log_type_t v81 = *(_DWORD *)v103;
            if (*(_DWORD *)v103)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v82 = gconnectionLogObj;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
                goto LABEL_231;
              }
              *(_DWORD *)os_log_type_t type = 136446722;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 2080;
              *(void *)&type[14] = v1 + 308;
              *(_WORD *)&type[22] = 1024;
              *(_DWORD *)&type[24] = v81;
              os_log_type_t v83 = "%{public}s %s Socket SO_ERROR %{darwin.errno}d";
              os_log_type_t v84 = (os_log_s *)v82;
              v85 = OS_LOG_TYPE_ERROR;
              v86 = 28;
            }

            else
            {
              if ((*v2 & 0x80) != 0) {
                goto LABEL_231;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v89 = gconnectionLogObj;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_231;
              }
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 2082;
              *(void *)&type[14] = v1 + 308;
              os_log_type_t v83 = "%{public}s %{public}s Socket SO_ERROR: 0";
              os_log_type_t v84 = (os_log_s *)v89;
              v85 = OS_LOG_TYPE_DEFAULT;
              v86 = 22;
            }

            _os_log_impl(&dword_181A5C000, v84, v85, v83, type, v86);
LABEL_231:
            v90 = *(unsigned int *)v103;
            if (*(_DWORD *)v103 || (v90 = v99) != 0) {
              nw_socket_internal_error(v1, v90);
            }
            nw_socket_internal_disconnect(v1);
            return;
          }

          os_log_type_t v74 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          *(_DWORD *)os_log_type_t v103 = v74;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v75 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_log_type_t type = 136446722;
            *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
            *(_WORD *)&type[12] = 2080;
            *(void *)&type[14] = v1 + 308;
            *(_WORD *)&type[22] = 1024;
            *(_DWORD *)&type[24] = v74;
            _os_log_impl( &dword_181A5C000,  v75,  OS_LOG_TYPE_ERROR,  "%{public}s %s getsockopt SO_ERROR failed %{darwin.errno}d",  type,  0x1Cu);
          }

          os_log_type_t v76 = *(_DWORD *)v103;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)os_log_type_t type = 136446466;
          *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
          *(_WORD *)&type[12] = 1024;
          *(_DWORD *)&type[14] = v76;
          v77 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v101 = OS_LOG_TYPE_ERROR;
          BOOL v100 = 0;
          if (__nwlog_fault(v77, &v101, &v100))
          {
            if (v101 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v78 = (os_log_s *)gLogObj;
              os_log_type_t v79 = v101;
              if (!os_log_type_enabled((os_log_t)gLogObj, v101)) {
                goto LABEL_229;
              }
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 1024;
              *(_DWORD *)&type[14] = v76;
              BOOL v80 = "%{public}s getsockopt SO_ERROR failed %{darwin.errno}d";
              goto LABEL_228;
            }

            if (!v100)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v78 = (os_log_s *)gLogObj;
              os_log_type_t v79 = v101;
              if (!os_log_type_enabled((os_log_t)gLogObj, v101)) {
                goto LABEL_229;
              }
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 1024;
              *(_DWORD *)&type[14] = v76;
              BOOL v80 = "%{public}s getsockopt SO_ERROR failed %{darwin.errno}d, backtrace limit exceeded";
              goto LABEL_228;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v78 = (os_log_s *)gLogObj;
            os_log_type_t v79 = v101;
            v88 = os_log_type_enabled((os_log_t)gLogObj, v101);
            if (backtrace_string)
            {
              if (v88)
              {
                *(_DWORD *)os_log_type_t type = 136446722;
                *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
                *(_WORD *)&type[12] = 1024;
                *(_DWORD *)&type[14] = v76;
                *(_WORD *)&type[18] = 2082;
                *(void *)&type[20] = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v78,  v79,  "%{public}s getsockopt SO_ERROR failed %{darwin.errno}d, dumping backtrace:%{public}s",  type,  0x1Cu);
              }

              free(backtrace_string);
              goto LABEL_229;
            }

            if (v88)
            {
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 1024;
              *(_DWORD *)&type[14] = v76;
              BOOL v80 = "%{public}s getsockopt SO_ERROR failed %{darwin.errno}d, no backtrace";
LABEL_228:
              _os_log_impl(&dword_181A5C000, v78, v79, v80, type, 0x12u);
            }
          }

      if (v107) {
        free(v107);
      }
LABEL_23:

      privacy_stance = nw_connection_get_privacy_stance(*(void **)(a1 + 32));
      nw_http_connection_metadata_set_privacy_stance(v21, privacy_stance);
      v26 = v21;
      v27 = v21[1];

      if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
      }
      BOOL v28 = nw_protocol_definition_is_equal_unsafe((uint64_t)v27, nw_protocol_copy_http_connection_definition_definition);

      if (v28)
      {
        os_log_type_t v29 = v26[4];
        if (v29) {
          v29[196] |= 1u;
        }
        goto LABEL_29;
      }

      __nwlog_obj();
      os_log_type_t v114 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_multipath";
      LODWORD(v159) = 12;
      v158 = buf;
      os_log_type_t v115 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v163 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v117 = type[0];
        if (os_log_type_enabled(v116, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_multipath";
          _os_log_impl(&dword_181A5C000, v116, v117, "%{public}s metadata must be http_connection", buf, 0xCu);
        }

                                        started = 0LL;
LABEL_198:

                                        v43 = v342;
LABEL_199:

                                        goto LABEL_200;
                                      }
                                    }

                                    else
                                    {
                                      __nwlog_obj();
                                      v217 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                                      if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR))
                                      {
                                        *(_DWORD *)addrinfo buf = 136446466;
                                        v355 = "nw_protocol_utilities_add_input_handler";
                                        v356 = 2048;
                                        v357 = (char *)output_handler;
                                        _os_log_impl( &dword_181A5C000,  v217,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
                                      }
                                    }

LABEL_245:
        free(v87);
        goto LABEL_246;
      }

      if (v109)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v108,  "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v118 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v88,  v118,  "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded",  buf,  0xCu);
      }
    }

      if (v125) {
        free(v125);
      }
      return 0LL;
    }

    if (v188[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v122 = (os_log_s *)__nwlog_obj();
      os_log_type_t v123 = v192;
      if (os_log_type_enabled(v122, (os_log_type_t)v192))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_get_input_frames";
        v124 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_244;
      }

      goto LABEL_245;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v122 = (os_log_s *)__nwlog_obj();
    os_log_type_t v123 = v192;
    id v129 = os_log_type_enabled(v122, (os_log_type_t)v192);
    if (!backtrace_string)
    {
      if (v129)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_get_input_frames";
        v124 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_244;
      }

      goto LABEL_245;
    }

    if (v129)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      char v130 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_234:
      _os_log_impl(&dword_181A5C000, v122, v123, v130, buf, 0x16u);
    }

                nw::release_if_needed<nw_protocol *>(&v359);
                goto LABEL_246;
              }

      if (v125) {
        free(v125);
      }
      return 0LL;
    }

    if (v188[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v122 = (os_log_s *)__nwlog_obj();
      os_log_type_t v123 = v192;
      if (os_log_type_enabled(v122, (os_log_type_t)v192))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
        v124 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_244;
      }

      goto LABEL_245;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v122 = (os_log_s *)__nwlog_obj();
    os_log_type_t v123 = v192;
    id v129 = os_log_type_enabled(v122, (os_log_type_t)v192);
    if (!backtrace_string)
    {
      if (v129)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
        v124 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_244;
      }

      goto LABEL_245;
    }

    if (v129)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      char v130 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_234:
      _os_log_impl(&dword_181A5C000, v122, v123, v130, buf, 0x16u);
    }

LABEL_243:
    goto LABEL_244;
  }

  nw_parameters_t v11 = nw_parameters_create();
  if (v11)
  {
    v12 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v12);

    if (options)
    {
      size_t v14 = options;
      v128 = v14;
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
      }
      unint64_t v15 = nw_protocol_create_options((void *)nw_protocol_copy_quic_connection_definition::quic_definition);
      nw_protocol_options_set_prohibit_joining(v15);
      if (v15)
      {
        nw_quic_connection_set_sec_protocol_options(v15, v128);
        v16 = (id *)*((id *)v11 + 19);
        v126 = v16;
        if (v16)
        {
          objc_storeStrong(v16 + 3, v15);
          os_log_type_t v17 = nw_protocol_create_options((void *)g_tcp_definition);
          v127 = v17;
          if (v17)
          {
            v125 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_transform);
            if (v125)
            {
              BOOL v18 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_transform);
              v19 = v18;
              if (v18)
              {
                if (v129)
                {
                  v20 = v18;
                  id v21 = v129;
                  objc_storeStrong(v20 + 4, a3);
                }

                v22 = v125;
                *((_BYTE *)v22 + 8) |= 2u;

                nw_protocol_transform_append_protocol(v22, 3, v15);
                BOOL v23 = v22;
                v23->fallback_mode = 2;

                BOOL v24 = v23;
                *((_BYTE *)v22 + 8) |= 0x10u;

                id v25 = v19;
                *((_BYTE *)v25 + 8) |= 2u;

                v26 = nw_protocol_options_copy(v128);
                nw_protocol_transform_append_protocol(v25, 4, v26);

                nw_protocol_transform_append_protocol(v25, 3, v127);
                v27 = v25;
                *((_BYTE *)v25 + 8) |= 0x10u;

                BOOL v28 = nw_array_create();
                os_log_type_t v29 = (void *)*((void *)v11 + 20);
                *((void *)v11 + 20) = v28;

                nw_array_append(*((void *)v11 + 20), v24);
                nw_array_append(*((void *)v11 + 20), v27);
                *((_BYTE *)v11 + 92) = 2;
                v30 = v11;
LABEL_145:

                goto LABEL_146;
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v68 = (id)gLogObj;
              *(_DWORD *)addrinfo buf = 136446210;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              v69 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v130 = 0;
              if (__nwlog_fault(v69, &type, &v130))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v71 = type;
                  if (os_log_type_enabled(v70, type))
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                    _os_log_impl( &dword_181A5C000,  v70,  v71,  "%{public}s nw_protocol_transform_create failed",  buf,  0xCu);
                  }
                }

                else
                {
                  if (v130)
                  {
                    v77 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v79 = type;
                    log = v78;
                    BOOL v80 = os_log_type_enabled(v78, type);
                    if (v77)
                    {
                      if (v80)
                      {
                        *(_DWORD *)addrinfo buf = 136446466;
                        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                        __int16 v134 = 2082;
                        v135 = v77;
                        _os_log_impl( &dword_181A5C000,  log,  v79,  "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v77);
                    }

                    else
                    {
                      if (v80)
                      {
                        *(_DWORD *)addrinfo buf = 136446210;
                        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                        _os_log_impl( &dword_181A5C000,  log,  v79,  "%{public}s nw_protocol_transform_create failed, no backtrace",  buf,  0xCu);
                      }
                    }

                    goto LABEL_142;
                  }

                  __nwlog_obj();
                  uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v84 = type;
                  if (os_log_type_enabled(v70, type))
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                    _os_log_impl( &dword_181A5C000,  v70,  v84,  "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded",  buf,  0xCu);
                  }
                }
              }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v106 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)addrinfo buf = 136446466;
    v110 = "nw_protocol_udp_connected";
    v111 = 2082;
    v112 = a1 + 3;
    _os_log_impl( &dword_181A5C000,  v106,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Unable to get path from input protocol, cannot publish UDP stats",  buf,  0x16u);
  }

              if (v154) {
                free(v154);
              }
LABEL_245:
              *(_WORD *)(v5 + 428) |= 0x4000u;
              v176 = *(void **)(v5 + 352);
              *(void *)addrinfo buf = MEMORY[0x1895F87A8];
              *(void *)&buf[8] = 0x40000000LL;
              *(void *)&buf[16] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke;
              v608 = (uint64_t)&__block_descriptor_tmp_52_39863;
              *(void *)v609 = v5;
              nw_http_transaction_metadata_set_event_handler(v176, buf);
              nw_protocol_connected(*(void **)(v5 + 48), v5);
              return;
            }

            __nwlog_obj();
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
            v386 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v386, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v387 = (os_log_s *)__nwlog_obj();
                v388 = type[0];
                if (os_log_type_enabled(v387, type[0]))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v389 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_626:
                  _os_log_impl(&dword_181A5C000, v387, v388, v389, buf, 0xCu);
                }
              }

              else if ((_BYTE)aBlock)
              {
                v415 = (char *)__nw_create_backtrace_string();
                v387 = (os_log_s *)__nwlog_obj();
                v388 = type[0];
                v416 = os_log_type_enabled(v387, type[0]);
                if (v415)
                {
                  if (v416)
                  {
                    *(_DWORD *)addrinfo buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v415;
                    _os_log_impl( &dword_181A5C000,  v387,  v388,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v415);
                  goto LABEL_627;
                }

                if (v416)
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v389 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                  goto LABEL_626;
                }
              }

              else
              {
                v387 = (os_log_s *)__nwlog_obj();
                v388 = type[0];
                if (os_log_type_enabled(v387, type[0]))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v389 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                  goto LABEL_626;
                }
              }
            }

LABEL_142:
              if (v69) {
                free(v69);
              }
              v30 = 0LL;
              goto LABEL_145;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v58 = (id)gLogObj;
            *(_DWORD *)addrinfo buf = 136446210;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            v59 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v130 = 0;
            if (__nwlog_fault(v59, &type, &v130))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                char v60 = (os_log_s *)(id)gLogObj;
                os_log_type_t v61 = type;
                if (os_log_type_enabled(v60, type))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  _os_log_impl(&dword_181A5C000, v60, v61, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                }

                if (nw_parameters_get_upper_transport_protocol(v97) != 253)
                {
                  if ((nw_endpoint_handler_get_logging_disabled(v64) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    v110 = (os_log_s *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
                    {
                      v217 = nw_endpoint_handler_get_id_string(v64);
                      v212 = nw_endpoint_handler_dry_run_string(v64);
                      v111 = nw_endpoint_handler_copy_endpoint(v64);
                      v208 = nw_endpoint_get_logging_description(v111);
                      v206 = nw_endpoint_handler_state_string(v64);
                      v204 = nw_endpoint_handler_mode_string(v64);
                      v112 = nw_endpoint_handler_copy_current_path(v64);
                      os_log_type_t v113 = nw_endpoint_handler_get_id_string(v230);
                      os_log_type_t v114 = nw_endpoint_handler_get_id_string(v69);
                      *(_DWORD *)addrinfo buf = 136448258;
                      v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                      v240 = 2082;
                      id_str = (char *)v217;
                      v242 = 2082;
                      v243 = v212;
                      v244 = 2082;
                      v245 = v208;
                      v246 = 2082;
                      v247 = v206;
                      v248 = 2082;
                      v249 = v204;
                      v250 = 2114;
                      v251 = v112;
                      v252 = 2080;
                      v253 = (unint64_t)v113;
                      v254 = 2080;
                      v255 = v114;
                      _os_log_impl( &dword_181A5C000,  v110,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] quic [C%s] is n ot speculative, using shorter timeout percentage for non-quic next child [C%s]",  buf,  0x5Cu);
                    }
                  }

                  char v60 = 100LL;
                }

                goto LABEL_150;
              }

              v219 = v97;
              __nwlog_obj();
              v186 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)addrinfo buf = 136446210;
              v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
              v183 = (char *)_os_log_send_and_compose_impl();

              v237 = OS_LOG_TYPE_ERROR;
              v236 = 0;
              if (__nwlog_fault(v183, &v237, &v236))
              {
                if (v237 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v184 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v187 = v237;
                  if (os_log_type_enabled(v184, v237))
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    _os_log_impl( &dword_181A5C000,  v184,  v187,  "%{public}s called with null nw_protocol_options_is_quic(current_quic_options)",  buf,  0xCu);
                  }

    goto LABEL_143;
  }

  __nwlog_obj();
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  v87 = "nw_context_get_globals_for_protocol";
  os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

  v85 = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (v85 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v49 = v85;
    if (os_log_type_enabled(v48, v85))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v87 = "nw_context_get_globals_for_protocol";
      _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s called with null context->globals", buf, 0xCu);
    }
  }

  else if (type)
  {
    os_log_type_t v56 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v57 = v85;
    id v58 = os_log_type_enabled(v48, v85);
    if (v56)
    {
      if (v58)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v87 = "nw_context_get_globals_for_protocol";
        v88 = 2082;
        os_log_type_t v89 = v56;
        _os_log_impl( &dword_181A5C000,  v48,  v57,  "%{public}s called with null context->globals, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v56);
      goto LABEL_111;
    }

    if (v58)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v87 = "nw_context_get_globals_for_protocol";
      _os_log_impl(&dword_181A5C000, v48, v57, "%{public}s called with null context->globals, no backtrace", buf, 0xCu);
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v65 = v85;
    if (os_log_type_enabled(v48, v85))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v87 = "nw_context_get_globals_for_protocol";
      _os_log_impl( &dword_181A5C000,  v48,  v65,  "%{public}s called with null context->globals, backtrace limit exceeded",  buf,  0xCu);
    }
  }

LABEL_111:
  if (v47) {
    free(v47);
  }
LABEL_113:

LABEL_114:
  nw_parameters_t v11 = 0LL;
LABEL_168:

  return v11;
}

    if (v58) {
      free(v58);
    }
    id v21 = 0;
LABEL_27:
    if ((HIWORD(a1[2].output_handler_context) & 0x200) == 0) {
      goto LABEL_44;
    }
    default_input_handler = a1->default_input_handler;
    if (!default_input_handler) {
      goto LABEL_44;
    }
    BOOL v23 = default_input_handler->callbacks;
    if (!v23 || !v23->error) {
      goto LABEL_44;
    }
    HIWORD(a1[2].output_handler_context) &= ~0x200u;
    BOOL v24 = default_input_handler->handle;
    if (v24 == &nw_protocol_ref_counted_handle)
    {
      id v25 = default_input_handler[1].callbacks;
      if (v25) {
        default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v25->add_input_handler + 1);
      }
    }

    v26 = a1->handle;
    if (v26 == &nw_protocol_ref_counted_handle)
    {
      v27 = a1[1].callbacks;
      if (v27) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v27->add_input_handler + 1);
      }
    }

    BOOL v28 = default_input_handler->callbacks;
    if (!v28 || (error = (void (*)(nw_protocol *, nw_protocol *, void))v28->error) == 0LL)
    {
      __nwlog_obj();
      os_log_type_t v67 = default_input_handler->identifier->name;
      if (!v67) {
        os_log_type_t v67 = "invalid";
      }
      *(_DWORD *)addrinfo buf = 136446722;
      id v129 = "__nw_protocol_error";
      char v130 = 2082;
      v131 = (void *)v67;
      v132 = 2048;
      v133 = default_input_handler;
      id v68 = (const char *)_os_log_send_and_compose_impl();
      v127 = OS_LOG_TYPE_ERROR;
      v126 = 0;
      v111 = (char *)v68;
      if (v127 == OS_LOG_TYPE_FAULT)
      {
        typeb = (os_log_s *)__nwlog_obj();
        loga = v127;
        if (!os_log_type_enabled(typeb, v127)) {
          goto LABEL_154;
        }
        v69 = default_input_handler->identifier->name;
        if (!v69) {
          v69 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        id v129 = "__nw_protocol_error";
        char v130 = 2082;
        v131 = (void *)v69;
        v132 = 2048;
        v133 = default_input_handler;
        uint64_t v70 = typeb;
        os_log_type_t v71 = loga;
        v72 = "%{public}s protocol %{public}s (%p) has invalid error callback";
      }

      else if (v126)
      {
        typed = __nw_create_backtrace_string();
        logb = (os_log_s *)__nwlog_obj();
        os_log_type_t v99 = v127;
        BOOL v80 = os_log_type_enabled(logb, v127);
        os_log_type_t v81 = (char *)typed;
        if (typed)
        {
          if (v80)
          {
            os_log_type_t v82 = default_input_handler->identifier->name;
            if (!v82) {
              os_log_type_t v82 = "invalid";
            }
            *(_DWORD *)addrinfo buf = 136446978;
            id v129 = "__nw_protocol_error";
            char v130 = 2082;
            v131 = (void *)v82;
            v132 = 2048;
            v133 = default_input_handler;
            __int16 v134 = 2082;
            v135 = (void *)typed;
            _os_log_impl( &dword_181A5C000,  logb,  v99,  "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            os_log_type_t v81 = (char *)typed;
          }

          free(v81);
          goto LABEL_154;
        }

        if (!v80)
        {
LABEL_154:
          if (v111) {
            free(v111);
          }
          goto LABEL_40;
        }

        v87 = default_input_handler->identifier->name;
        if (!v87) {
          v87 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        id v129 = "__nw_protocol_error";
        char v130 = 2082;
        v131 = (void *)v87;
        v132 = 2048;
        v133 = default_input_handler;
        uint64_t v70 = logb;
        os_log_type_t v71 = v99;
        v72 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
      }

      else
      {
        typee = (os_log_s *)__nwlog_obj();
        logc = v127;
        if (!os_log_type_enabled(typee, v127)) {
          goto LABEL_154;
        }
        v86 = default_input_handler->identifier->name;
        if (!v86) {
          v86 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        id v129 = "__nw_protocol_error";
        char v130 = 2082;
        v131 = (void *)v86;
        v132 = 2048;
        v133 = default_input_handler;
        uint64_t v70 = typee;
        os_log_type_t v71 = logc;
        v72 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v70, v71, v72, buf, 0x20u);
      goto LABEL_154;
    }

    error(default_input_handler, a1, 0LL);
LABEL_40:
    if (v26 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
    {
      v43 = a1[1].callbacks;
      if (v43)
      {
        v44 = (nw_protocol_callbacks *)((char *)v43 - 1);
        a1[1].callbacks = v44;
        if (!v44)
        {
          os_log_type_t v45 = *(void (***)(void))a1[1].flow_id;
          if (v45)
          {
            *(void *)a1[1].flow_id = 0LL;
            v45[2](v45);
            _Block_release(v45);
          }

          if ((a1[1].flow_id[8] & 1) != 0)
          {
            v46 = *(const void **)a1[1].flow_id;
            if (v46) {
              _Block_release(v46);
            }
          }

          free(a1);
        }
      }
    }

    if (v24 == &nw_protocol_ref_counted_handle && default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v47 = default_input_handler[1].callbacks;
      if (v47)
      {
        BOOL v48 = (nw_protocol_callbacks *)((char *)v47 - 1);
        default_input_handler[1].callbacks = v48;
        if (!v48)
        {
          id v49 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v49)
          {
            *(void *)default_input_handler[1].flow_id = 0LL;
            v49[2](v49);
            _Block_release(v49);
          }

          if ((default_input_handler[1].flow_id[8] & 1) != 0)
          {
            os_log_type_t v50 = *(const void **)default_input_handler[1].flow_id;
            if (v50) {
              _Block_release(v50);
            }
          }

          free(default_input_handler);
        }
      }
    }

    if (v42) {
      free(v42);
    }
    v22 = 0LL;
    goto LABEL_43;
  }

  os_log_type_t v89 = 0LL;
  if (!nw_txt_record_get_key_data_value(v6, "rcid", &v89))
  {
    __nwlog_obj();
    os_log_type_t v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)access_value = 136446210;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    v46 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v100[0]) = 16;
    LOBYTE(v99) = 0;
    if (LOBYTE(v100[0]) == 17)
    {
      __nwlog_obj();
      os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v48 = v100[0];
      if (os_log_type_enabled(v47, v100[0]))
      {
        *(_DWORD *)access_value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyRemoteCID, &rcid)",  access_value,  0xCu);
      }
    }

    else if ((_BYTE)v99)
    {
      BOOL v65 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v66 = v100[0];
      os_log_type_t v67 = os_log_type_enabled(v47, v100[0]);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)access_value = 136446466;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          *(_WORD *)&access_value[12] = 2082;
          *(void *)&access_value[14] = v65;
          _os_log_impl( &dword_181A5C000,  v47,  v66,  "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyRemoteCID, &rcid), dumping bac ktrace:%{public}s",  access_value,  0x16u);
        }

        free(v65);
LABEL_154:
        if (!v46)
        {
LABEL_156:
          v22 = 0LL;
          goto LABEL_42;
        }

    goto LABEL_143;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)handler = 136446210;
    *(void *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
    id v68 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type[0] = 0;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v72 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(void *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_181A5C000, v69, v72, "%{public}s called with null connection", handler, 0xCu);
      }
    }

    else if (type[0])
    {
      os_log_type_t v76 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v77 = buf[0];
      v78 = os_log_type_enabled(v69, (os_log_type_t)buf[0]);
      if (v76)
      {
        if (v78)
        {
          *(_DWORD *)handler = 136446466;
          *(void *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
          *(_WORD *)&handler[12] = 2082;
          *(void *)&handler[14] = v76;
          _os_log_impl( &dword_181A5C000,  v69,  v77,  "%{public}s called with null connection, dumping backtrace:%{public}s",  handler,  0x16u);
        }

        free(v76);
        if (!v68) {
          goto LABEL_60;
        }
LABEL_144:
        free(v68);
        goto LABEL_60;
      }

      if (v78)
      {
        *(_DWORD *)handler = 136446210;
        *(void *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_181A5C000, v69, v77, "%{public}s called with null connection, no backtrace", handler, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v94 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(void *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl( &dword_181A5C000,  v69,  v94,  "%{public}s called with null connection, backtrace limit exceeded",  handler,  0xCu);
      }
    }

    goto LABEL_142;
  }

  if (*((int *)v3 + 10) <= 2 && !*((void *)v3 + 11))
  {
    id v6 = nw_listener_create_with_connection((nw_connection_t)v4, *((nw_parameters_t *)v3 + 7));
    v7 = (void *)*((void *)v3 + 11);
    *((void *)v3 + 11) = v6;

    if (*((void *)v3 + 11))
    {
      nw_connection_group_set_state_locked(v3, 1, 0LL);
      v8 = v3;
      os_log_type_t v9 = (nw_listener *)*((void *)v3 + 11);
      v135 = v8;
      if (v9)
      {
        uint64_t v136 = v8;
        v10 = *((id *)v3 + 7);
        nw_parameters_t v11 = v10;
        if (v10)
        {
          v12 = v10;
          v13 = *(id *)(v12[13] + 136LL);

          if (!v13)
          {
            __nwlog_obj();
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)handler = 136446210;
            *(void *)&handler[4] = "nw_connection_group_copy_workloop";
            v88 = (char *)_os_log_send_and_compose_impl();

            buf[0] = 16;
            type[0] = 0;
            if (buf[0] == 17)
            {
              __nwlog_obj();
              os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v90 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_181A5C000, v89, v90, "%{public}s called with null context", handler, 0xCu);
              }
            }

            else if (type[0])
            {
              os_log_type_t v101 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v102 = buf[0];
              os_log_type_t v103 = os_log_type_enabled(v89, (os_log_type_t)buf[0]);
              if (v101)
              {
                if (v103)
                {
                  *(_DWORD *)handler = 136446466;
                  *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&handler[12] = 2082;
                  *(void *)&handler[14] = v101;
                  _os_log_impl( &dword_181A5C000,  v89,  v102,  "%{public}s called with null context, dumping backtrace:%{public}s",  handler,  0x16u);
                }

                free(v101);
                if (!v88) {
                  goto LABEL_212;
                }
                goto LABEL_211;
              }

              if (v103)
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl( &dword_181A5C000,  v89,  v102,  "%{public}s called with null context, no backtrace",  handler,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v118 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl( &dword_181A5C000,  v89,  v118,  "%{public}s called with null context, backtrace limit exceeded",  handler,  0xCu);
              }
            }

            goto LABEL_209;
          }

          size_t v14 = nw_context_copy_workloop(v13);
          if (v14) {
            goto LABEL_13;
          }
          if (nw_context_copy_implicit_context::onceToken != -1) {
            dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
          }
          unint64_t v15 = (id)nw_context_copy_implicit_context::implicit_context;
          size_t v14 = nw_context_copy_workloop(v15);

          if (v14) {
            goto LABEL_13;
          }
          __nwlog_obj();
          os_log_type_t v91 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)handler = 136446210;
          *(void *)&handler[4] = "nw_connection_group_copy_workloop";
          v88 = (char *)_os_log_send_and_compose_impl();

          buf[0] = 16;
          type[0] = 0;
          if (__nwlog_fault(v88, buf, type))
          {
            if (buf[0] == 17)
            {
              __nwlog_obj();
              os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v92 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_181A5C000, v89, v92, "%{public}s called with null workloop", handler, 0xCu);
              }

    goto LABEL_143;
  }

  __nwlog_obj();
  BOOL v23 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
  BOOL v24 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v78) = 0;
  if (__nwlog_fault(v24, type, &v78))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if ((_BYTE)v78)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type[0];
      v39 = os_log_type_enabled(v25, type[0]);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
          os_log_type_t v83 = 2082;
          os_log_type_t v84 = v37;
          _os_log_impl( &dword_181A5C000,  v25,  v38,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        goto LABEL_129;
      }

      if (v39)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_181A5C000, v25, v38, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v56 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl( &dword_181A5C000,  v25,  v56,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

          if (*(_BYTE *)(a2 + *v8)) {
            v88 = 0LL;
          }
LABEL_144:
          *(_BYTE *)(a1 + 40) = v88 != 0;
          goto LABEL_5;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v63 = *v3;
          os_log_type_t v64 = *(void *)(a2 + v63);
          if (v64 == -1LL || v64 >= *(void *)(a2 + *v6))
          {
            os_log_type_t v67 = 0LL;
LABEL_136:
            *(_BYTE *)(a2 + *v8) = 1;
            goto LABEL_137;
          }

          BOOL v65 = v64 + 1;
          v66 = *(_BYTE *)(*(void *)(a2 + *v10) + v64);
          *(void *)(a2 + v63) = v65;
          os_log_type_t v67 = v66 & 0x7F;
          if ((v66 & 0x80) == 0) {
            goto LABEL_137;
          }
          id v68 = *v3;
          v69 = *(void *)(a2 + v68);
          if (v69 == -1LL || v69 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          uint64_t v70 = v69 + 1;
          os_log_type_t v71 = *(char *)(*(void *)(a2 + *v10) + v69);
          *(void *)(a2 + v68) = v70;
          v67 |= (unint64_t)(v71 & 0x7F) << 7;
          if ((v71 & 0x80000000) == 0) {
            goto LABEL_137;
          }
          v72 = *v3;
          v73 = *(void *)(a2 + v72);
          if (v73 == -1LL || v73 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          os_log_type_t v74 = v73 + 1;
          BOOL v75 = *(char *)(*(void *)(a2 + *v10) + v73);
          *(void *)(a2 + v72) = v74;
          v67 |= (unint64_t)(v75 & 0x7F) << 14;
          if ((v75 & 0x80000000) == 0) {
            goto LABEL_137;
          }
          os_log_type_t v76 = *v3;
          v77 = *(void *)(a2 + v76);
          if (v77 == -1LL || v77 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          v78 = v77 + 1;
          os_log_type_t v79 = *(char *)(*(void *)(a2 + *v10) + v77);
          *(void *)(a2 + v76) = v78;
          v67 |= (unint64_t)(v79 & 0x7F) << 21;
          if ((v79 & 0x80000000) == 0) {
            goto LABEL_137;
          }
          BOOL v80 = *v3;
          os_log_type_t v81 = *(void *)(a2 + v80);
          if (v81 == -1LL || v81 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          os_log_type_t v82 = v81 + 1;
          os_log_type_t v83 = *(char *)(*(void *)(a2 + *v10) + v81);
          *(void *)(a2 + v80) = v82;
          v67 |= (unint64_t)(v83 & 0x7F) << 28;
          if ((v83 & 0x80000000) == 0) {
            goto LABEL_137;
          }
          v169 = *v3;
          v170 = *(void *)(a2 + v169);
          if (v170 == -1LL || v170 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          v171 = v170 + 1;
          v172 = *(char *)(*(void *)(a2 + *v10) + v170);
          *(void *)(a2 + v169) = v171;
          v67 |= (unint64_t)(v172 & 0x7F) << 35;
          if (v172 < 0)
          {
            v189 = *v3;
            v190 = *(void *)(a2 + v189);
            if (v190 == -1LL || v190 >= *(void *)(a2 + *v6)) {
              goto LABEL_136;
            }
            v191 = v190 + 1;
            v192 = *(char *)(*(void *)(a2 + *v10) + v190);
            *(void *)(a2 + v189) = v191;
            v67 |= (unint64_t)(v192 & 0x7F) << 42;
            if (v192 < 0)
            {
              v193 = *v3;
              v194 = *(void *)(a2 + v193);
              if (v194 == -1LL || v194 >= *(void *)(a2 + *v6)) {
                goto LABEL_136;
              }
              v195 = v194 + 1;
              v196 = *(char *)(*(void *)(a2 + *v10) + v194);
              *(void *)(a2 + v193) = v195;
              v67 |= (unint64_t)(v196 & 0x7F) << 49;
              if (v196 < 0)
              {
                v197 = *v3;
                v198 = *(void *)(a2 + v197);
                if (v198 == -1LL || v198 >= *(void *)(a2 + *v6)) {
                  goto LABEL_136;
                }
                v199 = v198 + 1;
                v200 = *(char *)(*(void *)(a2 + *v10) + v198);
                *(void *)(a2 + v197) = v199;
                v67 |= (unint64_t)(v200 & 0x7F) << 56;
                if (v200 < 0)
                {
                  v201 = *v3;
                  v202 = *(void *)(a2 + v201);
                  if (v202 == -1LL || v202 >= *(void *)(a2 + *v6)) {
                    goto LABEL_136;
                  }
                  v203 = v202 + 1;
                  v204 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v202);
                  *(void *)(a2 + v201) = v203;
                  if ((v204 & 0x80) != 0)
                  {
                    os_log_type_t v67 = 0LL;
                    goto LABEL_139;
                  }

                  v67 |= v204 << 63;
                }
              }
            }
          }

      free(v83);
      if (!v72) {
        return;
      }
LABEL_154:
      free(v72);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http2_setup_placeholder_stream";
    v72 = (char *)_os_log_send_and_compose_impl();
    v112[0] = 16;
    LOBYTE(v106[0]) = 0;
    if (v112[0] == 17)
    {
      v73 = (os_log_s *)__nwlog_obj();
      os_log_type_t v74 = v112[0];
      if (os_log_type_enabled(v73, (os_log_type_t)v112[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_http2_setup_placeholder_stream";
        BOOL v75 = "%{public}s called with null input_protocol";
LABEL_152:
        _os_log_impl(&dword_181A5C000, v73, v74, v75, buf, 0xCu);
      }

          _Block_object_dispose(&v129, 8);
          return;
        }

        if (v120)
        {
          _Block_object_dispose(&v129, 8);
          BOOL v28 = *(void *)(v14 + 144);
          if ((*(_BYTE *)(v14 + 548) & 2) == 0)
          {
            if (*((_BYTE *)v8 + 1537))
            {
              v69 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v70 = *(_DWORD *)(v14 + 460);
                os_log_type_t v71 = *(void *)(v14 + 128);
                *(_DWORD *)addrinfo buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v93;
                *(_WORD *)&buf[22] = 2080;
                v151 = (uint64_t (*)(uint64_t, uint64_t))" ";
                LOWORD(v152) = 1024;
                *(_DWORD *)((char *)&v152 + 2) = v70;
                HIWORD(v152) = 2048;
                v153 = (uint64_t *)v28;
                *(_WORD *)v154 = 2048;
                *(void *)&v154[2] = v71;
                _os_log_impl( &dword_181A5C000,  v69,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Webtransport session received capsule type 0x%llx length %llu",  buf,  0x3Au);
              }
            }
          }

          if (v28 <= 16770303)
          {
            if (v28 > 16770047)
            {
LABEL_80:
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v36 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)addrinfo buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v28;
                v37 = (os_log_s *)v36;
                os_log_type_t v38 = "%{public}s Unexpected capsule type %llu received";
                v39 = 22;
                goto LABEL_82;
              }

        free(backtrace_string);
        goto LABEL_179;
      }

      if (!v76) {
        goto LABEL_179;
      }
      addrinfo buf = 136446210;
      v137 = "send_data_callback";
      id v68 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }

    else
    {
      v66 = (os_log_s *)__nwlog_obj();
      os_log_type_t v67 = v130;
      if (!os_log_type_enabled(v66, (os_log_type_t)v130)) {
        goto LABEL_179;
      }
      addrinfo buf = 136446210;
      v137 = "send_data_callback";
      id v68 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }

    v85 = v66;
    v86 = v67;
    v87 = 12;
LABEL_178:
    _os_log_impl(&dword_181A5C000, v85, v86, v68, (uint8_t *)&buf, v87);
    goto LABEL_179;
  }

  if (gLogDatapath)
  {
    v69 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
    {
      addrinfo buf = 136446466;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = a6 + 205;
      _os_log_impl(&dword_181A5C000, v69, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", (uint8_t *)&buf, 0x16u);
    }
  }

  if (!a3)
  {
    __nwlog_obj();
    addrinfo buf = 136446210;
    v137 = "send_data_callback";
    v16 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v130) = 16;
    LOBYTE(v126) = 0;
    if (v130 != 17)
    {
      if (!(_BYTE)v126)
      {
        uint64_t v70 = (os_log_s *)__nwlog_obj();
        os_log_type_t v71 = v130;
        if (os_log_type_enabled(v70, (os_log_type_t)v130))
        {
          addrinfo buf = 136446210;
          v137 = "send_data_callback";
          v19 = "%{public}s called with null framehd, backtrace limit exceeded";
          goto LABEL_160;
        }

        goto LABEL_72;
      }

      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      uint64_t v70 = (os_log_s *)__nwlog_obj();
      os_log_type_t v71 = v130;
      os_log_type_t v81 = os_log_type_enabled(v70, (os_log_type_t)v130);
      if (!v33)
      {
        if (v81)
        {
          addrinfo buf = 136446210;
          v137 = "send_data_callback";
          v19 = "%{public}s called with null framehd, no backtrace";
          goto LABEL_160;
        }

        goto LABEL_72;
      }

      if (!v81) {
        goto LABEL_44;
      }
      addrinfo buf = 136446466;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = (uint64_t)v33;
      os_log_type_t v36 = "%{public}s called with null framehd, dumping backtrace:%{public}s";
LABEL_136:
      v37 = v70;
      os_log_type_t v38 = v71;
      v39 = 22;
      goto LABEL_43;
    }

    uint64_t v70 = (os_log_s *)__nwlog_obj();
    os_log_type_t v71 = v130;
    if (!os_log_type_enabled(v70, (os_log_type_t)v130)) {
      goto LABEL_72;
    }
    addrinfo buf = 136446210;
    v137 = "send_data_callback";
    v19 = "%{public}s called with null framehd";
LABEL_160:
    v54 = v70;
    os_log_type_t v55 = v71;
    os_log_type_t v56 = 12;
    goto LABEL_71;
  }

  if (!a2)
  {
    __nwlog_obj();
    addrinfo buf = 136446210;
    v137 = "send_data_callback";
    v16 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v130) = 16;
    LOBYTE(v126) = 0;
    if (v130 != 17)
    {
      if (!(_BYTE)v126)
      {
        uint64_t v70 = (os_log_s *)__nwlog_obj();
        os_log_type_t v71 = v130;
        if (os_log_type_enabled(v70, (os_log_type_t)v130))
        {
          addrinfo buf = 136446210;
          v137 = "send_data_callback";
          v19 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_160;
        }

        goto LABEL_72;
      }

      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      uint64_t v70 = (os_log_s *)__nwlog_obj();
      os_log_type_t v71 = v130;
      os_log_type_t v82 = os_log_type_enabled(v70, (os_log_type_t)v130);
      if (!v33)
      {
        if (v82)
        {
          addrinfo buf = 136446210;
          v137 = "send_data_callback";
          v19 = "%{public}s called with null frame, no backtrace";
          goto LABEL_160;
        }

        goto LABEL_72;
      }

      if (!v82) {
        goto LABEL_44;
      }
      addrinfo buf = 136446466;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = (uint64_t)v33;
      os_log_type_t v36 = "%{public}s called with null frame, dumping backtrace:%{public}s";
      goto LABEL_136;
    }

    uint64_t v70 = (os_log_s *)__nwlog_obj();
    os_log_type_t v71 = v130;
    if (!os_log_type_enabled(v70, (os_log_type_t)v130)) {
      goto LABEL_72;
    }
    addrinfo buf = 136446210;
    v137 = "send_data_callback";
    v19 = "%{public}s called with null frame";
    goto LABEL_160;
  }

  if (!a5)
  {
    __nwlog_obj();
    addrinfo buf = 136446210;
    v137 = "send_data_callback";
    v16 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v130) = 16;
    LOBYTE(v126) = 0;
    if (v130 == 17)
    {
      uint64_t v70 = (os_log_s *)__nwlog_obj();
      os_log_type_t v71 = v130;
      if (os_log_type_enabled(v70, (os_log_type_t)v130))
      {
        addrinfo buf = 136446210;
        v137 = "send_data_callback";
        v19 = "%{public}s called with null source";
        goto LABEL_160;
      }

            goto LABEL_143;
          }

          if (!v49)
          {
            __nwlog_obj();
            os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              id v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to prepare statement, backtrace limit exceeded";
              goto LABEL_141;
            }

            goto LABEL_142;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v18 = type;
          os_log_type_t v34 = os_log_type_enabled(v17, type);
          if (!backtrace_string)
          {
            if (v34)
            {
              *(_DWORD *)addrinfo buf = 136446210;
              id v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to prepare statement, no backtrace";
              goto LABEL_141;
            }

            goto LABEL_142;
          }

          if (v34)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            id v53 = "nw_storage_flush_block_invoke";
            v54 = 2082;
            os_log_type_t v55 = backtrace_string;
            id v35 = "%{public}s Failed to prepare statement, dumping backtrace:%{public}s";
LABEL_97:
            _os_log_impl(&dword_181A5C000, v17, v18, v35, buf, 0x16u);
            goto LABEL_98;
          }

          goto LABEL_98;
        }

        size_t v14 = *(sqlite3_stmt **)(*(void *)(a1 + 32) + 40LL);
      }

      if (!sqlite3_bind_text(v14, 1, v5, -1, 0LL))
      {
        if (sqlite3_bind_text(*(sqlite3_stmt **)(*(void *)(a1 + 32) + 40LL), 2, v4, -1, 0LL))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (id)gLogObj;
          *(_DWORD *)addrinfo buf = 136446210;
          id v53 = "nw_storage_flush_block_invoke";
          v16 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          id v49 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              id v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to bind variable";
              goto LABEL_141;
            }

            goto LABEL_142;
          }

          if (!v49)
          {
            __nwlog_obj();
            os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              id v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to bind variable, backtrace limit exceeded";
              goto LABEL_141;
            }

            goto LABEL_142;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v18 = type;
          v37 = os_log_type_enabled(v17, type);
          if (!backtrace_string)
          {
            if (v37)
            {
              *(_DWORD *)addrinfo buf = 136446210;
              id v53 = "nw_storage_flush_block_invoke";
              v19 = "%{public}s Failed to bind variable, no backtrace";
              goto LABEL_141;
            }

            goto LABEL_142;
          }

          if (!v37) {
            goto LABEL_98;
          }
        }

        else
        {
          if (!sqlite3_bind_blob(*(sqlite3_stmt **)(*(void *)(a1 + 32) + 40LL), 3, v13, n[0], 0LL))
          {
            if (sqlite3_step(*(sqlite3_stmt **)(*(void *)(a1 + 32) + 40LL)) == 101) {
              goto LABEL_145;
            }
            __nwlog_obj();
            id v42 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)addrinfo buf = 136446210;
            id v53 = "nw_storage_flush_block_invoke";
            v16 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            id v49 = 0;
            if (__nwlog_fault(v16, &type, &v49))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v18 = type;
                if (os_log_type_enabled(v17, type))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  id v53 = "nw_storage_flush_block_invoke";
                  v19 = "%{public}s Failed to update";
                  goto LABEL_141;
                }

                goto LABEL_142;
              }

              if (!v49)
              {
                __nwlog_obj();
                os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v18 = type;
                if (os_log_type_enabled(v17, type))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  id v53 = "nw_storage_flush_block_invoke";
                  v19 = "%{public}s Failed to update, backtrace limit exceeded";
                  goto LABEL_141;
                }

                goto LABEL_142;
              }

              v46 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v18 = type;
              os_log_type_t v47 = os_log_type_enabled(v17, type);
              if (!v46)
              {
                if (v47)
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  id v53 = "nw_storage_flush_block_invoke";
                  v19 = "%{public}s Failed to update, no backtrace";
                  goto LABEL_141;
                }

                goto LABEL_142;
              }

              if (v47)
              {
                *(_DWORD *)addrinfo buf = 136446466;
                id v53 = "nw_storage_flush_block_invoke";
                v54 = 2082;
                os_log_type_t v55 = v46;
                _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s Failed to update, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v46);
            }

              _os_log_impl(&dword_181A5C000, v92, v93, v94, buf, 0x16u);
              goto LABEL_143;
            }

            v52(v50, v23);
          }

      free(backtrace_string);
      goto LABEL_156;
    }

    if (!v65) {
      goto LABEL_156;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v69 = "nw_socket_add_input_handler";
    char v60 = "%{public}s called with null input_protocol, no backtrace";
LABEL_155:
    _os_log_impl(&dword_181A5C000, v58, v59, v60, buf, 0xCu);
LABEL_156:
    if (v57) {
      free(v57);
    }
    return 0LL;
  }

  size_t v4 = *(nw_protocol_callbacks **)&a2->name[24];
  if (v4)
  {
    supports_external_data = (uint64_t (*)(nw_protocol_identifier *))v4->supports_external_data;
    if (!supports_external_data) {
      goto LABEL_160;
    }
    if (*(_UNKNOWN **)a2[1].name == &nw_protocol_ref_counted_handle)
    {
      v7 = *(nw_protocol_callbacks **)&a2[2].name[8];
      if (v7) {
        *(void *)&a2[2].name[8] = (char *)&v7->add_input_handler + 1;
      }
      id v6 = supports_external_data(a2);
      if (*(_UNKNOWN **)a2[1].name == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v45 = *(nw_protocol_callbacks **)&a2[2].name[8];
        if (v45)
        {
          v46 = (nw_protocol_callbacks *)((char *)v45 - 1);
          *(void *)&a2[2].name[8] = v46;
          if (!v46)
          {
            os_log_type_t v47 = *(void (***)(void))&a2[1].name[24];
            if (v47)
            {
              *(void *)&a2[1].name[24] = 0LL;
              v47[2](v47);
              _Block_release(v47);
            }

            if ((a2[1].level & 1) != 0)
            {
              BOOL v48 = *(const void **)&a2[1].name[24];
              if (v48) {
                _Block_release(v48);
              }
            }

            free(a2);
          }
        }
      }
    }

    else
    {
      id v6 = supports_external_data(a2);
    }

    v8 = v6 ? 4096 : 0;
    os_log_type_t v9 = *(_WORD *)&a1[6].flow_id[13] & 0xEFFF | (a1[6].flow_id[15] << 16);
    *(_WORD *)&a1[6].flow_id[13] = *(_WORD *)&a1[6].flow_id[13] & 0xEFFF | v8;
    a1[6].flow_id[15] = BYTE2(v9);
    size_t v4 = *(nw_protocol_callbacks **)&a2->name[24];
    if (v4)
    {
LABEL_160:
      get_parameters = (uint64_t (*)(nw_protocol_identifier *))v4->get_parameters;
      if (get_parameters)
      {
        if (*(_UNKNOWN **)a2[1].name == &nw_protocol_ref_counted_handle)
        {
          v12 = *(nw_protocol_callbacks **)&a2[2].name[8];
          if (v12) {
            *(void *)&a2[2].name[8] = (char *)&v12->add_input_handler + 1;
          }
          nw_parameters_t v11 = (void *)get_parameters(a2);
          if (*(_UNKNOWN **)a2[1].name == &nw_protocol_ref_counted_handle)
          {
            id v49 = *(nw_protocol_callbacks **)&a2[2].name[8];
            if (v49)
            {
              os_log_type_t v50 = (nw_protocol_callbacks *)((char *)v49 - 1);
              *(void *)&a2[2].name[8] = v50;
              if (!v50)
              {
                BOOL v51 = *(void (***)(void))&a2[1].name[24];
                if (v51)
                {
                  *(void *)&a2[1].name[24] = 0LL;
                  v51[2](v51);
                  _Block_release(v51);
                }

                if ((a2[1].level & 1) != 0)
                {
                  os_log_type_t v52 = *(const void **)&a2[1].name[24];
                  if (v52) {
                    _Block_release(v52);
                  }
                }

                free(a2);
              }
            }
          }
        }

        else
        {
          nw_parameters_t v11 = (void *)get_parameters(a2);
        }

        if (v11)
        {
          v13 = v11;
          size_t v14 = (nw_protocol *)*(id *)(v13[13] + 136);

          handle = (char)a1[3].handle;
          if ((handle & 1) != 0)
          {
            output_handler = a1[3].output_handler;
            if (output_handler)
            {
              os_release(output_handler);
              handle = (char)a1[3].handle;
            }
          }

          a1[3].output_handler = v14;
          LOBYTE(a1[3].handle) = handle | 1;
          os_log_type_t v17 = v13;
          BOOL v18 = (nw_protocol_stack *)v17[19];

          v19 = nw_protocol_stack_copy_transport_protocol(v18);
          v20 = (char *)&a1[6].identifier + 4;
          nw_protocol_options_get_log_id_str(v19, (_BYTE *)&a1[6].identifier + 4, 84LL);
          *(_DWORD *)&a1[6].flow_id[8] = nw_protocol_options_get_log_id_num(v19);
          if (nw_protocol_options_is_udp(v19))
          {
            if (nw_udp_options_get_no_metadata(v19)) {
              id v21 = 0x100000;
            }
            else {
              id v21 = 0;
            }
            v22 = (*(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16)) & 0xFFEFFFFF;
            *(_WORD *)&a1[6].flow_id[13] = *(_WORD *)&a1[6].flow_id[13];
            BOOL v23 = (v22 | v21) >> 16;
          }

          else if (nw_protocol_options_is_quic(v19))
          {
            BOOL v23 = (*(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16) | 0x100000u) >> 16;
          }

          else
          {
            if (!nw_protocol_options_is_tcp(v19)) {
              goto LABEL_43;
            }
            if (nw_tcp_options_get_reset_local_port(v19)) {
              BOOL v28 = -8388608;
            }
            else {
              BOOL v28 = 0;
            }
            BOOL v23 = (v28 & 0xFF80FFFF | ((a1[6].flow_id[15] & 0x7F) << 16)) >> 16;
          }

          a1[6].flow_id[15] = v23;
LABEL_43:
          if (v19) {
            os_release(v19);
          }
          if (v18) {
            os_release(v18);
          }
          ip_protocol = nw_parameters_get_ip_protocol(v17);
          v30 = ip_protocol;
          if (ip_protocol == 17)
          {
            id v31 = 1;
          }

          else if (ip_protocol == 6)
          {
            id v31 = 2;
          }

          else
          {
            v32 = v17;
            id v31 = *((unsigned __int8 *)v32 + 92);
          }

          LODWORD(a1[4].identifier) = v31;
          os_log_type_t v33 = &a1[6].flow_id[13];
          if (nw_path_parameters_get_logging_disabled(v13[13])) {
            os_log_type_t v34 = 128;
          }
          else {
            os_log_type_t v34 = 0;
          }
          id v35 = *(_WORD *)&a1[6].flow_id[13] & 0xFF7F | (a1[6].flow_id[15] << 16);
          *(_WORD *)os_log_type_t v33 = *(_WORD *)&a1[6].flow_id[13] & 0xFF7F | v34;
          a1[6].flow_id[15] = BYTE2(v35);
          *(_DWORD *)a1[4].flow_id = 9216;
          os_log_type_t v36 = *(nw_protocol_callbacks **)&a2->name[24];
          if (v36)
          {
            get_path = (uint64_t (*)(nw_protocol_identifier *))v36->get_path;
            if (get_path)
            {
              if (*(_UNKNOWN **)a2[1].name == &nw_protocol_ref_counted_handle)
              {
                v39 = *(nw_protocol_callbacks **)&a2[2].name[8];
                if (v39) {
                  *(void *)&a2[2].name[8] = (char *)&v39->add_input_handler + 1;
                }
                os_log_type_t v38 = (void *)get_path(a2);
                if (*(_UNKNOWN **)a2[1].name == &nw_protocol_ref_counted_handle)
                {
                  id v53 = *(nw_protocol_callbacks **)&a2[2].name[8];
                  if (v53)
                  {
                    v54 = (nw_protocol_callbacks *)((char *)v53 - 1);
                    *(void *)&a2[2].name[8] = v54;
                    if (!v54)
                    {
                      os_log_type_t v55 = *(void (***)(void))&a2[1].name[24];
                      if (v55)
                      {
                        *(void *)&a2[1].name[24] = 0LL;
                        v55[2](v55);
                        _Block_release(v55);
                      }

                      if ((a2[1].level & 1) != 0)
                      {
                        os_log_type_t v56 = *(const void **)&a2[1].name[24];
                        if (v56) {
                          _Block_release(v56);
                        }
                      }

                      free(a2);
                    }
                  }
                }
              }

              else
              {
                os_log_type_t v38 = (void *)get_path(a2);
              }

              if (v38)
              {
                if (nw_path_is_multilayer_packet_logging_enabled(v38))
                {
                  if ((*(_WORD *)v33 & 0x80) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    os_log_type_t v40 = (os_log_s *)gconnectionLogObj;
                    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)addrinfo buf = 136446466;
                      v69 = "nw_socket_add_input_handler";
                      uint64_t v70 = 2082;
                      os_log_type_t v71 = (char *)&a1[6].identifier + 4;
                      _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s Multilayer packet logging enabled",  buf,  0x16u);
                    }
                  }

                  *(_WORD *)v33 |= 0x100u;
                }

                if (v30 == 17)
                {
                  maximum_datagram_size = nw_path_get_maximum_datagram_size(v38);
                  if (maximum_datagram_size >> 10 <= 8) {
                    *(_DWORD *)a1[4].flow_id = maximum_datagram_size;
                  }
                }

                goto LABEL_79;
              }

              os_log_type_t v34 = *(_WORD *)v33 & 0x80;
            }
          }

          if (!v34)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v42 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)addrinfo buf = 136446466;
              v69 = "nw_socket_add_input_handler";
              uint64_t v70 = 2082;
              os_log_type_t v71 = (char *)&a1[6].identifier + 4;
              _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Failed to copy path, will not use multilayer packet logging",  buf,  0x16u);
            }
          }

          goto LABEL_143;
        }

        if (v92 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          BOOL v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v82 = type[0];
          if (os_log_type_enabled(v51, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
            _os_log_impl( &dword_181A5C000,  v51,  v82,  "%{public}s called with null options, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
          }

          goto LABEL_142;
        }

        os_log_type_t v67 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v70 = type[0];
        os_log_type_t v71 = os_log_type_enabled(v51, type[0]);
        if (!v67)
        {
          if (v71)
          {
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
            _os_log_impl( &dword_181A5C000,  v51,  v70,  "%{public}s called with null options, no backtrace",  (uint8_t *)buf,  0xCu);
          }

          goto LABEL_142;
        }

        if (v71)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v67;
          _os_log_impl( &dword_181A5C000,  v51,  v70,  "%{public}s called with null options, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
        }

    if (v52) {
      free(v52);
    }
LABEL_66:
    if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v58 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        char v60 = *(_DWORD *)(a2 + 176);
        v59 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)addrinfo buf = 136447490;
        v72 = "nw_http2_protocol_close";
        v73 = 2082;
        os_log_type_t v74 = (void *)(a2 + 191);
        BOOL v75 = 2080;
        os_log_type_t v76 = " ";
        v77 = 1024;
        v78 = v59;
        os_log_type_t v79 = 1024;
        LODWORD(v80[0]) = v60;
        WORD2(v80[0]) = 2048;
        *(void *)((char *)v80 + 6) = a3;
        v10 = "%{public}s %{public}s%s<i%u:s%d> sent disconnected to protocol %p";
        nw_parameters_t v11 = (os_log_s *)v58;
        v12 = 54;
        goto LABEL_111;
      }
    }

    return;
  }

  if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v44 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v46 = *(_DWORD *)(a2 + 176);
      os_log_type_t v45 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)addrinfo buf = 136447490;
      v72 = "nw_http2_protocol_close";
      v73 = 2082;
      os_log_type_t v74 = (void *)(a2 + 191);
      BOOL v75 = 2080;
      os_log_type_t v76 = " ";
      v77 = 1024;
      v78 = v45;
      os_log_type_t v79 = 1024;
      LODWORD(v80[0]) = v46;
      WORD2(v80[0]) = 2048;
      *(void *)((char *)v80 + 6) = a3;
      _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> sent input_finished to protocol %p",  buf,  0x36u);
    }
  }

  v16 = *(unsigned __int16 *)(a2 + 188);
  if ((~v16 & 0x5000) != 0) {
    goto LABEL_62;
  }
  if (((v16 | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v17 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_DWORD *)(a2 + 176);
      BOOL v18 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)addrinfo buf = 136447746;
      v72 = "nw_http2_protocol_close";
      v73 = 2082;
      os_log_type_t v74 = (void *)(a2 + 191);
      BOOL v75 = 2080;
      os_log_type_t v76 = " ";
      v77 = 1024;
      v78 = v18;
      os_log_type_t v79 = 1024;
      LODWORD(v80[0]) = v19;
      WORD2(v80[0]) = 1024;
      *(_DWORD *)((char *)v80 + 6) = v19;
      WORD1(v80[1]) = 2048;
      *(void *)((char *)&v80[1] + 4) = a3;
      v10 = "%{public}s %{public}s%s<i%u:s%d> skipping disconnected for stream %d, protocol %p because stream is already "
            "gracefully closed";
      nw_parameters_t v11 = (os_log_s *)v17;
      v12 = 60;
      goto LABEL_111;
    }
  }

            if ((*((_WORD *)a1 + 102) & 0x100) == 0
              || !g_channel_check_validity
              || g_channel_check_validity(a1, *((void *)a1 + 11)))
            {
              BOOL v80 = (void *)*((void *)a1 + 14);
              if (v80) {
                free(v80);
              }
            }

            nw_frame_reset((uint64_t)a1, 0LL, 0, 0LL, 0LL);
            os_release(a1);
            return;
          }

          *(void *)(v19 + 104) = v38;
          if (v37)
          {
            os_release(v37);
            v39 = *(void **)(v19 + 104);
          }

          if (v39)
          {
            if (nw_protocol_metadata_is_http(v39))
            {
              os_log_type_t v50 = *(void **)(v19 + 104);
              if ((*(_WORD *)(v11 + 388) & 0x80) != 0)
              {
                BOOL v51 = nw_http_metadata_copy_response(v50);
                if (!v51)
                {
                  __nwlog_obj();
                  *(_DWORD *)addrinfo buf = 136446210;
                  v111 = "nw_http2_save_metadata_from_frame";
                  os_log_type_t v52 = (char *)_os_log_send_and_compose_impl();
                  LOBYTE(type) = 16;
                  LOBYTE(v108) = 0;
                  if (type == 17)
                  {
                    id v53 = (os_log_s *)__nwlog_obj();
                    v54 = type;
                    if (!os_log_type_enabled(v53, (os_log_type_t)type)) {
                      goto LABEL_206;
                    }
                    *(_DWORD *)addrinfo buf = 136446210;
                    v111 = "nw_http2_save_metadata_from_frame";
                    os_log_type_t v55 = "%{public}s did not find response on frame";
                    goto LABEL_205;
                  }

                  if (!(_BYTE)v108)
                  {
                    id v53 = (os_log_s *)__nwlog_obj();
                    v54 = type;
                    if (!os_log_type_enabled(v53, (os_log_type_t)type)) {
                      goto LABEL_206;
                    }
                    *(_DWORD *)addrinfo buf = 136446210;
                    v111 = "nw_http2_save_metadata_from_frame";
                    os_log_type_t v55 = "%{public}s did not find response on frame, backtrace limit exceeded";
                    goto LABEL_205;
                  }

                  v87 = (char *)__nw_create_backtrace_string();
                  id v53 = (os_log_s *)__nwlog_obj();
                  v54 = type;
                  v90 = os_log_type_enabled(v53, (os_log_type_t)type);
                  if (!v87)
                  {
                    if (!v90) {
                      goto LABEL_206;
                    }
                    *(_DWORD *)addrinfo buf = 136446210;
                    v111 = "nw_http2_save_metadata_from_frame";
                    os_log_type_t v55 = "%{public}s did not find response on frame, no backtrace";
                    goto LABEL_205;
                  }

                  if (v90)
                  {
                    *(_DWORD *)addrinfo buf = 136446466;
                    v111 = "nw_http2_save_metadata_from_frame";
                    v112 = 2082;
                    *(void *)os_log_type_t v113 = v87;
                    os_log_type_t v89 = "%{public}s did not find response on frame, dumping backtrace:%{public}s";
                    goto LABEL_188;
                  }

LABEL_134:
            free(v59);
            goto LABEL_135;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v49 = (id)gLogObj;
          *(_DWORD *)addrinfo buf = 136446210;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          os_log_type_t v50 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v130 = 0;
          if (__nwlog_fault(v50, &type, &v130))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v51 = (os_log_s *)(id)gLogObj;
              os_log_type_t v52 = type;
              if (os_log_type_enabled(v51, type))
              {
                *(_DWORD *)addrinfo buf = 136446210;
                v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                _os_log_impl(&dword_181A5C000, v51, v52, "%{public}s nw_tcp_create_options failed", buf, 0xCu);
              }

    goto LABEL_135;
  }

  if (!v136)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v105 = (os_log_s *)(id)gLogObj;
    v112 = type;
    if (os_log_type_enabled(v105, type))
    {
      if (mode > 5) {
        os_log_type_t v113 = "unknown-mode";
      }
      else {
        os_log_type_t v113 = off_189BBBBC0[mode];
      }
      *(_DWORD *)addrinfo buf = 136446722;
      v139 = "nw_endpoint_flow_initialize_protocol";
      v140 = 2082;
      v141 = (void *)v113;
      v142 = 2082;
      v143 = "flow";
      _os_log_impl( &dword_181A5C000,  v105,  v112,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_134;
  }

  os_log_type_t v108 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v105 = (os_log_s *)(id)gLogObj;
  BOOL v109 = type;
  v110 = os_log_type_enabled(v105, type);
  if (!v108)
  {
    if (v110)
    {
      if (mode > 5) {
        os_log_type_t v114 = "unknown-mode";
      }
      else {
        os_log_type_t v114 = off_189BBBBC0[mode];
      }
      *(_DWORD *)addrinfo buf = 136446722;
      v139 = "nw_endpoint_flow_initialize_protocol";
      v140 = 2082;
      v141 = (void *)v114;
      v142 = 2082;
      v143 = "flow";
      _os_log_impl( &dword_181A5C000,  v105,  v109,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_134;
  }

  if (v110)
  {
    if (mode > 5) {
      v111 = "unknown-mode";
    }
    else {
      v111 = off_189BBBBC0[mode];
    }
    *(_DWORD *)addrinfo buf = 136446978;
    v139 = "nw_endpoint_flow_initialize_protocol";
    v140 = 2082;
    v141 = (void *)v111;
    v142 = 2082;
    v143 = "flow";
    v144 = 2082;
    v145 = v108;
    _os_log_impl( &dword_181A5C000,  v105,  v109,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v108);
  if (v104) {
    goto LABEL_136;
  }
LABEL_137:
}

                node = nw_hash_table_get_node(*((void *)v7 + 108), (uint64_t)v55, 0LL);
                if (!node) {
                  goto LABEL_136;
                }
                goto LABEL_135;
              }

                          os_release(v82);
                          goto LABEL_135;
                        }

                        __nwlog_obj();
                        v128 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)addrinfo buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                        id v129 = (char *)_os_log_send_and_compose_impl();

                        type.__r_.__value_.__s.__data_[0] = 16;
                        LOBYTE(v151[0]) = 0;
                        if (__nwlog_fault(v129, &type, v151))
                        {
                          if (type.__r_.__value_.__s.__data_[0] == 17)
                          {
                            __nwlog_obj();
                            char v130 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            v131 = type.__r_.__value_.__s.__data_[0];
                            if (os_log_type_enabled(v130, (os_log_type_t)type.__r_.__value_.__s.__data_[0]))
                            {
                              *(_DWORD *)addrinfo buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                              _os_log_impl( &dword_181A5C000,  v130,  v131,  "%{public}s metadata must be http_client",  buf,  0xCu);
                            }
                          }

                          else if (LOBYTE(v151[0]))
                          {
                            v140 = (char *)__nw_create_backtrace_string();
                            __nwlog_obj();
                            char v130 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            v141 = type.__r_.__value_.__s.__data_[0];
                            v142 = os_log_type_enabled(v130, (os_log_type_t)type.__r_.__value_.__s.__data_[0]);
                            if (v140)
                            {
                              if (v142)
                              {
                                *(_DWORD *)addrinfo buf = 136446466;
                                *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                                *(_WORD *)&buf[12] = 2082;
                                *(void *)&buf[14] = v140;
                                _os_log_impl( &dword_181A5C000,  v130,  v141,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
                              }

                              free(v140);
                              goto LABEL_293;
                            }

                            if (v142)
                            {
                              *(_DWORD *)addrinfo buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                              _os_log_impl( &dword_181A5C000,  v130,  v141,  "%{public}s metadata must be http_client, no backtrace",  buf,  0xCu);
                            }
                          }

                          else
                          {
                            __nwlog_obj();
                            char v130 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            v143 = type.__r_.__value_.__s.__data_[0];
                            if (os_log_type_enabled(v130, (os_log_type_t)type.__r_.__value_.__s.__data_[0]))
                            {
                              *(_DWORD *)addrinfo buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http_client_metadata_call_prevent_timeout_callback";
                              _os_log_impl( &dword_181A5C000,  v130,  v143,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
                            }
                          }
                        }

LABEL_135:
      if (!v18)
      {
LABEL_137:
        (*(void (**)(void, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL);

        goto LABEL_138;
      }

LABEL_135:
          if (!v17)
          {
LABEL_138:
            id v42 = 1;
            goto LABEL_139;
          }

          goto LABEL_136;
        }

        if (!v88)
        {
          __nwlog_obj();
          BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          objc_super v62 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl( &dword_181A5C000,  v18,  v62,  "%{public}s received invalid result type, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_134;
        }

        v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v44 = type;
        os_log_type_t v45 = os_log_type_enabled(v18, type);
        if (!v43)
        {
          if (v45)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl(&dword_181A5C000, v18, v44, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
          }

          goto LABEL_134;
        }

        if (v45)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
          v92 = 2082;
          *(void *)os_log_type_t v93 = v43;
          _os_log_impl( &dword_181A5C000,  v18,  v44,  "%{public}s received invalid result type, dumping backtrace:%{public}s",  buf,  0x16u);
        }

  free(v69);
  if (v59) {
LABEL_181:
  }
    free(v59);
}

    if (v68) {
      free(v68);
    }
    mode = 0;
LABEL_137:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v101 = (id)gLogObj;
    if (mode > 5) {
      BOOL v102 = "unknown-mode";
    }
    else {
      BOOL v102 = off_189BBBBC0[mode];
    }
    *(_DWORD *)addrinfo buf = 136446722;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    v128 = 2082;
    id v129 = (void *)v102;
    char v130 = 2082;
    v131 = "flow";
    v72 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (__nwlog_fault(v72, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v73 = (os_log_s *)(id)gLogObj;
        os_log_type_t v103 = type;
        if (os_log_type_enabled(v73, type))
        {
          if (mode > 5) {
            BOOL v104 = "unknown-mode";
          }
          else {
            BOOL v104 = off_189BBBBC0[mode];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          v128 = 2082;
          id v129 = (void *)v104;
          char v130 = 2082;
          v131 = "flow";
          _os_log_impl( &dword_181A5C000,  v73,  v103,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v124)
      {
        os_log_type_t v105 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v73 = (os_log_s *)(id)gLogObj;
        BOOL v106 = type;
        v107 = os_log_type_enabled(v73, type);
        if (v105)
        {
          if (v107)
          {
            if (mode > 5) {
              os_log_type_t v108 = "unknown-mode";
            }
            else {
              os_log_type_t v108 = off_189BBBBC0[mode];
            }
            *(_DWORD *)addrinfo buf = 136446978;
            v127 = "nw_flow_replay_add_candidate_output_handler";
            v128 = 2082;
            id v129 = (void *)v108;
            char v130 = 2082;
            v131 = "flow";
            v132 = 2082;
            v133 = v105;
            _os_log_impl( &dword_181A5C000,  v73,  v106,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v105);
          if (!v72) {
            goto LABEL_171;
          }
          goto LABEL_170;
        }

        if (v107)
        {
          if (mode > 5) {
            v111 = "unknown-mode";
          }
          else {
            v111 = off_189BBBBC0[mode];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          v128 = 2082;
          id v129 = (void *)v111;
          char v130 = 2082;
          v131 = "flow";
          _os_log_impl( &dword_181A5C000,  v73,  v106,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v73 = (os_log_s *)(id)gLogObj;
        BOOL v109 = type;
        if (os_log_type_enabled(v73, type))
        {
          if (mode > 5) {
            v110 = "unknown-mode";
          }
          else {
            v110 = off_189BBBBC0[mode];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          v128 = 2082;
          id v129 = (void *)v110;
          char v130 = 2082;
          v131 = "flow";
          _os_log_impl( &dword_181A5C000,  v73,  v109,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_168;
    }

    goto LABEL_169;
  }

  mode = v5->mode;

  if (mode != 2) {
    goto LABEL_137;
  }
  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    v72 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v74 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_181A5C000, v73, v74, "%{public}s called with null flow_protocol", buf, 0xCu);
      }
    }

    else if (v124)
    {
      v88 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v89 = type;
      v90 = os_log_type_enabled(v73, type);
      if (v88)
      {
        if (v90)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          v128 = 2082;
          id v129 = v88;
          _os_log_impl( &dword_181A5C000,  v73,  v89,  "%{public}s called with null flow_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v88);
        if (!v72) {
          goto LABEL_171;
        }
        goto LABEL_170;
      }

      if (v90)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_181A5C000, v73, v89, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v113 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl( &dword_181A5C000,  v73,  v113,  "%{public}s called with null flow_protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_168;
  }

  if (!a3)
  {
    __nwlog_obj();
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    v72 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v79 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_181A5C000, v73, v79, "%{public}s called with null candidate_output_handler", buf, 0xCu);
      }

  if (v33) {
LABEL_135:
  }
    free(v33);
LABEL_9:
  v7 = 0LL;
LABEL_63:

  return v7;
}

                  xpc_dictionary_set_BOOL(v2, "internet_fallback", 1);
                  if ((*((void *)v1 + 12) & 0x4000000000LL) == 0) {
                    goto LABEL_105;
                  }
                  goto LABEL_104;
                }

      free(v73);
    }
  }

              if (a3 == 3)
              {
                v126 = v88;
                v126->state = 3;
              }

              nw_endpoint_handler_report(v88, 0LL, a4, 0LL);
              v127 = *((_BYTE *)v279 + 108);
              v88->event.domain = 5;
              p_event = &v88->event;
              if (v20 == v280)
              {
                v88->event.event = 3;
                nw_endpoint_handler_report(v88, 0LL, p_event, 0LL);
                if ((v127 & 0x10) == 0) {
                  goto LABEL_189;
                }
              }

              else
              {
                v88->event.event = 4;
                nw_endpoint_handler_report(v88, 0LL, p_event, 0LL);
                if ((v127 & 0x10) != 0) {
                  goto LABEL_189;
                }
              }

              id v129 = v88;
              os_unfair_lock_lock(&v129->lock);
              char v130 = v129->current_path;
              os_unfair_lock_unlock(&v129->lock);

              if (!v130)
              {
                if ((nw_endpoint_handler_get_logging_disabled(v129) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  v141 = (os_log_s *)(id)gconnectionLogObj;
                  if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
                  {
                    v142 = nw_endpoint_handler_get_id_string(v129);
                    v143 = nw_endpoint_handler_dry_run_string(v129);
                    v144 = nw_endpoint_handler_copy_endpoint(v129);
                    v145 = nw_endpoint_get_logging_description(v144);
                    v146 = nw_endpoint_handler_state_string(v129);
                    v147 = nw_endpoint_handler_mode_string(v129);
                    v148 = nw_endpoint_handler_copy_current_path(v129);
                    *(_DWORD *)addrinfo buf = 136447746;
                    v286 = "nw_endpoint_fallback_receive_report";
                    v287 = 2082;
                    v288 = (void *)v142;
                    v289 = 2082;
                    v290 = v143;
                    v291 = 2082;
                    v292 = v145;
                    v293 = 2082;
                    v294 = v146;
                    v295 = 2082;
                    v296 = v147;
                    v297 = 2114;
                    v298 = v148;
                    _os_log_impl( &dword_181A5C000,  v141,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] could not get fallback path",  buf,  0x48u);
                  }
                }

                goto LABEL_185;
              }

              os_log_type_t type = 0uLL;
              if (nw_path_get_fallback_agent(v130, &type))
              {
                v131 = nw_path_agent_action(v130, (const unsigned __int8 *)&type, 131);
                v132 = nw_endpoint_handler_get_logging_disabled(v129);
                if (v131)
                {
                  if ((v132 & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    v133 = (os_log_s *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
                    {
                      __int16 v134 = nw_endpoint_handler_get_id_string(v129);
                      v135 = nw_endpoint_handler_dry_run_string(v129);
                      uint64_t v136 = nw_endpoint_handler_copy_endpoint(v129);
                      v137 = nw_endpoint_get_logging_description(v136);
                      v138 = nw_endpoint_handler_state_string(v129);
                      v139 = nw_endpoint_handler_mode_string(v129);
                      v140 = nw_endpoint_handler_copy_current_path(v129);
                      *(_DWORD *)addrinfo buf = 136447746;
                      v286 = "nw_endpoint_fallback_receive_report";
                      v287 = 2082;
                      v288 = (void *)v134;
                      v289 = 2082;
                      v290 = v135;
                      v291 = 2082;
                      v292 = v137;
                      v293 = 2082;
                      v294 = v138;
                      v295 = 2082;
                      v296 = v139;
                      v297 = 2114;
                      v298 = v140;
                      _os_log_impl( &dword_181A5C000,  v133,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] asserted fallback agent",  buf,  0x48u);
                    }

  v90 = *(void *)(v12 + 616);
  os_log_type_t v91 = *(void *)(v12 + 632);
  v92 = *v13 & 0x204;
  if ((*v13 & 0x2000) != 0)
  {
    BOOL v102 = v90 | v91;
    os_log_type_t v103 = (v90 | v91) == 0;
    BOOL v104 = ((*v13 | (*((unsigned __int8 *)v13 + 2) << 16)) >> 9) & 1;
    if (v92 == 4) {
      BOOL v104 = 1;
    }
    if (v102 || !v104)
    {
      if (v92 == 4) {
        goto LABEL_175;
      }
      if (!v103) {
        goto LABEL_175;
      }
      *(_DWORD *)(v12 + 864) = 5;
      if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
        goto LABEL_175;
      }
      os_log_type_t v93 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_175;
      }
      os_log_type_t v108 = *(void *)(v12 + 488);
      BOOL v109 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
      v110 = *(_DWORD *)(v12 + 860);
      if (v108) {
        LODWORD(v108) = *(_DWORD *)(v108 + 424);
      }
      *(_DWORD *)addrinfo buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v109;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v110;
      LOWORD(v265) = 1024;
      *(_DWORD *)((char *)&v265 + 2) = v108;
      os_log_type_t v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: connection error";
    }

    else
    {
      *(_DWORD *)(v12 + 864) = 4;
      if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
        goto LABEL_175;
      }
      os_log_type_t v93 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_175;
      }
      os_log_type_t v105 = *(void *)(v12 + 488);
      BOOL v106 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
      v107 = *(_DWORD *)(v12 + 860);
      if (v105) {
        LODWORD(v105) = *(_DWORD *)(v105 + 424);
      }
      *(_DWORD *)addrinfo buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v106;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v107;
      LOWORD(v265) = 1024;
      *(_DWORD *)((char *)&v265 + 2) = v105;
      os_log_type_t v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: connection complete";
    }

                v85 = (void *)(v16 + 632);
                *(void *)addrinfo buf = v81;
                *(void *)&buf[8] = 0x40000000LL;
                *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
                v1051 = (uint64_t)&__block_descriptor_tmp_55_39717;
                *(void *)v1052 = v16 + 632;
                v1052[8] = 0;
                v86 = *(void *)(v16 + 632);
                do
                {
                  if (!v86) {
                    break;
                  }
                  v87 = *(void *)(v86 + 32);
                  v88 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  v86 = v87;
                }

                while ((v88 & 1) != 0);
                if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v578 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v578, OS_LOG_TYPE_DEBUG))
                    {
                      v579 = *(void *)(v16 + 488);
                      v580 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                      v581 = *(_DWORD *)(v16 + 860);
                      if (v579) {
                        LODWORD(v579) = *(_DWORD *)(v579 + 424);
                      }
                      *(_DWORD *)addrinfo buf = 136447490;
                      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v16 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v1051 = (uint64_t)" ";
                      *(_WORD *)v1052 = 1024;
                      *(_DWORD *)&v1052[2] = v580;
                      *(_WORD *)&v1052[6] = 1024;
                      *(_DWORD *)&v1052[8] = v581;
                      *(_WORD *)&v1052[12] = 1024;
                      *(_DWORD *)&v1052[14] = v579;
                      _os_log_impl( &dword_181A5C000,  v578,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removing pending_output_frames",  buf,  0x32u);
                      nw_parameters_t v11 = v1042;
                      unint64_t v15 = &qword_18C45F000;
                    }
                  }
                }

                *(void *)v1065 = v81;
                *(void *)&v1065[8] = 0x40000000LL;
                *(void *)&v1065[16] = ___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
                v1066 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_54_39769;
                v1067 = (void (*)(uint64_t))v16;
                os_log_type_t v89 = *(void *)(v16 + 648);
                do
                {
                  if (!v89) {
                    break;
                  }
                  v90 = *(void *)(v89 + 32);
                  os_log_type_t v91 = (*(uint64_t (**)(_BYTE *))&v1065[16])(v1065);
                  os_log_type_t v89 = v90;
                }

                while ((v91 & 1) != 0);
                nw_frame_cache_remove_all((uint64_t *)(v16 + 696));
                if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                {
                  if (*((_BYTE *)v15 + 1537))
                  {
                    v582 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v582, OS_LOG_TYPE_DEBUG))
                    {
                      v583 = *(void *)(v16 + 488);
                      v584 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                      v585 = *(_DWORD *)(v16 + 860);
                      if (v583) {
                        LODWORD(v583) = *(_DWORD *)(v583 + 424);
                      }
                      v586 = *(void *)(v16 + 32);
                      *(_DWORD *)addrinfo buf = 136447746;
                      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v16 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v1051 = (uint64_t)" ";
                      *(_WORD *)v1052 = 1024;
                      *(_DWORD *)&v1052[2] = v584;
                      *(_WORD *)&v1052[6] = 1024;
                      *(_DWORD *)&v1052[8] = v585;
                      *(_WORD *)&v1052[12] = 1024;
                      *(_DWORD *)&v1052[14] = v583;
                      *(_WORD *)&v1052[18] = 2048;
                      *(void *)&v1052[20] = v586;
                      _os_log_impl( &dword_181A5C000,  v582,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> calling remove input handler on output handler %p",  buf,  0x3Cu);
                      nw_parameters_t v11 = v1042;
                      unint64_t v15 = &qword_18C45F000;
                    }
                  }
                }

                v92 = *(_DWORD *)(v11 + 336);
                *(_DWORD *)(v11 + 336) = v92 - 1;
                if (v92)
                {
LABEL_202:
                  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                  {
                    if (*((_BYTE *)v15 + 1537))
                    {
                      v587 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v587, OS_LOG_TYPE_DEBUG))
                      {
                        v588 = *(_DWORD *)(v11 + 372);
                        v589 = *(_DWORD *)(v11 + 336);
                        *(_DWORD *)addrinfo buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v11 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v1051 = (uint64_t)" ";
                        *(_WORD *)v1052 = 1024;
                        *(_DWORD *)&v1052[2] = v588;
                        *(_WORD *)&v1052[6] = 2048;
                        *(void *)&v1052[8] = v16;
                        *(_WORD *)&v1052[16] = 1024;
                        *(_DWORD *)&v1052[18] = v589;
                        _os_log_impl( &dword_181A5C000,  v587,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> removed connection %p, now have %u connections",  buf,  0x36u);
                      }
                    }
                  }

                  if ((*(_WORD *)(v16 + 872) & 0x800) == 0)
                  {
LABEL_265:
                    nw_protocol_remove_input_handler(*(void *)(v16 + 32), v16);
                    nw_protocol_set_output_handler(v16, 0LL);
                    if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                    {
                      if (*((_BYTE *)v15 + 1537))
                      {
                        v590 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v590, OS_LOG_TYPE_DEBUG))
                        {
                          v591 = *(void *)(v16 + 488);
                          v592 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                          v593 = *(_DWORD *)(v16 + 860);
                          if (v591) {
                            LODWORD(v591) = *(_DWORD *)(v591 + 424);
                          }
                          *(_DWORD *)addrinfo buf = 136447746;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_destroy";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v16 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1051 = (uint64_t)" ";
                          *(_WORD *)v1052 = 1024;
                          *(_DWORD *)&v1052[2] = v592;
                          *(_WORD *)&v1052[6] = 1024;
                          *(_DWORD *)&v1052[8] = v593;
                          *(_WORD *)&v1052[12] = 1024;
                          *(_DWORD *)&v1052[14] = v591;
                          *(_WORD *)&v1052[18] = 2048;
                          *(void *)&v1052[20] = v16;
                          _os_log_impl( &dword_181A5C000,  v590,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p",  buf,  0x3Cu);
                          nw_parameters_t v11 = v1042;
                          unint64_t v15 = &qword_18C45F000;
                        }
                      }
                    }

                    v166 = *(_BYTE *)(v16 + 760);
                    if ((v166 & 1) != 0)
                    {
                      v167 = *(void **)(v16 + 752);
                      if (v167)
                      {
                        os_release(v167);
                        v166 = *(_BYTE *)(v16 + 760);
                      }
                    }

                    *(void *)(v16 + 752) = 0LL;
                    *(_BYTE *)(v16 + 760) = v166 | 1;
                    v168 = *(_BYTE *)(v16 + 744);
                    if ((v168 & 1) != 0)
                    {
                      v169 = *(void **)(v16 + 736);
                      if (v169)
                      {
                        os_release(v169);
                        v168 = *(_BYTE *)(v16 + 744);
                      }
                    }

                    *(void *)(v16 + 736) = 0LL;
                    *(_BYTE *)(v16 + 744) = v168 | 1;
                    v170 = *(void *)(v16 + 488);
                    if (!v170 || *(void *)(v170 + 256) != v16)
                    {
LABEL_286:
                      *(void *)(v16 + 488) = 0LL;
                      if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                      {
                        if (!*((_BYTE *)v15 + 1537)) {
                          goto LABEL_288;
                        }
                        v604 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v604, OS_LOG_TYPE_DEBUG))
                        {
                          v605 = *(void *)(v16 + 488);
                          v606 = *(_DWORD *)(*(void *)(v16 + 480) + 372LL);
                          v607 = *(_DWORD *)(v16 + 860);
                          if (v605) {
                            LODWORD(v605) = *(_DWORD *)(v605 + 424);
                          }
                          *(_DWORD *)addrinfo buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_destroy";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v16 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1051 = (uint64_t)" ";
                          *(_WORD *)v1052 = 1024;
                          *(_DWORD *)&v1052[2] = v606;
                          *(_WORD *)&v1052[6] = 1024;
                          *(_DWORD *)&v1052[8] = v607;
                          *(_WORD *)&v1052[12] = 1024;
                          *(_DWORD *)&v1052[14] = v605;
                          _os_log_impl( &dword_181A5C000,  v604,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing frame arrays",  buf,  0x32u);
                          nw_parameters_t v11 = v1042;
                          unint64_t v15 = &qword_18C45F000;
                        }
                      }

                      if (*((_BYTE *)v15 + 1537))
                      {
                        v608 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v608, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)aBlock = 136446210;
                          *(void *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                          _os_log_impl(&dword_181A5C000, v608, OS_LOG_TYPE_DEBUG, "%{public}s called", aBlock, 0xCu);
                        }
                      }

      if (!v51) {
        goto LABEL_48;
      }
      goto LABEL_135;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v15 = *(unsigned int *)(v10 + 368);
    *(_DWORD *)addrinfo buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->nonresuable_connections";
    *(_WORD *)&buf[22] = 2048;
    os_log_type_t v76 = 1LL;
    *(_WORD *)v77 = 2048;
    *(void *)&v77[2] = v15;
    v16 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v74 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v16, type, &v74))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)gLogObj;
        BOOL v18 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          v19 = *(unsigned int *)(v10 + 368);
          *(_DWORD *)addrinfo buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          os_log_type_t v76 = 1LL;
          *(_WORD *)v77 = 2048;
          *(void *)&v77[2] = v19;
          v20 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_39:
          _os_log_impl(&dword_181A5C000, v17, v18, v20, buf, 0x2Au);
        }
      }

      else if (v74)
      {
        os_log_type_t v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)gLogObj;
        BOOL v18 = type[0];
        v30 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v29)
        {
          if (v30)
          {
            id v31 = *(unsigned int *)(v10 + 368);
            *(_DWORD *)addrinfo buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            os_log_type_t v76 = 1LL;
            *(_WORD *)v77 = 2048;
            *(void *)&v77[2] = v31;
            *(_WORD *)&v77[10] = 2082;
            v78 = v29;
            _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v29);
          goto LABEL_40;
        }

        if (v30)
        {
          os_log_type_t v33 = *(unsigned int *)(v10 + 368);
          *(_DWORD *)addrinfo buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          os_log_type_t v76 = 1LL;
          *(_WORD *)v77 = 2048;
          *(void *)&v77[2] = v33;
          v20 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_39;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)gLogObj;
        BOOL v18 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          v32 = *(unsigned int *)(v10 + 368);
          *(_DWORD *)addrinfo buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          os_log_type_t v76 = 1LL;
          *(_WORD *)v77 = 2048;
          *(void *)&v77[2] = v32;
          v20 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_39;
        }
      }
    }

          if (v58) {
            free(v58);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -1;
LABEL_137:
          if ((*(_BYTE *)(*(void *)(a1 + 64) + 158LL) & 1) == 0)
          {
            if (gLogDatapath)
            {
              os_log_type_t v91 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
              {
                v92 = *(void *)(a1 + 64);
                os_log_type_t v93 = (const char *)(v92 + 74);
                v94 = *(void *)(v92 + 488);
                if (v94) {
                  os_log_type_t v95 = *(_DWORD *)(v94 + 424);
                }
                else {
                  os_log_type_t v95 = 0;
                }
                BOOL v102 = *(_DWORD *)(*(void *)(v92 + 480) + 372LL);
                os_log_type_t v103 = *(_DWORD *)(v92 + 860);
                BOOL v104 = nw_frame_unclaimed_length(*(_DWORD **)type);
                os_log_type_t v105 = *(_DWORD *)(v37 + 52);
                if (v105) {
                  v105 -= *(_DWORD *)(v37 + 56) + *(_DWORD *)(v37 + 60);
                }
                *(_DWORD *)addrinfo buf = 136448514;
                v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
                v111 = 2082;
                v112 = v93;
                os_log_type_t v113 = 2080;
                os_log_type_t v114 = (uint64_t)" ";
                os_log_type_t v115 = 1024;
                *(_DWORD *)os_log_type_t v116 = v102;
                *(_WORD *)&v116[4] = 1024;
                *(_DWORD *)&v116[6] = v103;
                LOWORD(v117) = 1024;
                *(_DWORD *)((char *)&v117 + 2) = v95;
                HIWORD(v117) = 1024;
                *(_DWORD *)os_log_type_t v118 = v16;
                *(_WORD *)&v118[4] = 1024;
                *(_DWORD *)&v118[6] = v5;
                *(_WORD *)v119 = 1024;
                *(_DWORD *)&v119[2] = v104;
                v120 = 1024;
                os_log_type_t v121 = v105;
                _os_log_impl( &dword_181A5C000,  v91,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Moving split frame (%u bytes of %u, %u bytes remaining, delivering %u bytes)",  buf,  0x4Au);
              }
            }
          }

          goto LABEL_87;
        }

        if ((*(_BYTE *)(*(void *)(a1 + 64) + 158LL) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v45 = *(void *)(a1 + 64);
            v46 = (const char *)(v45 + 74);
            os_log_type_t v47 = *(void *)(v45 + 488);
            BOOL v48 = *(_DWORD *)(*(void *)(v45 + 480) + 372LL);
            id v49 = *(_DWORD *)(v45 + 860);
            if (v47) {
              LODWORD(v47) = *(_DWORD *)(v47 + 424);
            }
            *(_DWORD *)addrinfo buf = 136448002;
            v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
            v111 = 2082;
            v112 = v46;
            os_log_type_t v113 = 2080;
            os_log_type_t v114 = (uint64_t)" ";
            os_log_type_t v115 = 1024;
            *(_DWORD *)os_log_type_t v116 = v48;
            *(_WORD *)&v116[4] = 1024;
            *(_DWORD *)&v116[6] = v49;
            LOWORD(v117) = 1024;
            *(_DWORD *)((char *)&v117 + 2) = v47;
            HIWORD(v117) = 2048;
            *(void *)os_log_type_t v118 = a2;
            *(_WORD *)&v118[8] = 1024;
            *(_DWORD *)v119 = v16;
            _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> failed to split frame %p at offset %u",  buf,  0x42u);
          }
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)addrinfo buf = 136446210;
        v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
        os_log_type_t v50 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v108 = OS_LOG_TYPE_ERROR;
        BOOL v106 = 0;
        if (v108 == OS_LOG_TYPE_FAULT)
        {
          BOOL v51 = (os_log_s *)__nwlog_obj();
          os_log_type_t v52 = v108;
          if (!os_log_type_enabled(v51, v108)) {
            goto LABEL_127;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          id v53 = "%{public}s nw_frame_split with partial frame failed";
        }

        else if (v106)
        {
          os_log_type_t v84 = (char *)__nw_create_backtrace_string();
          BOOL v51 = (os_log_s *)__nwlog_obj();
          os_log_type_t v52 = v108;
          v85 = os_log_type_enabled(v51, v108);
          if (v84)
          {
            if (v85)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = v84;
              _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s nw_frame_split with partial frame failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v84);
            goto LABEL_127;
          }

          if (!v85)
          {
LABEL_127:
            if (v50) {
              free(v50);
            }
            return 0LL;
          }

          *(_DWORD *)addrinfo buf = 136446210;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          id v53 = "%{public}s nw_frame_split with partial frame failed, no backtrace";
        }

        else
        {
          BOOL v51 = (os_log_s *)__nwlog_obj();
          os_log_type_t v52 = v108;
          if (!os_log_type_enabled(v51, v108)) {
            goto LABEL_127;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
          id v53 = "%{public}s nw_frame_split with partial frame failed, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v51, v52, v53, buf, 0xCu);
        goto LABEL_127;
      }
    }

    *(void *)(*(void *)(a1 + 56) + 8LL) = v19;
    goto LABEL_47;
  }

  BOOL result = 0LL;
  if ((*(_BYTE *)(*(void *)(a1 + 64) + 158LL) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v30 = (os_log_s *)__nwlog_obj();
      BOOL result = os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        id v31 = *(void *)(a1 + 64);
        v32 = (const char *)(v31 + 74);
        os_log_type_t v33 = *(void *)(v31 + 488);
        os_log_type_t v34 = *(_DWORD *)(*(void *)(v31 + 480) + 372LL);
        id v35 = *(_DWORD *)(v31 + 860);
        if (v33) {
          LODWORD(v33) = *(_DWORD *)(v33 + 424);
        }
        *(_DWORD *)addrinfo buf = 136447490;
        v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
        v111 = 2082;
        v112 = v32;
        os_log_type_t v113 = 2080;
        os_log_type_t v114 = (uint64_t)" ";
        os_log_type_t v115 = 1024;
        *(_DWORD *)os_log_type_t v116 = v34;
        *(_WORD *)&v116[4] = 1024;
        *(_DWORD *)&v116[6] = v35;
        LOWORD(v117) = 1024;
        *(_DWORD *)((char *)&v117 + 2) = v33;
        _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> skipping partial frame, split frames not allowed",  buf,  0x32u);
        return 0LL;
      }
    }
  }

  return result;
}

        if (v22) {
LABEL_135:
        }
          free(v22);
LABEL_136:
        sqlite3_reset(*(sqlite3_stmt **)(*(void *)(a1 + 32) + 48LL));
LABEL_146:

        goto LABEL_147;
      }

      __nwlog_obj();
      id v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      id v53 = "nw_storage_flush_block_invoke";
      v22 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v49 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          id v53 = "nw_storage_flush_block_invoke";
          id v25 = "%{public}s Failed to bind variable";
          goto LABEL_132;
        }

        goto LABEL_133;
      }

      if (!v49)
      {
        __nwlog_obj();
        BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          id v53 = "nw_storage_flush_block_invoke";
          id v25 = "%{public}s Failed to bind variable, backtrace limit exceeded";
          goto LABEL_132;
        }

        goto LABEL_133;
      }

      v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      BOOL v41 = os_log_type_enabled(v23, type);
      if (!v32)
      {
        if (v41)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          id v53 = "nw_storage_flush_block_invoke";
          id v25 = "%{public}s Failed to bind variable, no backtrace";
          goto LABEL_132;
        }

        goto LABEL_133;
      }

      if (v41)
      {
LABEL_78:
        *(_DWORD *)addrinfo buf = 136446466;
        id v53 = "nw_storage_flush_block_invoke";
        v54 = 2082;
        os_log_type_t v55 = v32;
        v39 = "%{public}s Failed to bind variable, dumping backtrace:%{public}s";
        goto LABEL_79;
      }
    }

            goto LABEL_135;
          }

          if (!v88)
          {
            __nwlog_obj();
            os_log_type_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v70 = type;
            if (os_log_type_enabled(v56, type))
            {
              *(_DWORD *)addrinfo buf = 136446722;
              os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              os_log_type_t v93 = a8;
              v94 = 1024;
              *(_DWORD *)os_log_type_t v95 = v21;
              _os_log_impl( &dword_181A5C000,  v56,  v70,  "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d, backtrace limit exceeded",  buf,  0x1Cu);
            }

            goto LABEL_134;
          }

          BOOL v65 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v85 = type;
          v66 = os_log_type_enabled(v56, type);
          if (!v65)
          {
            if (v66)
            {
              *(_DWORD *)addrinfo buf = 136446722;
              os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              os_log_type_t v93 = a8;
              v94 = 1024;
              *(_DWORD *)os_log_type_t v95 = v21;
              _os_log_impl( &dword_181A5C000,  v56,  v85,  "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d, no backtrace",  buf,  0x1Cu);
            }

            goto LABEL_134;
          }

          if (v66)
          {
            *(_DWORD *)addrinfo buf = 136446978;
            os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            os_log_type_t v93 = a8;
            v94 = 1024;
            *(_DWORD *)os_log_type_t v95 = v21;
            *(_WORD *)&v95[4] = 2082;
            *(void *)&v95[6] = v65;
            _os_log_impl( &dword_181A5C000,  v56,  v85,  "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x26u);
          }

          free(v65);
LABEL_135:
          if (v55) {
            free(v55);
          }
LABEL_80:
          if (nwsc_is_error_allowlisted(v18, 0))
          {
            nwsc_request_start_path_watcher(v15, v48, (NWConcrete_nw_connection *)v16, 0);
          }

          else
          {
            nw_service_connector_cancel_request_inner(v15, v48->endpoint, (uint64_t)v48->service, v16, 0);
            nw_service_connector_trigger_request_complete_block_inner(v15, v48, 0LL, 0LL, v21);
          }

          break;
      }

      __break(1u);
      return result;
    case 3:
      goto LABEL_111;
    case 4:
      goto LABEL_110;
    default:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v36 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446466;
      v112 = "nw_nat64_copy_prefixes_internal";
      os_log_type_t v113 = 1024;
      *(_DWORD *)os_log_type_t v114 = v14;
      v37 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(sdRef) = 16;
      LOBYTE(service) = 0;
      if (sdRef == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v38 = (os_log_s *)(id)gLogObj;
        v39 = sdRef;
        if (os_log_type_enabled(v38, (os_log_type_t)sdRef))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v112 = "nw_nat64_copy_prefixes_internal";
          os_log_type_t v113 = 1024;
          *(_DWORD *)os_log_type_t v114 = v14;
          _os_log_impl(&dword_181A5C000, v38, v39, "%{public}s Received unknown state %d", buf, 0x12u);
        }
      }

      else if ((_BYTE)service)
      {
        os_log_type_t v40 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v38 = (os_log_s *)(id)gLogObj;
        BOOL v41 = sdRef;
        id v42 = os_log_type_enabled(v38, (os_log_type_t)sdRef);
        if (v40)
        {
          if (v42)
          {
            *(_DWORD *)addrinfo buf = 136446722;
            v112 = "nw_nat64_copy_prefixes_internal";
            os_log_type_t v113 = 1024;
            *(_DWORD *)os_log_type_t v114 = v14;
            *(_WORD *)&v114[4] = 2082;
            *(void *)&v114[6] = v40;
            _os_log_impl( &dword_181A5C000,  v38,  v41,  "%{public}s Received unknown state %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v40);
          if (v37) {
            goto LABEL_109;
          }
          goto LABEL_110;
        }

        if (v42)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v112 = "nw_nat64_copy_prefixes_internal";
          os_log_type_t v113 = 1024;
          *(_DWORD *)os_log_type_t v114 = v14;
          _os_log_impl(&dword_181A5C000, v38, v41, "%{public}s Received unknown state %d, no backtrace", buf, 0x12u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v38 = (os_log_s *)(id)gLogObj;
        os_log_type_t v61 = sdRef;
        if (os_log_type_enabled(v38, (os_log_type_t)sdRef))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v112 = "nw_nat64_copy_prefixes_internal";
          os_log_type_t v113 = 1024;
          *(_DWORD *)os_log_type_t v114 = v14;
          _os_log_impl( &dword_181A5C000,  v38,  v61,  "%{public}s Received unknown state %d, backtrace limit exceeded",  buf,  0x12u);
        }
      }

LABEL_108:
      if (!v37) {
        goto LABEL_110;
      }
      goto LABEL_109;
  }

        BYTE1(v10[1].super.isa) |= 4u;
        if ((v35 & 0x400) == 0)
        {
LABEL_75:
          if ((v35 & 1) == 0) {
            goto LABEL_76;
          }
          goto LABEL_136;
        }

    if (v60) {
      free(v60);
    }
    goto LABEL_38;
  }

  handle[738] = BYTE2(v20);
  os_log_s *v8 = v20 | 0x80;
  if ((v20 & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      id v21 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        v22 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
        BOOL v23 = (nw_protocol *)*((void *)handle + 30);
        *(_DWORD *)addrinfo buf = 136447490;
        os_log_type_t v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        os_log_type_t v95 = handle + 636;
        v96 = 2080;
        os_log_type_t v97 = " ";
        v98 = 1024;
        os_log_type_t v99 = v22;
        BOOL v100 = 2048;
        os_log_type_t v101 = v23;
        BOOL v102 = 2048;
        os_log_type_t v103 = v23;
        v13 = "%{public}s %{public}s%s<i%u:s%llu> Pending connected event for stream %llu until SETTINGS are sent";
        size_t v14 = v21;
        goto LABEL_14;
      }
    }
  }

  if (v26) {
    free(v26);
  }
}

        free(v88);
        goto LABEL_135;
      }

      if (v95)
      {
        *(_DWORD *)os_log_type_t v115 = 136446210;
        *(void *)&v115[4] = "nw_http_client_metadata_get_client_error";
        _os_log_impl(&dword_181A5C000, v89, v94, "%{public}s called with null metadata, no backtrace", v115, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v99 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)os_log_type_t v115 = 136446210;
        *(void *)&v115[4] = "nw_http_client_metadata_get_client_error";
        _os_log_impl( &dword_181A5C000,  v89,  v99,  "%{public}s called with null metadata, backtrace limit exceeded",  v115,  0xCu);
      }
    }

LABEL_176:
                  os_log_type_t v95 = v96;
                  goto LABEL_177;
                }

                if (!v126)
                {
                  __nwlog_obj();
                  os_log_type_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v118 = v127;
                  if (os_log_type_enabled(v97, v127))
                  {
                    v119 = (const char *)*((void *)v41 + 2);
                    if (!v119) {
                      v119 = "invalid";
                    }
                    *(_DWORD *)addrinfo buf = 136446722;
                    v133 = "__nw_protocol_updated_path";
                    __int16 v134 = 2082;
                    id_str = (void *)v119;
                    uint64_t v136 = 2048;
                    v137 = v41;
                    _os_log_impl( &dword_181A5C000,  v97,  v118,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded",  buf,  0x20u);
                  }

                  goto LABEL_134;
                }

                v111 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v122 = v127;
                os_log_type_t v113 = os_log_type_enabled(v112, v127);
                if (!v111)
                {
                  if (v113)
                  {
                    v120 = (const char *)*((void *)v41 + 2);
                    if (!v120) {
                      v120 = "invalid";
                    }
                    *(_DWORD *)addrinfo buf = 136446722;
                    v133 = "__nw_protocol_updated_path";
                    __int16 v134 = 2082;
                    id_str = (void *)v120;
                    uint64_t v136 = 2048;
                    v137 = v41;
                    _os_log_impl( &dword_181A5C000,  v112,  v122,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace",  buf,  0x20u);
                  }

                  goto LABEL_176;
                }

                if (v113)
                {
                  os_log_type_t v114 = (const char *)*((void *)v41 + 2);
                  if (!v114) {
                    os_log_type_t v114 = "invalid";
                  }
                  *(_DWORD *)addrinfo buf = 136446978;
                  v133 = "__nw_protocol_updated_path";
                  __int16 v134 = 2082;
                  id_str = (void *)v114;
                  uint64_t v136 = 2048;
                  v137 = v41;
                  v138 = 2082;
                  v139 = v111;
                  _os_log_impl( &dword_181A5C000,  v112,  v122,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                }

                os_log_type_t v95 = v96;
                free(v111);
              }

              else
              {
                __nwlog_obj();
                os_log_type_t v108 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)addrinfo buf = 136446210;
                v133 = "__nw_protocol_updated_path";
                os_log_type_t v95 = (char *)_os_log_send_and_compose_impl();

                v127 = OS_LOG_TYPE_ERROR;
                v126 = 0;
                if (__nwlog_fault(v95, &v127, &v126))
                {
                  if (v127 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    BOOL v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    v110 = v127;
                    if (os_log_type_enabled(v109, v127))
                    {
                      *(_DWORD *)addrinfo buf = 136446210;
                      v133 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_181A5C000, v109, v110, "%{public}s called with null path", buf, 0xCu);
                    }
                  }

                  else if (v126)
                  {
                    os_log_type_t v115 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    BOOL v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v116 = v127;
                    os_log_type_t v117 = os_log_type_enabled(v109, v127);
                    if (v115)
                    {
                      if (v117)
                      {
                        *(_DWORD *)addrinfo buf = 136446466;
                        v133 = "__nw_protocol_updated_path";
                        __int16 v134 = 2082;
                        id_str = v115;
                        _os_log_impl( &dword_181A5C000,  v109,  v116,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v115);
                      if (!v95) {
                        goto LABEL_81;
                      }
                      goto LABEL_178;
                    }

                    if (v117)
                    {
                      *(_DWORD *)addrinfo buf = 136446210;
                      v133 = "__nw_protocol_updated_path";
                      _os_log_impl( &dword_181A5C000,  v109,  v116,  "%{public}s called with null path, no backtrace",  buf,  0xCu);
                    }
                  }

                  else
                  {
                    __nwlog_obj();
                    BOOL v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v121 = v127;
                    if (os_log_type_enabled(v109, v127))
                    {
                      *(_DWORD *)addrinfo buf = 136446210;
                      v133 = "__nw_protocol_updated_path";
                      _os_log_impl( &dword_181A5C000,  v109,  v121,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
                    }
                  }
                }
              }

LABEL_57:
              goto LABEL_124;
            }

            if (!v130)
            {
              __nwlog_obj();
              BOOL v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v82 = type;
              if (os_log_type_enabled(v51, type))
              {
                *(_DWORD *)addrinfo buf = 136446210;
                v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                _os_log_impl( &dword_181A5C000,  v51,  v82,  "%{public}s nw_tcp_create_options failed, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_57;
            }

            objc_super v62 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v64 = type;
            BOOL v65 = os_log_type_enabled(v63, type);
            if (v62)
            {
              if (v65)
              {
                *(_DWORD *)addrinfo buf = 136446466;
                v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                __int16 v134 = 2082;
                v135 = v62;
                _os_log_impl( &dword_181A5C000,  v63,  v64,  "%{public}s nw_tcp_create_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v62);
              v66 = 0LL;
              if (!v50) {
                goto LABEL_126;
              }
              goto LABEL_125;
            }

            if (v65)
            {
              *(_DWORD *)addrinfo buf = 136446210;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              _os_log_impl( &dword_181A5C000,  v63,  v64,  "%{public}s nw_tcp_create_options failed, no backtrace",  buf,  0xCu);
            }
          }

    free(v27);
    if (!v17) {
      goto LABEL_27;
    }
    goto LABEL_82;
  }

  nw_context_assert_queue(v3[3]);
  v5 = *((unsigned __int16 *)v4 + 161);
  if (v5 >= 0x40)
  {
    if ((*((_BYTE *)v4 + 108) & 0x10) == 0)
    {
      *((_BYTE *)v4 + 108) |= 0x10u;
      id v6 = v4[2];
      if (v6)
      {
        if (!nw_path_parameters_get_logging_disabled(v6[13]))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v7 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            v8 = *((_DWORD *)v4 + 112);
            *(_DWORD *)addrinfo buf = 136446466;
            id v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
            v43 = 1024;
            *(_DWORD *)v44 = v8;
            _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Hit maximum timestamp count, will start dropping events",  buf,  0x12u);
          }
        }
      }
    }

    memmove((char *)v4[39] + 880, (char *)v4[39] + 896, 0x80uLL);
    *((_OWORD *)v4[39] + 63) = *a2;
    goto LABEL_27;
  }

  os_log_type_t v9 = *((unsigned __int16 *)v4 + 160);
  if (v5 <= v9 && (v9 & 0xF) == 0)
  {
    if (v5 == v9) {
      goto LABEL_17;
    }
LABEL_25:
    nw_parameters_t v11 = v4[39];
    goto LABEL_26;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (os_log_s *)(id)gLogObj;
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  v13 = *((unsigned __int16 *)v4 + 160);
  size_t v14 = *((unsigned __int16 *)v4 + 161);
  *(_DWORD *)addrinfo buf = 136446722;
  id v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
  v43 = 1024;
  *(_DWORD *)v44 = v13;
  v44[2] = 1024;
  *(_DWORD *)&v44[3] = v14;
  unint64_t v15 = (void *)_os_log_send_and_compose_impl();

  free(v15);
  v5 = *((unsigned __int16 *)v4 + 161);
  os_log_type_t v9 = *((unsigned __int16 *)v4 + 160);
  if (v5 != v9) {
    goto LABEL_25;
  }
LABEL_17:
  if (v9 <= 0x30) {
    v10 = v9 + 16;
  }
  else {
    v10 = 64;
  }
  *((_WORD *)v4 + 160) = v10;
  if (!v10)
  {
    __nwlog_obj();
    v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446210;
    id v42 = "_strict_reallocf";
    os_log_type_t v33 = (void *)_os_log_send_and_compose_impl();

    free(v33);
  }

  nw_parameters_t v11 = reallocf(v4[39], 16LL * v10);
  if (v11)
  {
LABEL_22:
    v4[39] = v11;
    v5 = *((unsigned __int16 *)v4 + 161);
LABEL_26:
    v11[v5] = *a2;
    ++*((_WORD *)v4 + 161);
LABEL_27:

    return;
  }

  __nwlog_obj();
  os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446466;
  id v42 = "_strict_reallocf";
  v43 = 2048;
  *(void *)v44 = 16LL * v10;
  id v35 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v35))
  {
    free(v35);
    nw_parameters_t v11 = 0LL;
    goto LABEL_22;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v48 = (id)gLogObj;
  if (mode > 5) {
    id v49 = "unknown-mode";
  }
  else {
    id v49 = off_189BBBBC0[mode];
  }
  *(_DWORD *)addrinfo buf = 136446722;
  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update_path_resolver_locked";
  *(_WORD *)&buf[12] = 2082;
  *(void *)&buf[14] = v49;
  *(_WORD *)&buf[22] = 2082;
  uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t))"resolver";
  os_log_type_t v50 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v67 = 0;
  if (!__nwlog_fault((const char *)v50, &type, &v67))
  {
LABEL_76:
    if (!v50) {
      goto LABEL_78;
    }
LABEL_77:
    free(v50);
    goto LABEL_78;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v51 = (os_log_s *)(id)gLogObj;
    os_log_type_t v52 = type;
    if (os_log_type_enabled(v51, type))
    {
      if (mode > 5) {
        id v53 = "unknown-mode";
      }
      else {
        id v53 = off_189BBBBC0[mode];
      }
      *(_DWORD *)addrinfo buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update_path_resolver_locked";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v53;
      *(_WORD *)&buf[22] = 2082;
      uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t))"resolver";
      _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

  if (v10) {
    free(v10);
  }
  v7 = 0LL;
LABEL_8:

  return v7;
}

    os_log_type_t v9 = 0LL;
    goto LABEL_58;
  }

  if ((v9 & 0x1000000000000000LL) == 0) {
    goto LABEL_73;
  }
  for (i = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32); ; i = (unsigned __int8 *)sub_18264F228())
  {
    BOOL v18 = (uint64_t)sub_181C2FBCC(i, v15, 10LL);
    os_log_type_t v9 = v19 & 1;
LABEL_58:
    while (1)
    {
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0) {
        break;
      }
LABEL_70:
      __break(1u);
LABEL_71:
      BOOL v18 = sub_181C2F000(v9, v3, 10LL, (uint64_t (*)(void *, uint64_t, uint64_t))sub_181C2FBCC);
      os_log_type_t v9 = v38;
    }

    __break(1u);
LABEL_73:
    ;
  }

  v30 = sub_181C6F894(0LL, 0xE000000000000000LL);
  if ((v30 & 1) == 0)
  {
    v39 = 0LL;
    os_log_type_t v40 = 0xE000000000000000LL;
    BOOL v41 = sub_181C6FED0;
    id v42 = 0LL;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1D0);
    sub_181C2EF74();
    v30 = sub_18264EB14();
  }

  MEMORY[0x1895F8858](v30);
  swift_retain();
  swift_bridgeObjectRetain();
  id v31 = sub_18264EB38();
  os_log_type_t v33 = v32;
  BOOL result = swift_bridgeObjectRelease();
  os_log_type_t v34 = v52;
  *os_log_type_t v52 = 0x7375746174733ALL;
  v34[1] = 0xE700000000000000LL;
  v34[2] = 0x7375746174733ALL;
  v34[3] = 0xE700000000000000LL;
  *((_BYTE *)v34 + 32) = 0;
  v34[5] = v31;
  v34[6] = v33;
  v34[7] = 0LL;
  v34[8] = 0xE000000000000000LL;
  v34[9] = v10;
  return result;
}

      if (v25) {
        free(v25);
      }
      return 0LL;
    }

    if (!v33)
    {
      v26 = (os_log_s *)__nwlog_obj();
      v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_shoes_add_input_handler";
        BOOL v28 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_56;
      }

      goto LABEL_57;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v26 = (os_log_s *)__nwlog_obj();
    v27 = type;
    v30 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v36 = "nw_protocol_shoes_add_input_handler";
        BOOL v28 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_56;
      }

      goto LABEL_57;
    }

    if (v30)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v36 = "nw_protocol_shoes_add_input_handler";
      v37 = 2082;
      os_log_type_t v38 = backtrace_string;
      id v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_46:
      _os_log_impl(&dword_181A5C000, v26, v27, v31, buf, 0x16u);
    }

    if (v13) {
      free(v13);
    }
    goto LABEL_8;
  }

  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  v37 = "networkd_privileged_set_constrained";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v34 = 0;
  if (__nwlog_fault(v9, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      nw_parameters_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "networkd_privileged_set_constrained";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null ifname", buf, 0xCu);
      }
    }

    else if (v34)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v21 = type;
      v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v37 = "networkd_privileged_set_constrained";
          os_log_type_t v38 = 2082;
          v39 = v20;
          _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null ifname, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
        goto LABEL_52;
      }

      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "networkd_privileged_set_constrained";
        _os_log_impl(&dword_181A5C000, v10, v21, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "networkd_privileged_set_constrained";
        _os_log_impl( &dword_181A5C000,  v10,  v29,  "%{public}s called with null ifname, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v13) {
      free(v13);
    }
    goto LABEL_8;
  }

  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  v37 = "networkd_privileged_set_ultra_constrained";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v34 = 0;
  if (__nwlog_fault(v9, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      nw_parameters_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "networkd_privileged_set_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null ifname", buf, 0xCu);
      }
    }

    else if (v34)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v21 = type;
      v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v37 = "networkd_privileged_set_ultra_constrained";
          os_log_type_t v38 = 2082;
          v39 = v20;
          _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null ifname, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
        goto LABEL_52;
      }

      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "networkd_privileged_set_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v10, v21, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "networkd_privileged_set_ultra_constrained";
        _os_log_impl( &dword_181A5C000,  v10,  v29,  "%{public}s called with null ifname, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v13) {
      free(v13);
    }
    goto LABEL_8;
  }

  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  v37 = "networkd_privileged_set_expensive";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v34 = 0;
  if (__nwlog_fault(v9, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      nw_parameters_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "networkd_privileged_set_expensive";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null ifname", buf, 0xCu);
      }
    }

    else if (v34)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v21 = type;
      v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v37 = "networkd_privileged_set_expensive";
          os_log_type_t v38 = 2082;
          v39 = v20;
          _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null ifname, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
        goto LABEL_52;
      }

      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "networkd_privileged_set_expensive";
        _os_log_impl(&dword_181A5C000, v10, v21, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v37 = "networkd_privileged_set_expensive";
        _os_log_impl( &dword_181A5C000,  v10,  v29,  "%{public}s called with null ifname, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v15) {
      free(v15);
    }
    goto LABEL_8;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v41 = "networkd_privileged_set_throughput_estimates";
  nw_parameters_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v38 = 0;
  if (__nwlog_fault(v11, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "networkd_privileged_set_throughput_estimates";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null ifname", buf, 0xCu);
      }
    }

    else if (v38)
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      BOOL v24 = os_log_type_enabled(v12, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          BOOL v41 = "networkd_privileged_set_throughput_estimates";
          id v42 = 2082;
          v43 = v22;
          _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null ifname, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v22);
        goto LABEL_52;
      }

      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "networkd_privileged_set_throughput_estimates";
        _os_log_impl(&dword_181A5C000, v12, v23, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v31 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "networkd_privileged_set_throughput_estimates";
        _os_log_impl( &dword_181A5C000,  v12,  v31,  "%{public}s called with null ifname, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v15) {
      free(v15);
    }
    goto LABEL_8;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v41 = "networkd_privileged_set_radio_type";
  nw_parameters_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v38 = 0;
  if (__nwlog_fault(v11, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "networkd_privileged_set_radio_type";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null ifname", buf, 0xCu);
      }
    }

    else if (v38)
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      BOOL v24 = os_log_type_enabled(v12, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          BOOL v41 = "networkd_privileged_set_radio_type";
          id v42 = 2082;
          v43 = v22;
          _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null ifname, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v22);
        goto LABEL_52;
      }

      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "networkd_privileged_set_radio_type";
        _os_log_impl(&dword_181A5C000, v12, v23, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v31 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "networkd_privileged_set_radio_type";
        _os_log_impl( &dword_181A5C000,  v12,  v31,  "%{public}s called with null ifname, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    free(v33);
    if (!v19) {
      goto LABEL_7;
    }
    goto LABEL_90;
  }

  nw_context_assert_queue(*((void **)v9 + 46));
  frame = nw_framer_protocol_create_frame( v9,  input_length,  (uint64_t)nw_framer_protocol_inbound_data_finalizer,  (uint64_t)v9 + 464,  0);
  v16 = (void *)nw_frame_unclaimed_bytes(frame, 0LL);
  nw_frame_set_metadata(frame, (nw_protocol_metadata *)v12, 1, v5);
  memcpy(v16, input_buffer, input_length);
  *(void *)(frame + 32) = 0LL;
  os_log_type_t v17 = (uint64_t *)*((void *)v9 + 67);
  *(void *)(frame + 40) = v17;
  *os_log_type_t v17 = frame;
  *((void *)v9 + 67) = frame + 32;
  ++*((_DWORD *)v9 + 136);
  nw_framer_signal_input_available((NWConcrete_nw_framer *)v9);

LABEL_7:
}

          goto LABEL_58;
        }

        if (!v26)
        {
          __nwlog_obj();
          nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v25 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_57;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v21 = type;
        v22 = os_log_type_enabled(v11, type);
        if (!backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_57;
        }

        if (v22)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
          v30 = 2082;
          id v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_36;
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
      v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (__nwlog_fault(v10, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
          }

          goto LABEL_57;
        }

        if (!v26)
        {
          __nwlog_obj();
          nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v24 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl( &dword_181A5C000,  v11,  v24,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_57;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v11, type);
        if (!backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }

          goto LABEL_57;
        }

        if (v20)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
          v30 = 2082;
          id v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

          goto LABEL_58;
        }

        if (!v27)
        {
          __nwlog_obj();
          v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v26 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl( &dword_181A5C000,  v12,  v26,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_57;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v22 = type;
        BOOL v23 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_57;
        }

        if (v23)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v30 = "nw_framer_protocol_waiting_for_output";
          id v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_36;
      }
    }

    else
    {
      __nwlog_obj();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      v30 = "nw_framer_protocol_waiting_for_output";
      nw_parameters_t v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (__nwlog_fault(v11, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v13 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null framer", buf, 0xCu);
          }

          goto LABEL_57;
        }

        if (!v27)
        {
          __nwlog_obj();
          v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v25 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl( &dword_181A5C000,  v12,  v25,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_57;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v20 = type;
        id v21 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }

          goto LABEL_57;
        }

        if (v21)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v30 = "nw_framer_protocol_waiting_for_output";
          id v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

  if (v13) {
    free(v13);
  }
  v10 = 0LL;
LABEL_8:

  return v10;
}

LABEL_58:
      if (v18) {
        free(v18);
      }
      goto LABEL_60;
    }

    if (!v32)
    {
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v31 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl( &dword_181A5C000,  v19,  v31,  "%{public}s called with null connection_remote_endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v28 = type;
    os_log_type_t v29 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl( &dword_181A5C000,  v19,  v28,  "%{public}s called with null connection_remote_endpoint, no backtrace",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    if (v29)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
      os_log_type_t v36 = 2082;
      *(void *)v37 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v19,  v28,  "%{public}s called with null connection_remote_endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
    goto LABEL_58;
  }

  if (!v4)
  {
    __nwlog_obj();
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    id v42 = "nw_protocol_instance_access_globals";
    v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null access_block", buf, 0xCu);
      }

      goto LABEL_90;
    }

    if (!v39)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v35 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl( &dword_181A5C000,  v13,  v35,  "%{public}s called with null access_block, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_181A5C000, v13, v26, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }

      goto LABEL_90;
    }

    if (v27)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      id v42 = "nw_protocol_instance_access_globals";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v26,  "%{public}s called with null access_block, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_57;
  }

  id v6 = (void *)v3[1];
  if (!v6)
  {
    __nwlog_obj();
    os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    id v42 = "nw_protocol_instance_access_globals";
    v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null instance->parent_definition", buf, 0xCu);
      }

      goto LABEL_90;
    }

    if (!v39)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl( &dword_181A5C000,  v13,  v36,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v28 = type;
    os_log_type_t v29 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl( &dword_181A5C000,  v13,  v28,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    if (v29)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      id v42 = "nw_protocol_instance_access_globals";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v28,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_57;
  }

  if (!v3[6])
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    id v42 = "nw_protocol_instance_access_globals";
    v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_181A5C000, v13, v20, "%{public}s called with null instance->parameters", buf, 0xCu);
      }

      goto LABEL_90;
    }

    if (!v39)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl( &dword_181A5C000,  v13,  v37,  "%{public}s called with null instance->parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v30 = type;
    id v31 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl( &dword_181A5C000,  v13,  v30,  "%{public}s called with null instance->parameters, no backtrace",  buf,  0xCu);
      }

      goto LABEL_90;
    }

    if (v31)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      id v42 = "nw_protocol_instance_access_globals";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v30,  "%{public}s called with null instance->parameters, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_57;
  }

  v7 = (void *)v3[15];
  if (v7)
  {
    globals_for_protocol = nw_context_get_globals_for_protocol(v7, v6);
    os_log_type_t v9 = v5[2](v5, globals_for_protocol);
    goto LABEL_7;
  }

  __nwlog_obj();
  id v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  id v42 = "nw_protocol_instance_access_globals";
  v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault(v12, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_181A5C000, v13, v22, "%{public}s called with null instance->context", buf, 0xCu);
      }

    free(backtrace_string);
    goto LABEL_76;
  }

  v7 = *(void **)&v5->protocol_outbound_data_limit;
  if (!v7)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    id v42 = "nw_protocol_create_inbound_data";
    v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_create_inbound_data";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null instance->context", buf, 0xCu);
      }

      goto LABEL_75;
    }

    if (!v39)
    {
      __nwlog_obj();
      size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_create_inbound_data";
        _os_log_impl( &dword_181A5C000,  v14,  v37,  "%{public}s called with null instance->context, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v21 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v42 = "nw_protocol_create_inbound_data";
        _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null instance->context, no backtrace",  buf,  0xCu);
      }

      goto LABEL_75;
    }

    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      id v42 = "nw_protocol_create_inbound_data";
      v43 = 2082;
      v44 = (size_t)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null instance->context, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_57;
  }

  if (!a2)
  {
LABEL_30:
    os_log_type_t v9 = 0LL;
    v10 = 0LL;
    goto LABEL_31;
  }

  buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(v7, a2);
  if (buffer_manager_with_context)
  {
    os_log_type_t v9 = buffer_manager_with_context;
    v10 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v10)
    {
LABEL_31:
      if (v6)
      {
        data_from_pool = nw_protocol_create_data_from_pool(v5, 0);
        if (data_from_pool)
        {
          nw_frame_reset( (uint64_t)data_from_pool,  v10,  a2,  (uint64_t)nw_protocol_inbound_data_finalizer,  (uint64_t)v5);
          v27 = 0;
          goto LABEL_36;
        }
      }

      BOOL v28 = nw_frame_create( 16 * (v6 != 0LL),  v10,  a2,  (uint64_t)nw_protocol_inbound_data_finalizer,  (uint64_t)v5);
      if (v28)
      {
        data_from_pool = (void *)v28;
        v27 = 1;
        if (!v6)
        {
LABEL_40:
          if (v9)
          {
            data_from_pool[13] = v9;
          }

          else if (v10)
          {
            *((_WORD *)data_from_pool + 102) |= 1u;
          }

          if (v27) {
            v30 = data_from_pool;
          }
          data_from_pool[2] = 0LL;
          context = v5->context;
          data_from_pool[3] = context;
          *(void *)context = data_from_pool;
          v5->context = (OS_nw_context *)(data_from_pool + 2);
LABEL_47:

          return (BOOL)data_from_pool;
        }

  __break(1u);
  return result;
}

  if (v21) {
    free(v21);
  }
  return 0LL;
}

          xpc_dictionary_set_BOOL(v2, "resolve_ptr", 1);
          v26 = *((void *)v1 + 12);
          goto LABEL_58;
        }

  if (v26) {
    free(v26);
  }
  v3 = 0LL;
LABEL_40:

  return v3;
}

        free(v19);
        goto LABEL_19;
      }

      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl( &dword_181A5C000,  v20,  v32,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

        goto LABEL_58;
      }

      if (v44 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (os_log_s *)(id)gLogObj;
        v26 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v47 = "nw_endpoint_create_apple_service";
          BOOL v48 = 2082;
          id v49 = "service";
          _os_log_impl( &dword_181A5C000,  v8,  v26,  "%{public}s invalid empty string %{public}s, backtrace limit exceeded",  buf,  0x16u);
        }

        goto LABEL_57;
      }

      nw_parameters_t v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      v20 = type[0];
      id v21 = os_log_type_enabled(v8, type[0]);
      if (!v11)
      {
        if (v21)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v47 = "nw_endpoint_create_apple_service";
          BOOL v48 = 2082;
          id v49 = "service";
          _os_log_impl( &dword_181A5C000,  v8,  v20,  "%{public}s invalid empty string %{public}s, no backtrace",  buf,  0x16u);
        }

        goto LABEL_57;
      }

      if (v21)
      {
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v47 = "nw_endpoint_create_apple_service";
        BOOL v48 = 2082;
        id v49 = "service";
        os_log_type_t v50 = 2082;
        BOOL v51 = v11;
        _os_log_impl( &dword_181A5C000,  v8,  v20,  "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
      }

        goto LABEL_58;
      }

      if (v44 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (os_log_s *)(id)gLogObj;
        v26 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v47 = "nw_endpoint_create_application_service_with_alias";
          BOOL v48 = 2082;
          id v49 = "alias";
          _os_log_impl( &dword_181A5C000,  v8,  v26,  "%{public}s invalid empty string %{public}s, backtrace limit exceeded",  buf,  0x16u);
        }

        goto LABEL_57;
      }

      nw_parameters_t v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      v20 = type[0];
      id v21 = os_log_type_enabled(v8, type[0]);
      if (!v11)
      {
        if (v21)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v47 = "nw_endpoint_create_application_service_with_alias";
          BOOL v48 = 2082;
          id v49 = "alias";
          _os_log_impl( &dword_181A5C000,  v8,  v20,  "%{public}s invalid empty string %{public}s, no backtrace",  buf,  0x16u);
        }

        goto LABEL_57;
      }

      if (v21)
      {
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v47 = "nw_endpoint_create_application_service_with_alias";
        BOOL v48 = 2082;
        id v49 = "alias";
        os_log_type_t v50 = 2082;
        BOOL v51 = v11;
        _os_log_impl( &dword_181A5C000,  v8,  v20,  "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
      }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v31 = (id)gLogObj;
        if (os_log_type_enabled((os_log_t)v31, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v105 = 136446466;
          BOOL v106 = "-[ManagedNetworkSettings reloadMNS]";
          v107 = 2114;
          v108[0] = v30;
          _os_log_impl( &dword_181A5C000,  (os_log_t)v31,  OS_LOG_TYPE_ERROR,  "%{public}s MNS sysctl name %{public}@ is not allowlisted",  (uint8_t *)&v105,  0x16u);
        }

  if (v18) {
    free(v18);
  }
  v10 = 0LL;
LABEL_9:
  nw_parameters_t v11 = [objc_alloc(MEMORY[0x189601EC8]) initWithUser:v5 password:v4 persistence:v10];

  return v11;
}

    goto LABEL_58;
  }

  if (!v63)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (os_log_s *)(id)gLogObj;
    v37 = type;
    if (os_log_type_enabled(v26, type))
    {
      else {
        os_log_type_t v38 = off_189BBBBC0[v9];
      }
      *(_DWORD *)addrinfo buf = 136446722;
      v66 = "-[NWConcrete_nw_endpoint_proxy cancelWithHandler:forced:]";
      os_log_type_t v67 = 2082;
      id v68 = (void *)v38;
      v69 = 2082;
      uint64_t v70 = "proxy";
      _os_log_impl( &dword_181A5C000,  v26,  v37,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_57;
  }

  os_log_type_t v29 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v26 = (os_log_s *)(id)gLogObj;
  v30 = type;
  id v31 = os_log_type_enabled(v26, type);
  if (!v29)
  {
    if (v31)
    {
      else {
        v39 = off_189BBBBC0[v9];
      }
      *(_DWORD *)addrinfo buf = 136446722;
      v66 = "-[NWConcrete_nw_endpoint_proxy cancelWithHandler:forced:]";
      os_log_type_t v67 = 2082;
      id v68 = (void *)v39;
      v69 = 2082;
      uint64_t v70 = "proxy";
      _os_log_impl( &dword_181A5C000,  v26,  v30,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_57;
  }

  if (v31)
  {
    else {
      v32 = off_189BBBBC0[v9];
    }
    *(_DWORD *)addrinfo buf = 136446978;
    v66 = "-[NWConcrete_nw_endpoint_proxy cancelWithHandler:forced:]";
    os_log_type_t v67 = 2082;
    id v68 = (void *)v32;
    v69 = 2082;
    uint64_t v70 = "proxy";
    os_log_type_t v71 = 2082;
    v72 = v29;
    _os_log_impl( &dword_181A5C000,  v26,  v30,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v29);
  if (v25) {
    goto LABEL_59;
  }
LABEL_60:
}

    _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
    goto LABEL_58;
  }

  handle = a1->handle;
  if (handle)
  {
    if (a3 == 40)
    {
      handle[130] = 40;
      goto LABEL_26;
    }

    handle[130] = a3;
    if ((a3 + 9815) <= 7 && (v7 = 1, ((1 << (a3 + 87)) & 0x83) != 0))
    {
      v22 = 0;
    }

    else
    {
      if (a3 == 35) {
        return;
      }
      if (a3 != 60 || (*((_BYTE *)handle + 527) & 4) == 0) {
        goto LABEL_26;
      }
      v7 = 0;
      v22 = 1;
    }

    v8 = a1;
    while (1)
    {
      v8 = v8->output_handler;
      if (!v8) {
        break;
      }
      name = v8->identifier->name;
      if (!strcmp(name, "quic") || !strcmp(name, "quic-connection") || !strcmp(name, "tls"))
      {
        if (v8 != a2) {
          break;
        }
        if (v7)
        {
          if ((*((_BYTE *)handle + 527) & 4) != 0) {
            v10 = 1206;
          }
          else {
            v10 = 1106;
          }
        }

        else
        {
          v10 = a3;
          if (!v22) {
            break;
          }
        }

        nw_masque_report_error_to_proxy_agent((uint64_t)handle, v10);
        break;
      }
    }

          metadata_for_response = nw_http_create_metadata_for_response(well_known);
          os_log_type_t v57 = nw_content_context_create("response");
          nw_content_context_set_metadata_for_protocol(v57, (nw_protocol_metadata_t)metadata_for_response);
          id v58 = *(void **)(a1 + 32);
          v59 = *(nw_connection **)(v58[2] + 48LL);
          completion[0] = MEMORY[0x1895F87A8];
          completion[1] = 3221225472LL;
          completion[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_268;
          completion[3] = &unk_189BC5E68;
          os_log_type_t v123 = v58;
          nw_connection_send(v59, 0LL, v57, 1, completion);

          goto LABEL_58;
        }
      }

      os_log_type_t v52 = v48;
      id v53 = v41[2];

      if (v53 == 1)
      {
        v54 = v52;
        os_log_type_t v55 = v54[3];

        if (v55 == 60)
        {
          well_known = (os_log_s *)_nw_http_response_create_well_known(502LL);
          if (!*(_BYTE *)(*(void *)(a1 + 32) + 220LL))
          {
            os_log_type_t v45 = (void *)[v12 mutableCopy];
            [v45 appendString:@"; error=connection_timeout"];
            nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", [v45 UTF8String]);
            goto LABEL_56;
          }

          goto LABEL_57;
        }
      }
    }

    well_known = (os_log_s *)_nw_http_response_create_well_known(502LL);
    if (!*(_BYTE *)(*(void *)(a1 + 32) + 220LL))
    {
      os_log_type_t v45 = (void *)[v12 mutableCopy];
      [v45 appendString:@"; error=destination_unavailable"];
      nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", [v45 UTF8String]);
      goto LABEL_56;
    }

    goto LABEL_57;
  }

  if ((_DWORD)a2 != 1)
  {
    if ((_DWORD)a2 != 3 || *(_BYTE *)(*(void *)(a1 + 32) + 217LL)) {
      goto LABEL_62;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = "IP";
      BOOL v23 = *(unsigned __int8 *)(a1 + 48);
      BOOL v24 = *(void *)(a1 + 32);
      id v25 = *(void *)(a1 + 40);
      if (v23 == 6) {
        v22 = "TCP";
      }
      v26 = *(void *)(v24 + 16);
      if (v23 == 17) {
        v22 = "UDP";
      }
      v27 = *(void *)(v24 + 224);
      *(_DWORD *)addrinfo buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke_2";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v26;
      *(_WORD *)&buf[22] = 2080;
      v126 = (void *(*)(uint64_t, uint64_t))v22;
      *(_WORD *)v127 = 2112;
      *(void *)&v127[2] = v25;
      *(_WORD *)&v127[10] = 2112;
      *(void *)&v127[12] = v27;
      _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_INFO,  "%{public}s %{public}@ Opened %s connection to %@ (for %@)\n",  buf,  0x34u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 217LL) = 1;
    BOOL v28 = *(void *)(a1 + 32);
    if (*(void *)(v28 + 240))
    {
      if (*(_BYTE *)(v28 + 248))
      {
        os_log_type_t v29 = dispatch_data_create("hello", 5uLL, 0LL, 0LL);
        v30 = (void *)_nw_http_response_create_well_known(200LL);
        nw_http_fields_append(v30, (uint64_t)"Capsule-Protocol", (uint64_t)"?1");
        if (*(_BYTE *)(a1 + 48) == 17)
        {
          id v31 = *(void *)(a1 + 32);
          if (*(_BYTE *)(v31 + 178))
          {
            nw_http_fields_append(v30, (uint64_t)"Datagram-Flow-Id", v31 + 178);
            id v31 = *(void *)(a1 + 32);
          }

          os_log_type_t v33 = *(unsigned __int8 *)(v31 + 116);
          v32 = v31 + 116;
          if (v33) {
            nw_http_fields_append(v30, (uint64_t)"Client-Connection-Id", v32);
          }
          nw_http_fields_append(v30, (uint64_t)"Proxy-QUIC-Forwarding", (uint64_t)"?1");
        }

    free(backtrace_string);
    goto LABEL_77;
  }

  if ((handle[137] & 2) == 0)
  {
    if (gLogDatapath)
    {
      v12 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = handle[115];
        *(_DWORD *)addrinfo buf = 136446978;
        id v25 = "nw_protocol_webtransport_session_connect";
        v26 = 2082;
        v27 = (char *)(handle + 116);
        BOOL v28 = 2080;
        os_log_type_t v29 = " ";
        v30 = 1024;
        id v31 = v13;
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
  }

  if ((handle[137] & 0x10) == 0)
  {
    output_handler = a1->output_handler;
    if ((handle[137] & 4) == 0)
    {
      if (*((void *)handle + 50))
      {
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            if (callbacks->add_listen_handler)
            {
              *((void *)handle + 51) = output_handler;
              else {
                id v6 = 0;
              }
              *((_BYTE *)handle + 548) = handle[137] & 0xFB | v6;
              output_handler = a1->output_handler;
            }
          }
        }
      }
    }

    nw_protocol_connect((uint64_t)output_handler, (uint64_t)a1);
    *((_BYTE *)handle + 548) |= 0x10u;
    return 1LL;
  }

  BOOL result = 1LL;
  if ((handle[137] & 2) == 0 && gLogDatapath)
  {
    v20 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      id v21 = handle[115];
      *(_DWORD *)addrinfo buf = 136446978;
      id v25 = "nw_protocol_webtransport_session_connect";
      v26 = 2082;
      v27 = (char *)(handle + 116);
      BOOL v28 = 2080;
      os_log_type_t v29 = " ";
      v30 = 1024;
      id v31 = v21;
      _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Skipping received connect callback, already sent to output_handler",  buf,  0x26u);
    }

    return 1LL;
  }

  return result;
}

  free(backtrace_string);
  if (v11) {
LABEL_87:
  }
    free(v11);
}

  *(_DWORD *)(v5 + 68) = self->_dataMode;
  *(_WORD *)(v5 + 196) |= 2u;
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_6:
    if ((has & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_59;
  }

  if (v11) {
    free(v11);
  }
LABEL_5:
  if (gLogDatapath)
  {
    BOOL v24 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      id v25 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)addrinfo buf = 136446978;
      BOOL v41 = "nw_http2_transport_stream_connected";
      id v42 = 2082;
      v43 = (const char *)(a1 + 205);
      v44 = 1024;
      LODWORD(v45[0]) = v25;
      WORD2(v45[0]) = 2048;
      *(void *)((char *)v45 + 6) = a3;
      _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s stream %d (protocol %p) connected",  buf,  0x26u);
    }
  }

  if (*(void *)a2)
  {
    if (gLogDatapath)
    {
      os_log_type_t v29 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        v30 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)addrinfo buf = 136446722;
        BOOL v41 = "nw_http2_transport_stream_connected";
        id v42 = 2082;
        v43 = (const char *)(a1 + 205);
        v44 = 1024;
        LODWORD(v45[0]) = v30;
        _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s calling input_available with input_frames pending for stream %d",  buf,  0x1Cu);
      }
    }

    v8 = *(void *)(a3 + 24);
    if (v8)
    {
      os_log_type_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
      if (v9)
      {
        v9(a3, a1);
        goto LABEL_11;
      }
    }

    __nwlog_obj();
    v16 = *(const char **)(a3 + 16);
    if (!v16) {
      v16 = "invalid";
    }
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v41 = "nw_http2_transport_stream_connected";
    id v42 = 2082;
    v43 = v16;
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = (os_log_s *)__nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_68;
      }
      v20 = *(const char **)(a3 + 16);
      if (!v20) {
        v20 = "invalid";
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v41 = "nw_http2_transport_stream_connected";
      id v42 = 2082;
      v43 = v20;
      id v21 = "%{public}s protocol %{public}s has invalid input_available callback";
    }

    else if (v38)
    {
      id v31 = (char *)__nw_create_backtrace_string();
      BOOL v18 = (os_log_s *)__nwlog_obj();
      v19 = type;
      v32 = os_log_type_enabled(v18, type);
      if (v31)
      {
        if (v32)
        {
          os_log_type_t v33 = *(const char **)(a3 + 16);
          if (!v33) {
            os_log_type_t v33 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          BOOL v41 = "nw_http2_transport_stream_connected";
          id v42 = 2082;
          v43 = v33;
          v44 = 2082;
          v45[0] = v31;
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v31);
        goto LABEL_68;
      }

      if (!v32)
      {
LABEL_68:
        if (v17) {
          free(v17);
        }
        goto LABEL_11;
      }

      v37 = *(const char **)(a3 + 16);
      if (!v37) {
        v37 = "invalid";
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v41 = "nw_http2_transport_stream_connected";
      id v42 = 2082;
      v43 = v37;
      id v21 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
    }

    else
    {
      BOOL v18 = (os_log_s *)__nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_68;
      }
      os_log_type_t v36 = *(const char **)(a3 + 16);
      if (!v36) {
        os_log_type_t v36 = "invalid";
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v41 = "nw_http2_transport_stream_connected";
      id v42 = 2082;
      v43 = v36;
      id v21 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v18, v19, v21, buf, 0x16u);
    goto LABEL_68;
  }

        goto LABEL_58;
      }

      if (!v31)
      {
        __nwlog_obj();
        v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_57;
      }

      BOOL v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      BOOL v28 = os_log_type_enabled(v20, type);
      if (!v24)
      {
        if (v28)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl( &dword_181A5C000,  v20,  v27,  "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url), no backtrace",  buf,  0xCu);
        }

        goto LABEL_57;
      }

      if (v28)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v34 = "nw_proxy_config_create_pac_url";
        id v35 = 2082;
        os_log_type_t v36 = v24;
        _os_log_impl( &dword_181A5C000,  v20,  v27,  "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_45;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v34 = "nw_proxy_config_create_pac_url";
    v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v31 = 0;
    if (__nwlog_fault(v19, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null pac_url", buf, 0xCu);
        }

        goto LABEL_57;
      }

      if (!v31)
      {
        __nwlog_obj();
        v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s called with null pac_url, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_57;
      }

      BOOL v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v25 = type;
      v26 = os_log_type_enabled(v20, type);
      if (!v24)
      {
        if (v26)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null pac_url, no backtrace", buf, 0xCu);
        }

        goto LABEL_57;
      }

      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v34 = "nw_proxy_config_create_pac_url";
        id v35 = 2082;
        os_log_type_t v36 = v24;
        _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null pac_url, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_58;
      }

      if (!v36)
      {
        __nwlog_obj();
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v35 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_57;
      }

      os_log_type_t v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v32 = type;
      os_log_type_t v33 = os_log_type_enabled(v25, type);
      if (!v29)
      {
        if (v33)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_181A5C000, v25, v32, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }

        goto LABEL_57;
      }

      if (v33)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v39 = "nw_proxy_config_create_with_stack_internal";
        os_log_type_t v40 = 2082;
        BOOL v41 = v29;
        _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_45;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v39 = "nw_proxy_config_create_with_stack_internal";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v36 = 0;
    if (__nwlog_fault(v24, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null proxy_endpoint", buf, 0xCu);
        }

        goto LABEL_57;
      }

      if (!v36)
      {
        __nwlog_obj();
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl( &dword_181A5C000,  v25,  v34,  "%{public}s called with null proxy_endpoint, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_57;
      }

      os_log_type_t v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      id v31 = os_log_type_enabled(v25, type);
      if (!v29)
      {
        if (v31)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl( &dword_181A5C000,  v25,  v30,  "%{public}s called with null proxy_endpoint, no backtrace",  buf,  0xCu);
        }

        goto LABEL_57;
      }

      if (v31)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v39 = "nw_proxy_config_create_with_stack_internal";
        os_log_type_t v40 = 2082;
        BOOL v41 = v29;
        _os_log_impl( &dword_181A5C000,  v25,  v30,  "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

      free(backtrace_string);
    }

    goto LABEL_58;
  }

  nw_parameters_t v11 = v4 + 5LL;
  if (v10 - v9 >= v11)
  {
    *(_BYTE *)os_log_type_t v9 = 4;
    *(_DWORD *)(v9 + 1) = v4;
    if ((_DWORD)v4) {
      memcpy((void *)(v9 + 5), v5, v4);
    }
    id v25 = v9 + v11;
    goto LABEL_62;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  *(_DWORD *)addrinfo buf = 136447490;
  os_log_type_t v95 = "nw_necp_append_tlv";
  v96 = 2048;
  os_log_type_t v97 = v9;
  v98 = 2048;
  os_log_type_t v99 = v4 + 5LL;
  BOOL v100 = 2048;
  *(void *)os_log_type_t v101 = v10;
  *(_WORD *)&v101[8] = 1024;
  *(_DWORD *)BOOL v102 = 4;
  *(_WORD *)&v102[4] = 1024;
  *(_DWORD *)&v102[6] = v4;
  v13 = (const char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v90 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v13, type, &v90))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v14 = (os_log_s *)(id)gLogObj;
      unint64_t v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136447490;
        os_log_type_t v95 = "nw_necp_append_tlv";
        v96 = 2048;
        os_log_type_t v97 = v9;
        v98 = 2048;
        os_log_type_t v99 = v4 + 5LL;
        BOOL v100 = 2048;
        *(void *)os_log_type_t v101 = v10;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)BOOL v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v4;
        _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
      }
    }

    else if (v90)
    {
      os_log_type_t v29 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v14 = (os_log_s *)(id)gLogObj;
      v30 = type[0];
      id v31 = os_log_type_enabled(v14, type[0]);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)addrinfo buf = 136447746;
          os_log_type_t v95 = "nw_necp_append_tlv";
          v96 = 2048;
          os_log_type_t v97 = v9;
          v98 = 2048;
          os_log_type_t v99 = v4 + 5LL;
          BOOL v100 = 2048;
          *(void *)os_log_type_t v101 = v10;
          *(_WORD *)&v101[8] = 1024;
          *(_DWORD *)BOOL v102 = 4;
          *(_WORD *)&v102[4] = 1024;
          *(_DWORD *)&v102[6] = v4;
          os_log_type_t v103 = 2082;
          BOOL v104 = v29;
          _os_log_impl( &dword_181A5C000,  v14,  v30,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
        }

        free(v29);
        if (!v13) {
          goto LABEL_61;
        }
        goto LABEL_59;
      }

      if (v31)
      {
        *(_DWORD *)addrinfo buf = 136447490;
        os_log_type_t v95 = "nw_necp_append_tlv";
        v96 = 2048;
        os_log_type_t v97 = v9;
        v98 = 2048;
        os_log_type_t v99 = v4 + 5LL;
        BOOL v100 = 2048;
        *(void *)os_log_type_t v101 = v10;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)BOOL v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v4;
        _os_log_impl( &dword_181A5C000,  v14,  v30,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v14 = (os_log_s *)(id)gLogObj;
      os_log_type_t v33 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136447490;
        os_log_type_t v95 = "nw_necp_append_tlv";
        v96 = 2048;
        os_log_type_t v97 = v9;
        v98 = 2048;
        os_log_type_t v99 = v4 + 5LL;
        BOOL v100 = 2048;
        *(void *)os_log_type_t v101 = v10;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)BOOL v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v4;
        _os_log_impl( &dword_181A5C000,  v14,  v33,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
      }
    }

    goto LABEL_57;
  }

      if (v29) {
        free(v29);
      }
      *(_DWORD *)(v3 + 368) = 0;
      size_t v4 = MEMORY[0x1895F87A8];
      size_t v14 = v132;
      goto LABEL_60;
    }

    free(v20);
    if (!v10) {
      return;
    }
LABEL_77:
    free(v10);
    return;
  }

  if ((*(_BYTE *)(v5 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      size_t v14 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v15 = *(void *)(v5 + 488);
        v16 = *(_DWORD *)(*(void *)(v5 + 480) + 372LL);
        os_log_type_t v17 = *(_DWORD *)(v5 + 860);
        if (v15) {
          LODWORD(v15) = *(_DWORD *)(v15 + 424);
        }
        *(_DWORD *)addrinfo buf = 136448258;
        BOOL v28 = "nw_http1_connection_inbound_frame_finalizer";
        os_log_type_t v29 = 2082;
        v30 = (char *)(v5 + 74);
        id v31 = 2080;
        v32 = " ";
        os_log_type_t v33 = 1024;
        os_log_type_t v34 = v16;
        id v35 = 1024;
        os_log_type_t v36 = v17;
        v37 = 1024;
        os_log_type_t v38 = v15;
        v39 = 2048;
        os_log_type_t v40 = a1;
        BOOL v41 = 1024;
        id v42 = a2;
        v43 = 2048;
        v44 = a3;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing input frame %p (success %u, context %p)",  buf,  0x4Cu);
      }
    }
  }

  v7 = *((void *)a1 + 2);
  v8 = (void *)*((void *)a1 + 3);
  if (v7)
  {
    *(void *)(v7 + 24) = v8;
    v8 = (void *)*((void *)a1 + 3);
  }

  else
  {
    *(void *)(v5 + 672) = v8;
  }

  os_log_s *v8 = v7;
  *((void *)a1 + 2) = 0LL;
  *((void *)a1 + 3) = 0LL;
  *((void *)a1 + 10) = 0LL;
  *((void *)a1 + 11) = 0LL;
  if (a2)
  {
    nw_frame_cache_return_frame(v5 + 696, (uint64_t)a1);
  }

  else
  {
    if ((*((_WORD *)a1 + 102) & 0x100) == 0
      || !g_channel_check_validity
      || g_channel_check_validity(a1, 0LL))
    {
      os_log_type_t v9 = (void *)*((void *)a1 + 14);
      if (v9) {
        free(v9);
      }
    }

    nw_frame_reset((uint64_t)a1, 0LL, 0, 0LL, 0LL);
    os_release(a1);
  }

            if (!v7)
            {
              id v31 = 0LL;
LABEL_86:
              CFRelease(v6);
              CFRelease(v4);
              return v31;
            }

            id v31 = _CFXPCCreateXPCObjectFromCFObject();
            if (!v31)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v32 = (id)gLogObj;
              *(_DWORD *)addrinfo buf = 136446210;
              BOOL v51 = "nw_utilities_copy_local_entitlement_value";
              os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              os_log_type_t v47 = 0;
              if (__nwlog_fault(v33, &type, &v47))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v34 = (os_log_s *)(id)gLogObj;
                  id v35 = type;
                  if (os_log_type_enabled(v34, type))
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    BOOL v51 = "nw_utilities_copy_local_entitlement_value";
                    _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed",  buf,  0xCu);
                  }
                }

                else if (v47)
                {
                  os_log_type_t v36 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v37 = type;
                  os_log_type_t v38 = os_log_type_enabled(v34, type);
                  if (v36)
                  {
                    if (v38)
                    {
                      *(_DWORD *)addrinfo buf = 136446466;
                      BOOL v51 = "nw_utilities_copy_local_entitlement_value";
                      os_log_type_t v52 = 2082;
                      id v53 = (CFErrorRef)v36;
                      _os_log_impl( &dword_181A5C000,  v34,  v37,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(v36);
                    if (!v33) {
                      goto LABEL_85;
                    }
                    goto LABEL_84;
                  }

                  if (v38)
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    BOOL v51 = "nw_utilities_copy_local_entitlement_value";
                    _os_log_impl( &dword_181A5C000,  v34,  v37,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace",  buf,  0xCu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v39 = type;
                  if (os_log_type_enabled(v34, type))
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    BOOL v51 = "nw_utilities_copy_local_entitlement_value";
                    _os_log_impl( &dword_181A5C000,  v34,  v39,  "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded",  buf,  0xCu);
                  }
                }
              }

              if (v33) {
LABEL_84:
              }
                free(v33);
            }

    goto LABEL_58;
  }

  if ((v3[140] & 4) != 0)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    id v31 = "nw_activity_set_parent_activity";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v31 = "nw_activity_set_parent_activity";
        _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    if (!v28)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v31 = "nw_activity_set_parent_activity";
        _os_log_impl( &dword_181A5C000,  v11,  v26,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v31 = "nw_activity_set_parent_activity";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, no backtrace",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      id v31 = "nw_activity_set_parent_activity";
      v32 = 2082;
      os_log_type_t v33 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_38;
  }

  if ((v3[140] & 8) != 0)
  {
    __nwlog_obj();
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    id v31 = "nw_activity_set_parent_activity";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v31 = "nw_activity_set_parent_activity";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    if (!v28)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v31 = "nw_activity_set_parent_activity";
        _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v31 = "nw_activity_set_parent_activity";
        _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, no backtrace",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      id v31 = "nw_activity_set_parent_activity";
      v32 = 2082;
      os_log_type_t v33 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v29);
    if (!v19) {
      goto LABEL_22;
    }
    goto LABEL_88;
  }

  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  os_log_type_t v9 = (os_log_s *)(id)gactivityLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)addrinfo buf = 138543362;
    BOOL v65 = v5;
    _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_DEBUG, "%{public}@ retrieving metrics", buf, 0xCu);
  }

  v10 = qos_class_self();
  if ((v5[140] & 2) != 0)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    unint64_t v15 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)addrinfo buf = 138543362;
      BOOL v65 = v5;
      _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_INFO, "%{public}@ speculatively retrieving metrics", buf, 0xCu);
    }

    goto LABEL_21;
  }

  if ((v5[140] & 4) != 0)
  {
    if ((v5[140] & 8) == 0)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v65 = "nw_activity_retrieve_metrics";
      v66 = 2082;
      os_log_type_t v67 = "Cannot retrieve metrics before completion";
      v12 = (char *)_os_log_send_and_compose_impl();

      v63 = OS_LOG_TYPE_ERROR;
      objc_super v62 = 0;
      if (__nwlog_fault(v12, &v63, &v62))
      {
        if (v63 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          size_t v14 = v63;
          if (os_log_type_enabled(v13, v63))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v65 = "nw_activity_retrieve_metrics";
            v66 = 2082;
            os_log_type_t v67 = "Cannot retrieve metrics before completion";
            _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
          }
        }

        else if (v62)
        {
          BOOL v41 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v42 = v63;
          v43 = os_log_type_enabled(v13, v63);
          if (v41)
          {
            if (v43)
            {
              *(_DWORD *)addrinfo buf = 136446722;
              BOOL v65 = "nw_activity_retrieve_metrics";
              v66 = 2082;
              os_log_type_t v67 = "Cannot retrieve metrics before completion";
              id v68 = 2082;
              v69 = v41;
              _os_log_impl( &dword_181A5C000,  v13,  v42,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v41);
            goto LABEL_104;
          }

          if (v43)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v65 = "nw_activity_retrieve_metrics";
            v66 = 2082;
            os_log_type_t v67 = "Cannot retrieve metrics before completion";
            _os_log_impl( &dword_181A5C000,  v13,  v42,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
          }
        }

        else
        {
          __nwlog_obj();
          v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v48 = v63;
          if (os_log_type_enabled(v13, v63))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v65 = "nw_activity_retrieve_metrics";
            v66 = 2082;
            os_log_type_t v67 = "Cannot retrieve metrics before completion";
            _os_log_impl( &dword_181A5C000,  v13,  v48,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }
        }
      }

  if (v23) {
    free(v23);
  }
  os_log_type_t v9 = 0LL;
LABEL_20:

  return v9;
}

    if (v28) {
      free(v28);
    }

    goto LABEL_60;
  }

  os_log_type_t v52 = 0LL;
  memset(buffer, 0, sizeof(buffer));
  nw_parameters_t v11 = proc_pidinfo(a1, 17, 1uLL, buffer, 56);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (os_log_s *)(id)gLogObj;
  v13 = v12;
  if (v11 != 56)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v20 = *((_DWORD *)v8 + 7);
      *(_DWORD *)addrinfo buf = 136446722;
      v44 = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
      os_log_type_t v45 = 2114;
      v46 = v8;
      os_log_type_t v47 = 1024;
      BOOL v48 = v20;
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] failed to get upid for pid %d",  buf,  0x1Cu);
    }

    goto LABEL_20;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)addrinfo buf = 136446978;
    v44 = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
    os_log_type_t v45 = 2114;
    v46 = v8;
    os_log_type_t v47 = 1024;
    BOOL v48 = a1;
    id v49 = 2048;
    os_log_type_t v50 = *(__int128 **)&buffer[1];
    _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] pid %u upid %llu", buf, 0x26u);
  }

  v13 = nw_parameters_create();
  nw_parameters_set_pid(v13, *((_DWORD *)v8 + 7));
  nw_parameters_set_proc_uuid(v13, buffer);
  nw_parameters_set_e_proc_uuid(v13, buffer);
  nw_parameters_set_delegated_unique_pid(v13, *(uint64_t *)&buffer[1]);
  nw_parameters_set_include_peer_to_peer(v13, 1);
  nw_parameters_set_context(v13, v8[8]);
  evaluator_for_interpose = nw_path_create_evaluator_for_interpose(v13);
  unint64_t v15 = v8[5];
  v8[5] = evaluator_for_interpose;

  v16 = v8[5];
  if (!v16)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446722;
      v44 = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
      os_log_type_t v45 = 2114;
      v46 = v8;
      os_log_type_t v47 = 1024;
      BOOL v48 = a1;
      _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] failed to create evaluator for pid %d",  buf,  0x1Cu);
    }

LABEL_20:
    v19 = 0LL;
    goto LABEL_21;
  }

  os_log_type_t v17 = v16;
  id v42 = v17[5];

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v18 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)addrinfo buf = 136446978;
    v44 = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
    os_log_type_t v45 = 2114;
    v46 = v8;
    os_log_type_t v47 = 1042;
    BOOL v48 = 16;
    id v49 = 2098;
    os_log_type_t v50 = &v42;
    _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}@] registered with client %{public,uuid_t}.16P",  buf,  0x26u);
  }

  v19 = v8;
LABEL_21:

  if (v19)
  {
    v22 = v19;
    goto LABEL_64;
  }

    if (v18) {
      free(v18);
    }
    if (!v34) {
      return 0LL;
    }
    v22 = v34;
    goto LABEL_34;
  }

  *(void *)&v34[__size - 8] ^= bswap64(a4);
  BOOL v41 = v85 + v84;
  if (!(v85 + v84))
  {
    os_log_type_t v79 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
    addrinfo buf = 136446210;
    os_log_type_t v105 = "strict_calloc";
    BOOL v80 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v80);
    if (result) {
      goto LABEL_230;
    }
    free(v80);
  }

  BOOL v28 = calloc(1uLL, v41);
  if (v28)
  {
LABEL_63:
    ccaes_gcm_encrypt_mode();
    id v42 = ccgcm_one_shot();
    if (v18) {
      free(v18);
    }
    free(v34);
    if (!v42)
    {
      *a12 = v41;
      return (BOOL)v28;
    }

    v43 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      addrinfo buf = 136446466;
      os_log_type_t v105 = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v106 = 1024;
      LODWORD(v107) = v42;
      _os_log_impl(&dword_181A5C000, v43, OS_LOG_TYPE_ERROR, "%{public}s Encrypt error: %u", (uint8_t *)&buf, 0x12u);
    }

    if (!v28) {
      return (BOOL)v28;
    }
    v22 = v28;
    goto LABEL_34;
  }

  os_log_type_t v81 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v81, OS_LOG_TYPE_ERROR);
  addrinfo buf = 136446722;
  os_log_type_t v105 = "strict_calloc";
  BOOL v106 = 2048;
  v107 = 1LL;
  os_log_type_t v108 = 2048;
  BOOL v109 = v85 + v84;
  os_log_type_t v82 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v82);
  if (!result)
  {
    free(v82);
    goto LABEL_63;
  }

    goto LABEL_58;
  }

  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 24);
    if ((*((_BYTE *)v3 + 107) & 0x10) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446210;
      id v31 = "nw_path_evaluator_set_queue";
      v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      BOOL v28 = 0;
      if (__nwlog_fault(v7, &type, &v28))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v8 = (os_log_s *)(id)gLogObj;
          os_log_type_t v9 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v31 = "nw_path_evaluator_set_queue";
            _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s Client error: set queue after starting", buf, 0xCu);
          }
        }

        else if (v28)
        {
          v10 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v8 = (os_log_s *)(id)gLogObj;
          nw_parameters_t v11 = type;
          v12 = os_log_type_enabled(v8, type);
          if (v10)
          {
            if (v12)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              id v31 = "nw_path_evaluator_set_queue";
              v32 = 2082;
              os_log_type_t v33 = v10;
              _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s Client error: set queue after starting, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v10);
            if (!v7) {
              goto LABEL_23;
            }
            goto LABEL_22;
          }

          if (v12)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v31 = "nw_path_evaluator_set_queue";
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s Client error: set queue after starting, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v8 = (os_log_s *)(id)gLogObj;
          v13 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v31 = "nw_path_evaluator_set_queue";
            _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s Client error: set queue after starting, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (v7) {
LABEL_22:
      }
        free(v7);
    }

        goto LABEL_58;
      }

      if (!v27)
      {
        __nwlog_obj();
        v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null port, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_57;
      }

      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (!v20)
      {
        if (v24)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s called with null port, no backtrace", buf, 0xCu);
        }

        goto LABEL_57;
      }

      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v30 = "nw_endpoint_create_address_with_port";
        id v31 = 2082;
        v32 = v20;
        _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s called with null port, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_45;
    }
  }

  else
  {
    __nwlog_obj();
    size_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v30 = "nw_endpoint_create_address_with_port";
    unint64_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v15, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null address", buf, 0xCu);
        }

        goto LABEL_57;
      }

      if (!v27)
      {
        __nwlog_obj();
        v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s called with null address, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_57;
      }

      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v21 = type;
      v22 = os_log_type_enabled(v16, type);
      if (!v20)
      {
        if (v22)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_181A5C000, v16, v21, "%{public}s called with null address, no backtrace", buf, 0xCu);
        }

        goto LABEL_57;
      }

      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v30 = "nw_endpoint_create_address_with_port";
        id v31 = 2082;
        v32 = v20;
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null address, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_58;
  }

  v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v33 = "nw_http_metadata_set_method";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (!v30)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_method";
        _os_log_impl( &dword_181A5C000,  v11,  v26,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_181A5C000, v11, v21, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v33 = "nw_http_metadata_set_method";
      os_log_type_t v34 = 2082;
      id v35 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_38;
  }

  if (!a2)
  {
    __nwlog_obj();
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v33 = "nw_http_metadata_set_method";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null method", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (!v30)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_method";
        _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null method, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_181A5C000, v11, v23, "%{public}s called with null method, no backtrace", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v33 = "nw_http_metadata_set_method";
      os_log_type_t v34 = 2082;
      id v35 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null method, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_58;
  }

  v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v32 = "nw_http_metadata_set_path";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (!v29)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl( &dword_181A5C000,  v11,  v26,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_181A5C000, v11, v21, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v32 = "nw_http_metadata_set_path";
      os_log_type_t v33 = 2082;
      os_log_type_t v34 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_38;
  }

  if (!a2)
  {
    __nwlog_obj();
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v32 = "nw_http_metadata_set_path";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null path", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (!v29)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_181A5C000, v11, v23, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v32 = "nw_http_metadata_set_path";
      os_log_type_t v33 = 2082;
      os_log_type_t v34 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_58;
  }

  v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v33 = "nw_http_metadata_set_status";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (!v30)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_status";
        _os_log_impl( &dword_181A5C000,  v11,  v26,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_181A5C000, v11, v21, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v33 = "nw_http_metadata_set_status";
      os_log_type_t v34 = 2082;
      id v35 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_38;
  }

  if (!a2)
  {
    __nwlog_obj();
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v33 = "nw_http_metadata_set_status";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null status", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (!v30)
    {
      __nwlog_obj();
      nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_status";
        _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null status, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_181A5C000, v11, v23, "%{public}s called with null status, no backtrace", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v33 = "nw_http_metadata_set_status";
      os_log_type_t v34 = 2082;
      id v35 = v20;
      _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null status, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v31) {
      free(v31);
    }

    goto LABEL_76;
  }

    if (v36) {
      free(v36);
    }
    return;
  }

  v3 = v1;
  size_t v4 = v3[29];

  if ((_DWORD)v4 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      else {
        os_log_type_t v17 = off_189BBBBC0[v4];
      }
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v67 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]_block_invoke";
      id v68 = 2082;
      v69 = (void *)v17;
      uint64_t v70 = 2082;
      os_log_type_t v71 = "flow";
      _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    goto LABEL_26;
  }

  if (nw_endpoint_handler_get_state(*(void **)(a1 + 32)) != 2
    || (*(_BYTE *)(*(void *)(a1 + 40) + 33LL) & 4) != 0)
  {
    minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if ((logging_disabled & 1) != 0) {
        return;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v20 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v43 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v44 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v44);
        v46 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v47 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        BOOL v48 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)addrinfo buf = 136447746;
        os_log_type_t v67 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]_block_invoke";
        id v68 = 2082;
        v69 = (void *)id_string;
        uint64_t v70 = 2082;
        os_log_type_t v71 = v43;
        v72 = 2082;
        v73 = logging_description;
        os_log_type_t v74 = 2082;
        BOOL v75 = v46;
        os_log_type_t v76 = 2082;
        v77 = v47;
        v78 = 2114;
        os_log_type_t v79 = v48;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow is no longer in progress , not resetting for better path",  buf,  0x48u);
      }
    }

    else
    {
      if ((logging_disabled & 1) != 0) {
        return;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v20 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        id v21 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v22 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        BOOL v23 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        BOOL v24 = nw_endpoint_get_logging_description(v23);
        id v25 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v26 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v27 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)addrinfo buf = 136447746;
        os_log_type_t v67 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]_block_invoke";
        id v68 = 2082;
        v69 = (void *)v21;
        uint64_t v70 = 2082;
        os_log_type_t v71 = v22;
        v72 = 2082;
        v73 = v24;
        os_log_type_t v74 = 2082;
        BOOL v75 = v25;
        os_log_type_t v76 = 2082;
        v77 = v26;
        v78 = 2114;
        os_log_type_t v79 = v27;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow is no longer in progress , not resetting for better path",  buf,  0x48u);
      }
    }

    goto LABEL_69;
  }

  has_better_path = nw_endpoint_handler_get_has_better_path(*(NWConcrete_nw_endpoint_handler **)(a1 + 32), 1);
  id v6 = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
  v7 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
  if (has_better_path)
  {
    if (v6)
    {
      if ((v7 & 1) != 0) {
        goto LABEL_13;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v8 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v50 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        BOOL v51 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        os_log_type_t v52 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        id v53 = nw_endpoint_get_logging_description(v52);
        v54 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v55 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        os_log_type_t v56 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)addrinfo buf = 136447746;
        os_log_type_t v67 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]_block_invoke";
        id v68 = 2082;
        v69 = (void *)v50;
        uint64_t v70 = 2082;
        os_log_type_t v71 = v51;
        v72 = 2082;
        v73 = v53;
        os_log_type_t v74 = 2082;
        BOOL v75 = v54;
        os_log_type_t v76 = 2082;
        v77 = v55;
        v78 = 2114;
        os_log_type_t v79 = v56;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path detected during e stablishment, resetting",  buf,  0x48u);
      }
    }

    else
    {
      if ((v7 & 1) != 0)
      {
LABEL_13:
        nw_endpoint_flow_failed_with_error(*(void **)(a1 + 32), 1, 0LL);
        return;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v8 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v9 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v10 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_parameters_t v11 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v12 = nw_endpoint_get_logging_description(v11);
        v13 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        size_t v14 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        unint64_t v15 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)addrinfo buf = 136447746;
        os_log_type_t v67 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]_block_invoke";
        id v68 = 2082;
        v69 = (void *)v9;
        uint64_t v70 = 2082;
        os_log_type_t v71 = v10;
        v72 = 2082;
        v73 = v12;
        os_log_type_t v74 = 2082;
        BOOL v75 = v13;
        os_log_type_t v76 = 2082;
        v77 = v14;
        v78 = 2114;
        os_log_type_t v79 = v15;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path detected during e stablishment, resetting",  buf,  0x48u);
      }
    }

    goto LABEL_13;
  }

  if (v6)
  {
    if ((v7 & 1) != 0) {
      return;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v20 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v57 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      id v58 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v59 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      char v60 = nw_endpoint_get_logging_description(v59);
      os_log_type_t v61 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      objc_super v62 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v63 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)addrinfo buf = 136447746;
      os_log_type_t v67 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]_block_invoke";
      id v68 = 2082;
      v69 = (void *)v57;
      uint64_t v70 = 2082;
      os_log_type_t v71 = v58;
      v72 = 2082;
      v73 = v60;
      os_log_type_t v74 = 2082;
      BOOL v75 = v61;
      os_log_type_t v76 = 2082;
      v77 = v62;
      v78 = 2114;
      os_log_type_t v79 = v63;
      _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent does not have better pat h, not resetting",  buf,  0x48u);
    }

    if (v36) {
      free(v36);
    }

    size_t v4 = v43;
    goto LABEL_22;
  }

  v16 = v13[9];
  if (v16)
  {
    os_log_type_t v17 = *(uint64_t (**)(void *, uint64_t, BOOL, id, id))(v16 + 64);
    if (v17) {
      v10 = v17(v13, v7, v8 > v9, v14, v15);
    }
  }

  size_t v4 = v43;
  if (!v10) {
    goto LABEL_22;
  }
LABEL_7:
  BOOL v18 = v6[5];
  if (v18) {
    nw_protocol_definition_deallocate_cache_entry(v4, v18);
  }
  nw_context_remove_cache_entry(*(void **)(a1 + 48), v6);
  if (nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 56LL), a2)
    || nw_path_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 16LL)))
  {
    goto LABEL_22;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  v19 = (id)gconnectionLogObj;
  logging_description = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8LL));
  *(_DWORD *)addrinfo buf = 136446722;
  os_log_type_t v47 = "nw_association_update_paths_block_invoke";
  BOOL v48 = 2082;
  id v49 = (void *)logging_description;
  os_log_type_t v50 = 2048;
  BOOL v51 = a2;
  id v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (__nwlog_fault(v21, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v22 = (os_log_s *)(id)gconnectionLogObj;
      BOOL v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        BOOL v24 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8LL));
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v47 = "nw_association_update_paths_block_invoke";
        BOOL v48 = 2082;
        id v49 = (void *)v24;
        os_log_type_t v50 = 2048;
        BOOL v51 = a2;
        _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p",  buf,  0x20u);
      }
    }

    else if (v44)
    {
      v26 = __nw_create_backtrace_string();
      if (v26)
      {
        v27 = (char *)v26;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v28 = (os_log_s *)(id)gconnectionLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          v30 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8LL));
          *(_DWORD *)addrinfo buf = 136446978;
          os_log_type_t v47 = "nw_association_update_paths_block_invoke";
          BOOL v48 = 2082;
          id v49 = (void *)v30;
          os_log_type_t v50 = 2048;
          BOOL v51 = a2;
          os_log_type_t v52 = 2082;
          id v53 = v27;
          _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v27);
        size_t v4 = v43;
        if (v21) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v22 = (os_log_s *)(id)gconnectionLogObj;
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v22, type))
      {
        os_log_type_t v34 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8LL));
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v47 = "nw_association_update_paths_block_invoke";
        BOOL v48 = 2082;
        id v49 = (void *)v34;
        os_log_type_t v50 = 2048;
        BOOL v51 = a2;
        _os_log_impl( &dword_181A5C000,  v22,  v33,  "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v22 = (os_log_s *)(id)gconnectionLogObj;
      id v31 = type;
      if (os_log_type_enabled(v22, type))
      {
        v32 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8LL));
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v47 = "nw_association_update_paths_block_invoke";
        BOOL v48 = 2082;
        id v49 = (void *)v32;
        os_log_type_t v50 = 2048;
        BOOL v51 = a2;
        _os_log_impl( &dword_181A5C000,  v22,  v31,  "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, backtrace limit exceeded",  buf,  0x20u);
      }
    }
  }

  size_t v4 = v43;
  if (v21) {
LABEL_21:
  }
    free(v21);
LABEL_22:

  return 1LL;
}

    if (v7) {
      free(v7);
    }
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v157 = "__nw_protocol_set_output_handler";
    id v31 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v154 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v31, type, &v154))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v32 = (os_log_s *)__nwlog_obj();
        os_log_type_t v33 = type[0];
        if (!os_log_type_enabled(v32, type[0])) {
          goto LABEL_73;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v157 = "__nw_protocol_set_output_handler";
        os_log_type_t v34 = "%{public}s called with null protocol";
LABEL_72:
        _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0xCu);
        goto LABEL_73;
      }

      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        v32 = (os_log_s *)__nwlog_obj();
        os_log_type_t v33 = type[0];
        if (!os_log_type_enabled(v32, type[0])) {
          goto LABEL_73;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v157 = "__nw_protocol_set_output_handler";
        os_log_type_t v34 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_72;
      }

      id v35 = (char *)__nw_create_backtrace_string();
      v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type[0];
      os_log_type_t v36 = os_log_type_enabled(v32, type[0]);
      if (!v35)
      {
        if (!v36) {
          goto LABEL_73;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v157 = "__nw_protocol_set_output_handler";
        os_log_type_t v34 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_72;
      }

      if (v36)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v157 = "__nw_protocol_set_output_handler";
        v158 = 2082;
        v159 = (nw_protocol_identifier *)v35;
        _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v35);
    }

      if (v26) {
        free(v26);
      }
      __nwlog_obj();
      __addrinfo buf = 136446210;
      os_log_type_t v56 = "__nw_frame_get_fragmentation";
      v32 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v53 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          __addrinfo buf = 136446210;
          os_log_type_t v56 = "__nw_frame_get_fragmentation";
          id v35 = "%{public}s called with null frame";
LABEL_72:
          _os_log_impl(&dword_181A5C000, v33, v34, v35, (uint8_t *)&__buf, 0xCu);
        }
      }

      else if (v53)
      {
        os_log_type_t v36 = (char *)__nw_create_backtrace_string();
        os_log_type_t v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        v37 = os_log_type_enabled(v33, type);
        if (v36)
        {
          if (v37)
          {
            __addrinfo buf = 136446466;
            os_log_type_t v56 = "__nw_frame_get_fragmentation";
            os_log_type_t v57 = 2082;
            id v58 = v36;
            _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s called with null frame, dumping backtrace:%{public}s",  (uint8_t *)&__buf,  0x16u);
          }

          free(v36);
          goto LABEL_73;
        }

        if (v37)
        {
          __addrinfo buf = 136446210;
          os_log_type_t v56 = "__nw_frame_get_fragmentation";
          id v35 = "%{public}s called with null frame, no backtrace";
          goto LABEL_72;
        }
      }

      else
      {
        os_log_type_t v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          __addrinfo buf = 136446210;
          os_log_type_t v56 = "__nw_frame_get_fragmentation";
          id v35 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_72;
        }
      }

  *(_BYTE *)(v8 + 64) |= 1u;
  *(void *)(v8 + 56) = 0LL;
  nw_hash_table_remove_node(handle[35], v8);
  v78 = OS_LOG_TYPE_DEFAULT;
  os_log_type_t v38 = nw_hash_table_add_object(handle[35], (uint64_t)a3, (char *)&v78);
  BOOL v28 = v78 != OS_LOG_TYPE_DEFAULT;
  if (v78)
  {
    v39 = v15;
    v72 = (void *)v38;
    extra = nw_hash_node_get_extra(v38);
    BOOL v41 = extra;
    *(_OWORD *)extra = 0u;
    *(_OWORD *)(extra + 16) = 0u;
    *(_OWORD *)(extra + 32) = 0u;
    *(_OWORD *)(extra + 48) = 0u;
    *(_OWORD *)(extra + 64) = 0u;
    *(_OWORD *)(extra + 80) = 0u;
    *(_OWORD *)(extra + 96) = 0u;
    *(_OWORD *)(extra + 112) = 0u;
    *(void *)(extra + 8) = extra;
    if (*(void *)type)
    {
      *(void *)extra = *(void *)type;
      id v42 = v77;
      *(void *)(*(void *)type + 40LL) = extra;
      *(void *)(extra + 8) = v42;
      *(void *)os_log_type_t type = 0LL;
      v77 = type;
    }

    *(void *)(extra + 16) = v11;
    if (a3->handle == &nw_protocol_ref_counted_handle)
    {
      callbacks = a3[1].callbacks;
      if (callbacks) {
        a3[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
      }
      v43 = 1;
    }

    else
    {
      v43 = 0;
    }

    id v49 = v12 & 1;
    os_log_type_t v50 = *(_BYTE *)(extra + 32);
    if ((v50 & 1) != 0)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)(extra + 24));
      os_log_type_t v50 = *(_BYTE *)(v41 + 32);
    }

    *(void *)(v41 + 24) = a3;
    *(_BYTE *)(v41 + 32) = v50 & 0xFE | v43;
    BOOL v51 = *(void **)(v41 + 72);
    if (v51)
    {
      os_release(v51);
      *(void *)(v41 + 72) = 0LL;
    }

    *(void *)(v41 + 72) = nw_link_info_create(v39);
    uuid_unparse(a3->flow_id, (char *)(v41 + 84));
    *(_DWORD *)(v41 + 80) = v16;
    os_log_type_t v52 = *(_BYTE *)(v41 + 121) & 0xFE | v49;
    *(_BYTE *)(v41 + 121) = v52;
    if (v49)
    {
      *(void *)(v41 + 40) = 0LL;
      id v53 = (uint64_t *)handle[47];
      *(void *)(v41 + 48) = v53;
      *id v53 = v41;
      handle[47] = v41 + 40;
      os_log_type_t v52 = *(_BYTE *)(v41 + 121);
    }

    *(_BYTE *)(v41 + 121) = v52 & 0xFD | (2 * v13);
    v54 = v72;
    if (v13)
    {
      *(void *)(v41 + 56) = 0LL;
      os_log_type_t v55 = (uint64_t *)handle[49];
      *(void *)(v41 + 64) = v55;
      *os_log_type_t v55 = v41;
      handle[49] = v41 + 56;
    }

    output_handler = a3->output_handler;
    if (output_handler != a1)
    {
      if (output_handler)
      {
        if (output_handler->handle == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v64 = output_handler[1].callbacks;
          if (v64)
          {
            BOOL v65 = (nw_protocol_callbacks *)((char *)v64 - 1);
            output_handler[1].callbacks = v65;
            if (!v65)
            {
              v66 = *(void (***)(void))output_handler[1].flow_id;
              if (v66)
              {
                *(void *)output_handler[1].flow_id = 0LL;
                v66[2](v66);
                _Block_release(v66);
              }

              if ((output_handler[1].flow_id[8] & 1) != 0)
              {
                os_log_type_t v67 = *(const void **)output_handler[1].flow_id;
                if (v67) {
                  _Block_release(v67);
                }
              }

              free(output_handler);
              v54 = v72;
            }
          }
        }
      }

      a3->output_handler = a1;
      if (a1->handle == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v57 = a1[1].callbacks;
        if (v57) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v57->add_input_handler + 1);
        }
      }
    }

    a3->output_handler_context = v54;
    return v28;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)addrinfo buf = 136446722;
  BOOL v80 = "nw_channel_replace_input_handler";
  os_log_type_t v81 = 1042;
  *(_DWORD *)os_log_type_t v82 = 16;
  *(_WORD *)&v82[4] = 2098;
  *(void *)&v82[6] = a3;
  v44 = (char *)_os_log_send_and_compose_impl();
  BOOL v75 = OS_LOG_TYPE_ERROR;
  os_log_type_t v74 = 0;
  if (__nwlog_fault(v44, &v75, &v74))
  {
    if (v75 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v45 = (os_log_s *)gLogObj;
      v46 = v75;
      if (!os_log_type_enabled((os_log_t)gLogObj, v75)) {
        goto LABEL_117;
      }
      *(_DWORD *)addrinfo buf = 136446722;
      BOOL v80 = "nw_channel_replace_input_handler";
      os_log_type_t v81 = 1042;
      *(_DWORD *)os_log_type_t v82 = 16;
      *(_WORD *)&v82[4] = 2098;
      *(void *)&v82[6] = a3;
      os_log_type_t v47 = "%{public}s Channel failed to add new input handler for %{public,uuid_t}.16P";
      goto LABEL_116;
    }

    if (!v74)
    {
      os_log_type_t v45 = (os_log_s *)__nwlog_obj();
      v46 = v75;
      if (!os_log_type_enabled(v45, v75)) {
        goto LABEL_117;
      }
      *(_DWORD *)addrinfo buf = 136446722;
      BOOL v80 = "nw_channel_replace_input_handler";
      os_log_type_t v81 = 1042;
      *(_DWORD *)os_log_type_t v82 = 16;
      *(_WORD *)&v82[4] = 2098;
      *(void *)&v82[6] = a3;
      os_log_type_t v47 = "%{public}s Channel failed to add new input handler for %{public,uuid_t}.16P, backtrace limit exceeded";
      goto LABEL_116;
    }

    id v58 = (char *)__nw_create_backtrace_string();
    os_log_type_t v45 = (os_log_s *)__nwlog_obj();
    v46 = v75;
    v59 = os_log_type_enabled(v45, v75);
    if (v58)
    {
      if (v59)
      {
        *(_DWORD *)addrinfo buf = 136446978;
        BOOL v80 = "nw_channel_replace_input_handler";
        os_log_type_t v81 = 1042;
        *(_DWORD *)os_log_type_t v82 = 16;
        *(_WORD *)&v82[4] = 2098;
        *(void *)&v82[6] = a3;
        os_log_type_t v83 = 2082;
        *(void *)os_log_type_t v84 = v58;
        _os_log_impl( &dword_181A5C000,  v45,  v46,  "%{public}s Channel failed to add new input handler for %{public,uuid_t}.16P, dumping backtrace:%{public}s",  buf,  0x26u);
      }

      free(v58);
      goto LABEL_117;
    }

    if (v59)
    {
      *(_DWORD *)addrinfo buf = 136446722;
      BOOL v80 = "nw_channel_replace_input_handler";
      os_log_type_t v81 = 1042;
      *(_DWORD *)os_log_type_t v82 = 16;
      *(_WORD *)&v82[4] = 2098;
      *(void *)&v82[6] = a3;
      os_log_type_t v47 = "%{public}s Channel failed to add new input handler for %{public,uuid_t}.16P, no backtrace";
LABEL_116:
      _os_log_impl(&dword_181A5C000, v45, v46, v47, buf, 0x1Cu);
    }
  }

LABEL_124:
          v66 = 0LL;
          if (!v50)
          {
LABEL_126:
            v30 = 0LL;
LABEL_147:

LABEL_148:
            goto LABEL_149;
          }

    if (v98) {
      free(v98);
    }
    goto LABEL_18;
  }

  nw_parameters_t v11 = (unsigned int *)v10;
  v12 = v11[29];

  if ((_DWORD)v12 == 5)
  {
    obj = a1;
    v126 = a3;
    v13 = v11;
    size_t v14 = *((_BYTE *)v13 + 268);

    v127 = v13;
    if ((v14 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unint64_t v15 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v16 = v13;

        os_log_type_t v17 = v16;
        BOOL v18 = *((_BYTE *)v13 + 268);

        if ((v18 & 1) != 0) {
          v19 = "dry-run ";
        }
        else {
          v19 = "";
        }
        log = v15;
        BOOL v122 = nw_endpoint_handler_copy_endpoint(v17);
        logging_description = nw_endpoint_get_logging_description(v122);
        id v21 = v17;
        v22 = v21;
        BOOL v23 = v21[30];
        else {
          BOOL v24 = off_189BBBBF0[v23];
        }
        os_log_type_t v121 = v24;

        BOOL v28 = v22;
        os_log_type_t v29 = "path";
        switch(v11[29])
        {
          case 0u:
            break;
          case 1u:
            os_log_type_t v29 = "resolver";
            break;
          case 2u:
            os_log_type_t v29 = nw_endpoint_flow_mode_string(v28[31]);
            break;
          case 3u:
            os_log_type_t v29 = "proxy";
            break;
          case 4u:
            os_log_type_t v29 = "fallback";
            break;
          case 5u:
            os_log_type_t v29 = "transform";
            break;
          default:
            os_log_type_t v29 = "unknown-mode";
            break;
        }

        v120 = v29;

        v30 = v28;
        os_unfair_lock_lock((os_unfair_lock_t)v30 + 28);
        id v31 = v30[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v30 + 28);

        v32 = v31;
        id_string = nw_endpoint_handler_get_id_string(v130);
        os_log_type_t v33 = nw_endpoint_handler_dry_run_string(v130);
        os_log_type_t v34 = nw_endpoint_handler_copy_endpoint(v130);
        id v35 = logging_description;
        os_log_type_t v36 = v19;
        v37 = nw_endpoint_get_logging_description(v34);
        os_log_type_t v38 = (char *)(v16 + 42);
        v39 = nw_endpoint_handler_state_string(v130);
        os_log_type_t v40 = nw_endpoint_handler_mode_string(v130);
        BOOL v41 = nw_endpoint_handler_copy_current_path(v130);
        *(_DWORD *)addrinfo buf = 136449282;
        *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v38;
        *(_WORD *)&buf[22] = 2082;
        v143 = v36;
        v144 = 2082;
        v145 = v35;
        v146 = 2082;
        v147 = v121;
        v148 = 2082;
        v149 = v120;
        v150 = 2114;
        v151 = v32;
        v152 = 2082;
        v153 = id_string;
        v154 = 2082;
        v155 = v33;
        v156 = 2082;
        v157 = v37;
        v158 = 2082;
        v159 = v39;
        v160 = 2082;
        v161 = v40;
        v162 = 2114;
        v163 = v41;
        unint64_t v15 = log;
        _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received child report: [C%{pu blic}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ",  buf,  0x84u);
      }

      v13 = v127;
    }

    id v42 = v130;
    nw_endpoint_handler_report(v13, v130, a4, v129);
    v43 = nw_endpoint_handler_copy_transform((NWConcrete_nw_endpoint_handler *)v13);
    v44 = v43;
    v46 = (id *)((char *)v43 + 48);
    os_log_type_t v45 = (id)*((void *)v43 + 6);
    if (v45 == v130)
    {
      char v60 = v13;
      v60[30] = v126;

      nw_endpoint_handler_report(v60, 0LL, a4, 0LL);
    }

    else
    {
      os_log_type_t v47 = *((void *)v43 + 1);
      if (!v47 || !v130) {
        goto LABEL_85;
      }
      id v49 = *(id **)(v47 + 16);
      BOOL v48 = *(id **)(v47 + 24);
      if (v49 != v48)
      {
        while (*v49 != v130)
        {
          if (++v49 == v48)
          {
            id v49 = v48;
            break;
          }
        }
      }

      if (v49 == v48) {
        goto LABEL_85;
      }
      if (*((void *)v43 + 4)) {
        os_log_type_t v50 = a4 == 0LL;
      }
      else {
        os_log_type_t v50 = 1;
      }
      BOOL v51 = !v50 && v45 == 0LL;
      if (v51 && *a4 == 2 && a4[1] == 8)
      {
        objc_super v62 = *((id *)v43 + 7);
        v63 = nw_endpoint_handler_copy_endpoint(v130);
        os_log_type_t v64 = nw_endpoint_handler_copy_endpoint_for_alternatives(v130);
        if (v64 && nw_endpoint_is_equal(v62, v63, 8LL) && (nw_endpoint_is_equal(v62, v64, 8LL) & 1) == 0)
        {
          loga = v63;
          *(void *)addrinfo buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000LL;
          LOBYTE(v143) = 0;
          v136[0] = MEMORY[0x1895F87A8];
          v136[1] = 3221225472LL;
          v136[2] = ___ZL36nw_endpoint_transform_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke;
          v136[3] = &unk_189BC6D88;
          BOOL v65 = v44;
          v137 = v65;
          v66 = v13;
          v138 = v66;
          v139 = buf;
          nw_endpoint_enumerate_alternatives(v64, v136);
          if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
          {
            v66->event = (nw_endpoint_handler_event_s)196615;
            nw_endpoint_handler_report(v66, 0LL, &v66->event.domain, 0LL);
            -[NWConcrete_nw_endpoint_mode_handler cancelWithHandler:forced:](v65, "cancelWithHandler:forced:", v66, 1LL);
            objc_storeStrong((id *)v44 + 7, v64);
            nw_endpoint_transform_add_children(v66);
            nw_endpoint_transform_start_next_child(v66);
          }

          _Block_object_dispose(buf, 8);
          v63 = loga;
        }

        id v42 = v130;
        v13 = v127;
      }

      if (v126 == 3)
      {
        objc_storeStrong(v46, obj);
        os_log_type_t v52 = v127;
        v52[30] = 3;
LABEL_46:

        id v53 = v127;
        nw_endpoint_handler_report(v127, 0LL, a4, 0LL);
        os_log_type_t v55 = *((void *)v44 + 8);
        if (v55)
        {
          nw_queue_cancel_source(v55, v54);
          *((void *)v44 + 8) = 0LL;
        }

        os_log_type_t v56 = nw_endpoint_handler_copy_parameters(v130);
        os_log_type_t v57 = v56;
        if (v56)
        {
          if (nw_parameters_get_upper_transport_protocol(v56) == 253)
          {
            *((_DWORD *)v44 + 21) = 253;
            id v58 = v127;
            v59 = v58[7];

            if (v59) {
              nw_quic_report_race_result_on_queue(v59, 1, 0);
            }

            id v53 = v127;
          }

          else
          {
            *((_DWORD *)v44 + 21) = nw_parameters_get_ip_protocol(v57);
          }
        }

        BOOL v75 = (unsigned __int8 *)*((void *)v44 + 1);
        v132[0] = MEMORY[0x1895F87A8];
        v132[1] = 3221225472LL;
        v132[2] = ___ZL36nw_endpoint_transform_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_100;
        v132[3] = &unk_189BC6DB0;
        v133 = v44;
        __int16 v134 = v130;
        v135 = v53;
        nw_array_apply(v75, (uint64_t)v132);

        goto LABEL_84;
      }

      if (v126 == 2 && a4)
      {
        if (*a4 != 3 || a4[1] != 5) {
          goto LABEL_85;
        }
        os_log_type_t v61 = v42;
        os_log_type_t v52 = (unsigned int *)*v46;
        char *v46 = v61;
        goto LABEL_46;
      }

      if (v126 == 4)
      {
        os_log_type_t v67 = *((void *)v44 + 2);
        if (v67)
        {
          v69 = *(void ***)(v67 + 16);
          id v68 = *(void ***)(v67 + 24);
          if (v69 != v68)
          {
            while (*v69 != v42)
            {
              if (++v69 == v68)
              {
                v69 = *(void ***)(v67 + 24);
                break;
              }
            }
          }

          if (v69 != v68)
          {
LABEL_78:
            os_log_type_t v57 = nw_endpoint_handler_copy_parameters(v42);
            if (nw_parameters_get_upper_transport_protocol(v57) == 253)
            {
              v72 = nw_endpoint_handler_copy_association(v13, 0);
              nw_quic_report_race_result_on_queue(v72, 0, 0);

              v13 = v127;
            }

            v73 = *((void *)v44 + 2);
            if (v73) {
              os_log_type_t v74 = (uint64_t)(*(void *)(v73 + 24) - *(void *)(v73 + 16)) >> 3;
            }
            else {
              os_log_type_t v74 = 0LL;
            }
            v77 = *((void *)v44 + 1);
            if (v77) {
              v78 = (uint64_t)(*(void *)(v77 + 24) - *(void *)(v77 + 16)) >> 3;
            }
            else {
              v78 = 0LL;
            }
            minimize_logging = nw_endpoint_handler_get_minimize_logging(v13);
            logging_disabled = nw_endpoint_handler_get_logging_disabled(v13);
            if (v74 == v78)
            {
              if (minimize_logging)
              {
                if ((logging_disabled & 1) != 0) {
                  goto LABEL_99;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v81 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
                {
                  os_log_type_t v105 = nw_endpoint_handler_get_id_string(v127);
                  BOOL v106 = nw_endpoint_handler_dry_run_string(v127);
                  v107 = nw_endpoint_handler_copy_endpoint(v127);
                  os_log_type_t v108 = nw_endpoint_get_logging_description(v107);
                  BOOL v109 = nw_endpoint_handler_state_string(v127);
                  v110 = nw_endpoint_handler_mode_string(v127);
                  v111 = nw_endpoint_handler_copy_current_path(v127);
                  *(_DWORD *)addrinfo buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v105;
                  *(_WORD *)&buf[22] = 2082;
                  v143 = v106;
                  v144 = 2082;
                  v145 = v108;
                  v146 = 2082;
                  v147 = v109;
                  v148 = 2082;
                  v149 = v110;
                  v150 = 2114;
                  v151 = v111;
                  _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed",  buf,  0x48u);
                }
              }

              else
              {
                if ((logging_disabled & 1) != 0)
                {
LABEL_99:
                  nw_endpoint_handler_handle_failure(v13);
                  v13[20] = 131079;
                  nw_endpoint_handler_report(v13, 0LL, (_WORD *)v13 + 40, 0LL);
LABEL_84:

                  goto LABEL_85;
                }

                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v81 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
                {
                  os_log_type_t v82 = nw_endpoint_handler_get_id_string(v13);
                  os_log_type_t v83 = nw_endpoint_handler_dry_run_string(v13);
                  os_log_type_t v84 = nw_endpoint_handler_copy_endpoint(v13);
                  v85 = nw_endpoint_get_logging_description(v84);
                  v86 = nw_endpoint_handler_state_string(v13);
                  v87 = nw_endpoint_handler_mode_string(v13);
                  v88 = nw_endpoint_handler_copy_current_path(v13);
                  *(_DWORD *)addrinfo buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v82;
                  *(_WORD *)&buf[22] = 2082;
                  v143 = v83;
                  v144 = 2082;
                  v145 = v85;
                  v146 = 2082;
                  v147 = v86;
                  v148 = 2082;
                  v149 = v87;
                  v150 = 2114;
                  v151 = v88;
                  _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed",  buf,  0x48u);
                }
              }

              v13 = v127;
              goto LABEL_99;
            }

            if (minimize_logging)
            {
              if ((logging_disabled & 1) != 0) {
                goto LABEL_107;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v89 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
              {
                v112 = nw_endpoint_handler_get_id_string(v127);
                os_log_type_t v113 = nw_endpoint_handler_dry_run_string(v127);
                os_log_type_t v114 = nw_endpoint_handler_copy_endpoint(v127);
                os_log_type_t v115 = nw_endpoint_get_logging_description(v114);
                os_log_type_t v116 = nw_endpoint_handler_state_string(v127);
                os_log_type_t v117 = nw_endpoint_handler_mode_string(v127);
                os_log_type_t v118 = nw_endpoint_handler_copy_current_path(v127);
                *(_DWORD *)addrinfo buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v112;
                *(_WORD *)&buf[22] = 2082;
                v143 = v113;
                v144 = 2082;
                v145 = v115;
                v146 = 2082;
                v147 = v116;
                v148 = 2082;
                v149 = v117;
                v150 = 2114;
                v151 = v118;
                _os_log_impl( &dword_181A5C000,  v89,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.",  buf,  0x48u);
              }
            }

            else
            {
              if ((logging_disabled & 1) != 0)
              {
LABEL_107:
                nw_endpoint_transform_start_next_child((NWConcrete_nw_endpoint_handler *)v13);
                goto LABEL_84;
              }

              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v89 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
              {
                v90 = nw_endpoint_handler_get_id_string(v13);
                os_log_type_t v91 = nw_endpoint_handler_dry_run_string(v13);
                v92 = nw_endpoint_handler_copy_endpoint(v13);
                os_log_type_t v93 = nw_endpoint_get_logging_description(v92);
                v94 = nw_endpoint_handler_state_string(v13);
                os_log_type_t v95 = nw_endpoint_handler_mode_string(v13);
                v96 = nw_endpoint_handler_copy_current_path(v13);
                *(_DWORD *)addrinfo buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v90;
                *(_WORD *)&buf[22] = 2082;
                v143 = v91;
                v144 = 2082;
                v145 = v93;
                v146 = 2082;
                v147 = v94;
                v148 = 2082;
                v149 = v95;
                v150 = 2114;
                v151 = v96;
                _os_log_impl( &dword_181A5C000,  v89,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.",  buf,  0x48u);
              }
            }

            v13 = v127;
            goto LABEL_107;
          }
        }

        else
        {
          uint64_t v70 = nw_array_create();
          os_log_type_t v71 = (void *)*((void *)v44 + 2);
          *((void *)v44 + 2) = v70;

          os_log_type_t v67 = *((void *)v44 + 2);
          id v42 = v130;
          v13 = v127;
        }

        nw_array_append(v67, v42);
        goto LABEL_78;
      }
    }

    if (v78) {
      free(v78);
    }
    goto LABEL_66;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
}

    free(v36);
    goto LABEL_125;
  }

  extended = os_channel_create_extended();
  *((void *)v10 + 17) = extended;
  if (!extended)
  {
    id v42 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    v43 = v42 == 2;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v44 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v42;
      _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_ERROR,  "%{public}s os_channel_create %{darwin.errno}d",  buf,  0x12u);
    }

        v150 = nw_endpoint_handler_get_logging_disabled(v294);
        if ((v150 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v137 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
          {
            v310 = v137;
            v151 = nw_endpoint_handler_get_id_string(v294);
            v152 = nw_endpoint_handler_dry_run_string(v294);
            v153 = nw_endpoint_handler_copy_endpoint(v294);
            v154 = nw_endpoint_get_logging_description(v153);
            v304 = nw_endpoint_handler_state_string(v294);
            v155 = nw_endpoint_handler_mode_string(v294);
            v156 = nw_endpoint_handler_copy_current_path(v294);
            *(_DWORD *)addrinfo buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v151;
            *(_WORD *)&buf[22] = 2082;
            v338 = v152;
            *(_WORD *)v339 = 2082;
            *(void *)&v339[2] = v154;
            *(_WORD *)&v339[10] = 2082;
            *(void *)&v339[12] = v304;
            *(_WORD *)&v339[20] = 2082;
            *(void *)&v339[22] = v155;
            v340 = 2114;
            v341 = v156;
            _os_log_impl( &dword_181A5C000,  v310,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Data cannot be set in frame",  buf,  0x48u);

            v143 = 12;
LABEL_240:
            v137 = v310;
          }

          else
          {
            v143 = 12;
          }

          goto LABEL_243;
        }

        v143 = 12;
LABEL_244:
        nw_write_request_fail(v70, v143);
LABEL_245:
        *(_WORD *)(handle + 332) &= ~2u;
        _Block_object_dispose(&v321, 8);
LABEL_246:

        v120 = v45;
        id v42 = v70;
        v307 = data;
LABEL_247:
        os_log_type_t v45 = v120;
        if (v46 && (*(_WORD *)(handle + 332) & 2) != 0) {
          objc_storeStrong((id *)(handle + 224), v46);
        }
LABEL_250:
        v317 = (void *)v45;
        v157 = *(id *)(handle + 320);
        ((void (*)(void))v295->protocol.output_handler->callbacks->finalize_output_frames)();
        v158 = *(id *)(handle + 320);
        if (!v158) {
          goto LABEL_266;
        }
        if (v157 == v158) {
          goto LABEL_266;
        }
        v159 = v158;
        v160 = v159[2];

        if (v160 != 1) {
          goto LABEL_266;
        }
        v161 = nw_error_get_error_code(*(nw_error_t *)(handle + 320));
        if (v161 == 4) {
          goto LABEL_266;
        }
        v162 = v161;
        if (v161 == 35) {
          goto LABEL_266;
        }
        if (v161 != 32)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v165 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v162;
            _os_log_impl( &dword_181A5C000,  v165,  OS_LOG_TYPE_ERROR,  "%{public}s Failing the write requests %{darwin.errno}d",  buf,  0x12u);
          }

          goto LABEL_264;
        }

        v163 = nw_endpoint_handler_get_minimize_logging(v294);
        v164 = nw_endpoint_handler_get_logging_disabled(v294);
        if (v163)
        {
          if ((v164 & 1) != 0) {
            goto LABEL_265;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v165 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
          {
            v201 = nw_endpoint_handler_get_id_string(v294);
            v202 = nw_endpoint_handler_dry_run_string(v294);
            v203 = nw_endpoint_handler_copy_endpoint(v294);
            v204 = nw_endpoint_get_logging_description(v203);
            datab = nw_endpoint_handler_state_string(v294);
            v300 = nw_endpoint_handler_mode_string(v294);
            v205 = nw_endpoint_handler_copy_current_path(v294);
            *(_DWORD *)addrinfo buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v201;
            *(_WORD *)&buf[22] = 2082;
            v338 = v202;
            *(_WORD *)v339 = 2082;
            *(void *)&v339[2] = v204;
            *(_WORD *)&v339[10] = 2082;
            *(void *)&v339[12] = datab;
            *(_WORD *)&v339[20] = 2082;
            *(void *)&v339[22] = v300;
            v340 = 2114;
            v341 = v205;
            _os_log_impl( &dword_181A5C000,  v165,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failing the write request s due to the connection being closed",  buf,  0x48u);
          }

    if (v84) {
      free(v84);
    }
LABEL_87:

    id v6 = v94;
    goto LABEL_88;
  }

  __break(1u);
  return result;
}

    if (v34) {
      free(v34);
    }
LABEL_62:
    BOOL v28 = 0LL;
    goto LABEL_70;
  }

  size_t v4 = *((void *)v3 + 40);
  if (!v4)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v87 = 136446210;
    *(void *)&v87[4] = "nw_framer_flush_output";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    v77[0] = OS_LOG_TYPE_ERROR;
    buf[0] = 0;
    if (__nwlog_fault(v34, v77, buf))
    {
      if (v77[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = v77[0];
        if (os_log_type_enabled(v35, v77[0]))
        {
          *(_DWORD *)v87 = 136446210;
          *(void *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_181A5C000, v35, v38, "%{public}s called with null output_handler", v87, 0xCu);
        }

        free(v87);
      }
    }

                nw::release_if_needed<nw_protocol *>((uint64_t *)&p_paths_log_id_num);
                if (v24 != &nw_protocol_ref_counted_handle)
                {
LABEL_58:
                  if ((v37 & 1) != 0)
                  {
LABEL_130:
                    id v68 = *(void *)&self[-1].log_str[25];
                    if (v68)
                    {
                      if (*(_UNKNOWN **)(v68 + 40) == &nw_protocol_ref_counted_handle)
                      {
                        uint64_t v70 = *(void *)(v68 + 88);
                        if (v70)
                        {
                          os_log_type_t v71 = v70 - 1;
                          *(void *)(v68 + 88) = v71;
                          if (!v71)
                          {
                            v72 = *(void (***)(void))(v68 + 64);
                            if (v72)
                            {
                              *(void *)(v68 + 64) = 0LL;
                              v72[2](v72);
                              _Block_release(v72);
                            }

                            if ((*(_BYTE *)(v68 + 72) & 1) != 0)
                            {
                              v73 = *(const void **)(v68 + 64);
                              if (v73) {
                                _Block_release(v73);
                              }
                            }

                            free((void *)v68);
                          }
                        }
                      }

                      *(void *)&self[-1].log_str[25] = 0LL;
                    }

                    goto LABEL_133;
                  }

    if ((v49 & 0x80) == 0 && v41 != 4 && v41 != 8)
    {
      if (nw_proxy_options_authbroker_is_available::onceToken != -1) {
        dispatch_once(&nw_proxy_options_authbroker_is_available::onceToken, &__block_literal_global_35314);
      }
      if (nw_proxy_options_authbroker_is_available::available == 1)
      {
        os_log_type_t v91 = (void *)nw_protocol_get_parameters(v7);
        if ((nw_parameters_get_prevents_system_http_proxy_authentication(v91) & 1) == 0)
        {
          BOOL v75 = nw_http_authentication_ask_authbroker_for_creds(a1);
          goto LABEL_135;
        }
      }
    }

    goto LABEL_134;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v53 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
    _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to determine authentication type",  buf,  0xCu);
  }

  v19 = 1LL;
  (*(void (**)(uint64_t, void, uint64_t, void))(a6 + 16))(a6, 0LL, 1LL, 0LL);
  if (v39) {
    goto LABEL_136;
  }
  return v19;
}

                xpc_dictionary_set_BOOL(v2, "attach_protocol_listener", 1);
                id v35 = *((void *)v1 + 12);
                if ((v35 & 0x800000) == 0)
                {
LABEL_89:
                  if ((v35 & 0x1000000) == 0) {
                    goto LABEL_90;
                  }
                  goto LABEL_126;
                }

    _os_log_impl(&dword_181A5C000, v61, v62, v63, buf, 0xCu);
    goto LABEL_125;
  }

  if (a2)
  {
    if (gLogDatapath)
    {
      os_log_type_t v64 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v76 = "nw_frame_cache_return_frame";
        v77 = 2048;
        *(void *)v78 = a2;
        _os_log_impl(&dword_181A5C000, v64, OS_LOG_TYPE_DEBUG, "%{public}s caching frame %p", buf, 0x16u);
      }
    }

    if ((*(_WORD *)(a2 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(a2, *(void *)(a2 + 88))
      || (size_t v4 = *(void *)(a2 + 112)) == 0)
    {
      if (!gLogDatapath)
      {
        size_t v4 = 0LL;
        v5 = 0;
        id v6 = *(void *)(a2 + 88);
        goto LABEL_14;
      }

      v72 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v76 = "nw_frame_cache_return_frame";
        v77 = 2048;
        *(void *)v78 = a2;
        _os_log_impl( &dword_181A5C000,  v72,  OS_LOG_TYPE_DEBUG,  "%{public}s frame %p no longer has buffer, setting length to 0",  buf,  0x16u);
      }

      v5 = 0;
      size_t v4 = 0LL;
    }

    else
    {
      v5 = *(_DWORD *)(a2 + 48);
    }

    id v6 = *(void *)(a2 + 88);
    if (gLogDatapath)
    {
      v7 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136447234;
        os_log_type_t v76 = "nw_frame_cache_return_frame";
        v77 = 2048;
        *(void *)v78 = a2;
        *(_WORD *)&v78[8] = 2048;
        *(void *)&v78[10] = v4;
        *(_WORD *)&v78[18] = 1024;
        *(_DWORD *)os_log_type_t v79 = v5;
        *(_WORD *)&v79[4] = 2048;
        *(void *)&v79[6] = v6;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s resetting frame %p to buffer %p, length %u, context %p",  buf,  0x30u);
      }
    }
          }
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v75 = "nw_pac_resolver_create_with_script";
        v43 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v72 = 0;
        if (__nwlog_fault(v43, &type, &v72))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            id v49 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              BOOL v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_181A5C000, v44, v49, "%{public}s called with null result_handler", buf, 0xCu);
            }

            goto LABEL_109;
          }

          if (!v72)
          {
            __nwlog_obj();
            v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            id v68 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              BOOL v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl( &dword_181A5C000,  v44,  v68,  "%{public}s called with null result_handler, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_109;
          }

          v54 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v60 = type;
          os_log_type_t v61 = os_log_type_enabled(v55, type);
          if (v54)
          {
            if (v61)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              BOOL v75 = "nw_pac_resolver_create_with_script";
              os_log_type_t v76 = 2082;
              v77 = v54;
              _os_log_impl( &dword_181A5C000,  v55,  v60,  "%{public}s called with null result_handler, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            goto LABEL_91;
          }

          if (v61)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            BOOL v75 = "nw_pac_resolver_create_with_script";
            _os_log_impl( &dword_181A5C000,  v55,  v60,  "%{public}s called with null result_handler, no backtrace",  buf,  0xCu);
          }

          goto LABEL_124;
        }
      }
    }

    else
    {
      __nwlog_obj();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v75 = "nw_pac_resolver_create_with_script";
      v43 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v72 = 0;
      if (__nwlog_fault(v43, &type, &v72))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v47 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            BOOL v75 = "nw_pac_resolver_create_with_script";
            _os_log_impl(&dword_181A5C000, v44, v47, "%{public}s called with null endpointURL", buf, 0xCu);
          }

          goto LABEL_109;
        }

        if (!v72)
        {
          __nwlog_obj();
          v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v67 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            BOOL v75 = "nw_pac_resolver_create_with_script";
            _os_log_impl( &dword_181A5C000,  v44,  v67,  "%{public}s called with null endpointURL, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_109;
        }

        v54 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v58 = type;
        v59 = os_log_type_enabled(v55, type);
        if (v54)
        {
          if (v59)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v75 = "nw_pac_resolver_create_with_script";
            os_log_type_t v76 = 2082;
            v77 = v54;
            _os_log_impl( &dword_181A5C000,  v55,  v58,  "%{public}s called with null endpointURL, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          goto LABEL_91;
        }

        if (v59)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          _os_log_impl(&dword_181A5C000, v55, v58, "%{public}s called with null endpointURL, no backtrace", buf, 0xCu);
        }

        goto LABEL_124;
      }
    }
  }

  else
  {
    __nwlog_obj();
    id v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v75 = "nw_pac_resolver_create_with_script";
    v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v72 = 0;
    if (__nwlog_fault(v43, &type, &v72))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s called with null pacScript", buf, 0xCu);
        }

        goto LABEL_109;
      }

      if (!v72)
      {
        __nwlog_obj();
        v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v66 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          _os_log_impl( &dword_181A5C000,  v44,  v66,  "%{public}s called with null pacScript, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_109;
      }

      v54 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v56 = type;
      os_log_type_t v57 = os_log_type_enabled(v55, type);
      if (v54)
      {
        if (v57)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          os_log_type_t v76 = 2082;
          v77 = v54;
          _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s called with null pacScript, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_91;
      }

      if (v57)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v75 = "nw_pac_resolver_create_with_script";
        _os_log_impl(&dword_181A5C000, v55, v56, "%{public}s called with null pacScript, no backtrace", buf, 0xCu);
      }

      goto LABEL_124;
    }
  }

    if (v14) {
      free(v14);
    }
LABEL_126:
    os_log_type_t v40 = 0LL;
    goto LABEL_127;
  }

  if (listen(v12, 10))
  {
    os_log_type_t v36 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    *a6 = v36;
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446466;
    v54 = "tcp_listener_socket_create";
    os_log_type_t v55 = 1024;
    os_log_type_t v56 = v36;
    size_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v50 = OS_LOG_TYPE_ERROR;
    BOOL v48 = 0;
    if (v50 == OS_LOG_TYPE_FAULT)
    {
      unint64_t v15 = (os_log_s *)__nwlog_obj();
      unsigned int sa_len = v50;
      if (!os_log_type_enabled(v15, v50)) {
        goto LABEL_124;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      v54 = "tcp_listener_socket_create";
      os_log_type_t v55 = 1024;
      os_log_type_t v56 = v36;
      os_log_type_t v17 = "%{public}s listen failed %{darwin.errno}d";
      goto LABEL_122;
    }

    if (!v48)
    {
      unint64_t v15 = (os_log_s *)__nwlog_obj();
      unsigned int sa_len = v50;
      if (!os_log_type_enabled(v15, v50)) {
        goto LABEL_124;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      v54 = "tcp_listener_socket_create";
      os_log_type_t v55 = 1024;
      os_log_type_t v56 = v36;
      os_log_type_t v17 = "%{public}s listen failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_122;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v15 = (os_log_s *)__nwlog_obj();
    unsigned int sa_len = v50;
    BOOL v41 = os_log_type_enabled(v15, v50);
    if (!backtrace_string)
    {
      if (!v41) {
        goto LABEL_124;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      v54 = "tcp_listener_socket_create";
      os_log_type_t v55 = 1024;
      os_log_type_t v56 = v36;
      os_log_type_t v17 = "%{public}s listen failed %{darwin.errno}d, no backtrace";
      goto LABEL_122;
    }

    if (v41)
    {
      *(_DWORD *)addrinfo buf = 136446722;
      v54 = "tcp_listener_socket_create";
      os_log_type_t v55 = 1024;
      os_log_type_t v56 = v36;
      os_log_type_t v57 = 2082;
      *(void *)id v58 = backtrace_string;
      v22 = "%{public}s listen failed %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_25;
    }

    goto LABEL_27;
  }

  os_log_type_t v40 = tcp_listener_socket_create_with_fd(a2, a1, v12);
  if (!v40) {
    *a6 = 12;
  }
LABEL_127:
  if (v12 != -1 && !v40) {
    close(v12);
  }
  return v40;
}

      if (v37) {
        free(v37);
      }
      goto LABEL_126;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v178 = "nw_protocol_http1_get_output_frames";
    os_log_type_t v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (v176 == OS_LOG_TYPE_FAULT)
    {
      objc_super v62 = (os_log_s *)__nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176)) {
        goto LABEL_334;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      os_log_type_t v64 = "%{public}s failed to create/reuse potential final output frame of length 0";
      goto LABEL_332;
    }

    if (!v175)
    {
      objc_super v62 = (os_log_s *)__nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176)) {
        goto LABEL_334;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      os_log_type_t v64 = "%{public}s failed to create/reuse potential final output frame of length 0, backtrace limit exceeded";
      goto LABEL_332;
    }

    v69 = (char *)__nw_create_backtrace_string();
    objc_super v62 = (os_log_s *)__nwlog_obj();
    v63 = v176;
    uint64_t v70 = os_log_type_enabled(v62, v176);
    if (!v69)
    {
      if (!v70) {
        goto LABEL_334;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      os_log_type_t v64 = "%{public}s failed to create/reuse potential final output frame of length 0, no backtrace";
      goto LABEL_332;
    }

    if (v70)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v178 = "nw_protocol_http1_get_output_frames";
      v179 = 2082;
      *(void *)v180 = v69;
      os_log_type_t v71 = "%{public}s failed to create/reuse potential final output frame of length 0, dumping backtrace:%{public}s";
LABEL_326:
      _os_log_impl(&dword_181A5C000, v62, v63, v71, buf, 0x16u);
      goto LABEL_327;
    }

    goto LABEL_327;
  }

  v44 = v20[4];
  if (!v44 || (os_log_type_t v45 = *(void *)(v44 + 24)) == 0 || !*(void *)(v45 + 88))
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v178 = "nw_protocol_http1_get_output_frames";
    os_log_type_t v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (v176 == OS_LOG_TYPE_FAULT)
    {
      objc_super v62 = (os_log_s *)__nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176)) {
        goto LABEL_334;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      os_log_type_t v64 = "%{public}s cannot get output frames, output handler missing callback";
      goto LABEL_332;
    }

    if (v175)
    {
      v69 = (char *)__nw_create_backtrace_string();
      objc_super v62 = (os_log_s *)__nwlog_obj();
      v63 = v176;
      v137 = os_log_type_enabled(v62, v176);
      if (v69)
      {
        if (v137)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v178 = "nw_protocol_http1_get_output_frames";
          v179 = 2082;
          *(void *)v180 = v69;
          os_log_type_t v71 = "%{public}s cannot get output frames, output handler missing callback, dumping backtrace:%{public}s";
          goto LABEL_326;
        }

        goto LABEL_327;
      }

      if (!v137) {
        goto LABEL_334;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      os_log_type_t v64 = "%{public}s cannot get output frames, output handler missing callback, no backtrace";
    }

    else
    {
      objc_super v62 = (os_log_s *)__nwlog_obj();
      v63 = v176;
      if (!os_log_type_enabled(v62, v176)) {
        goto LABEL_334;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v178 = "nw_protocol_http1_get_output_frames";
      os_log_type_t v64 = "%{public}s cannot get output frames, output handler missing callback, backtrace limit exceeded";
    }

      free(v40);
      if (!v30)
      {
LABEL_163:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v82 = "nw_protocol_http1_finalize_output_frames";
        os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v71) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v35 = (os_log_s *)gLogObj;
          os_log_type_t v36 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v82 = "nw_protocol_http1_finalize_output_frames";
            v37 = "%{public}s called with null http1";
            goto LABEL_177;
          }

          goto LABEL_178;
        }

        if (!(_BYTE)v71)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v35 = (os_log_s *)gLogObj;
          os_log_type_t v36 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v82 = "nw_protocol_http1_finalize_output_frames";
            v37 = "%{public}s called with null http1, backtrace limit exceeded";
            goto LABEL_177;
          }

          goto LABEL_178;
        }

        BOOL v51 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v35 = (os_log_s *)gLogObj;
        os_log_type_t v36 = type[0];
        objc_super v62 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (!v51)
        {
          if (v62)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v82 = "nw_protocol_http1_finalize_output_frames";
            v37 = "%{public}s called with null http1, no backtrace";
            goto LABEL_177;
          }

          goto LABEL_178;
        }

        if (v62)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v82 = "nw_protocol_http1_finalize_output_frames";
          os_log_type_t v83 = 2082;
          os_log_type_t v84 = v51;
          id v53 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_171;
        }
            }

            if (v59) {
              goto LABEL_126;
            }
            goto LABEL_127;
          }
          v37 = -[NWPrivilegedHelper allKnownEntitlementSet](self, "allKnownEntitlementSet");
          [v37 addObject:v36];
        }

        os_log_type_t v33 = [v31 countByEnumeratingWithState:&v86 objects:v104 count:16];
        if (v33) {
          continue;
        }
        break;
      }

      v27 = 1;
      v8 = v82;
      BOOL v28 = v80;
      v26 = v81;
LABEL_31:

      ++v29;
      BOOL v24 = v83;
    }

    while (v29 != v26);
    v26 = [v83 countByEnumeratingWithState:&v90 objects:v105 count:16];
  }

  while (v26);

  if ((v27 & 1) != 0)
  {
    -[NWPrivilegedHelper handlers](self, "handlers");
    os_log_type_t v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = v84;
    os_log_type_t v9 = v85;
    [v38 setObject:v85 forKeyedSubscript:v84];

    goto LABEL_141;
  }

    if (v36) {
      free(v36);
    }
    return 0xFFFFFFFFLL;
  }

  v5 = (2 * a2);
  if (!(_DWORD)v5)
  {
    __nwlog_obj();
    id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
    *(_DWORD *)os_log_type_t v76 = 136446210;
    *(void *)&v76[4] = "strict_calloc";
    v43 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v43);
    if ((_DWORD)result) {
      goto LABEL_127;
    }
    free(v43);
  }

  id v6 = (char *)calloc((2 * a2), 0x10uLL);
  if (v6)
  {
    if ((_DWORD)v5) {
      goto LABEL_7;
    }
    goto LABEL_88;
  }

  __nwlog_obj();
  v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
  *(_DWORD *)os_log_type_t v76 = 136446722;
  *(void *)&v76[4] = "strict_calloc";
  *(_WORD *)&v76[12] = 2048;
  *(void *)&v76[14] = v5;
  v77 = 2048;
  v78 = 16LL;
  os_log_type_t v45 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v45);
  if ((_DWORD)result) {
    goto LABEL_127;
  }
  free(v45);
  if (!(_DWORD)v5)
  {
LABEL_88:
    __nwlog_obj();
    v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
    *(_DWORD *)os_log_type_t v76 = 136446210;
    *(void *)&v76[4] = "strict_calloc";
    os_log_type_t v47 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v47);
    if ((_DWORD)result) {
      goto LABEL_127;
    }
    free(v47);
  }

      if (*(void *)&v81[16])
      {
        free(*(void **)&v81[16]);
        *(void *)&v81[16] = 0LL;
      }

      if (v82[0])
      {
        free(v82[0]);
        v82[0] = 0LL;
      }

      if (__size[0]) {
        free((void *)__size[0]);
      }
      *a3 = 0LL;
      return 0xFFFFFFFFLL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)addrinfo buf = 136446722;
    v77 = "copyconninfo";
    v78 = 1024;
    *(_DWORD *)os_log_type_t v79 = a1;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v23;
    BOOL v41 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v74 = 0;
    if ((__nwlog_fault(v41, &type, &v74) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v42 = (os_log_s *)__nwlog_obj();
        v43 = type;
        if (!os_log_type_enabled(v42, type)) {
          goto LABEL_122;
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v77 = "copyconninfo";
        v78 = 1024;
        *(_DWORD *)os_log_type_t v79 = a1;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v23;
        v44 = "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d";
        goto LABEL_121;
      }

      if (!v74)
      {
        id v42 = (os_log_s *)__nwlog_obj();
        v43 = type;
        if (!os_log_type_enabled(v42, type)) {
          goto LABEL_122;
        }
        *(_DWORD *)addrinfo buf = 136446722;
        v77 = "copyconninfo";
        v78 = 1024;
        *(_DWORD *)os_log_type_t v79 = a1;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v23;
        v44 = "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_121;
      }

      id v53 = (char *)__nw_create_backtrace_string();
      id v42 = (os_log_s *)__nwlog_obj();
      v43 = type;
      v54 = os_log_type_enabled(v42, type);
      if (v53)
      {
        if (v54)
        {
          *(_DWORD *)addrinfo buf = 136446978;
          v77 = "copyconninfo";
          v78 = 1024;
          *(_DWORD *)os_log_type_t v79 = a1;
          *(_WORD *)&v79[4] = 1024;
          *(_DWORD *)&v79[6] = v23;
          LOWORD(v80[0]) = 2082;
          *(void *)((char *)v80 + 2) = v53;
          _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x22u);
        }

        free(v53);
        goto LABEL_122;
      }

      if (v54)
      {
        *(_DWORD *)addrinfo buf = 136446722;
        v77 = "copyconninfo";
        v78 = 1024;
        *(_DWORD *)os_log_type_t v79 = a1;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v23;
        v44 = "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d, no backtrace";
LABEL_121:
        _os_log_impl(&dword_181A5C000, v42, v43, v44, buf, 0x18u);
      }
    }

      goto LABEL_80;
    }

    if (!v55)
    {
      __nwlog_obj();
      BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v53 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl( &dword_181A5C000,  v18,  v53,  "%{public}s called with null max_streams_unidirectional, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_124;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v45 = v56;
    v46 = os_log_type_enabled(v18, v56);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl( &dword_181A5C000,  v18,  v45,  "%{public}s called with null max_streams_unidirectional, no backtrace",  buf,  0xCu);
      }

      goto LABEL_124;
    }

    if (v46)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      id v58 = "nw_quic_get_remote_transport_parameters";
      v59 = 2082;
      char v60 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v18,  v45,  "%{public}s called with null max_streams_unidirectional, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_79;
  }

        if (v54) {
          free(v54);
        }
LABEL_126:
        _Block_object_dispose(&v95, 8);
        return;
      case 3:
        unint64_t v15 = *(void *)(a1 + 912);
        if (!v15) {
          goto LABEL_126;
        }
        v16 = *(unsigned __int16 *)(v15 + 736);
        if ((v16 & 0x400) == 0 || *(void *)(v15 + 528) || *(_BYTE *)(v15 + 634) || *(_BYTE *)(v15 + 635)) {
          goto LABEL_25;
        }
        os_log_type_t v17 = v16 & 0xFFFFFBFF | (*(unsigned __int8 *)(v15 + 738) << 16);
        *(_WORD *)(v15 + 736) = v16 & 0xFBFF;
        *(_BYTE *)(v15 + 738) = BYTE2(v17);
        BOOL v18 = *(void *)(v15 + 32);
        if (v18)
        {
          v19 = *(void *)(v18 + 24);
          if (v19)
          {
            v20 = *(void (**)(uint64_t, uint64_t))(v19 + 32);
            if (v20)
            {
              v20(v18, v15);
              goto LABEL_25;
            }
          }
        }

        __nwlog_obj();
        os_log_type_t v38 = *(void *)(v15 + 32);
        if (v38)
        {
          v39 = *(const char **)(v38 + 16);
          if (!v39) {
            v39 = "invalid";
          }
        }

        else
        {
          v39 = "invalid";
        }

        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v39;
        os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(__src) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          log = (os_log_s *)__nwlog_obj();
          char v60 = type[0];
          if (os_log_type_enabled(log, type[0]))
          {
            BOOL v41 = *(void *)(v15 + 32);
            if (v41)
            {
              id v42 = *(const char **)(v41 + 16);
              if (!v42) {
                id v42 = "invalid";
              }
            }

            else
            {
              id v42 = "invalid";
            }

            LODWORD(buf[0]) = 136446466;
            *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v42;
            BOOL v51 = log;
            os_log_type_t v52 = v60;
            id v53 = "%{public}s protocol %{public}s has invalid disconnect callback";
            goto LABEL_104;
          }

          goto LABEL_105;
        }

        if (!(_BYTE)__src)
        {
          logb = (os_log_s *)__nwlog_obj();
          objc_super v62 = type[0];
          if (os_log_type_enabled(logb, type[0]))
          {
            os_log_type_t v47 = *(void *)(v15 + 32);
            if (v47)
            {
              BOOL v48 = *(const char **)(v47 + 16);
              if (!v48) {
                BOOL v48 = "invalid";
              }
            }

            else
            {
              BOOL v48 = "invalid";
            }

            LODWORD(buf[0]) = 136446466;
            *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v48;
            BOOL v51 = logb;
            os_log_type_t v52 = v62;
            id v53 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
LABEL_104:
            _os_log_impl(&dword_181A5C000, v51, v52, v53, (uint8_t *)buf, 0x16u);
          }

      goto LABEL_125;
    }

    if (!v52)
    {
      __nwlog_obj();
      v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v51 = v53;
      if (os_log_type_enabled(v27, v53))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        os_log_type_t v56 = "nw_proxy_hop_add_token_header";
        _os_log_impl( &dword_181A5C000,  v27,  v51,  "%{public}s called with null value, backtrace limit exceeded",  (uint8_t *)type,  0xCu);
      }

      goto LABEL_124;
    }

    v32 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v43 = v53;
    v44 = os_log_type_enabled(v27, v53);
    if (!v32)
    {
      if (v44)
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        os_log_type_t v56 = "nw_proxy_hop_add_token_header";
        _os_log_impl( &dword_181A5C000,  v27,  v43,  "%{public}s called with null value, no backtrace",  (uint8_t *)type,  0xCu);
      }

      goto LABEL_124;
    }

    if (v44)
    {
      *(_DWORD *)os_log_type_t type = 136446466;
      os_log_type_t v56 = "nw_proxy_hop_add_token_header";
      os_log_type_t v57 = 2082;
      id v58 = v32;
      _os_log_impl( &dword_181A5C000,  v27,  v43,  "%{public}s called with null value, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
    }

LABEL_81:
    free(v32);
    if (!v13) {
      goto LABEL_10;
    }
LABEL_126:
    nw_parameters_t v11 = (char *)v13;
    goto LABEL_9;
  }

  nw_masque_options_add_extra_header(v10[5], a2, (uint64_t)v54);
  nw_parameters_t v11 = v54;
  if (v54) {
LABEL_9:
  }
    free(v11);
LABEL_10:
}

  if (v21) {
    free(v21);
  }
LABEL_18:
  if (!a2)
  {
    if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v67 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        id v68 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)addrinfo buf = 136447234;
        v72 = "nw_http2_protocol_close";
        v73 = 2082;
        os_log_type_t v74 = (void *)(a1 + 390);
        BOOL v75 = 2080;
        os_log_type_t v76 = " ";
        v77 = 1024;
        v78 = v68;
        os_log_type_t v79 = 2048;
        v80[0] = a3;
        _os_log_impl( &dword_181A5C000,  v67,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> sent input_finished to protocol %p",  buf,  0x30u);
      }
    }

            if (nw_http2_submit_message(v11, v17, v19, (uint64_t)a1))
            {
              ++*(_WORD *)(v11 + 374);
              nw_http2_session_send(v11);
              return;
            }

            __nwlog_obj();
            v69 = *(_DWORD *)(v19 + 176);
            *(_DWORD *)addrinfo buf = 136447234;
            v111 = "nw_protocol_http2_frame_output_finalizer";
            v112 = 2048;
            *(void *)os_log_type_t v113 = v17;
            *(_WORD *)&v113[8] = 2048;
            *(void *)&v113[10] = v19;
            *(_WORD *)&v113[18] = 1024;
            *(_DWORD *)&v113[20] = v69;
            *(_WORD *)&v113[24] = 2048;
            *(void *)&v113[26] = a1;
            uint64_t v70 = (const char *)_os_log_send_and_compose_impl();
            LOBYTE(type) = 16;
            LOBYTE(v108) = 0;
            if (__nwlog_fault(v70, &type, &v108))
            {
              if (type == 17)
              {
                os_log_type_t v71 = (os_log_s *)__nwlog_obj();
                v72 = type;
                if (!os_log_type_enabled(v71, (os_log_type_t)type)) {
                  goto LABEL_170;
                }
                v73 = *(_DWORD *)(v19 + 176);
                *(_DWORD *)addrinfo buf = 136447234;
                v111 = "nw_protocol_http2_frame_output_finalizer";
                v112 = 2048;
                *(void *)os_log_type_t v113 = v17;
                *(_WORD *)&v113[8] = 2048;
                *(void *)&v113[10] = v19;
                *(_WORD *)&v113[18] = 1024;
                *(_DWORD *)&v113[20] = v73;
                *(_WORD *)&v113[24] = 2048;
                *(void *)&v113[26] = a1;
                os_log_type_t v74 = "%{public}s failed to submit request for protocol %p, stream %p (might have stream id %d), frame %p";
LABEL_169:
                _os_log_impl(&dword_181A5C000, v71, v72, v74, buf, 0x30u);
                goto LABEL_170;
              }

              if (!(_BYTE)v108)
              {
                os_log_type_t v71 = (os_log_s *)__nwlog_obj();
                v72 = type;
                if (!os_log_type_enabled(v71, (os_log_type_t)type)) {
                  goto LABEL_170;
                }
                v85 = *(_DWORD *)(v19 + 176);
                *(_DWORD *)addrinfo buf = 136447234;
                v111 = "nw_protocol_http2_frame_output_finalizer";
                v112 = 2048;
                *(void *)os_log_type_t v113 = v17;
                *(_WORD *)&v113[8] = 2048;
                *(void *)&v113[10] = v19;
                *(_WORD *)&v113[18] = 1024;
                *(_DWORD *)&v113[20] = v85;
                *(_WORD *)&v113[24] = 2048;
                *(void *)&v113[26] = a1;
                os_log_type_t v74 = "%{public}s failed to submit request for protocol %p, stream %p (might have stream id %d), frame %p"
                      ", backtrace limit exceeded";
                goto LABEL_169;
              }

              BOOL v75 = (char *)__nw_create_backtrace_string();
              os_log_type_t v71 = (os_log_s *)__nwlog_obj();
              v72 = type;
              os_log_type_t v76 = os_log_type_enabled(v71, (os_log_type_t)type);
              if (!v75)
              {
                if (!v76) {
                  goto LABEL_170;
                }
                v86 = *(_DWORD *)(v19 + 176);
                *(_DWORD *)addrinfo buf = 136447234;
                v111 = "nw_protocol_http2_frame_output_finalizer";
                v112 = 2048;
                *(void *)os_log_type_t v113 = v17;
                *(_WORD *)&v113[8] = 2048;
                *(void *)&v113[10] = v19;
                *(_WORD *)&v113[18] = 1024;
                *(_DWORD *)&v113[20] = v86;
                *(_WORD *)&v113[24] = 2048;
                *(void *)&v113[26] = a1;
                os_log_type_t v74 = "%{public}s failed to submit request for protocol %p, stream %p (might have stream id %d), frame %p, no backtrace";
                goto LABEL_169;
              }

              if (v76)
              {
                v77 = *(_DWORD *)(v19 + 176);
                *(_DWORD *)addrinfo buf = 136447490;
                v111 = "nw_protocol_http2_frame_output_finalizer";
                v112 = 2048;
                *(void *)os_log_type_t v113 = v17;
                *(_WORD *)&v113[8] = 2048;
                *(void *)&v113[10] = v19;
                *(_WORD *)&v113[18] = 1024;
                *(_DWORD *)&v113[20] = v77;
                *(_WORD *)&v113[24] = 2048;
                *(void *)&v113[26] = a1;
                *(_WORD *)&v113[34] = 2082;
                *(void *)&v113[36] = v75;
                _os_log_impl( &dword_181A5C000,  v71,  v72,  "%{public}s failed to submit request for protocol %p, stream %p (might have stream id %d), frame %p, du mping backtrace:%{public}s",  buf,  0x3Au);
              }

              free(v75);
            }

LABEL_253:
        if (v111) {
          free(v111);
        }
        v30 = 0LL;
        goto LABEL_148;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v42 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446210;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      v43 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v130 = 0;
      if (__nwlog_fault(v43, &type, &v130))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = (os_log_s *)(id)gLogObj;
          os_log_type_t v45 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s nw_quic_create_connection_options failed", buf, 0xCu);
          }
        }

        else if (v130)
        {
          id v53 = __nw_create_backtrace_string();
          if (v53)
          {
            v54 = (char *)v53;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v55 = (os_log_s *)(id)gLogObj;
            os_log_type_t v56 = type;
            if (os_log_type_enabled(v55, type))
            {
              *(_DWORD *)addrinfo buf = 136446466;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              __int16 v134 = 2082;
              v135 = v54;
              _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s nw_quic_create_connection_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v54);
            if (!v43) {
              goto LABEL_117;
            }
            goto LABEL_116;
          }

          __nwlog_obj();
          v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v81 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            _os_log_impl( &dword_181A5C000,  v44,  v81,  "%{public}s nw_quic_create_connection_options failed, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = (os_log_s *)(id)gLogObj;
          os_log_type_t v76 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            _os_log_impl( &dword_181A5C000,  v44,  v76,  "%{public}s nw_quic_create_connection_options failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v43)
      {
LABEL_117:
        v30 = 0LL;
LABEL_149:

        goto LABEL_150;
      }

          if (*(_DWORD *)(v2 + 120) != 1 || *(_DWORD *)(v2 + 116)) {
            goto LABEL_441;
          }
          goto LABEL_296;
        }

        if (*(_DWORD *)(v2 + 116) == 2 && nw_endpoint_flow_get_is_leaf_handler(*(void **)(v2 + 248)))
        {
          os_log_type_t v82 = *(_DWORD *)(v2 + 120);
          minimize_logging = nw_endpoint_handler_get_minimize_logging((void *)v2);
          logging_disabled = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v82 == 3)
          {
            if (minimize_logging)
            {
              if ((logging_disabled & 1) != 0) {
                goto LABEL_351;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v85 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
              {
                v331 = nw_endpoint_handler_get_id_string(v424);
                v332 = nw_endpoint_handler_dry_run_string(v424);
                v333 = nw_endpoint_handler_copy_endpoint(v424);
                v334 = nw_endpoint_get_logging_description(v333);
                v335 = nw_endpoint_handler_state_string(v424);
                v336 = nw_endpoint_handler_mode_string(v424);
                v337 = nw_endpoint_handler_copy_current_path(v424);
                LODWORD(buf[0]) = 136447746;
                *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(void *)((char *)&buf[1] + 6) = v331;
                HIWORD(buf[2]) = 2082;
                buf[3] = v332;
                LOWORD(buf[4]) = 2082;
                *(void *)((char *)&buf[4] + 2) = v334;
                WORD1(buf[5]) = 2082;
                *(void *)((char *)&buf[5] + 4) = v335;
                WORD2(buf[6]) = 2082;
                *(void *)((char *)&buf[6] + 6) = v336;
                HIWORD(buf[7]) = 2114;
                buf[8] = v337;
                _os_log_impl( &dword_181A5C000,  v85,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow was ready previo usly, handling updated path",  (uint8_t *)buf,  0x48u);
              }

              goto LABEL_121;
            }

            if ((logging_disabled & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v85 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
              {
                v86 = nw_endpoint_handler_get_id_string((void *)v2);
                v87 = nw_endpoint_handler_dry_run_string((void *)v2);
                v88 = nw_endpoint_handler_copy_endpoint((void *)v2);
                os_log_type_t v89 = nw_endpoint_get_logging_description(v88);
                v90 = nw_endpoint_handler_state_string((void *)v2);
                os_log_type_t v91 = nw_endpoint_handler_mode_string((void *)v2);
                v92 = nw_endpoint_handler_copy_current_path((void *)v2);
                LODWORD(buf[0]) = 136447746;
                *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(void *)((char *)&buf[1] + 6) = v86;
                HIWORD(buf[2]) = 2082;
                buf[3] = v87;
                LOWORD(buf[4]) = 2082;
                *(void *)((char *)&buf[4] + 2) = v89;
                WORD1(buf[5]) = 2082;
                *(void *)((char *)&buf[5] + 4) = v90;
                WORD2(buf[6]) = 2082;
                *(void *)((char *)&buf[6] + 6) = v91;
                HIWORD(buf[7]) = 2114;
                buf[8] = v92;
                _os_log_impl( &dword_181A5C000,  v85,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow was ready previo usly, handling updated path",  (uint8_t *)buf,  0x48u);
              }

    if (v202) {
      free(v202);
    }
    v5 = 0LL;
    goto LABEL_231;
  }

  id v6 = (unsigned int *)v4;
  v7 = v6[29];

  if ((_DWORD)v7 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v24 = (id)gLogObj;
    id v25 = v5;
    else {
      v26 = off_189BBBBC0[v7];
    }
    *(_DWORD *)addrinfo buf = 136446722;
    *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_proxy startWithHandler:]";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v26;
    *(_WORD *)&buf[22] = 2082;
    v280 = (uint64_t (*)(uint64_t, uint64_t))"proxy";
    v27 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v261) = 0;
    if (__nwlog_fault(v27, type, &v261))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v28 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          else {
            v30 = off_189BBBBC0[v7];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_proxy startWithHandler:]";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v30;
          *(_WORD *)&buf[22] = 2082;
          v280 = (uint64_t (*)(uint64_t, uint64_t))"proxy";
          _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if ((_BYTE)v261)
      {
        id v31 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v28 = (os_log_s *)(id)gLogObj;
        v32 = type[0];
        os_log_type_t v33 = os_log_type_enabled(v28, type[0]);
        if (v31)
        {
          if (v33)
          {
            else {
              os_log_type_t v34 = off_189BBBBC0[v7];
            }
            *(_DWORD *)addrinfo buf = 136446978;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_proxy startWithHandler:]";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v34;
            *(_WORD *)&buf[22] = 2082;
            v280 = (uint64_t (*)(uint64_t, uint64_t))"proxy";
            *(_WORD *)v281 = 2082;
            *(void *)&v281[2] = v31;
            _os_log_impl( &dword_181A5C000,  v28,  v32,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v31);
          if (!v27) {
            goto LABEL_111;
          }
          goto LABEL_110;
        }

        if (v33)
        {
          else {
            os_log_type_t v40 = off_189BBBBC0[v7];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_proxy startWithHandler:]";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v40;
          *(_WORD *)&buf[22] = 2082;
          v280 = (uint64_t (*)(uint64_t, uint64_t))"proxy";
          _os_log_impl( &dword_181A5C000,  v28,  v32,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v28 = (os_log_s *)(id)gLogObj;
        id v35 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          else {
            os_log_type_t v36 = off_189BBBBC0[v7];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_proxy startWithHandler:]";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v36;
          *(_WORD *)&buf[22] = 2082;
          v280 = (uint64_t (*)(uint64_t, uint64_t))"proxy";
          _os_log_impl( &dword_181A5C000,  v28,  v35,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v27)
    {
LABEL_111:
      v5 = v25;
      goto LABEL_231;
    }

          v128 = v60;
          id v129 = v20;
          __nwlog_obj();
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
          char v130 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v278) = 16;
          LOBYTE(__size[0]) = 0;
          if (v278 == 17)
          {
            v131 = (os_log_s *)__nwlog_obj();
            v132 = v278;
            if (os_log_type_enabled(v131, (os_log_type_t)v278))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
              v133 = v131;
              __int16 v134 = v132;
              v135 = "%{public}s called with null response_bytes";
              goto LABEL_266;
            }

            goto LABEL_267;
          }

          if (LOBYTE(__size[0]))
          {
            uint64_t v136 = (char *)__nw_create_backtrace_string();
            v137 = (os_log_s *)__nwlog_obj();
            v138 = v278;
            v139 = os_log_type_enabled(v137, (os_log_type_t)v278);
            if (v136)
            {
              if (v139)
              {
                *(_DWORD *)addrinfo buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v136;
                _os_log_impl( &dword_181A5C000,  v137,  v138,  "%{public}s called with null response_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v136);
              goto LABEL_267;
            }

            if (!v139)
            {
LABEL_267:
              if (v130) {
                free(v130);
              }
              v20 = v129;
              id v21 = v264;
              char v60 = v128;
              goto LABEL_270;
            }

            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
            v133 = v137;
            __int16 v134 = v138;
            v135 = "%{public}s called with null response_bytes, no backtrace";
          }

          else
          {
            v140 = (os_log_s *)__nwlog_obj();
            v141 = v278;
            if (!os_log_type_enabled(v140, (os_log_type_t)v278)) {
              goto LABEL_267;
            }
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
            v133 = v140;
            __int16 v134 = v141;
            v135 = "%{public}s called with null response_bytes, backtrace limit exceeded";
          }

                  if (v145) {
                    free(v145);
                  }
                  nw_parameters_t v11 = v144;
                  size_t v14 = v346;
                  goto LABEL_43;
                }

LABEL_116:
      free(v43);
      goto LABEL_117;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v35 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (__nwlog_fault(v36, &type, &v130))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (os_log_s *)(id)gLogObj;
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s nw_tls_create_options failed", buf, 0xCu);
        }
      }

      else if (v130)
      {
        v46 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (os_log_s *)(id)gLogObj;
        os_log_type_t v47 = type;
        BOOL v48 = os_log_type_enabled(v37, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            __int16 v134 = 2082;
            v135 = v46;
            _os_log_impl( &dword_181A5C000,  v37,  v47,  "%{public}s nw_tls_create_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v46);
          if (!v36) {
            goto LABEL_103;
          }
          goto LABEL_102;
        }

        if (v48)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          _os_log_impl(&dword_181A5C000, v37, v47, "%{public}s nw_tls_create_options failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (os_log_s *)(id)gLogObj;
        os_log_type_t v67 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          _os_log_impl( &dword_181A5C000,  v37,  v67,  "%{public}s nw_tls_create_options failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v36)
    {
LABEL_103:
      v30 = 0LL;
LABEL_150:

      goto LABEL_151;
    }

      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      if (!v34) {
        goto LABEL_118;
      }
      goto LABEL_117;
    }

    if (v140 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v43 = v140;
      if (os_log_type_enabled(v42, v140))
      {
        v44 = (const char *)v28[2];
        if (!v44) {
          v44 = "invalid";
        }
        LODWORD(buf[0]) = 136446722;
        *(void *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
        WORD6(buf[0]) = 2082;
        *(void *)((char *)buf + 14) = v44;
        WORD3(buf[1]) = 2048;
        *((void *)&buf[1] + 1) = v28;
        _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback",  (uint8_t *)buf,  0x20u);
      }
    }

    else
    {
      if (v137)
      {
        BOOL v48 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v50 = v140;
        BOOL v51 = os_log_type_enabled(v49, v140);
        if (v48)
        {
          if (v51)
          {
            os_log_type_t v52 = (const char *)v28[2];
            if (!v52) {
              os_log_type_t v52 = "invalid";
            }
            LODWORD(buf[0]) = 136446978;
            *(void *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
            WORD6(buf[0]) = 2082;
            *(void *)((char *)buf + 14) = v52;
            WORD3(buf[1]) = 2048;
            *((void *)&buf[1] + 1) = v28;
            LOWORD(buf[2]) = 2082;
            *(void *)((char *)&buf[2] + 2) = v48;
            _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x2Au);
          }

          free(v48);
        }

        else
        {
          if (v51)
          {
            uint64_t v70 = (const char *)v28[2];
            if (!v70) {
              uint64_t v70 = "invalid";
            }
            LODWORD(buf[0]) = 136446722;
            *(void *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
            WORD6(buf[0]) = 2082;
            *(void *)((char *)buf + 14) = v70;
            WORD3(buf[1]) = 2048;
            *((void *)&buf[1] + 1) = v28;
            _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace",  (uint8_t *)buf,  0x20u);
          }
        }

        goto LABEL_112;
      }

      __nwlog_obj();
      id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v68 = v140;
      if (os_log_type_enabled(v42, v140))
      {
        v69 = (const char *)v28[2];
        if (!v69) {
          v69 = "invalid";
        }
        LODWORD(buf[0]) = 136446722;
        *(void *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
        WORD6(buf[0]) = 2082;
        *(void *)((char *)buf + 14) = v69;
        WORD3(buf[1]) = 2048;
        *((void *)&buf[1] + 1) = v28;
        _os_log_impl( &dword_181A5C000,  v42,  v68,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded",  (uint8_t *)buf,  0x20u);
      }
    }

LABEL_112:
    BOOL v41 = (char *)v131;
    goto LABEL_113;
  }

    if (v77) {
      free(v77);
    }
    goto LABEL_89;
  }

  nw_context_assert_queue(v3[3]);
  if ((*((_BYTE *)v4 + 109) & 0x40) != 0)
  {
    v5 = nw_endpoint_handler_copy_connected_flow_handler(v4[18]);
    id v6 = v5;
    if (!v5)
    {
LABEL_88:

      goto LABEL_89;
    }

    v94 = v5;
    v7 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_establishment_report);
    if (v7)
    {
      v92 = a2;
      v8 = v6;
      v96 = v8->parameters;

      os_log_type_t v9 = v4[18];
      v10 = (v9 >> 16) ^ HIDWORD(v9) ^ HIWORD(v9) ^ v9;
      os_log_type_t v93 = (id)v9;
      if (!v9) {
        LOWORD(v10) = 0;
      }
      BOOL v109 = v10;
      os_log_type_t v108 = WORD2(v8) ^ WORD1(v8) ^ HIWORD(v8) ^ (unsigned __int16)v8;
      event_milliseconds = nw_connection_get_event_milliseconds(v4, 1, 1, &v109, 0xFFFFFFFFLL);
      v12 = nw_connection_get_event_milliseconds(v4, 3, 6, &v109, 0LL);
      v13 = nw_connection_get_event_milliseconds(v4, 1, 3, &v109, 0xFFFFFFFFLL);
      if (v13 >= v12 || v13 == -1) {
        unint64_t v15 = event_milliseconds;
      }
      else {
        unint64_t v15 = v13;
      }
      v7->attempt_started_after_milliseconds = v15;
      v7->duration_milliseconds = v12 - v15;
      os_log_type_t v97 = v15;
      v16 = nw_connection_get_event_milliseconds(v4, 3, 3, &v108, 0LL);
      if (v16 != -1 && v16 > v97) {
        v7->flow_started_after_milliseconds = v16 - v97;
      }
      os_log_type_t v17 = nw_endpoint_flow_copy_protocol_establishment_reports(v4[18]);
      protocol_reports = v7->protocol_reports;
      v7->protocol_reports = (OS_nw_array *)v17;

      v19 = v8;
      v20 = 0;
      os_log_type_t v95 = v19;
      do
      {
        id v21 = v19;
        v22 = *((_DWORD *)v21 + 29);

        BOOL v23 = v21;
        v19 = (id *)v23[9];

        if (v22 == 1) {
          ++v20;
        }
      }

      while (v19);
      if (v20)
      {
        BOOL v24 = nw_array_create();
        resolution_reports = v7->resolution_reports;
        v7->resolution_reports = (OS_nw_array *)v24;

        v26 = v95;
        v27 = nw_endpoint_handler_copy_endpoint(v26);
        BOOL v28 = 0;
        while (1)
        {
          os_log_type_t v29 = v26;
          v30 = v29;
          if (!v29) {
            break;
          }
          id v31 = *((_DWORD *)v29 + 29);

          if (v31 != 1) {
            goto LABEL_33;
          }
          v32 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_resolution_report);
          v107 = WORD2(v30) ^ WORD1(v30) ^ HIWORD(v30) ^ (unsigned __int16)v30;
          os_log_type_t v33 = nw_endpoint_handler_copy_endpoint(v30);
          os_log_type_t v34 = v33;
          if (v33 && (id v35 = v33, v36 = -[nw_endpoint type](v35, "type"), v35, v36 == 3))
          {
            v37 = 4;
            os_log_type_t v38 = 3;
          }

          else
          {
            v37 = 2;
            os_log_type_t v38 = 1;
          }

          v39 = nw_connection_get_event_milliseconds(v4, 2, v38, &v107, 0LL);
          v32->milliseconds = nw_connection_get_event_milliseconds(v4, 2, v37, &v107, 0LL) - v39;
          if (!v28 && v39 > v97) {
            v7->resolution_started_after_milliseconds = v39 - v97;
          }
          objc_storeStrong((id *)&v32->successful_endpoint, v27);
          v32->endpoint_count = nw_endpoint_handler_get_resolved_endpoint_count(v30);
          v32->source = nw_endpoint_handler_get_resolution_source(v30);
          v32->protocol = nw_endpoint_handler_get_resolution_protocol(v30);
          os_log_type_t v40 = nw_endpoint_handler_copy_preferred_resolved_endpoint(v30);
          preferred_endpoint = v32->preferred_endpoint;
          v32->preferred_endpoint = v40;

          id v42 = (OS_nw_array *)nw_endpoint_handler_copy_resolved_endpoints(v30);
          resolved_endpoints = v32->resolved_endpoints;
          v32->resolved_endpoints = v42;

          BOOL v106 = 0;
          nw_endpoint_handler_get_svcb_report(v30, 0LL, &v106, 0LL);
          *((_BYTE *)v32 + 70) = *((_BYTE *)v32 + 70) & 0xFE | v106;
          os_log_type_t v105 = 0;
          *(void *)addrinfo buf = 0LL;
          nw_endpoint_handler_get_extended_dns_error(v30, &v105, (char **)buf);
          v32->extended_dns_error_code = v105;
          v32->extended_dns_error_extra_text = *(char **)buf;
          nw_array_prepend((uint64_t)v7->resolution_reports, v32);

          ++v28;
LABEL_32:

LABEL_33:
          v44 = nw_endpoint_handler_copy_endpoint(v30);

          os_log_type_t v45 = v30;
          v46 = v45;
          if (!v30)
          {
            __nwlog_obj();
            BOOL v51 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parent";
            os_log_type_t v52 = (char *)_os_log_send_and_compose_impl();

            LOBYTE(v107) = 16;
            LOBYTE(v105) = 0;
            if (__nwlog_fault(v52, &v107, &v105))
            {
              if (v107 == 17)
              {
                __nwlog_obj();
                id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v54 = v107;
                if (os_log_type_enabled(v53, (os_log_type_t)v107))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parent";
                  _os_log_impl(&dword_181A5C000, v53, v54, "%{public}s called with null handler", buf, 0xCu);
                }

                goto LABEL_47;
              }

              if ((_BYTE)v105)
              {
                v59 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                char v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v61 = v107;
                objc_super v62 = os_log_type_enabled(v60, (os_log_type_t)v107);
                if (v59)
                {
                  if (v62)
                  {
                    *(_DWORD *)addrinfo buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parent";
                    v111 = 2082;
                    v112 = v59;
                    _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v59);
                }

                else
                {
                  if (v62)
                  {
                    *(_DWORD *)addrinfo buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parent";
                    _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s called with null handler, no backtrace",  buf,  0xCu);
                  }
                }
              }

              else
              {
                __nwlog_obj();
                id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v64 = v107;
                if (os_log_type_enabled(v53, (os_log_type_t)v107))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parent";
                  _os_log_impl( &dword_181A5C000,  v53,  v64,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
                }

  __break(1u);
}

    goto LABEL_117;
  }

  if (!*((void *)v3 + 13))
  {
    __nwlog_obj();
    id v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v67 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null group->connections", buf, 0xCu);
      }

      goto LABEL_116;
    }

    if (!v67)
    {
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v58 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl( &dword_181A5C000,  v19,  v58,  "%{public}s called with null group->connections, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_116;
    }

    v43 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v44 = type;
    os_log_type_t v45 = os_log_type_enabled(v19, type);
    if (!v43)
    {
      if (v45)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl( &dword_181A5C000,  v19,  v44,  "%{public}s called with null group->connections, no backtrace",  buf,  0xCu);
      }

      goto LABEL_116;
    }

    if (v45)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v43;
      _os_log_impl( &dword_181A5C000,  v19,  v44,  "%{public}s called with null group->connections, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_72;
  }

  if (!v4)
  {
    __nwlog_obj();
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v67 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_181A5C000, v19, v24, "%{public}s called with null new_connection", buf, 0xCu);
      }

      goto LABEL_116;
    }

    if (!v67)
    {
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v59 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl( &dword_181A5C000,  v19,  v59,  "%{public}s called with null new_connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_116;
    }

    v43 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v46 = type;
    os_log_type_t v47 = os_log_type_enabled(v19, type);
    if (!v43)
    {
      if (v47)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_181A5C000, v19, v46, "%{public}s called with null new_connection, no backtrace", buf, 0xCu);
      }

      goto LABEL_116;
    }

    if (v47)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v43;
      _os_log_impl( &dword_181A5C000,  v19,  v46,  "%{public}s called with null new_connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

  if (v43) {
    free(v43);
  }
LABEL_63:
}

    free(backtrace_string);
    goto LABEL_129;
  }

  if (v3->state != 5)
  {
    v10 = v4->parameters;
    if ((nw_parameters_get_is_probe(v10) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v23 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v67 = "nw_connection_add_probe_locked";
      v20 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v64 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v21 = (os_log_s *)(id)gLogObj;
        BOOL v24 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v67 = "nw_connection_add_probe_locked";
          _os_log_impl( &dword_181A5C000,  v21,  v24,  "%{public}s Cannot add probe without setting is_probe in parameters",  buf,  0xCu);
        }
      }

      else if (v64)
      {
        id v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v21 = (os_log_s *)(id)gLogObj;
        v26 = type;
        v27 = os_log_type_enabled(v21, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v67 = "nw_connection_add_probe_locked";
            id v68 = 2082;
            *(void *)v69 = v25;
            _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s Cannot add probe without setting is_probe in parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v25);
          if (!v20) {
            goto LABEL_70;
          }
          goto LABEL_69;
        }

        if (v27)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v67 = "nw_connection_add_probe_locked";
          _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s Cannot add probe without setting is_probe in parameters, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v21 = (os_log_s *)(id)gLogObj;
        v39 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v67 = "nw_connection_add_probe_locked";
          _os_log_impl( &dword_181A5C000,  v21,  v39,  "%{public}s Cannot add probe without setting is_probe in parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_67;
    }

    probes = v3->probes;
    if (probes
      || (v12 = nw_array_create(),
          v13 = v3->probes,
          v3->probes = (OS_nw_array *)v12,
          v13,
          (probes = v3->probes) != 0LL))
    {
      p_isa = (void **)&probes[2].super.super.isa->isa;
      size_t v14 = &probes[3].super.super.isa->isa;
      if (p_isa != v14)
      {
        while (*p_isa != v5)
        {
          if (++p_isa == v14)
          {
            p_isa = (void **)v14;
            break;
          }
        }
      }

      if (p_isa != v14)
      {
        parameters = v3->parameters;
        if (parameters && !nw_path_parameters_get_logging_disabled(*((void *)parameters + 13)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v17 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            top_id = v3->top_id;
            *(_DWORD *)addrinfo buf = 136446722;
            os_log_type_t v67 = "nw_connection_add_probe_locked";
            id v68 = 1024;
            *(_DWORD *)v69 = top_id;
            *(_WORD *)&v69[4] = 2112;
            *(void *)&v69[6] = v5;
            _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Cannot add probe %@ because probe list already contains this probe",  buf,  0x1Cu);
          }
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v67 = "nw_connection_add_probe_locked";
        v20 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v64 = 0;
        if (!__nwlog_fault(v20, &type, &v64))
        {
LABEL_68:
          if (!v20)
          {
LABEL_70:
            os_log_type_t v9 = 0LL;
LABEL_95:

            goto LABEL_96;
          }

LABEL_117:
    if (!v36)
    {
LABEL_119:
      v73 = 0LL;
      goto LABEL_120;
    }

    if (v35) {
      free(v35);
    }
LABEL_7:
    id v6 = *(void *)(a1 + 72);
    if (v6)
    {
      v7 = *(void *)(v6 + 24);
      if (v7)
      {
        v8 = *(void (**)(uint64_t, uint64_t))(v7 + 48);
        if (v8)
        {
          v8(v6, a1 + 24);
          goto LABEL_11;
        }
      }
    }

    __nwlog_obj();
    v12 = *(void *)(a1 + 72);
    v13 = "invalid";
    if (v12)
    {
      size_t v14 = *(const char **)(v12 + 16);
      if (v14) {
        v13 = v14;
      }
    }

    *(_DWORD *)addrinfo buf = 136446466;
    v85 = "nw_http_connect_fail";
    v86 = 2082;
    v87 = (void *)v13;
    unint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v82 = 0;
    if (__nwlog_fault(v15, &type, &v82))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v16 = (os_log_s *)__nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_95;
        }
        BOOL v18 = *(void *)(a1 + 72);
        v19 = "invalid";
        if (v18)
        {
          v20 = *(const char **)(v18 + 16);
          if (v20) {
            v19 = v20;
          }
        }

        *(_DWORD *)addrinfo buf = 136446466;
        v85 = "nw_http_connect_fail";
        v86 = 2082;
        v87 = (void *)v19;
        id v21 = "%{public}s protocol %{public}s has invalid disconnected callback";
        goto LABEL_94;
      }

      if (!v82)
      {
        v16 = (os_log_s *)__nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_95;
        }
        os_log_type_t v61 = *(void *)(a1 + 72);
        objc_super v62 = "invalid";
        if (v61)
        {
          v63 = *(const char **)(v61 + 16);
          if (v63) {
            objc_super v62 = v63;
          }
        }

        *(_DWORD *)addrinfo buf = 136446466;
        v85 = "nw_http_connect_fail";
        v86 = 2082;
        v87 = (void *)v62;
        id v21 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
        goto LABEL_94;
      }

      id v42 = (char *)__nw_create_backtrace_string();
      v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      v43 = os_log_type_enabled(v16, type);
      if (v42)
      {
        if (v43)
        {
          v44 = *(void *)(a1 + 72);
          os_log_type_t v45 = "invalid";
          if (v44)
          {
            v46 = *(const char **)(v44 + 16);
            if (v46) {
              os_log_type_t v45 = v46;
            }
          }

          *(_DWORD *)addrinfo buf = 136446722;
          v85 = "nw_http_connect_fail";
          v86 = 2082;
          v87 = (void *)v45;
          v88 = 2082;
          os_log_type_t v89 = v42;
          _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v42);
        goto LABEL_95;
      }

      if (v43)
      {
        v69 = *(void *)(a1 + 72);
        uint64_t v70 = "invalid";
        if (v69)
        {
          os_log_type_t v71 = *(const char **)(v69 + 16);
          if (v71) {
            uint64_t v70 = v71;
          }
        }

        *(_DWORD *)addrinfo buf = 136446466;
        v85 = "nw_http_connect_fail";
        v86 = 2082;
        v87 = (void *)v70;
        id v21 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
LABEL_94:
        _os_log_impl(&dword_181A5C000, v16, v17, v21, buf, 0x16u);
      }
    }

      if (!v27) {
        return 0LL;
      }
      v26 = (char *)v27;
      goto LABEL_53;
    }

    if (!v61)
    {
      BOOL v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v64 = "nw_protocol_http2_transport_connect";
        v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_115;
      }

      goto LABEL_116;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v28 = (os_log_s *)__nwlog_obj();
    os_log_type_t v29 = type;
    os_log_type_t v47 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v64 = "nw_protocol_http2_transport_connect";
        v30 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_115;
      }

      goto LABEL_116;
    }

    if (v47)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v64 = "nw_protocol_http2_transport_connect";
      BOOL v65 = 2082;
      v66 = backtrace_string;
      v44 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_93;
    }

  if (v36) {
    free(v36);
  }
LABEL_18:
  nw_protocol_remove_instance(v2);
  v13 = *(void *)(v3 + 104);
  if (v13)
  {
    if (*(void *)v13)
    {
      size_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)v13 + 8LL);
      if (v14)
      {
        v14(v13, v2);
LABEL_22:
        *(void *)(v3 + 104) = 0LL;
        goto LABEL_23;
      }
    }

    __nwlog_obj();
    os_log_type_t v50 = *(const char **)(v3 + 104);
    *(_DWORD *)os_log_type_t type = 136446466;
    os_log_type_t v71 = "nw_protocol_http2_transport_destroy";
    v72 = 2048;
    v73 = v50;
    BOOL v51 = (char *)_os_log_send_and_compose_impl();
    v69 = OS_LOG_TYPE_ERROR;
    id v68 = 0;
    if (__nwlog_fault(v51, &v69, &v68))
    {
      if (v69 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v52 = (os_log_s *)__nwlog_obj();
        id v53 = v69;
        if (!os_log_type_enabled(v52, v69)) {
          goto LABEL_123;
        }
        v54 = *(const char **)(v3 + 104);
        *(_DWORD *)os_log_type_t type = 136446466;
        os_log_type_t v71 = "nw_protocol_http2_transport_destroy";
        v72 = 2048;
        v73 = v54;
        os_log_type_t v55 = "%{public}s listen protocol (%p) has invalid disconnected callback";
        goto LABEL_122;
      }

      if (!v68)
      {
        os_log_type_t v52 = (os_log_s *)__nwlog_obj();
        id v53 = v69;
        if (!os_log_type_enabled(v52, v69)) {
          goto LABEL_123;
        }
        v66 = *(const char **)(v3 + 104);
        *(_DWORD *)os_log_type_t type = 136446466;
        os_log_type_t v71 = "nw_protocol_http2_transport_destroy";
        v72 = 2048;
        v73 = v66;
        os_log_type_t v55 = "%{public}s listen protocol (%p) has invalid disconnected callback, backtrace limit exceeded";
        goto LABEL_122;
      }

      os_log_type_t v57 = (char *)__nw_create_backtrace_string();
      os_log_type_t v52 = (os_log_s *)__nwlog_obj();
      id v53 = v69;
      id v58 = os_log_type_enabled(v52, v69);
      if (v57)
      {
        if (v58)
        {
          v59 = *(const char **)(v3 + 104);
          *(_DWORD *)os_log_type_t type = 136446722;
          os_log_type_t v71 = "nw_protocol_http2_transport_destroy";
          v72 = 2048;
          v73 = v59;
          os_log_type_t v74 = 2082;
          BOOL v75 = v57;
          _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s listen protocol (%p) has invalid disconnected callback, dumping backtrace:%{public}s",  (uint8_t *)type,  0x20u);
        }

        free(v57);
        goto LABEL_123;
      }

      if (v58)
      {
        os_log_type_t v67 = *(const char **)(v3 + 104);
        *(_DWORD *)os_log_type_t type = 136446466;
        os_log_type_t v71 = "nw_protocol_http2_transport_destroy";
        v72 = 2048;
        v73 = v67;
        os_log_type_t v55 = "%{public}s listen protocol (%p) has invalid disconnected callback, no backtrace";
LABEL_122:
        _os_log_impl(&dword_181A5C000, v52, v53, v55, (uint8_t *)type, 0x16u);
      }
    }

        free(v79);
        goto LABEL_117;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v80 = (os_log_s *)(id)gLogObj;
      os_log_type_t v89 = type[0];
      if (os_log_type_enabled(v80, type[0]))
      {
        *(_DWORD *)v267 = 136446978;
        v268 = "nw_authentication_credential_add_to_tlv";
        v269 = 2082;
        *(void *)v270 = "buffer_size";
        *(_WORD *)&v270[8] = 2048;
        *(void *)v271 = v75;
        *(_WORD *)&v271[8] = 2048;
        *(void *)v272 = v76;
        _os_log_impl( &dword_181A5C000,  v80,  v89,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded",  v267,  0x2Au);
      }
    }

    goto LABEL_115;
  }

  if (!(_DWORD)v76)
  {
    __nwlog_obj();
    os_log_type_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v267 = 136446210;
    v268 = "strict_calloc";
    os_log_type_t v83 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v83);
    if (result) {
      goto LABEL_384;
    }
    free(v83);
    v77 = 0LL;
    BOOL v28 = (unint64_t)v222;
    goto LABEL_118;
  }

    os_log_type_t v29 = v34 - v59;
    if (v27 > v29)
    {
      v30 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_404;
    }

    os_log_type_t v76 = &v58[v59];
    os_log_type_t v33 = v29 >= v27;
    v77 = v29 - v27;
    if (!v33)
    {
      __nwlog_obj();
      *(_DWORD *)addrinfo buf = 136446978;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v205 = 2082;
      v206 = "remaining";
      v207 = 2048;
      v208 = v27;
      v209 = 2048;
      v210 = v77;
      v78 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v201 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v79 = (os_log_s *)__nwlog_obj();
        BOOL v80 = type;
        if (!os_log_type_enabled(v79, type)) {
          goto LABEL_375;
        }
        *(_DWORD *)addrinfo buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v77;
        os_log_type_t v81 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
      }

      else if (v201)
      {
        v119 = (char *)__nw_create_backtrace_string();
        os_log_type_t v79 = (os_log_s *)__nwlog_obj();
        BOOL v80 = type;
        v120 = os_log_type_enabled(v79, type);
        if (v119)
        {
          if (v120)
          {
            *(_DWORD *)addrinfo buf = 136447234;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2082;
            v206 = "remaining";
            v207 = 2048;
            v208 = v27;
            v209 = 2048;
            v210 = v77;
            v211 = 2082;
            v212 = v119;
            _os_log_impl( &dword_181A5C000,  v79,  v80,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v119);
          goto LABEL_375;
        }

        if (!v120)
        {
LABEL_375:
          if (v78) {
            free(v78);
          }
          goto LABEL_377;
        }

        *(_DWORD *)addrinfo buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v77;
        os_log_type_t v81 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
      }

      else
      {
        os_log_type_t v79 = (os_log_s *)__nwlog_obj();
        BOOL v80 = type;
        if (!os_log_type_enabled(v79, type)) {
          goto LABEL_375;
        }
        *(_DWORD *)addrinfo buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v77;
        os_log_type_t v81 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v79, v80, v81, buf, 0x2Au);
      goto LABEL_375;
    }

    if (!v77) {
      goto LABEL_377;
    }
    BOOL v106 = &v76[v27];
    v27 = v76[v27];
    if (v27 <= 0x3F)
    {
      v107 = 1LL;
      goto LABEL_291;
    }

    if (v27 >> 6 == 2)
    {
      if (v77 < 4) {
        goto LABEL_377;
      }
      v27 = bswap32(*(_DWORD *)v106 & 0xFFFFFF7F);
      v107 = 4LL;
    }

    else
    {
      if (v27 >> 6 == 1)
      {
        if (v77 >= 2)
        {
          v27 = bswap32(*(_WORD *)v106 & 0xFFBF) >> 16;
          v107 = 2LL;
          goto LABEL_291;
        }

      if (!v30)
      {
LABEL_118:

        goto LABEL_130;
      }

    os_log_type_t v52 = v21;
    id v53 = v62;
    v54 = 12;
    goto LABEL_67;
  }

  if (!a2)
  {
    __nwlog_obj();
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    uint64_t v70 = "nw_nat64_write_prefix_to_string";
    v39 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    id v68 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      objc_super v62 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      uint64_t v70 = "nw_nat64_write_prefix_to_string";
      BOOL v23 = "%{public}s called with null dst";
    }

    else if (v68)
    {
      BOOL v48 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      objc_super v62 = type[0];
      v66 = os_log_type_enabled(v21, type[0]);
      if (v48)
      {
        if (v66)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          uint64_t v70 = "nw_nat64_write_prefix_to_string";
          os_log_type_t v71 = 2082;
          *(void *)v72 = v48;
          _os_log_impl( &dword_181A5C000,  v21,  v62,  "%{public}s called with null dst, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_61;
      }

      if (!v66) {
        goto LABEL_68;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      uint64_t v70 = "nw_nat64_write_prefix_to_string";
      BOOL v23 = "%{public}s called with null dst, no backtrace";
    }

    else
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      objc_super v62 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      uint64_t v70 = "nw_nat64_write_prefix_to_string";
      BOOL v23 = "%{public}s called with null dst, backtrace limit exceeded";
    }

    goto LABEL_116;
  }

  if (a3 > 0x31)
  {
    nw_parameters_t v11 = *a1;
    if ((v11 - 4) >= 5 && (_DWORD)v11 != 12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = (id)gLogObj;
      os_log_type_t v38 = *a1;
      *(_DWORD *)addrinfo buf = 136446466;
      uint64_t v70 = "nw_nat64_write_prefix_to_string";
      os_log_type_t v71 = 1024;
      *(_DWORD *)v72 = v38;
      v39 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      id v68 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v39, type, &v68))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v41 = (os_log_s *)(id)gLogObj;
          id v42 = type[0];
          if (os_log_type_enabled(v41, type[0]))
          {
            v43 = *a1;
            *(_DWORD *)addrinfo buf = 136446466;
            uint64_t v70 = "nw_nat64_write_prefix_to_string";
            os_log_type_t v71 = 1024;
            *(_DWORD *)v72 = v43;
            v44 = "%{public}s invalid prefix length %d";
LABEL_81:
            id v58 = v41;
            v59 = v42;
LABEL_82:
            _os_log_impl(&dword_181A5C000, v58, v59, v44, buf, 0x12u);
            goto LABEL_83;
          }

          goto LABEL_83;
        }

        if (v68 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          BOOL v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v42 = type[0];
          if (os_log_type_enabled(v41, type[0]))
          {
            os_log_type_t v57 = *a1;
            *(_DWORD *)addrinfo buf = 136446466;
            uint64_t v70 = "nw_nat64_write_prefix_to_string";
            os_log_type_t v71 = 1024;
            *(_DWORD *)v72 = v57;
            v44 = "%{public}s invalid prefix length %d, backtrace limit exceeded";
            goto LABEL_81;
          }

            os_log_type_t v40 = 0LL;
            v39 = v105;
            goto LABEL_117;
          }

          __nwlog_obj();
          os_log_type_t v57 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)os_log_type_t v123 = 136446210;
          *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
          id v58 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v110 = 0;
          if (__nwlog_fault(v58, type, &v110))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              char v60 = type[0];
              if (os_log_type_enabled(v59, type[0]))
              {
                *(_DWORD *)os_log_type_t v123 = 136446210;
                *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                _os_log_impl( &dword_181A5C000,  v59,  v60,  "%{public}s txt: got remove event for non-existent txt_array",  v123,  0xCu);
              }
            }

            else if (v110)
            {
              os_log_type_t v61 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              objc_super v62 = type[0];
              v63 = os_log_type_enabled(v59, type[0]);
              if (v61)
              {
                if (v63)
                {
                  *(_DWORD *)os_log_type_t v123 = 136446466;
                  *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                  v124 = 2082;
                  *(void *)v125 = v61;
                  _os_log_impl( &dword_181A5C000,  v59,  v62,  "%{public}s txt: got remove event for non-existent txt_array, dumping backtrace:%{public}s",  v123,  0x16u);
                }

                free(v61);
                goto LABEL_113;
              }

              if (v63)
              {
                *(_DWORD *)os_log_type_t v123 = 136446210;
                *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                _os_log_impl( &dword_181A5C000,  v59,  v62,  "%{public}s txt: got remove event for non-existent txt_array, no backtrace",  v123,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v64 = type[0];
              if (os_log_type_enabled(v59, type[0]))
              {
                *(_DWORD *)os_log_type_t v123 = 136446210;
                *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                _os_log_impl( &dword_181A5C000,  v59,  v64,  "%{public}s txt: got remove event for non-existent txt_array, backtrace limit exceeded",  v123,  0xCu);
              }
            }
          }

    free(backtrace_string);
    goto LABEL_139;
  }

  v10 = a6;
  a6->tqh_first = 0LL;
  a6->tqh_last = &a6->tqh_first;
  if (!a4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)v177 = 136446210;
    *(void *)&v177[4] = "nw_socket_get_input_frames";
    v154 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    LOBYTE(v168.msg_name) = 0;
    if (buf[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v56 = (os_log_s *)gLogObj;
      os_log_type_t v57 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)v177 = 136446210;
      *(void *)&v177[4] = "nw_socket_get_input_frames";
      id v58 = "%{public}s called with null maximum_bytes";
      goto LABEL_138;
    }

    if (!LOBYTE(v168.msg_name))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v56 = (os_log_s *)gLogObj;
      os_log_type_t v57 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)v177 = 136446210;
      *(void *)&v177[4] = "nw_socket_get_input_frames";
      id v58 = "%{public}s called with null maximum_bytes, backtrace limit exceeded";
      goto LABEL_138;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v56 = (os_log_s *)gLogObj;
    os_log_type_t v57 = buf[0];
    os_log_type_t v61 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (!v61) {
        goto LABEL_139;
      }
      *(_DWORD *)v177 = 136446210;
      *(void *)&v177[4] = "nw_socket_get_input_frames";
      id v58 = "%{public}s called with null maximum_bytes, no backtrace";
      goto LABEL_138;
    }

    if (!v61) {
      goto LABEL_116;
    }
    *(_DWORD *)v177 = 136446466;
    *(void *)&v177[4] = "nw_socket_get_input_frames";
    *(_WORD *)&v177[12] = 2082;
    *(void *)&v177[14] = backtrace_string;
    objc_super v62 = "%{public}s called with null maximum_bytes, dumping backtrace:%{public}s";
    goto LABEL_115;
  }

  v12 = a5;
  if (!(_DWORD)a5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)v177 = 136446210;
    *(void *)&v177[4] = "nw_socket_get_input_frames";
    v154 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    LOBYTE(v168.msg_name) = 0;
    if (buf[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v56 = (os_log_s *)gLogObj;
      os_log_type_t v57 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)v177 = 136446210;
      *(void *)&v177[4] = "nw_socket_get_input_frames";
      id v58 = "%{public}s called with null maximum_frame_count";
      goto LABEL_138;
    }

    if (!LOBYTE(v168.msg_name))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v56 = (os_log_s *)gLogObj;
      os_log_type_t v57 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)v177 = 136446210;
      *(void *)&v177[4] = "nw_socket_get_input_frames";
      id v58 = "%{public}s called with null maximum_frame_count, backtrace limit exceeded";
      goto LABEL_138;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v56 = (os_log_s *)gLogObj;
    os_log_type_t v57 = buf[0];
    v63 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (!v63) {
        goto LABEL_139;
      }
      *(_DWORD *)v177 = 136446210;
      *(void *)&v177[4] = "nw_socket_get_input_frames";
      id v58 = "%{public}s called with null maximum_frame_count, no backtrace";
      goto LABEL_138;
    }

    if (!v63) {
      goto LABEL_116;
    }
    *(_DWORD *)v177 = 136446466;
    *(void *)&v177[4] = "nw_socket_get_input_frames";
    *(_WORD *)&v177[12] = 2082;
    *(void *)&v177[14] = backtrace_string;
    objc_super v62 = "%{public}s called with null maximum_frame_count, dumping backtrace:%{public}s";
    goto LABEL_115;
  }

  v13 = &a1[6].flow_id[13];
  size_t v14 = *(unsigned __int16 *)&a1[6].flow_id[13];
  unint64_t v15 = v14 | (a1[6].flow_id[15] << 16);
  if ((v14 & 0x4000) != 0)
  {
    v20 = 0LL;
    if ((v14 & 0x80) != 0 || !gLogDatapath) {
      return v20;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v59 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v177 = 136446466;
      *(void *)&v177[4] = "nw_socket_get_input_frames";
      *(_WORD *)&v177[12] = 2082;
      *(void *)&v177[14] = (char *)a1 + 404;
      _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Ignoring read because socket is cancelled",  v177,  0x16u);
      return 0LL;
    }

    return 0LL;
  }

  *(_WORD *)v13 = v14 & 0xFDFF;
  a1[6].flow_id[15] = (v15 & 0xFFFFFDFF) >> 16;
  if ((v15 & 0x400) != 0)
  {
    if (_nw_signposts_once == -1)
    {
      if (_nw_signposts_enabled) {
        goto LABEL_13;
      }
    }

    else
    {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_18_64095);
      if (_nw_signposts_enabled)
      {
LABEL_13:
      }
    }

    nw_queue_resume_source((uint64_t)a1[3].identifier->name, (uint64_t)a2);
    os_log_type_t v17 = *(unsigned __int16 *)v13;
    BOOL v18 = v17 & 0xFFFFFBFF | (a1[6].flow_id[15] << 16);
    *(_WORD *)v13 = v17 & 0xFBFF;
    a1[6].flow_id[15] = BYTE2(v18);
  }

  identifier = (int)a1[4].identifier;
  v165 = (uint64_t)v9;
  v161 = a3;
  if (identifier == 2)
  {
    os_log_type_t v64 = (unsigned int *)MEMORY[0x1895FD590];
    BOOL v65 = *MEMORY[0x1895FD590];
    LODWORD(type) = v65;
    v167 = v10;
    if (v65 >= a4)
    {
      os_log_type_t v74 = 0;
      goto LABEL_181;
    }

    *(_DWORD *)addrinfo buf = 4;
    v66 = getsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 4128, &type, (socklen_t *)buf);
    __counta = v66 == 0;
    if (!v66)
    {
      BOOL v65 = type;
LABEL_178:
      if (!v65)
      {
        BOOL v65 = 1024;
        LODWORD(type) = 1024;
      }

      os_log_type_t v74 = __counta;
LABEL_181:
      if (v65 >= a4) {
        v88 = a4;
      }
      else {
        v88 = v65;
      }
      os_log_type_t v89 = nw_calloc_type<unsigned char>(v88);
      v168.msg_name = (void *)v89;
      *(void *)&v168.msg_namelen = v88;
      *(void *)addrinfo buf = 0LL;
      *(_DWORD *)&buf[8] = 0;
      *(void *)((char *)&v171 + 2) = &v168;
      *(_DWORD *)((char *)&v171 + 10) = 1;
      *(void *)&v172[2] = 0LL;
      *(void *)v173 = 0x8000000000LL;
      v90 = recvmsg(*(_DWORD *)&a1[4].flow_id[12], (msghdr *)buf, 0);
      if (v90 < 0)
      {
        os_log_type_t v93 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        if ((_DWORD)v93 == 35)
        {
          if ((*(_WORD *)v13 & 0x80) == 0 && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v94 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v177 = 136446466;
              *(void *)&v177[4] = "nw_socket_get_input_frames";
              *(_WORD *)&v177[12] = 2082;
              *(void *)&v177[14] = (char *)a1 + 404;
              _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Received EWOULDBLOCK",  v177,  0x16u);
            }
          }
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v106 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            v107 = *(_DWORD *)&a1[4].flow_id[12];
            *(_DWORD *)v177 = 136447234;
            *(void *)&v177[4] = "nw_socket_get_input_frames";
            *(_WORD *)&v177[12] = 2080;
            *(void *)&v177[14] = (char *)a1 + 404;
            *(_WORD *)&v177[22] = 1024;
            *(_DWORD *)&v177[24] = v107;
            *(_WORD *)&v177[28] = 1024;
            *(_DWORD *)&v177[30] = v88;
            *(_WORD *)&v177[34] = 1024;
            *(_DWORD *)&v177[36] = v93;
            _os_log_impl( &dword_181A5C000,  v106,  OS_LOG_TYPE_ERROR,  "%{public}s %s recvmsg(fd %d, %u bytes) %{darwin.errno}d",  v177,  0x28u);
          }

          nw_socket_internal_error((uint64_t)p_output_handler, v93);
          nw_socket_input_finished(a1, v108);
        }

    free(backtrace_string);
    goto LABEL_158;
  }

  os_log_type_t v17 = v15;
  BOOL v18 = (char *)calloc(1uLL, a8);
  if (!v18)
  {
    BOOL v28 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446722;
    id v53 = "strict_calloc";
    v54 = 2048;
    os_log_type_t v55 = 1LL;
    os_log_type_t v56 = 2048;
    os_log_type_t v57 = a8;
    id v49 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v49);
    if (result) {
      goto LABEL_161;
    }
    free(v49);
  }

  memcpy(v18, a7, a8);
  *(void *)&v18[a8 - 8] ^= bswap64(a3);
  if (!v17)
  {
    os_log_type_t v29 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446210;
    id v53 = "strict_calloc";
    v30 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v30);
    if (result) {
      goto LABEL_161;
    }
    free(v30);
  }

  v19 = calloc(1uLL, v17);
  if (!v19)
  {
    id v31 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446722;
    id v53 = "strict_calloc";
    v54 = 2048;
    os_log_type_t v55 = 1LL;
    os_log_type_t v56 = 2048;
    os_log_type_t v57 = v17;
    v32 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v32);
    if (result) {
      goto LABEL_161;
    }
    free(v32);
  }

  memcpy(v19, (const void *)(a1 + v16), v17);
  if (a2 == v17)
  {
    os_log_type_t v33 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446210;
    id v53 = "strict_calloc";
    os_log_type_t v34 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v34);
    if (result) {
      goto LABEL_161;
    }
    free(v34);
  }

  v20 = calloc(1uLL, v16);
  if (v20)
  {
LABEL_16:
    ccaes_gcm_decrypt_mode();
    id v21 = ccgcm_one_shot();
    free(v18);
    if (v19) {
      free(v19);
    }
    if (v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        id v53 = "nw_http_decrypt_standalone_aead_chunk";
        v54 = 1024;
        LODWORD(v55) = v21;
        _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_ERROR, "%{public}s Decrypt error: %d", buf, 0x12u);
      }

      if (v20)
      {
        free(v20);
        return 0LL;
      }
    }

    else
    {
      *a9 = v16;
    }

    return (BOOL)v20;
  }

  id v35 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  id v53 = "strict_calloc";
  v54 = 2048;
  os_log_type_t v55 = 1LL;
  os_log_type_t v56 = 2048;
  os_log_type_t v57 = v16;
  os_log_type_t v36 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v36);
  if (!result)
  {
    free(v36);
    goto LABEL_16;
  }

        free(v56);
        goto LABEL_117;
      }

      os_log_type_t v79 = 0LL;
      __nwlog_obj();
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)__int16 v134 = 136446210;
      *(void *)&v134[4] = "nw_endpoint_handler_report_data_stall";
      os_log_type_t v91 = (char *)_os_log_send_and_compose_impl();

      v132[0] = 16;
      buf[0] = 0;
      if (v132[0] == 17)
      {
        __nwlog_obj();
        v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v93 = v132[0];
        if (os_log_type_enabled(v92, (os_log_type_t)v132[0]))
        {
          *(_DWORD *)__int16 v134 = 136446210;
          *(void *)&v134[4] = "nw_endpoint_handler_report_data_stall";
          _os_log_impl(&dword_181A5C000, v92, v93, "%{public}s called with null handler", v134, 0xCu);
        }

      if (v64) {
        free(v64);
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -1;
      return 1LL;
    }

    if ((*(_WORD *)(v43 + 188) & 0x1000) != 0)
    {
      os_log_type_t v45 = *(void *)v43 == 0LL;
      v46 = &qword_18C45F000;
      if ((v44 & 0x80000) != 0) {
        goto LABEL_63;
      }
    }

    else
    {
      os_log_type_t v45 = 0;
      v46 = &qword_18C45F000;
      if ((v44 & 0x80000) != 0) {
        goto LABEL_63;
      }
    }

    if (*((_BYTE *)v46 + 1537))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v151 = (os_log_s *)gconnectionLogObj;
      v152 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      v43 = *(void *)(a1 + 48);
      if (v152)
      {
        v153 = (const char *)(v43 + 191);
        v154 = "";
        v156 = *(_DWORD *)(v43 + 176);
        v155 = *(_DWORD *)(v43 + 180);
        v157 = v43 == 0;
        if (!v43) {
          v153 = "";
        }
        v158 = *(void *)(v43 + 112);
        if (!v157) {
          v154 = " ";
        }
        *(_DWORD *)addrinfo buf = 136448258;
        v213 = "nw_protocol_http2_get_input_frames_block_invoke";
        v214 = 2082;
        v215 = v153;
        v216 = 2080;
        v217 = (uint64_t)v154;
        v218 = 1024;
        *(_DWORD *)v219 = v155;
        *(_WORD *)&v219[4] = 1024;
        *(_DWORD *)&v219[6] = v156;
        *(_WORD *)&v219[10] = 2048;
        *(void *)&v219[12] = v158;
        *(_WORD *)&v219[20] = 1024;
        *(_DWORD *)&v219[22] = v156;
        *(_WORD *)&v219[26] = 2048;
        *(void *)&v219[28] = a2;
        v220 = 1024;
        v221 = v45;
        _os_log_impl( &dword_181A5C000,  v151,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> setting metadata %p from stream %d on frame %p, complete %u",  buf,  0x4Cu);
        v43 = *(void *)(a1 + 48);
      }
    }

    free(v52);
    goto LABEL_143;
  }

  id v49 = (os_log_s *)__nwlog_obj();
  os_log_type_t v50 = type[0];
  if (os_log_type_enabled(v49, (os_log_type_t)type[0]))
  {
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
    BOOL v51 = "%{public}s called with null protocol";
LABEL_142:
    _os_log_impl(&dword_181A5C000, v49, v50, v51, buf, 0xCu);
  }

void sub_181A719FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20, void *a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_protocol_create_options(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v2 = a1;
  v3 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_protocol_options);
  size_t v4 = v2;
  v5 = v4;
  if (!v3) {
    goto LABEL_6;
  }
  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
    v10 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v26.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v10, &v26, &type))
    {
      if (LOBYTE(v26.receiver) == 17)
      {
        __nwlog_obj();
        nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t receiver = (os_log_type_t)v26.receiver;
        if (os_log_type_enabled(v11, (os_log_type_t)v26.receiver))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_181A5C000, v11, receiver, "%{public}s called with null _definition", buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = (os_log_type_t)v26.receiver;
        BOOL v19 = os_log_type_enabled(v11, (os_log_type_t)v26.receiver);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
            __int16 v30 = 2082;
            id v31 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null _definition, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }

        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null _definition, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        nw_parameters_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = (os_log_type_t)v26.receiver;
        if (os_log_type_enabled(v11, (os_log_type_t)v26.receiver))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null _definition, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181A72260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181A7291C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_protocol_options_t nw_tls_create_options(void)
{
  v0 = (void *)nw_protocol_boringssl_copy_definition();
  options = nw_protocol_create_options(v0);

  return (nw_protocol_options_t)options;
}

void sub_181A72C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_options_access_handle(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  v3 = a1;
  id v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v24 = "nw_protocol_options_access_handle";
    v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "nw_protocol_options_access_handle";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (!v21)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "nw_protocol_options_access_handle";
        _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "nw_protocol_options_access_handle";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v15)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v24 = "nw_protocol_options_access_handle";
      __int16 v25 = 2082;
      objc_super v26 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_24;
  }

  if (!v4)
  {
    __nwlog_obj();
    nw_parameters_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v24 = "nw_protocol_options_access_handle";
    v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "nw_protocol_options_access_handle";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null access_block", buf, 0xCu);
      }

void sub_181A730E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = endpoint;
  id v2 = v1;
  if (v1)
  {
    nw_endpoint_type_t v3 = -[nw_endpoint type](v1, "type");
    goto LABEL_3;
  }

  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_get_type";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_get_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A73398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = endpoint;
  id v2 = v1;
  if (v1)
  {
    nw_endpoint_type_t v3 = (const char *)-[nw_endpoint hostname](v1, "hostname");
    goto LABEL_3;
  }

  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_get_hostname";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_hostname";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_get_hostname";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_hostname";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_hostname";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A7364C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = endpoint;
  id v2 = v1;
  if (v1)
  {
    uint16_t v3 = __rev16(-[nw_endpoint port](v1, "port"));
    goto LABEL_3;
  }

  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_get_port";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_port";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_get_port";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_port";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_port";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A73908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_get_identifier(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v16 = "nw_context_get_identifier";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_context_get_identifier";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v16 = "nw_context_get_identifier";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_context_get_identifier";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v16 = "nw_context_get_identifier";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_options_set_prohibit_joining(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *((_BYTE *)v1 + 153) = 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v14 = "nw_protocol_options_set_prohibit_joining";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v14 = "nw_protocol_options_set_prohibit_joining";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v14 = "nw_protocol_options_set_prohibit_joining";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v9)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v14 = "nw_protocol_options_set_prohibit_joining";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v14 = "nw_protocol_options_set_prohibit_joining";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_quic_connection_set_sec_protocol_options(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_sec_protocol_options_block_invoke;
    v13[3] = &unk_189BC6260;
    id v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v18 = "nw_quic_connection_set_sec_protocol_options";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v18 = "nw_quic_connection_set_sec_protocol_options";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v18 = "nw_quic_connection_set_sec_protocol_options";
          __int16 v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v18 = "nw_quic_connection_set_sec_protocol_options";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v18 = "nw_quic_connection_set_sec_protocol_options";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A74134( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_quic_connection(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_quic_connection_definition::quic_definition);

    goto LABEL_5;
  }

  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v18 = "nw_protocol_options_is_quic_connection";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_quic_connection";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v18 = "nw_protocol_options_is_quic_connection";
          __int16 v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_quic_connection";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_quic_connection";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A74440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_definition_is_equal_unsafe(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v22 = "nw_protocol_definition_is_equal_unsafe";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v22 = "nw_protocol_definition_is_equal_unsafe";
        BOOL v13 = "%{public}s called with null definition1";
LABEL_52:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
      }

uint64_t __nw_quic_connection_set_sec_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void sub_181A74938( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_protocol_options;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_idle_timeout(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_idle_timeout";
  v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_idle_timeout";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A74C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

void nw_quic_connection_set_initial_max_streams_bidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_initial_max_streams_bidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
  v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          BOOL v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A74F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return 1LL;
}

void nw_quic_connection_set_initial_max_streams_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_initial_max_streams_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
  v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          BOOL v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A75250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) = *(void *)(a1 + 32);
  return 1LL;
}

void nw_quic_connection_set_is_speculative_attempt(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_is_speculative_attempt_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_is_speculative_attempt";
  v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_is_speculative_attempt";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_is_speculative_attempt";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_is_speculative_attempt";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_is_speculative_attempt";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A7553C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_is_speculative_attempt_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFFEFFFF | (*(unsigned __int8 *)(a1 + 32) << 16);
  *(_WORD *)uint64_t v2 = v3;
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_quic_connection_set_max_streams_update_block(void *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v16[0] = MEMORY[0x1895F87A8];
    v16[1] = 3221225472LL;
    v16[2] = __nw_quic_connection_set_max_streams_update_block_block_invoke;
    v16[3] = &unk_189BC6710;
    id v18 = v6;
    id v17 = v7;
    nw_protocol_options_access_handle(v5, v16);

    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v22 = "nw_quic_connection_set_max_streams_update_block";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v22 = "nw_quic_connection_set_max_streams_update_block";
        _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          BOOL v22 = "nw_quic_connection_set_max_streams_update_block";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v22 = "nw_quic_connection_set_max_streams_update_block";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v22 = "nw_quic_connection_set_max_streams_update_block";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A75884( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_streams_update_block_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *(void **)(a2 + 176);
  *(void *)(a2 + 176) = v4;

  objc_storeStrong((id *)(a2 + 184), *(id *)(a1 + 32));
  return 1LL;
}

void nw_quic_connection_set_keepalive_count(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_keepalive_count_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  id v17 = "nw_quic_connection_set_keepalive_count";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v17 = "nw_quic_connection_set_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          id v17 = "nw_quic_connection_set_keepalive_count";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v17 = "nw_quic_connection_set_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v17 = "nw_quic_connection_set_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A75BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_keepalive_count_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 210) = *(_WORD *)(a1 + 32);
  return 1LL;
}

void nw_protocol_transform_append_protocol(void *a1, int a2, void *a3)
{
  *(void *)&v48[13] = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  os_log_type_t v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v46 = "nw_protocol_transform_append_protocol";
    uint64_t v25 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      objc_super v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v46 = "nw_protocol_transform_append_protocol";
        _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      objc_super v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v46 = "nw_protocol_transform_append_protocol";
          __int16 v47 = 2082;
          *(void *)BOOL v48 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v26,  v31,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_86:
        if (!v25) {
          goto LABEL_36;
        }
        goto LABEL_87;
      }

      if (v32)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v46 = "nw_protocol_transform_append_protocol";
        _os_log_impl(&dword_181A5C000, v26, v31, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      objc_super v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v46 = "nw_protocol_transform_append_protocol";
        _os_log_impl( &dword_181A5C000,  v26,  v38,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_72:
      free(v33);
      if (!v25) {
        goto LABEL_36;
      }
LABEL_87:
      __int16 v23 = (char *)v25;
      goto LABEL_35;
    }
  }

  switch(a2)
  {
    case 2:
      __int16 v13 = v8;
      id v14 = v7;
      objc_storeStrong(v13 + 6, a3);
LABEL_15:

      goto LABEL_36;
    case 3:
      __int16 v13 = v8;
      id v14 = v7;
      objc_storeStrong(v13 + 3, a3);
      goto LABEL_15;
    case 4:
      nw_protocol_stack_append_application_protocol(v8, v7);
      goto LABEL_36;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v15 = (id)gLogObj;
  *(_DWORD *)addrinfo buf = 136446466;
  v46 = "nw_protocol_transform_append_protocol";
  __int16 v47 = 1024;
  *(_DWORD *)BOOL v48 = a2;
  BOOL v16 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (os_log_s *)(id)gLogObj;
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v17, type))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v46 = "nw_protocol_transform_append_protocol";
      __int16 v47 = 1024;
      *(_DWORD *)BOOL v48 = a2;
      _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s Unsupported protocol level %u", buf, 0x12u);
    }

        pthread_mutex_lock(&sSettingsMutex);
        networkd_settings_read_from_file();
LABEL_11:
        pthread_mutex_unlock(&sSettingsMutex);
        goto LABEL_12;
      }

      if (sNWIsBetweenForkAndExec) {
        id v17 = " (forked)";
      }
      else {
        id v17 = "";
      }
      out_token = 136446978;
      BOOL v35 = "networkd_settings_setup_notify_watch";
      os_log_type_t v36 = 2082;
      os_log_type_t v37 = nw_notification_name_settings;
      os_log_type_t v38 = 1024;
      *(_DWORD *)os_log_type_t v39 = v9;
      *(_WORD *)&v39[4] = 2082;
      *(void *)&v39[6] = v17;
      os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      BOOL v32 = 0;
      char v19 = __nwlog_fault(v18, &type, &v32);
      if ((_DWORD)v19)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v21 = (os_log_s *)__nwlog_obj(v19, v20);
          os_log_type_t v22 = type;
          if (!os_log_type_enabled(v21, type)) {
            goto LABEL_70;
          }
          if (sNWIsBetweenForkAndExec) {
            __int16 v23 = " (forked)";
          }
          else {
            __int16 v23 = "";
          }
          out_token = 136446978;
          BOOL v35 = "networkd_settings_setup_notify_watch";
          os_log_type_t v36 = 2082;
          os_log_type_t v37 = nw_notification_name_settings;
          os_log_type_t v38 = 1024;
          *(_DWORD *)os_log_type_t v39 = v9;
          *(_WORD *)&v39[4] = 2082;
          *(void *)&v39[6] = v23;
          os_log_type_t v24 = "%{public}s notify_register_dispatch(%{public}s) [status %u]%{public}s failed";
          goto LABEL_69;
        }

        if (!v32)
        {
          BOOL v21 = (os_log_s *)__nwlog_obj(v19, v20);
          os_log_type_t v22 = type;
          if (!os_log_type_enabled(v21, type)) {
            goto LABEL_70;
          }
          if (sNWIsBetweenForkAndExec) {
            __int16 v30 = " (forked)";
          }
          else {
            __int16 v30 = "";
          }
          out_token = 136446978;
          BOOL v35 = "networkd_settings_setup_notify_watch";
          os_log_type_t v36 = 2082;
          os_log_type_t v37 = nw_notification_name_settings;
          os_log_type_t v38 = 1024;
          *(_DWORD *)os_log_type_t v39 = v9;
          *(_WORD *)&v39[4] = 2082;
          *(void *)&v39[6] = v30;
          os_log_type_t v24 = "%{public}s notify_register_dispatch(%{public}s) [status %u]%{public}s failed, backtrace limit exceeded";
          goto LABEL_69;
        }

        objc_super v26 = (char *)__nw_create_backtrace_string();
        BOOL v21 = (os_log_s *)__nwlog_obj(v26, v27);
        os_log_type_t v22 = type;
        BOOL v28 = os_log_type_enabled(v21, type);
        if (v26)
        {
          if (v28)
          {
            if (sNWIsBetweenForkAndExec) {
              os_log_type_t v29 = " (forked)";
            }
            else {
              os_log_type_t v29 = "";
            }
            out_token = 136447234;
            BOOL v35 = "networkd_settings_setup_notify_watch";
            os_log_type_t v36 = 2082;
            os_log_type_t v37 = nw_notification_name_settings;
            os_log_type_t v38 = 1024;
            *(_DWORD *)os_log_type_t v39 = v9;
            *(_WORD *)&v39[4] = 2082;
            *(void *)&v39[6] = v29;
            os_log_type_t v40 = 2082;
            BOOL v41 = v26;
            _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s notify_register_dispatch(%{public}s) [status %u]%{public}s failed, dumping backtrace:%{public}s",  (uint8_t *)&out_token,  0x30u);
          }

          free(v26);
          goto LABEL_70;
        }

        if (v28)
        {
          if (sNWIsBetweenForkAndExec) {
            os_log_type_t v31 = " (forked)";
          }
          else {
            os_log_type_t v31 = "";
          }
          out_token = 136446978;
          BOOL v35 = "networkd_settings_setup_notify_watch";
          os_log_type_t v36 = 2082;
          os_log_type_t v37 = nw_notification_name_settings;
          os_log_type_t v38 = 1024;
          *(_DWORD *)os_log_type_t v39 = v9;
          *(_WORD *)&v39[4] = 2082;
          *(void *)&v39[6] = v31;
          os_log_type_t v24 = "%{public}s notify_register_dispatch(%{public}s) [status %u]%{public}s failed, no backtrace";
LABEL_69:
          _os_log_impl(&dword_181A5C000, v21, v22, v24, (uint8_t *)&out_token, 0x26u);
        }
      }

        if (v37) {
          free(v37);
        }
LABEL_74:

        unsigned int sa_len = 0LL;
        goto LABEL_75;
      }

      v44 = -9;
      if (custom_data_length < 0xF7) {
        v44 = custom_data_length;
      }
      os_log_type_t v45 = v44 + 8;
      unsigned int sa_len = v45;
      if (v45 <= 0x1Cu) {
        BOOL v41 = 28LL;
      }
      else {
        BOOL v41 = v45;
      }
LABEL_53:

      if (v41 < 0x1D)
      {
LABEL_75:
        v289 = 0LL;
        char v43 = v304;
        BOOL v41 = 28LL;
        goto LABEL_76;
      }

      os_log_type_t v42 = (os_log_type_t *)calloc(v41, 1uLL);
      char v43 = v42;
      if (v42)
      {
        v289 = v42;
        goto LABEL_76;
      }

      __nwlog_obj();
      v251 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v251, OS_LOG_TYPE_ERROR);
      *(_DWORD *)addrinfo buf = 136446722;
      v314 = "strict_calloc";
      v315 = 2048;
      *(void *)v316 = v41;
      *(_WORD *)&v316[8] = 2048;
      *(void *)&v316[10] = 1LL;
      LODWORD(v288) = 32;
      v287 = buf;
      v252 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v252);
      if (!result)
      {
        free(v252);
        char v43 = 0LL;
        v289 = 0LL;
LABEL_76:
        BOOL v51 = -1;
        if (v41 >= 0xFF) {
          os_log_type_t v52 = 255LL;
        }
        else {
          os_log_type_t v52 = v41;
        }
        if (sa_len < 0xFF) {
          BOOL v51 = sa_len;
        }
        switch(v9)
        {
          case 1u:
            id v53 = nw_endpoint_get_address(v10);
            if (v53)
            {
              memcpy(v43, v53, v53->sa_len);
              if (v291)
              {
                v54 = *((void *)v291 + 2);
                if (v52 >= v54 + 28) {
                  memcpy(v43 + 28, *((const void **)v291 + 1), v54);
                }
              }

              os_log_type_t v55 = v52 + 5;
              if (v297 - a3 >= v52 + 5)
              {
                *(_BYTE *)a3 = a2;
                *(_DWORD *)(a3 + 1) = v52;
                if (v43) {
                  goto LABEL_196;
                }
                __nwlog_obj();
                os_log_type_t v101 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)addrinfo buf = 136446722;
                v314 = "nw_necp_append_tlv";
                v315 = 1024;
                *(_DWORD *)v316 = a2;
                *(_WORD *)&v316[4] = 1024;
                *(_DWORD *)&v316[6] = v52;
                LODWORD(v288) = 24;
                v287 = buf;
                os_log_type_t v57 = (char *)_os_log_send_and_compose_impl();

                v312[0] = 16;
                uu[0] = 0;
                if (v312[0] == 17)
                {
                  __nwlog_obj();
                  id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  BOOL v102 = v312[0];
                  if (os_log_type_enabled(v58, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)addrinfo buf = 136446722;
                    v314 = "nw_necp_append_tlv";
                    v315 = 1024;
                    *(_DWORD *)v316 = a2;
                    *(_WORD *)&v316[4] = 1024;
                    *(_DWORD *)&v316[6] = v52;
                    _os_log_impl( &dword_181A5C000,  v58,  v102,  "%{public}s type=%u length=%u but value is NULL",  buf,  0x18u);
                  }

                  goto LABEL_275;
                }

                if (!uu[0])
                {
                  __nwlog_obj();
                  id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v286 = v312[0];
                  if (os_log_type_enabled(v58, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)addrinfo buf = 136446722;
                    v314 = "nw_necp_append_tlv";
                    v315 = 1024;
                    *(_DWORD *)v316 = a2;
                    *(_WORD *)&v316[4] = 1024;
                    *(_DWORD *)&v316[6] = v52;
                    _os_log_impl( &dword_181A5C000,  v58,  v286,  "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded",  buf,  0x18u);
                  }

                  goto LABEL_275;
                }

                v283 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v284 = v312[0];
                v285 = os_log_type_enabled(v58, (os_log_type_t)v312[0]);
                if (!v283)
                {
                  if (v285)
                  {
                    *(_DWORD *)addrinfo buf = 136446722;
                    v314 = "nw_necp_append_tlv";
                    v315 = 1024;
                    *(_DWORD *)v316 = a2;
                    *(_WORD *)&v316[4] = 1024;
                    *(_DWORD *)&v316[6] = v52;
                    _os_log_impl( &dword_181A5C000,  v58,  v284,  "%{public}s type=%u length=%u but value is NULL, no backtrace",  buf,  0x18u);
                  }

                  goto LABEL_275;
                }

                if (v285)
                {
                  *(_DWORD *)addrinfo buf = 136446978;
                  v314 = "nw_necp_append_tlv";
                  v315 = 1024;
                  *(_DWORD *)v316 = a2;
                  *(_WORD *)&v316[4] = 1024;
                  *(_DWORD *)&v316[6] = v52;
                  *(_WORD *)&v316[10] = 2082;
                  *(void *)&v316[12] = v283;
                  _os_log_impl( &dword_181A5C000,  v58,  v284,  "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s",  buf,  0x22u);
                }

                free(v283);
                if (v57) {
                  goto LABEL_277;
                }
              }

              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v56 = (id)gLogObj;
                *(_DWORD *)addrinfo buf = 136447490;
                v314 = "nw_necp_append_tlv";
                v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                LODWORD(v288) = 54;
                v287 = buf;
                os_log_type_t v57 = (char *)_os_log_send_and_compose_impl();

                v312[0] = 16;
                uu[0] = 0;
                if (v312[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  id v58 = (os_log_s *)(id)gLogObj;
                  v59 = v312[0];
                  if (os_log_type_enabled(v58, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)addrinfo buf = 136447490;
                    v314 = "nw_necp_append_tlv";
                    v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = v52 + 5;
                    *(_WORD *)&v316[18] = 2048;
                    *(void *)v317 = v297;
                    *(_WORD *)&v317[8] = 1024;
                    *(_DWORD *)v318 = a2;
                    *(_WORD *)&v318[4] = 1024;
                    *(_DWORD *)&v318[6] = v52;
                    _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
                  }

                  goto LABEL_275;
                }

                if (!uu[0])
                {
                  __nwlog_obj();
                  id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v151 = v312[0];
                  if (os_log_type_enabled(v58, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)addrinfo buf = 136447490;
                    v314 = "nw_necp_append_tlv";
                    v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = v52 + 5;
                    *(_WORD *)&v316[18] = 2048;
                    *(void *)v317 = v297;
                    *(_WORD *)&v317[8] = 1024;
                    *(_DWORD *)v318 = a2;
                    *(_WORD *)&v318[4] = 1024;
                    *(_DWORD *)&v318[6] = v52;
                    _os_log_impl( &dword_181A5C000,  v58,  v151,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
                  }

                  goto LABEL_275;
                }

                v139 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v140 = v312[0];
                v141 = os_log_type_enabled(v58, (os_log_type_t)v312[0]);
                if (!v139)
                {
                  if (v141)
                  {
                    *(_DWORD *)addrinfo buf = 136447490;
                    v314 = "nw_necp_append_tlv";
                    v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = v52 + 5;
                    *(_WORD *)&v316[18] = 2048;
                    *(void *)v317 = v297;
                    *(_WORD *)&v317[8] = 1024;
                    *(_DWORD *)v318 = a2;
                    *(_WORD *)&v318[4] = 1024;
                    *(_DWORD *)&v318[6] = v52;
                    _os_log_impl( &dword_181A5C000,  v58,  v140,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
                  }

                  goto LABEL_275;
                }

                if (v141)
                {
                  *(_DWORD *)addrinfo buf = 136447746;
                  v314 = "nw_necp_append_tlv";
                  v315 = 2048;
                  *(void *)v316 = a3;
                  *(_WORD *)&v316[8] = 2048;
                  *(void *)&v316[10] = v52 + 5;
                  *(_WORD *)&v316[18] = 2048;
                  *(void *)v317 = v297;
                  *(_WORD *)&v317[8] = 1024;
                  *(_DWORD *)v318 = a2;
                  *(_WORD *)&v318[4] = 1024;
                  *(_DWORD *)&v318[6] = v52;
                  v319 = 2082;
                  v320 = v139;
                  _os_log_impl( &dword_181A5C000,  v58,  v140,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
                }

                free(v139);
                if (v57) {
                  goto LABEL_277;
                }
              }

              goto LABEL_278;
            }

            goto LABEL_279;
          case 2u:
            *((_BYTE *)v43 + 1) = 0;
            char *v43 = v51;
            *((_WORD *)v43 + 1) = __rev16(nw_endpoint_get_port(v10));
            *((_DWORD *)v43 + 1) = 2;
            os_log_type_t v76 = nw_endpoint_get_domain_for_policy(v10);
            v77 = (const void *)v76;
            if (v76)
            {
              v78 = strlen((const char *)v76) + 1;
              memcpy(v43 + 8, v77, v78);
              os_log_type_t v79 = v291;
              if (v291)
              {
LABEL_110:
                memcpy(&v43[v78 + 8], *((const void **)v79 + 1), *((void *)v79 + 2));
LABEL_133:
                os_log_type_t v55 = v52 + 5;
                if (v297 - a3 >= v52 + 5) {
                  goto LABEL_195;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v93 = (id)gLogObj;
                *(_DWORD *)addrinfo buf = 136447490;
                v314 = "nw_necp_append_tlv";
                v315 = 2048;
                *(void *)v316 = a3;
                *(_WORD *)&v316[8] = 2048;
                *(void *)&v316[10] = v52 + 5;
                *(_WORD *)&v316[18] = 2048;
                *(void *)v317 = v297;
                *(_WORD *)&v317[8] = 1024;
                *(_DWORD *)v318 = a2;
                *(_WORD *)&v318[4] = 1024;
                *(_DWORD *)&v318[6] = v52;
                LODWORD(v288) = 54;
                v287 = buf;
                os_log_type_t v57 = (char *)_os_log_send_and_compose_impl();

                v312[0] = 16;
                uu[0] = 0;
                if (v312[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v74 = (os_log_s *)(id)gLogObj;
                  v94 = v312[0];
                  if (os_log_type_enabled(v74, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)addrinfo buf = 136447490;
                    v314 = "nw_necp_append_tlv";
                    v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = v52 + 5;
                    *(_WORD *)&v316[18] = 2048;
                    *(void *)v317 = v297;
                    *(_WORD *)&v317[8] = 1024;
                    *(_DWORD *)v318 = a2;
                    *(_WORD *)&v318[4] = 1024;
                    *(_DWORD *)&v318[6] = v52;
                    _os_log_impl( &dword_181A5C000,  v74,  v94,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
                  }

                  goto LABEL_269;
                }

                if (uu[0])
                {
                  v126 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  os_log_type_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v131 = v312[0];
                  v132 = os_log_type_enabled(v74, (os_log_type_t)v312[0]);
                  if (v126)
                  {
                    if (v132)
                    {
                      *(_DWORD *)addrinfo buf = 136447746;
                      v314 = "nw_necp_append_tlv";
                      v315 = 2048;
                      *(void *)v316 = a3;
                      *(_WORD *)&v316[8] = 2048;
                      *(void *)&v316[10] = v52 + 5;
                      *(_WORD *)&v316[18] = 2048;
                      *(void *)v317 = v297;
                      *(_WORD *)&v317[8] = 1024;
                      *(_DWORD *)v318 = a2;
                      *(_WORD *)&v318[4] = 1024;
                      *(_DWORD *)&v318[6] = v52;
                      v319 = 2082;
                      v320 = v126;
                      _os_log_impl( &dword_181A5C000,  v74,  v131,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping b acktrace:%{public}s",  buf,  0x40u);
                    }

                    goto LABEL_217;
                  }

                  if (v132)
                  {
                    *(_DWORD *)addrinfo buf = 136447490;
                    v314 = "nw_necp_append_tlv";
                    v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = v52 + 5;
                    *(_WORD *)&v316[18] = 2048;
                    *(void *)v317 = v297;
                    *(_WORD *)&v317[8] = 1024;
                    *(_DWORD *)v318 = a2;
                    *(_WORD *)&v318[4] = 1024;
                    *(_DWORD *)&v318[6] = v52;
                    _os_log_impl( &dword_181A5C000,  v74,  v131,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
                  }
                }

                else
                {
                  __nwlog_obj();
                  os_log_type_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v144 = v312[0];
                  if (os_log_type_enabled(v74, (os_log_type_t)v312[0]))
                  {
                    *(_DWORD *)addrinfo buf = 136447490;
                    v314 = "nw_necp_append_tlv";
                    v315 = 2048;
                    *(void *)v316 = a3;
                    *(_WORD *)&v316[8] = 2048;
                    *(void *)&v316[10] = v52 + 5;
                    *(_WORD *)&v316[18] = 2048;
                    *(void *)v317 = v297;
                    *(_WORD *)&v317[8] = 1024;
                    *(_DWORD *)v318 = a2;
                    *(_WORD *)&v318[4] = 1024;
                    *(_DWORD *)&v318[6] = v52;
                    _os_log_impl( &dword_181A5C000,  v74,  v144,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
                  }
                }

                goto LABEL_269;
              }
            }

            else
            {
              v78 = 1LL;
              os_log_type_t v79 = v291;
              if (v291) {
                goto LABEL_110;
              }
            }

            v43[v52 - 1] = OS_LOG_TYPE_DEFAULT;
            goto LABEL_133;
          case 3u:
            *((_BYTE *)v43 + 1) = 0;
            char *v43 = v51;
            *((_WORD *)v43 + 1) = 0;
            *((_DWORD *)v43 + 1) = 3;
            os_log_type_t v64 = nw_endpoint_get_bonjour_service_name(v10);
            BOOL v65 = nw_endpoint_get_bonjour_service_type(v10);
            v66 = nw_endpoint_get_bonjour_service_domain(v10);
            if (v64)
            {
              os_log_type_t v67 = strlen(v64) + 1;
              if (v65) {
                goto LABEL_97;
              }
            }

            else
            {
              os_log_type_t v67 = 1LL;
              if (v65)
              {
LABEL_97:
                id v68 = strlen(v65) + 1;
                obj = v52;
                if (v66) {
                  goto LABEL_98;
                }
                goto LABEL_141;
              }
            }

            id v68 = 1LL;
            obj = v52;
            if (v66)
            {
LABEL_98:
              v69 = strlen(v66) + 1;
              if (!v64) {
                goto LABEL_144;
              }
              goto LABEL_142;
            }
}

    if (v6) {
      free(v6);
    }
    return 0LL;
  }

  if (*((void *)handle + 34))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      v54 = "nw_channel_add_input_handler";
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s Channel already has input handler registered as default",  buf,  0xCu);
    }

    return 0LL;
  }

  *((void *)handle + 34) = uu;
  internal = *((void *)handle + 35);
LABEL_23:
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  id v14 = nw_hash_table_add_object(internal, (uint64_t)uu, (char *)&type);
  id v15 = type != OS_LOG_TYPE_DEFAULT;
  if (type)
  {
    BOOL v16 = (void *)v14;
    extra = nw_hash_node_get_extra(v14);
    *(_OWORD *)extra = 0u;
    *(_OWORD *)(extra + 16) = 0u;
    *(_OWORD *)(extra + 32) = 0u;
    *(_OWORD *)(extra + 48) = 0u;
    *(_OWORD *)(extra + 64) = 0u;
    *(_OWORD *)(extra + 80) = 0u;
    *(_OWORD *)(extra + 96) = 0u;
    *(_OWORD *)(extra + 112) = 0u;
    *(void *)(extra + 8) = extra;
    if (!uuid_is_null((const unsigned __int8 *)handle + 352)
      && !uuid_compare((const unsigned __int8 *)handle + 352, uu->flow_id))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        v54 = "nw_channel_add_input_handler";
        os_log_type_t v55 = 1042;
        *(_DWORD *)os_log_type_t v56 = 16;
        v56[2] = 2098;
        *(void *)&v56[3] = uu;
        _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s Adding pending input frames for %{public,uuid_t}.16P",  buf,  0x1Cu);
      }

      char v19 = *((void *)handle + 42);
      if (v19)
      {
        **(void **)(extra + 8) = v19;
        *(void *)(*((void *)handle + 42) + 40LL) = *(void *)(extra + 8);
        *(void *)(extra + 8) = *((void *)handle + 43);
        *((void *)handle + 42) = 0LL;
        *((void *)handle + 43) = handle + 336;
      }

      uuid_clear((unsigned __int8 *)handle + 352);
      BOOL v21 = *((void *)handle + 24);
      if (v21)
      {
        nw_queue_cancel_source(v21, v20);
        *((void *)handle + 24) = 0LL;
      }
    }

    os_log_type_t v22 = *(void **)(extra + 16);
    if (v22)
    {
      os_release(v22);
      *(void *)(extra + 16) = 0LL;
    }

    __int16 v23 = *(void **)(extra + 72);
    if (v23)
    {
      os_release(v23);
      *(void *)(extra + 72) = 0LL;
    }

    os_log_type_t v24 = 0;
    *(void *)(extra + 72) = nw_link_info_create(0);
    if (uu->handle == &nw_protocol_ref_counted_handle)
    {
      callbacks = uu[1].callbacks;
      if (callbacks) {
        uu[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
      }
      os_log_type_t v24 = 1;
    }

    objc_super v26 = *(_BYTE *)(extra + 32);
    if ((v26 & 1) != 0)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)(extra + 24));
      objc_super v26 = *(_BYTE *)(extra + 32);
    }

    *(void *)(extra + 24) = uu;
    *(_BYTE *)(extra + 32) = v26 & 0xFE | v24;
    uuid_unparse(uu->flow_id, (char *)(extra + 84));
    uu->output_handler_context = v16;
    output_handler = uu->output_handler;
    if (output_handler != a1)
    {
      if (output_handler)
      {
        if (output_handler->handle == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v40 = output_handler[1].callbacks;
          if (v40)
          {
            BOOL v41 = (nw_protocol_callbacks *)((char *)v40 - 1);
            output_handler[1].callbacks = v41;
            if (!v41)
            {
              os_log_type_t v42 = *(void (***)(void))output_handler[1].flow_id;
              if (v42)
              {
                *(void *)output_handler[1].flow_id = 0LL;
                v42[2](v42);
                _Block_release(v42);
              }

              if ((output_handler[1].flow_id[8] & 1) != 0)
              {
                char v43 = *(const void **)output_handler[1].flow_id;
                if (v43) {
                  _Block_release(v43);
                }
              }

              free(output_handler);
            }
          }
        }
      }

      uu->output_handler = a1;
      if (a1->handle == &nw_protocol_ref_counted_handle)
      {
        BOOL v28 = a1[1].callbacks;
        if (v28) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v28->add_input_handler + 1);
        }
      }
    }

    os_log_type_t v29 = uu->callbacks;
    if (v29)
    {
      get_parameters = (uint64_t (*)(nw_protocol *))v29->get_parameters;
      if (get_parameters)
      {
        if (uu->handle == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v33 = uu[1].callbacks;
          if (v33) {
            uu[1].callbacks = (nw_protocol_callbacks *)((char *)&v33->add_input_handler + 1);
          }
          os_log_type_t v31 = (void *)get_parameters(uu);
          if (uu->handle == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v45 = uu[1].callbacks;
            if (v45)
            {
              v46 = (nw_protocol_callbacks *)((char *)v45 - 1);
              uu[1].callbacks = v46;
              if (!v46)
              {
                __int16 v47 = *(void (***)(void))uu[1].flow_id;
                if (v47)
                {
                  *(void *)uu[1].flow_id = 0LL;
                  v47[2](v47);
                  _Block_release(v47);
                }

                if ((uu[1].flow_id[8] & 1) != 0)
                {
                  BOOL v48 = *(const void **)uu[1].flow_id;
                  if (v48) {
                    _Block_release(v48);
                  }
                }

                free(uu);
              }
            }
          }
        }

        else
        {
          os_log_type_t v31 = (void *)get_parameters(uu);
        }

        if (v31)
        {
          os_log_type_t v34 = v31;
          BOOL v35 = v34[92] == 1;

          *(_BYTE *)(extra + 121) = *(_BYTE *)(extra + 121) & 0xFB | (4 * v35);
        }
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v36 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446722;
      v54 = "nw_channel_add_input_handler";
      os_log_type_t v55 = 1042;
      *(_DWORD *)os_log_type_t v56 = 16;
      v56[2] = 2098;
      *(void *)&v56[3] = uu;
      _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_DEBUG,  "%{public}s Added channel input handler for %{public,uuid_t}.16P",  buf,  0x1Cu);
    }

    os_log_type_t v38 = *((void *)handle + 25);
    if (v38)
    {
      nw_queue_cancel_source(v38, v37);
      *((void *)handle + 25) = 0LL;
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v32 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446722;
      v54 = "nw_channel_add_input_handler";
      os_log_type_t v55 = 1042;
      *(_DWORD *)os_log_type_t v56 = 16;
      v56[2] = 2098;
      *(void *)&v56[3] = uu;
      _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_ERROR,  "%{public}s Channel already has input handler registered for %{public,uuid_t}.16P",  buf,  0x1Cu);
    }
  }

  return v15;
}

    goto LABEL_73;
  }

  if (!v12)
  {
    __nwlog_obj();
    os_log_type_t v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    id v49 = "nw_connection_send";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v35 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v49 = "nw_connection_send";
        _os_log_impl(&dword_181A5C000, v32, v35, "%{public}s called with null completion", buf, 0xCu);
      }
    }

    else if (v46)
    {
      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v32, type);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          id v49 = "nw_connection_send";
          os_log_type_t v50 = 2082;
          *(void *)BOOL v51 = v39;
          _os_log_impl( &dword_181A5C000,  v32,  v40,  "%{public}s called with null completion, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v39);
        if (!v31) {
          goto LABEL_39;
        }
LABEL_74:
        free(v31);
        goto LABEL_39;
      }

      if (v41)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v49 = "nw_connection_send";
        _os_log_impl(&dword_181A5C000, v32, v40, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v43 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        id v49 = "nw_connection_send";
        _os_log_impl( &dword_181A5C000,  v32,  v43,  "%{public}s called with null completion, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_72;
  }

  if (v11 != (nw_content_context *)&__block_literal_global_5_41854)
  {
    id v14 = (nw_content_context *)&__block_literal_global_41831;
    if (v11) {
      id v14 = v11;
    }
    id v15 = v14;
    if (v13 == &__block_literal_global_24170) {
      BOOL v16 = nw_write_request_create_idempotent(v10, v15, 0LL, v6);
    }
    else {
      BOOL v16 = nw_write_request_create(v10, v15, 0LL, v6, v9, v13);
    }
    BOOL v21 = v16;
    if (v16)
    {
      nw_connection_add_write_request(v9, v16);
LABEL_38:

      goto LABEL_39;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v22 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    id v49 = "nw_connection_send";
    __int16 v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v23, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (os_log_s *)(id)gLogObj;
        uint64_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          id v49 = "nw_connection_send";
          _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s nw_write_request_create failed", buf, 0xCu);
        }
      }

      else if (v46)
      {
        objc_super v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (os_log_s *)(id)gLogObj;
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v24, type);
        if (v26)
        {
          if (v28)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            id v49 = "nw_connection_send";
            os_log_type_t v50 = 2082;
            *(void *)BOOL v51 = v26;
            _os_log_impl( &dword_181A5C000,  v24,  v27,  "%{public}s nw_write_request_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v26);
          if (!v23) {
            goto LABEL_38;
          }
          goto LABEL_37;
        }

        if (v28)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          id v49 = "nw_connection_send";
          _os_log_impl(&dword_181A5C000, v24, v27, "%{public}s nw_write_request_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          id v49 = "nw_connection_send";
          _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s nw_write_request_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v23) {
      goto LABEL_38;
    }
LABEL_37:
    free(v23);
    goto LABEL_38;
  }

  id v17 = *((void *)v9 + 2);
  if (v17 && !nw_path_parameters_get_logging_disabled(*(void *)(v17 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v18 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      char v19 = *((_DWORD *)v9 + 112);
      *(_DWORD *)addrinfo buf = 136446722;
      id v49 = "nw_connection_send";
      os_log_type_t v50 = 1024;
      *(_DWORD *)BOOL v51 = v19;
      v51[2] = 2082;
      *(void *)&v51[3] = "Cannot send replies on new inbound message context";
      _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] %{public}s, sending error callback",  buf,  0x1Cu);
    }
  }

  os_log_type_t v20 = *((_DWORD *)v9 + 48);
  v44[0] = MEMORY[0x1895F87A8];
  v44[1] = 3221225472LL;
  v44[2] = __nw_connection_send_block_invoke;
  v44[3] = &unk_189BC8740;
  os_log_type_t v45 = v13;
  nw_connection_async_client_if_needed_with_override(v9, 0LL, v20, v44);

LABEL_39:
}

  if (v3) {
    free((void *)v3);
  }
}

      os_log_type_t v12 = 0;
      __int16 v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        BOOL v21 = a3 + 87;
        if (a3 > 10)
        {
          os_log_type_t v22 = a3 + 55;
        }

        else
        {
          BOOL v21 = 97;
          os_log_type_t v22 = 65;
        }

        if (a3 <= 10) {
          __int16 v23 = a3 + 48;
        }
        else {
          __int16 v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            uint64_t v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                objc_super v26 = -87;
              }

              else
              {
                objc_super v26 = -55;
              }
            }

            else
            {
              objc_super v26 = -48;
            }

            os_log_type_t v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          __int16 v13 = 0;
          os_log_type_t v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      unsigned int v4 = a2 - 1;
      if (a2 != 1)
      {
        id v5 = a3 + 87;
        if (a3 > 10)
        {
          id v6 = a3 + 55;
        }

        else
        {
          id v5 = 97;
          id v6 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v7 = a3 + 48;
        }
        else {
          os_log_type_t v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          os_log_type_t v9 = result + 1;
          while (1)
          {
            BOOL v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                os_log_type_t v11 = -87;
              }

              else
              {
                os_log_type_t v11 = -55;
              }
            }

            else
            {
              os_log_type_t v11 = -48;
            }

            os_log_type_t v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      os_log_type_t v12 = 0;
      __int16 v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        uint64_t v25 = a3 + 87;
        if (a3 > 10)
        {
          objc_super v26 = a3 + 55;
        }

        else
        {
          uint64_t v25 = 97;
          objc_super v26 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v27 = a3 + 48;
        }
        else {
          os_log_type_t v27 = 58;
        }
        if (result)
        {
          LOBYTE(v28) = 0;
          do
          {
            os_log_type_t v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                __int16 v30 = -87;
              }

              else
              {
                __int16 v30 = -55;
              }
            }

            else
            {
              __int16 v30 = -48;
            }

            os_log_type_t v31 = (char)v28 * (char)a3;
            BOOL v32 = v31;
            BOOL v28 = (char)v31 + (char)(v29 + v30);
            ++result;
            --a2;
          }

          while (a2);
          __int16 v13 = 0;
          os_log_type_t v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      unsigned int v4 = a2 - 1;
      if (a2 != 1)
      {
        id v5 = a3 + 87;
        if (a3 > 10)
        {
          id v6 = a3 + 55;
        }

        else
        {
          id v5 = 97;
          id v6 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v7 = a3 + 48;
        }
        else {
          os_log_type_t v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          os_log_type_t v9 = result + 1;
          while (1)
          {
            BOOL v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                os_log_type_t v11 = -87;
              }

              else
              {
                os_log_type_t v11 = -55;
              }
            }

            else
            {
              os_log_type_t v11 = -48;
            }

            id v14 = (char)v8 * (char)a3;
            id v15 = v14;
            os_log_type_t v8 = (char)v14 - (char)(v10 + v11);
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      os_log_type_t v12 = 0;
      __int16 v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        uint64_t v25 = a3 + 87;
        if (a3 > 10)
        {
          objc_super v26 = a3 + 55;
        }

        else
        {
          uint64_t v25 = 97;
          objc_super v26 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v27 = a3 + 48;
        }
        else {
          os_log_type_t v27 = 58;
        }
        if (result)
        {
          LOWORD(v28) = 0;
          do
          {
            os_log_type_t v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                __int16 v30 = -87;
              }

              else
              {
                __int16 v30 = -55;
              }
            }

            else
            {
              __int16 v30 = -48;
            }

            os_log_type_t v31 = (__int16)v28 * (__int16)a3;
            BOOL v32 = v31;
            BOOL v28 = (__int16)v31 + (v29 + v30);
            ++result;
            --a2;
          }

          while (a2);
          __int16 v13 = 0;
          os_log_type_t v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      unsigned int v4 = a2 - 1;
      if (a2 != 1)
      {
        id v5 = a3 + 87;
        if (a3 > 10)
        {
          id v6 = a3 + 55;
        }

        else
        {
          id v5 = 97;
          id v6 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v7 = a3 + 48;
        }
        else {
          os_log_type_t v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          os_log_type_t v9 = result + 1;
          while (1)
          {
            BOOL v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                os_log_type_t v11 = -87;
              }

              else
              {
                os_log_type_t v11 = -55;
              }
            }

            else
            {
              os_log_type_t v11 = -48;
            }

            id v14 = (__int16)v8 * (__int16)a3;
            id v15 = v14;
            os_log_type_t v8 = (__int16)v14 - (v10 + v11);
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      os_log_type_t v12 = 0;
      __int16 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        uint64_t v25 = a3 + 87;
        if (a3 > 10)
        {
          objc_super v26 = a3 + 55;
        }

        else
        {
          uint64_t v25 = 97;
          objc_super v26 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v27 = a3 + 48;
        }
        else {
          os_log_type_t v27 = 58;
        }
        if (result)
        {
          BOOL v28 = 0;
          do
          {
            os_log_type_t v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                __int16 v30 = -87;
              }

              else
              {
                __int16 v30 = -55;
              }
            }

            else
            {
              __int16 v30 = -48;
            }

            os_log_type_t v31 = (int)v28 * (uint64_t)(int)a3;
            BOOL v32 = v29 + v30;
            BOOL v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          __int16 v13 = 0;
          os_log_type_t v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      unsigned int v4 = a2 - 1;
      if (a2 != 1)
      {
        id v5 = a3 + 87;
        if (a3 > 10)
        {
          id v6 = a3 + 55;
        }

        else
        {
          id v5 = 97;
          id v6 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v7 = a3 + 48;
        }
        else {
          os_log_type_t v7 = 58;
        }
        if (result)
        {
          os_log_type_t v8 = 0;
          os_log_type_t v9 = result + 1;
          while (1)
          {
            BOOL v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                os_log_type_t v11 = -87;
              }

              else
              {
                os_log_type_t v11 = -55;
              }
            }

            else
            {
              os_log_type_t v11 = -48;
            }

            id v14 = (int)v8 * (uint64_t)(int)a3;
            id v15 = v10 + v11;
            os_log_type_t v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      os_log_type_t v12 = 0;
      __int16 v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        BOOL v21 = a3 + 87;
        if (a3 > 10)
        {
          os_log_type_t v22 = a3 + 55;
        }

        else
        {
          BOOL v21 = 97;
          os_log_type_t v22 = 65;
        }

        if (a3 <= 10) {
          __int16 v23 = a3 + 48;
        }
        else {
          __int16 v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            uint64_t v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                objc_super v26 = -87;
              }

              else
              {
                objc_super v26 = -55;
              }
            }

            else
            {
              objc_super v26 = -48;
            }

            os_log_type_t v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          __int16 v13 = 0;
          os_log_type_t v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      unsigned int v4 = a2 - 1;
      if (a2 != 1)
      {
        id v5 = a3 + 87;
        if (a3 > 10)
        {
          id v6 = a3 + 55;
        }

        else
        {
          id v5 = 97;
          id v6 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v7 = a3 + 48;
        }
        else {
          os_log_type_t v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          os_log_type_t v9 = result + 1;
          while (1)
          {
            BOOL v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                os_log_type_t v11 = -87;
              }

              else
              {
                os_log_type_t v11 = -55;
              }
            }

            else
            {
              os_log_type_t v11 = -48;
            }

            os_log_type_t v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      os_log_type_t v12 = 0;
      __int16 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        uint64_t v25 = a3 + 87;
        if (a3 > 10)
        {
          objc_super v26 = a3 + 55;
        }

        else
        {
          uint64_t v25 = 97;
          objc_super v26 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v27 = a3 + 48;
        }
        else {
          os_log_type_t v27 = 58;
        }
        if (result)
        {
          BOOL v28 = 0;
          do
          {
            os_log_type_t v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                __int16 v30 = -87;
              }

              else
              {
                __int16 v30 = -55;
              }
            }

            else
            {
              __int16 v30 = -48;
            }

            os_log_type_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            BOOL v32 = v29 + v30;
            BOOL v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          __int16 v13 = 0;
          os_log_type_t v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      unsigned int v4 = a2 - 1;
      if (a2 != 1)
      {
        id v5 = a3 + 87;
        if (a3 > 10)
        {
          id v6 = a3 + 55;
        }

        else
        {
          id v5 = 97;
          id v6 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v7 = a3 + 48;
        }
        else {
          os_log_type_t v7 = 58;
        }
        if (result)
        {
          os_log_type_t v8 = 0;
          os_log_type_t v9 = result + 1;
          while (1)
          {
            BOOL v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                os_log_type_t v12 = 0;
                __int16 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                os_log_type_t v11 = -87;
              }

              else
              {
                os_log_type_t v11 = -55;
              }
            }

            else
            {
              os_log_type_t v11 = -48;
            }

            id v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            id v15 = v10 + v11;
            os_log_type_t v8 = v14 - v15;
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

    MEMORY[0x1895F8858](isStackAllocationSafe);
    sub_181C7DB2C((uint64_t)v55 - v50, v46, v20, v19);
    sub_18264EB50();
    sub_18264EB50();
    char v43 = (*(uint64_t (**)(void))(v65 + 16))();
LABEL_74:
    os_log_type_t v8 = v67;
    LOBYTE(v68[0]) = v43 & 1;
LABEL_75:
    os_log_type_t v7 = sub_181BCEE10((uint64_t)&v71);
    if ((v68[0] & 1) != 0)
    {
      if (++v8 == v62) {
        goto LABEL_80;
      }
      continue;
    }

    break;
  }

  BOOL result = swift_bridgeObjectRelease();
  v54 = 0;
LABEL_81:
  *os_log_type_t v56 = v54;
  return result;
}

    os_log_type_t v29 = (unint64_t)&result[8 * v58];
    free(v28);
    goto LABEL_52;
  }

  qword_18C45F500 -= 256LL;
  os_log_type_t v12 = (char *)(xmmword_18C45F4E8 + 8);
  os_log_type_t v11 = *(void *)xmmword_18C45F4E8;
  *(void *)&xmmword_18C45F4E8 = xmmword_18C45F4E8 + 8;
  if (qword_18C45F4F8 != *((void *)&xmmword_18C45F4E8 + 1))
  {
LABEL_87:
    *(void *)id v5 = v11;
    *((void *)&xmmword_18C45F4E8 + 1) += 8LL;
    goto LABEL_88;
  }

  __int16 v13 = (uint64_t)&v12[-qword_18C45F4E0];
  if ((unint64_t)v12 > qword_18C45F4E0)
  {
    id v14 = v13 >> 3;
    id v15 = v13 >> 3 < -1;
    BOOL v16 = (v13 >> 3) + 2;
    if (v15) {
      id v17 = v16;
    }
    else {
      id v17 = v14 + 1;
    }
    os_log_type_t v18 = v17 >> 1;
    char v19 = -v18;
    os_log_type_t v20 = &v12[-8 * v18];
    BOOL v21 = *((void *)&xmmword_18C45F4E8 + 1) - (void)v12;
    if (*((char **)&xmmword_18C45F4E8 + 1) == v12)
    {
      os_log_type_t v22 = *((void *)&xmmword_18C45F4E8 + 1);
    }

    else
    {
      memmove(&v12[-8 * v18], v12, *((void *)&xmmword_18C45F4E8 + 1) - (void)v12);
      os_log_type_t v22 = xmmword_18C45F4E8;
    }

    id v5 = &v20[v21];
    *(void *)&xmmword_18C45F4E8 = v22 + 8 * v19;
    *((void *)&xmmword_18C45F4E8 + 1) = &v20[v21];
    goto LABEL_87;
  }

  if (*((void *)&xmmword_18C45F4E8 + 1) == qword_18C45F4E0) {
    os_log_type_t v31 = 1LL;
  }
  else {
    os_log_type_t v31 = (*((void *)&xmmword_18C45F4E8 + 1) - qword_18C45F4E0) >> 2;
  }
  BOOL result = (char *)calloc(v31, 8uLL);
  if (result)
  {
    BOOL v32 = &result[8 * (v31 >> 2)];
    os_log_type_t v33 = (uint64_t *)xmmword_18C45F4E8;
    id v5 = v32;
    os_log_type_t v34 = *((void *)&xmmword_18C45F4E8 + 1) - xmmword_18C45F4E8;
    if (*((void *)&xmmword_18C45F4E8 + 1) == (void)xmmword_18C45F4E8) {
      goto LABEL_85;
    }
    id v5 = &v32[v34 & 0xFFFFFFFFFFFFFFF8LL];
    BOOL v35 = v34 - 8;
    if (v35 >= 0x38)
    {
      v73 = &result[8 * (v31 >> 2)];
      os_log_type_t v36 = v73;
      if ((unint64_t)&v73[-xmmword_18C45F4E8] >= 0x20)
      {
        os_log_type_t v74 = (v35 >> 3) + 1;
        BOOL v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        os_log_type_t v36 = &v32[v75];
        os_log_type_t v76 = (__int128 *)(xmmword_18C45F4E8 + 16);
        v77 = v73 + 16;
        v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          os_log_type_t v79 = *v76;
          *(v77 - 1) = *(v76 - 1);
          char *v77 = v79;
          v76 += 2;
          v77 += 2;
          v78 -= 4LL;
        }

        while (v78);
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_85:
          os_log_type_t v81 = (void *)qword_18C45F4E0;
          qword_18C45F4E0 = (uint64_t)result;
          *(void *)&xmmword_18C45F4E8 = &result[8 * (v31 >> 2)];
          *((void *)&xmmword_18C45F4E8 + 1) = v5;
          qword_18C45F4F8 = (uint64_t)&result[8 * v31];
          if (v81)
          {
            free(v81);
            id v5 = (char *)*((void *)&xmmword_18C45F4E8 + 1);
          }

          goto LABEL_87;
        }

        os_log_type_t v33 = (uint64_t *)((char *)v33 + v75);
      }
    }

    else
    {
      os_log_type_t v36 = &result[8 * (v31 >> 2)];
    }

    do
    {
      BOOL v80 = *v33++;
      *(void *)os_log_type_t v36 = v80;
      v36 += 8;
    }

    while (v36 != v5);
    goto LABEL_85;
  }

              LODWORD(a1[2].default_input_handler) = nw_path_get_effective_traffic_class(a1[1].default_input_handler);
              output_handler = a1->output_handler;
              if (!output_handler) {
                return 1LL;
              }
              os_log_type_t v38 = output_handler->callbacks;
              if (!v38) {
                return 1LL;
              }
              updated_path = (uint64_t (*)(nw_protocol *, nw_protocol *, nw_path *))v38->updated_path;
              if (!updated_path) {
                return 1LL;
              }
              os_log_type_t v40 = output_handler->handle;
              if (v40 == &nw_protocol_ref_counted_handle)
              {
                BOOL v41 = output_handler[1].callbacks;
                if (v41) {
                  output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v41->add_input_handler + 1);
                }
              }

              if (a1->handle == &nw_protocol_ref_counted_handle)
              {
                char v43 = a1[1].callbacks;
                if (v43) {
                  a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v43->add_input_handler + 1);
                }
                os_log_type_t v42 = updated_path(output_handler, a1, object);
                if (a1->handle == &nw_protocol_ref_counted_handle)
                {
                  os_log_type_t v45 = a1[1].callbacks;
                  if (v45)
                  {
                    v46 = (nw_protocol_callbacks *)((char *)v45 - 1);
                    a1[1].callbacks = v46;
                    if (!v46)
                    {
                      __int16 v47 = *(void (***)(void))a1[1].flow_id;
                      if (v47)
                      {
                        *(void *)a1[1].flow_id = 0LL;
                        v47[2](v47);
                        _Block_release(v47);
                      }

                      if ((a1[1].flow_id[8] & 1) != 0)
                      {
                        BOOL v48 = *(const void **)a1[1].flow_id;
                        if (v48) {
                          _Block_release(v48);
                        }
                      }

                      free(a1);
                    }
                  }
                }
              }

              else
              {
                os_log_type_t v42 = updated_path(output_handler, a1, object);
              }

              if (v40 == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
              {
                id v49 = output_handler[1].callbacks;
                if (v49)
                {
                  os_log_type_t v50 = (nw_protocol_callbacks *)((char *)v49 - 1);
                  output_handler[1].callbacks = v50;
                  if (!v50)
                  {
                    BOOL v51 = *(void (***)(void))output_handler[1].flow_id;
                    if (v51)
                    {
                      *(void *)output_handler[1].flow_id = 0LL;
                      v51[2](v51);
                      _Block_release(v51);
                    }

                    if ((output_handler[1].flow_id[8] & 1) != 0)
                    {
                      os_log_type_t v52 = *(const void **)output_handler[1].flow_id;
                      if (v52) {
                        _Block_release(v52);
                      }
                    }

                    free(output_handler);
                  }
                }
              }

              return v42;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v18 = (os_log_s *)gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_72;
            }
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v108 = "udp_ctlinput";
            BOOL v109 = 2082;
            v110 = a1 + 3;
            char v19 = "%{public}s %{public}s Protocol event reported for socket with faddr IN6ADDR_ANY";
          }

          _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x16u);
          goto LABEL_72;
        }

        v59 = (os_log_s *)__nwlog_obj();
        char v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_169;
        }
        v85 = a2->identifier;
        if (!v85) {
          v85 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v108 = "__nw_protocol_get_parameters";
        BOOL v109 = 2082;
        v110 = (nw_protocol *)v85;
        v111 = 2048;
        *(void *)v112 = a2;
        objc_super v62 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
      }

      v86 = v59;
LABEL_168:
      _os_log_impl(&dword_181A5C000, v86, v60, v62, buf, 0x20u);
      goto LABEL_169;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v108 = "__nw_protocol_get_parameters";
    uint64_t v70 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v103) = 0;
    if (__nwlog_fault(v70, type, &v103))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v71 = (os_log_s *)__nwlog_obj();
        v72 = type[0];
        if (os_log_type_enabled(v71, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v108 = "__nw_protocol_get_parameters";
          v73 = "%{public}s called with null protocol";
LABEL_199:
          _os_log_impl(&dword_181A5C000, v71, v72, v73, buf, 0xCu);
        }
      }

      else if ((_BYTE)v103)
      {
        os_log_type_t v83 = (char *)__nw_create_backtrace_string();
        os_log_type_t v71 = (os_log_s *)__nwlog_obj();
        v72 = type[0];
        os_log_type_t v84 = os_log_type_enabled(v71, type[0]);
        if (v83)
        {
          if (v84)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v108 = "__nw_protocol_get_parameters";
            BOOL v109 = 2082;
            v110 = (nw_protocol *)v83;
            _os_log_impl( &dword_181A5C000,  v71,  v72,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v83);
          goto LABEL_200;
        }

        if (v84)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v108 = "__nw_protocol_get_parameters";
          v73 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_199;
        }
      }

      else
      {
        os_log_type_t v71 = (os_log_s *)__nwlog_obj();
        v72 = type[0];
        if (os_log_type_enabled(v71, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v108 = "__nw_protocol_get_parameters";
          v73 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_199;
        }
      }
    }

        goto LABEL_73;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v74,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type;
      objc_super v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      if (v62)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v80 = "networkd_privileged_set_constrained_block_invoke";
        os_log_type_t v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_73;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v74,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type;
      objc_super v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      if (v62)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        os_log_type_t v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_73;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v74,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type;
      objc_super v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      if (v62)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v80 = "networkd_privileged_set_expensive_block_invoke";
        os_log_type_t v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_73;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v74,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type;
      objc_super v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      if (v62)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        os_log_type_t v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_73;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v74,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type;
      objc_super v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      if (v62)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v80 = "networkd_privileged_set_radio_type_block_invoke";
        os_log_type_t v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v61,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v69 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_77;
    }
    v77 = v8 + 26;
    v78 = *(void *)(a1 + 32);
    if (!v8) {
      v77 = 0LL;
    }
    *(_DWORD *)addrinfo buf = 136447234;
    BOOL v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
    v110 = 2114;
    v111 = v78;
    v112 = 1042;
    *(_DWORD *)os_log_type_t v113 = 16;
    *(_WORD *)&v113[4] = 2098;
    *(void *)&v113[6] = &v107;
    os_log_type_t v114 = 2080;
    *(void *)os_log_type_t v115 = v77;
    os_log_type_t v74 = "%{public}s [%{public}@] Ethernet Channel handle update: adding flow registration for nexus agent %{public,uuid_t}.16P on %s";
    BOOL v75 = v69;
    os_log_type_t v76 = 48;
LABEL_76:
    _os_log_impl(&dword_181A5C000, v75, OS_LOG_TYPE_DEBUG, v74, buf, v76);
LABEL_77:

    os_log_type_t v79 = nw_path_evaluator_create_flow_inner(*(void **)(*(void *)(a1 + 32) + 72LL), 0, 1, 0, 0, &v107, 0LL, 0, 0LL);
    BOOL v80 = *(void *)(a1 + 32);
    if (v79)
    {
      os_log_type_t v81 = *(void **)(v80 + 80);
      if (v81)
      {
        nw_path_flow_registration_close(v81);
        BOOL v80 = *(void *)(a1 + 32);
      }

      objc_storeStrong((id *)(v80 + 80), v79);
      os_log_type_t v82 = *(void *)(a1 + 32);
      if (v82 && *(void *)(v82 + 152))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v83 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v84 = v8 + 26;
          v85 = *(void *)(a1 + 32);
          if (!v8) {
            os_log_type_t v84 = 0LL;
          }
          v86 = *(_DWORD *)(v85 + 168);
          v87 = *(void *)(v85 + 24);
          *(_DWORD *)addrinfo buf = 136448002;
          BOOL v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
          v110 = 2080;
          v111 = v87;
          v112 = 1042;
          *(_DWORD *)os_log_type_t v113 = 16;
          *(_WORD *)&v113[4] = 2098;
          *(void *)&v113[6] = v85 + 115;
          os_log_type_t v114 = 1024;
          *(_DWORD *)os_log_type_t v115 = v86;
          *(_WORD *)&v115[4] = 1042;
          *(_DWORD *)&v115[6] = 16;
          *(_WORD *)&v115[10] = 2098;
          *(void *)&v115[12] = &v107;
          os_log_type_t v116 = 2080;
          *(void *)os_log_type_t v117 = v84;
          v88 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: added flow "
                "registration for nexus agent %{public,uuid_t}.16P on %s";
          os_log_type_t v89 = v83;
          v90 = OS_LOG_TYPE_DEBUG;
          os_log_type_t v91 = 70;
          goto LABEL_101;
        }

  if (v32) {
    free(v32);
  }
  BOOL v16 = 0LL;
LABEL_20:

  return v16;
}

    free(v47);
    if (!v37) {
      goto LABEL_42;
    }
    goto LABEL_132;
  }

  os_log_type_t v9 = *(void *)(a3 + 24);
  if (!v9) {
    goto LABEL_24;
  }
  BOOL v10 = *(void (**)(uint64_t))(v9 + 136);
  if (!v10) {
    goto LABEL_24;
  }
  v10(a3);
  os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v12 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    __int16 v13 = *(void *)(a3 + 16);
    *(_DWORD *)addrinfo buf = 136447234;
    os_log_type_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    BOOL v102 = 2112;
    os_log_type_t v103 = v7;
    BOOL v104 = 2048;
    os_log_type_t v105 = a3;
    BOOL v106 = 2080;
    v107 = v13;
    os_log_type_t v108 = 2112;
    BOOL v109 = v11;
    _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ instance %p of %s has endpoint %@, adding edges",  buf,  0x34u);
  }

  if (!v11)
  {
LABEL_24:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      BOOL v32 = *(void *)(a3 + 16);
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      BOOL v102 = 2112;
      os_log_type_t v103 = v7;
      BOOL v104 = 2048;
      os_log_type_t v105 = a3;
      BOOL v106 = 2080;
      v107 = v32;
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ instance %p of %s does not have endpoint, cannot add edges",  buf,  0x2Au);
    }

    goto LABEL_41;
  }

  id v14 = *(void *)(a3 + 24);
  if (!v14) {
    goto LABEL_26;
  }
  id v15 = *(void (**)(uint64_t))(v14 + 112);
  if (!v15) {
    goto LABEL_26;
  }
  v15(a3);
  BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v17 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    os_log_type_t v18 = *(void *)(a3 + 16);
    *(_DWORD *)addrinfo buf = 136447234;
    os_log_type_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    BOOL v102 = 2112;
    os_log_type_t v103 = v7;
    BOOL v104 = 2048;
    os_log_type_t v105 = a3;
    BOOL v106 = 2080;
    v107 = v18;
    os_log_type_t v108 = 2112;
    BOOL v109 = v16;
    _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ instance %p of %s has parameters %@, adding edges",  buf,  0x34u);
  }

  if (!v16)
  {
LABEL_26:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v20 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v33 = *(void *)(a3 + 16);
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      BOOL v102 = 2112;
      os_log_type_t v103 = v7;
      BOOL v104 = 2048;
      os_log_type_t v105 = a3;
      BOOL v106 = 2080;
      v107 = v33;
      _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ instance %p of %s does not have parameters, cannot add edges",  buf,  0x2Au);
    }

    goto LABEL_40;
  }

  os_log_type_t v95 = v7;
  char v19 = v8;
  v96 = v97;
  os_log_type_t v20 = v16;
  v94 = v19;
  if (!*(void *)(a3 + 16))
  {
    __nwlog_obj();
    os_log_type_t v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    id v53 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (__nwlog_fault(v53, &type, &v98))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_181A5C000, v54, v55, "%{public}s called with null protocol->identifier", buf, 0xCu);
        }
      }

      else if (v98)
      {
        id v68 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v69 = type;
        uint64_t v70 = os_log_type_enabled(v54, type);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            BOOL v102 = 2082;
            os_log_type_t v103 = v68;
            _os_log_impl( &dword_181A5C000,  v54,  v69,  "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v68);
          goto LABEL_152;
        }

        if (v70)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl( &dword_181A5C000,  v54,  v69,  "%{public}s called with null protocol->identifier, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v87 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl( &dword_181A5C000,  v54,  v87,  "%{public}s called with null protocol->identifier, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v16) {
    free(v16);
  }
}

      free(v17);
      goto LABEL_15;
    }

    __nwlog_obj();
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v38 = "nw_framer_protocol_disconnect";
    id v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null framer", buf, 0xCu);
      }
    }

    else if (v35)
    {
      objc_super v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v18, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v38 = "nw_framer_protocol_disconnect";
          os_log_type_t v39 = 2082;
          os_log_type_t v40 = v26;
          _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v26);
        goto LABEL_71;
      }

      if (v28)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_181A5C000, v18, v27, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v38 = "nw_framer_protocol_disconnect";
        _os_log_impl( &dword_181A5C000,  v18,  v33,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
      }
    }

      if (!v15)
      {
LABEL_13:

        return;
      }

    goto LABEL_73;
  }

  if (a1)
  {
    id v6 = a1->handle;
    os_log_type_t v7 = v6;
    if (v6)
    {
      if (*((void *)v6 + 1))
      {
        os_log_type_t v8 = v5;
        os_log_type_t v9 = v8[2];

        if (v9 == 1)
        {
          os_log_type_t v11 = v7[606] | 0x20;
        }

        else
        {
          if (v9) {
            goto LABEL_11;
          }
          BOOL v10 = v7[606];
          v7[606] = v10 & 0xDF;
          if ((v10 & 0x40) == 0) {
            goto LABEL_11;
          }
          nw_framer_protocol_output_available(a1, a2);
          os_log_type_t v11 = v7[606] & 0xBF;
        }

        v7[606] = v11;
LABEL_11:

        goto LABEL_12;
      }

      __nwlog_obj();
      os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      char v43 = "nw_framer_protocol_link_state";
      char v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v40 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v23 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          char v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
      }

      else if (v40)
      {
        os_log_type_t v33 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v20, type);
        if (v33)
        {
          if (v35)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            char v43 = "nw_framer_protocol_link_state";
            v44 = 2082;
            os_log_type_t v45 = v33;
            _os_log_impl( &dword_181A5C000,  v20,  v34,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v33);
          if (!v19) {
            goto LABEL_11;
          }
          goto LABEL_82;
        }

        if (v35)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          char v43 = "nw_framer_protocol_link_state";
          _os_log_impl( &dword_181A5C000,  v20,  v34,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          char v43 = "nw_framer_protocol_link_state";
          _os_log_impl( &dword_181A5C000,  v20,  v39,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      char v43 = "nw_framer_protocol_link_state";
      char v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v40 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          char v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null framer", buf, 0xCu);
        }
      }

      else if (v40)
      {
        __int16 v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v20, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            char v43 = "nw_framer_protocol_link_state";
            v44 = 2082;
            os_log_type_t v45 = v30;
            _os_log_impl( &dword_181A5C000,  v20,  v31,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v30);
LABEL_81:
          if (!v19) {
            goto LABEL_11;
          }
LABEL_82:
          free(v19);
          goto LABEL_11;
        }

        if (v32)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          char v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_181A5C000, v20, v31, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          char v43 = "nw_framer_protocol_link_state";
          _os_log_impl( &dword_181A5C000,  v20,  v38,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    goto LABEL_81;
  }

  __nwlog_obj();
  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v43 = "nw_framer_protocol_link_state";
  __int16 v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v40 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v43 = "nw_framer_protocol_link_state";
      _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null protocol", buf, 0xCu);
    }

    goto LABEL_72;
  }

  if (!v40)
  {
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v37 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v43 = "nw_framer_protocol_link_state";
      _os_log_impl( &dword_181A5C000,  v14,  v37,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_72;
  }

  os_log_type_t v27 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v28 = type;
  os_log_type_t v29 = os_log_type_enabled(v14, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v43 = "nw_framer_protocol_link_state";
      _os_log_impl(&dword_181A5C000, v14, v28, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_72;
  }

  if (v29)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v43 = "nw_framer_protocol_link_state";
    v44 = 2082;
    os_log_type_t v45 = v27;
    _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v27);
  if (v13) {
    goto LABEL_74;
  }
LABEL_12:
}

    free(v43);
    if (!v18) {
      goto LABEL_131;
    }
    goto LABEL_118;
  }

  id v6 = v3;
  os_log_type_t v7 = *((id *)v6 + 7);
  if (v7)
  {
    os_log_type_t v8 = v7;
    os_log_type_t v9 = *(id *)(v8[13] + 136LL);

    if (!v9)
    {
      __nwlog_obj();
      os_log_type_t v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
      __int16 v30 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v67 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v67)
      {
        BOOL v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = type;
        id v53 = os_log_type_enabled(v31, type);
        if (v51)
        {
          if (v53)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v51;
            _os_log_impl( &dword_181A5C000,  v31,  v52,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v51);
          if (!v30) {
            goto LABEL_140;
          }
          goto LABEL_139;
        }

        if (v53)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_181A5C000, v31, v52, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v61 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl( &dword_181A5C000,  v31,  v61,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_137;
    }

    BOOL v10 = (dispatch_queue_s *)nw_context_copy_workloop(v9);
    if (v10) {
      goto LABEL_10;
    }
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    os_log_type_t v11 = (id)nw_context_copy_implicit_context::implicit_context;
    BOOL v10 = (dispatch_queue_s *)nw_context_copy_workloop(v11);

    if (v10)
    {
LABEL_10:

      if (v10)
      {
        nw_connection_group_prune_connections_locked(v6);
        if (!nw_parameters_get_logging_disabled(*((void *)v6 + 7)) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          BOOL v35 = (os_log_s *)(id)gconnection_groupLogObj;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v36 = *((_DWORD *)v6 + 42);
            *(_DWORD *)addrinfo buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v36;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v5;
            _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] Adding connection (%@) to group",  buf,  0x1Cu);
          }
        }

        os_log_type_t v12 = v5;
        __int16 v13 = v12 + 34;
        id v14 = MEMORY[0x1895F87A8];
        *(void *)addrinfo buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __nw_connection_set_group_uuid_block_invoke;
        *(void *)&buf[24] = &unk_189BC66E8;
        id v15 = v12;
        uint64_t v70 = v15;
        os_log_type_t v71 = (char *)v6 + 120;
        os_unfair_lock_lock(v13);
        __nw_connection_set_group_uuid_block_invoke((uint64_t)buf);
        os_unfair_lock_unlock(v13);

        nw_array_insert_object_at_index(*((void *)v3 + 13), v15, 0LL);
        if (!nw_parameters_get_logging_disabled(*((void *)v6 + 7)) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          os_log_type_t v37 = (os_log_s *)(id)gconnection_groupLogObj;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v38 = *((void *)v3 + 13);
            if (v38) {
              os_log_type_t v38 = (uint64_t)(*(void *)(v38 + 24) - *(void *)(v38 + 16)) >> 3;
            }
            os_log_type_t v39 = *((_DWORD *)v6 + 42);
            *(_DWORD *)addrinfo buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v39;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v38;
            _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] group has %zu connections",  buf,  0x1Cu);
          }
        }

        handler[0] = v14;
        handler[1] = 3221225472LL;
        handler[2] = ___ZL41nw_connection_group_add_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
        handler[3] = &unk_189BC9490;
        BOOL v65 = v6;
        BOOL v16 = v15;
        v66 = v16;
        nw_connection_set_state_changed_handler((nw_connection_t)v16, handler);
        nw_connection_set_queue((nw_connection_t)v16, v10);

LABEL_130:
        goto LABEL_131;
      }

      goto LABEL_125;
    }

    __nwlog_obj();
    os_log_type_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
    __int16 v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v67 = 0;
    if (__nwlog_fault(v30, &type, &v67))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_181A5C000, v31, v34, "%{public}s called with null workloop", buf, 0xCu);
        }

    if (v23) {
      free(v23);
    }
    nw_protocol_destroy(v11, 0LL);
    return 0LL;
  }

  __int16 v13 = v12;
  if (*(_UNKNOWN **)(v11 - 56) == &nw_protocol_ref_counted_handle)
  {
    id v14 = *(void *)(v11 - 8);
    if (v14) {
      *(void *)(v11 - 8) = v14 + 1;
    }
  }

  {
    nw_protocol_new_objc::init = (uint64_t)sel_registerName("init");
  }

  BOOL v16 = (const char *)nw_protocol_new_objc::init;
  Class = object_getClass(v13);
  if (class_getInstanceMethod(Class, v16)) {
    [v13 v16];
  }
  return v13;
}

  if (v23) {
    free(v23);
  }
  return 1LL;
}

  if (v32) {
    free(v32);
  }
  BOOL v21 = 0LL;
LABEL_39:

  return v21;
}

  if (v23) {
    free(v23);
  }
  return 1LL;
}

    if (v24) {
      free(v24);
    }
    nw_array_append(*((void *)handle + 90), 0LL);
    id v14 = *((void *)handle + 76);
    if (v14)
    {
LABEL_25:
      v33[0] = MEMORY[0x1895F87A8];
      v33[1] = 0x40000000LL;
      v33[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke;
      v33[3] = &__block_descriptor_tmp_99;
      v33[4] = handle;
      if (((*(uint64_t (**)(uint64_t, void, void *))(v14 + 16))( v14,  *(void *)(*(void *)&buf[8] + 40LL),  v33) & 1) != 0) {
        goto LABEL_17;
      }
    }

  free(v29);
  if (!v23) {
    return;
  }
LABEL_121:
  free(v23);
}

    if (v32) {
      free(v32);
    }
    return 0LL;
  }

  LODWORD(v7) = a4;
  handle = a1->handle;
  BOOL v10 = *((id *)handle + 20);
  os_log_type_t v11 = v10;
  if (!v10)
  {
    __nwlog_obj();
    BOOL v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v57 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v36, type, &v57))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v57)
      {
        char v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v44 = type[0];
        os_log_type_t v45 = os_log_type_enabled(v37, type[0]);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v43;
            _os_log_impl( &dword_181A5C000,  v37,  v44,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v43);
          goto LABEL_78;
        }

        if (v45)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_181A5C000, v37, v44, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v47 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl( &dword_181A5C000,  v37,  v47,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (!*((_BYTE *)v469 + 24))
  {
    next_hop_required_interface_os_log_type_t type = v3->path_value.next_hop_required_interface_type;
    if ((_DWORD)next_hop_required_interface_type)
    {
      else {
        os_log_type_t v74 = off_189BC9540[next_hop_required_interface_type];
      }
      os_log_type_t v101 = (char *)v477[3];
      BOOL v102 = ", ";
      if (v101 == a2) {
        BOOL v102 = "";
      }
      os_log_type_t v103 = snprintf(v101, v473[3], "%snext hop interface type: %s", v102, v74);
      BOOL v104 = v473;
      os_log_type_t v105 = v473[3];
      id v15 = v105 > v103;
      BOOL v106 = v105 - v103;
      if (v15)
      {
        if (v103 >= 1)
        {
          v477[3] += v103;
          v104[3] = v106;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    next_hop_required_interface_subos_log_type_t type = v3->path_value.next_hop_required_interface_subtype;
    if (next_hop_required_interface_subtype <= 1001)
    {
      if (next_hop_required_interface_subtype == 1001)
      {
        os_log_type_t v76 = "wifi_infrastructure";
        goto LABEL_418;
      }
    }

    else
    {
      switch(next_hop_required_interface_subtype)
      {
        case 1002:
          os_log_type_t v76 = "wifi_awdl";
          goto LABEL_418;
        case 4001:
          os_log_type_t v76 = "coprocessor";
          goto LABEL_418;
        case 5001:
          os_log_type_t v76 = "companion";
LABEL_418:
          v307 = (char *)v477[3];
          v308 = ", ";
          if (v307 == a2) {
            v308 = "";
          }
          v309 = snprintf(v307, v473[3], "%snext hop interface subtype: %s", v308, v76);
          v310 = v473;
          v311 = v473[3];
          id v15 = v311 > v309;
          v312 = v311 - v309;
          if (v15)
          {
            if (v309 >= 1)
            {
              v477[3] += v309;
              v310[3] = v312;
            }
          }

          else
          {
            *(_BYTE *)v477[3] = 0;
            *((_BYTE *)v469 + 24) = 1;
          }

          goto LABEL_74;
      }
    }

    os_log_type_t v76 = "unknown";
    goto LABEL_418;
  }

  if (v25) {
    free(v25);
  }
  os_log_type_t v11 = 0LL;
LABEL_26:

  return v11;
}

          free(v31);
          goto LABEL_106;
        }

        __nwlog_obj();
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
        os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
        handler[0] = OS_LOG_TYPE_ERROR;
        v64[0] = 0;
        if (__nwlog_fault(v22, handler, v64))
        {
          if (handler[0] == OS_LOG_TYPE_FAULT)
          {
            __int16 v23 = (os_log_s *)__nwlog_obj();
            os_log_type_t v24 = handler[0];
            if (os_log_type_enabled(v23, handler[0]))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
              uint64_t v25 = "%{public}s called with null block";
LABEL_105:
              _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
              goto LABEL_106;
            }
          }

          else if (v64[0])
          {
            os_log_type_t v31 = (char *)__nw_create_backtrace_string();
            __int16 v23 = (os_log_s *)__nwlog_obj();
            os_log_type_t v24 = handler[0];
            os_log_type_t v50 = os_log_type_enabled(v23, handler[0]);
            if (v31)
            {
              if (!v50) {
                goto LABEL_72;
              }
              *(_DWORD *)addrinfo buf = 136446466;
              *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v31;
              os_log_type_t v33 = "%{public}s called with null block, dumping backtrace:%{public}s";
              goto LABEL_71;
            }

            if (v50)
            {
              *(_DWORD *)addrinfo buf = 136446210;
              *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
              uint64_t v25 = "%{public}s called with null block, no backtrace";
              goto LABEL_105;
            }
          }

          else
          {
            __int16 v23 = (os_log_s *)__nwlog_obj();
            os_log_type_t v24 = handler[0];
            if (os_log_type_enabled(v23, handler[0]))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
              uint64_t v25 = "%{public}s called with null block, backtrace limit exceeded";
              goto LABEL_105;
            }
          }
        }

        goto LABEL_106;
      }

    goto LABEL_73;
  }

  id v6 = v3[2];
  if (v6)
  {
    os_log_type_t v7 = (void *)nw_protocol_boringssl_copy_definition();
    identifier = nw_protocol_definition_get_identifier(v7);
    os_log_type_t v9 = (void *)nw_protocol_boringssl_copy_definition();
    BOOL v10 = nw_parameters_copy_protocol_options_for_definition(v6, v9);

    os_log_type_t v11 = v10;
    Class = object_getClass(v5);
    __int16 v13 = (objc_class *)MEMORY[0x1895F9250];
    if (Class != (Class)MEMORY[0x1895F9250])
    {
      id v14 = 0LL;
LABEL_36:

      goto LABEL_37;
    }

    xpc_dictionary_get_value(v5, "validate");
    id v15 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v16 = v15;
    if (!v15 || object_getClass(v15) != v13)
    {
      id v14 = 0LL;
LABEL_35:

      goto LABEL_36;
    }

    xpc_dictionary_get_value(v16, identifier);
    id v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      os_log_type_t v18 = sec_protocol_options_matches_config();
      char v19 = v3[2];
      if (v18)
      {
        if (!v19 || nw_path_parameters_get_logging_disabled(v19[13]))
        {
          id v14 = 1LL;
          goto LABEL_34;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v20 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          BOOL v21 = *((_DWORD *)v3 + 112);
          *(_DWORD *)addrinfo buf = 136446466;
          v44 = "nw_connection_check_experimental_probe_options_locked";
          os_log_type_t v45 = 1024;
          LODWORD(v46) = v21;
          _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Probing a TLS connection with a matching config.",  buf,  0x12u);
        }

        id v14 = 1LL;
        goto LABEL_33;
      }

      if (v19 && !nw_path_parameters_get_logging_disabled(v19[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v20 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_32;
        }
        uint64_t v25 = *((_DWORD *)v3 + 112);
        *(_DWORD *)addrinfo buf = 136446466;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        os_log_type_t v45 = 1024;
        LODWORD(v46) = v25;
        os_log_type_t v24 = "%{public}s [C%u] Not probing a TLS connection with a mismatched config.";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v20, OS_LOG_TYPE_DEBUG, v24, buf, 0x12u);
LABEL_32:
        id v14 = 0LL;
LABEL_33:

LABEL_34:
        goto LABEL_35;
      }
    }

    else
    {
      os_log_type_t v22 = v3[2];
      if (v22 && !nw_path_parameters_get_logging_disabled(v22[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v20 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_32;
        }
        __int16 v23 = *((_DWORD *)v3 + 112);
        *(_DWORD *)addrinfo buf = 136446466;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        os_log_type_t v45 = 1024;
        LODWORD(v46) = v23;
        os_log_type_t v24 = "%{public}s [C%u] Missing TLS config.";
        goto LABEL_31;
      }
    }

    id v14 = 0LL;
    goto LABEL_34;
  }

  id v14 = 0LL;
LABEL_37:

LABEL_38:
  return v14;
}

    if (v23) {
      free(v23);
    }
    goto LABEL_67;
  }

  nw_context_assert_queue(*((void **)v7 + 3));
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_229);
  }
  if (v8)
  {
    BOOL v10 = _Block_copy(v8);
    if (a2 - 4 > 0xFFFFFFFD)
    {
      if (a2 != 3) {
        goto LABEL_55;
      }
      if (_nw_signposts_once == -1)
      {
        if (!_nw_signposts_enabled) {
          goto LABEL_55;
        }
      }

      else
      {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_229);
        if (!_nw_signposts_enabled) {
          goto LABEL_55;
        }
      }

      goto LABEL_55;
    }

    os_log_type_t v11 = *((void *)v7 + 55);
    if (v11 && (os_log_type_t v12 = *(void *)(v11 + 24) - *(void *)(v11 + 16)) != 0)
    {
      nw_array_get_object_at_index(v11, (v12 >> 3) - 1);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (a2 != 4) {
        goto LABEL_28;
      }
    }

    else
    {
      __int16 v13 = 0LL;
      if (a2 != 4) {
        goto LABEL_28;
      }
    }

    if (!v13) {
      __int16 v13 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 50);
    }
LABEL_28:
    if (v13)
    {
      os_log_type_t v18 = *((void *)v7 + 2);
      if (!v18 || nw_path_parameters_get_logging_disabled(*(void *)(v18 + 104))) {
        goto LABEL_66;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      char v19 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v20 = *((_DWORD *)v7 + 112);
        if (a2 > 5) {
          BOOL v21 = "unknown";
        }
        else {
          BOOL v21 = off_189BB9BD0[a2];
        }
        *(_DWORD *)addrinfo buf = 136446978;
        v44 = "nw_connection_report_state_with_handler_on_nw_queue";
        os_log_type_t v45 = 1024;
        *(_DWORD *)v46 = v20;
        *(_WORD *)&v46[4] = 2082;
        *(void *)&v46[6] = v21;
        __int16 v47 = 2114;
        BOOL v48 = v13;
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%u] reporting state %{public}s error %{public}@",  buf,  0x26u);
      }

      goto LABEL_65;
    }

    if (!v18) {
      goto LABEL_74;
    }
LABEL_73:
    free(v18);
    goto LABEL_74;
  }

  os_log_type_t v7 = nw_endpoint_handler_copy_flow(v5);
  os_log_type_t v8 = v7;
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v40 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    __int16 v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if ((__nwlog_fault(v13, type, &v68) & 1) == 0) {
      goto LABEL_66;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v41 = (os_log_s *)(id)gLogObj;
      os_log_type_t v42 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s called with null endpoint_flow", applier, 0xCu);
      }
    }

    else if ((_BYTE)v68)
    {
      v54 = __nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v41 = (os_log_s *)(id)gLogObj;
      os_log_type_t v55 = type[0];
      os_log_type_t v56 = os_log_type_enabled(v41, type[0]);
      if (v54)
      {
        if (v56)
        {
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v54;
          _os_log_impl( &dword_181A5C000,  v41,  v55,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  applier,  0x16u);
        }

        os_log_type_t v37 = (char *)v54;
LABEL_65:
        free(v37);
        goto LABEL_66;
      }

      if (v56)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl( &dword_181A5C000,  v41,  v55,  "%{public}s called with null endpoint_flow, no backtrace",  applier,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v41 = (os_log_s *)(id)gLogObj;
      BOOL v65 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl( &dword_181A5C000,  v41,  v65,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  applier,  0xCu);
      }
    }

    goto LABEL_153;
  }

  os_log_type_t v9 = *((void *)v7 + 114);
  if (!v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v46 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    __int16 v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v41 = (os_log_s *)(id)gLogObj;
      __int16 v47 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl( &dword_181A5C000,  v41,  v47,  "%{public}s called with null endpoint_flow->socket_protocol",  applier,  0xCu);
      }

      goto LABEL_153;
    }

    if (!(_BYTE)v68)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v41 = (os_log_s *)(id)gLogObj;
      v66 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl( &dword_181A5C000,  v41,  v66,  "%{public}s called with null endpoint_flow->socket_protocol, backtrace limit exceeded",  applier,  0xCu);
      }

      goto LABEL_153;
    }

    os_log_type_t v57 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v41 = (os_log_s *)(id)gLogObj;
    id v58 = type[0];
    v59 = os_log_type_enabled(v41, type[0]);
    if (!v57)
    {
      if (v59)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl( &dword_181A5C000,  v41,  v58,  "%{public}s called with null endpoint_flow->socket_protocol, no backtrace",  applier,  0xCu);
      }

      goto LABEL_153;
    }

    if (v59)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = v57;
      _os_log_impl( &dword_181A5C000,  v41,  v58,  "%{public}s called with null endpoint_flow->socket_protocol, dumping backtrace:%{public}s",  applier,  0x16u);
    }

    goto LABEL_120;
  }

  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v48 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    __int16 v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v41 = (os_log_s *)(id)gLogObj;
      id v49 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_181A5C000, v41, v49, "%{public}s called with null initial_inbound_data", applier, 0xCu);
      }

      os_log_type_t v33 = 0LL;
LABEL_108:

      _Block_object_dispose(v87, 8);
      goto LABEL_109;
    }

    __nwlog_obj();
    id v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v94 = "nw_connection_read_buffer";
    BOOL v65 = (char *)_os_log_send_and_compose_impl();

    v87[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v65, v87, &type))
    {
      if (v87[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v69 = v87[0];
        if (os_log_type_enabled(v66, v87[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_181A5C000, v66, v69, "%{public}s called with null handler", buf, 0xCu);
        }

    free(v8);
    goto LABEL_73;
  }

  os_log_type_t v18 = *(unsigned int *)(a1 + 56);
  if (*MEMORY[0x1895FD590] + v18 < (unint64_t)v4)
  {
    if (gLogDatapath)
    {
      char v19 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v55 = "frame_cache_candidate_frame_length_is_match";
        os_log_type_t v56 = 1024;
        *(_DWORD *)os_log_type_t v57 = v4;
        *(_WORD *)&v57[4] = 1024;
        *(_DWORD *)&v57[6] = v18;
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s candidate frame (%u bytes) is too much larger than requested (%u bytes), skipping",  buf,  0x18u);
      }
    }

    goto LABEL_41;
  }

  if (v4 < v18)
  {
LABEL_41:
    if (!v5)
    {
      os_log_type_t v22 = *(void *)(*(void *)(a1 + 40) + 8LL);
      if (!*(void *)(v22 + 24))
      {
        *(void *)(v22 + 24) = a2;
        if (gLogDatapath)
        {
          __int16 v23 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v55 = "nw_frame_cache_create_frame_block_invoke";
            os_log_type_t v56 = 2048;
            *(void *)os_log_type_t v57 = a2;
            _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s reserving bufferless frame %p if better candidate not found",  buf,  0x16u);
          }
        }
      }
    }

    return 1LL;
  }

  os_log_type_t v27 = *(void *)(a2 + 16);
  BOOL v28 = *(void **)(a2 + 24);
  if (v27)
  {
    *(void *)(v27 + 24) = v28;
    BOOL v28 = *(void **)(a2 + 24);
  }

  else
  {
    *(void *)(*(void *)(a1 + 48) + 8LL) = v28;
  }

  *BOOL v28 = v27;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  os_log_type_t v29 = *(void *)(a1 + 48);
  __int16 v30 = *(_DWORD *)(v29 + 24);
  *(_DWORD *)(v29 + 24) = v30 - 1;
  if (!v30)
  {
    __nwlog_obj();
    os_log_type_t v31 = *(unsigned int *)(*(void *)(a1 + 48) + 24LL);
    *(_DWORD *)addrinfo buf = 136446978;
    os_log_type_t v55 = "nw_frame_cache_create_frame_block_invoke";
    os_log_type_t v56 = 2082;
    *(void *)os_log_type_t v57 = "frame_cache->empty_frames_count";
    *(_WORD *)&v57[8] = 2048;
    id v58 = 1LL;
    v59 = 2048;
    char v60 = v31;
    BOOL v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v52 = 0;
    if (__nwlog_fault(v32, &type, &v52))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          BOOL v35 = *(unsigned int *)(*(void *)(a1 + 48) + 24LL);
          *(_DWORD *)addrinfo buf = 136446978;
          os_log_type_t v55 = "nw_frame_cache_create_frame_block_invoke";
          os_log_type_t v56 = 2082;
          *(void *)os_log_type_t v57 = "frame_cache->empty_frames_count";
          *(_WORD *)&v57[8] = 2048;
          id v58 = 1LL;
          v59 = 2048;
          char v60 = v35;
          os_log_type_t v36 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_91:
          _os_log_impl(&dword_181A5C000, v33, v34, v36, buf, 0x2Au);
        }
      }

      else if (v52)
      {
        os_log_type_t v37 = (char *)__nw_create_backtrace_string();
        os_log_type_t v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        os_log_type_t v38 = os_log_type_enabled(v33, type);
        if (v37)
        {
          if (v38)
          {
            os_log_type_t v39 = *(unsigned int *)(*(void *)(a1 + 48) + 24LL);
            *(_DWORD *)addrinfo buf = 136447234;
            os_log_type_t v55 = "nw_frame_cache_create_frame_block_invoke";
            os_log_type_t v56 = 2082;
            *(void *)os_log_type_t v57 = "frame_cache->empty_frames_count";
            *(_WORD *)&v57[8] = 2048;
            id v58 = 1LL;
            v59 = 2048;
            char v60 = v39;
            os_log_type_t v61 = 2082;
            objc_super v62 = v37;
            _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v37);
          goto LABEL_92;
        }

        if (v38)
        {
          BOOL v41 = *(unsigned int *)(*(void *)(a1 + 48) + 24LL);
          *(_DWORD *)addrinfo buf = 136446978;
          os_log_type_t v55 = "nw_frame_cache_create_frame_block_invoke";
          os_log_type_t v56 = 2082;
          *(void *)os_log_type_t v57 = "frame_cache->empty_frames_count";
          *(_WORD *)&v57[8] = 2048;
          id v58 = 1LL;
          v59 = 2048;
          char v60 = v41;
          os_log_type_t v36 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_91;
        }
      }

      else
      {
        os_log_type_t v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          os_log_type_t v40 = *(unsigned int *)(*(void *)(a1 + 48) + 24LL);
          *(_DWORD *)addrinfo buf = 136446978;
          os_log_type_t v55 = "nw_frame_cache_create_frame_block_invoke";
          os_log_type_t v56 = 2082;
          *(void *)os_log_type_t v57 = "frame_cache->empty_frames_count";
          *(_WORD *)&v57[8] = 2048;
          id v58 = 1LL;
          v59 = 2048;
          char v60 = v40;
          os_log_type_t v36 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_91;
        }
      }
    }

    if (v22) {
      free(v22);
    }
    id v6 = 0LL;
    goto LABEL_22;
  }

  __nwlog_obj();
  id v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
  os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v33 = 0;
  if (__nwlog_fault(v18, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
        _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v33)
    {
      uint64_t v25 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      objc_super v26 = type;
      os_log_type_t v27 = os_log_type_enabled(v19, type);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v25;
          _os_log_impl( &dword_181A5C000,  v19,  v26,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v25);
        goto LABEL_63;
      }

      if (v27)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
        _os_log_impl(&dword_181A5C000, v19, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
        _os_log_impl( &dword_181A5C000,  v19,  v31,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  PBDataWriterWriteInt32Field();
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_17:
    if ((has & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_74;
  }

      if (v16) {
        free(v16);
      }
      return 4294966775LL;
    }

    if (!(_BYTE)v126)
    {
      uint64_t v70 = (os_log_s *)__nwlog_obj();
      os_log_type_t v71 = v130;
      if (os_log_type_enabled(v70, (os_log_type_t)v130))
      {
        addrinfo buf = 136446210;
        v137 = "send_data_callback";
        char v19 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_160;
      }

      goto LABEL_72;
    }

    os_log_type_t v33 = (char *)__nw_create_backtrace_string();
    uint64_t v70 = (os_log_s *)__nwlog_obj();
    os_log_type_t v71 = v130;
    os_log_type_t v83 = os_log_type_enabled(v70, (os_log_type_t)v130);
    if (!v33)
    {
      if (v83)
      {
        addrinfo buf = 136446210;
        v137 = "send_data_callback";
        char v19 = "%{public}s called with null source, no backtrace";
        goto LABEL_160;
      }

      goto LABEL_72;
    }

    if (!v83) {
      goto LABEL_44;
    }
    addrinfo buf = 136446466;
    v137 = "send_data_callback";
    v138 = 2082;
    v139 = (uint64_t)v33;
    os_log_type_t v36 = "%{public}s called with null source, dumping backtrace:%{public}s";
    goto LABEL_136;
  }

  if (!a4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v20 = a6 + 205;
    BOOL v21 = *(_DWORD *)(a2 + 8);
    addrinfo buf = 136446722;
    v137 = "send_data_callback";
    v138 = 2082;
    v139 = a6 + 205;
    v140 = 1024;
    *(_DWORD *)v141 = v21;
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v130) = 16;
    LOBYTE(v126) = 0;
    if (v130 == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = gLogObj;
      __int16 v23 = v130;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130)) {
        goto LABEL_72;
      }
      os_log_type_t v24 = *(_DWORD *)(a2 + 8);
      addrinfo buf = 136446722;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = v20;
      v140 = 1024;
      *(_DWORD *)v141 = v24;
      char v19 = "%{public}s %{public}s asked to send 0 bytes on stream %d";
    }

    else if ((_BYTE)v126)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = gLogObj;
      __int16 v23 = v130;
      os_log_type_t v34 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130);
      if (v33)
      {
        if (v34)
        {
          BOOL v35 = *(_DWORD *)(a2 + 8);
          addrinfo buf = 136446978;
          v137 = "send_data_callback";
          v138 = 2082;
          v139 = v20;
          v140 = 1024;
          *(_DWORD *)v141 = v35;
          *(_WORD *)&v141[4] = 2082;
          *(void *)&v141[6] = v33;
          os_log_type_t v36 = "%{public}s %{public}s asked to send 0 bytes on stream %d, dumping backtrace:%{public}s";
          os_log_type_t v37 = (os_log_s *)v22;
          os_log_type_t v38 = v23;
          os_log_type_t v39 = 38;
LABEL_43:
          _os_log_impl(&dword_181A5C000, v37, v38, v36, (uint8_t *)&buf, v39);
        }

      free(v24);
      if (!v18) {
        goto LABEL_96;
      }
      goto LABEL_95;
    }

    char v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type;
    if (!os_log_type_enabled(v19, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    __int16 v47 = "nw_http1_get_http1_protocol";
    BOOL v21 = "%{public}s called with null handle";
LABEL_93:
    _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
    goto LABEL_94;
  }

  unsigned int v4 = *(_DWORD *)(v2 + 24);
  id v5 = *(uint64_t **)(a1 + 40);
  if (v4 == 1) {
    goto LABEL_10;
  }
  if (v4 != 2)
  {
    if (v4 != 3)
    {
LABEL_96:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "nw_protocol_http1_copy_info";
      BOOL v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v36 = (os_log_s *)gLogObj;
        os_log_type_t v37 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_129;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v47 = "nw_protocol_http1_copy_info";
        os_log_type_t v38 = "%{public}s called with null http1";
        goto LABEL_128;
      }

      if (!v44)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v36 = (os_log_s *)gLogObj;
        os_log_type_t v37 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_129;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v47 = "nw_protocol_http1_copy_info";
        os_log_type_t v38 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_128;
      }

      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v36 = (os_log_s *)gLogObj;
      os_log_type_t v37 = type;
      os_log_type_t v40 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v39)
      {
        if (!v40) {
          goto LABEL_129;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v47 = "nw_protocol_http1_copy_info";
        os_log_type_t v38 = "%{public}s called with null http1, no backtrace";
        goto LABEL_128;
      }

      if (v40)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        __int16 v47 = "nw_protocol_http1_copy_info";
        BOOL v48 = 2082;
        id v49 = v39;
        _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v39);
LABEL_129:
      if (!v35) {
        return 0LL;
      }
LABEL_130:
      free(v35);
      return 0LL;
    }

    id v6 = *(void *)(v2 + 16);
    if (v6)
    {
      id v5 = (uint64_t *)(v6 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    __int16 v47 = "nw_http1_get_http1_protocol";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "nw_http1_get_http1_protocol";
      BOOL v21 = "%{public}s called with null handle->http1_connection";
      goto LABEL_93;
    }

    if (!v44)
    {
      char v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "nw_http1_get_http1_protocol";
      BOOL v21 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_93;
    }

    os_log_type_t v24 = (char *)__nw_create_backtrace_string();
    char v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type;
    os_log_type_t v31 = os_log_type_enabled(v19, type);
    if (!v24)
    {
      if (!v31) {
        goto LABEL_94;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "nw_http1_get_http1_protocol";
      BOOL v21 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_93;
    }

    if (v31)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      __int16 v47 = "nw_http1_get_http1_protocol";
      BOOL v48 = 2082;
      id v49 = v24;
      objc_super v26 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_71;
    }

    goto LABEL_72;
  }

  os_log_type_t v7 = *(void *)(v2 + 8);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    __int16 v47 = "nw_http1_get_http1_protocol";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "nw_http1_get_http1_protocol";
      BOOL v21 = "%{public}s called with null handle->http1_stream";
      goto LABEL_93;
    }

    if (!v44)
    {
      char v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "nw_http1_get_http1_protocol";
      BOOL v21 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_93;
    }

    os_log_type_t v24 = (char *)__nw_create_backtrace_string();
    char v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v32 = os_log_type_enabled(v19, type);
    if (!v24)
    {
      if (!v32) {
        goto LABEL_94;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "nw_http1_get_http1_protocol";
      BOOL v21 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_93;
    }

    if (v32)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      __int16 v47 = "nw_http1_get_http1_protocol";
      BOOL v48 = 2082;
      id v49 = v24;
      objc_super v26 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_71;
    }

    goto LABEL_72;
  }

  id v5 = (uint64_t *)(v7 + 248);
LABEL_10:
  os_log_type_t v8 = *v5;
  if (!v8) {
    goto LABEL_96;
  }
  if (v4 != 2)
  {
    if (v4 != 3) {
      goto LABEL_114;
    }
    os_log_type_t v9 = *(void *)(v2 + 16);
    if (v9)
    {
      BOOL v10 = (uint64_t *)(v9 + 488);
      goto LABEL_16;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    __int16 v47 = "nw_http1_get_stream_for_protocol";
    os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v27, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v28 = (os_log_s *)__nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_112;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v47 = "nw_http1_get_stream_for_protocol";
        __int16 v30 = "%{public}s called with null handle->http1_connection";
        goto LABEL_111;
      }

      if (!v44)
      {
        BOOL v28 = (os_log_s *)__nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_112;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v47 = "nw_http1_get_stream_for_protocol";
        __int16 v30 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_111;
      }

      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      BOOL v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      os_log_type_t v34 = os_log_type_enabled(v28, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          __int16 v47 = "nw_http1_get_stream_for_protocol";
          BOOL v48 = 2082;
          id v49 = v33;
          _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        goto LABEL_112;
      }

      if (v34)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v47 = "nw_http1_get_stream_for_protocol";
        __int16 v30 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_111:
        _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0xCu);
      }
    }

      free(v27);
      if (!v21)
      {
LABEL_96:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)addrinfo buf = 136446210;
        id v49 = "nw_protocol_http1_updated_path";
        os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v46 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v39 = (os_log_s *)gLogObj;
          os_log_type_t v40 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_128;
          }
          *(_DWORD *)addrinfo buf = 136446210;
          id v49 = "nw_protocol_http1_updated_path";
          BOOL v41 = "%{public}s called with null http1";
        }

        else if (v46)
        {
          os_log_type_t v42 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v39 = (os_log_s *)gLogObj;
          os_log_type_t v40 = type;
          char v43 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v42)
          {
            if (v43)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              id v49 = "nw_protocol_http1_updated_path";
              os_log_type_t v50 = 2082;
              BOOL v51 = v42;
              v44 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_121:
              _os_log_impl(&dword_181A5C000, v39, v40, v44, buf, 0x16u);
            }

    free(backtrace_string);
    goto LABEL_90;
  }

  unsigned int v4 = *(const char **)(v1 + 808);
  id v5 = *(unsigned int *)(v1 + 844);
  if ((_DWORD)v5)
  {
    id v6 = &v4[v5];
    while (1)
    {
      os_log_type_t v7 = *(unsigned __int8 *)v4;
      if (v7 != 32 && v7 != 9) {
        break;
      }
      ++v4;
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
      {
        os_log_type_t v9 = 0LL;
        unsigned int v4 = v6;
        goto LABEL_21;
      }
    }

    while (1)
    {
      BOOL v10 = (v5 - 1);
      os_log_type_t v11 = v4[v10];
      if (v11 != 32 && v11 != 9) {
        break;
      }
      LODWORD(v5) = v5 - 1;
      if (!v10) {
        goto LABEL_20;
      }
    }

    os_log_type_t v9 = v5;
  }

  else
  {
LABEL_20:
    os_log_type_t v9 = 0LL;
  }

      free(backtrace_string);
      goto LABEL_86;
    }

    BOOL v32 = (os_log_s *)__nwlog_obj();
    os_log_type_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_86;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v48 = "nw_protocol_replicate_remove_input_handler";
    os_log_type_t v34 = "%{public}s called with null protocol";
LABEL_85:
    _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0xCu);
LABEL_86:
    if (v31) {
      free(v31);
    }
    return 0LL;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v48 = "nw_protocol_replicate_remove_input_handler";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v48 = "nw_protocol_replicate_remove_input_handler";
      os_log_type_t v34 = "%{public}s called with null replicate";
      goto LABEL_85;
    }

    if (!v45)
    {
      BOOL v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v48 = "nw_protocol_replicate_remove_input_handler";
      os_log_type_t v34 = "%{public}s called with null replicate, backtrace limit exceeded";
      goto LABEL_85;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v32 = (os_log_s *)__nwlog_obj();
    os_log_type_t v33 = type;
    os_log_type_t v38 = os_log_type_enabled(v32, type);
    if (backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v48 = "nw_protocol_replicate_remove_input_handler";
        id v49 = 2082;
        os_log_type_t v50 = backtrace_string;
        os_log_type_t v37 = "%{public}s called with null replicate, dumping backtrace:%{public}s";
        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (!v38) {
      goto LABEL_86;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v48 = "nw_protocol_replicate_remove_input_handler";
    os_log_type_t v34 = "%{public}s called with null replicate, no backtrace";
    goto LABEL_85;
  }

  nw_protocol_set_output_handler((uint64_t)a2, 0LL);
  if (a1->default_input_handler != a2) {
    return 0LL;
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0LL);
  output_handler = a1->output_handler;
  if (output_handler) {
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
  }
  os_log_type_t v9 = *((void *)handle + 14);
  if (v9)
  {
    (*(void (**)(void))(*(void *)(v9 + 24) + 8LL))();
    *((void *)handle + 14) = 0LL;
  }

  BOOL v10 = (void *)*((void *)handle + 22);
  if (v10)
  {
    os_release(v10);
    *((void *)handle + 22) = 0LL;
  }

  os_log_type_t v11 = *((void *)handle + 15);
  if (v11)
  {
    (*(void (**)(void))(*(void *)(v11 + 24) + 8LL))();
    *((void *)handle + 15) = 0LL;
  }

  os_log_type_t v12 = (void *)*((void *)handle + 23);
  if (v12)
  {
    os_release(v12);
    *((void *)handle + 23) = 0LL;
  }

  __int16 v13 = *((void *)handle + 16);
  if (v13)
  {
    (*(void (**)(void))(*(void *)(v13 + 24) + 8LL))();
    *((void *)handle + 16) = 0LL;
  }

  id v14 = (void *)*((void *)handle + 24);
  if (v14)
  {
    os_release(v14);
    *((void *)handle + 24) = 0LL;
  }

  id v15 = *((void *)handle + 17);
  if (v15)
  {
    (*(void (**)(void))(*(void *)(v15 + 24) + 8LL))();
    *((void *)handle + 17) = 0LL;
  }

  BOOL v16 = (void *)*((void *)handle + 25);
  if (v16)
  {
    os_release(v16);
    *((void *)handle + 25) = 0LL;
  }

  id v17 = *((void *)handle + 18);
  if (v17)
  {
    (*(void (**)(void))(*(void *)(v17 + 24) + 8LL))();
    *((void *)handle + 18) = 0LL;
  }

  os_log_type_t v18 = (void *)*((void *)handle + 26);
  if (v18)
  {
    os_release(v18);
    *((void *)handle + 26) = 0LL;
  }

  char v19 = *((void *)handle + 19);
  if (v19)
  {
    (*(void (**)(void))(*(void *)(v19 + 24) + 8LL))();
    *((void *)handle + 19) = 0LL;
  }

  os_log_type_t v20 = (void *)*((void *)handle + 27);
  if (v20)
  {
    os_release(v20);
    *((void *)handle + 27) = 0LL;
  }

  BOOL v21 = *((void *)handle + 20);
  if (v21)
  {
    (*(void (**)(void))(*(void *)(v21 + 24) + 8LL))();
    *((void *)handle + 20) = 0LL;
  }

  os_log_type_t v22 = (void *)*((void *)handle + 28);
  if (v22)
  {
    os_release(v22);
    *((void *)handle + 28) = 0LL;
  }

  __int16 v23 = *((void *)handle + 21);
  if (v23)
  {
    (*(void (**)(void))(*(void *)(v23 + 24) + 8LL))();
    *((void *)handle + 21) = 0LL;
  }

  os_log_type_t v24 = (void *)*((void *)handle + 29);
  if (v24)
  {
    os_release(v24);
    *((void *)handle + 29) = 0LL;
  }

  if (a3)
  {
    uint64_t v25 = *((void *)handle + 8);
    if (!v25)
    {
LABEL_44:
      a1->handle = 0LL;
      os_log_type_t v27 = (void *)*((void *)handle + 9);
      if (v27)
      {
        os_release(v27);
        *((void *)handle + 9) = 0LL;
      }

      BOOL v28 = (void *)*((void *)handle + 13);
      if (v28)
      {
        os_release(v28);
        *((void *)handle + 13) = 0LL;
      }

      os_log_type_t v29 = (void *)*((void *)handle + 12);
      if (v29)
      {
        os_release(v29);
        *((void *)handle + 12) = 0LL;
      }

      __int16 v30 = (void *)*((void *)handle + 8);
      if (v30) {
        os_release(v30);
      }
      free(handle);
      return 1LL;
    }

    if (nw_protocol_metadata_is_replicate(*((nw_protocol_metadata **)handle + 8)))
    {
      objc_super v26 = *(void *)(v25 + 32);
      if (v26)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v26 + 16));
        *(_BYTE *)(v26 + 20) = 1;
        os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 16));
      }

      goto LABEL_44;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v48 = "nw_replicate_metadata_invalidate";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v45 = 0;
    if (__nwlog_fault(v39, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v40 = (os_log_s *)__nwlog_obj();
        BOOL v41 = type;
        if (!os_log_type_enabled(v40, type)) {
          goto LABEL_98;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v48 = "nw_replicate_metadata_invalidate";
        os_log_type_t v42 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata)";
        goto LABEL_97;
      }

      if (!v45)
      {
        os_log_type_t v40 = (os_log_s *)__nwlog_obj();
        BOOL v41 = type;
        if (!os_log_type_enabled(v40, type)) {
          goto LABEL_98;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v48 = "nw_replicate_metadata_invalidate";
        os_log_type_t v42 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), backtrace limit exceeded";
        goto LABEL_97;
      }

      char v43 = (char *)__nw_create_backtrace_string();
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      BOOL v41 = type;
      v44 = os_log_type_enabled(v40, type);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          BOOL v48 = "nw_replicate_metadata_invalidate";
          id v49 = 2082;
          os_log_type_t v50 = v43;
          _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v43);
        goto LABEL_98;
      }

      if (v44)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v48 = "nw_replicate_metadata_invalidate";
        os_log_type_t v42 = "%{public}s called with null nw_protocol_metadata_is_replicate(metadata), no backtrace";
LABEL_97:
        _os_log_impl(&dword_181A5C000, v40, v41, v42, buf, 0xCu);
      }
    }

    goto LABEL_73;
  }

  id v5 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v19 = (id)gLogObj;
  *(_DWORD *)addrinfo buf = 136446978;
  os_log_type_t v33 = "setupFakeEthernet";
  os_log_type_t v34 = 1024;
  *(_DWORD *)BOOL v35 = a1;
  *(_WORD *)&v35[4] = 2082;
  *(void *)&v35[6] = a2;
  os_log_type_t v36 = 1024;
  os_log_type_t v37 = v5;
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (os_log_s *)(id)gLogObj;
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_72;
    }
    *(_DWORD *)addrinfo buf = 136446978;
    os_log_type_t v33 = "setupFakeEthernet";
    os_log_type_t v34 = 1024;
    *(_DWORD *)BOOL v35 = a1;
    *(_WORD *)&v35[4] = 2082;
    *(void *)&v35[6] = a2;
    os_log_type_t v36 = 1024;
    os_log_type_t v37 = v5;
    __int16 v13 = "%{public}s ioctl(%d, SIOCGIFFLAGS, %{public}s) failed %{darwin.errno}d";
    goto LABEL_70;
  }

  if (!v29)
  {
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v33 = "setupFakeEthernet";
      os_log_type_t v34 = 1024;
      *(_DWORD *)BOOL v35 = a1;
      *(_WORD *)&v35[4] = 2082;
      *(void *)&v35[6] = a2;
      os_log_type_t v36 = 1024;
      os_log_type_t v37 = v5;
      __int16 v13 = "%{public}s ioctl(%d, SIOCGIFFLAGS, %{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_70;
    }

    goto LABEL_72;
  }

  BOOL v21 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v12 = type;
  os_log_type_t v22 = os_log_type_enabled(v11, type);
  if (!v21)
  {
    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v33 = "setupFakeEthernet";
      os_log_type_t v34 = 1024;
      *(_DWORD *)BOOL v35 = a1;
      *(_WORD *)&v35[4] = 2082;
      *(void *)&v35[6] = a2;
      os_log_type_t v36 = 1024;
      os_log_type_t v37 = v5;
      __int16 v13 = "%{public}s ioctl(%d, SIOCGIFFLAGS, %{public}s) failed %{darwin.errno}d, no backtrace";
      goto LABEL_70;
    }

    goto LABEL_72;
  }

  if (v22)
  {
    *(_DWORD *)addrinfo buf = 136447234;
    os_log_type_t v33 = "setupFakeEthernet";
    os_log_type_t v34 = 1024;
    *(_DWORD *)BOOL v35 = a1;
    *(_WORD *)&v35[4] = 2082;
    *(void *)&v35[6] = a2;
    os_log_type_t v36 = 1024;
    os_log_type_t v37 = v5;
    os_log_type_t v38 = 2082;
    os_log_type_t v39 = v21;
    _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s ioctl(%d, SIOCGIFFLAGS, %{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x2Cu);
  }

  free(v21);
  if (v10) {
    goto LABEL_74;
  }
  return v5;
}

        free(v26);
        goto LABEL_73;
      }

      if (v40)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_181A5C000, v27, v39, "%{public}s called with null publicKey, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl( &dword_181A5C000,  v27,  v45,  "%{public}s called with null publicKey, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    if (v36) {
      free(v36);
    }
    goto LABEL_74;
  }

  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    id v68 = "-[NWUDPListener initWithParameters:delegate:]";
    os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(location) = 16;
    v66 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v40, &location, &v66))
    {
      if (location == 17)
      {
        __nwlog_obj();
        BOOL v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v42 = location;
        if (os_log_type_enabled(v41, (os_log_type_t)location))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          id v68 = "-[NWUDPListener initWithParameters:delegate:]";
          _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s called with null delegate", buf, 0xCu);
        }
      }

      else if (v66)
      {
        os_log_type_t v50 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v51 = location;
        os_log_type_t v52 = os_log_type_enabled(v41, (os_log_type_t)location);
        if (v50)
        {
          if (v52)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            id v68 = "-[NWUDPListener initWithParameters:delegate:]";
            v69 = 2082;
            uint64_t v70 = v50;
            _os_log_impl( &dword_181A5C000,  v41,  v51,  "%{public}s called with null delegate, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v50);
          goto LABEL_78;
        }

        if (v52)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          id v68 = "-[NWUDPListener initWithParameters:delegate:]";
          _os_log_impl(&dword_181A5C000, v41, v51, "%{public}s called with null delegate, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v57 = location;
        if (os_log_type_enabled(v41, (os_log_type_t)location))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          id v68 = "-[NWUDPListener initWithParameters:delegate:]";
          _os_log_impl( &dword_181A5C000,  v41,  v57,  "%{public}s called with null delegate, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      if ((v17 & 1) == 0)
      {
LABEL_73:
        -[NWURLSessionWebSocketTask processWork](v52);
        goto LABEL_74;
      }

      if (v52) {
        id v58 = v52[65];
      }
      else {
        id v58 = 0LL;
      }
LABEL_86:
      objc_msgSend(v52, "completeTaskWithError:", v58, v59);
LABEL_74:

LABEL_75:
      break;
  }

    BOOL v21 = 5;
    if (a3)
    {
LABEL_29:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v30 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136447234;
        os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
        v92 = 2114;
        os_log_type_t v93 = v15;
        v94 = 2082;
        *(void *)os_log_type_t v95 = a8;
        *(_WORD *)&v95[8] = 2114;
        *(void *)&v95[10] = v16;
        *(_WORD *)&v95[18] = 1024;
        *(_DWORD *)&v95[20] = v21;
        _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ failed %{public}s read for incoming request on %{public}@ %{darwin.errno}d",  buf,  0x30u);
      }

      if ((v21 - 32) <= 0x39 && ((1LL << (v21 - 32)) & 0x200000212420001LL) != 0
        || v21 == 5)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v31 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)addrinfo buf = 136446722;
          os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
          v92 = 2082;
          os_log_type_t v93 = a8;
          v94 = 1024;
          *(_DWORD *)os_log_type_t v95 = v21;
          _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d",  buf,  0x1Cu);
        }

        goto LABEL_36;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v37 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
      v92 = 2082;
      os_log_type_t v93 = a8;
      v94 = 1024;
      *(_DWORD *)os_log_type_t v95 = v21;
      os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v88 = 0;
      if (__nwlog_fault(v38, &type, &v88))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v40 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)addrinfo buf = 136446722;
            os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            os_log_type_t v93 = a8;
            v94 = 1024;
            *(_DWORD *)os_log_type_t v95 = v21;
            _os_log_impl( &dword_181A5C000,  v39,  v40,  "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d",  buf,  0x1Cu);
          }
        }

        else if (v88)
        {
          objc_super v62 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v63 = type;
          os_log_type_t v64 = os_log_type_enabled(v39, type);
          if (v62)
          {
            if (v64)
            {
              *(_DWORD *)addrinfo buf = 136446978;
              os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              os_log_type_t v93 = a8;
              v94 = 1024;
              *(_DWORD *)os_log_type_t v95 = v21;
              *(_WORD *)&v95[4] = 2082;
              *(void *)&v95[6] = v62;
              _os_log_impl( &dword_181A5C000,  v39,  v63,  "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x26u);
            }

            free(v62);
            goto LABEL_130;
          }

          if (v64)
          {
            *(_DWORD *)addrinfo buf = 136446722;
            os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            os_log_type_t v93 = a8;
            v94 = 1024;
            *(_DWORD *)os_log_type_t v95 = v21;
            _os_log_impl( &dword_181A5C000,  v39,  v63,  "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d, no backtrace",  buf,  0x1Cu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v69 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)addrinfo buf = 136446722;
            os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            os_log_type_t v93 = a8;
            v94 = 1024;
            *(_DWORD *)os_log_type_t v95 = v21;
            _os_log_impl( &dword_181A5C000,  v39,  v69,  "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d, backtrace limit exceeded",  buf,  0x1Cu);
          }
        }
      }

      free(v35);
      if (!v29) {
        return 0LL;
      }
LABEL_88:
      BOOL v28 = (char *)v29;
      goto LABEL_44;
    }

    __int16 v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_87;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    BOOL v32 = "%{public}s called with null old_input_protocol";
LABEL_86:
    _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
    goto LABEL_87;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    os_log_type_t v29 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      BOOL v32 = "%{public}s called with null new_input_protocol";
      goto LABEL_86;
    }

    if (!v39)
    {
      __int16 v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      BOOL v32 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_86;
    }

    BOOL v35 = (char *)__nw_create_backtrace_string();
    __int16 v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    os_log_type_t v38 = os_log_type_enabled(v30, type);
    if (!v35)
    {
      if (!v38) {
        goto LABEL_87;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      BOOL v32 = "%{public}s called with null new_input_protocol, no backtrace";
      goto LABEL_86;
    }

    if (v38)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
      char v43 = 2082;
      v44 = v35;
      os_log_type_t v37 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_71;
    }

    goto LABEL_72;
  }

  if (*(void **)(a1 + 48) == a2)
  {
    os_log_type_t v12 = a2[4];
    if (v12)
    {
      if (*(_UNKNOWN **)(v12 + 40) == &nw_protocol_ref_counted_handle
        && (os_log_type_t v22 = *(void *)(v12 + 88)) != 0
        && (__int16 v23 = v22 - 1, (*(void *)(v12 + 88) = v23) == 0LL))
      {
        os_log_type_t v24 = *(void (***)(void))(v12 + 64);
        if (v24)
        {
          *(void *)(v12 + 64) = 0LL;
          v24[2](v24);
          _Block_release(v24);
        }

        if ((*(_BYTE *)(v12 + 72) & 1) != 0)
        {
          uint64_t v25 = *(const void **)(v12 + 64);
          if (v25) {
            _Block_release(v25);
          }
        }

        free((void *)v12);
        objc_super v26 = *(void **)(a1 + 48);
        v3[4] = 0LL;
        id v3 = v26;
        if (!v26) {
          return nw_protocol_common_add_input_handler(a1, a3);
        }
      }

      else
      {
        a2[4] = 0LL;
      }
    }

    if ((_UNKNOWN *)v3[5] == &nw_protocol_ref_counted_handle)
    {
      id v17 = v3[11];
      if (v17)
      {
        os_log_type_t v18 = v17 - 1;
        v3[11] = v18;
        if (!v18)
        {
          char v19 = (void (**)(void))v3[8];
          if (v19)
          {
            v3[8] = 0LL;
            v19[2](v19);
            _Block_release(v19);
          }

          if ((v3[9] & 1) != 0)
          {
            os_log_type_t v20 = (const void *)v3[8];
            if (v20) {
              _Block_release(v20);
            }
          }

          free(v3);
        }
      }
    }

    *(void *)(a1 + 48) = 0LL;
    return nw_protocol_common_add_input_handler(a1, a3);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = *(char **)(a1 + 48);
  *(_DWORD *)addrinfo buf = 136446722;
  os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
  char v43 = 2048;
  v44 = v6;
  os_log_type_t v45 = 2048;
  v46 = v3;
  os_log_type_t v7 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v39 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (os_log_s *)gLogObj;
    os_log_type_t v9 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_42;
    }
    BOOL v10 = *(char **)(a1 + 48);
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    char v43 = 2048;
    v44 = v10;
    os_log_type_t v45 = 2048;
    v46 = v3;
    os_log_type_t v11 = "%{public}s Old input handler does not match (%p != %p)";
LABEL_41:
    _os_log_impl(&dword_181A5C000, v8, v9, v11, buf, 0x20u);
    goto LABEL_42;
  }

  if (!v39)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (os_log_s *)gLogObj;
    os_log_type_t v9 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_42;
    }
    BOOL v21 = *(char **)(a1 + 48);
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    char v43 = 2048;
    v44 = v21;
    os_log_type_t v45 = 2048;
    v46 = v3;
    os_log_type_t v11 = "%{public}s Old input handler does not match (%p != %p), backtrace limit exceeded";
    goto LABEL_41;
  }

  id v14 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v8 = (os_log_s *)gLogObj;
  os_log_type_t v9 = type;
  id v15 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_42;
    }
    os_log_type_t v27 = *(char **)(a1 + 48);
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    char v43 = 2048;
    v44 = v27;
    os_log_type_t v45 = 2048;
    v46 = v3;
    os_log_type_t v11 = "%{public}s Old input handler does not match (%p != %p), no backtrace";
    goto LABEL_41;
  }

  if (v15)
  {
    BOOL v16 = *(char **)(a1 + 48);
    *(_DWORD *)addrinfo buf = 136446978;
    os_log_type_t v42 = "nw_protocol_common_replace_input_handler";
    char v43 = 2048;
    v44 = v16;
    os_log_type_t v45 = 2048;
    v46 = v3;
    __int16 v47 = 2082;
    BOOL v48 = v14;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Old input handler does not match (%p != %p), dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v14);
LABEL_42:
  if (v7)
  {
    BOOL v28 = (char *)v7;
LABEL_44:
    free(v28);
  }

  return 0LL;
}

      if (!v23) {
        return;
      }
      goto LABEL_73;
    }

    if (!v68)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      uint64_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v71 = "__nw_protocol_connected";
        objc_super v26 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_71;
      }

      goto LABEL_72;
    }

    os_log_type_t v27 = (char *)__nw_create_backtrace_string();
    os_log_type_t v24 = (os_log_s *)__nwlog_obj();
    uint64_t v25 = type;
    BOOL v65 = os_log_type_enabled(v24, type);
    if (!v27)
    {
      if (v65)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v71 = "__nw_protocol_connected";
        objc_super v26 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (v65)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v71 = "__nw_protocol_connected";
      v72 = 2082;
      v73 = v27;
      os_log_type_t v29 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_48;
    }

    goto LABEL_73;
  }

  if ((*((_BYTE *)v1 + 140) & 4) == 0)
  {
    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v31.investigation_identifier) = 136446210;
    *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
    id v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(buf) = 16;
    LOBYTE(v30) = 0;
    if (buf == 17)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v19 = buf;
      if (os_log_type_enabled(v16, (os_log_type_t)buf))
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s Cannot report activity before activation",  (uint8_t *)&v31,  0xCu);
      }
    }

    else if ((_BYTE)v30)
    {
      __int16 v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = buf;
      uint64_t v25 = os_log_type_enabled(v16, (os_log_type_t)buf);
      if (v23)
      {
        if (v25)
        {
          LODWORD(v31.investigation_identifier) = 136446466;
          *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
          LOWORD(v31.label) = 2082;
          *(void *)((char *)&v31.label + 2) = v23;
          _os_log_impl( &dword_181A5C000,  v16,  v24,  "%{public}s Cannot report activity before activation, dumping backtrace:%{public}s",  (uint8_t *)&v31,  0x16u);
        }

        free(v23);
        if (!v15) {
          goto LABEL_39;
        }
LABEL_74:
        free(v15);
        goto LABEL_39;
      }

      if (v25)
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl( &dword_181A5C000,  v16,  v24,  "%{public}s Cannot report activity before activation, no backtrace",  (uint8_t *)&v31,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = buf;
      if (os_log_type_enabled(v16, (os_log_type_t)buf))
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s Cannot report activity before activation, backtrace limit exceeded",  (uint8_t *)&v31,  0xCu);
      }
    }

    goto LABEL_72;
  }

  if ((v1->token[9] & 1) == 0) {
    goto LABEL_39;
  }
  memset(&v31, 0, sizeof(v31));
  nw_activity_fill_out_activity_report(v1, &v31);
  if (os_variant_has_internal_diagnostics()
    && networkd_settings_get_BOOL((const char *)nw_setting_activity_write_metric_stream_to_log))
  {
    id v3 = v2;
    unsigned int v4 = nw_activity_create_activity_dictionary(v3, &v31);
    __int16 v30 = 0LL;
    if (nw_activity_metric_object_is_valid(v4, 0, (const char **)&v30))
    {
      if (__nwlog_metricstream_log::onceToken != -1) {
        dispatch_once(&__nwlog_metricstream_log::onceToken, &__block_literal_global_51_44361);
      }
      id v5 = (os_log_s *)(id)gmetricstreamLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        addrinfo buf = 136446210;
        os_log_type_t v33 = (const char *)v30;
        _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      }

      goto LABEL_34;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    addrinfo buf = 136446210;
    os_log_type_t v33 = "nw_activity_write_activity_report_to_log";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v28 = 0;
    if (__nwlog_fault(v7, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (os_log_s *)(id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          addrinfo buf = 136446210;
          os_log_type_t v33 = "nw_activity_write_activity_report_to_log";
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s generated activity dictionary is not valid",  (uint8_t *)&buf,  0xCu);
        }
      }

      else if (v28)
      {
        BOOL v10 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        os_log_type_t v12 = os_log_type_enabled(v8, type);
        if (v10)
        {
          if (v12)
          {
            addrinfo buf = 136446466;
            os_log_type_t v33 = "nw_activity_write_activity_report_to_log";
            os_log_type_t v34 = 2082;
            BOOL v35 = v10;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s generated activity dictionary is not valid, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x16u);
          }

          free(v10);
          if (!v7) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }

        if (v12)
        {
          addrinfo buf = 136446210;
          os_log_type_t v33 = "nw_activity_write_activity_report_to_log";
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s generated activity dictionary is not valid, no backtrace",  (uint8_t *)&buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          addrinfo buf = 136446210;
          os_log_type_t v33 = "nw_activity_write_activity_report_to_log";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s generated activity dictionary is not valid, backtrace limit exceeded",  (uint8_t *)&buf,  0xCu);
        }
      }
    }

    if (!v7)
    {
LABEL_34:
      if (v30) {
        free(v30);
      }
      if (v4) {

      }
      goto LABEL_39;
    }

    goto LABEL_73;
  }

  if ((*((_BYTE *)v3 + 140) & 4) != 0)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v33 = "nw_activity_set_reporting_strategy";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v10 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    if (!v30)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl( &dword_181A5C000,  v7,  v27,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v19 = type;
    os_log_type_t v20 = os_log_type_enabled(v7, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl( &dword_181A5C000,  v7,  v19,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, no backtrace",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    if (v20)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v33 = "nw_activity_set_reporting_strategy";
      os_log_type_t v34 = 2082;
      BOOL v35 = v18;
      _os_log_impl( &dword_181A5C000,  v7,  v19,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after activation, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_41;
  }

  if ((*((_BYTE *)v3 + 140) & 8) != 0)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v33 = "nw_activity_set_reporting_strategy";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    if (!v30)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v28 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl( &dword_181A5C000,  v7,  v28,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    os_log_type_t v22 = os_log_type_enabled(v7, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl( &dword_181A5C000,  v7,  v21,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, no backtrace",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v33 = "nw_activity_set_reporting_strategy";
      os_log_type_t v34 = 2082;
      BOOL v35 = v18;
      _os_log_impl( &dword_181A5C000,  v7,  v21,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot set nw_activity settings after completion, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      if (v26) {
        free(v26);
      }
      char v19 = 0;
      goto LABEL_33;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v21 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v42 = 0;
    if (__nwlog_fault(v22, type, &v42))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v23 = (os_log_s *)(id)gLogObj;
        os_log_type_t v24 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v42)
      {
        os_log_type_t v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v23 = (os_log_s *)(id)gLogObj;
        __int16 v30 = type[0];
        os_log_type_t v31 = os_log_type_enabled(v23, type[0]);
        if (v29)
        {
          if (v31)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v29;
            _os_log_impl( &dword_181A5C000,  v23,  v30,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v29);
          goto LABEL_63;
        }

        if (v31)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
          _os_log_impl(&dword_181A5C000, v23, v30, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v23 = (os_log_s *)(id)gLogObj;
        BOOL v35 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_multipath_subflow_count";
          _os_log_impl( &dword_181A5C000,  v23,  v35,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      free(backtrace_string);
      goto LABEL_82;
    }

    BOOL v32 = (os_log_s *)__nwlog_obj();
    os_log_type_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_82;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    os_log_type_t v34 = "%{public}s called with null http3";
LABEL_81:
    _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0xCu);
LABEL_82:
    if (v31) {
      free(v31);
    }
    return 0LL;
  }

  unsigned int v4 = (BOOL)a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v41 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_82;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v44 = "nw_http3_fix_quic_parameters";
      os_log_type_t v34 = "%{public}s called with null parameters";
      goto LABEL_81;
    }

    if (!v41)
    {
      BOOL v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_82;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      v44 = "nw_http3_fix_quic_parameters";
      os_log_type_t v34 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_81;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v32 = (os_log_s *)__nwlog_obj();
    os_log_type_t v33 = type;
    os_log_type_t v38 = os_log_type_enabled(v32, type);
    if (backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v44 = "nw_http3_fix_quic_parameters";
        os_log_type_t v45 = 2082;
        v46 = backtrace_string;
        os_log_type_t v37 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (!v38) {
      goto LABEL_82;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    os_log_type_t v34 = "%{public}s called with null parameters, no backtrace";
    goto LABEL_81;
  }

  if (a4)
  {
    os_log_type_t v8 = a2;
    unsigned int v4 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v8,  0,  1);
  }

  os_log_type_t v9 = *(void *)(a1 + 32);
  if (!v9)
  {
    if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v27 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v28 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)addrinfo buf = 136446978;
        v44 = "nw_http3_fix_quic_parameters";
        os_log_type_t v45 = 2082;
        v46 = (char *)(a1 + 1289);
        __int16 v47 = 2080;
        BOOL v48 = " ";
        id v49 = 1024;
        os_log_type_t v50 = v28;
        _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u> http3 does not yet have output handler, cannot fix parameters",  buf,  0x26u);
        return 0LL;
      }
    }

    return 0LL;
  }

  BOOL v10 = nw_parameters_copy_protocol_options_legacy((void *)v4, *(nw_protocol **)(a1 + 32));
  os_log_type_t v11 = v10;
  if (v10 && nw_protocol_options_is_quic_stream(v10))
  {
    os_log_type_t v12 = nw_protocol_options_copy(v11);
    nw_quic_stream_set_is_unidirectional(v12, a3);
    nw_protocol_http3_add_alpn_to_quic_options((nw_protocol_options *)v12);
    __int16 v13 = nw_quic_stream_copy_shared_connection_options(v12);
    id v14 = (sec_protocol_options *)nw_quic_connection_copy_sec_protocol_options(v13);
    if (*(_BYTE *)(a1 + 1288))
    {
      sec_protocol_options_set_new_session_ticket_request();
      sec_protocol_options_set_resumed_session_ticket_request();
    }

    if ((*(_WORD *)(a1 + 1373) & 0x20) != 0 && uuid_is_null((const unsigned __int8 *)(a1 + 848))
      || *(void *)(a1 + 864) && *(void *)(a1 + 872))
    {
      id v15 = (dispatch_object_s *)nw_context_copy_workloop(*(void **)(a1 + 1256));
      BOOL v16 = *(void *)(a1 + 1040);
      v40[0] = MEMORY[0x1895F87A8];
      v40[1] = 0x40000000LL;
      v40[2] = ___ZL28nw_http3_fix_quic_parametersP17nw_protocol_http3P13nw_parametersbb_block_invoke;
      v40[3] = &unk_189BC44D8;
      v40[4] = v16;
      nw_quic_connection_set_session_state_update_block(v13, v40, v15);
      if (v15) {
        dispatch_release(v15);
      }
    }

    if ((*(_WORD *)(a1 + 1373) & 0x20) != 0 && a4)
    {
      id v17 = *(void **)(a1 + 1136);
      if (v17)
      {
        os_log_type_t v18 = *(void **)(a1 + 1144);
        if (v18) {
          nw_quic_connection_set_session_state(v13, v17, v18);
        }
      }

      sec_protocol_options_set_tls_early_data_enabled();
      sec_protocol_options_set_tls_tickets_enabled(v14, 1);
    }

    if (v14) {
      os_release(v14);
    }
    if (v13) {
      os_release(v13);
    }
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
    }
    char v19 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
    nw_parameters_set_protocol_instance(v12, v20, v9);
    if (v19) {
      os_release(v19);
    }
    nw_protocol_options_inherit_log_id(v11, v12);
    BOOL v21 = v11;
    v21[153] = 1;

    os_log_type_t v22 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v4);
    nw_protocol_stack_replace_protocol_with_handle(v22, v9, v12);
    if (v22) {
      os_release(v22);
    }
    if (v12) {
      os_release(v12);
    }
LABEL_54:
    os_release(v11);
    return v4;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)addrinfo buf = 136446210;
  v44 = "nw_http3_fix_quic_parameters";
  __int16 v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v41 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v24 = (os_log_s *)gLogObj;
    uint64_t v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_51;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    objc_super v26 = "%{public}s No quic below http3";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
    goto LABEL_51;
  }

  if (!v41)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v24 = (os_log_s *)gLogObj;
    uint64_t v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_51;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    objc_super v26 = "%{public}s No quic below http3, backtrace limit exceeded";
    goto LABEL_50;
  }

  os_log_type_t v29 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v24 = (os_log_s *)gLogObj;
  uint64_t v25 = type;
  __int16 v30 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v29)
  {
    if (!v30) {
      goto LABEL_51;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    objc_super v26 = "%{public}s No quic below http3, no backtrace";
    goto LABEL_50;
  }

  if (v30)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    v44 = "nw_http3_fix_quic_parameters";
    os_log_type_t v45 = 2082;
    v46 = v29;
    _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s No quic below http3, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v29);
LABEL_51:
  if (v23) {
    free(v23);
  }
  if (v11) {
    goto LABEL_54;
  }
  return v4;
}

  if (v10) {
    free(v10);
  }
}
}

    goto LABEL_73;
  }

  if (!*(void *)a2)
  {
    os_log_type_t v8 = 0LL;
    goto LABEL_10;
  }

  Count = CFArrayGetCount(*(CFArrayRef *)a2);
  if (Count)
  {
    os_log_type_t v7 = 0LL;
    os_log_type_t v8 = 0LL;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)a2, v7);
      if (ValueAtIndex) {
        v8 += CFDataGetLength(ValueAtIndex) + 2;
      }
      ++v7;
    }

    while (Count != v7);
LABEL_10:
    BOOL v10 = *(const __CFData **)(a2 + 8);
    if (v10) {
      goto LABEL_11;
    }
LABEL_18:
    __int16 v13 = 0;
    os_log_type_t v11 = 0LL;
    goto LABEL_20;
  }

  os_log_type_t v8 = 0LL;
  BOOL v10 = *(const __CFData **)(a2 + 8);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_11:
  os_log_type_t v11 = CFDataGetLength(v10) + 2;
  os_log_type_t v12 = *(const __CFArray **)(a2 + 16);
  if (v12)
  {
    __int16 v13 = CFArrayGetCount(v12) + 1;
    if (v13 >= 2u)
    {
      id v14 = 0LL;
      do
      {
        id v15 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v14);
        if (v15) {
          v11 += CFDataGetLength(v15) + 2;
        }
        ++v14;
      }

      while (v13 - 1 != v14);
    }
  }

  else
  {
    __int16 v13 = 1;
  }

    goto LABEL_95;
  }

  if (!(_BYTE)v389)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v78 = (os_log_s *)(id)gLogObj;
    v86 = v425[0];
    if (os_log_type_enabled(v78, (os_log_type_t)v425[0]))
    {
      buf[0] = 136446722;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v75;
      HIWORD(buf[4]) = 1024;
      buf[5] = v70;
      _os_log_impl( &dword_181A5C000,  v78,  v86,  "%{public}s proxy_finish %u < proxy_start %u, backtrace limit exceeded",  (uint8_t *)buf,  0x18u);
    }

    goto LABEL_72;
  }

  BOOL v80 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v81 = (os_log_s *)(id)gLogObj;
  os_log_type_t v82 = v425[0];
  os_log_type_t v83 = os_log_type_enabled(v81, (os_log_type_t)v425[0]);
  if (!v80)
  {
    if (v83)
    {
      buf[0] = 136446722;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v75;
      HIWORD(buf[4]) = 1024;
      buf[5] = v70;
      _os_log_impl( &dword_181A5C000,  v81,  v82,  "%{public}s proxy_finish %u < proxy_start %u, no backtrace",  (uint8_t *)buf,  0x18u);
    }

    goto LABEL_95;
  }

  if (v83)
  {
    buf[0] = 136446978;
    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = v75;
    HIWORD(buf[4]) = 1024;
    buf[5] = v70;
    LOWORD(buf[6]) = 2082;
    *(void *)((char *)&buf[6] + 2) = v80;
    _os_log_impl( &dword_181A5C000,  v81,  v82,  "%{public}s proxy_finish %u < proxy_start %u, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x22u);
  }

  free(v80);
  id v5 = v374;
  if (v77) {
LABEL_96:
  }
    free(v77);
LABEL_97:
  if ((v55 & 1) == 0)
  {
    v87 = (id *)v375;
    if (v87)
    {
      v88 = v87;
      os_log_type_t v89 = v87[23];

      if (!v89) {
        goto LABEL_109;
      }
      v90 = v89;
      os_log_type_t v91 = v90;
      v92 = 1;
      switch(v90[38])
      {
        case 1:
          v92 = v90[39];
          break;
        case 2:
          v92 = 1002;
          break;
        case 3:
          v92 = 1001;
          break;
        case 4:
          break;
        default:
          v92 = 0;
          break;
      }

      os_log_type_t v93 = v382;
      v382->used_proxy_os_log_type_t type = v92;
      os_log_type_t v89 = v91;
      v94 = v89;
      if (v382->used_proxy_type == 1)
      {
        os_log_type_t v95 = v88;
        v94 = v95[24];

        os_log_type_t v93 = v382;
        if (!v94) {
          goto LABEL_109;
        }
      }

      *(void *)addrinfo buf = 0LL;
      *(void *)&buf[2] = buf;
      *(void *)&uint8_t buf[4] = 0x2020000000LL;
      LOBYTE(buf[6]) = 0;
      v406[0] = MEMORY[0x1895F87A8];
      v406[1] = 3221225472LL;
      v406[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_43;
      v406[3] = &unk_189BC7198;
      v406[4] = buf;
      v406[5] = v93;
      nw_proxy_config_enumerate_endpoints(v94, v406);
      _Block_object_dispose(buf, 8);
LABEL_108:

LABEL_109:
      id v5 = v374;
      goto LABEL_110;
    }

    __nwlog_obj();
    v267 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
    v268 = (char *)_os_log_send_and_compose_impl();

    v425[0] = 16;
    LOBYTE(v389) = 0;
    if (__nwlog_fault(v268, v425, &v389))
    {
      if (v425[0] == 17)
      {
        __nwlog_obj();
        v269 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v270 = v425[0];
        if (os_log_type_enabled(v269, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
          _os_log_impl(&dword_181A5C000, v269, v270, "%{public}s called with null parameters", (uint8_t *)buf, 0xCu);
        }
      }

      else
      {
        if ((_BYTE)v389)
        {
          v280 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v281 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v282 = v425[0];
          v283 = os_log_type_enabled(v281, (os_log_type_t)v425[0]);
          if (v280)
          {
            if (v283)
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v280;
              _os_log_impl( &dword_181A5C000,  v281,  v282,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
            }

            free(v280);
          }

          else
          {
            if (v283)
            {
              buf[0] = 136446210;
              *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
              _os_log_impl( &dword_181A5C000,  v281,  v282,  "%{public}s called with null parameters, no backtrace",  (uint8_t *)buf,  0xCu);
            }
          }

          goto LABEL_547;
        }

        __nwlog_obj();
        v269 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v289 = v425[0];
        if (os_log_type_enabled(v269, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
          _os_log_impl( &dword_181A5C000,  v269,  v289,  "%{public}s called with null parameters, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
        }
      }
    }

      if (!v38) {
        goto LABEL_74;
      }
      goto LABEL_73;
    }

    __nwlog_obj();
    *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
    *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
    os_log_type_t v38 = (void *)_os_log_send_and_compose_impl();
    v102[0] = OS_LOG_TYPE_ERROR;
    v107[0] = 0;
    if (v102[0] == OS_LOG_TYPE_FAULT)
    {
      id v68 = (os_log_s *)__nwlog_obj();
      v69 = v102[0];
      if (!os_log_type_enabled(v68, v102[0])) {
        goto LABEL_72;
      }
      *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
      *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
      BOOL v41 = "%{public}s called with null socket_handler";
    }

    else
    {
      if (v107[0])
      {
        v78 = (char *)__nw_create_backtrace_string();
        os_log_type_t v79 = (os_log_s *)__nwlog_obj();
        v69 = v102[0];
        loga = v79;
        BOOL v80 = os_log_type_enabled(v79, v102[0]);
        if (v78)
        {
          if (v80)
          {
            *(_DWORD *)&buf[0].unsigned int sa_len = 136446466;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
            *(_WORD *)&buf[0].sa_data[10] = 2082;
            *(void *)&buf[0].sa_data[12] = v78;
            _os_log_impl( &dword_181A5C000,  loga,  v69,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  &buf[0].sa_len,  0x16u);
          }

          free(v78);
          goto LABEL_72;
        }

        if (!v80) {
          goto LABEL_72;
        }
        *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
        *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
        BOOL v41 = "%{public}s called with null socket_handler, no backtrace";
        v44 = buf;
        os_log_type_t v45 = loga;
LABEL_160:
        v46 = v69;
        __int16 v47 = 12;
        goto LABEL_71;
      }

      id v68 = (os_log_s *)__nwlog_obj();
      v69 = v102[0];
      if (!os_log_type_enabled(v68, v102[0])) {
        goto LABEL_72;
      }
      *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
      *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
      BOOL v41 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    }

    v44 = buf;
    os_log_type_t v45 = v68;
    goto LABEL_160;
  }

  if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) != 0)
  {
    os_log_type_t v22 = 0LL;
    goto LABEL_117;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  os_log_type_t v7 = (NWConcrete_nw_protocol_definition *)(id)gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
  {
    id_string = nw_endpoint_handler_get_id_string(v3);
    id v15 = nw_endpoint_handler_dry_run_string(v3);
    BOOL v16 = nw_endpoint_handler_copy_endpoint(v3);
    id v17 = (os_log_s *)v7;
    logging_description = nw_endpoint_get_logging_description(v16);
    char v19 = nw_endpoint_handler_state_string(v3);
    os_log_type_t v20 = nw_endpoint_handler_mode_string(v3);
    BOOL v21 = nw_endpoint_handler_copy_current_path(v3);
    *(_DWORD *)&buf[0].unsigned int sa_len = 136447746;
    *(void *)&buf[0].sa_data[2] = "nw_endpoint_flow_attach_socket_protocol";
    *(_WORD *)&buf[0].sa_data[10] = 2082;
    *(void *)&buf[0].sa_data[12] = id_string;
    *(_WORD *)&buf[1].sa_data[4] = 2082;
    *(void *)&buf[1].sa_data[6] = v15;
    *(_WORD *)&buf[2].unsigned int sa_len = 2082;
    *(void *)buf[2].sa_data = logging_description;
    *(_WORD *)&buf[2].sa_data[8] = 2082;
    *(void *)&buf[2].sa_data[10] = v19;
    *(_WORD *)&buf[3].sa_data[2] = 2082;
    *(void *)&buf[3].sa_data[4] = v20;
    *(_WORD *)&buf[3].sa_data[12] = 2114;
    *(void *)&os_log_type_t v114 = v21;
    os_log_type_t v7 = (NWConcrete_nw_protocol_definition *)v17;
    _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Could not create socket protocol",  &buf[0].sa_len,  0x48u);
  }

  os_log_type_t v22 = 0LL;
LABEL_116:

LABEL_117:
  return v22;
}

            goto LABEL_237;
          }

          goto LABEL_237;
        }

        if ((*((_BYTE *)v5 + 36) & 2) != 0)
        {
          objc_super v26 = v7;
          os_log_type_t v27 = *((_BYTE *)v26 + 268);

          if ((v27 & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v11 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              BOOL v28 = v26;

              os_log_type_t v29 = v28;
              __int16 v30 = *((_BYTE *)v26 + 268);

              if ((v30 & 1) != 0) {
                os_log_type_t v31 = "dry-run ";
              }
              else {
                os_log_type_t v31 = "";
              }
              BOOL v32 = nw_endpoint_handler_copy_endpoint(v29);
              os_log_type_t v33 = nw_endpoint_get_logging_description(v32);
              loga = v5;
              os_log_type_t v34 = v28->id_str;
              BOOL v35 = v29;
              os_log_type_t v36 = v35;
              os_log_type_t v37 = v7->state;
              else {
                os_log_type_t v38 = off_189BBBBF0[v37];
              }

              os_log_type_t v42 = v36;
              char v43 = v42;
              v44 = "path";
              switch(*((_DWORD *)v42 + 29))
              {
                case 0:
                  break;
                case 1:
                  v44 = "resolver";
                  break;
                case 2:
                  v44 = nw_endpoint_flow_mode_string(v42[31]);
                  break;
                case 3:
                  v44 = "proxy";
                  break;
                case 4:
                  v44 = "fallback";
                  break;
                case 5:
                  v44 = "transform";
                  break;
                default:
                  v44 = "unknown-mode";
                  break;
              }

              v90 = v43;
              os_unfair_lock_lock((os_unfair_lock_t)v90 + 28);
              os_log_type_t v91 = v90[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v90 + 28);

              *(_DWORD *)addrinfo buf = 136447746;
              v219 = "nw_endpoint_flow_rebuild_stack";
              v220 = 2082;
              v221 = v34;
              v222 = 2082;
              v223 = (nw_protocol *)v31;
              v224 = 2082;
              v225 = (void *)v33;
              v226 = 2082;
              v227 = v38;
              v228 = 2082;
              v229 = v44;
              v230 = 2114;
              v231 = v91;
              _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failing, cannot rebuild stack",  buf,  0x48u);

              id v5 = loga;
            }

            goto LABEL_72;
          }

      _os_log_impl(&dword_181A5C000, v21, v22, v23, buf, 0xCu);
LABEL_73:
      if (v28) {
        free(v28);
      }
    }
  }

  return v5;
}

  if (v18) {
    free(v18);
  }
  return v9;
}

    if (v19) {
      free(v19);
    }
LABEL_13:
    if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
    {
      BOOL v10 = *(void *)(v2 + 88);
      if (v10)
      {
        os_log_type_t v11 = v10 - 1;
        *(void *)(v2 + 88) = v11;
        if (!v11)
        {
          os_log_type_t v12 = *(void (***)(void))(v2 + 64);
          if (v12)
          {
            *(void *)(v2 + 64) = 0LL;
            v12[2](v12);
            _Block_release(v12);
          }

          if ((*(_BYTE *)(v2 + 72) & 1) != 0)
          {
            __int16 v13 = *(const void **)(v2 + 64);
            if (v13) {
              _Block_release(v13);
            }
          }

          free((void *)v2);
        }
      }
    }

    if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
    {
      id v14 = *(void *)(v3 + 88);
      if (v14)
      {
        id v15 = v14 - 1;
        *(void *)(v3 + 88) = v15;
        if (!v15)
        {
          BOOL v16 = *(void (***)(void))(v3 + 64);
          if (v16)
          {
            *(void *)(v3 + 64) = 0LL;
            v16[2](v16);
            _Block_release(v16);
          }

          if ((*(_BYTE *)(v3 + 72) & 1) != 0)
          {
            id v17 = *(const void **)(v3 + 64);
            if (v17) {
              _Block_release(v17);
            }
          }

          goto LABEL_33;
        }
      }
    }

    return;
  }

void sub_181A76898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_protocol_options_copy(void *a1)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_protocol_options);
  id v3 = v1;
  id v4 = v3;
  if (!v2) {
    goto LABEL_12;
  }
  if (!v3)
  {
    __nwlog_obj();
    id v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v35 = "-[NWConcrete_nw_protocol_options initWithOptions:]";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v32.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v16, &v32, &type))
    {
      if (LOBYTE(v32.receiver) == 17)
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t receiver = (os_log_type_t)v32.receiver;
        if (os_log_type_enabled(v17, (os_log_type_t)v32.receiver))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v35 = "-[NWConcrete_nw_protocol_options initWithOptions:]";
          _os_log_impl(&dword_181A5C000, v17, receiver, "%{public}s called with null _options", buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = (os_log_type_t)v32.receiver;
        BOOL v25 = os_log_type_enabled(v17, (os_log_type_t)v32.receiver);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v35 = "-[NWConcrete_nw_protocol_options initWithOptions:]";
            __int16 v36 = 2082;
            os_log_type_t v37 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v17,  v24,  "%{public}s called with null _options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v25)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v35 = "-[NWConcrete_nw_protocol_options initWithOptions:]";
          _os_log_impl(&dword_181A5C000, v17, v24, "%{public}s called with null _options, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = (os_log_type_t)v32.receiver;
        if (os_log_type_enabled(v17, (os_log_type_t)v32.receiver))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v35 = "-[NWConcrete_nw_protocol_options initWithOptions:]";
          _os_log_impl( &dword_181A5C000,  v17,  v29,  "%{public}s called with null _options, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_12:
  return v2;
}

          goto LABEL_13;
        }

        if (!v23)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v7 = (os_log_s *)(id)gconnectionLogObj;
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v7, type))
          {
            BOOL v21 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
            *(_DWORD *)addrinfo buf = 136446466;
            objc_super v26 = "nw_connection_set_queue_block_invoke";
            os_log_type_t v27 = 1024;
            BOOL v28 = v21;
            _os_log_impl( &dword_181A5C000,  v7,  v20,  "%{public}s [C%u] Error in client: nw_connection_set_queue called after nw_connection_start, backtrace limit exceeded",  buf,  0x12u);
          }

          goto LABEL_12;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v7 = (os_log_s *)(id)gconnectionLogObj;
        id v17 = type;
        os_log_type_t v18 = os_log_type_enabled(v7, type);
        if (!backtrace_string)
        {
          if (v18)
          {
            os_log_type_t v22 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
            *(_DWORD *)addrinfo buf = 136446466;
            objc_super v26 = "nw_connection_set_queue_block_invoke";
            os_log_type_t v27 = 1024;
            BOOL v28 = v22;
            _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s [C%u] Error in client: nw_connection_set_queue called after nw_connection_start, no backtrace",  buf,  0x12u);
          }

          goto LABEL_12;
        }

        if (v18)
        {
          char v19 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
          *(_DWORD *)addrinfo buf = 136446722;
          objc_super v26 = "nw_connection_set_queue_block_invoke";
          os_log_type_t v27 = 1024;
          BOOL v28 = v19;
          os_log_type_t v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s [C%u] Error in client: nw_connection_set_queue called after nw_connection_start, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(backtrace_string);
        if (v6) {
LABEL_14:
        }
          free(v6);
      }
    }
  }

    nw_parameters_set_tfo(v6, 1);
    if ((v3[8] & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  __nwlog_obj();
  BOOL v28 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
  BOOL v25 = (char *)_os_log_send_and_compose_impl();

  char v43 = OS_LOG_TYPE_ERROR;
  os_log_type_t v42 = 0;
  if (v43 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    objc_super v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v29 = v43;
    if (os_log_type_enabled(v26, v43))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
      _os_log_impl(&dword_181A5C000, v26, v29, "%{public}s called with null parameters_to_modify", buf, 0xCu);
    }

    goto LABEL_68;
  }

  if (!v42)
  {
    __nwlog_obj();
    objc_super v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v37 = v43;
    if (os_log_type_enabled(v26, v43))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
      _os_log_impl( &dword_181A5C000,  v26,  v37,  "%{public}s called with null parameters_to_modify, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_68;
  }

  os_log_type_t v33 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  objc_super v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v34 = v43;
  BOOL v35 = os_log_type_enabled(v26, v43);
  if (!v33)
  {
    if (v35)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
      _os_log_impl( &dword_181A5C000,  v26,  v34,  "%{public}s called with null parameters_to_modify, no backtrace",  buf,  0xCu);
    }

    goto LABEL_68;
  }

  if (v35)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
    v46 = 2082;
    __int16 v47 = v33;
    _os_log_impl( &dword_181A5C000,  v26,  v34,  "%{public}s called with null parameters_to_modify, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v33);
  if (v25) {
    goto LABEL_70;
  }
LABEL_30:
}

  if (!*(void *)(v2 + 96)) {
    goto LABEL_124;
  }
  if ((*(_BYTE *)(v2 + 346) & 1) != 0)
  {
    __int16 v23 = (void **)(id)v2;
    nw_context_assert_queue(v23[4]);
    os_log_type_t v24 = (void (**)(void *, void *, BOOL, _BYTE *))nw_endpoint_copy_custom_resolver_block(v23[3]);
    if (v24)
    {
      BOOL v25 = v23[3];
      objc_super v26 = nw_context_copy_workloop(v23[4]);
      *(void *)addrinfo buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = ___ZL40nw_resolver_start_custom_resolver_lockedP22NWConcrete_nw_resolver_block_invoke;
      os_log_type_t v95 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BB6938;
      os_log_type_t v27 = v23;
      v96 = (void (*)(uint64_t))v27;
      v24[2](v24, v25, v26, buf);

      goto LABEL_124;
    }

    __nwlog_obj();
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v99 = 136446210;
    *(void *)&v99[4] = "nw_resolver_start_custom_resolver_locked";
    uint64_t v70 = (char *)_os_log_send_and_compose_impl();

    v98[0] = 16;
    v90[0] = 0;
    if (__nwlog_fault(v70, v98, v90))
    {
      if (v98[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v72 = v98[0];
        if (os_log_type_enabled(v71, (os_log_type_t)v98[0]))
        {
          *(_DWORD *)os_log_type_t v99 = 136446210;
          *(void *)&v99[4] = "nw_resolver_start_custom_resolver_locked";
          _os_log_impl(&dword_181A5C000, v71, v72, "%{public}s called with null resolver_block", v99, 0xCu);
        }
      }

      else if (v90[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v74 = v98[0];
        BOOL v75 = os_log_type_enabled(v71, (os_log_type_t)v98[0]);
        if (backtrace_string)
        {
          if (v75)
          {
            *(_DWORD *)os_log_type_t v99 = 136446466;
            *(void *)&v99[4] = "nw_resolver_start_custom_resolver_locked";
            *(_WORD *)&v99[12] = 2082;
            *(void *)&v99[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v71,  v74,  "%{public}s called with null resolver_block, dumping backtrace:%{public}s",  v99,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_141;
        }

        if (v75)
        {
          *(_DWORD *)os_log_type_t v99 = 136446210;
          *(void *)&v99[4] = "nw_resolver_start_custom_resolver_locked";
          _os_log_impl( &dword_181A5C000,  v71,  v74,  "%{public}s called with null resolver_block, no backtrace",  v99,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v76 = v98[0];
        if (os_log_type_enabled(v71, (os_log_type_t)v98[0]))
        {
          *(_DWORD *)os_log_type_t v99 = 136446210;
          *(void *)&v99[4] = "nw_resolver_start_custom_resolver_locked";
          _os_log_impl( &dword_181A5C000,  v71,  v76,  "%{public}s called with null resolver_block, backtrace limit exceeded",  v99,  0xCu);
        }
      }
    }

          id v15 = 0;
          goto LABEL_13;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v22 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v132 = "sa_dst_compare_internal_wrapper";
          __int16 v23 = "%{public}s sa_dst_lookup for dst2 failed";
          goto LABEL_29;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v22 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v132 = "sa_dst_compare_internal_wrapper";
          __int16 v23 = "%{public}s sa_dst_lookup for dst1 failed";
LABEL_29:
          _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_DEBUG, v23, buf, 0xCu);
        }
      }

      BOOL v21 = 0LL;
      goto LABEL_387;
    }

    __nwlog_obj();
    *(_DWORD *)v128 = 136446210;
    *(void *)&v128[4] = "sa_dst_compare_internal";
    os_log_type_t v99 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    buf[0] = 0;
    if (type[0] == 17)
    {
      BOOL v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = type[0];
      if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
      {
        *(_DWORD *)v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        BOOL v102 = "%{public}s called with null dst2";
        goto LABEL_423;
      }

      goto LABEL_424;
    }

    if (!buf[0])
    {
      BOOL v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = type[0];
      if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
      {
        *(_DWORD *)v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        BOOL v102 = "%{public}s called with null dst2, backtrace limit exceeded";
        goto LABEL_423;
      }

      goto LABEL_424;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v100 = (os_log_s *)__nwlog_obj();
    os_log_type_t v101 = type[0];
    v112 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v112)
      {
        *(_DWORD *)v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        BOOL v102 = "%{public}s called with null dst2, no backtrace";
        goto LABEL_423;
      }

      goto LABEL_424;
    }

    if (v112)
    {
      *(_DWORD *)v128 = 136446466;
      *(void *)&v128[4] = "sa_dst_compare_internal";
      *(_WORD *)&v128[12] = 2082;
      *(void *)&v128[14] = backtrace_string;
      v111 = "%{public}s called with null dst2, dumping backtrace:%{public}s";
      goto LABEL_403;
    }

    goto LABEL_404;
  }

  __nwlog_obj();
  *(_DWORD *)v128 = 136446210;
  *(void *)&v128[4] = "sa_dst_compare_internal";
  os_log_type_t v99 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  buf[0] = 0;
  if (type[0] != 17)
  {
    if (!buf[0])
    {
      BOOL v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = type[0];
      if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
      {
        *(_DWORD *)v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        BOOL v102 = "%{public}s called with null dst1, backtrace limit exceeded";
        goto LABEL_423;
      }

      goto LABEL_424;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v100 = (os_log_s *)__nwlog_obj();
    os_log_type_t v101 = type[0];
    v110 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v110)
      {
        *(_DWORD *)v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        BOOL v102 = "%{public}s called with null dst1, no backtrace";
        goto LABEL_423;
      }

      goto LABEL_424;
    }

    if (v110)
    {
      *(_DWORD *)v128 = 136446466;
      *(void *)&v128[4] = "sa_dst_compare_internal";
      *(_WORD *)&v128[12] = 2082;
      *(void *)&v128[14] = backtrace_string;
      v111 = "%{public}s called with null dst1, dumping backtrace:%{public}s";
LABEL_403:
      _os_log_impl(&dword_181A5C000, v100, v101, v111, v128, 0x16u);
    }

  os_log_type_t v8 = 0LL;
LABEL_13:

  return v8;
}

  os_log_type_t v8 = 0LL;
LABEL_13:

  return v8;
}

      *(void *)os_log_type_t type = 0LL;
      BOOL v25 = type;
      tqh_first = a2->tqh_first;
      if (a2->tqh_first)
      {
        *((void *)tqh_first + 5) = type;
        tqh_last = a2->tqh_last;
        *(void *)os_log_type_t type = tqh_first;
        BOOL v25 = (os_log_type_t *)tqh_last;
        a2->tqh_first = 0LL;
        a2->tqh_last = &a2->tqh_first;
      }

      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 0x40000000LL;
      BOOL v21 = ___ZL33nw_channel_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      os_log_type_t v22 = &unk_189BC9120;
      __int16 v23 = buf;
      do
      {
        os_log_type_t v8 = *(void *)type;
        if (!*(void *)type) {
          break;
        }
        BOOL v10 = *(void *)(*(void *)type + 32LL);
        BOOL v7 = *(void **)(*(void *)type + 40LL);
        os_log_type_t v9 = (void *)(*(void *)type + 32LL);
        if (v10)
        {
          *(void *)(v10 + 40) = v7;
          BOOL v7 = *(void **)(v8 + 40);
        }

        else
        {
          BOOL v25 = *(os_log_type_t **)(*(void *)type + 40LL);
        }

        void *v7 = v10;
        *os_log_type_t v9 = 0LL;
        *(void *)(v8 + 40) = 0LL;
      }

      while ((((uint64_t (*)(void *))v21)(v20) & 1) != 0);
      if (_nw_signposts_once == -1)
      {
        if (_nw_signposts_enabled) {
          goto LABEL_22;
        }
      }

      else
      {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
        if (_nw_signposts_enabled)
        {
LABEL_22:
        }
      }

      _Block_object_dispose(buf, 8);
      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    objc_super v26 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v13 = (os_log_s *)__nwlog_obj();
      id v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
        id v15 = "%{public}s called with null channel";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    if (!v26)
    {
      __int16 v13 = (os_log_s *)__nwlog_obj();
      id v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
        id v15 = "%{public}s called with null channel, backtrace limit exceeded";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v13 = (os_log_s *)__nwlog_obj();
    id v14 = type[0];
    char v19 = os_log_type_enabled(v13, type[0]);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
        id v15 = "%{public}s called with null channel, no backtrace";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    if (v19)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      os_log_type_t v18 = "%{public}s called with null channel, dumping backtrace:%{public}s";
      goto LABEL_45;
    }

    goto LABEL_46;
  }

  __nwlog_obj();
  *(_DWORD *)addrinfo buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  objc_super v26 = 0;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v26)
    {
      __int16 v13 = (os_log_s *)__nwlog_obj();
      id v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
        id v15 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v13 = (os_log_s *)__nwlog_obj();
    id v14 = type[0];
    id v17 = os_log_type_enabled(v13, type[0]);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
        id v15 = "%{public}s called with null channel_protocol, no backtrace";
        goto LABEL_55;
      }

      goto LABEL_56;
    }

    if (v17)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      os_log_type_t v18 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
LABEL_45:
      _os_log_impl(&dword_181A5C000, v13, v14, v18, buf, 0x16u);
    }

  BOOL v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  BOOL result = sub_181BC928C( a1,  *(void *)(v21 + 48) + *(void *)(v27 + 72) * a2,  type metadata accessor for NWBrowser.Result.Change);
  __int16 v23 = *(void *)(v21 + 16);
  os_log_type_t v24 = __OFADD__(v23, 1LL);
  BOOL v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }

  __break(1u);
LABEL_15:
  BOOL result = sub_18264F5B8();
  __break(1u);
  return result;
}

  __int16 v13 = sub_18264F4EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
  sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
  sub_18264EB14();
  BOOL v7 = 0LL;
  os_log_type_t v9 = 0xE000000000000000LL;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    BOOL v16 = v7;
    os_log_type_t v12 = 1LL;
    swift_beginAccess();
    __int16 v13 = *(void *)(a1 + 80);
    if (v13) {
      os_log_type_t v12 = *(unsigned __int8 *)(a1 + 104);
    }
    id v14 = *(void *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = xmmword_182663830;
    *(_OWORD *)(a1 + 88) = xmmword_182663830;
    *(void *)(a1 + 104) = v12;
    *(void *)(a1 + 112) = v16;
    *(void *)(a1 + 120) = v9;
    swift_bridgeObjectRetain();
    sub_181BCECE0(v14, v13);
    swift_bridgeObjectRelease();
    return swift_release();
  }

  BOOL result = sub_18264F324();
  __break(1u);
  return result;
}

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
  sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
  sub_18264EB14();
  BOOL v7 = 0LL;
  os_log_type_t v9 = 0xE000000000000000LL;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    BOOL v16 = v7;
    os_log_type_t v12 = 1LL;
    swift_beginAccess();
    __int16 v13 = *(void *)(a1 + 136);
    if (v13) {
      os_log_type_t v12 = *(unsigned __int8 *)(a1 + 160);
    }
    id v14 = *(void *)(a1 + 128);
    *(_OWORD *)(a1 + 128) = xmmword_182663840;
    *(_OWORD *)(a1 + 144) = xmmword_182663840;
    *(void *)(a1 + 160) = v12;
    *(void *)(a1 + 168) = v16;
    *(void *)(a1 + 176) = v9;
    swift_bridgeObjectRetain();
    sub_181BCECE0(v14, v13);
    swift_bridgeObjectRelease();
    return swift_release();
  }

  BOOL result = sub_18264F324();
  __break(1u);
  return result;
}

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
  sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
  sub_18264EB14();
  BOOL v7 = 0LL;
  os_log_type_t v9 = 0xE000000000000000LL;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    swift_beginAccess();
    os_log_type_t v12 = *(void *)(a1 + 136);
    if (v12) {
      os_log_type_t v12 = *(unsigned __int8 *)(a1 + 160);
    }
    __int16 v13 = *(void *)(a1 + 184);
    id v14 = *(void *)(a1 + 192);
    *(_OWORD *)(a1 + 184) = xmmword_182663850;
    *(_OWORD *)(a1 + 200) = xmmword_182663850;
    *(void *)(a1 + 216) = v12;
    *(void *)(a1 + 224) = v7;
    *(void *)(a1 + 232) = v9;
    swift_bridgeObjectRetain();
    sub_181BCECE0(v13, v14);
    swift_bridgeObjectRelease();
    return swift_release();
  }

  BOOL result = sub_18264F324();
  __break(1u);
  return result;
}

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
  sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
  sub_18264EB14();
  BOOL v7 = 0LL;
  os_log_type_t v9 = 0xE000000000000000LL;
LABEL_13:
  if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v7, v9))
  {
    BOOL v16 = v7;
    os_log_type_t v12 = 1LL;
    swift_beginAccess();
    __int16 v13 = *(void *)(a1 + 248);
    if (v13) {
      os_log_type_t v12 = *(unsigned __int8 *)(a1 + 272);
    }
    id v14 = *(void *)(a1 + 240);
    *(_OWORD *)(a1 + 240) = xmmword_182663860;
    *(_OWORD *)(a1 + 256) = xmmword_182663860;
    *(void *)(a1 + 272) = v12;
    *(void *)(a1 + 280) = v16;
    *(void *)(a1 + 288) = v9;
    swift_bridgeObjectRetain();
    sub_181BCECE0(v14, v13);
    swift_bridgeObjectRelease();
    return swift_release();
  }

  BOOL result = sub_18264F324();
  __break(1u);
  return result;
}

  id v14 = v2;
  id v15 = v4;
  BOOL v16 = sub_181C94200;
  id v17 = 0LL;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
  sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
  BOOL result = sub_18264EB14();
  uint64_t v2 = 0LL;
  os_log_type_t v8 = 0xE000000000000000LL;
LABEL_13:
  if (v3 > 0x3E7u)
  {
    __break(1u);
  }

  else
  {
    if ((sub_181C6F894((unint64_t)v2, v8) & 1) == 0)
    {
      id v14 = v2;
      id v15 = v8;
      BOOL v16 = sub_181C6FED0;
      id v17 = 0LL;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1D0);
      sub_181C02894((unint64_t *)&qword_18C58D1D8, &qword_18C58D1D0, MEMORY[0x189619618]);
      sub_18264EB14();
      swift_bridgeObjectRelease();
      uint64_t v2 = 0LL;
      os_log_type_t v8 = 0xE000000000000000LL;
    }

    os_log_type_t v9 = HTTPFields.init(dictionaryLiteral:)(MEMORY[0x18961AFE8], &v14);
    BOOL v10 = v14;
    MEMORY[0x1895F8858](v9);
    swift_bridgeObjectRetain();
    os_log_type_t v11 = sub_18264EB38();
    __int16 v13 = v12;
    swift_bridgeObjectRelease();
    type metadata accessor for __NWHTTPResponse();
    BOOL result = swift_allocObject();
    *(void *)(result + 16) = 0x7375746174733ALL;
    *(void *)(result + 24) = 0xE700000000000000LL;
    *(void *)(result + 32) = 0x7375746174733ALL;
    *(void *)(result + 40) = 0xE700000000000000LL;
    *(_BYTE *)(result + 48) = 0;
    *(void *)(result + 56) = v11;
    *(void *)(result + 64) = v13;
    *(void *)(result + 72) = v2;
    *(void *)(result + 80) = v8;
    *(void *)(result + 88) = v10;
  }

  return result;
}

  *(void *)&os_log_type_t v18 = a2;
  *((void *)&v18 + 1) = v4;
  char v19 = sub_181C94200;
  os_log_type_t v20 = 0LL;
  v25[3] = 0LL;
  v25[4] = 0xE000000000000000LL;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
  sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
  sub_18264EB14();
  BOOL v7 = 0LL;
  os_log_type_t v9 = 0xE000000000000000LL;
LABEL_13:
  swift_beginAccess();
  BOOL v10 = *(void **)(a1 + 32);
  os_log_type_t v11 = *(void *)(a1 + 40);
  os_log_type_t v12 = *(_BYTE *)(a1 + 48);
  __int16 v13 = *(_OWORD *)(a1 + 56);
  id v14 = *(void *)(a1 + 72);
  os_log_type_t v18 = *(_OWORD *)(a1 + 16);
  char v19 = v10;
  os_log_type_t v20 = v11;
  BOOL v21 = v12;
  os_log_type_t v22 = v13;
  __int16 v23 = v14;
  os_log_type_t v24 = *(_OWORD *)(a1 + 80);
  HTTPResponse.status.getter(v25);
  id v15 = v25[0];
  BOOL result = swift_bridgeObjectRelease();
  if (v15 > 0x3E7)
  {
    __break(1u);
  }

  else
  {
    if ((sub_181C6F894(v7, v9) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      id v17 = v9;
    }

    else
    {
      *(void *)&os_log_type_t v18 = v7;
      *((void *)&v18 + 1) = v9;
      char v19 = sub_181C6FED0;
      os_log_type_t v20 = 0LL;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1D0);
      sub_181C02894((unint64_t *)&qword_18C58D1D8, &qword_18C58D1D0, MEMORY[0x189619618]);
      sub_18264EB14();
      BOOL v7 = 0LL;
      id v17 = 0xE000000000000000LL;
    }

    *(void *)&os_log_type_t v18 = v15;
    *((void *)&v18 + 1) = v7;
    char v19 = (void *)v17;
    HTTPResponse.status.setter((uint64_t)&v18);
    swift_endAccess();
    swift_bridgeObjectRelease();
    return swift_release();
  }

  return result;
}

    __int16 v13 = sub_18264EACC() + 32;
    id v14 = (nw_txt_record *)swift_unknownObjectRetain();
    id v15 = (const uint8_t *)"";
    BOOL v16 = (const char *)v13;
LABEL_13:
    id v17 = nw_txt_record_set_key(v14, v16, v15, 0LL);
    swift_unknownObjectRelease();
    swift_release();
    if (v17) {
      goto LABEL_14;
    }
    return 0LL;
  }

  if (v7) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v8 == 0xE000000000000000LL;
  }
  if (v10 || (sub_18264F4EC() & 1) != 0) {
    goto LABEL_12;
  }
  v20[0] = v7;
  v20[1] = v8;
  swift_bridgeObjectRetain();
  sub_181BDA12C(v7, v8, 0);
  os_log_type_t v11 = sub_181C92ADC(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL result = 0LL;
  if (v11)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    sub_181BDA12C(v7, v8, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20[0] = *v4;
    *id v4 = 0x8000000000000000LL;
    sub_181C8FA40(v7, v8, v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *id v4 = v20[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1LL;
  }

  return result;
}

  if (v5 != 5) {
    return (BOOL)v11;
  }
  if (v11 || (os_log_type_t v11 = calloc(1uLL, 0xB8uLL)) != 0LL)
  {
LABEL_15:
    v11[6] = *(void *)(a1 + 104);
    v11[9] = *(void *)(a1 + 96);
    if (a3) {
      *a3 = 184LL;
    }
    return (BOOL)v11;
  }

  char v31 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  __int16 v36 = "strict_calloc";
  os_log_type_t v37 = 2048;
  uint64_t v38 = 1LL;
  os_log_type_t v39 = 2048;
  os_log_type_t v40 = 184LL;
  objc_super v32 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v32);
  if (!result)
  {
    free(v32);
    os_log_type_t v11 = 0LL;
    goto LABEL_15;
  }

  __break(1u);
  return result;
}

  *(_BYTE *)(a1 + 94) = *(_BYTE *)(a1 + 94) & 0xFE | nw_path_parameters_get_logging_disabled(v4[13]);
  BOOL v10 = nw_parameters_copy_protocol_options_legacy(v4, (nw_protocol *)a2);
  if (v10)
  {
    os_log_type_t v11 = v10;
    os_log_type_t v12 = v11;
    __int16 v13 = 0LL;
    *(_BYTE *)(a1 + 10) = 0;
    id v14 = a1 + 10;
    id v15 = 84LL;
    while (1)
    {
      BOOL v16 = v11[v13 + 48];
      *(_BYTE *)(v14 + v13) = v16;
      if (!v16) {
        break;
      }
      --v15;
      ++v13;
      if (v15 <= 1)
      {
        *(_BYTE *)(v14 + v13) = 0;
        break;
      }
    }

    id v17 = v12;
    os_log_type_t v18 = *((_WORD *)v17 + 68);

    *(_WORD *)(a1 + 8) = v18;
    os_release(v17);
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v19 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v20 = *(void **)(a2 + 16);
      *(_DWORD *)addrinfo buf = 136446466;
      id v49 = "nw_protocol_plugin_name_set_name";
      os_log_type_t v50 = 2080;
      BOOL v51 = v20;
      _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s No options found for %s in parameters, cannot find name",  buf,  0x16u);
    }
  }
}
}

  os_unfair_lock_lock((os_unfair_lock_t)v18 + 3);
  if (!a1 || *((_DNSServiceRef_t **)v18 + 9) != a1)
  {
    if ((v18[346] & 0x20) == 0)
    {
      if (v18[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v24 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          BOOL v25 = *((void *)v18 + 9);
          *(_DWORD *)addrinfo buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
          os_log_type_t v82 = 2082;
          *(void *)os_log_type_t v83 = v18 + 256;
          *(_WORD *)&v83[8] = 2048;
          *(void *)&v83[10] = a1;
          *(_WORD *)&v83[18] = 2048;
          *(void *)&v83[20] = v18;
          *(_WORD *)&v83[28] = 2048;
          *(void *)&v83[30] = v25;
          _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s] Skipped, service %p, resolver %p -> %p",  buf,  0x34u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          objc_super v26 = *((_DWORD *)v18 + 85);
          os_log_type_t v27 = *((void *)v18 + 9);
          *(_DWORD *)addrinfo buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
          os_log_type_t v82 = 1024;
          *(_DWORD *)os_log_type_t v83 = v26;
          *(_WORD *)&v83[4] = 2048;
          *(void *)&v83[6] = a1;
          *(_WORD *)&v83[14] = 2048;
          *(void *)&v83[16] = v18;
          *(_WORD *)&v83[24] = 2048;
          *(void *)&v83[26] = v27;
          _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s [R%u] Skipped, service %p, resolver %p -> %p",  buf,  0x30u);
        }
      }
    }

    goto LABEL_24;
  }

  *((_WORD *)v18 + 44) = *((_WORD *)v18 + 44) & 0xFFEF | (16 * (a2 & 1));
  if (a4)
  {
    if (a4 != -65569 || *((_DWORD *)v18 + 2) == 2)
    {
      *((_DWORD *)v18 + 21) = a4;
      if ((a2 & 1) != 0)
      {
LABEL_24:
        os_unfair_lock_unlock((os_unfair_lock_t)v18 + 3);
LABEL_25:

        return;
      }

    goto LABEL_13;
  }

  *(void *)addrinfo buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  objc_super v32 = 0;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = __nw_connection_group_reinsert_extracted_connection_block_invoke;
  aBlock[3] = &unk_189BBEEE8;
  objc_super v26 = v4;
  os_log_type_t v27 = v3;
  BOOL v28 = buf;
  id v6 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
  v6[2](v6);
  os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

  BOOL v7 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
  _Block_object_dispose(buf, 8);
LABEL_14:

  return v7;
}

          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            BOOL v16 = *(void *)(a2 + 88);
            if (v16)
            {
              id v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                os_log_type_t v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0LL;
                  v18[2](v18);
                  _Block_release(v18);
                }

                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  char v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }

                free((void *)a2);
              }
            }
          }

          goto LABEL_13;
        }
      }

      __nwlog_obj();
      os_log_type_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)addrinfo buf = 136446722;
      v46 = "__nw_protocol_add_input_handler";
      if (!v20) {
        os_log_type_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v20;
      id v49 = 2048;
      os_log_type_t v50 = a1;
      BOOL v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v24 = *(const char **)(a1 + 16);
          if (!v24) {
            os_log_type_t v24 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_add_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v24;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback";
LABEL_73:
          _os_log_impl(&dword_181A5C000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }

        if (!v43)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          BOOL v41 = *(const char **)(a1 + 16);
          if (!v41) {
            BOOL v41 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_add_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded";
          goto LABEL_73;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        __int16 v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          os_log_type_t v42 = *(const char **)(a1 + 16);
          if (!v42) {
            os_log_type_t v42 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_add_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace";
          goto LABEL_73;
        }

        if (v35)
        {
          __int16 v36 = *(const char **)(a1 + 16);
          if (!v36) {
            __int16 v36 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446978;
          v46 = "__nw_protocol_add_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v36;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v51 = 2082;
          os_log_type_t v52 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(backtrace_string);
      }

          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            BOOL v16 = *(void *)(a2 + 88);
            if (v16)
            {
              id v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                os_log_type_t v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0LL;
                  v18[2](v18);
                  _Block_release(v18);
                }

                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  char v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }

                free((void *)a2);
              }
            }
          }

          goto LABEL_13;
        }
      }

      __nwlog_obj();
      os_log_type_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)addrinfo buf = 136446722;
      v46 = "__nw_protocol_remove_input_handler";
      if (!v20) {
        os_log_type_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v20;
      id v49 = 2048;
      os_log_type_t v50 = a1;
      BOOL v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v24 = *(const char **)(a1 + 16);
          if (!v24) {
            os_log_type_t v24 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_remove_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v24;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback";
LABEL_73:
          _os_log_impl(&dword_181A5C000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }

        if (!v43)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          BOOL v41 = *(const char **)(a1 + 16);
          if (!v41) {
            BOOL v41 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_remove_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded";
          goto LABEL_73;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        __int16 v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          os_log_type_t v42 = *(const char **)(a1 + 16);
          if (!v42) {
            os_log_type_t v42 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_remove_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace";
          goto LABEL_73;
        }

        if (v35)
        {
          __int16 v36 = *(const char **)(a1 + 16);
          if (!v36) {
            __int16 v36 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446978;
          v46 = "__nw_protocol_remove_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v36;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v51 = 2082;
          os_log_type_t v52 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(backtrace_string);
      }

          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            BOOL v16 = *(void *)(a2 + 88);
            if (v16)
            {
              id v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                os_log_type_t v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0LL;
                  v18[2](v18);
                  _Block_release(v18);
                }

                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  char v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }

                free((void *)a2);
              }
            }
          }

          goto LABEL_13;
        }
      }

      __nwlog_obj();
      os_log_type_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)addrinfo buf = 136446722;
      v46 = "__nw_protocol_connect";
      if (!v20) {
        os_log_type_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v20;
      id v49 = 2048;
      os_log_type_t v50 = a1;
      BOOL v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v24 = *(const char **)(a1 + 16);
          if (!v24) {
            os_log_type_t v24 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_connect";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v24;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid connect callback";
LABEL_73:
          _os_log_impl(&dword_181A5C000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }

        if (!v43)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          BOOL v41 = *(const char **)(a1 + 16);
          if (!v41) {
            BOOL v41 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_connect";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded";
          goto LABEL_73;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        __int16 v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          os_log_type_t v42 = *(const char **)(a1 + 16);
          if (!v42) {
            os_log_type_t v42 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_connect";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace";
          goto LABEL_73;
        }

        if (v35)
        {
          __int16 v36 = *(const char **)(a1 + 16);
          if (!v36) {
            __int16 v36 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446978;
          v46 = "__nw_protocol_connect";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v36;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v51 = 2082;
          os_log_type_t v52 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(backtrace_string);
      }

          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            BOOL v16 = *(void *)(a2 + 88);
            if (v16)
            {
              id v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                os_log_type_t v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0LL;
                  v18[2](v18);
                  _Block_release(v18);
                }

                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  char v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }

                free((void *)a2);
              }
            }
          }

          goto LABEL_13;
        }
      }

      __nwlog_obj();
      os_log_type_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)addrinfo buf = 136446722;
      v46 = "__nw_protocol_reset";
      if (!v20) {
        os_log_type_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v20;
      id v49 = 2048;
      os_log_type_t v50 = a1;
      BOOL v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v24 = *(const char **)(a1 + 16);
          if (!v24) {
            os_log_type_t v24 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_reset";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v24;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid reset callback";
LABEL_73:
          _os_log_impl(&dword_181A5C000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }

        if (!v43)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          BOOL v41 = *(const char **)(a1 + 16);
          if (!v41) {
            BOOL v41 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_reset";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid reset callback, backtrace limit exceeded";
          goto LABEL_73;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        __int16 v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          os_log_type_t v42 = *(const char **)(a1 + 16);
          if (!v42) {
            os_log_type_t v42 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_reset";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid reset callback, no backtrace";
          goto LABEL_73;
        }

        if (v35)
        {
          __int16 v36 = *(const char **)(a1 + 16);
          if (!v36) {
            __int16 v36 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446978;
          v46 = "__nw_protocol_reset";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v36;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v51 = 2082;
          os_log_type_t v52 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s protocol %{public}s (%p) has invalid reset callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(backtrace_string);
      }

          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            BOOL v16 = *(void *)(a2 + 88);
            if (v16)
            {
              id v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                os_log_type_t v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0LL;
                  v18[2](v18);
                  _Block_release(v18);
                }

                if ((*(_BYTE *)(a2 + 72) & 1) != 0)
                {
                  char v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }

                free((void *)a2);
              }
            }
          }

          goto LABEL_13;
        }
      }

      __nwlog_obj();
      os_log_type_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)addrinfo buf = 136446722;
      v46 = "__nw_protocol_waiting_for_output";
      if (!v20) {
        os_log_type_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v20;
      id v49 = 2048;
      os_log_type_t v50 = a1;
      BOOL v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v24 = *(const char **)(a1 + 16);
          if (!v24) {
            os_log_type_t v24 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_waiting_for_output";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v24;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback";
LABEL_73:
          _os_log_impl(&dword_181A5C000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }

        if (!v43)
        {
          os_log_type_t v22 = (os_log_s *)__nwlog_obj();
          __int16 v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          BOOL v41 = *(const char **)(a1 + 16);
          if (!v41) {
            BOOL v41 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_waiting_for_output";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, backtrace limit exceeded";
          goto LABEL_73;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        __int16 v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          os_log_type_t v42 = *(const char **)(a1 + 16);
          if (!v42) {
            os_log_type_t v42 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v46 = "__nw_protocol_waiting_for_output";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v25 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, no backtrace";
          goto LABEL_73;
        }

        if (v35)
        {
          __int16 v36 = *(const char **)(a1 + 16);
          if (!v36) {
            __int16 v36 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446978;
          v46 = "__nw_protocol_waiting_for_output";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v36;
          id v49 = 2048;
          os_log_type_t v50 = a1;
          BOOL v51 = 2082;
          os_log_type_t v52 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(backtrace_string);
      }
}

          os_log_type_t v12 = 0LL;
LABEL_24:

          return v12;
        }

        __nwlog_obj();
        objc_super v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v45 = "nw_protocol_implementation_add_listen_handler";
        BOOL v21 = (void *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v42 = 0;
        if (!__nwlog_fault((const char *)v21, &type, &v42))
        {
LABEL_93:
          if (v21) {
            free(v21);
          }
          goto LABEL_12;
        }

        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v45 = "nw_protocol_implementation_add_listen_handler";
            _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
          }

LABEL_13:
  *(_BYTE *)(*(void *)(a1 + 32) + 160LL) |= 1u;
  BOOL v10 = *(unsigned __int8 **)(a1 + 32);
  if ((~v10[160] & 3) == 0) {
    nw_socks5_connection_cancel_on_queue(v10, v3);
  }
LABEL_15:
}
}

LABEL_13:
  *(_BYTE *)(*(void *)(a1 + 32) + 160LL) |= 2u;
  BOOL v10 = *(unsigned __int8 **)(a1 + 32);
  if ((~v10[160] & 3) == 0) {
    nw_socks5_connection_cancel_on_queue(v10, 0LL);
  }
LABEL_15:
}

  id v15 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(*(void *)(a1 + 32) + 208LL) += *(void *)(a1 + 48);
  BOOL v16 = *(void *)(a1 + 32);
  if (!v15)
  {
LABEL_25:
    nw_socks5_connection_outer_connection_read_on_queue((NWConcrete_nw_socks5_connection *)v16);
    goto LABEL_26;
  }

  *(_BYTE *)(v16 + 160) |= 2u;
  id v17 = *(unsigned __int8 **)(a1 + 32);
  if ((~v17[160] & 3) == 0) {
    nw_socks5_connection_cancel_on_queue(v17, 0LL);
  }
LABEL_26:
}

LABEL_13:
    if (!v13) {
      goto LABEL_15;
    }
LABEL_14:
    free(v13);
    goto LABEL_15;
  }

  if (!v54)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v14 = (os_log_s *)(id)gconnectionLogObj;
    os_log_type_t v33 = type;
    if (os_log_type_enabled(v14, type))
    {
      os_log_type_t v34 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      BOOL v35 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      __int16 v36 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      BOOL v51 = v13;
      os_log_type_t v37 = nw_endpoint_get_logging_description(v36);
      uint64_t v38 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      os_log_type_t v39 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      os_log_type_t v40 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)addrinfo buf = 136448002;
      os_log_type_t v57 = "nw_flow_passthrough_notify_block_invoke";
      id v58 = 2082;
      v59 = v34;
      char v60 = 2082;
      os_log_type_t v61 = v35;
      objc_super v62 = 2082;
      v63 = v37;
      os_log_type_t v64 = 2082;
      BOOL v65 = v38;
      v66 = 2082;
      os_log_type_t v67 = v39;
      id v68 = 2114;
      v69 = v40;
      uint64_t v70 = 2048;
      os_log_type_t v71 = 0LL;
      _os_log_impl( &dword_181A5C000,  v14,  v33,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, backtrace limit exceeded",  buf,  0x52u);

      __int16 v13 = v51;
    }

    goto LABEL_12;
  }

  backtrace_string = __nw_create_backtrace_string();
  if (!backtrace_string)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v14 = (os_log_s *)(id)gconnectionLogObj;
    BOOL v41 = type;
    if (os_log_type_enabled(v14, type))
    {
      os_log_type_t v42 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      char v43 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v44 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      os_log_type_t v52 = v13;
      os_log_type_t v45 = nw_endpoint_get_logging_description(v44);
      v46 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      __int16 v47 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      BOOL v48 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)addrinfo buf = 136448002;
      os_log_type_t v57 = "nw_flow_passthrough_notify_block_invoke";
      id v58 = 2082;
      v59 = v42;
      char v60 = 2082;
      os_log_type_t v61 = v43;
      objc_super v62 = 2082;
      v63 = v45;
      os_log_type_t v64 = 2082;
      BOOL v65 = v46;
      v66 = 2082;
      os_log_type_t v67 = v47;
      id v68 = 2114;
      v69 = v48;
      uint64_t v70 = 2048;
      os_log_type_t v71 = 0LL;
      _os_log_impl( &dword_181A5C000,  v14,  v41,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, no backtrace",  buf,  0x52u);

      __int16 v13 = v52;
    }

    goto LABEL_12;
  }

  os_log_type_t v24 = (char *)backtrace_string;
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  BOOL v25 = (os_log_s *)(id)gconnectionLogObj;
  objc_super v26 = type;
  if (os_log_type_enabled(v25, type))
  {
    os_log_type_t v27 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
    id v53 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
    BOOL v28 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
    os_log_type_t v50 = v13;
    os_log_type_t v29 = nw_endpoint_get_logging_description(v28);
    os_log_type_t v30 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
    char v31 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
    objc_super v32 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
    *(_DWORD *)addrinfo buf = 136448258;
    os_log_type_t v57 = "nw_flow_passthrough_notify_block_invoke";
    id v58 = 2082;
    v59 = v27;
    char v60 = 2082;
    os_log_type_t v61 = v53;
    objc_super v62 = 2082;
    v63 = v29;
    os_log_type_t v64 = 2082;
    BOOL v65 = v30;
    v66 = 2082;
    os_log_type_t v67 = v31;
    id v68 = 2114;
    v69 = v32;
    uint64_t v70 = 2048;
    os_log_type_t v71 = 0LL;
    v72 = 2082;
    v73 = v24;
    _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does no t have shared protocol, dumping backtrace:%{public}s",  buf,  0x5Cu);

    __int16 v13 = v50;
  }

  free(v24);
  if (v13) {
    goto LABEL_14;
  }
LABEL_15:
}

LABEL_13:
    if (!v13) {
      goto LABEL_15;
    }
LABEL_14:
    free(v13);
    goto LABEL_15;
  }

  if (!v54)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v14 = (os_log_s *)(id)gconnectionLogObj;
    os_log_type_t v33 = type;
    if (os_log_type_enabled(v14, type))
    {
      os_log_type_t v34 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      BOOL v35 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      __int16 v36 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      BOOL v51 = v13;
      os_log_type_t v37 = nw_endpoint_get_logging_description(v36);
      uint64_t v38 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      os_log_type_t v39 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      os_log_type_t v40 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)addrinfo buf = 136448002;
      os_log_type_t v57 = "nw_flow_notify_block_invoke";
      id v58 = 2082;
      v59 = v34;
      char v60 = 2082;
      os_log_type_t v61 = v35;
      objc_super v62 = 2082;
      v63 = v37;
      os_log_type_t v64 = 2082;
      BOOL v65 = v38;
      v66 = 2082;
      os_log_type_t v67 = v39;
      id v68 = 2114;
      v69 = v40;
      uint64_t v70 = 2048;
      os_log_type_t v71 = 0LL;
      _os_log_impl( &dword_181A5C000,  v14,  v33,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, backtrace limit exceeded",  buf,  0x52u);

      __int16 v13 = v51;
    }

    goto LABEL_12;
  }

  backtrace_string = __nw_create_backtrace_string();
  if (!backtrace_string)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v14 = (os_log_s *)(id)gconnectionLogObj;
    BOOL v41 = type;
    if (os_log_type_enabled(v14, type))
    {
      os_log_type_t v42 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      char v43 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v44 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      os_log_type_t v52 = v13;
      os_log_type_t v45 = nw_endpoint_get_logging_description(v44);
      v46 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      __int16 v47 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      BOOL v48 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)addrinfo buf = 136448002;
      os_log_type_t v57 = "nw_flow_notify_block_invoke";
      id v58 = 2082;
      v59 = v42;
      char v60 = 2082;
      os_log_type_t v61 = v43;
      objc_super v62 = 2082;
      v63 = v45;
      os_log_type_t v64 = 2082;
      BOOL v65 = v46;
      v66 = 2082;
      os_log_type_t v67 = v47;
      id v68 = 2114;
      v69 = v48;
      uint64_t v70 = 2048;
      os_log_type_t v71 = 0LL;
      _os_log_impl( &dword_181A5C000,  v14,  v41,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, no backtrace",  buf,  0x52u);

      __int16 v13 = v52;
    }

    goto LABEL_12;
  }

  os_log_type_t v24 = (char *)backtrace_string;
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  BOOL v25 = (os_log_s *)(id)gconnectionLogObj;
  objc_super v26 = type;
  if (os_log_type_enabled(v25, type))
  {
    os_log_type_t v27 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
    id v53 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
    BOOL v28 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
    os_log_type_t v50 = v13;
    os_log_type_t v29 = nw_endpoint_get_logging_description(v28);
    os_log_type_t v30 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
    char v31 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
    objc_super v32 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
    *(_DWORD *)addrinfo buf = 136448258;
    os_log_type_t v57 = "nw_flow_notify_block_invoke";
    id v58 = 2082;
    v59 = v27;
    char v60 = 2082;
    os_log_type_t v61 = v53;
    objc_super v62 = 2082;
    v63 = v29;
    os_log_type_t v64 = 2082;
    BOOL v65 = v30;
    v66 = 2082;
    os_log_type_t v67 = v31;
    id v68 = 2114;
    v69 = v32;
    uint64_t v70 = 2048;
    os_log_type_t v71 = 0LL;
    v72 = 2082;
    v73 = v24;
    _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does no t have shared protocol, dumping backtrace:%{public}s",  buf,  0x5Cu);

    __int16 v13 = v50;
  }

  free(v24);
  if (v13) {
    goto LABEL_14;
  }
LABEL_15:
}

          goto LABEL_13;
        }

        if (!v23)
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          BOOL v7 = (os_log_s *)(id)glistenerLogObj;
          BOOL v16 = type;
          if (os_log_type_enabled(v7, type))
          {
            id v17 = nw_listener_get_id_string(self->listener);
            *(_DWORD *)addrinfo buf = 136446466;
            objc_super v26 = "-[_NWAdvertiser dealloc]";
            os_log_type_t v27 = 2082;
            BOOL v28 = v17;
            _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s [%{public}s] dnsref is not NULL, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_12;
        }

        backtrace_string = __nw_create_backtrace_string();
        if (!backtrace_string)
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          BOOL v7 = (os_log_s *)(id)glistenerLogObj;
          os_log_type_t v18 = type;
          if (os_log_type_enabled(v7, type))
          {
            char v19 = nw_listener_get_id_string(self->listener);
            *(_DWORD *)addrinfo buf = 136446466;
            objc_super v26 = "-[_NWAdvertiser dealloc]";
            os_log_type_t v27 = 2082;
            BOOL v28 = v19;
            _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s [%{public}s] dnsref is not NULL, no backtrace",  buf,  0x16u);
          }

          goto LABEL_12;
        }

        os_log_type_t v12 = (char *)backtrace_string;
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        __int16 v13 = (os_log_s *)(id)glistenerLogObj;
        id v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          id v15 = nw_listener_get_id_string(self->listener);
          *(_DWORD *)addrinfo buf = 136446722;
          objc_super v26 = "-[_NWAdvertiser dealloc]";
          os_log_type_t v27 = 2082;
          BOOL v28 = v15;
          os_log_type_t v29 = 2082;
          os_log_type_t v30 = v12;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s [%{public}s] dnsref is not NULL, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v12);
        if (v6) {
LABEL_14:
        }
          free(v6);
      }
    }
  }

    free(v4);
    goto LABEL_13;
  }

    free(v4);
    goto LABEL_13;
  }
}

      free(backtrace_string);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }

    __nwlog_obj();
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v27 = "nw_connection_tls_apply";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v24 = 0;
    if (__nwlog_fault(v7, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_181A5C000, v8, v17, "%{public}s called with null apply_block", buf, 0xCu);
        }

        goto LABEL_19;
      }

      if (!v24)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v23 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v27 = "nw_connection_tls_apply";
          _os_log_impl( &dword_181A5C000,  v8,  v23,  "%{public}s called with null apply_block, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_19;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_181A5C000, v8, v20, "%{public}s called with null apply_block, no backtrace", buf, 0xCu);
        }

        goto LABEL_19;
      }

      if (v21)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v27 = "nw_connection_tls_apply";
        BOOL v28 = 2082;
        os_log_type_t v29 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v20,  "%{public}s called with null apply_block, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_12;
    }
  }

  else
  {
    __nwlog_obj();
    id v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v27 = "nw_connection_tls_apply";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v24 = 0;
    if (__nwlog_fault(v7, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_181A5C000, v8, v15, "%{public}s called with null connection", buf, 0xCu);
        }

        goto LABEL_19;
      }

      if (!v24)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v27 = "nw_connection_tls_apply";
          _os_log_impl( &dword_181A5C000,  v8,  v22,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_19;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      char v19 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_181A5C000, v8, v18, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_19;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v27 = "nw_connection_tls_apply";
        BOOL v28 = 2082;
        os_log_type_t v29 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_12;
    }
  }

    BOOL v16 = nw_establishment_report_get_duration_milliseconds(v5) - *(void *)(a1 + 72);
    *(void *)(a1 + 80) = v16;
    if (*(void *)(a1 + 88) > v16)
    {
      if (__nwlog_url_log::onceToken != -1) {
        dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
      }
      id v17 = (os_log_s *)(id)gurlLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v18 = *(void *)(a1 + 80);
        char v19 = *(void *)(a1 + 88);
        *(_DWORD *)addrinfo buf = 134218240;
        objc_super v32 = v19;
        os_log_type_t v33 = 2048;
        os_log_type_t v34 = v18;
        _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_INFO,  "TLS (%llu ms) took longer than connect (%llu ms)",  buf,  0x16u);
      }

      *(void *)(a1 + 88) = *(void *)(a1 + 80);
    }

    *(_BYTE *)(a1 + 97) = 1;
    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(&v24, 8);

    goto LABEL_19;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v16 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    id v17 = *((void *)v2 + 2);
    *(_DWORD *)addrinfo buf = 136446466;
    *(void *)&uint8_t buf[4] = "tcp_connection_start";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v17;
    _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_DEBUG, "%{public}s starting tc_nwconn=%p", buf, 0x16u);
  }

  os_log_type_t v18 = (nw_connection *)*((void *)v2 + 2);
  if (v18) {
    nw_connection_start(v18);
  }

LABEL_35:
}

  __int16 v13 = v5 + v7 + 5;
LABEL_30:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v13;
}

  __int16 v13 = v5 + v7 + 5;
LABEL_30:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v13;
}

  __int16 v13 = v5 + v7 + 5;
LABEL_30:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v13;
}

    *(void *)addrinfo buf = v4;
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
    v137 = (uint64_t)&__block_descriptor_tmp_55_39717;
    *(void *)v138 = v2 + 632;
    v138[8] = 0;
    os_log_type_t v8 = *(void *)(v2 + 632);
    do
    {
      if (!v8) {
        break;
      }
      os_log_type_t v9 = *(void *)(v8 + 32);
      BOOL v10 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      os_log_type_t v8 = v9;
    }

    while ((v10 & 1) != 0);
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v90 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v91 = *(void *)(v2 + 488);
          v92 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
          os_log_type_t v93 = *(_DWORD *)(v2 + 860);
          if (v91) {
            LODWORD(v91) = *(_DWORD *)(v91 + 424);
          }
          *(_DWORD *)addrinfo buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          v137 = (uint64_t)" ";
          *(_WORD *)v138 = 1024;
          *(_DWORD *)&v138[2] = v92;
          *(_WORD *)&v138[6] = 1024;
          *(_DWORD *)&v138[8] = v93;
          *(_WORD *)&v138[12] = 1024;
          *(_DWORD *)&v138[14] = v91;
          _os_log_impl( &dword_181A5C000,  v90,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removing pending_output_frames",  buf,  0x32u);
        }
      }
    }

    *(void *)&os_log_type_t type = v4;
    *((void *)&type + 1) = 0x40000000LL;
    v133 = (uint64_t (*)(__int128 *))___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
    __int16 v134 = &__block_descriptor_tmp_54_39769;
    v135 = v2;
    os_log_type_t v11 = *(void *)(v2 + 648);
    do
    {
      if (!v11) {
        break;
      }
      os_log_type_t v12 = *(void *)(v11 + 32);
      __int16 v13 = v133(&type);
      os_log_type_t v11 = v12;
    }

    while ((v13 & 1) != 0);
    id v14 = (uint64_t *)(v2 + 696);
    nw_frame_cache_remove_all((uint64_t *)(v2 + 696));
    if ((*(_BYTE *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v94 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v95 = *(void *)(v2 + 488);
          v96 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
          os_log_type_t v97 = *(_DWORD *)(v2 + 860);
          if (v95) {
            LODWORD(v95) = *(_DWORD *)(v95 + 424);
          }
          v98 = *(void *)(v2 + 32);
          *(_DWORD *)addrinfo buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v2 + 74;
          *(_WORD *)&buf[22] = 2080;
          v137 = (uint64_t)" ";
          *(_WORD *)v138 = 1024;
          *(_DWORD *)&v138[2] = v96;
          *(_WORD *)&v138[6] = 1024;
          *(_DWORD *)&v138[8] = v97;
          *(_WORD *)&v138[12] = 1024;
          *(_DWORD *)&v138[14] = v95;
          *(_WORD *)&v138[18] = 2048;
          *(void *)&v138[20] = v98;
          _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> calling remove input handler on output handler %p",  buf,  0x3Cu);
        }
      }
    }

    id v15 = *(_DWORD *)(v3 + 336);
    *(_DWORD *)(v3 + 336) = v15 - 1;
    if (v15)
    {
LABEL_40:
      if ((*(_BYTE *)(v3 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          os_log_type_t v99 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
            BOOL v100 = *(_DWORD *)(v3 + 372);
            os_log_type_t v101 = *(_DWORD *)(v3 + 336);
            *(_DWORD *)addrinfo buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v3 + 74;
            *(_WORD *)&buf[22] = 2080;
            v137 = (uint64_t)" ";
            *(_WORD *)v138 = 1024;
            *(_DWORD *)&v138[2] = v100;
            *(_WORD *)&v138[6] = 2048;
            *(void *)&v138[8] = v2;
            *(_WORD *)&v138[16] = 1024;
            *(_DWORD *)&v138[18] = v101;
            _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> removed connection %p, now have %u connections",  buf,  0x36u);
          }
        }
      }

      if ((*(_WORD *)(v2 + 872) & 0x800) == 0)
      {
LABEL_63:
        nw_protocol_remove_input_handler(*(void *)(v2 + 32), v2);
        nw_protocol_set_output_handler(v2, 0LL);
        if ((*(_BYTE *)(v2 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            BOOL v102 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v103 = *(void *)(v2 + 488);
              BOOL v104 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
              os_log_type_t v105 = *(_DWORD *)(v2 + 860);
              if (v103) {
                LODWORD(v103) = *(_DWORD *)(v103 + 424);
              }
              *(_DWORD *)addrinfo buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v2 + 74;
              *(_WORD *)&buf[22] = 2080;
              v137 = (uint64_t)" ";
              *(_WORD *)v138 = 1024;
              *(_DWORD *)&v138[2] = v104;
              *(_WORD *)&v138[6] = 1024;
              *(_DWORD *)&v138[8] = v105;
              *(_WORD *)&v138[12] = 1024;
              *(_DWORD *)&v138[14] = v103;
              *(_WORD *)&v138[18] = 2048;
              *(void *)&v138[20] = v2;
              _os_log_impl( &dword_181A5C000,  v102,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p",  buf,  0x3Cu);
            }
          }
        }

        os_log_type_t v40 = *(_BYTE *)(v2 + 760);
        if ((v40 & 1) != 0)
        {
          BOOL v41 = *(void **)(v2 + 752);
          if (v41)
          {
            os_release(v41);
            os_log_type_t v40 = *(_BYTE *)(v2 + 760);
          }
        }

        *(void *)(v2 + 752) = 0LL;
        *(_BYTE *)(v2 + 760) = v40 | 1;
        os_log_type_t v42 = *(_BYTE *)(v2 + 744);
        if ((v42 & 1) != 0)
        {
          char v43 = *(void **)(v2 + 736);
          if (v43)
          {
            os_release(v43);
            os_log_type_t v42 = *(_BYTE *)(v2 + 744);
          }
        }

        *(void *)(v2 + 736) = 0LL;
        *(_BYTE *)(v2 + 744) = v42 | 1;
        v44 = *(void *)(v2 + 488);
        if (!v44 || *(void *)(v44 + 256) != v2)
        {
LABEL_84:
          *(void *)(v2 + 488) = 0LL;
          if ((*(_BYTE *)(v2 + 158) & 1) == 0)
          {
            if (!gLogDatapath) {
              goto LABEL_86;
            }
            BOOL v106 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
            {
              v107 = *(void *)(v2 + 488);
              os_log_type_t v108 = *(_DWORD *)(*(void *)(v2 + 480) + 372LL);
              BOOL v109 = *(_DWORD *)(v2 + 860);
              if (v107) {
                LODWORD(v107) = *(_DWORD *)(v107 + 424);
              }
              *(_DWORD *)addrinfo buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v2 + 74;
              *(_WORD *)&buf[22] = 2080;
              v137 = (uint64_t)" ";
              *(_WORD *)v138 = 1024;
              *(_DWORD *)&v138[2] = v108;
              *(_WORD *)&v138[6] = 1024;
              *(_DWORD *)&v138[8] = v109;
              *(_WORD *)&v138[12] = 1024;
              *(_DWORD *)&v138[14] = v107;
              _os_log_impl( &dword_181A5C000,  v106,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing frame arrays",  buf,  0x32u);
            }
          }

          if (gLogDatapath)
          {
            v110 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
            {
              v141 = 136446210;
              v142 = "nw_protocol_finalize_master_frame_array";
              _os_log_impl(&dword_181A5C000, v110, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v141, 0xCu);
            }
          }

  os_log_type_t v11 = *(void *)(a1 + 32);
  if (v11)
  {
    os_log_type_t v12 = *(double *)(v11 + 328);
    if (v12 > 0.0)
    {
      __int16 v13 = *(void *)(v11 + 336);
      if (v13)
      {
        id v14 = dispatch_time(0x8000000000000000LL, (uint64_t)(v12 * 1000000000.0));
        if (*(void *)v13)
        {
          dispatch_source_set_timer(*(dispatch_source_t *)v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }

        else
        {
          *(void *)(v13 + 32) = v14;
          *(void *)(v13 + 40) = -1LL;
          if (*(_BYTE *)(v13 + 48) && *(_BYTE *)(v13 + 49)) {
            nw_queue_source_run_timer(v13, v14);
          }
        }
      }
    }
  }

  switch(a2)
  {
    case 0LL:
      if (![v5 identity]) {
        goto LABEL_27;
      }
      id v15 = (__SecIdentity *)[v5 identity];
      [v5 certificates];
      BOOL v16 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
      id v17 = sec_identity_create_with_certificates(v15, v16);

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      break;
    case 1LL:
    case 3LL:
      goto LABEL_27;
    case 2LL:
      os_log_type_t v18 = *(id **)(a1 + 32);
      if (v18)
      {
        char v19 = objc_alloc(&OBJC_CLASS___NWURLError);
        os_log_type_t v20 = v18[33];
        BOOL v21 = v18;
        if (v19)
        {
          os_log_type_t v22 = *MEMORY[0x189607740];
          *(void *)addrinfo buf = v19;
          *(void *)os_log_type_t v33 = &OBJC_CLASS___NWURLError;
          __int16 v23 = -[uint8_t initWithDomain:code:userInfo:]( (objc_super *)buf,  sel_initWithDomain_code_userInfo_,  v22,  -999LL,  0LL);
          char v19 = (NWURLError *)v23;
          if (v23) {
            -[uint8_t fillErrorForLoader:andTask:](v23, "fillErrorForLoader:andTask:", v20, v21);
          }
        }

        BOOL v25 = *(void **)(a1 + 32);
        if (v25) {
          objc_setProperty_atomic_copy(v25, v24, v19, 136LL);
        }
      }

      else
      {
        char v19 = 0LL;
      }

LABEL_27:
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      break;
    default:
      break;
  }
}
}

  if (v9)
  {
    BOOL v16 = v9;
    id v17 = 0;
    if (v16 != (nw_content_context *)&__block_literal_global_41831
      && v16 != (nw_content_context *)&__block_literal_global_5_41854)
    {
      id v17 = 1;
      if (v16 != (nw_content_context *)&__block_literal_global_3_41839
        && v16 != (nw_content_context *)&__block_literal_global_4)
      {
        id v17 = *((_BYTE *)v16 + 118) & 1;
      }
    }
  }

  else
  {
    id v17 = 1;
  }

  os_log_type_t v18 = 0LL;
  switch(opcode)
  {
    case nw_ws_opcode_cont:
      if (__nwlog_url_log::onceToken != -1) {
        dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
      }
      BOOL v21 = (os_log_s *)(id)gurlLogObj;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)addrinfo buf = 0;
        _os_log_impl(&dword_181A5C000, v21, OS_LOG_TYPE_ERROR, "WebSocket cont frame should not be received", buf, 2u);
      }

      os_log_type_t v18 = 0LL;
      if (v10) {
        goto LABEL_38;
      }
      goto LABEL_53;
    case nw_ws_opcode_text:
      os_log_type_t v22 = objc_alloc(NSString);
      if (newValue) {
        __int16 v23 = newValue;
      }
      else {
        __int16 v23 = (dispatch_data_s *)MEMORY[0x1895F8AA8];
      }
      os_log_type_t v24 = (void *)[v22 initWithData:v23 encoding:4];
      os_log_type_t v18 = (void *)[objc_alloc(MEMORY[0x189601F40]) initWithString:v24];

      goto LABEL_37;
    case nw_ws_opcode_binary:
      char v19 = objc_alloc(MEMORY[0x189601F40]);
      if (newValue) {
        os_log_type_t v20 = newValue;
      }
      else {
        os_log_type_t v20 = (dispatch_data_s *)MEMORY[0x1895F8AA8];
      }
      os_log_type_t v18 = (void *)[v19 initWithData:v20];
      if (!v10) {
        goto LABEL_53;
      }
      goto LABEL_38;
    case nw_ws_opcode_close:
      close_code = nw_ws_metadata_get_close_code((nw_protocol_metadata_t)v13);
      os_log_type_t v29 = *(void *)(a1 + 32);
      if (v29
        && (*(void *)(v29 + 480) = close_code, (os_log_type_t v30 = *(void **)(a1 + 32)) != 0LL)
        && (objc_setProperty_nonatomic_copy(v30, v28, newValue, 488LL), (char v31 = *(void *)(a1 + 32)) != 0))
      {
        objc_super v32 = 248LL;
        if (!*(void *)(v31 + 248)) {
          objc_super v32 = 240LL;
        }
        os_log_type_t v33 = (id *)*(id *)(v31 + v32);
        os_log_type_t v34 = *(void **)(a1 + 32);
      }

      else
      {
        os_log_type_t v34 = 0LL;
        os_log_type_t v33 = 0LL;
      }

      BOOL v35 = [v34 closeCode];
      [*(id *)(a1 + 32) closeReason];
      __int16 v36 = (void *)objc_claimAutoreleasedReturnValue();
      v59 = v34;
      uint64_t v38 = v36;
      if (v33)
      {
        -[NWURLSessionDelegateWrapper delegateFor_didCloseWithCode](v33, v37);
        os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue();
        if (v39)
        {
          os_log_type_t v40 = v33[4];
          *(void *)addrinfo buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = __69__NWURLSessionDelegateWrapper_webSocketTask_didCloseWithCode_reason___block_invoke;
          *(void *)&buf[24] = &unk_189BC70E0;
          *(void *)&buf[32] = v39;
          *(void *)&uint64_t v70 = v40;
          *((void *)&v70 + 1) = v59;
          *((void *)&v71 + 1) = v35;
          *(void *)&os_log_type_t v71 = v38;
          BOOL v41 = v33[6];
          os_log_type_t v42 = v40;
          -[NWURLSessionDelegateQueue runDelegateBlock:](v41, buf);
        }
      }

      os_log_type_t v18 = 0LL;
      id v17 = 1;
      if (!v10) {
        goto LABEL_53;
      }
      goto LABEL_38;
    case nw_ws_opcode_ping:
    case nw_ws_opcode_pong:
      -[NWURLSessionWebSocketTask receiveMessage](*(void *)(a1 + 32));
      goto LABEL_75;
    default:
LABEL_37:
      if (v10)
      {
LABEL_38:
        BOOL v25 = *(void ***)(a1 + 32);
        if (v25)
        {
          objc_super v26 = v10;
          BOOL v25 = (void **)-[NWURLError initWithNWError:forLoader:andTask:]( objc_alloc(&OBJC_CLASS___NWURLError),  v26,  v25[33],  v25);
        }

        if (v18) {
          goto LABEL_56;
        }
      }

      else
      {
LABEL_53:
        BOOL v25 = 0LL;
        if (v18) {
          goto LABEL_56;
        }
      }

      if (v17 != 1 && !v25)
      {
        -[NWURLSessionTask errorForErrorCode:](*(id **)(a1 + 32), -1005LL);
        BOOL v25 = (void **)objc_claimAutoreleasedReturnValue();
        LOBYTE(v17) = 1;
        os_log_type_t v52 = *(id **)(a1 + 32);
        if (!v25) {
          goto LABEL_72;
        }
        goto LABEL_69;
      }
}

  id v17 = -1028477379 * ((-2048144777 * (v12 ^ (v12 >> 15))) ^ ((-2048144777 * (v12 ^ (v12 >> 15))) >> 13));
  return v17 ^ HIWORD(v17);
}

LABEL_13:
          if (!v13) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }

        if (!v50)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v14 = (os_log_s *)(id)gLogObj;
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
            _os_log_impl( &dword_181A5C000,  v14,  v33,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot create retry of a non-activated activity, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_12;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v14 = (os_log_s *)(id)gLogObj;
        __int16 v23 = type;
        os_log_type_t v24 = os_log_type_enabled(v14, type);
        if (!backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
            _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot create retry of a non-activated activity, no backtrace",  buf,  0xCu);
          }

          goto LABEL_12;
        }

        if (v24)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
          os_log_type_t v55 = 2082;
          *(void *)os_log_type_t v56 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot create retry of a non-activated activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v13) {
LABEL_14:
        }
          free(v13);
      }
}

    *(void *)(a1 + 448) = v9;
    *(_WORD *)(a1 + 474) = v5;
    return a1 + 448;
  }

  os_log_type_t v11 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!(_DWORD)result)
  {
    free(v12);
    os_log_type_t v9 = 0LL;
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

    os_log_type_t v12 = 0LL;
    goto LABEL_20;
  }

  if (*(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 16) != -65536) {
    goto LABEL_12;
  }
  id v6 = (int *)(a1 + 20);
LABEL_4:
  BOOL v7 = *v6;
  if (*v6 == -1) {
    goto LABEL_19;
  }
  if (!v3) {
    goto LABEL_12;
  }
  os_log_type_t v8 = (char *)v3;
  os_log_type_t v9 = v8;
  BOOL v10 = *(_WORD *)(v8 + 85);
  if ((v10 & 0x80) != 0) {
    os_log_type_t v11 = *((_DWORD *)v8 + 18);
  }
  else {
    os_log_type_t v11 = 0;
  }

  __int16 v13 = v9;
  if ((*(_WORD *)(v9 + 85) & 0x100) == 0)
  {

    os_log_type_t v12 = 0LL;
    goto LABEL_20;
  }

  id v14 = v13[19];

  if (v7 == v14 || (os_log_type_t v12 = 0LL, (v10 & 0x80) != 0) && (v14 & v11) == v7) {
LABEL_19:
  }
    os_log_type_t v12 = 1LL;
LABEL_20:

  return v12;
}

    __int16 v13 = v9;
    id v14 = v13;
    id v15 = v13[12];
    if (v15)
    {
      BOOL v16 = v15;
      id v17 = v16[24];

      os_log_type_t v18 = v14[13];
      if (v18)
      {
LABEL_14:
        char v19 = v18;
        os_log_type_t v20 = v19[24];

        goto LABEL_17;
      }
    }

    else
    {
      id v17 = 0;
      os_log_type_t v18 = v13[13];
      if (v18) {
        goto LABEL_14;
      }
    }

    os_log_type_t v20 = 0;
LABEL_17:
    os_log_type_t v116 = 0LL;
    os_log_type_t v117 = &v116;
    os_log_type_t v118 = 0x2020000000LL;
    v119 = 1;
    if ((nw_path_may_span_multiple_interfaces(v14) & 1) != 0)
    {
LABEL_18:
      BOOL v21 = nw_parameters_copy_prohibited_netagent_uuids(v14[2]);
      if (v21)
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_4;
        applier[3] = &unk_189BC53F8;
        BOOL v100 = v14;
        os_log_type_t v101 = &v116;
        BOOL v102 = a2;
        xpc_array_apply(v21, applier);
      }

      if (*((_BYTE *)v117 + 24))
      {
        os_log_type_t v22 = nw_parameters_copy_required_netagent_uuids(v14[2]);
        if (v22)
        {
          v95[0] = MEMORY[0x1895F87A8];
          v95[1] = 3221225472LL;
          v95[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_5;
          v95[3] = &unk_189BC53F8;
          v96 = v14;
          os_log_type_t v97 = &v116;
          v98 = a2;
          xpc_array_apply(v22, v95);
        }

        if (*((_BYTE *)v117 + 24))
        {
          __int16 v23 = nw_parameters_copy_prohibited_netagent_domains(v14[2]);
          os_log_type_t v24 = nw_parameters_copy_prohibited_netagent_types(v14[2]);
          BOOL v25 = v24;
          if (v23)
          {
            if (v24)
            {
              count = xpc_array_get_count(v23);
              if (count == xpc_array_get_count(v25))
              {
                v90[0] = MEMORY[0x1895F87A8];
                v90[1] = 3221225472LL;
                v90[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_6;
                v90[3] = &unk_189BC5448;
                os_log_type_t v91 = v25;
                v94 = a2;
                v92 = v14;
                os_log_type_t v93 = &v116;
                xpc_array_apply(v23, v90);
              }
            }
          }

          if (*((_BYTE *)v117 + 24))
          {
            os_log_type_t v27 = nw_parameters_copy_required_netagent_domains(v14[2]);
            BOOL v28 = nw_parameters_copy_required_netagent_types(v14[2]);
            os_log_type_t v29 = v28;
            if (v27)
            {
              if (v28)
              {
                os_log_type_t v30 = xpc_array_get_count(v27);
                if (v30 == xpc_array_get_count(v29))
                {
                  v85[0] = MEMORY[0x1895F87A8];
                  v85[1] = 3221225472LL;
                  v85[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_8;
                  v85[3] = &unk_189BC5448;
                  v86 = v29;
                  v87 = v14;
                  v88 = &v116;
                  os_log_type_t v89 = a2;
                  xpc_array_apply(v27, v85);
                }
              }
            }

            a2 = *((_BYTE *)v117 + 24) != 0;
          }

          else
          {
            a2 = 0LL;
          }
        }

        else
        {
          a2 = 0LL;
        }
      }

      else
      {
        a2 = 0LL;
      }

      goto LABEL_123;
    }

    if (nw_parameters_has_prohibited_interface_types(v14[2]))
    {
      char v31 = nw_parameters_copy_prohibited_interface_types(v14[2]);
      if (v31)
      {
        *(void *)addrinfo buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke;
        os_log_type_t v121 = &unk_189BC53D0;
        objc_super v32 = v14;
        v124 = v17;
        v125 = v20;
        BOOL v122 = v32;
        os_log_type_t v123 = &v116;
        v126 = a2;
        xpc_array_apply(v31, buf);
      }
    }

    if (!*((_BYTE *)v117 + 24)) {
      goto LABEL_122;
    }
    if (!nw_parameters_has_prohibited_interface_subtypes(v14[2]))
    {
LABEL_54:
      if (!*((_BYTE *)v117 + 24)) {
        goto LABEL_122;
      }
      if (nw_parameters_has_prohibited_interfaces(v14[2]))
      {
        os_log_type_t v40 = nw_parameters_copy_prohibited_interfaces(v14[2]);
        if (v40)
        {
          v103[0] = MEMORY[0x1895F87A8];
          v103[1] = 3221225472LL;
          v103[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_3;
          v103[3] = &unk_189BC53F8;
          BOOL v104 = v14;
          os_log_type_t v105 = &v116;
          BOOL v106 = a2;
          xpc_array_apply(v40, v103);
        }
      }

      if (!*((_BYTE *)v117 + 24)) {
        goto LABEL_122;
      }
      BOOL v41 = v14;
      if (nw_parameters_get_required_interface_index(v14[2]) && v9->policy_result.routing_result == 6)
      {
        os_log_type_t v42 = *((_DWORD *)v41 + 67);
        LOBYTE(v42) = v42 == nw_parameters_get_required_interface_index(v14[2]);

        if ((v42 & 1) == 0)
        {
LABEL_95:
          if (nw_parameters_get_prohibit_expensive((nw_parameters_t)v14[2]) && nw_path_is_expensive((nw_path_t)v41))
          {
            if (a2)
            {
              v73 = "Expensive path prohibited";
LABEL_112:
              os_log_type_t v74 = 5;
              goto LABEL_113;
            }

  __nwlog_obj();
  char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
  os_log_type_t v20 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v20))
  {
    free(v20);
    goto LABEL_5;
  }

    BOOL v25 = *(id *)(a1 + 32);
    v28[0] = MEMORY[0x1895F87A8];
    v28[1] = 3221225472LL;
    v28[2] = __94__NWURLSessionDelegateWrapper_runCompletionHandler_noAsync_task_metrics_cachedResponse_cache___block_invoke;
    v28[3] = &unk_189BC6E38;
    v28[4] = a1;
    os_log_type_t v29 = v16;
    os_log_type_t v30 = v18;
    char v31 = v14;
    objc_super v32 = v20;
    os_log_type_t v33 = v21;
    os_log_type_t v34 = v25;
    BOOL v35 = v15;
    __int16 v36 = v13;
    objc_super v26 = *(void **)(a1 + 48);
    os_log_type_t v27 = v25;
    -[NWURLSessionDelegateQueue runDelegateBlock:](v26, v28);

LABEL_13:
  }
}

    objc_super v26 = -[NWURLSessionDelegateWrapper delegateFor_didReceiveChallenge]((char *)a1, v12);
    if (v26)
    {
      os_log_type_t v27 = (void *)v26;
      BOOL v28 = *(id *)(a1 + 32);
      os_log_type_t v29 = *(id *)(a1 + 40);
      os_log_type_t v30 = objc_alloc(&OBJC_CLASS___NWURLSessionDelegateDeallocBomb);
      char v31 = v27;
      if (v30)
      {
        v52.os_log_type_t receiver = v30;
        v52.super_class = (Class)&OBJC_CLASS___NWURLSessionDelegateDeallocBomb;
        objc_super v32 = (NWURLSessionDelegateDeallocBomb *)objc_msgSendSuper2(&v52, sel_init);
        os_log_type_t v30 = v32;
        if (v32)
        {
          objc_storeStrong((id *)&v32->__object, v27);
          v30->__method = sel_task_didReceiveChallenge_completionHandler_;
        }
      }

      v37[0] = MEMORY[0x1895F87A8];
      v37[1] = 3221225472LL;
      v37[2] = __74__NWURLSessionDelegateWrapper_task_didReceiveChallenge_completionHandler___block_invoke_4;
      v37[3] = &unk_189BC6ED8;
      os_log_type_t v24 = v31;
      uint64_t v38 = v24;
      os_log_type_t v39 = v28;
      os_log_type_t v40 = v7;
      BOOL v41 = v8;
      os_log_type_t v42 = v30;
      char v43 = v29;
      v44 = v9;
      os_log_type_t v33 = *(void **)(a1 + 48);
      os_log_type_t v34 = v29;
      BOOL v35 = v30;
      __int16 v36 = v28;
      -[NWURLSessionDelegateQueue runDelegateBlock:](v33, v37);
    }

    else
    {
      (*((void (**)(id, uint64_t, void))v9 + 2))(v9, 1LL, 0LL);
      os_log_type_t v24 = 0LL;
    }

    goto LABEL_18;
  }

    free(v16);
    goto LABEL_13;
  }

    free(v6);
    goto LABEL_13;
  }

  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v24 = "-[NWBrowseDescriptor browseWithCompletionHandler:]";
  id v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v21 = 0;
  if (__nwlog_fault(v15, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "-[NWBrowseDescriptor browseWithCompletionHandler:]";
        os_log_type_t v18 = "%{public}s called with null completionHandler";
LABEL_36:
        _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
      }
    }

    else
    {
      if (v21)
      {
        char v19 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v17 = type;
        os_log_type_t v20 = os_log_type_enabled(v16, type);
        if (v19)
        {
          if (v20)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v24 = "-[NWBrowseDescriptor browseWithCompletionHandler:]";
            BOOL v25 = 2082;
            objc_super v26 = (NWBrowseDescriptor *)v19;
            _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s called with null completionHandler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v19);
          goto LABEL_38;
        }

        if (!v20) {
          goto LABEL_37;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "-[NWBrowseDescriptor browseWithCompletionHandler:]";
        os_log_type_t v18 = "%{public}s called with null completionHandler, no backtrace";
        goto LABEL_36;
      }

      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "-[NWBrowseDescriptor browseWithCompletionHandler:]";
        os_log_type_t v18 = "%{public}s called with null completionHandler, backtrace limit exceeded";
        goto LABEL_36;
      }
    }

    os_log_type_t v20 = 1LL;
    goto LABEL_193;
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL))
  {
    protocol_handle = nw_protocol_options_get_protocol_handle(v9);
    if (protocol_handle != *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL)) {
      goto LABEL_12;
    }
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = protocol_handle;
    objc_super v32 = *(const char **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
    if (v32)
    {
      os_log_type_t v33 = (void *)*((void *)v32 + 5);
      if (v33 == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v40 = *((void *)v32 + 11);
        if (v40) {
          *((void *)v32 + 11) = v40 + 1;
        }
        os_log_type_t v34 = -1;
      }

      else
      {
        os_log_type_t v34 = 0;
      }

      *(void *)os_log_type_t type = v32;
      v297 = v34;
      BOOL v41 = *((void *)v32 + 3);
      if (v41)
      {
        os_log_type_t v42 = *(void (**)(const char *))(v41 + 136);
        if (v42)
        {
          v42(v32);
          char v43 = (void *)objc_claimAutoreleasedReturnValue();
          if (v33 != &nw_protocol_ref_counted_handle) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
      }

      __nwlog_obj();
      v217 = (void *)objc_claimAutoreleasedReturnValue();
      v218 = (const char *)*((void *)v32 + 2);
      *(_DWORD *)addrinfo buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
      if (!v218) {
        v218 = "invalid";
      }
      v300 = 2082;
      v301 = (uint64_t)v218;
      v302 = 2048;
      v303 = v32;
      v219 = (char *)_os_log_send_and_compose_impl();

      v298 = OS_LOG_TYPE_ERROR;
      v295 = 0;
      if (__nwlog_fault(v219, &v298, &v295))
      {
        if (v298 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v221 = v298;
          if (os_log_type_enabled(v220, v298))
          {
            v222 = (const char *)*((void *)v32 + 2);
            if (!v222) {
              v222 = "invalid";
            }
            *(_DWORD *)addrinfo buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            v300 = 2082;
            v301 = (uint64_t)v222;
            v302 = 2048;
            v303 = v32;
            _os_log_impl( &dword_181A5C000,  v220,  v221,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback",  buf,  0x20u);
          }

    if (a5 && a6) {
      memcpy(v17, a5, a6);
    }
LABEL_21:
    BOOL v21 = setsockopt(a1, 2, a2, v18, v8);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_22:
      if (v18) {
        free(v18);
      }
      return v21;
    }

    os_log_type_t v22 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v23 = (os_log_s *)gLogObj;
    if (v22 == 2)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        __int16 v36 = "nw_network_agent_ctl_setsockopt_inner";
        os_log_type_t v37 = 1024;
        *(_DWORD *)uint64_t v38 = a2;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 2;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt for message type %u failed %{darwin.errno}d",  buf,  0x18u);
      }

      goto LABEL_22;
    }

    *(_DWORD *)addrinfo buf = 136446722;
    __int16 v36 = "nw_network_agent_ctl_setsockopt_inner";
    os_log_type_t v37 = 1024;
    *(_DWORD *)uint64_t v38 = a2;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = v22;
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v25 = (os_log_s *)gLogObj;
        objc_super v26 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)addrinfo buf = 136446722;
        __int16 v36 = "nw_network_agent_ctl_setsockopt_inner";
        os_log_type_t v37 = 1024;
        *(_DWORD *)uint64_t v38 = a2;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v22;
        os_log_type_t v27 = "%{public}s setsockopt for message type %u failed %{darwin.errno}d";
        goto LABEL_49;
      }

      if (!v33)
      {
        BOOL v25 = (os_log_s *)__nwlog_obj();
        objc_super v26 = type;
        if (!os_log_type_enabled(v25, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)addrinfo buf = 136446722;
        __int16 v36 = "nw_network_agent_ctl_setsockopt_inner";
        os_log_type_t v37 = 1024;
        *(_DWORD *)uint64_t v38 = a2;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v22;
        os_log_type_t v27 = "%{public}s setsockopt for message type %u failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_49;
      }

      os_log_type_t v29 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v25 = (os_log_s *)gLogObj;
      objc_super v26 = type;
      os_log_type_t v30 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v29)
      {
        if (v30)
        {
          *(_DWORD *)addrinfo buf = 136446978;
          __int16 v36 = "nw_network_agent_ctl_setsockopt_inner";
          os_log_type_t v37 = 1024;
          *(_DWORD *)uint64_t v38 = a2;
          *(_WORD *)&v38[4] = 1024;
          *(_DWORD *)&v38[6] = v22;
          os_log_type_t v39 = 2082;
          os_log_type_t v40 = v29;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s setsockopt for message type %u failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x22u);
        }

        free(v29);
        goto LABEL_50;
      }

      if (v30)
      {
        *(_DWORD *)addrinfo buf = 136446722;
        __int16 v36 = "nw_network_agent_ctl_setsockopt_inner";
        os_log_type_t v37 = 1024;
        *(_DWORD *)uint64_t v38 = a2;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v22;
        os_log_type_t v27 = "%{public}s setsockopt for message type %u failed %{darwin.errno}d, no backtrace";
LABEL_49:
        _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0x18u);
      }
    }

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 48), 22);
  return 4LL;
}

void sub_181A76E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_stack_append_application_protocol(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
    __int16 v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v13) {
          goto LABEL_8;
        }
LABEL_43:
        free(v13);
        goto LABEL_8;
      }

      if (v20)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
        _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
        _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_41:
    goto LABEL_42;
  }

  if (v4)
  {
    if (nw_protocol_options_are_persistent(v4))
    {
      combined_array = nw_array_create_combined_array(v3[1], v3[2]);
      BOOL v7 = v3[1];
      v3[1] = combined_array;

      nw_array_append((uint64_t)v3[1], v5);
      os_log_type_t v8 = v3[2];
      v3[2] = 0LL;
    }

    else
    {
      uint64_t v9 = (uint64_t)v3[2];
      if (!v9)
      {
        BOOL v10 = nw_array_create();
        os_log_type_t v11 = v3[2];
        v3[2] = (void *)v10;

        uint64_t v9 = (uint64_t)v3[2];
      }

      nw_array_append(v9, v5);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
  __int16 v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
      _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null protocol", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v26)
  {
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v25 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
      _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  BOOL v21 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v22 = type;
  BOOL v23 = os_log_type_enabled(v14, type);
  if (!v21)
  {
    if (v23)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
      _os_log_impl(&dword_181A5C000, v14, v22, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v23)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v29 = "nw_protocol_stack_append_application_protocol";
    __int16 v30 = 2082;
    char v31 = v21;
    _os_log_impl( &dword_181A5C000,  v14,  v22,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v21);
  if (v13) {
    goto LABEL_43;
  }
LABEL_8:
}

    free(backtrace_string);
    goto LABEL_60;
  }

  os_log_type_t v8 = *(uint64_t (**)(void))(v7 + 128);
  if (!v8) {
    goto LABEL_62;
  }
  if (!a3 || (*(_BYTE *)(v7 + 185) & 1) != 0) {
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(v7 + 80);
  if (!v9 || (BOOL v10 = *(unsigned int (**)(void))(v9 + 248)) == 0LL || !v10())
  {
LABEL_62:
    os_log_type_t v11 = 0LL;
    goto LABEL_63;
  }

  os_log_type_t v8 = *(uint64_t (**)(void))(v6[1] + 128LL);
LABEL_11:
  os_log_type_t v11 = v8();
LABEL_63:

  return v11;
}

            os_log_type_t v22 = 0LL;
LABEL_42:
            unsigned int sa_len = v20 + v19 + v21 + v22;
            goto LABEL_50;
          }

  if (v14) {
    free(v14);
  }
  return 0LL;
}

LABEL_42:
      if (v13) {
        free(v13);
      }
      goto LABEL_44;
    }

    if (!v27)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_41;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    os_log_type_t v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_41;
    }

    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (!v25) {
      goto LABEL_43;
    }
LABEL_42:
    free(v25);
    goto LABEL_43;
  }

  if (v8)
  {
    os_log_type_t v12 = nw_endpoint_handler_copy_flow(v10);
    __int16 v13 = (unsigned __int16 *)v12;
    id v14 = *((unsigned __int16 *)v12 + 488);
    if (v14 != 0xFFFF) {
      *((_WORD *)v12 + 488) = v14 + 1;
    }
    os_log_type_t v15 = v10;

    BOOL v16 = v13[488];
    os_log_type_t v17 = (char *)v8;
    os_log_type_t v18 = v17;
    if (v15[168])
    {
      *((_WORD *)v17 + 68) = v16;
      snprintf(v17 + 48, 0x54uLL, "[%s%s:%u]", "C", v15 + 168, v16);
    }

    os_log_type_t v19 = v15;
    BOOL v20 = *((_DWORD *)v19 + 36);

    BOOL v21 = v18;
    *((_DWORD *)v21 + 33) = v20;

    os_log_type_t v22 = v21;
    *((void *)v22 + 2) = a4;

    goto LABEL_43;
  }

  __nwlog_obj();
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v51 = "nw_endpoint_handler_set_protocol_instance";
  os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v48 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    char v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v39 = type;
    if (os_log_type_enabled(v26, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v51 = "nw_endpoint_handler_set_protocol_instance";
      _os_log_impl(&dword_181A5C000, v26, v39, "%{public}s called with null protocol_parameters", buf, 0xCu);
    }

    free(v20);
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_62;
  }

  if (a2 == 3)
  {
    if (nw_protocol_get_quic_connection_protocol_identifier() == a3
      || nw_protocol_get_quic_stream_protocol_identifier() == (int *)a3)
    {
      v8[11] = a3;
      v8[14] = a4;
    }

    else
    {
      v8[12] = a3;
      v8[15] = a4;
    }
  }

  else if (a2 == 2)
  {
    v7[13] = a3;
    v7[16] = a4;
  }

    if (v18) {
      free(v18);
    }
    goto LABEL_23;
  }

  os_unfair_lock_lock(v1 + 28);
  if (v2[29]._os_unfair_lock_opaque != 2)
  {
    os_unfair_lock_unlock(v2 + 28);
    if ((v2[67]._os_unfair_lock_opaque & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v4 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        if ((v2[67]._os_unfair_lock_opaque & 1) != 0) {
          id v5 = "dry-run ";
        }
        else {
          id v5 = "";
        }
        id v6 = (void *)nw_endpoint_handler_copy_endpoint(v2);
        logging_description = nw_endpoint_get_logging_description(v6);
        os_unfair_lock_opaque = v2[30]._os_unfair_lock_opaque;
        uint64_t v9 = logging_description;
        else {
          BOOL v10 = off_189BBBBF0[os_unfair_lock_opaque];
        }
        os_log_type_t v25 = v10;
        os_log_type_t v11 = v2;
        os_log_type_t v12 = v11;
        __int16 v13 = "path";
        switch(v2[29]._os_unfair_lock_opaque)
        {
          case 0u:
            break;
          case 1u:
            __int16 v13 = "resolver";
            break;
          case 2u:
            __int16 v13 = nw_endpoint_flow_mode_string(v11[31]);
            break;
          case 3u:
            __int16 v13 = "proxy";
            break;
          case 4u:
            __int16 v13 = "fallback";
            break;
          case 5u:
            __int16 v13 = "transform";
            break;
          default:
            __int16 v13 = "unknown-mode";
            break;
        }

        id v14 = v12;
        os_unfair_lock_lock(v2 + 28);
        os_log_type_t v15 = v14[8];
        os_unfair_lock_unlock(v2 + 28);

        *(_DWORD *)addrinfo buf = 136447746;
        os_log_type_t v29 = "nw_endpoint_handler_copy_connected_path";
        __int16 v30 = 2082;
        char v31 = (char *)&v2[42];
        uint64_t v32 = 2082;
        os_log_type_t v33 = v5;
        os_log_type_t v34 = 2082;
        BOOL v35 = v9;
        __int16 v36 = 2082;
        os_log_type_t v37 = v25;
        uint64_t v38 = 2082;
        os_log_type_t v39 = v13;
        os_log_type_t v40 = 2114;
        BOOL v41 = v15;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is not flow",  buf,  0x48u);
      }
    }

    if (!v10)
    {
LABEL_43:
      is_viable = 0LL;
      goto LABEL_44;
    }

    if (v16) {
      free(v16);
    }
    goto LABEL_4;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  __int16 v30 = "nw_protocol_establishment_report_create";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v27 = 0;
  if (__nwlog_fault(v12, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v30 = "nw_protocol_establishment_report_create";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v27)
    {
      os_log_type_t v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          __int16 v30 = "nw_protocol_establishment_report_create";
          char v31 = 2082;
          uint64_t v32 = v19;
          _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v19);
        goto LABEL_35;
      }

      if (v21)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v30 = "nw_protocol_establishment_report_create";
        _os_log_impl(&dword_181A5C000, v13, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v30 = "nw_protocol_establishment_report_create";
        _os_log_impl( &dword_181A5C000,  v13,  v25,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  __break(1u);
  swift_bridgeObjectRelease();
  __break(1u);
  BOOL result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

    swift_bridgeObjectRetain();
    os_log_type_t v25 = sub_18264F330();
    swift_bridgeObjectRelease();
    BOOL v21 = v25 + v8;
    if (!__OFADD__(v25, v8)) {
      goto LABEL_27;
    }
LABEL_43:
    __break(1u);
  }

  BOOL result = sub_18264F360();
  __break(1u);
  return result;
}

  sub_18264F318();
  __break(1u);
LABEL_42:
  BOOL result = sub_18264F318();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

  if ((v3 & 1) != 0)
  {
    if (!v2)
    {
      __nwlog_obj();
      os_log_type_t v123 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
      *(_DWORD *)addrinfo buf = 136446210;
      v140 = "_strict_strlcat";
      v124 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v124);
      if (result) {
        goto LABEL_268;
      }
      free(v124);
    }

    BOOL v21 = 0LL;
    os_log_type_t v22 = 107LL;
    while (1)
    {
      BOOL v23 = &v2[v21];
      if (!v2[v21]) {
        break;
      }
      ++v21;
      if (!--v22) {
        goto LABEL_67;
      }
    }

    if (v22 >= 2)
    {
      char v26 = v22 - 2;
      os_log_type_t v27 = 106 - v21;
      BOOL v28 = 105 - v21;
      if (v28 >= 2) {
        BOOL v28 = 2LL;
      }
      memcpy(v23, ", ", v28 + 1);
      BOOL v23 = v2 + 106;
      while (v26 <= 1)
      {
        if (!--v27) {
          goto LABEL_66;
        }
      }

      goto LABEL_67;
    }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v31 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    output_handler = a1->output_handler;
    if (!output_handler
      || (get_output_local_endpoint = (uint64_t (*)(void))output_handler->callbacks->get_output_local_endpoint) == 0LL
      || (default_input_handler = (nw_protocol *)get_output_local_endpoint()) == 0LL)
    {
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        get_local_endpoint = (uint64_t (*)(void))default_input_handler->callbacks->get_local_endpoint;
        else {
          default_input_handler = 0LL;
        }
      }
    }

    __int16 v36 = v11[2];
    *(_DWORD *)addrinfo buf = 136447234;
    os_log_type_t v55 = "nw_protocol_shoes_add_request_to_output_frames";
    os_log_type_t v56 = 2082;
    os_log_type_t v57 = (char *)handle + 151;
    id v58 = 2114;
    *(void *)v59 = default_input_handler;
    *(_WORD *)&v59[8] = 1024;
    char v60 = v36;
    os_log_type_t v61 = 1024;
    objc_super v62 = v51;
    _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s Sent shoes request: local address %{public}@ type %u inner length %u with TFO",  buf,  0x2Cu);
  }

  free(v11);
  *((_BYTE *)handle + 150) = 4;
  return 1LL;
}

      if (v9) {
        free(v9);
      }
      return 0LL;
    }

    if (!v17)
    {
      BOOL v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v20 = "nw_protocol_shoes_copy_info";
        os_log_type_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_40;
      }

      goto LABEL_41;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    id v14 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v20 = "nw_protocol_shoes_copy_info";
        os_log_type_t v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_40;
      }

      goto LABEL_41;
    }

    if (v14)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v20 = "nw_protocol_shoes_copy_info";
      BOOL v21 = 2082;
      os_log_type_t v22 = backtrace_string;
      os_log_type_t v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
      _os_log_impl(&dword_181A5C000, v10, v11, v15, buf, 0x16u);
    }

    goto LABEL_42;
  }

  if (v7)
  {
    *(void *)BOOL v41 = 0LL;
    *(void *)&v41[8] = v41;
    *(void *)&v41[16] = 0x3032000000LL;
    os_log_type_t v42 = __Block_byref_object_copy__1683;
    char v43 = __Block_byref_object_dispose__1684;
    -[NWNumericAccumulator overrideStateWithName:](self, "overrideStateWithName:", v7);
    v44 = (id)objc_claimAutoreleasedReturnValue();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      [*(id *)(*(void *)&v41[8] + 40) state];
      BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v34 = "-[NWNumericAccumulator updateState:forName:]";
      BOOL v35 = 2112;
      __int16 v36 = v8;
      os_log_type_t v37 = 2112;
      uint64_t v38 = v10;
      os_log_type_t v39 = 2112;
      os_log_type_t v40 = v6;
      _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_INFO, "%{public}s Updating state of %@ from %@ to %@", buf, 0x2Au);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      [*(id *)(*(void *)&v41[8] + 40) state];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v34 = "-[NWNumericAccumulator updateState:forName:]";
      BOOL v35 = 2112;
      __int16 v36 = v8;
      os_log_type_t v37 = 2112;
      uint64_t v38 = v12;
      os_log_type_t v39 = 2112;
      os_log_type_t v40 = v6;
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s Updating state of %@ from %@ to %@",  buf,  0x2Au);
    }

    v27[0] = MEMORY[0x1895F87A8];
    v27[1] = 3221225472LL;
    v27[2] = __44__NWNumericAccumulator_updateState_forName___block_invoke;
    v27[3] = &unk_189BBE1E0;
    char v31 = v41;
    BOOL v28 = v8;
    os_log_type_t v29 = v6;
    __int16 v30 = self;
    os_unfair_lock_lock(&self->_lock);
    __44__NWNumericAccumulator_updateState_forName___block_invoke(v27);
    os_unfair_lock_unlock(&self->_lock);

    _Block_object_dispose(v41, 8);
    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)BOOL v41 = 136446210;
  *(void *)&v41[4] = "-[NWNumericAccumulator updateState:forName:]";
  id v14 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  uint64_t v32 = 0;
  if (buf[0] == 17)
  {
    __nwlog_obj();
    os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v18 = buf[0];
    if (os_log_type_enabled(v15, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)BOOL v41 = 136446210;
      *(void *)&v41[4] = "-[NWNumericAccumulator updateState:forName:]";
      _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null name", v41, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v32)
  {
    __nwlog_obj();
    os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v26 = buf[0];
    if (os_log_type_enabled(v15, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)BOOL v41 = 136446210;
      *(void *)&v41[4] = "-[NWNumericAccumulator updateState:forName:]";
      _os_log_impl(&dword_181A5C000, v15, v26, "%{public}s called with null name, backtrace limit exceeded", v41, 0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v22 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v23 = buf[0];
  os_log_type_t v24 = os_log_type_enabled(v15, (os_log_type_t)buf[0]);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)BOOL v41 = 136446210;
      *(void *)&v41[4] = "-[NWNumericAccumulator updateState:forName:]";
      _os_log_impl(&dword_181A5C000, v15, v23, "%{public}s called with null name, no backtrace", v41, 0xCu);
    }

    goto LABEL_41;
  }

  if (v24)
  {
    *(_DWORD *)BOOL v41 = 136446466;
    *(void *)&v41[4] = "-[NWNumericAccumulator updateState:forName:]";
    *(_WORD *)&v41[12] = 2082;
    *(void *)&v41[14] = v22;
    _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null name, dumping backtrace:%{public}s",  v41,  0x16u);
  }

  free(v22);
  if (v14) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  memset(out, 0, 37);
  uuid_unparse(a1, (char *)out);
  id v5 = -[NWConcrete_nw_candidate_manager init:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_candidate_manager), "init:", v4);
  bonjour_service = nw_endpoint_create_bonjour_service((const char *)out, "_flexquic._udp", "local.");
  nw_candidate_manager_set_bonjour_service(v5, bonjour_service);

  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  BOOL v7 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v8 = (char *)v5[1];
    *(_DWORD *)addrinfo buf = 136446978;
    char v26 = "nw_candidate_manager_create";
    os_log_type_t v27 = 2048;
    BOOL v28 = v8;
    os_log_type_t v29 = 2112;
    __int16 v30 = v5;
    char v31 = 2112;
    uint64_t v32 = v4;
    _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] Creating candidate_manager %@ with parameters %@",  buf,  0x2Au);
  }

LABEL_8:
  return v5;
}

    goto LABEL_42;
  }

  if (v4)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    id v6 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      BOOL v7 = (char *)*((void *)v3 + 1);
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v25 = "nw_candidate_manager_set_original_path";
      char v26 = 2048;
      os_log_type_t v27 = v7;
      BOOL v28 = 2112;
      os_log_type_t v29 = v5;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Setting original remote endpoint %@",  buf,  0x20u);
    }

    objc_storeStrong((id *)v3 + 13, a2);
    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v25 = "nw_candidate_manager_set_original_path";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v25 = "nw_candidate_manager_set_original_path";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null original_remote_endpoint", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v22)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v25 = "nw_candidate_manager_set_original_path";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null original_remote_endpoint, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  os_log_type_t v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v25 = "nw_candidate_manager_set_original_path";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null original_remote_endpoint, no backtrace",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  if (v19)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v25 = "nw_candidate_manager_set_original_path";
    char v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null original_remote_endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  if (*(void *)(a2 + 16))
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v12 = *(void *)(a2 + 16);
        *(_DWORD *)addrinfo buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v3;
        *(_WORD *)&buf[22] = 2048;
        BOOL v28 = a2;
        os_log_type_t v29 = 2080;
        __int16 v30 = v12;
        _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %@ adding instance %p (%s)", buf, 0x2Au);
      }
    }

    *(void *)addrinfo buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    BOOL v28 = 0LL;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_protocol_instance_registrar_add_instance_block_invoke;
    aBlock[3] = &unk_189BC93F0;
    BOOL v23 = buf;
    os_log_type_t v24 = a2;
    os_log_type_t v22 = v3;
    id v4 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v4[2](v4);
    os_unfair_lock_unlock(v3 + 2);

    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null protocol->identifier", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v20 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
      _os_log_impl( &dword_181A5C000,  v7,  v20,  "%{public}s called with null protocol->identifier, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  BOOL v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v17 = type;
  os_log_type_t v18 = os_log_type_enabled(v7, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
      _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null protocol->identifier, no backtrace",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  if (v18)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v16;
    _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v6) {
    goto LABEL_43;
  }
LABEL_5:
}

    goto LABEL_42;
  }

  if (*(void *)(a2 + 16))
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v12 = *(void *)(a2 + 16);
        *(_DWORD *)addrinfo buf = 136446978;
        os_log_type_t v27 = "nw_protocol_instance_registrar_remove_instance";
        BOOL v28 = 2112;
        os_log_type_t v29 = v3;
        __int16 v30 = 2048;
        char v31 = a2;
        uint64_t v32 = 2080;
        os_log_type_t v33 = v12;
        _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ checking to remove instance %p of %s",  buf,  0x2Au);
      }
    }

    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_protocol_instance_registrar_remove_instance_block_invoke;
    aBlock[3] = &unk_189BC66E8;
    os_log_type_t v22 = v3;
    BOOL v23 = a2;
    id v4 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v4[2](v4);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v27 = "nw_protocol_instance_registrar_remove_instance";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v27 = "nw_protocol_instance_registrar_remove_instance";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null protocol->identifier", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v24)
  {
    __nwlog_obj();
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v20 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v27 = "nw_protocol_instance_registrar_remove_instance";
      _os_log_impl( &dword_181A5C000,  v7,  v20,  "%{public}s called with null protocol->identifier, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  BOOL v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v17 = type;
  os_log_type_t v18 = os_log_type_enabled(v7, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v27 = "nw_protocol_instance_registrar_remove_instance";
      _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null protocol->identifier, no backtrace",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  if (v18)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v27 = "nw_protocol_instance_registrar_remove_instance";
    BOOL v28 = 2082;
    os_log_type_t v29 = v16;
    _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v6) {
    goto LABEL_43;
  }
LABEL_5:
}

    if (v13) {
      free(v13);
    }
    goto LABEL_6;
  }

  nw_framer_process_body_input(v1);
  id v3 = *((char *)v2 + 607);
  if ((v3 & 0x80000000) == 0)
  {
    id v4 = *((char *)v2 + 606);
    if ((v4 & 0x80000000) == 0)
    {
      parse_input = (uint64_t (**)(id, NWConcrete_nw_framer *))v2->parse_input;
      if (parse_input)
      {
        if (!v2->input_body_remaining && v2->received_input_frames.tqh_first)
        {
          *((_BYTE *)v2 + 606) = v4 | 0x80;
          *((_BYTE *)v2 + 607) = v3 & 0xFD;
          v2->input_needed = parse_input[2](parse_input, v2);
          *((_BYTE *)v2 + 606) &= ~0x80u;
          id v6 = &qword_18C45F000;
          if (gLogDatapath)
          {
            __nwlog_obj();
            BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              input_needed = v2->input_needed;
              *(_DWORD *)addrinfo buf = 136446722;
              os_log_type_t v25 = "nw_framer_process_input_callout";
              char v26 = 2080;
              log_str = v2->log_str;
              BOOL v28 = 2048;
              os_log_type_t v29 = input_needed;
              _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s %s Requested %zu more bytes",  buf,  0x20u);
            }
          }

          if ((*((_BYTE *)v2 + 607) & 2) == 0 || (*((_BYTE *)v2 + 608) & 1) != 0)
          {
LABEL_23:
            if (v2->pending_input_frames.tqh_first) {
              nw_framer_signal_input_available(v2);
            }
          }

          else
          {
            while (1)
            {
              nw_framer_process_body_input(v2);
              BOOL v7 = *((char *)v2 + 607);
              if (v7 < 0) {
                break;
              }
              os_log_type_t v8 = *((char *)v2 + 606);
              if (v8 < 0) {
                goto LABEL_23;
              }
              uint64_t v9 = (uint64_t (**)(id, NWConcrete_nw_framer *))v2->parse_input;
              if (!v9 || v2->input_body_remaining || !v2->received_input_frames.tqh_first) {
                goto LABEL_23;
              }
              *((_BYTE *)v2 + 606) = v8 | 0x80;
              *((_BYTE *)v2 + 607) = v7 & 0xFD;
              v2->input_needed = v9[2](v9, v2);
              *((_BYTE *)v2 + 606) &= ~0x80u;
              if (*((_BYTE *)v6 + 1537))
              {
                __nwlog_obj();
                BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
                {
                  os_log_type_t v11 = v2->input_needed;
                  *(_DWORD *)addrinfo buf = 136446722;
                  os_log_type_t v25 = "nw_framer_process_input_callout";
                  char v26 = 2080;
                  log_str = v2->log_str;
                  BOOL v28 = 2048;
                  os_log_type_t v29 = v11;
                  _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s %s Requested %zu more bytes",  buf,  0x20u);
                }

                id v6 = &qword_18C45F000;
                if ((*((_BYTE *)v2 + 607) & 2) == 0) {
                  goto LABEL_23;
                }
              }

              else if ((*((_BYTE *)v2 + 607) & 2) == 0)
              {
                goto LABEL_23;
              }

              if ((*((_BYTE *)v2 + 608) & 1) != 0) {
                goto LABEL_23;
              }
            }
          }
        }
      }
    }
  }

    if (v12) {
      free(v12);
    }
    id v5 = 0LL;
    goto LABEL_4;
  }

  __nwlog_obj();
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v26 = "nw_framer_copy_options";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v26 = "nw_framer_copy_options";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null framer", buf, 0xCu);
      }
    }

    else if (v23)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          char v26 = "nw_framer_copy_options";
          os_log_type_t v27 = 2082;
          BOOL v28 = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_35;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v26 = "nw_framer_copy_options";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v26 = "nw_framer_copy_options";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

        goto LABEL_42;
      }

      if (!v29)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v28 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          uint64_t v32 = "nw_framer_create_definition";
          _os_log_impl( &dword_181A5C000,  v18,  v28,  "%{public}s called with null start, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      char v26 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          uint64_t v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_181A5C000, v18, v25, "%{public}s called with null start, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        uint64_t v32 = "nw_framer_create_definition";
        os_log_type_t v33 = 2082;
        os_log_type_t v34 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v18,  v25,  "%{public}s called with null start, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    uint64_t v32 = "nw_framer_create_definition";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v29 = 0;
    if (__nwlog_fault(v17, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          uint64_t v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null identifier_string", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v29)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          uint64_t v32 = "nw_framer_create_definition";
          _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s called with null identifier_string, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      os_log_type_t v24 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          uint64_t v32 = "nw_framer_create_definition";
          _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null identifier_string, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        uint64_t v32 = "nw_framer_create_definition";
        os_log_type_t v33 = 2082;
        os_log_type_t v34 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null identifier_string, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    free(v23);
    if (!v13) {
      goto LABEL_11;
    }
    goto LABEL_62;
  }

  if ((nw_protocol_metadata_supports_replies(v5) & 1) != 0)
  {
    v31[0] = MEMORY[0x1895F87A8];
    v31[1] = 3221225472LL;
    v31[2] = ___ZL31nw_framer_metadata_set_originalPU34objcproto23OS_nw_protocol_metadata8NSObjectS1__block_invoke;
    v31[3] = &unk_189BC6260;
    uint64_t v9 = v5;
    v31[4] = v9;
    BOOL v10 = *((void *)v6 + 4);
    if (v10) {
      ___ZL31nw_framer_metadata_set_originalPU34objcproto23OS_nw_protocol_metadata8NSObjectS1__block_invoke( (uint64_t)v31,  v10);
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v35 = "nw_framer_metadata_set_original";
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s Protocol does not support replies, cannot create a reply",  buf,  0xCu);
    }
  }

    goto LABEL_42;
  }

  if (v4)
  {
    nw_group_descriptor_remove_endpoint(v3[8], v4);
    id v6 = (os_unfair_lock_s *)v3[9];
    if (v6)
    {
      BOOL v7 = v6 + 24;
      os_log_type_t v8 = v6;
      os_unfair_lock_lock(v7);
      uint64_t v9 = v8[6];
      os_unfair_lock_unlock(v7);

      if (v9)
      {
        v24[0] = MEMORY[0x1895F87A8];
        v24[1] = 3221225472LL;
        v24[2] = __nw_connection_group_remove_member_block_invoke;
        v24[3] = &unk_189BBBA18;
        os_log_type_t v25 = v3;
        char v26 = v5;
        uint64_t v9 = v9;
        os_log_type_t v27 = v9;
        nw_path_enumerate_group_options(v9, v24);
      }
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v31 = "nw_connection_group_remove_member";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v29 = OS_LOG_TYPE_ERROR;
  BOOL v28 = 0;
  if (v29 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = v29;
    if (os_log_type_enabled(v12, v29))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v31 = "nw_connection_group_remove_member";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null endpoint", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v28)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = v29;
    if (os_log_type_enabled(v12, v29))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v31 = "nw_connection_group_remove_member";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = v29;
  BOOL v21 = os_log_type_enabled(v12, v29);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v31 = "nw_connection_group_remove_member";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v31 = "nw_connection_group_remove_member";
    uint64_t v32 = 2082;
    os_log_type_t v33 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

          goto LABEL_42;
        }

        if (!v75)
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v51 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            os_log_type_t v52 = nw_group_descriptor_get_type(*((void **)v3 + 8));
            if (v52 > 4) {
              id v53 = "unknown";
            }
            else {
              id v53 = off_189BB74C8[v52];
            }
            *(_DWORD *)addrinfo buf = 136446466;
            v77 = "nw_connection_group_copy_path_for_message";
            v78 = 2080;
            os_log_type_t v79 = (void *)v53;
            _os_log_impl( &dword_181A5C000,  v36,  v51,  "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_41;
        }

        v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v47 = type[0];
        BOOL v48 = os_log_type_enabled(v36, type[0]);
        if (!v46)
        {
          if (v48)
          {
            v54 = nw_group_descriptor_get_type(*((void **)v3 + 8));
            if (v54 > 4) {
              os_log_type_t v55 = "unknown";
            }
            else {
              os_log_type_t v55 = off_189BB74C8[v54];
            }
            *(_DWORD *)addrinfo buf = 136446466;
            v77 = "nw_connection_group_copy_path_for_message";
            v78 = 2080;
            os_log_type_t v79 = (void *)v55;
            _os_log_impl( &dword_181A5C000,  v36,  v47,  "%{public}s Unsupported group descriptor type: %s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_41;
        }

        if (v48)
        {
          id v49 = nw_group_descriptor_get_type(*((void **)v3 + 8));
          if (v49 > 4) {
            os_log_type_t v50 = "unknown";
          }
          else {
            os_log_type_t v50 = off_189BB74C8[v49];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          v77 = "nw_connection_group_copy_path_for_message";
          v78 = 2080;
          os_log_type_t v79 = (void *)v50;
          BOOL v80 = 2082;
          os_log_type_t v81 = v46;
          _os_log_impl( &dword_181A5C000,  v36,  v47,  "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v46);
      }

LABEL_42:
      if (v7) {
LABEL_43:
      }
        free(v7);
LABEL_44:
      os_log_type_t v17 = 0LL;
      goto LABEL_45;
    }

    if (!v37)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v36 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl( &dword_181A5C000,  v8,  v36,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_41;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = type;
    os_log_type_t v34 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_181A5C000, v8, v33, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_41;
    }

    if (v34)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v40 = "nw_group_descriptor_allows_endpoint";
      BOOL v41 = 2082;
      os_log_type_t v42 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v33,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }
}

          if (v13) {
LABEL_42:
          }
            free(v13);
LABEL_43:
          os_log_type_t v24 = 0LL;
LABEL_475:

          return v24;
        }

        __nwlog_obj();
        os_log_type_t v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        __int16 v13 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        LOBYTE(v279) = 0;
        if (type[0] == 17)
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v41 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl( &dword_181A5C000,  v36,  v41,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
          }

          goto LABEL_195;
        }

        if (!(_BYTE)v279)
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v69 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl( &dword_181A5C000,  v36,  v69,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_195;
        }

        os_log_type_t v56 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v59 = type[0];
        char v60 = os_log_type_enabled(v36, (os_log_type_t)type[0]);
        if (!v56)
        {
          if (v60)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl( &dword_181A5C000,  v36,  v59,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
          }

          goto LABEL_195;
        }

        if (v60)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v56;
          _os_log_impl( &dword_181A5C000,  v36,  v59,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        __int16 v13 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        LOBYTE(v279) = 0;
        if (type[0] == 17)
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v39 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl( &dword_181A5C000,  v36,  v39,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
          }

          goto LABEL_195;
        }

        if (!(_BYTE)v279)
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v68 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl( &dword_181A5C000,  v36,  v68,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_195;
        }

        os_log_type_t v56 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v57 = type[0];
        id v58 = os_log_type_enabled(v36, (os_log_type_t)type[0]);
        if (!v56)
        {
          if (v58)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl( &dword_181A5C000,  v36,  v57,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_195;
        }

        if (v58)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v56;
          _os_log_impl( &dword_181A5C000,  v36,  v57,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      free(v56);
      if (!v13) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }

    __nwlog_obj();
    BOOL v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
    __int16 v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(v279) = 0;
    if (type[0] == 17)
    {
      __nwlog_obj();
      __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type[0];
      if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_181A5C000, v36, v37, "%{public}s called with null instance", buf, 0xCu);
      }
    }

    else if ((_BYTE)v279)
    {
      id v53 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v54 = type[0];
      os_log_type_t v55 = os_log_type_enabled(v36, (os_log_type_t)type[0]);
      if (v53)
      {
        if (v55)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v53;
          _os_log_impl( &dword_181A5C000,  v36,  v54,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v53);
        goto LABEL_41;
      }

      if (v55)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_181A5C000, v36, v54, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v67 = type[0];
      if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl( &dword_181A5C000,  v36,  v67,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    free(v28);
    if (!v18) {
      goto LABEL_10;
    }
    goto LABEL_62;
  }

  if (!nw_protocol_service_outbound_requests(v7)
    || (nw_protocol_service_requested_outbound_data(v7, a2, a3, v9) & 1) == 0)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_protocol_request_outbound_data_block_invoke;
    aBlock[3] = &unk_189BB7628;
    os_log_type_t v37 = v9;
    uint64_t v38 = a2;
    os_log_type_t v39 = a3;
    os_log_type_t v11 = _Block_copy(aBlock);
    tqh_first = (uint64_t)v7->pending_outbound_frames.tqh_first;
    if (!tqh_first)
    {
      __int16 v13 = nw_array_create();
      id v14 = v7->pending_outbound_frames.tqh_first;
      v7->pending_outbound_frames.tqh_first = (nw_frame *)v13;

      tqh_first = (uint64_t)v7->pending_outbound_frames.tqh_first;
    }

    os_log_type_t v15 = _Block_copy(v11);
    nw_array_append(tqh_first, v15);

    goto LABEL_10;
  }

  BOOL v10 = 1LL;
LABEL_11:

  return v10;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    goto LABEL_42;
  }

  if (v4)
  {
    id v6 = v3[1];
    BOOL v7 = v4 + 8;
    if (v6)
    {
      **((void **)v4 + 2) = v6;
      *(void *)(v3[1] + 40LL) = *((void *)v4 + 2);
      *((void *)v4 + 2) = v3[2];
      v3[1] = 0LL;
      v3[2] = v3 + 1;
    }

    if (*v7)
    {
      *(void *)v3[2] = *v7;
      *(void *)(*((void *)v4 + 1) + 40LL) = v3[2];
      v3[2] = *((void *)v4 + 2);
      *((void *)v4 + 1) = 0LL;
      *((void *)v4 + 2) = v7;
    }

    *((_DWORD *)v3 + 6) += *((_DWORD *)v4 + 6);
    os_log_type_t v8 = v4;
    v5[1] = 0LL;
    *((void *)v8 + 2) = v7;
    *((_DWORD *)v5 + 6) = 0;

    goto LABEL_8;
  }

  __nwlog_obj();
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v26 = "nw_protocol_data_array_prepend_array";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_protocol_data_array_prepend_array";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null prepend_array", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v23)
  {
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_protocol_data_array_prepend_array";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null prepend_array, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_protocol_data_array_prepend_array";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null prepend_array, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v20)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v26 = "nw_protocol_data_array_prepend_array";
    os_log_type_t v27 = 2082;
    BOOL v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null prepend_array, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  if (v4)
  {
    id v6 = v3[1];
    BOOL v7 = v4 + 8;
    if (v6)
    {
      **((void **)v4 + 2) = v6;
      *(void *)(v3[1] + 40LL) = *((void *)v4 + 2);
      *((void *)v4 + 2) = v3[2];
      v3[1] = 0LL;
      v3[2] = v3 + 1;
    }

    if (*v7)
    {
      *(void *)v3[2] = *v7;
      *(void *)(*((void *)v4 + 1) + 40LL) = v3[2];
      v3[2] = *((void *)v4 + 2);
      *((void *)v4 + 1) = 0LL;
      *((void *)v4 + 2) = v7;
    }

    *((_DWORD *)v3 + 6) += *((_DWORD *)v4 + 6);
    os_log_type_t v8 = v4;
    v5[1] = 0LL;
    *((void *)v8 + 2) = v7;
    *((_DWORD *)v5 + 6) = 0;

    goto LABEL_8;
  }

  __nwlog_obj();
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v26 = "nw_protocol_data_array_apppend_array";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_protocol_data_array_apppend_array";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null append_array", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v23)
  {
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_protocol_data_array_apppend_array";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null append_array, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_protocol_data_array_apppend_array";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null append_array, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v20)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v26 = "nw_protocol_data_array_apppend_array";
    os_log_type_t v27 = 2082;
    BOOL v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null append_array, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_43;
  }
LABEL_8:
}

    free(v13);
    if (!v9) {
      return 0LL;
    }
    goto LABEL_94;
  }

  if (v12 >= 0x400)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446722;
      v107 = "nw_endpoint_create_bonjour_service";
      os_log_type_t v108 = 2082;
      BOOL v109 = "type";
      v110 = 1024;
      LODWORD(v111) = 1024;
      _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
    }

    goto LABEL_33;
  }

  if (!domain)
  {
    __nwlog_obj();
    os_log_type_t v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v107 = "nw_endpoint_create_bonjour_service";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v95.receiver) = 0;
    if (typea[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v72 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_181A5C000, v10, v72, "%{public}s called with null domain", buf, 0xCu);
      }

      goto LABEL_92;
    }

    if (!LOBYTE(v95.receiver))
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v86 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl( &dword_181A5C000,  v10,  v86,  "%{public}s called with null domain, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_92;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v74 = typea[0];
    BOOL v75 = os_log_type_enabled(v10, typea[0]);
    if (!backtrace_string)
    {
      if (v75)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_181A5C000, v10, v74, "%{public}s called with null domain, no backtrace", buf, 0xCu);
      }

      goto LABEL_92;
    }

    if (v75)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      v107 = "nw_endpoint_create_bonjour_service";
      os_log_type_t v108 = 2082;
      BOOL v109 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v74,  "%{public}s called with null domain, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_164;
  }

  os_log_type_t v18 = strlen(domain);
  if (!v18)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v22 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446466;
    v107 = "nw_endpoint_create_bonjour_service";
    os_log_type_t v108 = 2082;
    BOOL v109 = "domain";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v95.receiver) = 0;
    if (typea[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        os_log_type_t v108 = 2082;
        BOOL v109 = "domain";
        _os_log_impl(&dword_181A5C000, v10, v23, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }

    goto LABEL_42;
  }

  if (*((_DWORD *)v5 + 2) == 1)
  {
    if (txt_record && txt_length)
    {
      BOOL v7 = nw_txt_record_create_with_bytes((const uint8_t *)txt_record, txt_length);
      os_log_type_t v8 = (void *)v6[5];
      v6[5] = v7;
    }

    else
    {
      os_log_type_t v8 = (void *)*((void *)v5 + 5);
      *((void *)v5 + 5) = 0LL;
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v26 = "nw_advertise_descriptor_set_txt_record";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_advertise_descriptor_set_txt_record";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s invalid advertise descriptor type", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v23)
  {
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_advertise_descriptor_set_txt_record";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_advertise_descriptor_set_txt_record";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v20)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v26 = "nw_advertise_descriptor_set_txt_record";
    os_log_type_t v27 = 2082;
    BOOL v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_43;
  }
LABEL_8:
}

  __break(1u);
  return result;
}

        free(v20);
        goto LABEL_42;
      }

      if (v27)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v37 = "-[_NWAdvertiser initFor:descriptor:parent:parameters:]";
        _os_log_impl(&dword_181A5C000, v21, v26, "%{public}s called with null _listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v31 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v37 = "-[_NWAdvertiser initFor:descriptor:parent:parameters:]";
        _os_log_impl( &dword_181A5C000,  v21,  v31,  "%{public}s called with null _listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_42;
  }

  if (v4)
  {
    BOOL v7 = (void **)((char *)v3 + 8);
    id v6 = *((void *)v3 + 1);
    if (!v6)
    {
      if (nw_protocol_options_are_persistent(v5) || (v7 = (void **)((char *)v3 + 16), (id v6 = *((void *)v3 + 2)) == 0))
      {
        os_log_type_t v8 = nw_array_create();
        uint64_t v9 = *v7;
        void *v7 = (void *)v8;

        id v6 = (uint64_t)*v7;
      }
    }

    nw_array_prepend(v6, v5);
    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v27 = "nw_protocol_stack_prepend_application_protocol";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v27 = "nw_protocol_stack_prepend_application_protocol";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null protocol", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v27 = "nw_protocol_stack_prepend_application_protocol";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v27 = "nw_protocol_stack_prepend_application_protocol";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v27 = "nw_protocol_stack_prepend_application_protocol";
    BOOL v28 = 2082;
    os_log_type_t v29 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

      os_log_type_t v56 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8)) {
        os_log_type_t v19 = 0LL;
      }
LABEL_43:
      if (v56) {
        os_log_type_t v57 = 1;
      }
      else {
        os_log_type_t v57 = (v19 & 7) == 4;
      }
      if (v57) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      switch((v19 >> 3))
      {
        case 1u:
          id v58 = v13;
          v59 = v10;
          char v60 = v12;
          os_log_type_t v61 = v11;
          objc_super v62 = objc_alloc_init(v11 + 471);
          objc_storeStrong((id *)(a1 + 8), v62);
          if (PBReaderPlaceMark() && NWPBAgentClassReadFrom((uint64_t)v62, a2))
          {
            PBReaderRecallMark();

            os_log_type_t v11 = v61;
            os_log_type_t v12 = v60;
            BOOL v10 = v59;
            __int16 v13 = v58;
            goto LABEL_5;
          }

          return 0LL;
        case 2u:
          id v14 = PBReaderReadString();
          os_log_type_t v15 = v12[744];
          goto LABEL_4;
        case 3u:
          id v14 = PBReaderReadString();
          os_log_type_t v15 = v13[745];
          goto LABEL_4;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 1u;
          os_log_type_t v84 = *v3;
          v85 = *(void *)(a2 + v84);
          if (v85 == -1LL || v85 >= *(void *)(a2 + *v6))
          {
            v88 = 0LL;
LABEL_141:
            *(_BYTE *)(a2 + *v8) = 1;
            goto LABEL_142;
          }

          v86 = v85 + 1;
          v87 = *(_BYTE *)(*(void *)(a2 + *v10) + v85);
          *(void *)(a2 + v84) = v86;
          v88 = v87 & 0x7F;
          if ((v87 & 0x80) == 0) {
            goto LABEL_142;
          }
          os_log_type_t v89 = *v3;
          v90 = *(void *)(a2 + v89);
          if (v90 == -1LL || v90 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          os_log_type_t v91 = v90 + 1;
          v92 = *(char *)(*(void *)(a2 + *v10) + v90);
          *(void *)(a2 + v89) = v91;
          v88 |= (unint64_t)(v92 & 0x7F) << 7;
          if ((v92 & 0x80000000) == 0) {
            goto LABEL_142;
          }
          os_log_type_t v93 = *v3;
          v94 = *(void *)(a2 + v93);
          if (v94 == -1LL || v94 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          os_log_type_t v95 = v94 + 1;
          v96 = *(char *)(*(void *)(a2 + *v10) + v94);
          *(void *)(a2 + v93) = v95;
          v88 |= (unint64_t)(v96 & 0x7F) << 14;
          if ((v96 & 0x80000000) == 0) {
            goto LABEL_142;
          }
          os_log_type_t v97 = *v3;
          v98 = *(void *)(a2 + v97);
          if (v98 == -1LL || v98 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          os_log_type_t v99 = v98 + 1;
          BOOL v100 = *(char *)(*(void *)(a2 + *v10) + v98);
          *(void *)(a2 + v97) = v99;
          v88 |= (unint64_t)(v100 & 0x7F) << 21;
          if ((v100 & 0x80000000) == 0) {
            goto LABEL_142;
          }
          os_log_type_t v101 = *v3;
          BOOL v102 = *(void *)(a2 + v101);
          if (v102 == -1LL || v102 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          os_log_type_t v103 = v102 + 1;
          BOOL v104 = *(char *)(*(void *)(a2 + *v10) + v102);
          *(void *)(a2 + v101) = v103;
          v88 |= (unint64_t)(v104 & 0x7F) << 28;
          if ((v104 & 0x80000000) == 0) {
            goto LABEL_142;
          }
          v173 = *v3;
          v174 = *(void *)(a2 + v173);
          if (v174 == -1LL || v174 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          v175 = v174 + 1;
          v176 = *(char *)(*(void *)(a2 + *v10) + v174);
          *(void *)(a2 + v173) = v175;
          v88 |= (unint64_t)(v176 & 0x7F) << 35;
          if (v176 < 0)
          {
            v205 = *v3;
            v206 = *(void *)(a2 + v205);
            if (v206 == -1LL || v206 >= *(void *)(a2 + *v6)) {
              goto LABEL_141;
            }
            v207 = v206 + 1;
            v208 = *(char *)(*(void *)(a2 + *v10) + v206);
            *(void *)(a2 + v205) = v207;
            v88 |= (unint64_t)(v208 & 0x7F) << 42;
            if (v208 < 0)
            {
              v209 = *v3;
              v210 = *(void *)(a2 + v209);
              if (v210 == -1LL || v210 >= *(void *)(a2 + *v6)) {
                goto LABEL_141;
              }
              v211 = v210 + 1;
              v212 = *(char *)(*(void *)(a2 + *v10) + v210);
              *(void *)(a2 + v209) = v211;
              v88 |= (unint64_t)(v212 & 0x7F) << 49;
              if (v212 < 0)
              {
                v213 = *v3;
                v214 = *(void *)(a2 + v213);
                if (v214 == -1LL || v214 >= *(void *)(a2 + *v6)) {
                  goto LABEL_141;
                }
                v215 = v214 + 1;
                v216 = *(char *)(*(void *)(a2 + *v10) + v214);
                *(void *)(a2 + v213) = v215;
                v88 |= (unint64_t)(v216 & 0x7F) << 56;
                if (v216 < 0)
                {
                  v217 = *v3;
                  v218 = *(void *)(a2 + v217);
                  if (v218 == -1LL || v218 >= *(void *)(a2 + *v6)) {
                    goto LABEL_141;
                  }
                  v219 = v218 + 1;
                  v220 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v218);
                  *(void *)(a2 + v217) = v219;
                  if ((v220 & 0x80) != 0)
                  {
                    v88 = 0LL;
                    goto LABEL_144;
                  }

                  v88 |= v220 << 63;
                }
              }
            }
          }

    if (v10) {
      free(v10);
    }
    return 0LL;
  }

  id v5 = (char *)calloc(1uLL, 0x128uLL);
  if (v5)
  {
LABEL_3:
    *((void *)v5 + 36) = 0LL;
    *((_OWORD *)v5 + 16) = 0u;
    *((_OWORD *)v5 + 17) = 0u;
    *((_OWORD *)v5 + 14) = 0u;
    *((_OWORD *)v5 + 15) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_OWORD *)v5 + 13) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *(_OWORD *)id v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    *(void *)addrinfo buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    os_log_type_t v25 = (uint64_t)v5;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 0x40000000LL;
    aBlock[2] = __nw_protocol_http_client_bottom_create_block_invoke;
    aBlock[3] = &unk_189BB8FE8;
    aBlock[4] = buf;
    *((void *)v5 + 22) = _Block_copy(aBlock);
    _Block_object_dispose(buf, 8);
    logging_disabled = nw_path_parameters_get_logging_disabled(*(void *)(a4 + 104));
    if (logging_disabled) {
      BOOL v7 = 4;
    }
    else {
      BOOL v7 = 0;
    }
    v5[294] = v5[294] & 0xFB | v7;
    if (v5) {
      os_log_type_t v8 = logging_disabled;
    }
    else {
      os_log_type_t v8 = 0;
    }
    if (!v8)
    {
      if (gLogDatapath)
      {
        BOOL v16 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v17 = "";
          os_log_type_t v18 = v5 + 208;
          if (!v5) {
            os_log_type_t v18 = "";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
          if (v5) {
            os_log_type_t v17 = " ";
          }
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v18;
          *(_WORD *)&buf[22] = 2080;
          os_log_type_t v25 = (uint64_t)v17;
          _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }

    if (nw_protocol_http_client_bottom_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http_client_bottom_identifier::onceToken, &__block_literal_global_22210);
    }
    *((void *)v5 + 2) = &nw_protocol_http_client_bottom_identifier::protocol_identifier;
    *((void *)v5 + 3) = &nw_protocol_http_client_bottom_get_callbacks(void)::protocol_callbacks;
    *((void *)v5 + 5) = v5;
    *((void *)v5 + 8) = &nw_protocol_http_client_bottom_get_listen_callbacks(void)::listen_protocol_callbacks;
    *((void *)v5 + 11) = v5;
    *((_WORD *)v5 + 146) = 0;
    return (BOOL)v5;
  }

  id v14 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = 1LL;
  *(_WORD *)&buf[22] = 2048;
  os_log_type_t v25 = 296LL;
  os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

    if (!v30) {
      goto LABEL_24;
    }
    BOOL v28 = (char *)v30;
    goto LABEL_23;
  }

  id v5 = v3;
  id v6 = [v5 type];

  if (v6 == 6)
  {
    v5[70] = a2;
    BOOL v7 = v5;
    os_log_type_t v8 = v7 + 45;
    *(void *)addrinfo buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&buf[24] = &unk_189BC93A0;
    BOOL v41 = v7;
    uint64_t v9 = v7;
    os_unfair_lock_lock(v8);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);

    goto LABEL_24;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v10 = (id)gLogObj;
  os_log_type_t v11 = v5;
  os_log_type_t v12 = [v11 type];

  *(_DWORD *)addrinfo buf = 136446466;
  *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  LODWORD(v37) = 18;
  __int16 v13 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v38 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (os_log_s *)(id)gLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      BOOL v16 = v11;
      os_log_type_t v17 = objc_msgSend(v16, "type", buf, v37);

      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }

    if (!v30) {
      goto LABEL_24;
    }
    BOOL v28 = (char *)v30;
    goto LABEL_23;
  }

  id v5 = v3;
  id v6 = [v5 type];

  if (v6 == 6)
  {
    v5[71] = a2;
    BOOL v7 = v5;
    os_log_type_t v8 = v7 + 45;
    *(void *)addrinfo buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&buf[24] = &unk_189BC93A0;
    BOOL v41 = v7;
    uint64_t v9 = v7;
    os_unfair_lock_lock(v8);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);

    goto LABEL_24;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v10 = (id)gLogObj;
  os_log_type_t v11 = v5;
  os_log_type_t v12 = [v11 type];

  *(_DWORD *)addrinfo buf = 136446466;
  *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  LODWORD(v37) = 18;
  __int16 v13 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v38 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (os_log_s *)(id)gLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      BOOL v16 = v11;
      os_log_type_t v17 = objc_msgSend(v16, "type", buf, v37);

      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }

  if (v23) {
    free(v23);
  }
  return 0LL;
}

    if (!v27) {
      goto LABEL_24;
    }
    os_log_type_t v25 = (char *)v27;
    goto LABEL_23;
  }

  id v5 = (char *)v3;
  id v6 = [v5 type];

  if (v6 == 6)
  {
    *a2 = *(_OWORD *)(v5 + 248);
    goto LABEL_24;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v7 = (id)gLogObj;
  os_log_type_t v8 = v5;
  uint64_t v9 = [v8 type];

  *(_DWORD *)addrinfo buf = 136446466;
  uint64_t v38 = "nw_endpoint_get_service_identifier";
  os_log_type_t v39 = 1024;
  *(_DWORD *)os_log_type_t v40 = v9;
  LODWORD(v34) = 18;
  BOOL v10 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v35 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (os_log_s *)(id)gLogObj;
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v11, type))
    {
      __int16 v13 = v8;
      id v14 = objc_msgSend(v13, "type", buf, v34);

      *(_DWORD *)addrinfo buf = 136446466;
      uint64_t v38 = "nw_endpoint_get_service_identifier";
      os_log_type_t v39 = 1024;
      *(_DWORD *)os_log_type_t v40 = v14;
      _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }

    if (v21) {
      free(v21);
    }
    goto LABEL_4;
  }

  id v3 = nw_authentication_challenge_get_type(v1) - 1;
  if (v3 > 7 || ((0xBFu >> v3) & 1) == 0)
  {
LABEL_4:
    id v4 = 0LL;
    goto LABEL_23;
  }

  id v5 = (void *)nw_authentication_challenge_copy_protection_space(v2);
  id v6 = v5;
  if (v5)
  {
    BOOL v7 = v5;
    os_log_type_t v8 = v7[1];

    if (v8 && (uint64_t v9 = (void **)v8, v10 = [v9 type], v9, v10 == 4))
    {
      domain_for_policy = (const char *)nw_endpoint_get_domain_for_policy(v9[14]);
      if (!domain_for_policy) {
        domain_for_policy = nw_endpoint_get_hostname((nw_endpoint_t)v9);
      }
      os_log_type_t v12 = v9;
      [v12 port];

      __int16 v13 = v7;
      id v14 = *((_BYTE *)v13 + 28);

      if ((v14 & 1) != 0)
      {
      }

      else
      {
        url_scheme = (const char *)nw_endpoint_get_url_scheme(v12);
        if (strcasecmp(url_scheme, "https")) {
          strcasecmp(url_scheme, "wss");
        }
      }

      BOOL v16 = v13;
      os_log_type_t v17 = v16[2];

      if (v17) {
        os_log_type_t v17 = (id)[objc_alloc(NSString) initWithCString:v17 encoding:5];
      }
      [NSString stringWithUTF8String:domain_for_policy];
      os_log_type_t v18 = (const void *)CFURLProtectionSpaceCreate();
      id v4 = [objc_alloc(MEMORY[0x189601ED8]) _initWithCFURLProtectionSpace:v18];
      if (v18) {
        CFRelease(v18);
      }
    }

    else
    {
      id v4 = 0LL;
    }
  }

  else
  {
    id v4 = 0LL;
  }

LABEL_23:
  return v4;
}

      free(backtrace_string);
      goto LABEL_53;
    }

    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_53;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
    os_log_type_t v19 = "%{public}s called with null protocol";
LABEL_52:
    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
LABEL_53:
    if (v16) {
      free(v16);
    }
    return 0LL;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
      os_log_type_t v19 = "%{public}s called with null ohttp";
      goto LABEL_52;
    }

    if (!v26)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
      os_log_type_t v19 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_52;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v22 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
        goto LABEL_40;
      }

      goto LABEL_41;
    }

    if (!v23) {
      goto LABEL_53;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
    os_log_type_t v19 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_52;
  }

  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
  }
  if (a1->default_input_handler == a2)
  {
    nw_protocol_set_input_handler((uint64_t)a1, 0LL);
    if (gLogDatapath)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_181A5C000, v24, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }

    uint64_t v9 = MEMORY[0x1895F87A8];
    *(void *)addrinfo buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28822;
    os_log_type_t v29 = &__block_descriptor_tmp_15_28823;
    __int16 v30 = handle + 41;
    char v31 = 0;
    BOOL v10 = handle[41];
    do
    {
      if (!v10) {
        break;
      }
      os_log_type_t v11 = *(void *)(v10 + 32);
      os_log_type_t v12 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      BOOL v10 = v11;
    }

    while ((v12 & 1) != 0);
    nw_protocol_remove_input_handler((uint64_t)a1->output_handler, (uint64_t)a1);
    output_handler = a1->output_handler;
    if (output_handler)
    {
      nw_protocol_remove_input_handler((uint64_t)output_handler, (uint64_t)a1);
      nw_protocol_set_output_handler((uint64_t)a1, 0LL);
    }

    if (!a3) {
      return 1LL;
    }
    id v14 = handle[37];
    if (v14 && *(_DWORD *)(v14 + 40))
    {
      v25[0] = v9;
      v25[1] = 0x40000000LL;
      v25[2] = ___ZL38nw_protocol_ohttp_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v25[3] = &__block_descriptor_tmp_13_29070;
      v25[4] = handle;
      nw_hash_table_apply((char *)v14, (uint64_t)v25);
      return 1LL;
    }

  if (v8) {
    free(v8);
  }
  id v5 = 0LL;
LABEL_13:

  return v5;
}

  if (v9) {
LABEL_42:
  }
    free(v9);
LABEL_53:
}

    goto LABEL_42;
  }

  __nwlog_obj();
  BOOL v35 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  __int16 v47 = "-[NWEndpoint initWithEncodedData:]";
  __int16 v36 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v38 = type;
    if (os_log_type_enabled(v37, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "-[NWEndpoint initWithEncodedData:]";
      os_log_type_t v39 = "%{public}s [super init] failed";
LABEL_62:
      _os_log_impl(&dword_181A5C000, v37, v38, v39, buf, 0xCu);
    }
  }

  else if (v44)
  {
    os_log_type_t v40 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v38 = type;
    BOOL v41 = os_log_type_enabled(v37, type);
    if (v40)
    {
      if (v41)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        __int16 v47 = "-[NWEndpoint initWithEncodedData:]";
        BOOL v48 = 2082;
        id v49 = v40;
        _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v40);
      goto LABEL_64;
    }

    if (v41)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "-[NWEndpoint initWithEncodedData:]";
      os_log_type_t v39 = "%{public}s [super init] failed, no backtrace";
      goto LABEL_62;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v38 = type;
    if (os_log_type_enabled(v37, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v47 = "-[NWEndpoint initWithEncodedData:]";
      os_log_type_t v39 = "%{public}s [super init] failed, backtrace limit exceeded";
      goto LABEL_62;
    }
  }

LABEL_64:
  if (v36) {
    free(v36);
  }
  os_log_type_t v18 = 0LL;
LABEL_46:

  return v18;
}

    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_42;
  }

  id v3 = *((void *)this + 5);
  if (v3)
  {
    id v4 = *(_BYTE *)(v3 + 488);
    if ((v4 & 1) != 0)
    {
      id v5 = *(void **)(v3 + 480);
      if (v5)
      {
        os_release(v5);
        id v4 = *(_BYTE *)(v3 + 488);
      }
    }

    *(void *)(v3 + 480) = 0LL;
    *(_BYTE *)(v3 + 488) = v4 | 1;
    id v6 = *(_BYTE *)(v3 + 504);
    if ((v6 & 1) != 0)
    {
      BOOL v7 = *(void **)(v3 + 496);
      if (v7)
      {
        os_release(v7);
        id v6 = *(_BYTE *)(v3 + 504);
      }
    }

    *(void *)(v3 + 496) = 0LL;
    *(_BYTE *)(v3 + 504) = v6 | 1;
    os_log_type_t v8 = *(void (****)(void, nw_protocol *, nw_protocol *))(v3 + 544);
    if (v8)
    {
      (**v8)(*(void *)(v3 + 544), a2, a3);
      free(v8);
      *(void *)(v3 + 544) = 0LL;
    }

    uint64_t v9 = *(void (****)(void, nw_protocol *, nw_protocol *))(v3 + 552);
    if (v9)
    {
      (**v9)(*(void *)(v3 + 552), a2, a3);
      free(v9);
      *(void *)(v3 + 552) = 0LL;
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v21 = "operator()";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v18 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v21 = "operator()";
    __int16 v13 = "%{public}s called with null http_encoding";
    goto LABEL_41;
  }

  if (!v18)
  {
    os_log_type_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v21 = "operator()";
    __int16 v13 = "%{public}s called with null http_encoding, backtrace limit exceeded";
    goto LABEL_41;
  }

  BOOL v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = (os_log_s *)__nwlog_obj();
  os_log_type_t v12 = type;
  os_log_type_t v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v21 = "operator()";
    __int16 v13 = "%{public}s called with null http_encoding, no backtrace";
    goto LABEL_41;
  }

  if (v17)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v21 = "operator()";
    os_log_type_t v22 = 2082;
    BOOL v23 = v16;
    _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null http_encoding, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v10) {
    goto LABEL_43;
  }
}

  if (v14) {
    free(v14);
  }
  BOOL v7 = 0LL;
LABEL_8:
  nw_frame_inherit_metadata(a1[6], v7, 0);
  uint64_t v9 = *(void *)(a1[4] + 8LL);
  *(void *)(v7 + 32) = 0LL;
  BOOL v10 = *(uint64_t **)(v9 + 48);
  *(void *)(v7 + 40) = v10;
  os_log_s *v10 = v7;
  *(void *)(v9 + 48) = v7 + 32;
  return nw_frame_unclaimed_bytes(v7, 0LL);
}

    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_42;
  }

  handle = a1->handle;
  if (handle)
  {
    if ((*((_BYTE *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v8 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = handle[11];
          if (v9) {
            BOOL v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            BOOL v10 = -1;
          }
          os_log_type_t v15 = handle[8];
          *(_DWORD *)addrinfo buf = 136447234;
          os_log_type_t v19 = "nw_protocol_webtransport_http3_stream_output_finished";
          BOOL v20 = 2082;
          BOOL v21 = (char *)(handle + 24);
          os_log_type_t v22 = 2080;
          BOOL v23 = " ";
          os_log_type_t v24 = 1024;
          os_log_type_t v25 = v10;
          char v26 = 2048;
          os_log_type_t v27 = v15;
          _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }

    if (*((_DWORD *)handle + 47) == 2 && (*((_BYTE *)handle + 276) & 8) == 0) {
      nw_protocol_output_finished((void *)handle[4], (uint64_t)a1);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v19 = "nw_protocol_webtransport_http3_stream_output_finished";
  id v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v19 = "nw_protocol_webtransport_http3_stream_output_finished";
    BOOL v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_41;
  }

  if (!v16)
  {
    id v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v19 = "nw_protocol_webtransport_http3_stream_output_finished";
    BOOL v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_41;
  }

  __int16 v13 = (char *)__nw_create_backtrace_string();
  id v5 = (os_log_s *)__nwlog_obj();
  id v6 = type;
  id v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v19 = "nw_protocol_webtransport_http3_stream_output_finished";
    BOOL v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_41;
  }

  if (v14)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v19 = "nw_protocol_webtransport_http3_stream_output_finished";
    BOOL v20 = 2082;
    BOOL v21 = v13;
    _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v4) {
    goto LABEL_43;
  }
}
  }

    if (!v13)
    {
LABEL_43:
      BOOL v10 = 1;
      goto LABEL_44;
    }

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          if (__nwlog_url_log::onceToken != -1) {
            dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
          }
          BOOL v23 = (os_log_s *)(id)gurlLogObj;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)addrinfo buf = 0;
            _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "URLSessionDownloadTask: resume data local path is not string",  buf,  2u);
          }

          id v14 = 0LL;
          goto LABEL_61;
        }

        goto LABEL_42;
      }

      id v6 = 0LL;
    }

    if (__nwlog_url_log::onceToken != -1) {
      dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
    }
    id v3 = (id)gurlLogObj;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 138412290;
      __int16 v30 = v4;
      _os_log_impl( &dword_181A5C000,  (os_log_t)v3,  OS_LOG_TYPE_ERROR,  "URLSessionDownloadTask: resume data deserialization returned nil, error: %@",  buf,  0xCu);
    }

    id v14 = 0LL;
    os_log_type_t v8 = v4;
    goto LABEL_61;
  }

  if (__nwlog_url_log::onceToken != -1) {
    dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
  }
  uint64_t v2 = (id)gurlLogObj;
  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)addrinfo buf = 0;
    _os_log_impl( &dword_181A5C000,  (os_log_t)v2,  OS_LOG_TYPE_ERROR,  "URLSessionDownloadTask: cannot init with nil resume data",  buf,  2u);
  }

  id v14 = 0LL;
LABEL_62:

  return v14;
}

          free(v23);
          goto LABEL_51;
        }

        if (!v25) {
          goto LABEL_51;
        }
LABEL_49:
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v64 = "nw_protocol_http2_transport_connect";
        BOOL v65 = 2082;
        v66 = v18;
        os_log_type_t v67 = 2048;
        *(void *)id v68 = a2;
        os_log_type_t v22 = "%{public}s %{public}s hash node for protocol %p did not have stream as extra, no backtrace";
        goto LABEL_50;
      }

      BOOL v20 = (os_log_s *)__nwlog_obj();
      BOOL v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_51;
      }
LABEL_43:
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v64 = "nw_protocol_http2_transport_connect";
      BOOL v65 = 2082;
      v66 = v18;
      os_log_type_t v67 = 2048;
      *(void *)id v68 = a2;
      os_log_type_t v22 = "%{public}s %{public}s hash node for protocol %p did not have stream as extra, backtrace limit exceeded";
      goto LABEL_50;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      __int16 v13 = *(_DWORD *)(v11 + 32);
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v64 = "nw_protocol_http2_transport_connect";
      BOOL v65 = 2082;
      v66 = handle + 205;
      os_log_type_t v67 = 1024;
      *(_DWORD *)id v68 = v13;
      *(_WORD *)&v68[4] = 2048;
      *(void *)&v68[6] = v11;
      id v14 = "%{public}s %{public}s nw_http2_transport_stream_connect failed for stream id %d (%p)";
      os_log_type_t v15 = (os_log_s *)v12;
      BOOL v16 = 38;
LABEL_24:
      _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
      return 0LL;
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v17 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v64 = "nw_protocol_http2_transport_connect";
      BOOL v65 = 2082;
      v66 = handle + 205;
      os_log_type_t v67 = 2048;
      *(void *)id v68 = a2;
      id v14 = "%{public}s %{public}s connect called on protocol %p which is not in protocol hash table";
      os_log_type_t v15 = (os_log_s *)v17;
      BOOL v16 = 32;
      goto LABEL_24;
    }
  }

  return result;
}

  if (v12) {
    free(v12);
  }
  return 4294966394LL;
}

    if (v15) {
      free(v15);
    }
    if (v11) {
      free(v11);
    }
    goto LABEL_45;
  }

  __break(1u);
  return result;
}

    _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
    goto LABEL_42;
  }

  if (gLogDatapath)
  {
    __int16 v30 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      char v31 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)addrinfo buf = 136446978;
      os_log_type_t v40 = "nw_http2_transport_add_to_id_table";
      BOOL v41 = 2082;
      os_log_type_t v42 = (char *)(a1 + 205);
      char v43 = 1024;
      *(_DWORD *)v44 = v31;
      *(_WORD *)&v44[4] = 2048;
      *(void *)&v44[6] = a2;
      _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s called for stream %d (%p)",  buf,  0x26u);
    }
  }

  uint64_t v38 = OS_LOG_TYPE_DEFAULT;
  internal = *(void *)(a1 + 120);
  if (!internal)
  {
    internal = nw_hash_table_create_internal( 0x11u,  8,  (const void *(*)(const void *, unsigned int *))stream_get_key,  (unsigned int (*)(const void *, unsigned int))stream_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))stream_matches_key,  0LL);
    if (internal)
    {
      *(_DWORD *)(internal + 48) &= ~2u;
      *(void *)(a1 + 120) = internal;
      goto LABEL_6;
    }

    *(void *)(a1 + 120) = 0LL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v40 = "nw_http2_transport_add_to_id_table";
    os_log_type_t v19 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v36 = 0;
    if (__nwlog_fault(v19, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v20 = (os_log_s *)gLogObj;
        BOOL v21 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_42;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_http2_transport_add_to_id_table";
        os_log_type_t v22 = "%{public}s nw_hash_table_create_no_lock failed";
        goto LABEL_41;
      }

      if (!v36)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v20 = (os_log_s *)gLogObj;
        BOOL v21 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_42;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_http2_transport_add_to_id_table";
        os_log_type_t v22 = "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded";
        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v20 = (os_log_s *)gLogObj;
      BOOL v21 = type;
      os_log_type_t v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v24) {
          goto LABEL_42;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_http2_transport_add_to_id_table";
        os_log_type_t v22 = "%{public}s nw_hash_table_create_no_lock failed, no backtrace";
        goto LABEL_41;
      }

      if (!v24)
      {
LABEL_29:
        free(backtrace_string);
        goto LABEL_42;
      }

      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v40 = "nw_http2_transport_add_to_id_table";
      BOOL v41 = 2082;
      os_log_type_t v42 = backtrace_string;
      os_log_type_t v25 = "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_181A5C000, v20, v21, v25, buf, 0x16u);
      goto LABEL_29;
    }

    goto LABEL_42;
  }

  if (v20) {
    free(v20);
  }
LABEL_43:
  if (gLogDatapath)
  {
    char v31 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      os_log_type_t v37 = 2082;
      uint64_t v38 = a1 + 205;
      _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s submitted settings to nghttp2",  buf,  0x16u);
    }
  }

  nw_http2_transport_session_send(a1);
  if (gLogDatapath)
  {
    uint64_t v32 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      os_log_type_t v37 = 2082;
      uint64_t v38 = a1 + 205;
      _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s nghttp2_session_send complete with settings",  buf,  0x16u);
    }
  }

  if (v17) {
    free(v17);
  }
  return 0LL;
}

  if (v24) {
    free(v24);
  }
  privacy_proxy_internal = 0LL;
LABEL_21:

  return (nw_proxy_config_t)privacy_proxy_internal;
}

          os_log_type_t v24 = a2->tqh_first;
          do
          {
            if (!v24) {
              break;
            }
            os_log_type_t v25 = (nw_frame *)*((void *)v24 + 4);
            char v26 = ___ZL40nw_protocol_http1_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_134( (uint64_t)&__block_literal_global_136,  (uint64_t)v24);
            os_log_type_t v24 = v25;
          }

          while ((v26 & 1) != 0);
          os_log_type_t v27 = *((void *)v76 + 3);
          if (v27)
          {
            BOOL v28 = *(void *)(v27 + 32);
LABEL_46:
            nw_protocol_finalize_output_frames(v28, (uint64_t)a2);
LABEL_47:
            os_log_type_t v29 = 1LL;
LABEL_48:
            _Block_object_dispose(&v71, 8);
            _Block_object_dispose(type, 8);
            return v29;
          }

          __nwlog_obj();
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v82 = "nw_http1_get_output_handler";
          __int16 v47 = (char *)_os_log_send_and_compose_impl();
          BOOL v80 = OS_LOG_TYPE_ERROR;
          os_log_type_t v79 = 0;
          if (__nwlog_fault(v47, &v80, &v79))
          {
            if (v80 == OS_LOG_TYPE_FAULT)
            {
              BOOL v48 = (os_log_s *)__nwlog_obj();
              id v49 = v80;
              if (os_log_type_enabled(v48, v80))
              {
                *(_DWORD *)addrinfo buf = 136446210;
                os_log_type_t v82 = "nw_http1_get_output_handler";
                os_log_type_t v50 = "%{public}s called with null connection";
LABEL_148:
                _os_log_impl(&dword_181A5C000, v48, v49, v50, buf, 0xCu);
              }
            }

            else if (v79)
            {
              id v58 = (char *)__nw_create_backtrace_string();
              BOOL v48 = (os_log_s *)__nwlog_obj();
              id v49 = v80;
              v59 = os_log_type_enabled(v48, v80);
              if (v58)
              {
                if (v59)
                {
                  *(_DWORD *)addrinfo buf = 136446466;
                  os_log_type_t v82 = "nw_http1_get_output_handler";
                  os_log_type_t v83 = 2082;
                  os_log_type_t v84 = v58;
                  _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v58);
                goto LABEL_149;
              }

              if (v59)
              {
                *(_DWORD *)addrinfo buf = 136446210;
                os_log_type_t v82 = "nw_http1_get_output_handler";
                os_log_type_t v50 = "%{public}s called with null connection, no backtrace";
                goto LABEL_148;
              }
            }

            else
            {
              BOOL v48 = (os_log_s *)__nwlog_obj();
              id v49 = v80;
              if (os_log_type_enabled(v48, v80))
              {
                *(_DWORD *)addrinfo buf = 136446210;
                os_log_type_t v82 = "nw_http1_get_output_handler";
                os_log_type_t v50 = "%{public}s called with null connection, backtrace limit exceeded";
                goto LABEL_148;
              }
            }
          }

    goto LABEL_42;
  }

  if (v4)
  {
    if (v3 != (nw_content_context_t)&__block_literal_global_5_41854
      && v3 != (nw_content_context_t)&__block_literal_global_4
      && v3 != (nw_content_context_t)&__block_literal_global_3_41839
      && v3 != (nw_content_context_t)&__block_literal_global_41831)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v3 + 28);
      id v6 = (unsigned __int8 *)*((id *)v3 + 11);
      os_unfair_lock_unlock((os_unfair_lock_t)v3 + 28);
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_content_context_foreach_protocol_metadata_block_invoke;
      v21[3] = &unk_189BC8628;
      os_log_type_t v22 = v5;
      nw_array_apply(v6, (uint64_t)v21);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v26 = "nw_content_context_foreach_protocol_metadata";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_content_context_foreach_protocol_metadata";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null foreach_block", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v23)
  {
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_content_context_foreach_protocol_metadata";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null foreach_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  BOOL v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v17 = type;
  os_log_type_t v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_content_context_foreach_protocol_metadata";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null foreach_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v18)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v26 = "nw_content_context_foreach_protocol_metadata";
    os_log_type_t v27 = 2082;
    BOOL v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null foreach_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  if (a2)
  {
    if (v3 != (char *)&__block_literal_global_5_41854
      && v3 != (char *)&__block_literal_global_4
      && v3 != (char *)&__block_literal_global_3_41839
      && v3 != (char *)&__block_literal_global_41831)
    {
      v3[118] |= 8u;
      *(_OWORD *)(v3 + 8) = *a2;
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v22 = "nw_content_context_set_packet_id";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v22 = "nw_content_context_set_packet_id";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null packet_id", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v19)
  {
    __nwlog_obj();
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v22 = "nw_content_context_set_packet_id";
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null packet_id, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  id v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v22 = "nw_content_context_set_packet_id";
      _os_log_impl(&dword_181A5C000, v7, v15, "%{public}s called with null packet_id, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v16)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v22 = "nw_content_context_set_packet_id";
    BOOL v23 = 2082;
    os_log_type_t v24 = v14;
    _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s called with null packet_id, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_43;
  }
LABEL_8:
}

          [v6 setObject:MEMORY[0x189604A88] forKeyedSubscript:@"FromUser"];
          goto LABEL_42;
        }
      }

      [v6 setObject:MEMORY[0x189604A88] forKeyedSubscript:@"FromKernel"];
      if ((*((_DWORD *)v4 + 4) & 1) == 0) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }

    if (!v94)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v96 = "-[NWNetworkAgentRegistration handleMessageFromAgent]";
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s Network Agent Registration failed to read message",  buf,  0xCu);
      }
    }
  }

    if (v22)
    {
      os_log_type_t v29 = (char *)v22;
      goto LABEL_43;
    }

  if (v23) {
    free(v23);
  }
  BOOL v10 = 0LL;
LABEL_17:

  return v10;
}

      goto LABEL_42;
    }

    if (!v39)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s CFStringGetCString failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_41;
    }

    os_log_type_t v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    os_log_type_t v24 = os_log_type_enabled(v16, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s CFStringGetCString failed, no backtrace", buf, 0xCu);
      }

      goto LABEL_41;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v42 = "nw_utilities_get_c_string_from_cfstring";
      char v43 = 2082;
      v44 = v22;
      _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s CFStringGetCString failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v22);
    if (v15) {
LABEL_43:
    }
      free(v15);
LABEL_44:
    if (!v10) {
      goto LABEL_46;
    }
LABEL_45:
    free((void *)v10);
    goto LABEL_46;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v11 = (id)gLogObj;
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v42 = "nw_utilities_get_c_string_from_cfstring";
  BOOL v10 = _os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v39 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (os_log_s *)(id)gLogObj;
    __int16 v13 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v42 = "nw_utilities_get_c_string_from_cfstring";
      _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s CFStringGetMaximumSizeForEncoding failed", buf, 0xCu);
    }

    goto LABEL_42;
  }

  if (!v4)
  {
    __nwlog_obj();
    id v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uu = 136446210;
    *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)uu = 136446210;
        *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null block", uu, 0xCu);
      }
    }

    else if (v24)
    {
      os_log_type_t v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)uu = 136446466;
          *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
          *(_WORD *)&uu[12] = 2082;
          *(void *)&uu[14] = v19;
          _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null block, dumping backtrace:%{public}s",  uu,  0x16u);
        }

        free(v19);
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_43;
      }

      if (v21)
      {
        *(_DWORD *)uu = 136446210;
        *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
        _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null block, no backtrace", uu, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)uu = 136446210;
        *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
        _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null block, backtrace limit exceeded",  uu,  0xCu);
      }
    }

    goto LABEL_41;
  }

  *(void *)uu = 0LL;
  *(void *)&uu[8] = 0LL;
  id v6 = v3;
  BOOL v7 = *(unsigned __int16 *)(v6[13] + 108LL) | (*(unsigned __int8 *)(v6[13] + 110LL) << 16);

  if ((v7 & 0x80000) != 0)
  {
    *(_OWORD *)uu = *(_OWORD *)(v6[13] + 40LL);
    if (!uuid_is_null(uu))
    {
      os_log_type_t v8 = nw_utilities_execute_block_as_persona(uu, v5);
      goto LABEL_7;
    }
  }

  v5[2](v5);
LABEL_6:
  os_log_type_t v8 = 0LL;
LABEL_7:

  return v8;
}

          free(v18);
          goto LABEL_42;
        }

        __nwlog_obj();
        os_log_type_t v117 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nwsc_get_remote_pub_key";
        os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(buffer[0]) = 16;
        buf[0] = 0;
        if (LOBYTE(buffer[0]) == 17)
        {
          __nwlog_obj();
          v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v118 = buffer[0];
          if (os_log_type_enabled(v96, buffer[0]))
          {
            *(_DWORD *)key = 136446210;
            *(void *)&key[4] = "nwsc_get_remote_pub_key";
            _os_log_impl(&dword_181A5C000, v96, v118, "%{public}s called with null endpoint", (uint8_t *)key, 0xCu);
          }
        }

        else if (buf[0])
        {
          v124 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v125 = buffer[0];
          v126 = os_log_type_enabled(v96, buffer[0]);
          if (v124)
          {
            if (v126)
            {
              *(_DWORD *)key = 136446466;
              *(void *)&key[4] = "nwsc_get_remote_pub_key";
              *(_WORD *)&key[12] = 2082;
              *(void *)&key[14] = v124;
              _os_log_impl( &dword_181A5C000,  v96,  v125,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  (uint8_t *)key,  0x16u);
            }

            free(v124);
            goto LABEL_40;
          }

          if (v126)
          {
            *(_DWORD *)key = 136446210;
            *(void *)&key[4] = "nwsc_get_remote_pub_key";
            _os_log_impl( &dword_181A5C000,  v96,  v125,  "%{public}s called with null endpoint, no backtrace",  (uint8_t *)key,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v129 = buffer[0];
          if (os_log_type_enabled(v96, buffer[0]))
          {
            *(_DWORD *)key = 136446210;
            *(void *)&key[4] = "nwsc_get_remote_pub_key";
            _os_log_impl( &dword_181A5C000,  v96,  v129,  "%{public}s called with null endpoint, backtrace limit exceeded",  (uint8_t *)key,  0xCu);
          }
        }

      free(backtrace_string);
      goto LABEL_51;
    }

    os_log_type_t v18 = (os_log_s *)__nwlog_obj(v16, v17);
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_51;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    uint64_t v32 = "nw_array_remove_object";
    BOOL v20 = "%{public}s called with null array";
LABEL_50:
    _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
LABEL_51:
    if (!v7) {
      return 0LL;
    }
    goto LABEL_10;
  }

  if (!a2)
  {
    __nwlog_obj(a1, 0LL);
    *(_DWORD *)addrinfo buf = 136446210;
    uint64_t v32 = "nw_array_remove_object";
    BOOL v7 = (void *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v29 = 0;
    BOOL v21 = __nwlog_fault(v7, &type, &v29);
    if (!(_DWORD)v21) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = (os_log_s *)__nwlog_obj(v21, v22);
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      uint64_t v32 = "nw_array_remove_object";
      BOOL v20 = "%{public}s called with null object";
      goto LABEL_50;
    }

    if (!v29)
    {
      os_log_type_t v18 = (os_log_s *)__nwlog_obj(v21, v22);
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      uint64_t v32 = "nw_array_remove_object";
      BOOL v20 = "%{public}s called with null object, backtrace limit exceeded";
      goto LABEL_50;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v18 = (os_log_s *)__nwlog_obj(backtrace_string, v27);
    os_log_type_t v19 = type;
    BOOL v28 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        uint64_t v32 = "nw_array_remove_object";
        os_log_type_t v33 = 2082;
        os_log_type_t v34 = backtrace_string;
        char v26 = "%{public}s called with null object, dumping backtrace:%{public}s";
        goto LABEL_40;
      }

      goto LABEL_41;
    }

    if (!v28) {
      goto LABEL_51;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    uint64_t v32 = "nw_array_remove_object";
    BOOL v20 = "%{public}s called with null object, no backtrace";
    goto LABEL_50;
  }

  id v4 = *(void *)(a1 + 16);
  id v3 = *(void *)(a1 + 24);
  if (v4 != v3)
  {
    while (*(void *)v4 != a2)
    {
      v4 += 8LL;
      if (v4 == v3)
      {
        id v4 = *(void *)(a1 + 24);
        break;
      }
    }
  }

  if (v4 == v3) {
    return 0LL;
  }
  if (!atomic_load((unsigned __int8 *)(a1 + 40)))
  {
    uint64_t v9 = v4 + 8;
    BOOL v10 = *(void *)(a1 + 24);
    if (v4 + 8 == v10)
    {
      if (v9 == v4)
      {
LABEL_23:
        *(void *)(a1 + 24) = v4;
        return 1LL;
      }
    }

    else
    {
      do
      {
        if (*(void *)v4) {
          os_release(*(void **)v4);
        }
        os_log_type_t v11 = v4 + 8;
        *(void *)id v4 = *(void *)(v4 + 8);
        *(void *)(v4 + 8) = 0LL;
        os_log_type_t v12 = v4 + 16;
        v4 += 8LL;
      }

      while (v12 != v10);
      uint64_t v9 = *(void *)(a1 + 24);
      id v4 = v11;
      if (v9 == v11) {
        goto LABEL_23;
      }
    }

    __int16 v13 = v9;
    do
    {
      os_log_type_t v15 = *(void **)(v13 - 8);
      v13 -= 8LL;
      id v14 = v15;
      if (v15) {
        os_release(v14);
      }
      *(void *)(v9 - 8) = 0LL;
      uint64_t v9 = v13;
    }

    while (v13 != v4);
    goto LABEL_23;
  }

  id v6 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v6);
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446210;
  uint64_t v32 = "nw_array_remove_object";
  BOOL v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
LABEL_10:
    free(v7);
    return 0LL;
  }

  __break(1u);
  return result;
}

    if (!v25)
    {
      id v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)addrinfo buf = v24;
      BOOL v28 = (const char *)v5;
      BOOL v16 = "%{public}s called with null array, backtrace limit exceeded";
      goto LABEL_60;
    }

    os_log_type_t v19 = (const char *)v5;
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v21 = os_log_type_enabled(v14, type);
    if (backtrace_string)
    {
      if (!v21) {
        goto LABEL_50;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v28 = v19;
      os_log_type_t v29 = 2082;
      __int16 v30 = backtrace_string;
      os_log_type_t v22 = "%{public}s called with null array, dumping backtrace:%{public}s";
      goto LABEL_49;
    }

    if (v21)
    {
      *(_DWORD *)addrinfo buf = v24;
      BOOL v28 = v19;
      BOOL v16 = "%{public}s called with null array, no backtrace";
LABEL_60:
      _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
      goto LABEL_61;
    }

    goto LABEL_61;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v28 = "nw_array_remove_objects";
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_array_remove_objects";
      BOOL v16 = "%{public}s called with null remove_block";
      goto LABEL_60;
    }

    if (!v25)
    {
      id v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_array_remove_objects";
      BOOL v16 = "%{public}s called with null remove_block, backtrace limit exceeded";
      goto LABEL_60;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v23 = os_log_type_enabled(v14, type);
    if (backtrace_string)
    {
      if (!v23) {
        goto LABEL_50;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v28 = "nw_array_remove_objects";
      os_log_type_t v29 = 2082;
      __int16 v30 = backtrace_string;
      os_log_type_t v22 = "%{public}s called with null remove_block, dumping backtrace:%{public}s";
LABEL_49:
      _os_log_impl(&dword_181A5C000, v14, v15, v22, buf, 0x16u);
LABEL_50:
      free(backtrace_string);
      if (!v13) {
        return;
      }
LABEL_62:
      free(v13);
      return;
    }

    if (v23)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_array_remove_objects";
      BOOL v16 = "%{public}s called with null remove_block, no backtrace";
      goto LABEL_60;
    }

        free(v14);
        goto LABEL_42;
      }

      if (v24)
      {
        *(_DWORD *)string = 136446210;
        *(void *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address), no backtrace",  (uint8_t *)string,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v26 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)string = 136446210;
        *(void *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl( &dword_181A5C000,  v15,  v26,  "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address), backtrace limit exceeded",  (uint8_t *)string,  0xCu);
      }
    }

        goto LABEL_42;
      }

      if (!v27)
      {
        __nwlog_obj();
        __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          __int16 v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v13,  v25,  "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_quic_serialized_options)), backt race limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          __int16 v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_quic_serialized_options)), no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v23)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        __int16 v30 = "nw_quic_stream_deserialize_options";
        char v31 = 2082;
        uint64_t v32 = (uint64_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_quic_serialized_options)), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }

    goto LABEL_42;
  }

  id v6 = calloc(1uLL, 0x20uLL);
  if (v6)
  {
LABEL_4:
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
    }
    options = nw_protocol_create_options((void *)nw_protocol_copy_quic_connection_definition::quic_definition);
    os_log_type_t v8 = (void *)v6[2];
    v6[2] = options;

    v26[0] = MEMORY[0x1895F87A8];
    v26[1] = 3221225472LL;
    v26[2] = ___ZL34nw_quic_stream_deserialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPKvm_block_invoke;
    v26[3] = &__block_descriptor_56_e9_B16__0_v8l;
    v26[4] = a2;
    v26[5] = a2;
    v26[6] = a3;
    nw_protocol_options_access_handle(options, v26);
    uint64_t v9 = v6[3] & 0xFE | *(_BYTE *)(a2 + 17) & 1;
    *((_BYTE *)v6 + 24) = v9;
    *((_BYTE *)v6 + 24) = *(_BYTE *)(a2 + 17) & 2 | v9 & 0xFD;
LABEL_7:

    return (BOOL)v6;
  }

  __nwlog_obj();
  os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  __int16 v30 = "strict_calloc";
  char v31 = 2048;
  uint64_t v32 = 1LL;
  os_log_type_t v33 = 2048;
  os_log_type_t v34 = 32LL;
  os_log_type_t v18 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v18);
  if (!result)
  {
    free(v18);
    goto LABEL_4;
  }

  __break(1u);
  return result;
}

    free(v14);
    goto LABEL_42;
  }

LABEL_5:
  v27[0] = MEMORY[0x1895F87A8];
  v27[1] = 3221225472LL;
  v27[2] = __nw_qpod_setup_secrets_block_invoke;
  v27[3] = &unk_189BC1058;
  os_log_type_t v29 = a3;
  BOOL v28 = v9;
  __int16 v30 = a4;
  os_log_type_t v11 = nw_protocol_options_access_handle(v7, v27);

LABEL_6:
  return v11;
}
    }
  }

  else
  {
    os_unfair_lock_unlock(v5);
    if (!nw_parameters_get_logging_disabled(*(void *)&v3[10]._os_unfair_lock_opaque))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      id v6 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        char v26 = v3[48]._os_unfair_lock_opaque;
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_start";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v26;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] The browser has already been started, ignoring nw_browser_start().",  buf,  0x12u);
      }

      goto LABEL_41;
    }
  }

    if (v16) {
      free(v16);
    }
    goto LABEL_43;
  }

  if (!a3)
  {
LABEL_43:
    mutable_copy = 0LL;
    goto LABEL_44;
  }

  BOOL v7 = nw_browser_copy_new_result_locked(v5, a2);
  os_log_type_t v8 = v7;
  if (v7)
  {
    mutable_copy = (NWConcrete_nw_browse_result *)v7;
LABEL_20:

LABEL_44:
    return (BOOL)mutable_copy;
  }

  BOOL v10 = nw_browser_copy_old_result_locked(v6, a2);
  if (!v10)
  {
    __nwlog_obj();
    os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446210;
    char v31 = "nw_browser_copy_result_to_modify_locked";
    BOOL v23 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v23);
    if (result) {
      goto LABEL_45;
    }
    free(v23);
  }

  mutable_copy = nw_browse_result_create_mutable_copy(v10);
  if (mutable_copy)
  {
LABEL_7:
    if (!nw_parameters_get_logging_disabled(*((void *)v6 + 5)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      os_log_type_t v11 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v12 = *((_DWORD *)v6 + 48);
        *(_DWORD *)addrinfo buf = 136446722;
        char v31 = "nw_browser_copy_result_to_modify_locked";
        uint64_t v32 = 1024;
        *(_DWORD *)os_log_type_t v33 = v12;
        v33[2] = 2112;
        *(void *)&v33[3] = mutable_copy;
        _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] copy %@", buf, 0x1Cu);
      }
    }

    nw_array_append(*((void *)v6 + 18), mutable_copy);
    if (!nw_parameters_get_logging_disabled(*((void *)v6 + 5)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      __int16 v13 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        id v14 = *((_DWORD *)v6 + 48);
        *(_DWORD *)addrinfo buf = 136446722;
        char v31 = "nw_browser_copy_result_to_modify_locked";
        uint64_t v32 = 1024;
        *(_DWORD *)os_log_type_t v33 = v14;
        v33[2] = 2112;
        *(void *)&v33[3] = mutable_copy;
        _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] add %@ to new_results", buf, 0x1Cu);
      }
    }

    goto LABEL_20;
  }

  __nwlog_obj();
  os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446210;
  char v31 = "nw_browser_copy_result_to_modify_locked";
  char v26 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
    goto LABEL_7;
  }

    free(v8);
    goto LABEL_42;
  }

  id v5 = malloc(txt_len);
  if (v5)
  {
LABEL_6:
    *((void *)v4 + 1) = v5;
    memcpy(v5, v3, txt_len);
    if (txt_len - 8901 >= 0xFFFFFFFFFFFFDD3CLL)
    {
      os_log_type_t v11 = *v3;
      if (txt_len == 1 && !*v3 || v11 + 1 == txt_len)
      {
        id v6 = 1;
      }

      else
      {
        BOOL v16 = &v3[txt_len];
        os_log_type_t v17 = (unint64_t)&v3[v11 + 1];
        do
        {
          id v6 = v17 <= (unint64_t)v16;
          os_log_type_t v18 = v3;
          id v3 = (const uint8_t *)v17;
          os_log_type_t v19 = v18 + 1;
          BOOL v20 = (const uint8_t *)memchr(v18 + 1, 61, v11);
          BOOL v21 = &v18[v11];
          if (v20) {
            BOOL v21 = v20;
          }
          if (v19 < v21)
          {
            os_log_type_t v22 = &v21[~(unint64_t)v18];
            while (*v19 - 127 > 0xFFFFFFA0)
            {
              ++v19;
              if (!--v22) {
                goto LABEL_25;
              }
            }

            goto LABEL_7;
          }

    free(backtrace_string);
    goto LABEL_54;
  }

  if ((*((_BYTE *)v5 + 36) & 1) == 0)
  {
    __nwlog_obj();
    BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v34 = "nw_txt_record_apply_internal_locked";
      _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s txt_record is not of type dictionary",  buf,  0xCu);
    }

LABEL_56:
    os_log_type_t v15 = 0LL;
    goto LABEL_17;
  }

  os_log_type_t v8 = *((void *)v5 + 2);
  if (v8 < 2)
  {
    os_log_type_t v15 = 1LL;
  }

  else
  {
    uint64_t v9 = *((void *)v5 + 1);
    BOOL v10 = (unsigned __int8 *)(v9 + v8);
    do
    {
      os_log_type_t v11 = *(unsigned __int8 *)v9;
      os_log_type_t v12 = memchr((const void *)(v9 + 1), 61, *(unsigned __int8 *)v9);
      if (v12) {
        __int16 v13 = (uint64_t)v12;
      }
      else {
        __int16 v13 = v9 + v11 + 1;
      }
      if (v13 + ~v9 != v11)
      {
        id v14 = v13 - v9;
        if (v14 != v11 && v14 >= v11) {
          __assert_rtn("nw_txt_record_get_key_value_result", "txt_record.cpp", 758, "false");
        }
      }

      os_log_type_t v15 = v6[2](v6, v9 + 1);
      if (!(_DWORD)v15) {
        break;
      }
      v9 += *(unsigned __int8 *)v9 + 1LL;
    }

    while (v9 < (unint64_t)v10);
  }

  if (v13) {
LABEL_42:
  }
    free(v13);
LABEL_43:
  os_log_type_t v29 = 0;
LABEL_44:

  LOBYTE(v31) = v29;
  return v31;
}

    free(v18);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_74;
  }

  if ((a2 & 0xFC) == 0)
  {
    *((_DWORD *)v3 + 33) = a2;
    goto LABEL_6;
  }

  __nwlog_obj();
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446466;
  os_log_type_t v33 = "nw_activity_set_reporting_strategy";
  os_log_type_t v34 = 2082;
  BOOL v35 = "Invalid reporting strategy";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  __int16 v30 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v14 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v33 = "nw_activity_set_reporting_strategy";
      os_log_type_t v34 = 2082;
      BOOL v35 = "Invalid reporting strategy";
      _os_log_impl(&dword_181A5C000, v7, v14, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
    }

    goto LABEL_72;
  }

  if (!v30)
  {
    __nwlog_obj();
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v29 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v33 = "nw_activity_set_reporting_strategy";
      os_log_type_t v34 = 2082;
      BOOL v35 = "Invalid reporting strategy";
      _os_log_impl( &dword_181A5C000,  v7,  v29,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
    }

    goto LABEL_72;
  }

  BOOL v23 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v24 = type;
  os_log_type_t v25 = os_log_type_enabled(v7, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v33 = "nw_activity_set_reporting_strategy";
      os_log_type_t v34 = 2082;
      BOOL v35 = "Invalid reporting strategy";
      _os_log_impl( &dword_181A5C000,  v7,  v24,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
    }

    goto LABEL_72;
  }

  if (v25)
  {
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v33 = "nw_activity_set_reporting_strategy";
    os_log_type_t v34 = 2082;
    BOOL v35 = "Invalid reporting strategy";
    __int16 v36 = 2082;
    os_log_type_t v37 = v23;
    _os_log_impl( &dword_181A5C000,  v7,  v24,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
  }

  free(v23);
  if (v6) {
    goto LABEL_74;
  }
LABEL_6:
}

        free(v6);
        goto LABEL_42;
      }

      if (v12)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v20 = "nw_activity_submit_metrics_block_invoke";
        BOOL v21 = 2082;
        os_log_type_t v22 = "Cannot submit metrics before activation";
        uint64_t v9 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace";
        goto LABEL_38;
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v20 = "nw_activity_submit_metrics_block_invoke";
        BOOL v21 = 2082;
        os_log_type_t v22 = "Cannot submit metrics before activation";
        uint64_t v9 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded";
        goto LABEL_38;
      }
    }

LABEL_42:
      if (v11) {
        free(v11);
      }
      goto LABEL_5;
    }

    if (!v23)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null handle2, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_41;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null handle2, no backtrace", buf, 0xCu);
      }

      goto LABEL_41;
    }

    if (v20)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      char v26 = "nw_webtransport_compare_stream_metadata";
      os_log_type_t v27 = 2082;
      BOOL v28 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null handle2, dumping backtrace:%{public}s",  buf,  0x16u);
    }

        nw_http3_fail_all_streams((uint64_t)v19, 259LL);
        goto LABEL_51;
    }

    __int16 v30 = *((void *)handle + 4);
    if (v30)
    {
      char v31 = *(void *)(v30 + 24);
      if (v31)
      {
        uint64_t v32 = *(uint64_t (**)(void))(v31 + 224);
        if (v32)
        {
          os_log_type_t v33 = (unsigned __int8 *)v32();
          nw_array_apply(v33, (uint64_t)&__block_literal_global_66);
          if (v33) {
            os_release(v33);
          }
        }
      }
    }

    os_log_type_t v34 = *((void *)handle + 3);
    if (v34)
    {
      BOOL v35 = *(void (**)(char *, void *))(v34 + 32);
      if (v35)
      {
        v35(handle, v19);
        goto LABEL_51;
      }
    }

    __nwlog_obj();
    v46 = (const char *)*((void *)handle + 2);
    if (!v46) {
      v46 = "invalid";
    }
    *(_DWORD *)addrinfo buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v46;
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    v73 = OS_LOG_TYPE_ERROR;
    v72 = 0;
    if (__nwlog_fault(v47, &v73, &v72))
    {
      if (v73 == OS_LOG_TYPE_FAULT)
      {
        BOOL v48 = (os_log_s *)__nwlog_obj();
        id v49 = v73;
        if (!os_log_type_enabled(v48, v73)) {
          goto LABEL_109;
        }
        os_log_type_t v50 = (const char *)*((void *)handle + 2);
        if (!v50) {
          os_log_type_t v50 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v50;
        BOOL v51 = "%{public}s protocol %{public}s has invalid disconnect callback";
        goto LABEL_108;
      }

      if (!v72)
      {
        BOOL v48 = (os_log_s *)__nwlog_obj();
        id v49 = v73;
        if (!os_log_type_enabled(v48, v73)) {
          goto LABEL_109;
        }
        os_log_type_t v55 = (const char *)*((void *)handle + 2);
        if (!v55) {
          os_log_type_t v55 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v55;
        BOOL v51 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
        goto LABEL_108;
      }

      os_log_type_t v52 = (char *)__nw_create_backtrace_string();
      BOOL v48 = (os_log_s *)__nwlog_obj();
      id v49 = v73;
      id v53 = os_log_type_enabled(v48, v73);
      if (v52)
      {
        if (v53)
        {
          v54 = (const char *)*((void *)handle + 2);
          if (!v54) {
            v54 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v54;
          *(_WORD *)&buf[22] = 2082;
          BOOL v75 = v52;
          _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v52);
        goto LABEL_109;
      }

      if (v53)
      {
        os_log_type_t v56 = (const char *)*((void *)handle + 2);
        if (!v56) {
          os_log_type_t v56 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_type_received";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v56;
        BOOL v51 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
LABEL_108:
        _os_log_impl(&dword_181A5C000, v48, v49, v51, buf, 0x16u);
      }
    }

      free(v21);
      if (!v12) {
        return;
      }
LABEL_57:
      free(v12);
      return;
    }

    __int16 v13 = (os_log_s *)__nwlog_obj();
    id v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_56;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v28 = "nw_http3_stream_replace_protocol_instance";
    os_log_type_t v15 = "%{public}s called with null parameters";
LABEL_55:
    _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
    goto LABEL_56;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v28 = "nw_http3_stream_replace_protocol_instance";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http3_stream_replace_protocol_instance";
      os_log_type_t v15 = "%{public}s called with null new_instance";
      goto LABEL_55;
    }

    if (!v25)
    {
      __int16 v13 = (os_log_s *)__nwlog_obj();
      id v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http3_stream_replace_protocol_instance";
      os_log_type_t v15 = "%{public}s called with null new_instance, backtrace limit exceeded";
      goto LABEL_55;
    }

    BOOL v21 = (char *)__nw_create_backtrace_string();
    __int16 v13 = (os_log_s *)__nwlog_obj();
    id v14 = type;
    os_log_type_t v24 = os_log_type_enabled(v13, type);
    if (!v21)
    {
      if (!v24) {
        goto LABEL_56;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http3_stream_replace_protocol_instance";
      os_log_type_t v15 = "%{public}s called with null new_instance, no backtrace";
      goto LABEL_55;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v28 = "nw_http3_stream_replace_protocol_instance";
      os_log_type_t v29 = 2082;
      __int16 v30 = v21;
      BOOL v23 = "%{public}s called with null new_instance, dumping backtrace:%{public}s";
      goto LABEL_40;
    }

    goto LABEL_41;
  }

  os_log_type_t v8 = nw_parameters_copy_protocol_options_legacy(a2, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    if ((*(_WORD *)(a1 + 736) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v16 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v17 = *(_DWORD *)(*(void *)(a1 + 336) + 1280LL);
          os_log_type_t v18 = *(void *)(a1 + 240);
          *(_DWORD *)addrinfo buf = 136448514;
          BOOL v28 = "nw_http3_stream_replace_protocol_instance";
          os_log_type_t v29 = 2082;
          __int16 v30 = (char *)(a1 + 636);
          char v31 = 2080;
          uint64_t v32 = " ";
          os_log_type_t v33 = 1024;
          os_log_type_t v34 = v17;
          BOOL v35 = 2048;
          __int16 v36 = v18;
          os_log_type_t v37 = 2048;
          uint64_t v38 = a1;
          os_log_type_t v39 = 2048;
          os_log_type_t v40 = a4;
          BOOL v41 = 2048;
          os_log_type_t v42 = a3;
          char v43 = 2048;
          v44 = a2;
          os_log_type_t v45 = 2048;
          v46 = v9;
          _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> http3_stream protocol %p, set protocol instance to %p instead of %p in pa rameters %p options %p",  buf,  0x62u);
        }
      }
    }

    if (nw_protocol_copy_http3_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72547);
    }
    BOOL v10 = (id)nw_protocol_copy_http3_definition_http3_definition;
    os_log_type_t v11 = v9;
    *((void *)v11 + 2) = a4;

    if (v10) {
      os_release(v10);
    }
    os_release(v11);
  }

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_42;
  }

  id v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (a3)
    {
      if ((*(_WORD *)(v3 + 736) & 0x10) != 0)
      {
        id v5 = *(void *)(v3 + 96);
        if (v5 && (id v6 = *(void *)(v5 + 24)) != 0 && (v7 = *(void (**)(void))(v6 + 248)) != 0LL)
        {
          v7();
        }

        else
        {
          os_log_type_t v12 = a3[1] & 0xFFFFFFFA;
          a3[1] = v12 | 1;
          __int16 v13 = *(_DWORD *)(v3 + 628);
          if (!v13) {
            __int16 v13 = -1;
          }
          *a3 = v13;
          a3[1] = v12 | 3;
        }
      }

      else
      {
        id v4 = a3[1] & 0xFFFFFFF8;
        *a3 = -1;
        a3[1] = v4;
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v21 = "nw_protocol_http3_stream_get_message_properties";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v18 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    BOOL v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v21 = "nw_protocol_http3_stream_get_message_properties";
    os_log_type_t v11 = "%{public}s called with null http3_stream";
    goto LABEL_41;
  }

  if (!v18)
  {
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    BOOL v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v21 = "nw_protocol_http3_stream_get_message_properties";
    os_log_type_t v11 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    goto LABEL_41;
  }

  BOOL v16 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = (os_log_s *)__nwlog_obj();
  BOOL v10 = type;
  os_log_type_t v17 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v21 = "nw_protocol_http3_stream_get_message_properties";
    os_log_type_t v11 = "%{public}s called with null http3_stream, no backtrace";
    goto LABEL_41;
  }

  if (v17)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v21 = "nw_protocol_http3_stream_get_message_properties";
    os_log_type_t v22 = 2082;
    BOOL v23 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_43;
  }
}

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_42;
  }

  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    identifier = a1[2].identifier;
    id v4 = *(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16);
    if (identifier)
    {
      if ((*(_WORD *)&a1[6].flow_id[13] & 0x10) == 0)
      {
        a1[6].flow_id[15] = BYTE2(v4);
        *(_WORD *)&a1[6].flow_id[13] = v4 | 0x10;
        id v5 = *(void *)&identifier->name[24];
        if (v5)
        {
          id v6 = *(void (**)(void))(v5 + 184);
          if (v6) {
            v6();
          }
        }
      }
    }

    else if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v7 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v19 = "nw_socket_input_finished";
        BOOL v20 = 2082;
        BOOL v21 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v19 = "nw_socket_input_finished";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    BOOL v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v19 = "nw_socket_input_finished";
    os_log_type_t v11 = "%{public}s called with null socket_handler";
    goto LABEL_41;
  }

  if (!v16)
  {
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    BOOL v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v19 = "nw_socket_input_finished";
    os_log_type_t v11 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_41;
  }

  id v14 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = (os_log_s *)__nwlog_obj();
  BOOL v10 = type;
  os_log_type_t v15 = os_log_type_enabled(v9, type);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v19 = "nw_socket_input_finished";
    os_log_type_t v11 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_41;
  }

  if (v15)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v19 = "nw_socket_input_finished";
    BOOL v20 = 2082;
    BOOL v21 = v14;
    _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v8) {
    goto LABEL_43;
  }
}

    _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
    goto LABEL_42;
  }

  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    id v3 = *(_WORD *)&a1[6].flow_id[13];
    *(_WORD *)&a1[6].flow_id[13] |= 0x40u;
    if ((v3 & 8) != 0 || *(void *)&a1[5].flow_id[8])
    {
      if (v3 < 0)
      {
        nw_socket_update_output_source((char *)&a1[1].output_handler);
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v4 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          BOOL v16 = "nw_socket_disconnect";
          os_log_type_t v17 = 2082;
          os_log_type_t v18 = (char *)&a1[6].identifier + 4;
          _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s Outstanding bytes to send, deferring socket disconnect",  buf,  0x16u);
        }

        nw_socket_update_output_source((char *)&a1[1].output_handler);
      }
    }

    else
    {
      nw_socket_internal_disconnect((uint64_t)&a1[1].output_handler);
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v16 = "nw_socket_disconnect";
  id v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  __int16 v13 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v6 = (os_log_s *)__nwlog_obj();
    BOOL v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v16 = "nw_socket_disconnect";
    os_log_type_t v8 = "%{public}s called with null socket_handler";
    goto LABEL_41;
  }

  if (!v13)
  {
    id v6 = (os_log_s *)__nwlog_obj();
    BOOL v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v16 = "nw_socket_disconnect";
    os_log_type_t v8 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_41;
  }

  os_log_type_t v11 = (char *)__nw_create_backtrace_string();
  id v6 = (os_log_s *)__nwlog_obj();
  BOOL v7 = type;
  os_log_type_t v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_42;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v16 = "nw_socket_disconnect";
    os_log_type_t v8 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_41;
  }

  if (v12)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v16 = "nw_socket_disconnect";
    os_log_type_t v17 = 2082;
    os_log_type_t v18 = v11;
    _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v11);
  if (v5) {
    goto LABEL_43;
  }
}

  if (v25) {
    free(v25);
  }
LABEL_43:
  _Block_object_dispose(v74, 8);
  if ((v77 & 1) != 0 && v76) {
    os_release(v76);
  }
  _Block_object_dispose(&v66, 8);
  if (v20)
  {
    if (v7) {
      nw_queue_cancel_source(v7, v35);
    }
    *(_DWORD *)(a1 + 184) = v11;
    if ((v4 & 0x400) == 0) {
      goto LABEL_82;
    }
    __int16 v36 = *(_DWORD *)(a1 + 192);
    if (!a2) {
      __int16 v36 = 0;
    }
    LODWORD(v60[0]) = v36;
    if (!setsockopt(*(_DWORD *)(a1 + 172), 6, 517, v60, 4u))
    {
LABEL_82:
      if ((v4 & 0x200) == 0) {
        return 1LL;
      }
      BOOL v48 = *(_DWORD *)(a1 + 196);
      if (!a2) {
        BOOL v48 = 0;
      }
      LODWORD(v60[0]) = v48;
      if (!setsockopt(*(_DWORD *)(a1 + 172), 6, 519, v60, 4u)) {
        return 1LL;
      }
      id v49 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v50 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_log_type_t v74 = 136446722;
        *(void *)&v74[4] = "nw_socket_set_adaptive_write_timeout";
        *(_WORD *)&v74[12] = 2080;
        *(void *)&v74[14] = a1 + 308;
        *(_WORD *)&v74[22] = 1024;
        *(_DWORD *)&v74[24] = v49;
        _os_log_impl( &dword_181A5C000,  v50,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d",  v74,  0x1Cu);
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v51 = (os_log_s *)gLogObj;
      if (v49 == 22)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_log_type_t v74 = 136446466;
          *(void *)&v74[4] = "nw_socket_set_adaptive_write_timeout";
          *(_WORD *)&v74[12] = 1024;
          *(_DWORD *)&v74[14] = 22;
          _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d",  v74,  0x12u);
        }

        return 1LL;
      }

      *(_DWORD *)os_log_type_t v74 = 136446466;
      *(void *)&v74[4] = "nw_socket_set_adaptive_write_timeout";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = v49;
      os_log_type_t v52 = (char *)_os_log_send_and_compose_impl();
      v61[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v66) = 0;
      if (__nwlog_fault(v52, v61, &v66))
      {
        if (v61[0] == OS_LOG_TYPE_FAULT)
        {
          id v53 = (os_log_s *)__nwlog_obj();
          v54 = v61[0];
          if (!os_log_type_enabled(v53, v61[0])) {
            goto LABEL_107;
          }
          *(_DWORD *)os_log_type_t v74 = 136446466;
          *(void *)&v74[4] = "nw_socket_set_adaptive_write_timeout";
          *(_WORD *)&v74[12] = 1024;
          *(_DWORD *)&v74[14] = v49;
          os_log_type_t v55 = "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d";
          goto LABEL_106;
        }

        if (!(_BYTE)v66)
        {
          id v53 = (os_log_s *)__nwlog_obj();
          v54 = v61[0];
          if (!os_log_type_enabled(v53, v61[0])) {
            goto LABEL_107;
          }
          *(_DWORD *)os_log_type_t v74 = 136446466;
          *(void *)&v74[4] = "nw_socket_set_adaptive_write_timeout";
          *(_WORD *)&v74[12] = 1024;
          *(_DWORD *)&v74[14] = v49;
          os_log_type_t v55 = "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_106;
        }

        os_log_type_t v56 = (char *)__nw_create_backtrace_string();
        id v53 = (os_log_s *)__nwlog_obj();
        v54 = v61[0];
        os_log_type_t v57 = os_log_type_enabled(v53, v61[0]);
        if (v56)
        {
          if (v57)
          {
            *(_DWORD *)os_log_type_t v74 = 136446722;
            *(void *)&v74[4] = "nw_socket_set_adaptive_write_timeout";
            *(_WORD *)&v74[12] = 1024;
            *(_DWORD *)&v74[14] = v49;
            *(_WORD *)&v74[18] = 2082;
            *(void *)&v74[20] = v56;
            _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d, dumping backtrace:%{public}s",  v74,  0x1Cu);
          }

          free(v56);
          goto LABEL_107;
        }

        if (v57)
        {
          *(_DWORD *)os_log_type_t v74 = 136446466;
          *(void *)&v74[4] = "nw_socket_set_adaptive_write_timeout";
          *(_WORD *)&v74[12] = 1024;
          *(_DWORD *)&v74[14] = v49;
          os_log_type_t v55 = "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d, no backtrace";
LABEL_106:
          _os_log_impl(&dword_181A5C000, v53, v54, v55, v74, 0x12u);
        }
      }

      id v6 = 1;
      os_log_type_t v99 = v8;
      if ((v4 & 0x800) == 0) {
        goto LABEL_117;
      }
      goto LABEL_42;
    }

    if ((*v2 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v7 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v1 + 308;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s Socket received CONNRESET event",  buf,  0x16u);
      }
    }

    if (_nw_signposts_once == -1)
    {
      if (!_nw_signposts_enabled) {
        goto LABEL_19;
      }
    }

    else
    {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_18_64095);
      if (!_nw_signposts_enabled) {
        goto LABEL_19;
      }
    }

  if (v11) {
LABEL_42:
  }
    free(v11);
  return 0LL;
}

    free(v9);
    goto LABEL_42;
  }

  arc4random_buf((void *)(globals_for_path + 16), 8uLL);
  if (change_fdguard_np())
  {
    id v6 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    close(*(_DWORD *)(globals_for_path + 136));
    *(_DWORD *)(globals_for_path + 136) = -1;
    os_unfair_lock_unlock(v3);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v7 = (id)gLogObj;
    os_log_type_t v8 = *(_DWORD *)(globals_for_path + 136);
    *(_DWORD *)addrinfo buf = 136446722;
    __int16 v36 = "nw_path_shared_necp_observer_fd";
    os_log_type_t v37 = 1024;
    uint64_t v38 = v8;
    os_log_type_t v39 = 1024;
    v40[0] = v6;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (__nwlog_fault(v9, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          os_log_type_t v12 = *(_DWORD *)(globals_for_path + 136);
          *(_DWORD *)addrinfo buf = 136446722;
          __int16 v36 = "nw_path_shared_necp_observer_fd";
          os_log_type_t v37 = 1024;
          uint64_t v38 = v12;
          os_log_type_t v39 = 1024;
          v40[0] = v6;
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s Failed to guard necp observer fd %d %{darwin.errno}d",  buf,  0x18u);
        }
      }

      else if (v33)
      {
        os_log_type_t v17 = __nw_create_backtrace_string();
        if (v17)
        {
          os_log_type_t v18 = (char *)v17;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v19 = (os_log_s *)(id)gLogObj;
          BOOL v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            BOOL v21 = *(_DWORD *)(globals_for_path + 136);
            *(_DWORD *)addrinfo buf = 136446978;
            __int16 v36 = "nw_path_shared_necp_observer_fd";
            os_log_type_t v37 = 1024;
            uint64_t v38 = v21;
            os_log_type_t v39 = 1024;
            v40[0] = v6;
            LOWORD(v40[1]) = 2082;
            *(void *)((char *)&v40[1] + 2) = v18;
            _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s Failed to guard necp observer fd %d %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x22u);
          }

          free(v18);
          if (!v9) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }

        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v10, type))
        {
          __int16 v30 = *(_DWORD *)(globals_for_path + 136);
          *(_DWORD *)addrinfo buf = 136446722;
          __int16 v36 = "nw_path_shared_necp_observer_fd";
          os_log_type_t v37 = 1024;
          uint64_t v38 = v30;
          os_log_type_t v39 = 1024;
          v40[0] = v6;
          _os_log_impl( &dword_181A5C000,  v10,  v29,  "%{public}s Failed to guard necp observer fd %d %{darwin.errno}d, no backtrace",  buf,  0x18u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (os_log_s *)(id)gLogObj;
        char v26 = type;
        if (os_log_type_enabled(v10, type))
        {
          os_log_type_t v27 = *(_DWORD *)(globals_for_path + 136);
          *(_DWORD *)addrinfo buf = 136446722;
          __int16 v36 = "nw_path_shared_necp_observer_fd";
          os_log_type_t v37 = 1024;
          uint64_t v38 = v27;
          os_log_type_t v39 = 1024;
          v40[0] = v6;
          _os_log_impl( &dword_181A5C000,  v10,  v26,  "%{public}s Failed to guard necp observer fd %d %{darwin.errno}d, backtrace limit exceeded",  buf,  0x18u);
        }
      }
    }

    goto LABEL_40;
  }

  *(_BYTE *)(globals_for_path + 140) |= 4u;
  id v4 = *(unsigned int *)(globals_for_path + 136);
LABEL_2:
  os_unfair_lock_unlock(v3);
LABEL_43:

  return v4;
}

    free(v6);
    goto LABEL_42;
  }

  id v4 = [v2 lengthOfBytesUsingEncoding:4];
  id v5 = v4 + 1;
  if (v4 == -1)
  {
    __nwlog_obj();
    BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446210;
    uint64_t v32 = "strict_malloc";
    LODWORD(v28) = 12;
    os_log_type_t v27 = buf;
    os_log_type_t v24 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v24);
    if (result) {
      goto LABEL_51;
    }
    free(v24);
  }

  id v6 = (char *)malloc(v5);
  if (v6) {
    goto LABEL_4;
  }
  __nwlog_obj();
  os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446466;
  uint64_t v32 = "strict_malloc";
  os_log_type_t v33 = 2048;
  os_log_type_t v34 = v5;
  LODWORD(v28) = 22;
  os_log_type_t v27 = buf;
  char v26 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
LABEL_4:
    if (objc_msgSend(v3, "getCString:maxLength:encoding:", v6, v5, 4, v27, v28))
    {
LABEL_43:

      return (BOOL)v6;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v7 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    uint64_t v32 = "nw_path_copy_description";
    os_log_type_t v8 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v29 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        BOOL v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          uint64_t v32 = "nw_path_copy_description";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s [desc getCString:maxLength:encoding:] failed", buf, 0xCu);
        }
      }

      else if (v29)
      {
        os_log_type_t v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        os_log_type_t v19 = os_log_type_enabled(v9, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            uint64_t v32 = "nw_path_copy_description";
            os_log_type_t v33 = 2082;
            os_log_type_t v34 = (size_t)v17;
            _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s [desc getCString:maxLength:encoding:] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v17);
          if (!v8)
          {
LABEL_12:
            if (!v6) {
              goto LABEL_43;
            }
            goto LABEL_41;
          }

    free(v16);
    if (!v10) {
      return 0LL;
    }
    goto LABEL_61;
  }

  os_log_type_t v8 = handle[4];
  if (v8) {
    return nw_protocol_get_input_frames(v8, (uint64_t)handle, a3, a4, a5, (uint64_t)a6);
  }
  return 0LL;
}

        goto LABEL_42;
      }

      os_log_type_t v12 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v7, type);
      if (!v12)
      {
        if (!v20) {
          goto LABEL_41;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v33 = "nw_endpoint_create_with_peer_name";
        os_log_type_t v34 = 1024;
        BOOL v35 = v2;
        uint64_t v9 = "%{public}s getpeername failed %{darwin.errno}d, no backtrace";
        BOOL v21 = (sockaddr *)buf;
        os_log_type_t v22 = v7;
        BOOL v23 = v19;
        goto LABEL_39;
      }

      if (v20)
      {
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v33 = "nw_endpoint_create_with_peer_name";
        os_log_type_t v34 = 1024;
        BOOL v35 = v2;
        __int16 v36 = 2082;
        v37[0] = v12;
        os_log_type_t v15 = "%{public}s getpeername failed %{darwin.errno}d, dumping backtrace:%{public}s";
        BOOL v16 = v7;
        os_log_type_t v17 = v19;
        os_log_type_t v18 = 28;
        goto LABEL_30;
      }

      goto LABEL_31;
    }

  uint64_t v38 = *(void *)(a2 + 8);
  os_log_type_t v37 = *(void *)(a2 + 16);
  os_log_type_t v39 = a3 - (v38 + v37 + 32);
  if (!v39) {
    goto LABEL_52;
  }
  os_log_type_t v40 = calloc(1uLL, v39);
  BOOL v41 = v40;
  if (v40)
  {
    *((void *)v6 + 2) = v40;
    if (v39 >= 2) {
      goto LABEL_44;
    }
LABEL_51:
    *BOOL v41 = 0;
    goto LABEL_52;
  }

  id v49 = v37;
  __nwlog_obj();
  os_log_type_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  id v53 = "strict_calloc";
  v54 = 2048;
  os_log_type_t v55 = 1LL;
  os_log_type_t v56 = 2048;
  os_log_type_t v57 = v39;
  v46 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v46);
  if (!result)
  {
    free(v46);
    *((void *)v6 + 2) = 0LL;
    __nwlog_obj();
    __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446210;
    id v53 = "_strict_strlcpy";
    BOOL v48 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v48);
    if (!result)
    {
      free(v48);
      os_log_type_t v37 = v49;
      if (v39 >= 2)
      {
LABEL_44:
        os_log_type_t v42 = (unsigned __int8 *)(a2 + v38 + v37 + 25);
        char v43 = v39;
        while (1)
        {
          v44 = *v42;
          *BOOL v41 = v44;
          if (!v44) {
            goto LABEL_52;
          }
          ++v41;
          ++v42;
          if (--v43 <= 1) {
            goto LABEL_51;
          }
        }
      }

      goto LABEL_51;
    }
  }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_response";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_metadata_set_trailer_fields_block_invoke;
    v24[3] = &unk_189BC6260;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_metadata_set_trailer_fields_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_metadata_set_trailer_fields";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_metadata_set_trailer_fields";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_metadata_set_trailer_fields";
      _os_log_impl(&dword_181A5C000, v12, v23, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_metadata_set_trailer_fields";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_metadata_set_trailer_fields";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_trailer_fields";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_method";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_path";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_endpoint";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_status";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_capsule_type";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_get_datagram_context_id";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_header_fields";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_transaction_metadata_set_end_time_block_invoke;
    v24[3] = &unk_189BC64E8;
    v24[5] = a2;
    os_log_type_t v8 = v5;
    v24[4] = v8;
    uint64_t v9 = (uint64_t)v8[4];
    if (v9) {
      __nw_http_transaction_metadata_set_end_time_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_transaction_metadata_set_end_time";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  char v26 = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (v26 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = v26;
    if (os_log_type_enabled(v12, v26))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_transaction_metadata_set_end_time";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = v26;
    if (os_log_type_enabled(v12, v26))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_transaction_metadata_set_end_time";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = v26;
  BOOL v21 = os_log_type_enabled(v12, v26);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_transaction_metadata_set_end_time";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_transaction_metadata_set_end_time";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_client_metadata_enumerate_transactions_block_invoke;
    v24[3] = &unk_189BC6110;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_client_metadata_enumerate_transactions_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_client_metadata_enumerate_transactions";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_client_metadata_enumerate_transactions";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_client", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_client_metadata_enumerate_transactions";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_client_metadata_enumerate_transactions";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_client_metadata_enumerate_transactions";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_client_metadata_set_initial_request_block_invoke;
    v24[3] = &unk_189BC6260;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_client_metadata_set_initial_request_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_client_metadata_set_initial_request";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_client_metadata_set_initial_request";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_client", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_client_metadata_set_initial_request";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_client_metadata_set_initial_request";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_client_metadata_set_initial_request";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_client_metadata_set_prevent_timeout_callback_block_invoke;
    v24[3] = &unk_189BC6110;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_client_metadata_set_prevent_timeout_callback_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_client", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_get_sec_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_transaction_metadata_set_event_handler_block_invoke;
    v24[3] = &unk_189BC6110;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_transaction_metadata_set_event_handler_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_transaction_metadata_set_event_handler";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_transaction_metadata_set_event_handler";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_transaction_metadata_set_event_handler";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_transaction_metadata_set_event_handler";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_transaction_metadata_set_event_handler";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_start_reason";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_transaction_metadata_set_connection_metadata_block_invoke;
    v24[3] = &unk_189BC6260;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_transaction_metadata_set_connection_metadata_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_transaction_metadata_set_connection_metadata";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_transaction_metadata_set_connection_metadata";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_transaction_metadata_set_connection_metadata";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_transaction_metadata_set_connection_metadata";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_transaction_metadata_set_connection_metadata";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1895F87A8];
    v25[1] = 3221225472LL;
    v25[2] = __nw_http_transaction_metadata_set_outbound_message_block_invoke;
    v25[3] = &unk_189BC6650;
    os_log_type_t v8 = v4;
    v25[4] = v8;
    uint64_t v9 = v5;
    v25[5] = v9;
    BOOL v10 = (uint64_t)v9[4];
    if (v10) {
      __nw_http_transaction_metadata_set_outbound_message_block_invoke((uint64_t)v25, v10);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v29 = "nw_http_transaction_metadata_set_outbound_message";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v27 = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (v27 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v16 = v27;
    if (os_log_type_enabled(v13, v27))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_http_transaction_metadata_set_outbound_message";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v26)
  {
    __nwlog_obj();
    __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = v27;
    if (os_log_type_enabled(v13, v27))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_http_transaction_metadata_set_outbound_message";
      _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  BOOL v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v21 = v27;
  os_log_type_t v22 = os_log_type_enabled(v13, v27);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_http_transaction_metadata_set_outbound_message";
      _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v22)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v29 = "nw_http_transaction_metadata_set_outbound_message";
    __int16 v30 = 2082;
    char v31 = v20;
    _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_43;
  }
LABEL_8:
}

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1895F87A8];
    v25[1] = 3221225472LL;
    v25[2] = __nw_http_transaction_metadata_set_inbound_message_block_invoke;
    v25[3] = &unk_189BC6650;
    os_log_type_t v8 = v4;
    v25[4] = v8;
    uint64_t v9 = v5;
    v25[5] = v9;
    BOOL v10 = (uint64_t)v9[4];
    if (v10) {
      __nw_http_transaction_metadata_set_inbound_message_block_invoke((uint64_t)v25, v10);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v29 = "nw_http_transaction_metadata_set_inbound_message";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v27 = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (v27 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v16 = v27;
    if (os_log_type_enabled(v13, v27))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_http_transaction_metadata_set_inbound_message";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v26)
  {
    __nwlog_obj();
    __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = v27;
    if (os_log_type_enabled(v13, v27))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_http_transaction_metadata_set_inbound_message";
      _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  BOOL v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v21 = v27;
  os_log_type_t v22 = os_log_type_enabled(v13, v27);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v29 = "nw_http_transaction_metadata_set_inbound_message";
      _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v22)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v29 = "nw_http_transaction_metadata_set_inbound_message";
    __int16 v30 = 2082;
    char v31 = v20;
    _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_43;
  }
LABEL_8:
}

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v3 = (id *)v1;
  id v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_transaction_metadata_mark_outbound_message_end_block_invoke;
    v22[3] = &unk_189BC6260;
    id v6 = v3;
    v22[4] = v6;
    BOOL v7 = (uint64_t)v6[4];
    if (v7) {
      __nw_http_transaction_metadata_mark_outbound_message_end_block_invoke((uint64_t)v22, v7);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v23)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  os_log_type_t v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v19)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
    os_log_type_t v27 = 2082;
    BOOL v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v3 = (id *)v1;
  id v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_transaction_metadata_mark_inbound_message_end_block_invoke;
    v22[3] = &unk_189BC6260;
    id v6 = v3;
    v22[4] = v6;
    BOOL v7 = (uint64_t)v6[4];
    if (v7) {
      __nw_http_transaction_metadata_mark_inbound_message_end_block_invoke((uint64_t)v22, v7);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v23)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  os_log_type_t v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v19)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
    os_log_type_t v27 = 2082;
    BOOL v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v3 = (id *)v1;
  id v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_transaction_metadata_mark_end_block_invoke;
    v22[3] = &unk_189BC6260;
    id v6 = v3;
    v22[4] = v6;
    BOOL v7 = (uint64_t)v6[4];
    if (v7) {
      __nw_http_transaction_metadata_mark_end_block_invoke((uint64_t)v22, v7);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v26 = "nw_http_transaction_metadata_mark_end";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_transaction_metadata_mark_end";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v23)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_transaction_metadata_mark_end";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  os_log_type_t v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_transaction_metadata_mark_end";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v19)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v26 = "nw_http_transaction_metadata_mark_end";
    os_log_type_t v27 = 2082;
    BOOL v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_connection, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_is_closed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v3 = (id *)v1;
  id v4 = v3[1];

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_connection_metadata_close_connection_block_invoke;
    v22[3] = &unk_189BC6260;
    id v6 = v3;
    v22[4] = v6;
    BOOL v7 = (uint64_t)v6[4];
    if (v7) {
      __nw_http_connection_metadata_close_connection_block_invoke((uint64_t)v22, v7);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v26 = "nw_http_connection_metadata_close_connection";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_connection_metadata_close_connection";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v23)
  {
    __nwlog_obj();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_connection_metadata_close_connection";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  os_log_type_t v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      char v26 = "nw_http_connection_metadata_close_connection";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v19)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    char v26 = "nw_http_connection_metadata_close_connection";
    os_log_type_t v27 = 2082;
    BOOL v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

        goto LABEL_42;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      os_log_type_t v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_connection, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_42;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_connection, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v18)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_29;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (v16)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_connection_metadata_set_sec_metadata_block_invoke;
    v24[3] = &unk_189BC6260;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_connection_metadata_set_sec_metadata_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_connection_metadata_set_sec_metadata";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_set_sec_metadata";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_set_sec_metadata";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_set_sec_metadata";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_connection_metadata_set_sec_metadata";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_connection_metadata_received_certificate_block_invoke;
    v24[3] = &unk_189BC6260;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_connection_metadata_received_certificate_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_connection_metadata_received_certificate";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_received_certificate";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_received_certificate";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_received_certificate";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_connection_metadata_received_certificate";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_connection_metadata_send_certificate_block_invoke;
    v24[3] = &unk_189BC6260;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_connection_metadata_send_certificate_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_connection_metadata_send_certificate";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_send_certificate";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_send_certificate";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_send_certificate";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_connection_metadata_send_certificate";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  BOOL v7 = v5;
  os_log_type_t v8 = *((id *)v7 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v8,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v26[0] = MEMORY[0x1895F87A8];
    v26[1] = 3221225472LL;
    v26[2] = __nw_http_connection_metadata_set_receive_certificate_block_invoke;
    v26[3] = &unk_189BC67A0;
    v26[5] = a2;
    BOOL v10 = v6;
    v26[4] = v10;
    os_log_type_t v11 = *((void *)v7 + 4);
    if (v11) {
      __nw_http_connection_metadata_set_receive_certificate_block_invoke((uint64_t)v26, v11);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  __int16 v30 = "nw_http_connection_metadata_set_receive_certificate";
  __int16 v13 = (char *)_os_log_send_and_compose_impl();

  BOOL v28 = OS_LOG_TYPE_ERROR;
  os_log_type_t v27 = 0;
  if (v28 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = v28;
    if (os_log_type_enabled(v14, v28))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v30 = "nw_http_connection_metadata_set_receive_certificate";
      _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v27)
  {
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v25 = v28;
    if (os_log_type_enabled(v14, v28))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v30 = "nw_http_connection_metadata_set_receive_certificate";
      _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  BOOL v21 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v22 = v28;
  BOOL v23 = os_log_type_enabled(v14, v28);
  if (!v21)
  {
    if (v23)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      __int16 v30 = "nw_http_connection_metadata_set_receive_certificate";
      _os_log_impl(&dword_181A5C000, v14, v22, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v23)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    __int16 v30 = "nw_http_connection_metadata_set_receive_certificate";
    char v31 = 2082;
    uint64_t v32 = v21;
    _os_log_impl( &dword_181A5C000,  v14,  v22,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v21);
  if (v13) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_connection_metadata_store_secondary_certificate_block_invoke;
    v24[3] = &unk_189BC6260;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = v5[4];
    if (v9) {
      __nw_http_connection_metadata_store_secondary_certificate_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_connection_metadata_store_secondary_certificate";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_store_secondary_certificate";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_store_secondary_certificate";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_store_secondary_certificate";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_connection_metadata_store_secondary_certificate";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke;
    v24[3] = &unk_189BC6110;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_http_connection_metadata_set_shared_connection_pool_metadata_block_invoke;
    v24[3] = &unk_189BC6260;
    os_log_type_t v8 = v4;
    v24[4] = v8;
    uint64_t v9 = *((void *)v5 + 4);
    if (v9) {
      __nw_http_connection_metadata_set_shared_connection_pool_metadata_block_invoke((uint64_t)v24, v9);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v21)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
    os_log_type_t v29 = 2082;
    __int16 v30 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  if (a2)
  {
    id v5 = v3 + 1;
    if (uuid_is_null((const unsigned __int8 *)v3 + 16))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v24 = "nw_application_id_get_uuid";
        os_log_type_t v25 = 2112;
        char v26 = v4;
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_ERROR, "%{public}s %@ has no uuid", buf, 0x16u);
      }
    }

    else
    {
      *a2 = *v5;
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v24 = "nw_application_id_get_uuid";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v24 = "nw_application_id_get_uuid";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null out_uuid", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v21)
  {
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v24 = "nw_application_id_get_uuid";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null out_uuid, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  BOOL v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v17 = type;
  os_log_type_t v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v24 = "nw_application_id_get_uuid";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v18)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v24 = "nw_application_id_get_uuid";
    os_log_type_t v25 = 2082;
    char v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null out_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  if (a2)
  {
    if (*(void *)(v3 + 108) | *(void *)(v3 + 116) | *(void *)(v3 + 124) | *(void *)(v3 + 132))
    {
      id v5 = *(_OWORD *)(v3 + 124);
      *a2 = *(_OWORD *)(v3 + 108);
      a2[1] = v5;
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v24 = "nw_application_id_get_audit_token";
        os_log_type_t v25 = 2112;
        char v26 = v4;
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %@ has no audit token", buf, 0x16u);
      }
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v24 = "nw_application_id_get_audit_token";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v24 = "nw_application_id_get_audit_token";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null out_audit_token", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (!v21)
  {
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v24 = "nw_application_id_get_audit_token";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null out_audit_token, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_41;
  }

  BOOL v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v17 = type;
  os_log_type_t v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v24 = "nw_application_id_get_audit_token";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null out_audit_token, no backtrace", buf, 0xCu);
    }

    goto LABEL_41;
  }

  if (v18)
  {
    *(_DWORD *)addrinfo buf = 136446466;
    os_log_type_t v24 = "nw_application_id_get_audit_token";
    os_log_type_t v25 = 2082;
    char v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null out_audit_token, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_43;
  }
LABEL_8:
}

    goto LABEL_42;
  }

  id v3 = (NWConcrete_nw_endpoint_handler *)v1;
  mode = v3->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (id)gLogObj;
    else {
      uint64_t v9 = off_189BBBBC0[mode];
    }
    *(_DWORD *)addrinfo buf = 136446722;
    char v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
    uint64_t v32 = 2082;
    os_log_type_t v33 = (void *)v9;
    os_log_type_t v34 = 2082;
    BOOL v35 = "flow";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v28 = 0;
    if (__nwlog_fault(v10, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          else {
            __int16 v13 = off_189BBBBC0[mode];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          char v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
          uint64_t v32 = 2082;
          os_log_type_t v33 = (void *)v13;
          os_log_type_t v34 = 2082;
          BOOL v35 = "flow";
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v28)
      {
        id v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v11, type);
        if (v14)
        {
          if (v16)
          {
            else {
              os_log_type_t v17 = off_189BBBBC0[mode];
            }
            *(_DWORD *)addrinfo buf = 136446978;
            char v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
            uint64_t v32 = 2082;
            os_log_type_t v33 = (void *)v17;
            os_log_type_t v34 = 2082;
            BOOL v35 = "flow";
            __int16 v36 = 2082;
            os_log_type_t v37 = v14;
            _os_log_impl( &dword_181A5C000,  v11,  v15,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v14);
          if (!v10) {
            goto LABEL_44;
          }
          goto LABEL_43;
        }

        if (v16)
        {
          else {
            BOOL v20 = off_189BBBBC0[mode];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          char v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
          uint64_t v32 = 2082;
          os_log_type_t v33 = (void *)v20;
          os_log_type_t v34 = 2082;
          BOOL v35 = "flow";
          _os_log_impl( &dword_181A5C000,  v11,  v15,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          else {
            os_log_type_t v19 = off_189BBBBC0[mode];
          }
          *(_DWORD *)addrinfo buf = 136446722;
          char v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
          uint64_t v32 = 2082;
          os_log_type_t v33 = (void *)v19;
          os_log_type_t v34 = 2082;
          BOOL v35 = "flow";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_41;
    }

      os_log_type_t v34 = nw_endpoint_flow_setup_protocols(v23, 0LL, 0LL, 0, 0);
      goto LABEL_42;
    }

  if (v21) {
    free(v21);
  }
}

    __int16 v36 = *(void *)(v5 + 24);
    if (!v36 || (os_log_type_t v37 = *(void (**)(uint64_t, void))(v36 + 48)) == 0LL)
    {
      __nwlog_obj();
      uint64_t v38 = *(const char **)(v5 + 16);
      if (!v38) {
        uint64_t v38 = "invalid";
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
      os_log_type_t v101 = 2082;
      BOOL v102 = v38;
      os_log_type_t v39 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v97 = 0;
      if (__nwlog_fault(v39, &type, &v97))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v40 = (os_log_s *)__nwlog_obj();
          BOOL v41 = type;
          if (!os_log_type_enabled(v40, type)) {
            goto LABEL_180;
          }
          os_log_type_t v42 = *(const char **)(v5 + 16);
          if (!v42) {
            os_log_type_t v42 = "invalid";
          }
LABEL_50:
          *(_DWORD *)addrinfo buf = 136446466;
          BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
          os_log_type_t v101 = 2082;
          BOOL v102 = v42;
          char v43 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_179:
          _os_log_impl(&dword_181A5C000, v40, v41, v43, buf, 0x16u);
          goto LABEL_180;
        }

        if (v97)
        {
          v73 = (char *)__nw_create_backtrace_string();
          os_log_type_t v40 = (os_log_s *)__nwlog_obj();
          BOOL v41 = type;
          os_log_type_t v74 = os_log_type_enabled(v40, type);
          if (v73)
          {
            if (!v74) {
              goto LABEL_113;
            }
            BOOL v75 = *(const char **)(v5 + 16);
            if (!v75) {
              BOOL v75 = "invalid";
            }
            goto LABEL_112;
          }

          if (!v74) {
            goto LABEL_180;
          }
          v88 = *(const char **)(v5 + 16);
          if (!v88) {
            v88 = "invalid";
          }
          goto LABEL_178;
        }

        os_log_type_t v40 = (os_log_s *)__nwlog_obj();
        BOOL v41 = type;
        if (!os_log_type_enabled(v40, type)) {
          goto LABEL_180;
        }
        v78 = *(const char **)(v5 + 16);
        if (!v78) {
          v78 = "invalid";
        }
        goto LABEL_126;
      }

      goto LABEL_180;
    }

    goto LABEL_85;
  }

  BOOL v7 = *(unsigned __int16 *)(v6 + 188);
  os_log_type_t v8 = v7 | (*(unsigned __int8 *)(v6 + 190) << 16);
  if ((v7 & 1) != 0)
  {
    if ((v7 & 0x1000) != 0)
    {
      char v60 = *(void *)(v5 + 24);
      if (!v60 || (os_log_type_t v37 = *(void (**)(uint64_t, void))(v60 + 184)) == 0LL)
      {
        __nwlog_obj();
        os_log_type_t v76 = *(const char **)(v5 + 16);
        if (!v76) {
          os_log_type_t v76 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
        os_log_type_t v101 = 2082;
        BOOL v102 = v76;
        os_log_type_t v39 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v97 = 0;
        if (__nwlog_fault(v39, &type, &v97))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v40 = (os_log_s *)__nwlog_obj();
            BOOL v41 = type;
            if (!os_log_type_enabled(v40, type)) {
              goto LABEL_180;
            }
            v77 = *(const char **)(v5 + 16);
            if (!v77) {
              v77 = "invalid";
            }
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
            os_log_type_t v101 = 2082;
            BOOL v102 = v77;
            char v43 = "%{public}s protocol %{public}s has invalid input_finished callback";
            goto LABEL_179;
          }

          if (!v97)
          {
            os_log_type_t v40 = (os_log_s *)__nwlog_obj();
            BOOL v41 = type;
            if (!os_log_type_enabled(v40, type)) {
              goto LABEL_180;
            }
            os_log_type_t v93 = *(const char **)(v5 + 16);
            if (!v93) {
              os_log_type_t v93 = "invalid";
            }
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
            os_log_type_t v101 = 2082;
            BOOL v102 = v93;
            char v43 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
            goto LABEL_179;
          }

          v85 = (char *)__nw_create_backtrace_string();
          os_log_type_t v40 = (os_log_s *)__nwlog_obj();
          BOOL v41 = type;
          v86 = os_log_type_enabled(v40, type);
          if (!v85)
          {
            if (!v86) {
              goto LABEL_180;
            }
            v94 = *(const char **)(v5 + 16);
            if (!v94) {
              v94 = "invalid";
            }
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
            os_log_type_t v101 = 2082;
            BOOL v102 = v94;
            char v43 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
            goto LABEL_179;
          }

          if (v86)
          {
            v87 = *(const char **)(v5 + 16);
            if (!v87) {
              v87 = "invalid";
            }
            *(_DWORD *)addrinfo buf = 136446722;
            BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
            os_log_type_t v101 = 2082;
            BOOL v102 = v87;
            os_log_type_t v103 = 2082;
            BOOL v104 = v85;
            _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v85);
        }

        goto LABEL_180;
      }

          free(v15);
          goto LABEL_42;
        }

      if (v20) {
        free(v20);
      }
      *(_BYTE *)(v7 + 1) = 0;
      __nwlog_obj();
      __addrinfo buf = 136446210;
      os_log_type_t v56 = "__nw_frame_get_dscp_value";
      char v26 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v53 = 0;
      if (__nwlog_fault(v26, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v27 = (os_log_s *)__nwlog_obj();
          BOOL v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_57;
          }
          __addrinfo buf = 136446210;
          os_log_type_t v56 = "__nw_frame_get_dscp_value";
          os_log_type_t v29 = "%{public}s called with null frame";
LABEL_56:
          _os_log_impl(&dword_181A5C000, v27, v28, v29, (uint8_t *)&__buf, 0xCu);
          goto LABEL_57;
        }

        if (!v53)
        {
          os_log_type_t v27 = (os_log_s *)__nwlog_obj();
          BOOL v28 = type;
          if (!os_log_type_enabled(v27, type)) {
            goto LABEL_57;
          }
          __addrinfo buf = 136446210;
          os_log_type_t v56 = "__nw_frame_get_dscp_value";
          os_log_type_t v29 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_56;
        }

        __int16 v30 = (char *)__nw_create_backtrace_string();
        os_log_type_t v27 = (os_log_s *)__nwlog_obj();
        BOOL v28 = type;
        char v31 = os_log_type_enabled(v27, type);
        if (!v30)
        {
          if (!v31) {
            goto LABEL_57;
          }
          __addrinfo buf = 136446210;
          os_log_type_t v56 = "__nw_frame_get_dscp_value";
          os_log_type_t v29 = "%{public}s called with null frame, no backtrace";
          goto LABEL_56;
        }

        if (v31)
        {
          __addrinfo buf = 136446466;
          os_log_type_t v56 = "__nw_frame_get_dscp_value";
          os_log_type_t v57 = 2082;
          id v58 = v30;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null frame, dumping backtrace:%{public}s",  (uint8_t *)&__buf,  0x16u);
        }

        free(v30);
      }

  if (v28) {
    free(v28);
  }
  BOOL v16 = 0LL;
LABEL_12:

  return v16;
}

      if (v4) {
        free(v4);
      }
      st_size = 0LL;
      goto LABEL_44;
    }

    st_size = v79.st_size;
    if ((unint64_t)(v79.st_size - 1) > 0xFFFE)
    {
LABEL_44:
      __int16 v36 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v36);
      os_log_type_t v37 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v76 = "networkd_settings_read_from_file";
        v77 = 2048;
        *(void *)v78 = st_size;
        _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_ERROR,  "%{public}s networkd settings file length %lld is invalid",  buf,  0x16u);
      }

      goto LABEL_86;
    }

    __int16 v13 = malloc(v79.st_size);
    if (v13)
    {
      os_log_type_t v15 = v13;
      BOOL v16 = pread(v1, v13, st_size, 0LL);
      if (v16 == st_size)
      {
        os_log_type_t v17 = xpc_create_from_plist();
        sCachedSettings = v17;
        os_log_type_t v18 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init(v18);
        os_log_type_t v19 = (os_log_s *)gLogObj;
        if (v17)
        {
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v76 = "networkd_settings_read_from_file";
            _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s initialized networkd settings by reading plist directly",  buf,  0xCu);
          }

          goto LABEL_85;
        }

        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v76 = "networkd_settings_read_from_file";
        os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v73 = 0;
        os_log_type_t v40 = __nwlog_fault(v39, &type, &v73);
        if ((_DWORD)v40)
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v42 = (os_log_s *)__nwlog_obj(v40, v41);
            char v43 = type;
            if (!os_log_type_enabled(v42, type)) {
              goto LABEL_83;
            }
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v76 = "networkd_settings_read_from_file";
            v44 = "%{public}s xpc_create_from_plist failed";
          }

          else if (v73)
          {
            BOOL v51 = (char *)__nw_create_backtrace_string();
            os_log_type_t v42 = (os_log_s *)__nwlog_obj(v51, v52);
            char v43 = type;
            id v53 = os_log_type_enabled(v42, type);
            if (v51)
            {
              if (v53)
              {
                *(_DWORD *)addrinfo buf = 136446466;
                os_log_type_t v76 = "networkd_settings_read_from_file";
                v77 = 2082;
                *(void *)v78 = v51;
                _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s xpc_create_from_plist failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v51);
              if (!v39) {
                goto LABEL_85;
              }
              goto LABEL_84;
            }

            if (!v53) {
              goto LABEL_83;
            }
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v76 = "networkd_settings_read_from_file";
            v44 = "%{public}s xpc_create_from_plist failed, no backtrace";
          }

          else
          {
            os_log_type_t v42 = (os_log_s *)__nwlog_obj(v40, v41);
            char v43 = type;
            if (!os_log_type_enabled(v42, type)) {
              goto LABEL_83;
            }
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v76 = "networkd_settings_read_from_file";
            v44 = "%{public}s xpc_create_from_plist failed, backtrace limit exceeded";
          }

          os_log_type_t v57 = v42;
          id v58 = v43;
          v59 = 12;
          goto LABEL_82;
        }
      }

      else
      {
        os_log_type_t v33 = v16;
        if ((v16 & 0x8000000000000000LL) == 0)
        {
          os_log_type_t v34 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v34);
          BOOL v35 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)addrinfo buf = 136446722;
            os_log_type_t v76 = "networkd_settings_read_from_file";
            v77 = 2048;
            *(void *)v78 = v33;
            *(_WORD *)&v78[8] = 2048;
            *(void *)&v78[10] = st_size;
            _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_ERROR,  "%{public}s networkd settings file read invalid length %llu != fstat length %llu",  buf,  0x20u);
          }

          goto LABEL_85;
        }

        os_log_type_t v45 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        v46 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init(v46);
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v76 = "networkd_settings_read_from_file";
        v77 = 1024;
        *(_DWORD *)v78 = v45;
        os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v73 = 0;
        __int16 v47 = __nwlog_fault(v39, &type, &v73);
        if ((_DWORD)v47)
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            id v49 = (os_log_s *)__nwlog_obj(v47, v48);
            os_log_type_t v50 = type;
            if (!os_log_type_enabled(v49, type)) {
              goto LABEL_83;
            }
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v76 = "networkd_settings_read_from_file";
            v77 = 1024;
            *(_DWORD *)v78 = v45;
            v44 = "%{public}s networkd settings file pread failed %{darwin.errno}d";
          }

          else if (v73)
          {
            v54 = (char *)__nw_create_backtrace_string();
            id v49 = (os_log_s *)__nwlog_obj(v54, v55);
            os_log_type_t v50 = type;
            os_log_type_t v56 = os_log_type_enabled(v49, type);
            if (v54)
            {
              if (v56)
              {
                *(_DWORD *)addrinfo buf = 136446722;
                os_log_type_t v76 = "networkd_settings_read_from_file";
                v77 = 1024;
                *(_DWORD *)v78 = v45;
                *(_WORD *)&v78[4] = 2082;
                *(void *)&v78[6] = v54;
                _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s networkd settings file pread failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v54);
              goto LABEL_83;
            }

            if (!v56) {
              goto LABEL_83;
            }
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v76 = "networkd_settings_read_from_file";
            v77 = 1024;
            *(_DWORD *)v78 = v45;
            v44 = "%{public}s networkd settings file pread failed %{darwin.errno}d, no backtrace";
          }

          else
          {
            id v49 = (os_log_s *)__nwlog_obj(v47, v48);
            os_log_type_t v50 = type;
            if (!os_log_type_enabled(v49, type)) {
              goto LABEL_83;
            }
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v76 = "networkd_settings_read_from_file";
            v77 = 1024;
            *(_DWORD *)v78 = v45;
            v44 = "%{public}s networkd settings file pread failed %{darwin.errno}d, backtrace limit exceeded";
          }

          os_log_type_t v57 = v49;
          id v58 = v50;
          v59 = 18;
LABEL_82:
          _os_log_impl(&dword_181A5C000, v57, v58, v44, buf, v59);
        }
      }

BOOL nw_array_create()
{
  uint64_t v0 = _os_object_alloc();
  uint64_t v1 = v0;
  if (v0)
  {
    *(void *)(v0 + 16) = 0LL;
    *(void *)(v0 + 24) = 0LL;
    *(void *)(v0 + 32) = 0LL;
    atomic_store(0, (unsigned __int8 *)(v0 + 40));
    return v1;
  }

  id v3 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  id v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return v1;
  }

  __break(1u);
  return result;
}

void nw_array_append(uint64_t a1, void *object)
{
  if (a1 && object)
  {
    if (atomic_load((unsigned __int8 *)(a1 + 40)))
    {
      uint64_t v4 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v4);
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      id v5 = (void *)_os_log_send_and_compose_impl();
      else {
        free(v5);
      }
    }

    else
    {
      id v6 = *(void ***)(a1 + 24);
      if ((unint64_t)v6 >= *(void *)(a1 + 32))
      {
        BOOL v7 = std::vector<nw_object_wrapper_t>::__emplace_back_slow_path<nw_object *&>(a1 + 16, object);
      }

      else
      {
        *id v6 = os_retain(object);
        BOOL v7 = v6 + 1;
      }

      *(void *)(a1 + 24) = v7;
    }
  }

void nw_parameters_set_indefinite(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 128LL;
    if (a2) {
      uint64_t v5 = 192LL;
    }
    *((void *)v3 + 12) = v5 | *((void *)v3 + 12) & 0xFFFFFFFFFFFFFF3FLL;
    goto LABEL_5;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v17 = "nw_parameters_set_indefinite";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_indefinite";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v17 = "nw_parameters_set_indefinite";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_indefinite";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_indefinite";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_skip_stack_trace_capture(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x8000000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFF7FFFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_context(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    char v26 = "nw_parameters_set_context";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v26 = "nw_parameters_set_context";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          char v26 = "nw_parameters_set_context";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v10) {
          goto LABEL_4;
        }
LABEL_39:
        free(v10);
        goto LABEL_4;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v26 = "nw_parameters_set_context";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v26 = "nw_parameters_set_context";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181A77FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_is_third_party_web_content(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 0x8000;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFF7FFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_is_third_party_web_content";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_is_third_party_web_content";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_is_third_party_web_content";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_is_third_party_web_content";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_is_third_party_web_content";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_no_delay(void *a1, BOOL a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_no_delay(v5, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_no_delay";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_no_delay";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_no_delay";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_no_delay";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_no_delay";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A7853C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_parameters_create_protocol_parameters(__int128 *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = nw_protocol_definition_create_with_identifier(a1);
    options = nw_protocol_create_options(v1);

    return options;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  char v15 = "nw_parameters_create_protocol_parameters";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v15 = "nw_parameters_create_protocol_parameters";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null protocol_identifier", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          char v15 = "nw_parameters_create_protocol_parameters";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v15 = "nw_parameters_create_protocol_parameters";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null protocol_identifier, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v15 = "nw_parameters_create_protocol_parameters";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null protocol_identifier, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A787EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_definition *nw_protocol_definition_create_with_identifier(__int128 *a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_definition);
    id v3 = v2;
    if (v2)
    {
      __int128 v4 = *a1;
      __int128 v5 = a1[1];
      *(void *)&v2->identifier.level = *((void *)a1 + 4);
      *(_OWORD *)&v2->identifier.name[16] = v5;
      *(_OWORD *)v2->identifier.name = v4;
      if (*((_DWORD *)a1 + 9) == 2) {
        int v6 = 3;
      }
      else {
        int v6 = 2;
      }
      v2->variant = v6;
      os_log_type_t v7 = v2;
      goto LABEL_14;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v28 = "nw_protocol_definition_create_with_identifier";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v28 = "nw_protocol_definition_create_with_identifier";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s [nw_protocol_definition init] failed", buf, 0xCu);
        }
      }

      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v28 = "nw_protocol_definition_create_with_identifier";
            __int16 v29 = 2082;
            __int16 v30 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v14,  "%{public}s [nw_protocol_definition init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v9) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }

        if (v15)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v28 = "nw_protocol_definition_create_with_identifier";
          _os_log_impl( &dword_181A5C000,  v10,  v14,  "%{public}s [nw_protocol_definition init] failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v28 = "nw_protocol_definition_create_with_identifier";
          _os_log_impl( &dword_181A5C000,  v10,  v16,  "%{public}s [nw_protocol_definition init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v9)
    {
LABEL_14:

      return v3;
    }

void nw_parameters_set_protocol_value(void *a1, const char *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  if (v5)
  {
    os_log_type_t v7 = (id *)v5;
    id v8 = v7 + 5;
    id v9 = v7[5];

    if (!v9 || object_getClass(v9) != (Class)MEMORY[0x1895F9250])
    {
      xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);

      id v9 = v10;
    }

    xpc_dictionary_set_value(v9, a2, v6);
    os_log_type_t v11 = v7;
    id v12 = v9;
    objc_storeStrong(v8, v9);

    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v24 = "nw_parameters_set_protocol_value";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "nw_parameters_set_protocol_value";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v24 = "nw_parameters_set_protocol_value";
          __int16 v25 = 2082;
          char v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v19)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "nw_parameters_set_protocol_value";
        _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null protocol_parameters, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v24 = "nw_parameters_set_protocol_value";
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null protocol_parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A792F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_add_protocol_stack_member(void *a1, int a2, unsigned int a3, void *a4)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  os_log_type_t v7 = a1;
  id v8 = a4;
  id v9 = v8;
  if (v7)
  {
    if (v8)
    {
      id v10 = v7[19];
      os_log_type_t v11 = v10;
      if (v10)
      {
        switch(a2)
        {
          case 2:
            objc_storeStrong((id *)v10 + 6, a4);
            goto LABEL_26;
          case 3:
            objc_storeStrong((id *)v10 + 3, a4);
            goto LABEL_26;
          case 4:
            uint64_t v14 = *((void *)v10 + 2);
            if (a3 == -1)
            {
              if (v14) {
                goto LABEL_25;
              }
            }

            else if (v14)
            {
              BOOL v15 = nw_array_create();
              os_log_type_t v16 = (unsigned __int8 *)v11[2];
              v50[0] = MEMORY[0x1895F87A8];
              v50[1] = 3221225472LL;
              v50[2] = __nw_parameters_add_protocol_stack_member_block_invoke_2;
              v50[3] = &unk_189BB8E08;
              unsigned int v53 = a3;
              id v17 = (id)v15;
              id v51 = v17;
              id v52 = v9;
              nw_array_apply(v16, (uint64_t)v50);
              os_log_type_t v18 = (void *)v11[2];
              v11[2] = v17;
              id v19 = v17;

              os_log_type_t v20 = v51;
LABEL_19:

LABEL_26:
              uint64_t v13 = 1LL;
LABEL_27:

              goto LABEL_28;
            }

            uint64_t v25 = 2LL;
            goto LABEL_24;
          case 5:
            uint64_t v14 = *((void *)v10 + 1);
            if (a3 == -1)
            {
              if (v14) {
                goto LABEL_25;
              }
            }

            else if (v14)
            {
              if (a3 < (unint64_t)((uint64_t)(*(void *)(v14 + 24) - *(void *)(v14 + 16)) >> 3))
              {
                BOOL v21 = nw_array_create();
                os_log_type_t v22 = (unsigned __int8 *)v11[1];
                v54[0] = MEMORY[0x1895F87A8];
                v54[1] = 3221225472LL;
                v54[2] = __nw_parameters_add_protocol_stack_member_block_invoke;
                v54[3] = &unk_189BB8E08;
                unsigned int v57 = a3;
                id v23 = (id)v21;
                id v55 = v23;
                id v56 = v9;
                nw_array_apply(v22, (uint64_t)v54);
                os_log_type_t v24 = (void *)v11[1];
                v11[1] = v23;
                id v19 = v23;

                os_log_type_t v20 = v55;
                goto LABEL_19;
              }

LABEL_80:
      if (v36) {
        free(v36);
      }
LABEL_9:
      uint64_t v13 = 0LL;
      goto LABEL_27;
    }

    __nwlog_obj();
    os_log_type_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
    __int16 v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v59 = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (__nwlog_fault(v30, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
          _os_log_impl(&dword_181A5C000, v31, v34, "%{public}s called with null protocol_parameters", buf, 0xCu);
        }

    goto LABEL_81;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
    id v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v21 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null timestamp", buf, 0xCu);
      }

      goto LABEL_80;
    }

    if (!v39)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v18,  v37,  "%{public}s called with null timestamp, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_80;
    }

    uint64_t v27 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v28 = type;
    __int16 v29 = os_log_type_enabled(v18, type);
    if (!v27)
    {
      if (v29)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v18, v28, "%{public}s called with null timestamp, no backtrace", buf, 0xCu);
      }

      goto LABEL_80;
    }

    if (v29)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
      BOOL v43 = 2082;
      *(void *)v44 = v27;
      _os_log_impl( &dword_181A5C000,  v18,  v28,  "%{public}s called with null timestamp, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_57;
  }

  if (!v3[39])
  {
    __nwlog_obj();
    os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
    id v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v18, v23, "%{public}s called with null connection->timestamps", buf, 0xCu);
      }

      goto LABEL_80;
    }

    if (!v39)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v18,  v38,  "%{public}s called with null connection->timestamps, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_80;
    }

    uint64_t v27 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v30 = type;
    uint64_t v31 = os_log_type_enabled(v18, type);
    if (!v27)
    {
      if (v31)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v18,  v30,  "%{public}s called with null connection->timestamps, no backtrace",  buf,  0xCu);
      }

      goto LABEL_80;
    }

    if (v31)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v42 = "nw_connection_add_timestamp_locked_on_nw_queue";
      BOOL v43 = 2082;
      *(void *)v44 = v27;
      _os_log_impl( &dword_181A5C000,  v18,  v30,  "%{public}s called with null connection->timestamps, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (!v15) {
      goto LABEL_233;
    }
    goto LABEL_81;
  }

  objc_storeStrong((id *)&self->internally_retained_object, self);
  id v5 = v3;
  id v6 = v5[30];
  v230 = v5;

  if (v6 != 1) {
    goto LABEL_233;
  }
  os_log_type_t v7 = v230;
  id v8 = *((_BYTE *)v7 + 268);

  v229 = v7;
  if ((v8 & 1) != 0)
  {
    id v23 = v7;
    os_log_type_t v24 = *((_BYTE *)v7 + 268);

    if ((v24 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v25 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        BOOL v26 = v23;

        uint64_t v27 = v26;
        BOOL v28 = *((_BYTE *)v229 + 268);

        if ((v28 & 1) != 0) {
          __int16 v29 = "dry-run ";
        }
        else {
          __int16 v29 = "";
        }
        __int16 v30 = nw_endpoint_handler_copy_endpoint(v27);
        logging_description = nw_endpoint_get_logging_description(v30);
        v225 = (NWConcrete_nw_endpoint_handler *)v30;
        obja = v26 + 168;
        os_log_type_t v32 = v27;
        os_log_type_t v33 = v32;
        os_log_type_t v34 = v230[30];
        else {
          BOOL v35 = off_189BBBBF0[v34];
        }

        os_log_type_t v50 = v33;
        id v51 = v50;
        id v52 = v3[29];
        unsigned int v53 = "path";
        switch(v52)
        {
          case 0u:
            break;
          case 1u:
            unsigned int v53 = "resolver";
            break;
          case 2u:
            unsigned int v53 = nw_endpoint_flow_mode_string(v50[31]);
            break;
          case 3u:
            unsigned int v53 = "proxy";
            break;
          case 4u:
            unsigned int v53 = "fallback";
            break;
          case 5u:
            unsigned int v53 = "transform";
            break;
          default:
            unsigned int v53 = "unknown-mode";
            break;
        }

        id v68 = v51;
        os_unfair_lock_lock((os_unfair_lock_t)v68 + 28);
        v69 = v68[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v68 + 28);

        *(_DWORD *)addrinfo buf = 136447746;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_flow startWithHandler:]";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = obja;
        *(_WORD *)&buf[22] = 2082;
        v240 = v29;
        *(_WORD *)v241 = 2082;
        *(void *)&v241[2] = logging_description;
        v242 = 2082;
        v243 = v35;
        v244 = 2082;
        v245 = v53;
        v246 = 2114;
        v247 = v69;
        _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ",  buf,  0x48u);
      }
    }

    uint64_t v70 = v23;
    v230[30] = 3;

    v70[20] = 393219;
    nw_endpoint_handler_report(v70, 0LL, (_WORD *)v70 + 40, 0LL);
    goto LABEL_233;
  }

  *((_BYTE *)self + 32) |= 0x10u;
  *((_BYTE *)self + 35) &= ~4u;
  p_lock = &self->lock;
  os_unfair_lock_lock(&self->lock);
  flow_path = self->flow_path;
  self->flow_path = 0LL;

  os_unfair_lock_unlock(&self->lock);
  nw_endpoint_flow_initialize_protocol(v7, (uint64_t)&self->shared_protocol, *((_BYTE *)self + 32) & 1);
  if ((*((_BYTE *)self + 32) & 2) == 0)
  {
    *(void *)os_log_type_t type = 0LL;
    v236 = type;
    v237 = 0x2020000000LL;
    v238 = 0;
    os_log_type_t v11 = (void *)*((void *)v7 + 4);
    *(void *)addrinfo buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __nw_endpoint_handler_has_persistent_application_protocols_block_invoke;
    v240 = (const char *)&unk_189BBBAF8;
    *(void *)v241 = type;
    nw_parameters_internal_iterate_protocol_stack(v11, 5, 0, buf);
    id v12 = *((unsigned __int8 *)v236 + 24);
    _Block_object_dispose(type, 8);
    *((_BYTE *)self + 32) = *((_BYTE *)self + 32) & 0xFB | (4 * (v12 == 0));
    goto LABEL_114;
  }

  *((_BYTE *)self + 32) &= ~4u;
  os_log_type_t v38 = v7;
  os_unfair_lock_lock((os_unfair_lock_t)v38 + 28);
  os_log_type_t v39 = (NWConcrete_nw_path *)*((id *)v38 + 8);
  os_unfair_lock_unlock((os_unfair_lock_t)v38 + 28);

  if (v39)
  {
    os_log_type_t v40 = v39;
    BOOL v41 = *((_BYTE *)v40 + 473) & 0x20;

    *((_BYTE *)self + 34) = *((_BYTE *)self + 34) & 0xDF | v41;
    nw_path_assert_required_agents(v40);
  }

  os_log_type_t v42 = v38;
  BOOL v43 = (NWConcrete_nw_endpoint_handler *)v42[4];

  if (nw_endpoint_flow_should_add_filter(v43, v39))
  {
    Helper_x8__ne_filter_protocol_identifier = gotLoadHelper_x8__ne_filter_protocol_identifier(v44);
    if (*(void *)(v46 + 648)) {
      inited = ne_filter_protocol_identifier_delayInitStub(Helper_x8__ne_filter_protocol_identifier);
    }
    else {
      inited = 0LL;
    }
    os_log_type_t v49 = inited == 0;
  }

  else
  {
    os_log_type_t v49 = 0;
  }

  v54 = 0;
  if (self->pre_connected_fd < 0 && v39 && !v49)
  {
    else {
      v54 = 0;
    }
  }

  *((_BYTE *)self + 33) = *((_BYTE *)self + 33) & 0xBF | v54;
  os_unfair_lock_lock(&self->lock);
  if (v39)
  {
    else {
      id v55 = 0;
    }
  }

  else
  {
    id v55 = 0;
  }

  *((_BYTE *)self + 33) = *((_BYTE *)self + 33) & 0x7F | v55;
  os_unfair_lock_unlock(p_lock);
  if ((*((_BYTE *)self + 33) & 0x40) != 0 || self->clone_from_flow || !nw_path_is_flow_divert(v39)) {
    goto LABEL_103;
  }
  flow_divert_endpoint = self->flow_divert_endpoint;
  self->flow_divert_endpoint = 0LL;

  unsigned int v57 = (OS_xpc_object *)nw_path_copy_flow_divert_token(v39);
  flow_divert_token = self->flow_divert_token;
  self->flow_divert_token = v57;

  os_log_type_t v59 = self->flow_divert_token;
  v226 = v43;
  if (v59 && object_getClass(v59) == (Class)MEMORY[0x1895F9240])
  {
    os_log_type_t v71 = nw_endpoint_handler_copy_endpoint(v42);
    char v60 = v71;
    log = v71;
    if ((!v71 || nw_endpoint_get_type(v71) == nw_endpoint_type_host) && nw_path_get_flow_divert_unit(v39))
    {
      *(_OWORD *)addrinfo buf = xmmword_18272D6E8;
      address = nw_endpoint_create_address((const sockaddr *)buf);
      v73 = self->flow_divert_endpoint;
      self->flow_divert_endpoint = address;

      os_log_type_t v74 = self->flow_divert_endpoint;
      BOOL v75 = nw_endpoint_handler_copy_endpoint(v42);
      nw_endpoint_set_parent_endpoint(v74, v75, 0);

      char v60 = log;
    }

    os_unfair_lock_lock(p_lock);
    *((_BYTE *)self + 34) |= 4u;
    os_unfair_lock_unlock(p_lock);
    minimize_logging = nw_endpoint_handler_get_minimize_logging(v42);
    logging_disabled = nw_endpoint_handler_get_logging_disabled(v42);
    if (minimize_logging)
    {
      if ((logging_disabled & 1) != 0) {
        goto LABEL_101;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v204 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v42);
        v206 = nw_endpoint_handler_dry_run_string(v42);
        v221 = nw_endpoint_handler_copy_endpoint(v42);
        v207 = nw_endpoint_get_logging_description(v221);
        v208 = nw_endpoint_handler_state_string(v42);
        v209 = nw_endpoint_handler_mode_string(v42);
        v210 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v42);
        *(_DWORD *)addrinfo buf = 136447746;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_flow startWithHandler:]";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = id_string;
        *(_WORD *)&buf[22] = 2082;
        v240 = v206;
        *(_WORD *)v241 = 2082;
        *(void *)&v241[2] = v207;
        v242 = 2082;
        v243 = v208;
        v244 = 2082;
        v245 = v209;
        v246 = 2114;
        v247 = v210;
        _os_log_impl( &dword_181A5C000,  v204,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] using flow divert",  buf,  0x48u);
      }

      v78 = v204;
    }

    else
    {
      if ((logging_disabled & 1) != 0)
      {
LABEL_102:

        BOOL v43 = v226;
        goto LABEL_103;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v78 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v79 = nw_endpoint_handler_get_id_string(v42);
        BOOL v80 = nw_endpoint_handler_dry_run_string(v42);
        v220 = v78;
        os_log_type_t v81 = nw_endpoint_handler_copy_endpoint(v42);
        os_log_type_t v82 = nw_endpoint_get_logging_description(v81);
        os_log_type_t v83 = nw_endpoint_handler_state_string(v42);
        os_log_type_t v84 = nw_endpoint_handler_mode_string(v42);
        v85 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v42);
        *(_DWORD *)addrinfo buf = 136447746;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_flow startWithHandler:]";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v79;
        *(_WORD *)&buf[22] = 2082;
        v240 = v80;
        *(_WORD *)v241 = 2082;
        *(void *)&v241[2] = v82;
        v242 = 2082;
        v243 = v83;
        v244 = 2082;
        v245 = v84;
        v246 = 2114;
        v247 = v85;
        _os_log_impl( &dword_181A5C000,  v220,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] using flow divert",  buf,  0x48u);

        v78 = v220;
      }
    }

LABEL_101:
    char v60 = log;
    goto LABEL_102;
  }

  if ((nw_endpoint_handler_get_logging_disabled(v42) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    char v60 = (nw_endpoint *)(id)gconnectionLogObj;
    if (!os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
      goto LABEL_102;
    }
    os_log_type_t v61 = nw_endpoint_handler_get_id_string(v42);
    __int16 v62 = nw_endpoint_handler_dry_run_string(v42);
    log = v60;
    v63 = nw_endpoint_handler_copy_endpoint(v42);
    uint64_t v64 = nw_endpoint_get_logging_description(v63);
    BOOL v65 = nw_endpoint_handler_state_string(v42);
    v66 = nw_endpoint_handler_mode_string(v42);
    os_log_type_t v67 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v42);
    *(_DWORD *)addrinfo buf = 136447746;
    *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_flow startWithHandler:]";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v61;
    *(_WORD *)&buf[22] = 2082;
    v240 = v62;
    *(_WORD *)v241 = 2082;
    *(void *)&v241[2] = v64;
    v242 = 2082;
    v243 = v65;
    v244 = 2082;
    v245 = v66;
    v246 = 2114;
    v247 = v67;
    _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow divert advertised, but failed to copy token",  buf,  0x48u);

    goto LABEL_101;
  }

    if (!v22) {
      goto LABEL_129;
    }
LABEL_81:
    free(v22);
    goto LABEL_129;
  }

  nw_context_assert_queue(v1[3]);
  if ((*((_BYTE *)v2 + 108) & 3) != 1
    || !*((_DWORD *)v2 + 26)
    || (*((_BYTE *)v2 + 109) & 0x40) == 0
    || nw_parameters_get_data_mode(v2[2]) != 2)
  {
LABEL_109:
    if (((*((_BYTE *)v2 + 108) & 0xE4) != 0 || (*((_BYTE *)v2 + 109) & 2) != 0) && (*((_BYTE *)v2 + 108) & 8) == 0)
    {
      bzero(&buf, 0xD60uLL);
      v54 = v2[2];
      id v55 = getpid();
      if (nw_parameters_has_delegated_proc_pid(v54, v55) || nw_parameters_has_delegated_proc_uuid(v2[2])) {
        buf.delegated = 1;
      }
      buf.legacy = 0;
      nw_connection_stats_fill_in_nw_report_on_nw_queue((NWConcrete_nw_connection *)v2, (nw_connection_report_s *)&buf);
      nw_connection_send_report_to_symptoms((NWConcrete_nw_connection *)v2, &buf, 0);
      *((_BYTE *)v2 + 108) |= 8u;
      id v56 = v2[2];
      if (v56 && !nw_path_parameters_get_logging_disabled(v56[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        unsigned int v57 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        {
          char v58 = *((_DWORD *)v2 + 112);
          *(_DWORD *)os_log_type_t type = 136446466;
          *(void *)&os_log_type_t type[4] = "nw_connection_send_stats_report_on_nw_queue";
          v72 = 1024;
          v73 = v58;
          _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Sent generic statistics report to symptoms",  type,  0x12u);
        }
      }
    }

    os_log_type_t v59 = v2;
    buf.u.legacy.statistics_report.bytes_in = 0LL;
    *(void *)os_log_type_t type = 0LL;
    uint64_t v70 = 0;
    nw_connection_fillout_data_transfer_snapshot_on_nw_queue(v59, (uint64_t *)&buf, type, &v70, 0);
    bytes_in = (void *)buf.u.legacy.statistics_report.bytes_in;
    if (buf.u.legacy.statistics_report.bytes_in)
    {
      os_log_type_t v61 = *(void *)(buf.u.legacy.statistics_report.bytes_in + 48);
      __int16 v62 = *(void *)(buf.u.legacy.statistics_report.bytes_in + 72);
      if (v62 + v61 >= 0x3200001)
      {
        nw_report_excessive_data_usage_event(v59, v61, v62);
        bytes_in = (void *)buf.u.legacy.statistics_report.bytes_in;
      }

      if (v70 && bytes_in) {
        free(bytes_in);
      }
    }

    nw_connection_log_summary_on_nw_queue(v59);
    goto LABEL_129;
  }

  id v3 = (uint64_t)v2[12];
  __int128 v4 = (uint64_t *)v2[2];
  if (v3)
  {
    id v5 = getpid();
    if (nw_parameters_has_delegated_proc_pid(v4, v5) || nw_parameters_has_delegated_proc_uuid(v2[2])) {
      *(_BYTE *)(v3 + 3416) = 1;
    }
    *(_DWORD *)(v3 + 3408) = *((_DWORD *)v2 + 26);
    id v6 = nw_endpoint_handler_copy_connected_flow_handler(v2[18]);
    if (v6) {
      nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue(v2, v6, v3);
    }
    *(_BYTE *)(v3 + 1672) = (*(_BYTE *)(v3 + 208) & 4) != 0;
    os_log_type_t v7 = v2;
    *(_WORD *)os_log_type_t type = 0;
    event_milliseconds = nw_connection_get_event_milliseconds(v7, 5, 1, type, 0LL);
    id v9 = nw_connection_get_event_milliseconds(v7, 5, 2, type, 0LL);
    LODWORD(v10) = 0;
    if (event_milliseconds != -1 && v9 != -1)
    {
      id v10 = v9 - event_milliseconds;
      if (v9 < event_milliseconds)
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446978;
            *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_get_fallback_margin_start_milliseconds";
            WORD2(buf.u.nw_connection_report.bytes_out) = 2082;
            *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = (unint64_t)"fallback_start";
            HIWORD(buf.u.nw_connection_report.bytes_duplicate) = 2048;
            buf.u.legacy.statistics_report.bytes_ooo = event_milliseconds;
            LOWORD(buf.u.nw_connection_report.bytes_retransmitted) = 2048;
            *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_retransmitted + 2) = v10;
            _os_log_impl( &dword_181A5C000,  v69,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  (uint8_t *)&buf,  0x2Au);
          }
        }

        LODWORD(v10) = 0;
      }
    }

    *(_DWORD *)(v3 + 1668) = v10;
    os_log_type_t v11 = *(void *)(v3 + 32);
    id v12 = 0.0;
    uint64_t v13 = 0.0;
    if (v11)
    {
      uint64_t v14 = *(void *)(v3 + 8);
      if (v14) {
        uint64_t v13 = (float)v11 / (float)(unint64_t)(100 * v14);
      }
    }

    BOOL v15 = *(void *)(v3 + 16);
    if (v15 && *(void *)v3) {
      id v12 = (float)v15 / (float)(unint64_t)(100LL * *(void *)v3);
    }
    os_log_type_t v16 = v2[2];
    if (v16 && !nw_path_parameters_get_logging_disabled(v16[13]))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v17 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        top_id = v7->top_id;
        LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446978;
        *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
        WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
        *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = top_id;
        WORD1(buf.u.nw_connection_report.bytes_duplicate) = 2048;
        *(double *)((char *)&buf.u.nw_connection_report.bytes_duplicate + 4) = v13;
        WORD2(buf.u.nw_connection_report.bytes_ooo) = 2048;
        *(double *)((char *)&buf.u.nw_connection_report.bytes_ooo + 6) = v12;
        _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Retransmission rate: %.2f%%, duplicate rate: %.2f%%",  (uint8_t *)&buf,  0x26u);
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v19 = (id)gLogObj;
    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEBUG))
    {
    }

    else
    {
      BOOL v26 = gLogFDOverride == -1;

      if (v26)
      {
LABEL_97:
        *(_BYTE *)(v3 + 3417) = 1;
        if (!*(_DWORD *)(v3 + 204) || *((_DWORD *)v2 + 26) != 2 || *(void *)(v3 + 88) || *(void *)(v3 + 80))
        {
          nw_connection_send_report_to_symptoms(v7, (netcore_stats_tcp_report *)v3, 1);
          *((_BYTE *)v2 + 108) |= 2u;
          id v51 = v2[2];
          if (v51)
          {
            if (!nw_path_parameters_get_logging_disabled(v51[13]))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              id v52 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v53 = v7->top_id;
                LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
                *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
                WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
                *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v53;
                _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Sent statistics report to symptoms",  (uint8_t *)&buf,  0x12u);
              }
            }
          }
        }

        goto LABEL_109;
      }
    }

    uint64_t v27 = netcore_stats_tcp_report_copy_description(v3);
    if (v27)
    {
      BOOL v28 = v27;
      __int16 v29 = v2[2];
      if (v29 && !nw_path_parameters_get_logging_disabled(v29[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v30 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v31 = v7->top_id;
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446722;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
          *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v31;
          WORD1(buf.u.nw_connection_report.bytes_duplicate) = 2082;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_duplicate + 4) = (unint64_t)v28;
          _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Generated report: %{public}s",  (uint8_t *)&buf,  0x1Cu);
        }
      }

      goto LABEL_89;
    }

    __nwlog_obj();
    os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
    *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats"
                                                                                                "_report_on_nw_queue";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    uint64_t v70 = 0;
    if (__nwlog_fault(v28, type, &v70))
    {
      if (type[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type[0];
        if (os_log_type_enabled(v33, (os_log_type_t)type[0]))
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s netcore_stats_tcp_report_copy_description failed",  (uint8_t *)&buf,  0xCu);
        }

          if (v19) {
            free(v19);
          }
          id v12 = 0LL;
          if (handle != &nw_protocol_ref_counted_handle) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }

      __nwlog_obj();
      *(_DWORD *)addrinfo buf = 136446210;
      id v56 = "__nw_protocol_finalize_output_frames";
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      unsigned int v53 = 0;
      if (__nwlog_fault(v31, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v32 = (os_log_s *)__nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v32, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v56 = "__nw_protocol_finalize_output_frames";
            os_log_type_t v34 = "%{public}s called with null protocol";
LABEL_100:
            _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0xCu);
          }
        }

        else if (v53)
        {
          os_log_type_t v39 = (char *)__nw_create_backtrace_string();
          os_log_type_t v32 = (os_log_s *)__nwlog_obj();
          os_log_type_t v33 = type;
          os_log_type_t v40 = os_log_type_enabled(v32, type);
          if (v39)
          {
            if (v40)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              id v56 = "__nw_protocol_finalize_output_frames";
              unsigned int v57 = 2082;
              char v58 = v39;
              _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v39);
            goto LABEL_101;
          }

          if (v40)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v56 = "__nw_protocol_finalize_output_frames";
            os_log_type_t v34 = "%{public}s called with null protocol, no backtrace";
            goto LABEL_100;
          }
        }

        else
        {
          os_log_type_t v32 = (os_log_s *)__nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v32, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v56 = "__nw_protocol_finalize_output_frames";
            os_log_type_t v34 = "%{public}s called with null protocol, backtrace limit exceeded";
            goto LABEL_100;
          }
        }
      }

  if ((v3 & 1) != 0)
  {
    if (!v2)
    {
      __nwlog_obj();
      v127 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v127, OS_LOG_TYPE_ERROR);
      *(_DWORD *)addrinfo buf = 136446210;
      v140 = "_strict_strlcat";
      v128 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v128);
      if (result) {
        goto LABEL_268;
      }
      free(v128);
    }

    os_log_type_t v38 = 0LL;
    os_log_type_t v39 = 107LL;
    while (1)
    {
      os_log_type_t v40 = &v2[v38];
      if (!v2[v38]) {
        break;
      }
      ++v38;
      if (!--v39) {
        goto LABEL_106;
      }
    }

    if (v39 >= 2)
    {
      BOOL v43 = v39 - 2;
      v44 = 106 - v38;
      os_log_type_t v45 = 105 - v38;
      if (v45 >= 2) {
        os_log_type_t v45 = 2LL;
      }
      memcpy(v40, ", ", v45 + 1);
      os_log_type_t v40 = v2 + 106;
      while (v43 <= 1)
      {
        if (!--v44) {
          goto LABEL_105;
        }
      }

      goto LABEL_106;
    }

      free(v39);
      if (!v16) {
        goto LABEL_135;
      }
LABEL_133:
      os_log_type_t v61 = (char *)v16;
LABEL_134:
      free(v61);
      goto LABEL_135;
    }

    value = xpc_int64_get_value(v14);
    os_log_type_t v33 = value;
    if (!value)
    {

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v44 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s Successfully checked mobile asset",  buf,  0xCu);
      }

      goto LABEL_84;
    }

    if (!(value >> 31))
    {
      __nwlog_obj();
      os_log_type_t v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      os_log_type_t v76 = 1024;
      *(_DWORD *)v77 = v33;
      BOOL v35 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v72 = 0;
      if (__nwlog_fault(v35, &type, &v72))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v37 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v75 = "networkd_privileged_check_mobile_asset_block_invoke";
            os_log_type_t v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s received failure result code %{darwin.errno}d",  buf,  0x12u);
          }
        }

        else if (v72)
        {
          __int16 v62 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v63 = type;
          uint64_t v64 = os_log_type_enabled(v36, type);
          if (v62)
          {
            if (v64)
            {
              *(_DWORD *)addrinfo buf = 136446722;
              BOOL v75 = "networkd_privileged_check_mobile_asset_block_invoke";
              os_log_type_t v76 = 1024;
              *(_DWORD *)v77 = v33;
              *(_WORD *)&v77[4] = 2082;
              *(void *)&v77[6] = v62;
              _os_log_impl( &dword_181A5C000,  v36,  v63,  "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v62);
            if (!v35) {
              goto LABEL_135;
            }
LABEL_176:
            os_log_type_t v61 = (char *)v35;
            goto LABEL_134;
          }

          if (v64)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v75 = "networkd_privileged_check_mobile_asset_block_invoke";
            os_log_type_t v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl( &dword_181A5C000,  v36,  v63,  "%{public}s received failure result code %{darwin.errno}d, no backtrace",  buf,  0x12u);
          }
        }

        else
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v70 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v75 = "networkd_privileged_check_mobile_asset_block_invoke";
            os_log_type_t v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl( &dword_181A5C000,  v36,  v70,  "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
          }
        }
      }

      free(v39);
      if (!v16) {
        goto LABEL_135;
      }
LABEL_133:
      os_log_type_t v61 = (char *)v16;
LABEL_134:
      free(v61);
      goto LABEL_135;
    }

    value = xpc_int64_get_value(v14);
    os_log_type_t v33 = value;
    if (!value)
    {

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v44 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v75 = "networkd_privileged_run_probes_block_invoke";
        _os_log_impl(&dword_181A5C000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Successfully ran network probes", buf, 0xCu);
      }

      goto LABEL_84;
    }

    if (!(value >> 31))
    {
      __nwlog_obj();
      os_log_type_t v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v75 = "networkd_privileged_run_probes_block_invoke";
      os_log_type_t v76 = 1024;
      *(_DWORD *)v77 = v33;
      BOOL v35 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v72 = 0;
      if (__nwlog_fault(v35, &type, &v72))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v37 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v75 = "networkd_privileged_run_probes_block_invoke";
            os_log_type_t v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s received failure result code %{darwin.errno}d",  buf,  0x12u);
          }
        }

        else if (v72)
        {
          __int16 v62 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v63 = type;
          uint64_t v64 = os_log_type_enabled(v36, type);
          if (v62)
          {
            if (v64)
            {
              *(_DWORD *)addrinfo buf = 136446722;
              BOOL v75 = "networkd_privileged_run_probes_block_invoke";
              os_log_type_t v76 = 1024;
              *(_DWORD *)v77 = v33;
              *(_WORD *)&v77[4] = 2082;
              *(void *)&v77[6] = v62;
              _os_log_impl( &dword_181A5C000,  v36,  v63,  "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v62);
            if (!v35) {
              goto LABEL_135;
            }
LABEL_176:
            os_log_type_t v61 = (char *)v35;
            goto LABEL_134;
          }

          if (v64)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v75 = "networkd_privileged_run_probes_block_invoke";
            os_log_type_t v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl( &dword_181A5C000,  v36,  v63,  "%{public}s received failure result code %{darwin.errno}d, no backtrace",  buf,  0x12u);
          }
        }

        else
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v70 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v75 = "networkd_privileged_run_probes_block_invoke";
            os_log_type_t v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl( &dword_181A5C000,  v36,  v70,  "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
          }
        }
      }

  if (v34) {
    free(v34);
  }
  BOOL v21 = 0LL;
LABEL_28:

  return v21;
}

LABEL_42:
        BOOL v26 = 0LL;
        goto LABEL_43;
      }

      *(_WORD *)os_log_type_t v49 = bswap32(a4) >> 16;
      nw_framer_write_output(v14, v49, 2uLL);
      if (gLogDatapath)
      {
        __nwlog_obj();
        os_log_type_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)addrinfo buf = 136446722;
          id v52 = "nw_ws_write_header";
          unsigned int v53 = 2082;
          v54 = (char *)(a1 + 227);
          id v55 = 1024;
          *(_DWORD *)id v56 = *(unsigned __int16 *)v49;
          _os_log_impl( &dword_181A5C000,  v45,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s output wrote unmasked close code %hu",  buf,  0x1Cu);
        }
      }
    }

    if (gLogDatapath)
    {
      __nwlog_obj();
      os_log_type_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        id v52 = "nw_ws_write_header";
        unsigned int v53 = 2082;
        v54 = (char *)(a1 + 227);
        id v55 = 1024;
        *(_DWORD *)id v56 = 0;
        _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s output masking_key = %u",  buf,  0x1Cu);
      }
    }

    goto LABEL_42;
  }

  *(_DWORD *)os_log_type_t v49 = arc4random_uniform(0xFFFFFFFF);
  nw_framer_write_output(v14, v49, 4uLL);
  if (a3 == 8 && a4 != 1005)
  {
    if (a5 < 0x7C)
    {
      os_log_type_t v24 = bswap32(a4);
      v48[0] = v49[0] ^ BYTE2(v24);
      v48[1] = v49[1] ^ HIBYTE(v24);
      nw_framer_write_output(v14, v48, 2uLL);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)addrinfo buf = 136446722;
          id v52 = "nw_ws_write_header";
          unsigned int v53 = 2082;
          v54 = (char *)(a1 + 227);
          id v55 = 1024;
          *(_DWORD *)id v56 = *(unsigned __int16 *)v48;
          _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s output wrote masked close code %hu",  buf,  0x1Cu);
        }
      }

      uint64_t v25 = *(_WORD *)v49;
      v49[0] = v49[2];
      v49[1] = v49[3];
      *(_WORD *)&v49[2] = v25;
      goto LABEL_35;
    }

    __nwlog_obj();
    BOOL v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      id v52 = "nw_ws_write_header";
      _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_ERROR,  "%{public}s ws.output: attempted to send close frame of >125 bytes",  buf,  0xCu);
    }

    goto LABEL_80;
  }

      if (!v20)
      {
LABEL_9:

        return;
      }

        goto LABEL_81;
      }

      if (!v44)
      {
        __nwlog_obj();
        BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v41 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl( &dword_181A5C000,  v26,  v41,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_80;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type;
      os_log_type_t v38 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl( &dword_181A5C000,  v26,  v37,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
        }

        goto LABEL_80;
      }

      if (v38)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        os_log_type_t v48 = 2082;
        os_log_type_t v49 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v26,  v37,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
      uint64_t v25 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s called with null framer", buf, 0xCu);
        }

        goto LABEL_80;
      }

      if (!v44)
      {
        __nwlog_obj();
        BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl( &dword_181A5C000,  v26,  v40,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_80;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v35 = type;
      __int16 v36 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_181A5C000, v26, v35, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }

        goto LABEL_80;
      }

      if (v36)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        os_log_type_t v48 = 2082;
        os_log_type_t v49 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v26,  v35,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_81;
  }

  __nwlog_obj();
  os_log_type_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
  BOOL v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (__nwlog_fault(v21, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v44)
    {
      uint64_t v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      os_log_type_t v33 = os_log_type_enabled(v22, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          os_log_type_t v48 = 2082;
          os_log_type_t v49 = v31;
          _os_log_impl( &dword_181A5C000,  v22,  v32,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v31);
        goto LABEL_66;
      }

      if (v33)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        _os_log_impl(&dword_181A5C000, v22, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        _os_log_impl( &dword_181A5C000,  v22,  v39,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

          nw_resolver_update_status_locked(a1[4], 0LL);
          break;
        }

        if (!*(_BYTE *)(v8 + 256))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v9 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v45 = *(_DWORD *)(a1[4] + 340LL);
            id v52 = 136446722;
            unsigned int v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            v54 = 1024;
            *(_DWORD *)id v55 = v45;
            *(_WORD *)&v55[4] = 2112;
            *(void *)&v55[6] = dns_error;
            id v12 = "%{public}s [R%u] Got DNS error %@";
            uint64_t v13 = v9;
            uint64_t v14 = 28;
            goto LABEL_67;
          }

          goto LABEL_68;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v9 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          goto LABEL_68;
        }
        __int16 v29 = a1[4] + 256LL;
        id v52 = 136446722;
        unsigned int v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        v54 = 2082;
        *(void *)id v55 = v29;
        *(_WORD *)&v55[8] = 2112;
        *(void *)&v55[10] = dns_error;
        id v12 = "%{public}s [C%{public}s] Got DNS error %@";
      }

      uint64_t v13 = v9;
      uint64_t v14 = 32;
LABEL_67:
      _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v52, v14);
      goto LABEL_68;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 12LL));
}

        goto LABEL_81;
      }

      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v52 = type[4];
        if (os_log_type_enabled(v26, type[4]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v59 = "nw_protocol_data_copy_outbound_subdata";
          _os_log_impl( &dword_181A5C000,  v26,  v52,  "%{public}s called with null instance->context, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_80;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v41 = type[4];
      os_log_type_t v42 = os_log_type_enabled(v26, type[4]);
      if (!backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v59 = "nw_protocol_data_copy_outbound_subdata";
          _os_log_impl( &dword_181A5C000,  v26,  v41,  "%{public}s called with null instance->context, no backtrace",  buf,  0xCu);
        }

        goto LABEL_80;
      }

      if (v42)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v59 = "nw_protocol_data_copy_outbound_subdata";
        char v60 = 2082;
        os_log_type_t v61 = (size_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v26,  v41,  "%{public}s called with null instance->context, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_56;
    }

    goto LABEL_81;
  }

  id v8 = (unsigned int *)v6;
  id v9 = v8;
  if ((v8[51] & 2) != 0)
  {
    *(void *)os_log_type_t type = 0LL;
    os_log_type_t v16 = (dispatch_data_s *)nw_frame_copy_external_data((uint64_t)v8, &type[4], type);
    external = nw_frame_create_external( 16,  *(_DWORD *)&type[4] + (int)a3,  (uint64_t)nw_protocol_outbound_data_finalizer,  (uint64_t)v5);
    if (external)
    {
      os_log_type_t v18 = (void *)external;
      nw_frame_set_external_data(external, v16, 0LL);
      nw_frame_claim((uint64_t)v18, v19, *(int *)&type[4], 0);

LABEL_24:
      BOOL v21 = v18;
      v21[2] = 0LL;
      os_log_type_t v22 = (void *)*((void *)v5 + 19);
      v21[3] = v22;
      unsigned __int8 *v22 = v21;
      *((void *)v5 + 19) = v21 + 2;
LABEL_25:

LABEL_26:
      return (BOOL)v21;
    }

    __nwlog_obj();
    os_log_type_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v59 = "nw_protocol_data_copy_outbound_subdata";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    id v56 = OS_LOG_TYPE_ERROR;
    id v55 = 0;
    if (v56 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v36 = v56;
      if (os_log_type_enabled(v35, v56))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v59 = "nw_protocol_data_copy_outbound_subdata";
        _os_log_impl(&dword_181A5C000, v35, v36, "%{public}s nw_frame_create_external failed", buf, 0xCu);
      }
    }

    else if (v55)
    {
      BOOL v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v44 = v56;
      os_log_type_t v45 = os_log_type_enabled(v35, v56);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v59 = "nw_protocol_data_copy_outbound_subdata";
          char v60 = 2082;
          os_log_type_t v61 = (size_t)v43;
          _os_log_impl( &dword_181A5C000,  v35,  v44,  "%{public}s nw_frame_create_external failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v43);
        goto LABEL_93;
      }

      if (v45)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v59 = "nw_protocol_data_copy_outbound_subdata";
        _os_log_impl(&dword_181A5C000, v35, v44, "%{public}s nw_frame_create_external failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unsigned int v53 = v56;
      if (os_log_type_enabled(v35, v56))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v59 = "nw_protocol_data_copy_outbound_subdata";
        _os_log_impl( &dword_181A5C000,  v35,  v53,  "%{public}s nw_frame_create_external failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_93:
    if (v34) {
      free(v34);
    }

    goto LABEL_101;
  }

  id v10 = *((void *)v8 + 14);
  if (!v10) {
    goto LABEL_17;
  }
  if ((v8[51] & 0x100) != 0 && g_channel_check_validity)
  {
    if (g_channel_check_validity(v8, *((void *)v8 + 11)))
    {
      id v10 = *((void *)v9 + 14);
      goto LABEL_9;
    }

  if (v25) {
LABEL_81:
  }
    free(v25);
LABEL_99:
}

      if (v42) {
        free(v42);
      }
      goto LABEL_82;
    }
  }

  else
  {
  }

    os_log_type_t v40 = (void *)*((void *)v2 + 17);
    *((void *)v2 + 17) = v39;

    BOOL v41 = xpc_dictionary_get_BOOL(v1, "trust_invalid_certs");
    os_log_type_t v42 = 0x200000000000LL;
    if (!v41) {
      os_log_type_t v42 = 0LL;
    }
    *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFDFFFFFFFFFFFLL | v42;
    BOOL v43 = xpc_dictionary_get_BOOL(v1, "should_skip_probe_sampling");
    v44 = 0x400000000000LL;
    if (!v43) {
      v44 = 0LL;
    }
    *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFBFFFFFFFFFFFLL | v44;
    if (xpc_dictionary_get_BOOL(v1, "use_long_outstanding_queries")) {
      os_log_type_t v45 = 8LL;
    }
    else {
      os_log_type_t v45 = 0LL;
    }
    *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFFFFFF7LL | v45;
    BOOL v46 = xpc_dictionary_get_BOOL(v1, "use_awdl");
    os_log_type_t v47 = *((void *)v2 + 13);
    os_log_type_t v49 = *(unsigned __int16 *)(v47 + 108);
    os_log_type_t v48 = v47 + 108;
    os_log_type_t v50 = v49 | (*(unsigned __int8 *)(v48 + 2) << 16);
    if (v46) {
      id v51 = 8;
    }
    else {
      id v51 = 0;
    }
    id v52 = v50 & 0xFFFFFFF7;
    *(_WORD *)os_log_type_t v48 = v52 | v51;
    *(_BYTE *)(v48 + 2) = BYTE2(v52);
    unsigned int v53 = xpc_dictionary_get_BOOL(v1, "use_p2p");
    v54 = *((void *)v2 + 13);
    id v56 = *(unsigned __int16 *)(v54 + 108);
    id v55 = v54 + 108;
    unsigned int v57 = v56 | (*(unsigned __int8 *)(v55 + 2) << 16);
    if (v53) {
      char v58 = 16;
    }
    else {
      char v58 = 0;
    }
    os_log_type_t v59 = v57 & 0xFFFFFFEF;
    *(_WORD *)id v55 = v59 | v58;
    *(_BYTE *)(v55 + 2) = BYTE2(v59);
    char v60 = xpc_dictionary_get_BOOL(v1, "resolve_ptr");
    os_log_type_t v61 = 32LL;
    if (!v60) {
      os_log_type_t v61 = 0LL;
    }
    *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFFFFFDFLL | v61;
    xpc_dictionary_get_value(v1, "indefinite");
    __int16 v62 = (void *)objc_claimAutoreleasedReturnValue();
    v63 = v62 == 0LL;

    if (v63)
    {
LABEL_101:
      os_log_type_t v67 = xpc_dictionary_get_BOOL(v1, "no_fallback");
      id v68 = *((void *)v2 + 13);
      uint64_t v70 = *(unsigned __int16 *)(v68 + 108);
      v69 = v68 + 108;
      os_log_type_t v71 = v70 | (*(unsigned __int8 *)(v69 + 2) << 16);
      if (v67) {
        v72 = 32;
      }
      else {
        v72 = 0;
      }
      v73 = v71 & 0xFFFFFFDF;
      *(_WORD *)v69 = v73 | v72;
      *(_BYTE *)(v69 + 2) = BYTE2(v73);
      os_log_type_t v74 = xpc_dictionary_get_BOOL(v1, "no_proxy");
      BOOL v75 = *((void *)v2 + 13);
      v77 = *(unsigned __int16 *)(v75 + 108);
      os_log_type_t v76 = v75 + 108;
      v78 = v77 | (*(unsigned __int8 *)(v76 + 2) << 16);
      if (v74) {
        os_log_type_t v79 = 2;
      }
      else {
        os_log_type_t v79 = 0;
      }
      BOOL v80 = v78 & 0xFFFFFFFD;
      *(_WORD *)os_log_type_t v76 = v80 | v79;
      *(_BYTE *)(v76 + 2) = BYTE2(v80);
      os_log_type_t v81 = xpc_dictionary_get_BOOL(v1, "no_transform");
      os_log_type_t v82 = *((void *)v2 + 13);
      os_log_type_t v84 = *(unsigned __int16 *)(v82 + 108);
      os_log_type_t v83 = v82 + 108;
      v85 = v84 | (*(unsigned __int8 *)(v83 + 2) << 16);
      if (v81) {
        v86 = 4;
      }
      else {
        v86 = 0;
      }
      v87 = v85 & 0xFFFFFFFB;
      *(_WORD *)os_log_type_t v83 = v87 | v86;
      *(_BYTE *)(v83 + 2) = BYTE2(v87);
      v88 = xpc_dictionary_get_BOOL(v1, "server");
      os_log_type_t v89 = 0x8000LL;
      if (!v88) {
        os_log_type_t v89 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFFF7FFFLL | v89;
      *(_DWORD *)(*((void *)v2 + 13) + 103LL) = xpc_dictionary_get_uint64(v1, "multipath_service");
      *((_BYTE *)v2 + 92) = xpc_dictionary_get_uint64(v1, "data_mode");
      *((_DWORD *)v2 + 22) = xpc_dictionary_get_uint64(v1, "sleep_keepalive_interval");
      v90 = xpc_dictionary_get_BOOL(v1, "custom_protocols_only");
      os_log_type_t v91 = 2048LL;
      if (!v90) {
        os_log_type_t v91 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFFFF7FFLL | v91;
      *(_WORD *)(*((void *)v2 + 13) + 108LL) = *(_WORD *)(*((void *)v2 + 13) + 108LL) & 0xFFFE | xpc_dictionary_get_BOOL(v1, "discretionary");
      v92 = xpc_dictionary_get_BOOL(v1, "local_only");
      os_log_type_t v93 = 0x4000LL;
      if (!v92) {
        os_log_type_t v93 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFFFBFFFLL | v93;
      v94 = xpc_dictionary_get_BOOL(v1, "receive_any_interface");
      os_log_type_t v95 = 512LL;
      if (!v94) {
        os_log_type_t v95 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFFFFDFFLL | v95;
      *((_BYTE *)v2 + 93) = xpc_dictionary_get_uint64(v1, "ecn_mode");
      *(_DWORD *)(*((void *)v2 + 13) + 84LL) = xpc_dictionary_get_uint64(v1, "companion_preference");
      *(void *)length = 0LL;
      data = xpc_dictionary_get_data(v1, "initial_data_payload", (size_t *)length);
      if (*(void *)length && data)
      {
        os_log_type_t v97 = dispatch_data_create(data, *(size_t *)length, 0LL, 0LL);
        v98 = (void *)*((void *)v2 + 18);
        *((void *)v2 + 18) = v97;
      }

      if (object_getClass(v1) == v4)
      {
        v217 = xpc_dictionary_get_value(v1, "metadata");
        os_log_type_t v99 = v217;
        if (!v217) {
          goto LABEL_123;
        }
        if (object_getClass(v217) == (Class)MEMORY[0x1895F9240])
        {
          os_log_type_t v99 = xpc_retain(v99);
          if (v99) {
            objc_storeStrong((id *)v2 + 27, v99);
          }
          goto LABEL_123;
        }
      }

      os_log_type_t v99 = 0LL;
LABEL_123:
      BOOL v100 = xpc_dictionary_get_BOOL(v1, "allow_unusable_addresses");
      os_log_type_t v101 = 0x80000LL;
      if (!v100) {
        os_log_type_t v101 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFF7FFFFLL | v101;
      BOOL v102 = xpc_dictionary_get_BOOL(v1, "prefer_no_proxy");
      os_log_type_t v103 = *((void *)v2 + 13);
      os_log_type_t v105 = *(unsigned __int16 *)(v103 + 108);
      BOOL v104 = v103 + 108;
      BOOL v106 = v105 | (*(unsigned __int8 *)(v104 + 2) << 16);
      if (v102) {
        v107 = 256;
      }
      else {
        v107 = 0;
      }
      os_log_type_t v108 = v106 & 0xFFFFFEFF;
      *(_WORD *)BOOL v104 = v108 | v107;
      *(_BYTE *)(v104 + 2) = BYTE2(v108);
      BOOL v109 = xpc_dictionary_get_BOOL(v1, "https_proxy_is_opaque");
      v110 = 0x100000LL;
      if (!v109) {
        v110 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFEFFFFFLL | v110;
      v111 = xpc_dictionary_get_BOOL(v1, "https_proxy_over_tls");
      v112 = 0x200000LL;
      if (!v111) {
        v112 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFDFFFFFLL | v112;
      os_log_type_t v113 = xpc_dictionary_get_BOOL(v1, "attach_protocol_listener");
      os_log_type_t v114 = 0x400000LL;
      if (!v113) {
        os_log_type_t v114 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFBFFFFFLL | v114;
      os_log_type_t v115 = xpc_dictionary_get_BOOL(v1, "prohibit_joining_protocols");
      os_log_type_t v116 = 0x800000LL;
      if (!v115) {
        os_log_type_t v116 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFF7FFFFFLL | v116;
      os_log_type_t v117 = xpc_dictionary_get_BOOL(v1, "allow_joining_connected_fd");
      os_log_type_t v118 = 0x1000000LL;
      if (!v117) {
        os_log_type_t v118 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFEFFFFFFLL | v118;
      v119 = xpc_dictionary_get_BOOL(v1, "allow_duplicate_state_updates");
      v120 = 0x4000000LL;
      if (!v119) {
        v120 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFBFFFFFFLL | v120;
      os_log_type_t v121 = xpc_dictionary_get_BOOL(v1, "always_open_listener_socket");
      BOOL v122 = 0x8000000LL;
      if (!v121) {
        BOOL v122 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFF7FFFFFFLL | v122;
      os_log_type_t v123 = xpc_dictionary_get_BOOL(v1, "never_open_listener_socket");
      v124 = 0x10000000LL;
      if (!v123) {
        v124 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFEFFFFFFFLL | v124;
      v125 = xpc_dictionary_get_BOOL(v1, "disable_listener_datapath");
      v126 = 0x20000000LL;
      if (!v125) {
        v126 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFDFFFFFFFLL | v126;
      v127 = xpc_dictionary_get_BOOL(v1, "requires_dnssec_validation");
      v128 = 0x40000000LL;
      if (!v127) {
        v128 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFBFFFFFFFLL | v128;
      id v129 = xpc_dictionary_get_BOOL(v1, "known_tracker");
      char v130 = *((void *)v2 + 13);
      v132 = *(unsigned __int16 *)(v130 + 108);
      v131 = v130 + 108;
      v133 = v132 | (*(unsigned __int8 *)(v131 + 2) << 16);
      if (v129) {
        __int16 v134 = 0x4000;
      }
      else {
        __int16 v134 = 0;
      }
      v135 = v133 & 0xFFFFBFFF;
      *(_WORD *)v131 = v135 | v134;
      *(_BYTE *)(v131 + 2) = BYTE2(v135);
      *(_BYTE *)(*((void *)v2 + 13) + 102LL) = xpc_dictionary_get_uint64(v1, "attribution");
      uint64_t v136 = xpc_dictionary_get_BOOL(v1, "include_ble");
      v137 = 0x800000000LL;
      if (!v136) {
        v137 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFF7FFFFFFFFLL | v137;
      v138 = xpc_dictionary_get_BOOL(v1, "screen_off");
      v139 = 0x1000000000LL;
      if (!v138) {
        v139 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFEFFFFFFFFFLL | v139;
      v140 = xpc_dictionary_get_BOOL(v1, "internet_fallback");
      v141 = 0x2000000000LL;
      if (!v140) {
        v141 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFDFFFFFFFFFLL | v141;
      v142 = xpc_dictionary_get_BOOL(v1, "minimize_logging");
      v143 = 0x4000000000LL;
      if (!v142) {
        v143 = 0LL;
      }
      *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFBFFFFFFFFFLL | v143;

      goto LABEL_160;
    }

    uint64_t v64 = xpc_dictionary_get_BOOL(v1, "indefinite");
    BOOL v65 = v2;
    if (v65)
    {
      v66 = 128LL;
      if (v64) {
        v66 = 192LL;
      }
      *((void *)v2 + 12) = v66 | *((void *)v2 + 12) & 0xFFFFFFFFFFFFFF3FLL;
LABEL_100:

      goto LABEL_101;
    }

    __nwlog_obj();
    v218 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)length = 136446210;
    *(void *)&length[4] = "nw_parameters_set_indefinite";
    v258 = (const char *)_os_log_send_and_compose_impl();

    v274 = OS_LOG_TYPE_ERROR;
    v273 = 0;
    v219 = (char *)v258;
    if (!__nwlog_fault(v258, &v274, &v273))
    {
LABEL_307:
      if (v219) {
        free(v219);
      }
      goto LABEL_100;
    }

    if (v274 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t type = v274;
      if (os_log_type_enabled(v220, v274))
      {
        *(_DWORD *)length = 136446210;
        *(void *)&length[4] = "nw_parameters_set_indefinite";
        _os_log_impl(&dword_181A5C000, v220, type, "%{public}s called with null parameters", length, 0xCu);
      }
    }

    else
    {
      if (v273)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        typea = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v254 = v274;
        v222 = os_log_type_enabled(typea, v274);
        if (backtrace_string)
        {
          if (v222)
          {
            *(_DWORD *)length = 136446466;
            *(void *)&length[4] = "nw_parameters_set_indefinite";
            v276 = 2082;
            v277 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  typea,  v254,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  length,  0x16u);
          }

          free(backtrace_string);
        }

        else
        {
          if (v222)
          {
            *(_DWORD *)length = 136446210;
            *(void *)&length[4] = "nw_parameters_set_indefinite";
            _os_log_impl( &dword_181A5C000,  typea,  v254,  "%{public}s called with null parameters, no backtrace",  length,  0xCu);
          }
        }

        goto LABEL_306;
      }

      __nwlog_obj();
      v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      typeb = v274;
      if (os_log_type_enabled(v220, v274))
      {
        *(_DWORD *)length = 136446210;
        *(void *)&length[4] = "nw_parameters_set_indefinite";
        _os_log_impl( &dword_181A5C000,  v220,  typeb,  "%{public}s called with null parameters, backtrace limit exceeded",  length,  0xCu);
      }
    }

LABEL_306:
    v219 = (char *)v258;
    goto LABEL_307;
  }

  v214 = *(void *)(*((void *)v2 + 13) + 176LL);
  if (v214)
  {
LABEL_281:
    objc_storeStrong((id *)(v214 + 120), v38);
    goto LABEL_78;
  }

  v215 = calloc(1uLL, 0x90uLL);
  if (v215)
  {
LABEL_280:
    *(void *)(*((void *)v2 + 13) + 176LL) = v215;
    v214 = *(void *)(*((void *)v2 + 13) + 176LL);
    goto LABEL_281;
  }

  __nwlog_obj();
  v253 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v253, OS_LOG_TYPE_ERROR);
  *(_DWORD *)length = 136446722;
  *(void *)&length[4] = "strict_calloc";
  v276 = 2048;
  v277 = 1LL;
  v278 = 2048;
  v279 = 144LL;
  v259 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v259);
  if (!result)
  {
    free(v259);
    goto LABEL_280;
  }

  if (v18) {
    free(v18);
  }
}

      free(backtrace_string);
      goto LABEL_90;
    }

    __int16 v29 = (os_log_s *)__nwlog_obj();
    __int16 v30 = type[0];
    if (!os_log_type_enabled(v29, type[0])) {
      goto LABEL_90;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    uint64_t v31 = "%{public}s called with null queue";
LABEL_89:
    _os_log_impl(&dword_181A5C000, v29, v30, v31, buf, 0xCu);
LABEL_90:
    if (v28) {
      free(v28);
    }
    return 0LL;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v43) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v29 = (os_log_s *)__nwlog_obj();
      __int16 v30 = type[0];
      if (!os_log_type_enabled(v29, type[0])) {
        goto LABEL_90;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      uint64_t v31 = "%{public}s called with null block";
      goto LABEL_89;
    }

    if (!(_BYTE)v43)
    {
      __int16 v29 = (os_log_s *)__nwlog_obj();
      __int16 v30 = type[0];
      if (!os_log_type_enabled(v29, type[0])) {
        goto LABEL_90;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      uint64_t v31 = "%{public}s called with null block, backtrace limit exceeded";
      goto LABEL_89;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v29 = (os_log_s *)__nwlog_obj();
    __int16 v30 = type[0];
    BOOL v35 = os_log_type_enabled(v29, type[0]);
    if (backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v34 = "%{public}s called with null block, dumping backtrace:%{public}s";
        goto LABEL_79;
      }

      goto LABEL_80;
    }

    if (!v35) {
      goto LABEL_90;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    uint64_t v31 = "%{public}s called with null block, no backtrace";
    goto LABEL_89;
  }

  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int128 v4 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating MPTCP watcher", buf, 0xCu);
  }

  id v5 = socket(32, 3, 1);
  if (v5 < 0) {
    return 0LL;
  }
  id v6 = v5;
  v44 = 12;
  BOOL v43 = 0x100000001LL;
  if (ioctl(v5, 0x800C6502uLL, &v43))
  {
    os_log_type_t v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)addrinfo buf = 136446466;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v7;
    id v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v42) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (os_log_s *)gLogObj;
      id v10 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_44;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      os_log_type_t v11 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d";
      goto LABEL_43;
    }

    if (!(_BYTE)v42)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (os_log_s *)gLogObj;
      id v10 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_44;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      os_log_type_t v11 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_43;
    }

    uint64_t v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (os_log_s *)gLogObj;
    id v10 = type[0];
    uint64_t v14 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_44;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      os_log_type_t v11 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, no backtrace";
      goto LABEL_43;
    }

    if (v14)
    {
      *(_DWORD *)addrinfo buf = 136446722;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v13;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
    }

    free(v13);
    goto LABEL_44;
  }

  os_log_type_t v42 = 1;
  if (!ioctl(v6, 0x8004667EuLL, &v42))
  {
    *(void *)addrinfo buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    *(void *)&buf[24] = dispatch_source_create( MEMORY[0x1895F8B60],  v6,  0LL,  (dispatch_queue_t)nw_policy_event_queue(void)::queue);
    BOOL v15 = *(dispatch_source_s **)(*(void *)&buf[8] + 24LL);
    if (v15)
    {
      os_log_type_t v16 = MEMORY[0x1895F87A8];
      handler[0] = MEMORY[0x1895F87A8];
      handler[1] = 0x40000000LL;
      handler[2] = __network_config_mptcp_watcher_create_block_invoke;
      handler[3] = &unk_189BB9580;
      os_log_type_t v39 = v6;
      handler[4] = buf;
      dispatch_source_set_cancel_handler(v15, handler);
      id v17 = *(dispatch_source_s **)(*(void *)&buf[8] + 24LL);
      v36[0] = v16;
      v36[1] = 0x40000000LL;
      v36[2] = __network_config_mptcp_watcher_create_block_invoke_2;
      v36[3] = &unk_189BB95F8;
      os_log_type_t v37 = v6;
      v36[4] = a2;
      v36[5] = a1;
      dispatch_source_set_event_handler(v17, v36);
      dispatch_activate(*(dispatch_object_t *)(*(void *)&buf[8] + 24LL));
      os_log_type_t v18 = *(void *)(*(void *)&buf[8] + 24LL);
LABEL_62:
      _Block_object_dispose(buf, 8);
      return v18;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)os_log_type_t type = 136446210;
    BOOL v46 = "network_config_mptcp_watcher_create";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    BOOL v41 = OS_LOG_TYPE_ERROR;
    os_log_type_t v40 = 0;
    if (__nwlog_fault(v21, &v41, &v40))
    {
      if (v41 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        id v23 = v41;
        if (os_log_type_enabled(v22, v41))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v46 = "network_config_mptcp_watcher_create";
          os_log_type_t v24 = "%{public}s dispatch_source_create failed";
LABEL_58:
          _os_log_impl(&dword_181A5C000, v22, v23, v24, (uint8_t *)type, 0xCu);
        }
      }

      else if (v40)
      {
        BOOL v26 = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        id v23 = v41;
        uint64_t v27 = os_log_type_enabled(v22, v41);
        if (v26)
        {
          if (v27)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            BOOL v46 = "network_config_mptcp_watcher_create";
            os_log_type_t v47 = 2082;
            os_log_type_t v48 = v26;
            _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
          }

          free(v26);
          goto LABEL_59;
        }

        if (v27)
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v46 = "network_config_mptcp_watcher_create";
          os_log_type_t v24 = "%{public}s dispatch_source_create failed, no backtrace";
          goto LABEL_58;
        }
      }

      else
      {
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        id v23 = v41;
        if (os_log_type_enabled(v22, v41))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v46 = "network_config_mptcp_watcher_create";
          os_log_type_t v24 = "%{public}s dispatch_source_create failed, backtrace limit exceeded";
          goto LABEL_58;
        }
      }
    }

    if (!v8) {
      return;
    }
    goto LABEL_81;
  }

  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    __int128 v4 = (os_log_s *)gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v42 = "nw_protocol_masque_input_finished";
      BOOL v43 = 2082;
      v44 = handle + 531;
      os_log_type_t v45 = 2080;
      BOOL v46 = " ";
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%signoring input_finished, receiving connect",  buf,  0x20u);
    }
  }

    if (!v9) {
      goto LABEL_82;
    }
LABEL_81:
    free(v9);
    goto LABEL_82;
  }

  id v3 = (const __CFURL *)*((void *)v1 + 4);
  if (v3)
  {
    clientContext.version = 0LL;
    clientContext.info = v1;
    clientContext.retain = nw_pac_resolver_retain;
    clientContext.release = nw_pac_resolver_release;
    clientContext.copyDescription = 0LL;
    __int128 v4 = (const __CFURL *)*((void *)v1 + 3);
    if (*((_OWORD *)v1 + 3) == 0LL) {
      id v5 = CFNetworkExecuteProxyAutoConfigurationURL( v3,  v4,  (CFProxyAutoConfigurationResultCallback)nw_pac_resolver_callback,  &clientContext);
    }
    else {
      id v5 = (CFRunLoopSourceRef)MEMORY[0x186E0FEA0](v3, v4);
    }
    os_log_type_t v7 = v5;
    if (v5)
    {
      pthread_mutex_lock(&sOutstandingPacURLMutex);
      id v12 = (__CFArray *)nw_get_outstanding_pac_urls(void)::gPACURLs;
      if (nw_get_outstanding_pac_urls(void)::gPACURLs)
      {
        v53.length = CFArrayGetCount((CFArrayRef)nw_get_outstanding_pac_urls(void)::gPACURLs);
        v53.location = 0LL;
        if (!CFArrayContainsValue(v12, v53, v3))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v13 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v49 = "nw_add_outstanding_pac_url";
            os_log_type_t v50 = 2114;
            id v51 = v3;
            _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s Adding outstanding PAC URL: %{public}@",  buf,  0x16u);
          }

          CFArrayAppendValue(v12, v3);
        }

        goto LABEL_72;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v16 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v49 = "nw_add_outstanding_pac_url";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v45 = 0;
      if (__nwlog_fault(v17, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (os_log_s *)(id)gLogObj;
          id v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v49 = "nw_add_outstanding_pac_url";
            _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s nw_get_outstanding_pac_urls failed", buf, 0xCu);
          }
        }

        else if (v45)
        {
          uint64_t v27 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (os_log_s *)(id)gLogObj;
          BOOL v28 = type;
          __int16 v29 = os_log_type_enabled(v18, type);
          if (v27)
          {
            if (v29)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              os_log_type_t v49 = "nw_add_outstanding_pac_url";
              os_log_type_t v50 = 2082;
              id v51 = v27;
              _os_log_impl( &dword_181A5C000,  v18,  v28,  "%{public}s nw_get_outstanding_pac_urls failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v27);
            if (!v17) {
              goto LABEL_72;
            }
            goto LABEL_71;
          }

          if (v29)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v49 = "nw_add_outstanding_pac_url";
            _os_log_impl( &dword_181A5C000,  v18,  v28,  "%{public}s nw_get_outstanding_pac_urls failed, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (os_log_s *)(id)gLogObj;
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v49 = "nw_add_outstanding_pac_url";
            _os_log_impl( &dword_181A5C000,  v18,  v33,  "%{public}s nw_get_outstanding_pac_urls failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v17)
      {
LABEL_72:
        pthread_mutex_unlock(&sOutstandingPacURLMutex);
        goto LABEL_73;
      }

  uint64_t v14 = (void *)a1;
  BOOL v15 = v7;
LABEL_81:
  tcp_listener_call_error_handler_locked(v14, v15);
LABEL_82:
  os_unfair_lock_unlock(v2);
}

  PBDataWriterWriteBOOLField();
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_25:
    if ((has & 0x80) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  os_log_type_t v33 = (os_log_s *)__nwlog_obj();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_INFO,  "%{public}s No default input handler, skipping connected callback",  buf,  0xCu);
  }

    if (v35) {
      free(v35);
    }
    os_log_type_t v50 = (void *)nw_frame_get_buffer(v25, 0LL);
    if (v50) {
      free(v50);
    }
    nw_frame_reset(v25, 0LL, 0, 0LL, 0LL);
    os_release((void *)v25);
    return 0LL;
  }

  if (gLogDatapath)
  {
    BOOL v75 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)os_log_type_t v91 = v9;
      _os_log_impl( &dword_181A5C000,  v75,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s returning frame of %u bytes",  buf,  0x1Cu);
    }
  }

  *(void *)(v25 + 16) = 0LL;
  os_log_type_t v32 = (uint64_t *)handle[17];
  *(void *)(v25 + 24) = v32;
  char *v32 = v25;
  handle[17] = v25 + 16;
  *(void *)(v25 + 32) = 0LL;
  tqh_last = a6->tqh_last;
  *(void *)(v25 + 40) = tqh_last;
  *tqh_last = (nw_frame *)v25;
  a6->tqh_last = (nw_frame **)(v25 + 32);
  return 1LL;
}

        free(backtrace_string);
        goto LABEL_100;
      }

      if (!v49) {
        goto LABEL_100;
      }
      id v56 = *(void *)(a1 + 64);
      if (v56) {
        id v55 = (const char *)(v56 + 205);
      }
      else {
        id v55 = "";
      }
LABEL_98:
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v80 = "send_data_callback_block_invoke";
      os_log_type_t v81 = 2082;
      os_log_type_t v82 = v55;
      BOOL v41 = "%{public}s %{public}s unexpected NULL in source frame, no backtrace";
      goto LABEL_99;
    }

    os_log_type_t v37 = (os_log_s *)__nwlog_obj();
    os_log_type_t v38 = type;
    if (!os_log_type_enabled(v37, type)) {
      goto LABEL_100;
    }
    unsigned int v53 = *(void *)(a1 + 64);
    if (v53) {
      id v52 = (const char *)(v53 + 205);
    }
    else {
      id v52 = "";
    }
LABEL_85:
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v80 = "send_data_callback_block_invoke";
    os_log_type_t v81 = 2082;
    os_log_type_t v82 = v52;
    BOOL v41 = "%{public}s %{public}s unexpected NULL in source frame, backtrace limit exceeded";
    goto LABEL_99;
  }

  os_log_type_t v37 = (os_log_s *)__nwlog_obj();
  os_log_type_t v38 = type;
  if (os_log_type_enabled(v37, type))
  {
    v44 = *(void *)(a1 + 64);
    if (v44) {
      os_log_type_t v40 = (const char *)(v44 + 205);
    }
    else {
      os_log_type_t v40 = "";
    }
    goto LABEL_57;
  }

      if (v30) {
        free(v30);
      }
      goto LABEL_6;
    }

    id v10 = nw_proxy_hop_create_masque((void *)v6);
    nw_proxy_hop_set_masque_version(v10, 2);
    os_log_type_t v11 = v10;
    masque = v11;
    if (v11)
    {
      *((_BYTE *)v11 + 80) |= 0x20u;
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v50 = "nw_proxy_hop_set_fallback_only";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v47 = 0;
    if (__nwlog_fault(v34, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v50 = "nw_proxy_hop_set_fallback_only";
          _os_log_impl(&dword_181A5C000, v35, v36, "%{public}s called with null hop", buf, 0xCu);
        }
      }

      else if (v47)
      {
        os_log_type_t v42 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v43 = type;
        v44 = os_log_type_enabled(v35, type);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            os_log_type_t v50 = "nw_proxy_hop_set_fallback_only";
            id v51 = 2082;
            id v52 = v42;
            _os_log_impl( &dword_181A5C000,  v35,  v43,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v42);
          goto LABEL_85;
        }

        if (v44)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v50 = "nw_proxy_hop_set_fallback_only";
          _os_log_impl(&dword_181A5C000, v35, v43, "%{public}s called with null hop, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v46 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v50 = "nw_proxy_hop_set_fallback_only";
          _os_log_impl( &dword_181A5C000,  v35,  v46,  "%{public}s called with null hop, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    free(v32);
    if (!v22) {
      goto LABEL_136;
    }
    goto LABEL_135;
  }

    if (v40) {
      free(v40);
    }
LABEL_14:
    service_class = nw_ip_metadata_get_service_class((nw_protocol_metadata_t)v7);
    if (service_class > nw_service_class_signaling) {
      id v10 = 0;
    }
    else {
      id v10 = dword_182667530[service_class];
    }
    *(_DWORD *)(a2 + 176) = v10;
    *(_DWORD *)(a2 + 180) = nw_ip_metadata_get_fragmentation_value(v7);
  }

  if ((*(_WORD *)(a2 + 204) & 8) == 0) {
    goto LABEL_22;
  }
  os_log_type_t v22 = v6;
  id v23 = v7;
  *(_OWORD *)os_log_type_t type = *((_OWORD *)v23 + 1);

  os_log_type_t v24 = *v65;
  if (!*v65) {
    goto LABEL_49;
  }
  uint64_t v25 = 0;
  while (2)
  {
    BOOL v26 = v23;
    uint64_t v27 = (id)v23[1];

    BOOL v28 = (void *)v24[6];
    if (v28)
    {
      __int16 v29 = v28;
      __int16 v30 = v29[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v27, (uint64_t)v30)
        && !uuid_compare((const unsigned __int8 *)type, (const unsigned __int8 *)v24 + 16))
      {
        os_retain(v26);
        uint64_t v31 = (void *)v24[6];
        if (v31) {
          os_release(v31);
        }
        v24[6] = (uint64_t)v26;
        *((_BYTE *)v24 + 66) = *((_BYTE *)v24 + 66) & 0xBF | (v22 << 6);
        uint64_t v25 = 1;
        if (v30) {
LABEL_41:
        }
          os_release(v30);
      }

      else if (v30)
      {
        goto LABEL_41;
      }
    }

    if (v27) {
      os_release(v27);
    }
    os_log_type_t v24 = (uint64_t *)*v24;
    if (v24) {
      continue;
    }
    break;
  }

  if ((v25 & 1) != 0) {
    goto LABEL_51;
  }
LABEL_49:
  os_log_type_t v32 = calloc(1uLL, 0x48uLL);
  if (v32) {
    goto LABEL_50;
  }
  BOOL v46 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  uint64_t v70 = "strict_calloc";
  os_log_type_t v71 = 2048;
  v72 = 1LL;
  v73 = 2048;
  os_log_type_t v74 = 72LL;
  os_log_type_t v47 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v47))
  {
    free(v47);
LABEL_50:
    v32[6] = os_retain(v23);
    *((_OWORD *)v32 + 1) = *(_OWORD *)type;
    *((_BYTE *)v32 + 66) = *((_BYTE *)v32 + 66) & 0xBF | (v22 << 6);
    char *v32 = 0LL;
    os_log_type_t v33 = *(void **)(a2 + 72);
    v32[1] = v33;
    *os_log_type_t v33 = v32;
    *(void *)(a2 + 72) = v32;
LABEL_51:
    __int128 v4 = a3;
    goto LABEL_6;
  }

  __break(1u);
}

  if (v17) {
    free(v17);
  }
  uint64_t v14 = 0LL;
LABEL_9:

  return v14;
}

            id v10 = 1LL;
LABEL_81:

            goto LABEL_82;
          }

        free(v16);
        goto LABEL_81;
      }

      if (v32)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl( &dword_181A5C000,  v17,  v31,  "%{public}s called with null (xpc_get_type(object) == (&_xpc_type_dictionary)), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v17, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl( &dword_181A5C000,  v17,  v37,  "%{public}s called with null (xpc_get_type(object) == (&_xpc_type_dictionary)), backtrace limit exceeded",  buf,  0xCu);
      }
    }

  if (v48) {
    free(v48);
  }
}

  if (v23) {
    free(v23);
  }
LABEL_14:
  if ((nw_protocol *)a1[2].identifier != a2) {
    return 0LL;
  }
  os_log_type_t v11 = &a1[6].flow_id[13];
  if ((*(_WORD *)&a1[6].flow_id[13] & 0x44) == 4 && LODWORD(a1[4].identifier) == 2)
  {
    *(void *)os_log_type_t type = 1LL;
    if (setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 128, type, 8u) < 0)
    {
      id v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v13 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        __int16 v36 = "nw_protocol_socket_reset_linger";
        os_log_type_t v37 = 2080;
        os_log_type_t v38 = (char *)&a1[6].identifier + 4;
        os_log_type_t v39 = 1024;
        os_log_type_t v40 = v12;
        _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_LINGER failed %{darwin.errno}d",  buf,  0x1Cu);
      }
    }
  }

  nw_socket_cancel_input_source((uint64_t)&a1[1].output_handler, (uint64_t)a2);
  BOOL v15 = a1[3].callbacks;
  if (v15)
  {
    nw_queue_cancel_source((uint64_t)a1[3].callbacks, v14);
    a1[3].callbacks = 0LL;
    if ((*(_WORD *)v11 & 0x800) == 0)
    {
      nw_queue_resume_source((uint64_t)v15, v14);
      *(_WORD *)v11 |= 0x800u;
    }
  }

  os_log_type_t v16 = *(void *)a1[3].flow_id;
  if (v16)
  {
    nw_queue_cancel_source(v16, v14);
    *(void *)a1[3].flow_id = 0LL;
  }

  a1[2].identifier = 0LL;
  if (a3)
  {
    nw_protocol_socket_cancel((uint64_t)&a1[1].output_handler);
    if (((uint64_t)a1[3].handle & 1) != 0)
    {
      output_handler = a1[3].output_handler;
      if (output_handler) {
        os_release(output_handler);
      }
    }

    a1[3].output_handler = 0LL;
    if (((uint64_t)a1[2].handle & 1) != 0)
    {
      os_log_type_t v18 = a1[2].output_handler;
      if (v18) {
        os_release(v18);
      }
    }

    a1[2].output_handler = 0LL;
    nw_protocol_destroy((uint64_t)&a1[1].output_handler, 0LL);
  }

  return 1LL;
}

    if (v42) {
      free(v42);
    }
    goto LABEL_82;
  }

  if ((*(_WORD *)(a1 + 301) & 0x80) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v40 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)os_log_type_t v74 = 136446466;
      *(void *)&v74[4] = "nw_socket_add_socket_events";
      *(_WORD *)&v74[12] = 2082;
      *(void *)&v74[14] = a1 + 308;
      _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s error in adding socket event source",  v74,  0x16u);
    }
  }

  BOOL result = 0LL;
  *(void *)(a1 + 96) = v7;
  return result;
}

    if (!v47) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }

  id v23 = v21;
  os_log_type_t v24 = 0;
  uint64_t v25 = 0;
  BOOL v26 = (unsigned int *)((char *)v294.msg_control + v294.msg_controllen);
  do
  {
    int sa_family = v21->sa_family;
    if (sa_family == 2)
    {
      if (!msg_control[1])
      {
        os_log_type_t v32 = msg_control[2];
        if (v32 == 20)
        {
          v293 = *((unsigned __int16 *)msg_control + 7);
        }

        else if (v32 == 7)
        {
          *(void *)address = 528LL;
          *(void *)&address[8] = 0LL;
          *(_DWORD *)&address[4] = msg_control[3];
          *(_WORD *)&address[2] = *(_WORD *)v21->sa_data;
          uint64_t v25 = 16;
          os_log_type_t v24 = 2;
        }
      }
    }

    else if (sa_family == 30 && msg_control[1] == 41 && msg_control[2] == 46)
    {
      *(void *)address = 7708LL;
      memset(&address[8], 0, 20);
      __int16 v30 = msg_control[7];
      v293 = v30;
      *(_OWORD *)&address[8] = *(_OWORD *)(msg_control + 3);
      if (address[8] != 254 || (address[9] & 0xC0) != 0x80) {
        __int16 v30 = 0;
      }
      *(_DWORD *)&address[24] = v30;
      *(_WORD *)&address[2] = *(_WORD *)v21->sa_data;
      uint64_t v25 = 28;
      os_log_type_t v24 = 30;
    }

    if (v5)
    {
      uint64_t v31 = msg_control[1];
      if (v31 != 41)
      {
        if (v31 || msg_control[2] != 27) {
          goto LABEL_16;
        }
LABEL_15:
        char *v5 = msg_control[3];
        goto LABEL_16;
      }

      if (msg_control[2] == 36) {
        goto LABEL_15;
      }
    }

      used_timestamps = v1->used_timestamps;
      goto LABEL_30;
    }

    LODWORD(v373) = -1;
    LODWORD(v379) = -1;
    v371 = -1;
    v372 = -1;
    v382 = -1;
LABEL_94:
    if ((_WORD)v4)
    {
      transport_connect_milliseconds = nw_connection_get_transport_connect_milliseconds(v1, v4, 0);
      if ((v3 & 1) != 0)
      {
        os_log_type_t v45 = nw_connection_copy_establishment_report_on_queue(v1);
        if (v45)
        {
          BOOL v46 = (void *)nw_protocol_boringssl_copy_definition();
          handshake_ms_for_protocol = nw_establishment_report_get_handshake_ms_for_protocol(v45, v46);
        }

        else
        {
          handshake_ms_for_protocol = -1;
        }
      }

      else
      {
        handshake_ms_for_protocol = -1;
      }
    }

    else
    {
      handshake_ms_for_protocol = -1;
      transport_connect_milliseconds = -1;
    }

    v385 = 0LL;
    v386 = 0LL;
    v384 = 0;
    nw_connection_fillout_data_transfer_snapshot_on_nw_queue(v1, (uint64_t *)&v386, &v385, &v384, 0);
    os_log_type_t v48 = nw_endpoint_handler_copy_connected_flow_handler(v1->parent_endpoint_handler);
    v410[0] = 0LL;
    v410[1] = 0LL;
    nw_endpoint_handler_get_client_id(v48, (unsigned __int8 *)v410);
    v370 = (void *)nw_endpoint_handler_copy_connected_path(v48);
    os_log_type_t v49 = nw_connection_copy_connected_local_endpoint(v1);
    os_log_type_t v50 = nw_connection_copy_connected_remote_endpoint(v1);
    start_time = v1->start_time;
    id v52 = mach_continuous_time();
    if (v52 <= 1) {
      unsigned int v53 = 1LL;
    }
    else {
      unsigned int v53 = v52;
    }
    v54 = nw_delta_nanos(start_time, v53);
    id v55 = v54 / 0xF4240;
    if (v54 > 0xF423FFFFFFFFFLL) {
      LODWORD(v55) = -1;
    }
    v362 = v55;
    if (v6)
    {
      if ((v3 & 1) != 0)
      {
        id v56 = *((void *)&off_189BC7440 + nw_connection_get_tls_version(v1));
        if (v386)
        {
          if ((*((_BYTE *)v1 + 109) & 4) != 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            unsigned int v57 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_272;
            }
            char v58 = v49;
            v363 = v50;
            top_id = v1->top_id;
            logging_description = nw_endpoint_get_logging_description(v1->endpoint);
            parameters = v1->parameters;
            id_string = nw_endpoint_handler_get_id_string(v48);
            description = nw_endpoint_get_description(v58);
            v135 = nw_endpoint_get_logging_description(v363);
            uint64_t v136 = *((void *)v386 + 1);
            v137 = *((void *)v386 + 5);
            v138 = *((void *)v386 + 6);
            v139 = *((void *)v386 + 14);
            v140 = *((void *)v386 + 15) % 0x3E8;
            v141 = *((void *)v386 + 8);
            v142 = *((void *)v386 + 9);
            v144 = *((void *)v386 + 10);
            v143 = *((void *)v386 + 11);
            v146 = *((void *)v386 + 12);
            v145 = *((void *)v386 + 13);
            *(_DWORD *)&v405[134] = *((void *)v386 + 15) / 0x3E8;
            *(void *)&v405[146] = v144;
            *(void *)&v405[166] = v143;
            *(void *)&v405[176] = v146;
            *(void *)&v405[186] = v145;
            *(_DWORD *)v388 = top_id;
            *(void *)&v388[12] = v1->top_uuid;
            *(void *)&v388[22] = logging_description;
            *(void *)&v389[2] = parameters;
            v391 = id_string;
            *(_WORD *)&v388[4] = 1042;
            v392 = 1042;
            *(_DWORD *)&v388[6] = 16;
            v393 = 16;
            *(_WORD *)&v388[10] = 2098;
            v394 = 2098;
            v395 = v410;
            v397 = description;
            v399 = v135;
            *(_WORD *)v389 = 2114;
            v400 = 2114;
            *(_DWORD *)v403 = v362 / 0x3E8;
            *(_DWORD *)((char *)v404 + 2) = v371 / 0x3E8;
            v404[2] = v371 % 0x3E8;
            *(_DWORD *)&v405[2] = v373 / 0x3E8;
            *(_DWORD *)&v405[8] = v373 % 0x3E8;
            *(_DWORD *)&v405[14] = v372 / 0x3E8;
            *(_DWORD *)&v405[20] = v372 % 0x3E8;
            *(_DWORD *)&v405[26] = v379 / 0x3E8;
            *(_DWORD *)&v405[32] = v379 % 0x3E8;
            *(void *)&v405[38] = v383;
            *(_DWORD *)&v405[48] = v382 / 0x3E8;
            *(_DWORD *)&v405[54] = v382 % 0x3E8;
            *(_DWORD *)&v405[60] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v405[66] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v388[20] = 2082;
            v390 = 2082;
            v396 = 2082;
            v398 = 2082;
            *(_WORD *)&v405[36] = 2082;
            *(_WORD *)&v405[70] = 2082;
            *(void *)&v405[72] = v56;
            *(_DWORD *)&v405[82] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v405[88] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v405[94] = v138;
            *(void *)&v405[104] = v142;
            *(void *)&v405[114] = v136;
            *(void *)&v405[124] = v137;
            *(_DWORD *)&v405[140] = v140;
            *(void *)&v405[156] = v141;
            *(_WORD *)&v405[92] = 2048;
            *(_WORD *)&v405[102] = 2048;
            *(_WORD *)&v405[112] = 2048;
            *(_WORD *)&v405[122] = 2048;
            *(_WORD *)&v405[144] = 2048;
            *(_WORD *)&v405[154] = 2048;
            *(_WORD *)&v405[164] = 2048;
            *(_WORD *)&v405[174] = 2048;
            *(_WORD *)&v405[184] = 2048;
            v406 = 2048;
            v407 = v139;
            LOWORD(v404[0]) = 1024;
            HIWORD(v404[1]) = 1024;
            *(_WORD *)v405 = 1024;
            *(_WORD *)&v405[6] = 1024;
            *(_WORD *)&v405[12] = 1024;
            *(_WORD *)&v405[18] = 1024;
            *(_WORD *)&v405[24] = 1024;
            *(_WORD *)&v405[30] = 1024;
            *(_WORD *)&v405[46] = 1024;
            *(_WORD *)&v405[52] = 1024;
            *(_WORD *)&v405[58] = 1024;
            *(_WORD *)&v405[64] = 1024;
            *(_WORD *)&v405[80] = 1024;
            *(_WORD *)&v405[86] = 1024;
            *(_WORD *)&v405[132] = 1024;
            *(_WORD *)&v405[138] = 1024;
            v402 = 1024;
            *(_WORD *)&v403[4] = 1024;
            *(_DWORD *)&v403[6] = v362 % 0x3E8;
            *(_DWORD *)addrinfo buf = 67119362;
            v401 = v370;
            v128 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%0"
                   "3us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            id v129 = v57;
            char v130 = 328;
          }

          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            unsigned int v57 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_272;
            }
            char v58 = v49;
            v363 = v50;
            os_log_type_t v59 = v1->top_id;
            v359 = nw_endpoint_get_logging_description(v1->endpoint);
            char v60 = v1->parameters;
            os_log_type_t v61 = nw_endpoint_handler_get_id_string(v48);
            __int16 v62 = nw_endpoint_get_description(v58);
            v63 = nw_endpoint_get_logging_description(v363);
            else {
              uint64_t v64 = off_189BB70A8[privacy_stance - 1];
            }
            v244 = *((void *)v386 + 1);
            v245 = *((void *)v386 + 6);
            v246 = *((void *)v386 + 14);
            v247 = *((void *)v386 + 15) / 0x3E8;
            v248 = *((void *)v386 + 15) % 0x3E8;
            v249 = *((void *)v386 + 8);
            v250 = *((void *)v386 + 9);
            v252 = *((void *)v386 + 10);
            v251 = *((void *)v386 + 11);
            v253 = *((void *)v386 + 12);
            v254 = *((void *)v386 + 13);
            *(void *)&v405[134] = *((void *)v386 + 5);
            *(_DWORD *)&v405[150] = v248;
            *(void *)&v405[166] = v249;
            *(void *)&v405[176] = v251;
            *(void *)&v405[186] = v253;
            v409 = v246;
            *(_DWORD *)v388 = v59;
            *(void *)&v388[12] = v1->top_uuid;
            *(void *)&v388[22] = v359;
            *(void *)&v389[2] = v60;
            v391 = v61;
            *(_WORD *)&v388[4] = 1042;
            v392 = 1042;
            *(_DWORD *)&v388[6] = 16;
            v393 = 16;
            *(_WORD *)&v388[10] = 2098;
            v394 = 2098;
            v395 = v410;
            v397 = v62;
            v399 = v63;
            *(_WORD *)v389 = 2114;
            v400 = 2114;
            *(void *)v403 = v64;
            v404[0] = v362 / 0x3E8;
            *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
            *(_DWORD *)v405 = v371 / 0x3E8;
            *(_DWORD *)&v405[6] = v371 % 0x3E8;
            *(_DWORD *)&v405[12] = v373 / 0x3E8;
            *(_DWORD *)&v405[18] = v373 % 0x3E8;
            *(_DWORD *)&v405[24] = v372 / 0x3E8;
            *(_DWORD *)&v405[30] = v372 % 0x3E8;
            *(_DWORD *)&v405[36] = v379 / 0x3E8;
            *(_DWORD *)&v405[42] = v379 % 0x3E8;
            *(void *)&v405[48] = v383;
            *(_DWORD *)&v405[58] = v382 / 0x3E8;
            *(_DWORD *)&v405[64] = v382 % 0x3E8;
            *(_DWORD *)&v405[70] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v405[76] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v388[20] = 2082;
            v390 = 2082;
            v396 = 2082;
            v398 = 2082;
            v402 = 2082;
            *(_WORD *)&v405[46] = 2082;
            *(_WORD *)&v405[80] = 2082;
            *(void *)&v405[82] = v56;
            *(_DWORD *)&v405[92] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v405[98] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v405[104] = v245;
            *(void *)&v405[114] = v250;
            *(void *)&v405[124] = v244;
            *(_DWORD *)&v405[144] = v247;
            *(void *)&v405[156] = v252;
            v407 = v254;
            *(_WORD *)&v405[102] = 2048;
            *(_WORD *)&v405[112] = 2048;
            *(_WORD *)&v405[122] = 2048;
            *(_WORD *)&v405[132] = 2048;
            *(_WORD *)&v405[154] = 2048;
            *(_WORD *)&v405[164] = 2048;
            *(_WORD *)&v405[174] = 2048;
            *(_WORD *)&v405[184] = 2048;
            v406 = 2048;
            v408 = 2048;
            LOWORD(v404[1]) = 1024;
            HIWORD(v404[2]) = 1024;
            *(_WORD *)&v405[4] = 1024;
            *(_WORD *)&v405[10] = 1024;
            *(_WORD *)&v405[16] = 1024;
            *(_WORD *)&v405[22] = 1024;
            *(_WORD *)&v405[28] = 1024;
            *(_WORD *)&v405[34] = 1024;
            *(_WORD *)&v405[40] = 1024;
            *(_WORD *)&v405[56] = 1024;
            *(_WORD *)&v405[62] = 1024;
            *(_WORD *)&v405[68] = 1024;
            *(_WORD *)&v405[74] = 1024;
            *(_WORD *)&v405[90] = 1024;
            *(_WORD *)&v405[96] = 1024;
            *(_WORD *)&v405[142] = 1024;
            *(_WORD *)&v405[148] = 1024;
            *(_WORD *)&v403[8] = 1024;
            *(_DWORD *)addrinfo buf = 67119618;
            v401 = v370;
            v128 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%0"
                   "3us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            id v129 = v57;
            char v130 = 338;
          }

          goto LABEL_219;
        }

        if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          unsigned int v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          v358 = v49;
          v367 = v50;
          v162 = v1->top_id;
          v163 = nw_endpoint_get_logging_description(v1->endpoint);
          v164 = v1->parameters;
          v165 = nw_endpoint_handler_get_id_string(v48);
          v166 = nw_endpoint_get_description(v358);
          v167 = nw_endpoint_get_logging_description(v367);
          *(_DWORD *)addrinfo buf = 67116290;
          *(_DWORD *)v388 = v162;
          *(_WORD *)&v388[4] = 1042;
          *(_DWORD *)&v388[6] = 16;
          *(_WORD *)&v388[10] = 2098;
          *(void *)&v388[12] = v1->top_uuid;
          *(_WORD *)&v388[20] = 2082;
          *(void *)&v388[22] = v163;
          *(_WORD *)v389 = 2114;
          *(void *)&v389[2] = v164;
          v390 = 2082;
          v391 = v165;
          v392 = 1042;
          v393 = 16;
          v394 = 2098;
          v395 = v410;
          v396 = 2082;
          v397 = v166;
          v398 = 2082;
          v399 = v167;
          v400 = 2114;
          v401 = v370;
          v402 = 1024;
          *(_DWORD *)v403 = v362 / 0x3E8;
          *(_WORD *)&v403[4] = 1024;
          *(_DWORD *)&v403[6] = v362 % 0x3E8;
          LOWORD(v404[0]) = 1024;
          *(_DWORD *)((char *)v404 + 2) = v371 / 0x3E8;
          HIWORD(v404[1]) = 1024;
          v404[2] = v371 % 0x3E8;
          *(_WORD *)v405 = 1024;
          *(_DWORD *)&v405[2] = v373 / 0x3E8;
          *(_WORD *)&v405[6] = 1024;
          *(_DWORD *)&v405[8] = v373 % 0x3E8;
          *(_WORD *)&v405[12] = 1024;
          *(_DWORD *)&v405[14] = v372 / 0x3E8;
          *(_WORD *)&v405[18] = 1024;
          *(_DWORD *)&v405[20] = v372 % 0x3E8;
          *(_WORD *)&v405[24] = 1024;
          *(_DWORD *)&v405[26] = v379 / 0x3E8;
          *(_WORD *)&v405[30] = 1024;
          *(_DWORD *)&v405[32] = v379 % 0x3E8;
          *(_WORD *)&v405[36] = 2082;
          *(void *)&v405[38] = v383;
          *(_WORD *)&v405[46] = 1024;
          *(_DWORD *)&v405[48] = v382 / 0x3E8;
          *(_WORD *)&v405[52] = 1024;
          *(_DWORD *)&v405[54] = v382 % 0x3E8;
          *(_WORD *)&v405[58] = 1024;
          *(_DWORD *)&v405[60] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v405[64] = 1024;
          *(_DWORD *)&v405[66] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v405[70] = 2082;
          *(void *)&v405[72] = v56;
          *(_WORD *)&v405[80] = 1024;
          *(_DWORD *)&v405[82] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v405[86] = 1024;
          *(_DWORD *)&v405[88] = handshake_ms_for_protocol % 0x3E8;
          v168 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us, %{public}s took %u.%03us";
          v169 = v57;
          v170 = 216;
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          unsigned int v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          v358 = v49;
          v367 = v50;
          BOOL v104 = v1->top_id;
          os_log_type_t v105 = nw_endpoint_get_logging_description(v1->endpoint);
          BOOL v106 = v1->parameters;
          v107 = nw_endpoint_handler_get_id_string(v48);
          os_log_type_t v108 = nw_endpoint_get_description(v358);
          BOOL v109 = nw_endpoint_get_logging_description(v367);
          else {
            v110 = off_189BB70A8[privacy_stance - 1];
          }
          *(_DWORD *)addrinfo buf = 67116546;
          *(_DWORD *)v388 = v104;
          *(_WORD *)&v388[4] = 1042;
          *(_DWORD *)&v388[6] = 16;
          *(_WORD *)&v388[10] = 2098;
          *(void *)&v388[12] = v1->top_uuid;
          *(_WORD *)&v388[20] = 2082;
          *(void *)&v388[22] = v105;
          *(_WORD *)v389 = 2114;
          *(void *)&v389[2] = v106;
          v390 = 2082;
          v391 = v107;
          v392 = 1042;
          v393 = 16;
          v394 = 2098;
          v395 = v410;
          v396 = 2082;
          v397 = v108;
          v398 = 2082;
          v399 = v109;
          v400 = 2114;
          v401 = v370;
          v402 = 2082;
          *(void *)v403 = v110;
          *(_WORD *)&v403[8] = 1024;
          v404[0] = v362 / 0x3E8;
          LOWORD(v404[1]) = 1024;
          *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
          HIWORD(v404[2]) = 1024;
          *(_DWORD *)v405 = v371 / 0x3E8;
          *(_WORD *)&v405[4] = 1024;
          *(_DWORD *)&v405[6] = v371 % 0x3E8;
          *(_WORD *)&v405[10] = 1024;
          *(_DWORD *)&v405[12] = v373 / 0x3E8;
          *(_WORD *)&v405[16] = 1024;
          *(_DWORD *)&v405[18] = v373 % 0x3E8;
          *(_WORD *)&v405[22] = 1024;
          *(_DWORD *)&v405[24] = v372 / 0x3E8;
          *(_WORD *)&v405[28] = 1024;
          *(_DWORD *)&v405[30] = v372 % 0x3E8;
          *(_WORD *)&v405[34] = 1024;
          *(_DWORD *)&v405[36] = v379 / 0x3E8;
          *(_WORD *)&v405[40] = 1024;
          *(_DWORD *)&v405[42] = v379 % 0x3E8;
          *(_WORD *)&v405[46] = 2082;
          *(void *)&v405[48] = v383;
          *(_WORD *)&v405[56] = 1024;
          *(_DWORD *)&v405[58] = v382 / 0x3E8;
          *(_WORD *)&v405[62] = 1024;
          *(_DWORD *)&v405[64] = v382 % 0x3E8;
          *(_WORD *)&v405[68] = 1024;
          *(_DWORD *)&v405[70] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v405[74] = 1024;
          *(_DWORD *)&v405[76] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v405[80] = 2082;
          *(void *)&v405[82] = v56;
          *(_WORD *)&v405[90] = 1024;
          *(_DWORD *)&v405[92] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v405[96] = 1024;
          *(_DWORD *)&v405[98] = handshake_ms_for_protocol % 0x3E8;
          v168 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us, %{public}s took %u.%03us";
          v169 = v57;
          v170 = 226;
        }

        _os_log_impl(&dword_181A5C000, v169, OS_LOG_TYPE_DEFAULT, v168, buf, v170);
        os_log_type_t v50 = v367;
        os_log_type_t v49 = v358;
      }

      else
      {
        if (v386)
        {
          if ((*((_BYTE *)v1 + 109) & 4) != 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            unsigned int v57 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_272;
            }
            char v58 = v49;
            v363 = v50;
            v111 = v1->top_id;
            v112 = nw_endpoint_get_logging_description(v1->endpoint);
            os_log_type_t v113 = v1->parameters;
            os_log_type_t v114 = nw_endpoint_handler_get_id_string(v48);
            os_log_type_t v115 = nw_endpoint_get_description(v58);
            os_log_type_t v116 = nw_endpoint_get_logging_description(v363);
            os_log_type_t v117 = *((void *)v386 + 1);
            os_log_type_t v118 = *((void *)v386 + 5);
            v119 = *((void *)v386 + 6);
            v120 = *((void *)v386 + 8);
            os_log_type_t v121 = *((void *)v386 + 9);
            *(_DWORD *)v388 = v111;
            *(void *)&v388[12] = v1->top_uuid;
            os_log_type_t v123 = *((void *)v386 + 10);
            BOOL v122 = *((void *)v386 + 11);
            *(void *)&v388[22] = v112;
            *(void *)&v389[2] = v113;
            v125 = *((void *)v386 + 12);
            v124 = *((void *)v386 + 13);
            v391 = v114;
            v127 = *((void *)v386 + 14);
            v126 = *((void *)v386 + 15);
            *(void *)&v405[134] = v120;
            *(void *)&v405[144] = v122;
            *(void *)&v405[154] = v125;
            *(void *)&v405[174] = v127;
            *(_WORD *)&v388[4] = 1042;
            v392 = 1042;
            *(_DWORD *)&v388[6] = 16;
            v393 = 16;
            *(_WORD *)&v388[10] = 2098;
            v394 = 2098;
            v395 = v410;
            v397 = v115;
            v399 = v116;
            *(_WORD *)v389 = 2114;
            v400 = 2114;
            *(_DWORD *)v403 = v362 / 0x3E8;
            *(_DWORD *)((char *)v404 + 2) = v371 / 0x3E8;
            v404[2] = v371 % 0x3E8;
            *(_DWORD *)&v405[2] = v373 / 0x3E8;
            *(_DWORD *)&v405[8] = v373 % 0x3E8;
            *(_DWORD *)&v405[14] = v372 / 0x3E8;
            *(_DWORD *)&v405[20] = v372 % 0x3E8;
            *(_DWORD *)&v405[26] = v379 / 0x3E8;
            *(_DWORD *)&v405[32] = v379 % 0x3E8;
            *(_WORD *)&v388[20] = 2082;
            v390 = 2082;
            v396 = 2082;
            v398 = 2082;
            *(_WORD *)&v405[36] = 2082;
            *(void *)&v405[38] = v383;
            *(_DWORD *)&v405[48] = v382 / 0x3E8;
            *(_DWORD *)&v405[54] = v382 % 0x3E8;
            *(_DWORD *)&v405[60] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v405[66] = transport_connect_milliseconds % 0x3E8;
            *(void *)&v405[72] = v119;
            *(void *)&v405[82] = v121;
            *(void *)&v405[92] = v117;
            *(void *)&v405[102] = v118;
            *(_DWORD *)&v405[112] = v126 / 0x3E8;
            *(_DWORD *)&v405[118] = v126 % 0x3E8;
            *(void *)&v405[124] = v123;
            *(void *)&v405[164] = v124;
            *(_WORD *)&v405[70] = 2048;
            *(_WORD *)&v405[80] = 2048;
            *(_WORD *)&v405[90] = 2048;
            *(_WORD *)&v405[100] = 2048;
            *(_WORD *)&v405[122] = 2048;
            *(_WORD *)&v405[132] = 2048;
            *(_WORD *)&v405[142] = 2048;
            *(_WORD *)&v405[152] = 2048;
            *(_WORD *)&v405[162] = 2048;
            *(_WORD *)&v405[172] = 2048;
            LOWORD(v404[0]) = 1024;
            HIWORD(v404[1]) = 1024;
            *(_WORD *)v405 = 1024;
            *(_WORD *)&v405[6] = 1024;
            *(_WORD *)&v405[12] = 1024;
            *(_WORD *)&v405[18] = 1024;
            *(_WORD *)&v405[24] = 1024;
            *(_WORD *)&v405[30] = 1024;
            *(_WORD *)&v405[46] = 1024;
            *(_WORD *)&v405[52] = 1024;
            *(_WORD *)&v405[58] = 1024;
            *(_WORD *)&v405[64] = 1024;
            *(_WORD *)&v405[110] = 1024;
            *(_WORD *)&v405[116] = 1024;
            v402 = 1024;
            *(_WORD *)&v403[4] = 1024;
            *(_DWORD *)&v403[6] = v362 % 0x3E8;
            *(_DWORD *)addrinfo buf = 67118594;
            v401 = v370;
            v128 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%0"
                   "3us took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            id v129 = v57;
            char v130 = 306;
          }

          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            unsigned int v57 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_272;
            }
            char v58 = v49;
            v363 = v50;
            v72 = v1->top_id;
            v73 = nw_endpoint_get_logging_description(v1->endpoint);
            os_log_type_t v74 = v1->parameters;
            BOOL v75 = nw_endpoint_handler_get_id_string(v48);
            os_log_type_t v76 = nw_endpoint_get_description(v58);
            v77 = nw_endpoint_get_logging_description(v363);
            else {
              v78 = off_189BB70A8[privacy_stance - 1];
            }
            v234 = *((void *)v386 + 1);
            v235 = *((void *)v386 + 5);
            v236 = *((void *)v386 + 6);
            v237 = *((void *)v386 + 8);
            v238 = *((void *)v386 + 9);
            v239 = *((void *)v386 + 11);
            v240 = *((void *)v386 + 12);
            v241 = *((void *)v386 + 13);
            v243 = *((void *)v386 + 14);
            v242 = *((void *)v386 + 15);
            *(void *)&v405[134] = *((void *)v386 + 10);
            *(void *)&v405[144] = v237;
            *(void *)&v405[154] = v239;
            *(void *)&v405[174] = v241;
            *(void *)&v405[184] = v243;
            *(_DWORD *)v388 = v72;
            *(void *)&v388[12] = v1->top_uuid;
            *(void *)&v388[22] = v73;
            *(void *)&v389[2] = v74;
            v391 = v75;
            *(_WORD *)&v388[4] = 1042;
            v392 = 1042;
            *(_DWORD *)&v388[6] = 16;
            v393 = 16;
            *(_WORD *)&v388[10] = 2098;
            v394 = 2098;
            v395 = v410;
            v397 = v76;
            v399 = v77;
            *(_WORD *)v389 = 2114;
            v400 = 2114;
            *(void *)v403 = v78;
            v404[0] = v362 / 0x3E8;
            *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
            *(_DWORD *)v405 = v371 / 0x3E8;
            *(_DWORD *)&v405[6] = v371 % 0x3E8;
            *(_DWORD *)&v405[12] = v373 / 0x3E8;
            *(_DWORD *)&v405[18] = v373 % 0x3E8;
            *(_DWORD *)&v405[24] = v372 / 0x3E8;
            *(_DWORD *)&v405[30] = v372 % 0x3E8;
            *(_DWORD *)&v405[36] = v379 / 0x3E8;
            *(_DWORD *)&v405[42] = v379 % 0x3E8;
            *(_WORD *)&v388[20] = 2082;
            v390 = 2082;
            v396 = 2082;
            v398 = 2082;
            v402 = 2082;
            *(_WORD *)&v405[46] = 2082;
            *(void *)&v405[48] = v383;
            *(_DWORD *)&v405[58] = v382 / 0x3E8;
            *(_DWORD *)&v405[64] = v382 % 0x3E8;
            *(_DWORD *)&v405[70] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v405[76] = transport_connect_milliseconds % 0x3E8;
            *(void *)&v405[82] = v236;
            *(void *)&v405[92] = v238;
            *(void *)&v405[102] = v234;
            *(void *)&v405[112] = v235;
            *(_DWORD *)&v405[122] = v242 / 0x3E8;
            *(_DWORD *)&v405[128] = v242 % 0x3E8;
            *(void *)&v405[164] = v240;
            *(_WORD *)&v405[80] = 2048;
            *(_WORD *)&v405[90] = 2048;
            *(_WORD *)&v405[100] = 2048;
            *(_WORD *)&v405[110] = 2048;
            *(_WORD *)&v405[132] = 2048;
            *(_WORD *)&v405[142] = 2048;
            *(_WORD *)&v405[152] = 2048;
            *(_WORD *)&v405[162] = 2048;
            *(_WORD *)&v405[172] = 2048;
            *(_WORD *)&v405[182] = 2048;
            LOWORD(v404[1]) = 1024;
            HIWORD(v404[2]) = 1024;
            *(_WORD *)&v405[4] = 1024;
            *(_WORD *)&v405[10] = 1024;
            *(_WORD *)&v405[16] = 1024;
            *(_WORD *)&v405[22] = 1024;
            *(_WORD *)&v405[28] = 1024;
            *(_WORD *)&v405[34] = 1024;
            *(_WORD *)&v405[40] = 1024;
            *(_WORD *)&v405[56] = 1024;
            *(_WORD *)&v405[62] = 1024;
            *(_WORD *)&v405[68] = 1024;
            *(_WORD *)&v405[74] = 1024;
            *(_WORD *)&v405[120] = 1024;
            *(_WORD *)&v405[126] = 1024;
            *(_WORD *)&v403[8] = 1024;
            *(_DWORD *)addrinfo buf = 67118850;
            v401 = v370;
            v128 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%0"
                   "3us took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            id v129 = v57;
            char v130 = 316;
          }

    goto LABEL_81;
  }

  if (!v8)
  {
    __nwlog_obj();
    id v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v49 = "nw_connection_shares_protocol_stack";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    BOOL v46 = 0;
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null other_connection", buf, 0xCu);
      }

      goto LABEL_80;
    }

    if (!v46)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v36 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v36,  "%{public}s called with null other_connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_80;
    }

    BOOL v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v29 = v47;
    __int16 v30 = os_log_type_enabled(v17, v47);
    if (!v28)
    {
      if (v30)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v29,  "%{public}s called with null other_connection, no backtrace",  buf,  0xCu);
      }

      goto LABEL_80;
    }

    if (v30)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v49 = "nw_connection_shares_protocol_stack";
      os_log_type_t v50 = 2082;
      id v51 = v28;
      _os_log_impl( &dword_181A5C000,  v17,  v29,  "%{public}s called with null other_connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_55;
  }

  if (!v9)
  {
    __nwlog_obj();
    BOOL v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v49 = "nw_connection_shares_protocol_stack";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    BOOL v46 = 0;
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_181A5C000, v17, v22, "%{public}s called with null completion_queue", buf, 0xCu);
      }

      goto LABEL_80;
    }

    if (!v46)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v37,  "%{public}s called with null completion_queue, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_80;
    }

    BOOL v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v31 = v47;
    os_log_type_t v32 = os_log_type_enabled(v17, v47);
    if (!v28)
    {
      if (v32)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v31,  "%{public}s called with null completion_queue, no backtrace",  buf,  0xCu);
      }

      goto LABEL_80;
    }

    if (v32)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v49 = "nw_connection_shares_protocol_stack";
      os_log_type_t v50 = 2082;
      id v51 = v28;
      _os_log_impl( &dword_181A5C000,  v17,  v31,  "%{public}s called with null completion_queue, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_55;
  }

  if (!v10)
  {
    __nwlog_obj();
    id v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v49 = "nw_connection_shares_protocol_stack";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    BOOL v46 = 0;
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_181A5C000, v17, v24, "%{public}s called with null completion", buf, 0xCu);
      }

      goto LABEL_80;
    }

    if (!v46)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v38,  "%{public}s called with null completion, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_80;
    }

    BOOL v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = v47;
    os_log_type_t v34 = os_log_type_enabled(v17, v47);
    if (!v28)
    {
      if (v34)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_181A5C000, v17, v33, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }

      goto LABEL_80;
    }

    if (v34)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v49 = "nw_connection_shares_protocol_stack";
      os_log_type_t v50 = 2082;
      id v51 = v28;
      _os_log_impl( &dword_181A5C000,  v17,  v33,  "%{public}s called with null completion, dumping backtrace:%{public}s",  buf,  0x16u);
    }

            goto LABEL_81;
          }

          goto LABEL_81;
        }
      }

      else if (v10 != &nw_protocol_ref_counted_handle)
      {
        goto LABEL_26;
      }

      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
      if ((v21 & 1) != 0) {
        goto LABEL_81;
      }
      goto LABEL_30;
    }

    id v12 = (void *)*((void *)v4 + 51);
    if (!v12 || (v13 = v12[3]) == 0 || (uint64_t v14 = *(uint64_t (**)(void))(v13 + 152)) == 0LL)
    {
LABEL_56:
      os_log_type_t v42 = v2;
      BOOL v43 = (*((_BYTE *)v42 + 268) & 0x20) == 0;

      if (v43)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v24 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v44 = v42;

          os_log_type_t v45 = v44;
          BOOL v46 = (*((_BYTE *)v42 + 268) & 1) == 0;

          if (v46) {
            os_log_type_t v47 = "";
          }
          else {
            os_log_type_t v47 = "dry-run ";
          }
          os_log_type_t v48 = nw_endpoint_handler_copy_endpoint(v45);
          os_log_type_t v49 = nw_endpoint_get_logging_description(v48);
          os_log_type_t v50 = v45;
          id v51 = v50;
          id v52 = v50[30];
          else {
            unsigned int v53 = off_189BBBBF0[v52];
          }
          v88 = v53;

          v54 = v51;
          id v55 = v54;
          id v56 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              id v56 = "resolver";
              break;
            case 2:
              id v56 = nw_endpoint_flow_mode_string(v54[31]);
              break;
            case 3:
              id v56 = "proxy";
              break;
            case 4:
              id v56 = "fallback";
              break;
            case 5:
              id v56 = "transform";
              break;
            default:
              id v56 = "unknown-mode";
              break;
          }

          os_log_type_t v61 = v55;
          os_unfair_lock_lock((os_unfair_lock_t)v61 + 28);
          __int16 v62 = v61[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v61 + 28);

          v63 = v44->id_str;
          uint64_t v64 = v62;
          *(_DWORD *)addrinfo buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
          os_log_type_t v93 = 2082;
          id_str = v63;
          os_log_type_t v95 = 2082;
          v96 = v47;
          os_log_type_t v97 = 2082;
          v98 = (void *)v49;
          os_log_type_t v99 = 2082;
          BOOL v100 = v88;
          os_log_type_t v101 = 2082;
          BOOL v102 = v56;
          os_log_type_t v103 = 2114;
          BOOL v104 = v64;
          os_log_type_t v105 = 2082;
          BOOL v106 = "read_timeout";
          _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unregister notification for %{public}s failed",  buf,  0x52u);
        }

        goto LABEL_80;
      }

            goto LABEL_81;
          }

          goto LABEL_81;
        }
      }

      else if (v10 != &nw_protocol_ref_counted_handle)
      {
        goto LABEL_26;
      }

      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
      if ((v21 & 1) != 0) {
        goto LABEL_81;
      }
      goto LABEL_30;
    }

    id v12 = (void *)*((void *)v4 + 51);
    if (!v12 || (v13 = v12[3]) == 0 || (uint64_t v14 = *(uint64_t (**)(void))(v13 + 152)) == 0LL)
    {
LABEL_56:
      os_log_type_t v42 = v2;
      BOOL v43 = (*((_BYTE *)v42 + 268) & 0x20) == 0;

      if (v43)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v24 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v44 = v42;

          os_log_type_t v45 = v44;
          BOOL v46 = (*((_BYTE *)v42 + 268) & 1) == 0;

          if (v46) {
            os_log_type_t v47 = "";
          }
          else {
            os_log_type_t v47 = "dry-run ";
          }
          os_log_type_t v48 = nw_endpoint_handler_copy_endpoint(v45);
          os_log_type_t v49 = nw_endpoint_get_logging_description(v48);
          os_log_type_t v50 = v45;
          id v51 = v50;
          id v52 = v50[30];
          else {
            unsigned int v53 = off_189BBBBF0[v52];
          }
          v88 = v53;

          v54 = v51;
          id v55 = v54;
          id v56 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              id v56 = "resolver";
              break;
            case 2:
              id v56 = nw_endpoint_flow_mode_string(v54[31]);
              break;
            case 3:
              id v56 = "proxy";
              break;
            case 4:
              id v56 = "fallback";
              break;
            case 5:
              id v56 = "transform";
              break;
            default:
              id v56 = "unknown-mode";
              break;
          }

          os_log_type_t v61 = v55;
          os_unfair_lock_lock((os_unfair_lock_t)v61 + 28);
          __int16 v62 = v61[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v61 + 28);

          v63 = v44->id_str;
          uint64_t v64 = v62;
          *(_DWORD *)addrinfo buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
          os_log_type_t v93 = 2082;
          id_str = v63;
          os_log_type_t v95 = 2082;
          v96 = v47;
          os_log_type_t v97 = 2082;
          v98 = (void *)v49;
          os_log_type_t v99 = 2082;
          BOOL v100 = v88;
          os_log_type_t v101 = 2082;
          BOOL v102 = v56;
          os_log_type_t v103 = 2114;
          BOOL v104 = v64;
          os_log_type_t v105 = 2082;
          BOOL v106 = "write_timeout";
          _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unregister notification for %{public}s failed",  buf,  0x52u);
        }

        goto LABEL_80;
      }

  *(_WORD *)(a1 + 388) &= ~0x200u;
  nw_http2_session_send(a1);
}

    if (v38) {
      free(v38);
    }
    LODWORD(source) = 0;
    id v12 = MEMORY[0x1895F87A8];
    *((void *)v5 + 7) = 0LL;
    goto LABEL_10;
  }

LABEL_73:
        goto LABEL_74;
      }

      if (!v58)
      {
        __nwlog_obj();
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v48 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
          _os_log_impl( &dword_181A5C000,  v31,  v48,  "%{public}s called with null protocol_parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_73;
      }

      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v42 = v59;
      BOOL v43 = os_log_type_enabled(v31, v59);
      if (!v39)
      {
        if (v43)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
          _os_log_impl( &dword_181A5C000,  v31,  v42,  "%{public}s called with null protocol_parameters, no backtrace",  buf,  0xCu);
        }

        goto LABEL_73;
      }

      if (v43)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
        __int16 v62 = 2082;
        v63 = v39;
        _os_log_impl( &dword_181A5C000,  v31,  v42,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_53;
    }
  }

  else
  {
    __nwlog_obj();
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
    __int16 v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v59 = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (__nwlog_fault(v30, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_73;
      }

      if (!v58)
      {
        __nwlog_obj();
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
          _os_log_impl( &dword_181A5C000,  v31,  v47,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_73;
      }

      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = v59;
      BOOL v41 = os_log_type_enabled(v31, v59);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
          _os_log_impl(&dword_181A5C000, v31, v40, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_73;
      }

      if (v41)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v61 = "nw_parameters_add_protocol_stack_member";
        __int16 v62 = 2082;
        v63 = v39;
        _os_log_impl( &dword_181A5C000,  v31,  v40,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      uint64_t v27 = 0LL;
LABEL_74:

      goto LABEL_75;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v32 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    v66 = "nw_connection_create_with_id";
    os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v63 = 0;
    if (__nwlog_fault(v33, &type, &v63))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v34 = (os_log_s *)(id)gLogObj;
        BOOL v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v66 = "nw_connection_create_with_id";
          _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed",  buf,  0xCu);
        }
      }

      else if (v63)
      {
        BOOL v41 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v34 = (os_log_s *)(id)gLogObj;
        os_log_type_t v42 = type;
        BOOL v43 = os_log_type_enabled(v34, type);
        if (v41)
        {
          if (v43)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v66 = "nw_connection_create_with_id";
            os_log_type_t v67 = 2082;
            *(void *)id v68 = v41;
            _os_log_impl( &dword_181A5C000,  v34,  v42,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v41);
          if (!v33) {
            goto LABEL_73;
          }
          goto LABEL_72;
        }

        if (v43)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v66 = "nw_connection_create_with_id";
          _os_log_impl( &dword_181A5C000,  v34,  v42,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v34 = (os_log_s *)(id)gLogObj;
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v66 = "nw_connection_create_with_id";
          _os_log_impl( &dword_181A5C000,  v34,  v45,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v33) {
      goto LABEL_73;
    }
LABEL_72:
    free(v33);
    goto LABEL_73;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v28 = (id)gLogObj;
  *(_DWORD *)addrinfo buf = 136446210;
  v66 = "nw_connection_create_with_id";
  __int16 v29 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v63 = 0;
  if (__nwlog_fault(v29, &type, &v63))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v30 = (os_log_s *)(id)gLogObj;
      uint64_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v66 = "nw_connection_create_with_id";
        _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s nw_parameters_copy failed", buf, 0xCu);
      }
    }

    else if (v63)
    {
      __int16 v36 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v30 = (os_log_s *)(id)gLogObj;
      os_log_type_t v37 = type;
      os_log_type_t v38 = os_log_type_enabled(v30, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v66 = "nw_connection_create_with_id";
          os_log_type_t v67 = 2082;
          *(void *)id v68 = v36;
          _os_log_impl( &dword_181A5C000,  v30,  v37,  "%{public}s nw_parameters_copy failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
        if (!v29) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }

      if (v38)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v66 = "nw_connection_create_with_id";
        _os_log_impl(&dword_181A5C000, v30, v37, "%{public}s nw_parameters_copy failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v30 = (os_log_s *)(id)gLogObj;
      v44 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v66 = "nw_connection_create_with_id";
        _os_log_impl( &dword_181A5C000,  v30,  v44,  "%{public}s nw_parameters_copy failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v29) {
LABEL_63:
  }
    free(v29);
LABEL_64:
  uint64_t v27 = 0LL;
LABEL_75:

LABEL_76:
  return v27;
}

      free(backtrace_string);
    }

  __break(1u);
  return result;
}

    MEMORY[0x1895F8858](isStackAllocationSafe);
    sub_181C7DB2C((uint64_t)v55 - v50, v46, v14, v15);
    sub_18264EB50();
    sub_18264EB50();
    BOOL v43 = (*(uint64_t (**)(void))(v64 + 16))();
LABEL_75:
    __int128 v4 = v66;
LABEL_76:
    LOBYTE(v69[0]) = v43 & 1;
    swift_bridgeObjectRelease();
LABEL_77:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v4;
  }

  while ((v69[0] & 1) != 0);
  BOOL result = swift_release();
  v54 = 0;
LABEL_81:
  *id v56 = v54;
  return result;
}

  if (v21) {
    free(v21);
  }
  os_log_type_t v11 = 0LL;
  if (v9 == &nw_protocol_ref_counted_handle)
  {
LABEL_11:
    if (*(_UNKNOWN **)(v6 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v13 = *(void *)(v6 + 88);
      if (v13)
      {
        uint64_t v14 = v13 - 1;
        *(void *)(v6 + 88) = v14;
        if (!v14)
        {
          BOOL v15 = *(void (***)(void))(v6 + 64);
          if (v15)
          {
            *(void *)(v6 + 64) = 0LL;
            v15[2](v15);
            _Block_release(v15);
          }

          if ((*(_BYTE *)(v6 + 72) & 1) != 0)
          {
            os_log_type_t v16 = *(const void **)(v6 + 64);
            if (v16) {
              _Block_release(v16);
            }
          }

          free((void *)v6);
        }
      }
    }
  }

        goto LABEL_74;
      }

      if (!v72)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v69 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl( &dword_181A5C000,  v11,  v69,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_73;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v58 = type;
      os_log_type_t v59 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl( &dword_181A5C000,  v11,  v58,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
        }

        goto LABEL_73;
      }

      if (v59)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        os_log_type_t v76 = 2082;
        *(void *)v77 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v58,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_74;
      }

      if (!v72)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v69 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl( &dword_181A5C000,  v11,  v69,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_73;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v58 = type;
      os_log_type_t v59 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl( &dword_181A5C000,  v11,  v58,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
        }

        goto LABEL_73;
      }

      if (v59)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v75 = "networkd_privileged_run_probes_block_invoke";
        os_log_type_t v76 = 2082;
        *(void *)v77 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v58,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_74:
      os_log_type_t v20 = v32;
      if (v34) {
        free(v34);
      }
      goto LABEL_11;
    }

    if (!v74)
    {
      __nwlog_obj();
      BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unsigned int v53 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl( &dword_181A5C000,  v35,  v53,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_73;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v48 = type[0];
    os_log_type_t v49 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v49)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_181A5C000, v35, v48, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }

      goto LABEL_73;
    }

    if (v49)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      v77 = 2082;
      v78 = (os_unfair_lock_s *)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v35,  v48,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      free(v15);
      goto LABEL_13;
    }

    __nwlog_obj();
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v37 = "nw_framer_protocol_disconnected";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v34 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null framer", buf, 0xCu);
      }
    }

    else if (v34)
    {
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v37 = "nw_framer_protocol_disconnected";
          os_log_type_t v38 = 2082;
          os_log_type_t v39 = v24;
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v24);
        goto LABEL_72;
      }

      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_181A5C000, v16, v25, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v37 = "nw_framer_protocol_disconnected";
        _os_log_impl( &dword_181A5C000,  v16,  v32,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
      }
    }

          goto LABEL_90;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v24 = (os_log_s *)(id)gLogObj;
          os_log_type_t v59 = length[0];
          if (os_log_type_enabled(v24, length[0]))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            _os_log_impl( &dword_181A5C000,  v24,  v59,  "%{public}s invalid dictionary, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_73;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (os_log_s *)(id)gLogObj;
        os_log_type_t v40 = length[0];
        BOOL v41 = os_log_type_enabled(v24, length[0]);
        if (!backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            _os_log_impl(&dword_181A5C000, v24, v40, "%{public}s invalid dictionary, no backtrace", buf, 0xCu);
          }

          goto LABEL_73;
        }

        if (v41)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          v88 = 2082;
          os_log_type_t v89 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v24,  v40,  "%{public}s invalid dictionary, dumping backtrace:%{public}s",  buf,  0x16u);
        }

LABEL_55:
        free(backtrace_string);
        if (!v23) {
          goto LABEL_92;
        }
        goto LABEL_91;
      }

      *((_BYTE *)v17 + 231) = *((_BYTE *)v17 + 231) & 0xFE | xpc_dictionary_get_BOOL(v2, "is_local_domain");
      os_log_type_t v18 = xpc_dictionary_get_uuid(v2, "agent_identifier");
      if (v18) {
        *(_OWORD *)((char *)v17 + 28) = *(_OWORD *)v18;
      }
      Class = object_getClass(v2);
      os_log_type_t v20 = (objc_class *)MEMORY[0x1895F9250];
      if (Class == (Class)MEMORY[0x1895F9250] && (value = xpc_dictionary_get_value(v2, "interface")) != 0LL)
      {
        uint64_t v27 = value;
        if (object_getClass(value) == v20) {
          BOOL v21 = v27;
        }
        else {
          BOOL v21 = 0LL;
        }
      }

      else
      {
        BOOL v21 = 0LL;
      }

      BOOL v28 = v21;
      __int16 v29 = nw_interface_create_from_dictionary(v28);
      __int16 v30 = (void *)*((void *)v17 + 2);
      *((void *)v17 + 2) = v29;

      *((_WORD *)v17 + 114) = xpc_dictionary_get_uint64(v2, "alternate_port");
      uint64_t v31 = xpc_dictionary_get_value(v2, "signature");
      os_log_type_t v32 = (void *)*((void *)v17 + 24);
      *((void *)v17 + 24) = v31;

      os_log_type_t v33 = xpc_dictionary_get_string(v2, "device_id");
      nw_endpoint_set_device_id(v17, v33);
      *(void *)addrinfo buf = 0LL;
      os_log_type_t v34 = (const uint8_t *)xpc_dictionary_get_data(v2, "txt_record", (size_t *)buf);
      if (v34 && *(void *)buf)
      {
        BOOL v35 = nw_txt_record_create_with_bytes(v34, *(size_t *)buf);
        __int16 v36 = (void *)*((void *)v17 + 23);
        *((void *)v17 + 23) = v35;
      }

      xpc_dictionary_get_array(v2, "public_keys");
      os_log_type_t v37 = (void *)objc_claimAutoreleasedReturnValue();
      if (v37)
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = __nw_endpoint_create_from_dictionary_block_invoke;
        applier[3] = &unk_189BC8CB8;
        os_log_type_t v84 = v17;
        xpc_array_apply(v37, applier);
      }

      os_log_type_t v38 = v17;

LABEL_93:
      return v38;
    default:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v53 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
      v88 = 2048;
      os_log_type_t v89 = (char *)uint64;
      id v23 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(length[0]) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (LOBYTE(length[0]) == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v54 = (os_log_s *)(id)gLogObj;
        id v55 = length[0];
        if (os_log_type_enabled(v54, length[0]))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          v88 = 2048;
          os_log_type_t v89 = (char *)uint64;
          _os_log_impl(&dword_181A5C000, v54, v55, "%{public}s incorrect endpoint type %llu", buf, 0x16u);
        }
      }

      else if (type)
      {
        id v56 = __nw_create_backtrace_string();
        if (v56)
        {
          backtrace_string = (char *)v56;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v57 = (os_log_s *)(id)gLogObj;
          char v58 = length[0];
          if (os_log_type_enabled(v57, length[0]))
          {
            *(_DWORD *)addrinfo buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            v88 = 2048;
            os_log_type_t v89 = (char *)uint64;
            v90 = 2082;
            os_log_type_t v91 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s incorrect endpoint type %llu, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          goto LABEL_55;
        }

        __nwlog_obj();
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v73 = length[0];
        if (os_log_type_enabled(v54, length[0]))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          v88 = 2048;
          os_log_type_t v89 = (char *)uint64;
          _os_log_impl(&dword_181A5C000, v54, v73, "%{public}s incorrect endpoint type %llu, no backtrace", buf, 0x16u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v54 = (os_log_s *)(id)gLogObj;
        id v68 = length[0];
        if (os_log_type_enabled(v54, length[0]))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          v88 = 2048;
          os_log_type_t v89 = (char *)uint64;
          _os_log_impl( &dword_181A5C000,  v54,  v68,  "%{public}s incorrect endpoint type %llu, backtrace limit exceeded",  buf,  0x16u);
        }
      }

      goto LABEL_90;
  }

          goto LABEL_62;
        }

        if (v37)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          unsigned int v57 = "nw_connection_group_copy_workloop";
          char v58 = 2082;
          v59[0] = v36;
          _os_log_impl( &dword_181A5C000,  v34,  v50,  "%{public}s called with null workloop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
      }

        if (v34) {
          free(v34);
        }
        goto LABEL_22;
      }
    }
  }

    if (v26) {
      free(v26);
    }
    goto LABEL_26;
  }

  uint64_t v13 = *(void **)(v9 + 40);
  if (v13 == &nw_protocol_ref_counted_handle)
  {
    BOOL v15 = *(void *)(v9 + 88);
    if (v15) {
      *(void *)(v9 + 88) = v15 + 1;
    }
    uint64_t v14 = -1;
  }

  else
  {
    uint64_t v14 = 0;
  }

  *(void *)BOOL v41 = v9;
  os_log_type_t v42 = v14;
  os_log_type_t v16 = object[3];
  if (!v16 || (id v17 = *(void (**)(void *))(v16 + 72)) == 0LL)
  {
    __nwlog_obj();
    id v19 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v20 = (const char *)v6[2];
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v47 = "__nw_protocol_output_available";
    if (!v20) {
      os_log_type_t v20 = "invalid";
    }
    os_log_type_t v48 = 2082;
    os_log_type_t v49 = (void *)v20;
    os_log_type_t v50 = 2048;
    id v51 = v6;
    BOOL v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v40 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        os_log_type_t v24 = (const char *)v6[2];
        if (!v24) {
          os_log_type_t v24 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v47 = "__nw_protocol_output_available";
        os_log_type_t v48 = 2082;
        os_log_type_t v49 = (void *)v24;
        os_log_type_t v50 = 2048;
        id v51 = v6;
        _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s protocol %{public}s (%p) has invalid output_available callback",  buf,  0x20u);
      }
    }

    else if (v40)
    {
      __int16 v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v30 = type;
      uint64_t v31 = os_log_type_enabled(v22, type);
      if (v29)
      {
        if (v31)
        {
          os_log_type_t v32 = (const char *)v6[2];
          if (!v32) {
            os_log_type_t v32 = "invalid";
          }
          *(_DWORD *)addrinfo buf = 136446978;
          os_log_type_t v47 = "__nw_protocol_output_available";
          os_log_type_t v48 = 2082;
          os_log_type_t v49 = (void *)v32;
          os_log_type_t v50 = 2048;
          id v51 = v6;
          id v52 = 2082;
          unsigned int v53 = v29;
          _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v29);
        goto LABEL_65;
      }

      if (v31)
      {
        os_log_type_t v38 = (const char *)v6[2];
        if (!v38) {
          os_log_type_t v38 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v47 = "__nw_protocol_output_available";
        os_log_type_t v48 = 2082;
        os_log_type_t v49 = (void *)v38;
        os_log_type_t v50 = 2048;
        id v51 = v6;
        _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v36 = type;
      if (os_log_type_enabled(v22, type))
      {
        os_log_type_t v37 = (const char *)v6[2];
        if (!v37) {
          os_log_type_t v37 = "invalid";
        }
        *(_DWORD *)addrinfo buf = 136446722;
        os_log_type_t v47 = "__nw_protocol_output_available";
        os_log_type_t v48 = 2082;
        os_log_type_t v49 = (void *)v37;
        os_log_type_t v50 = 2048;
        id v51 = v6;
        _os_log_impl( &dword_181A5C000,  v22,  v36,  "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded",  buf,  0x20u);
      }
    }

LABEL_65:
    if (v21) {
      free(v21);
    }
    goto LABEL_24;
  }

  v17(object);
LABEL_24:
  if (v13 == &nw_protocol_ref_counted_handle) {
    nw::release_if_needed<nw_protocol *>((uint64_t *)v41);
  }
LABEL_26:
  if (v10 == &nw_protocol_ref_counted_handle) {
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v44);
  }
  return 1LL;
}

    free(v21);
    goto LABEL_53;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int128 v4 = (id)gLogObj;
  *(_DWORD *)addrinfo buf = 136446466;
  os_log_type_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
  BOOL v46 = 2114;
  os_log_type_t v47 = error;
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v41 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)(id)gLogObj;
    os_log_type_t v7 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
      BOOL v46 = 2114;
      os_log_type_t v47 = error;
      _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s SecKeyCreateRandomKey failed: %{public}@", buf, 0x16u);
    }

              goto LABEL_176;
            }

            if (!v160)
            {
              __nwlog_obj();
              os_log_type_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v100 = type;
              if (os_log_type_enabled(v48, type))
              {
                *(_DWORD *)addrinfo buf = 136446210;
                v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl( &dword_181A5C000,  v48,  v100,  "%{public}s nw_tcp_create_options failed, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_73;
            }

            os_log_type_t v79 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v81 = type;
            os_log_type_t v82 = os_log_type_enabled(v80, type);
            if (v79)
            {
              if (v82)
              {
                *(_DWORD *)addrinfo buf = 136446466;
                v163 = "nw_parameters_create_secure_http_messaging";
                v164 = 2082;
                v165 = v79;
                _os_log_impl( &dword_181A5C000,  v80,  v81,  "%{public}s nw_tcp_create_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v79);
              if (!v47) {
                goto LABEL_178;
              }
              goto LABEL_177;
            }

            if (v82)
            {
              *(_DWORD *)addrinfo buf = 136446210;
              v163 = "nw_parameters_create_secure_http_messaging";
              _os_log_impl( &dword_181A5C000,  v80,  v81,  "%{public}s nw_tcp_create_options failed, no backtrace",  buf,  0xCu);
            }
          }

    free(backtrace_string);
  }

      free(v32);
      goto LABEL_74;
    }

    os_log_type_t v74 = 0LL;
    __nwlog_obj();
    BOOL v80 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v115 = "nw_connection_create_from_protocol_on_nw_queue";
    v77 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v112 = 0;
    if (__nwlog_fault(v77, &type, &v112))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v81 = type;
        if (os_log_type_enabled(v78, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v115 = "nw_connection_create_from_protocol_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v78, v81, "%{public}s called with null parameters", buf, 0xCu);
        }

      if (!v12) {
        goto LABEL_75;
      }
LABEL_74:
      free(v12);
      goto LABEL_75;
    }

    id v12 = nw_parameters_copy_description_internal(v8, 1);
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (!v13 || nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104))) {
      goto LABEL_73;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v14 = (id)gconnectionLogObj;
    BOOL v15 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
    if (v12) {
      os_log_type_t v16 = v12;
    }
    else {
      os_log_type_t v16 = "";
    }
    *(_DWORD *)addrinfo buf = 136446722;
    os_log_type_t v49 = "nw_connection_get_connected_socket_block_invoke";
    os_log_type_t v50 = 1024;
    id v51 = v15;
    id v52 = 2082;
    unsigned int v53 = v16;
    id v17 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v46 = 0;
    if (__nwlog_fault((const char *)v17, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v18 = (os_log_s *)(id)gconnectionLogObj;
        id v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          os_log_type_t v20 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
          *(_DWORD *)addrinfo buf = 136446722;
          os_log_type_t v49 = "nw_connection_get_connected_socket_block_invoke";
          os_log_type_t v50 = 1024;
          id v51 = v20;
          id v52 = 2082;
          unsigned int v53 = v16;
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s [C%u] socket is guarded. parameters: %{public}s",  buf,  0x1Cu);
        }
      }

      else if (v46)
      {
        uint64_t v27 = __nw_create_backtrace_string();
        if (v27)
        {
          BOOL v28 = (char *)v27;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v29 = (os_log_s *)(id)gconnectionLogObj;
          __int16 v30 = type;
          if (os_log_type_enabled(v29, type))
          {
            uint64_t v31 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
            *(_DWORD *)addrinfo buf = 136446978;
            os_log_type_t v49 = "nw_connection_get_connected_socket_block_invoke";
            os_log_type_t v50 = 1024;
            id v51 = v31;
            id v52 = 2082;
            unsigned int v53 = v16;
            v54 = 2082;
            id v55 = v28;
            _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s [C%u] socket is guarded. parameters: %{public}s, dumping backtrace:%{public}s",  buf,  0x26u);
          }

          free(v28);
          if (!v17) {
            goto LABEL_73;
          }
LABEL_72:
          free(v17);
          goto LABEL_73;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v18 = (os_log_s *)(id)gconnectionLogObj;
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v18, type))
        {
          os_log_type_t v40 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
          *(_DWORD *)addrinfo buf = 136446722;
          os_log_type_t v49 = "nw_connection_get_connected_socket_block_invoke";
          os_log_type_t v50 = 1024;
          id v51 = v40;
          id v52 = 2082;
          unsigned int v53 = v16;
          _os_log_impl( &dword_181A5C000,  v18,  v39,  "%{public}s [C%u] socket is guarded. parameters: %{public}s, no backtrace",  buf,  0x1Cu);
        }
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v18 = (os_log_s *)(id)gconnectionLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v18, type))
        {
          os_log_type_t v38 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
          *(_DWORD *)addrinfo buf = 136446722;
          os_log_type_t v49 = "nw_connection_get_connected_socket_block_invoke";
          os_log_type_t v50 = 1024;
          id v51 = v38;
          id v52 = 2082;
          unsigned int v53 = v16;
          _os_log_impl( &dword_181A5C000,  v18,  v37,  "%{public}s [C%u] socket is guarded. parameters: %{public}s, backtrace limit exceeded",  buf,  0x1Cu);
        }
      }
    }

    if (!v17) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }

  id v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    __int128 v4 = (os_unfair_lock_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v49 = "nw_connection_get_connected_socket_block_invoke";
      os_log_type_t v50 = 1024;
      id v51 = v5;
      _os_log_impl( &dword_181A5C000,  (os_log_t)v4,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Client called nw_connection_get_connected_socket on unconnected nw_connection",  buf,  0x12u);
    }

    goto LABEL_75;
  }

          if (v55)
          {
            nw_connection_add_write_request(v100, v55);
LABEL_94:

            os_log_type_t v48 = v29;
LABEL_95:

            id v17 = v105;
LABEL_96:
            _Block_object_dispose(&v112, 8);

            _Block_object_dispose(v118, 8);
            id v68 = v107;
            goto LABEL_97;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v60 = (id)gLogObj;
          *(_DWORD *)addrinfo buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
          os_log_type_t v61 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v117 = OS_LOG_TYPE_ERROR;
          os_log_type_t v116 = 0;
          if (__nwlog_fault(v61, &v117, &v116))
          {
            if (v117 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v62 = (os_log_s *)(id)gLogObj;
              v63 = v117;
              if (os_log_type_enabled(v62, v117))
              {
                *(_DWORD *)addrinfo buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
                _os_log_impl(&dword_181A5C000, v62, v63, "%{public}s nw_write_request_create failed", buf, 0xCu);
              }
            }

            else if (v116)
            {
              uint64_t v64 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              __int16 v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v65 = v117;
              v66 = os_log_type_enabled(v62, v117);
              if (v64)
              {
                if (v66)
                {
                  *(_DWORD *)addrinfo buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v64;
                  _os_log_impl( &dword_181A5C000,  v62,  v65,  "%{public}s nw_write_request_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v64);
                if (!v61) {
                  goto LABEL_94;
                }
                goto LABEL_93;
              }

              if (v66)
              {
                *(_DWORD *)addrinfo buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
                _os_log_impl( &dword_181A5C000,  v62,  v65,  "%{public}s nw_write_request_create failed, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              __int16 v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v67 = v117;
              if (os_log_type_enabled(v62, v117))
              {
                *(_DWORD *)addrinfo buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
                _os_log_impl( &dword_181A5C000,  v62,  v67,  "%{public}s nw_write_request_create failed, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

          if (!v61) {
            goto LABEL_94;
          }
LABEL_93:
          free(v61);
          goto LABEL_94;
        }

        __int16 v30 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_write_request);
        uint64_t v31 = v30;
        id v12 = v102;
        if (v30)
        {
          objc_storeStrong((id *)&v30->context, v27);
          objc_storeStrong((id *)v31 + 13, 0LL);
          *((_BYTE *)v31 + 128) = v31[32] & 0xFE | a5;
          objc_storeStrong((id *)v31 + 5, a1);
          v31[12] = qos_class_self();
          os_log_type_t v32 = (double *)v29;
          os_log_type_t v33 = v32;
          os_log_type_t v34 = 0.5;
          if (v32 != (double *)&__block_literal_global_5_41854
            && v32 != (double *)&__block_literal_global_4
            && v32 != (double *)&__block_literal_global_3_41839
            && v32 != (double *)&__block_literal_global_41831
            && (*((_BYTE *)v32 + 118) & 1) == 0)
          {
            os_log_type_t v34 = v32[10];
          }

          *((double *)v31 + 15) = v34;
          if (a5)
          {
            BOOL v35 = v33;
            __int16 v36 = 0;
            if (v33 != (double *)&__block_literal_global_41831 && v33 != (double *)&__block_literal_global_5_41854)
            {
              __int16 v36 = 1;
            }

            if (v36) {
              os_log_type_t v37 = 8;
            }
            else {
              os_log_type_t v37 = 0;
            }
          }

          else
          {
            os_log_type_t v37 = 0;
          }

          *((_BYTE *)v31 + 128) = v31[32] & 0xF7 | v37;
          objc_storeStrong((id *)v31 + 9, v17);
          *((void *)v31 + 12) = v20;
          unsigned int v53 = _Block_copy(aBlock);
          v54 = (void *)*((void *)v31 + 4);
          *((void *)v31 + 4) = v53;

          v31[22] = 200;
          *((_BYTE *)v31 + 128) &= ~0x20u;
          if (_nw_signposts_once != -1) {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_32859);
          }
          if (_nw_signposts_enabled && kdebug_is_enabled())
          {
            os_log_type_t v93 = (dispatch_data_s *)*((void *)v31 + 7);
            if (v93) {
              dispatch_data_get_size(v93);
            }
            os_log_type_t v97 = (nw_content_context *)*((void *)v31 + 8);
            if (v97) {
              nw_content_context_get_is_final(v97);
            }
            id v12 = v102;
            kdebug_trace();
          }

          uint64_t v31 = v31;
          id v55 = v31;
          goto LABEL_73;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v49 = (id)gLogObj;
        *(_DWORD *)addrinfo buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
        os_log_type_t v50 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v117 = OS_LOG_TYPE_ERROR;
        os_log_type_t v116 = 0;
        if ((__nwlog_fault(v50, &v117, &v116) & 1) != 0)
        {
          if (v117 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v51 = (os_log_s *)(id)gLogObj;
            id v52 = v117;
            if (os_log_type_enabled(v51, v117))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
              _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed",  buf,  0xCu);
            }
          }

          else if (v116)
          {
            id v56 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v51 = (os_log_s *)(id)gLogObj;
            unsigned int v57 = v117;
            char v58 = os_log_type_enabled(v51, v117);
            if (v56)
            {
              if (v58)
              {
                *(_DWORD *)addrinfo buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v56;
                _os_log_impl( &dword_181A5C000,  v51,  v57,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v56);
              if (!v50) {
                goto LABEL_72;
              }
              goto LABEL_71;
            }

            if (v58)
            {
              *(_DWORD *)addrinfo buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
              _os_log_impl( &dword_181A5C000,  v51,  v57,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v51 = (os_log_s *)(id)gLogObj;
            os_log_type_t v59 = v117;
            if (os_log_type_enabled(v51, v117))
            {
              *(_DWORD *)addrinfo buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
              _os_log_impl( &dword_181A5C000,  v51,  v59,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

        if (!v50)
        {
LABEL_72:
          id v55 = 0LL;
          goto LABEL_73;
        }

      free(backtrace_string);
      goto LABEL_98;
    }

    if (!v40) {
      goto LABEL_98;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
    __int16 v30 = "%{public}s called with null masque->listener_flows, no backtrace";
LABEL_97:
    _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0xCu);
LABEL_98:
    if (v27) {
      free(v27);
    }
    return 0LL;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unsigned int v53 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
      os_log_type_t v34 = "%{public}s called with null input_protocol";
    }

    else if (v53)
    {
      BOOL v41 = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      os_log_type_t v42 = os_log_type_enabled(v32, type);
      if (v41)
      {
        if (v42)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v41;
          _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v41);
        goto LABEL_105;
      }

      if (!v42)
      {
LABEL_105:
        if (v31) {
          free(v31);
        }
LABEL_13:
        if ((handle[529] & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
          }
          uint64_t v14 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&uint8_t buf[4] = handle + 531;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = " ";
            BOOL v15 = "%{public}s%sNo valid listener flow found";
            os_log_type_t v16 = (os_log_s *)v14;
            id v17 = 22;
LABEL_18:
            _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
            return 0LL;
          }
        }

        return 0LL;
      }

      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
      os_log_type_t v34 = "%{public}s called with null input_protocol, no backtrace";
    }

    else
    {
      os_log_type_t v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
      os_log_type_t v34 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0xCu);
    goto LABEL_105;
  }

  node = (void **)nw_hash_table_get_node(v8, (uint64_t)a2, 8LL);
  if (!node || (id v12 = node, a2->output_handler_context != node))
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      uint64_t v13 = (os_log_s *)gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = handle + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_ERROR, "%{public}s%sNo valid node found", buf, 0x16u);
      }
    }

    goto LABEL_13;
  }

  address_family = nw_endpoint_get_address_family(node[6]);
  os_log_type_t v20 = address_family;
  if (address_family != 2 && address_family != 30)
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      BOOL v26 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)addrinfo buf = 136446722;
        *(void *)&uint8_t buf[4] = handle + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        *(_WORD *)&buf[22] = 1024;
        id v56 = v20;
        BOOL v15 = "%{public}s%sInvalid address family %u";
        os_log_type_t v16 = (os_log_s *)v26;
        id v17 = 28;
        goto LABEL_18;
      }
    }

    return 0LL;
  }

  output_handler = a1->output_handler;
  *(void *)addrinfo buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000LL;
  id v56 = ((uint64_t (*)(void))output_handler->callbacks->get_output_frames)();
  if (*(_DWORD *)(*(void *)&buf[8] + 24LL))
  {
    v44[0] = MEMORY[0x1895F87A8];
    v44[1] = 0x40000000LL;
    os_log_type_t v45 = ___ZL45nw_protocol_masque_listener_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    BOOL v46 = &unk_189BBABF8;
    id v52 = v20;
    os_log_type_t v47 = buf;
    os_log_type_t v48 = handle;
    os_log_type_t v49 = a6;
    os_log_type_t v50 = v12 + 4;
    id v51 = a1;
    tqh_first = a6->tqh_first;
    do
    {
      if (!tqh_first) {
        break;
      }
      os_log_type_t v24 = (nw_frame *)*((void *)tqh_first + 4);
      uint64_t v25 = ((uint64_t (*)(void *))v45)(v44);
      tqh_first = v24;
    }

    while ((v25 & 1) != 0);
    os_log_type_t v18 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
  }

  else
  {
    os_log_type_t v18 = 0LL;
  }

  _Block_object_dispose(buf, 8);
  return v18;
}

    free(v38);
    goto LABEL_88;
  }

  uint64_t v25 = calloc(1uLL, 0x18uLL);
  if (v25)
  {
    uint64_t v13 = (uint64_t)v25;
    v25[4] = a3;
    BOOL v26 = dispatch_source_create(MEMORY[0x1895F8B60], a3, 0LL, *(dispatch_queue_t *)(a2 + 24));
    *(void *)(v13 + 8) = v26;
    if (v26)
    {
      os_retain((void *)a2);
      uint64_t v27 = *(dispatch_source_s **)(v13 + 8);
      BOOL v28 = MEMORY[0x1895F87A8];
      handler[0] = MEMORY[0x1895F87A8];
      handler[1] = 0x40000000LL;
      handler[2] = __tcp_listener_socket_create_with_fd_block_invoke;
      handler[3] = &__block_descriptor_tmp_9_34725;
      handler[4] = a2;
      id v52 = a3;
      dispatch_source_set_event_handler(v27, handler);
      *(void *)addrinfo buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000LL;
      *(void *)&buf[24] = *(void *)(v13 + 8);
      v49[0] = v28;
      v49[1] = 0x40000000LL;
      v49[2] = __tcp_listener_socket_create_with_fd_block_invoke_2;
      v49[3] = &unk_189BBC8B8;
      os_log_type_t v50 = a3;
      v49[4] = buf;
      v49[5] = a2;
      dispatch_source_set_cancel_handler(*(dispatch_source_t *)&buf[24], v49);
      _Block_object_dispose(buf, 8);
      return v13;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
    __int16 v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unsigned int v53 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v30 = (os_log_s *)gLogObj;
      uint64_t v31 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      os_log_type_t v32 = "%{public}s dispatch_source_create failed";
    }

    else if (v53)
    {
      BOOL v41 = (char *)__nw_create_backtrace_string();
      __int16 v30 = (os_log_s *)__nwlog_obj();
      uint64_t v31 = type;
      os_log_type_t v42 = os_log_type_enabled(v30, type);
      if (v41)
      {
        if (v42)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v41;
          _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v41);
        goto LABEL_81;
      }

      if (!v42)
      {
LABEL_81:
        if (v29) {
          free(v29);
        }
LABEL_89:
        __int16 v36 = (void *)v13;
        goto LABEL_54;
      }

      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      os_log_type_t v32 = "%{public}s dispatch_source_create failed, no backtrace";
    }

    else
    {
      __int16 v30 = (os_log_s *)__nwlog_obj();
      uint64_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      os_log_type_t v32 = "%{public}s dispatch_source_create failed, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
    goto LABEL_81;
  }

  v44 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = 1LL;
  *(_WORD *)&buf[22] = 2048;
  *(void *)&buf[24] = 24LL;
  os_log_type_t v45 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v45);
  if (!result)
  {
    free(v45);
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
    os_log_type_t v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unsigned int v53 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v46 = (os_log_s *)__nwlog_obj();
      os_log_type_t v47 = type;
      if (!os_log_type_enabled(v46, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      id v10 = "%{public}s malloc failed";
    }

    else if (v53)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v46 = (os_log_s *)__nwlog_obj();
      os_log_type_t v47 = type;
      os_log_type_t v48 = os_log_type_enabled(v46, type);
      if (backtrace_string)
      {
        if (!v48) {
          goto LABEL_27;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        id v19 = "%{public}s malloc failed, dumping backtrace:%{public}s";
        BOOL v21 = v46;
        os_log_type_t v22 = v47;
        id v23 = 22;
        goto LABEL_26;
      }

      if (!v48) {
        goto LABEL_52;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      id v10 = "%{public}s malloc failed, no backtrace";
    }

    else
    {
      BOOL v46 = (os_log_s *)__nwlog_obj();
      os_log_type_t v47 = type;
      if (!os_log_type_enabled(v46, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      id v10 = "%{public}s malloc failed, backtrace limit exceeded";
    }

    os_log_type_t v33 = v46;
    os_log_type_t v34 = v47;
    BOOL v35 = 12;
    goto LABEL_51;
  }

  __break(1u);
  return result;
}

  PBDataWriterWriteBOOLField();
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_18:
    if ((has & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_75;
  }
      }
    }

              if (v30) {
                free(v30);
              }
              *(_DWORD *)(v25 + 368) = -1;
LABEL_76:
              if ((*(_BYTE *)(v9 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v90 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
                  {
                    os_log_type_t v91 = *(void *)(v9 + 488);
                    v92 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
                    os_log_type_t v93 = *(_DWORD *)(v9 + 860);
                    if (v91) {
                      LODWORD(v91) = *(_DWORD *)(v91 + 424);
                    }
                    v94 = *(_DWORD *)(v25 + 368) + *(_DWORD *)(v25 + 364);
                    *(_DWORD *)addrinfo buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v9 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    BOOL v109 = (uint64_t)" ";
                    *(_WORD *)v110 = 1024;
                    *(_DWORD *)&v110[2] = v92;
                    *(_WORD *)&v110[6] = 1024;
                    *(_DWORD *)&v110[8] = v93;
                    LOWORD(v111) = 1024;
                    *(_DWORD *)((char *)&v111 + 2) = v91;
                    HIWORD(v111) = 1024;
                    v112 = v94;
                    _os_log_impl( &dword_181A5C000,  v90,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
                  }
                }
              }

              v63 = *(void **)(v9 + 496);
              if (v63)
              {
                uint64_t v64 = *(void *)(v9 + 480);
                if (v64)
                {
LABEL_80:
                  BOOL v65 = *(void *)(v64 + 200);
                  *(void *)addrinfo buf = MEMORY[0x1895F87A8];
                  *(void *)&buf[8] = 0x40000000LL;
                  *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
                  BOOL v109 = (uint64_t)&unk_189BBD540;
                  *(void *)v110 = v65;
                  nw_queue_context_async(v63, buf);
LABEL_81:
                  os_release(v11);
                  return;
                }

    BOOL v15 = v21;
    goto LABEL_76;
  }

  v15 += 2LL;
  os_log_type_t v22 = v58;
LABEL_76:
  *((_BYTE *)&__dst + v15) = 0;
  __int16 v30 = inet_pton(2, (const char *)&__dst, (void *)(a2 + 4));
  uint64_t v27 = 0LL;
  if (v30 != 1) {
    return v27;
  }
LABEL_77:
  unsigned __int8 *v22 = v19;
  uint64_t v31 = 8LL;
  if (v19 < 8) {
    uint64_t v31 = v19;
  }
  os_log_type_t v32 = v19 - v31 + 7;
  if (v32 >= 8)
  {
    os_log_type_t v34 = (v32 >> 3) + 1;
    BOOL v35 = v34 & 0x3FFFFFFFFFFFFFFELL;
    os_log_type_t v33 = v19 - 8 * (v34 & 0x3FFFFFFFFFFFFFFELL);
    __int16 v36 = v20 + 1;
    os_log_type_t v37 = v34 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      os_log_type_t v38 = v19 - 8;
      if (v19 >= 8) {
        os_log_type_t v39 = 8LL;
      }
      else {
        os_log_type_t v39 = v19;
      }
      if (v38 >= 8) {
        os_log_type_t v38 = 8LL;
      }
      os_log_type_t v40 = nw_utilities_cidr_string_to_subnet_and_mask::bb[v38 - 1];
      *(v36 - 1) = nw_utilities_cidr_string_to_subnet_and_mask::bb[v39 - 1];
      *__int16 v36 = v40;
      v36 += 2;
      v19 -= 16LL;
      v37 -= 2LL;
    }

    while (v37);
    if (v34 == v35) {
      return 1LL;
    }
    v20 += v35;
  }

  else
  {
    os_log_type_t v33 = v19;
  }

  uint64_t v27 = 1LL;
  do
  {
    os_log_type_t v42 = v33 - 8;
    BOOL v41 = v33 <= 8;
    if (v33 >= 8) {
      os_log_type_t v33 = 8LL;
    }
    *v20++ = nw_utilities_cidr_string_to_subnet_and_mask::bb[v33 - 1];
    os_log_type_t v33 = v42;
  }

  while (!v41);
  return v27;
}

    goto LABEL_74;
  }

  uint64_t v2 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  id v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], cStr, 0x8000100u);
  if (v3)
  {
    __int128 v4 = v3;
    id v5 = SecTaskCreateFromSelf(v2);
    if (v5)
    {
      id v6 = v5;
      error = 0LL;
      os_log_type_t v7 = SecTaskCopyValueForEntitlement(v5, v4, &error);
      if (!error) {
        goto LABEL_57;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446466;
      id v51 = "nw_utilities_copy_local_entitlement_value";
      id v52 = 2114;
      unsigned int v53 = error;
      id v9 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v47 = 0;
      if (__nwlog_fault((const char *)v9, &type, &v47))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v10 = (os_log_s *)(id)gLogObj;
          os_log_type_t v11 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            id v51 = "nw_utilities_copy_local_entitlement_value";
            id v52 = 2114;
            unsigned int v53 = error;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s SecTaskCopyValueForEntitlement %{public}@ failed",  buf,  0x16u);
          }
        }

        else if (v47)
        {
          os_log_type_t v22 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v10 = (os_log_s *)(id)gLogObj;
          id v23 = type;
          os_log_type_t v24 = os_log_type_enabled(v10, type);
          if (v22)
          {
            if (v24)
            {
              *(_DWORD *)addrinfo buf = 136446722;
              id v51 = "nw_utilities_copy_local_entitlement_value";
              id v52 = 2114;
              unsigned int v53 = error;
              v54 = 2082;
              id v55 = v22;
              _os_log_impl( &dword_181A5C000,  v10,  v23,  "%{public}s SecTaskCopyValueForEntitlement %{public}@ failed, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v22);
            if (!v9) {
              goto LABEL_55;
            }
LABEL_54:
            free(v9);
LABEL_55:
            if (error)
            {
              CFRelease(error);
              error = 0LL;
            }

      goto LABEL_74;
    }

    if (!v43)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v25 = (os_log_s *)(id)gLogObj;
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v46 = "nw_ws_create_client_request_block_invoke";
        os_log_type_t v34 = "%{public}s CFStringCreateMutable failed, backtrace limit exceeded";
        goto LABEL_71;
      }

      goto LABEL_73;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v25 = (os_log_s *)(id)gLogObj;
    __int16 v29 = type;
    os_log_type_t v37 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (!v37) {
        goto LABEL_73;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v46 = "nw_ws_create_client_request_block_invoke";
      os_log_type_t v34 = "%{public}s CFStringCreateMutable failed, no backtrace";
      goto LABEL_79;
    }

    if (!v37) {
      goto LABEL_66;
    }
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v46 = "nw_ws_create_client_request_block_invoke";
    os_log_type_t v47 = 2082;
    os_log_type_t v48 = backtrace_string;
    uint64_t v31 = "%{public}s CFStringCreateMutable failed, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_181A5C000, v25, v29, v31, buf, 0x16u);
    goto LABEL_66;
  }

  id v5 = Mutable;
  if (*(void *)a2)
  {
    id v6 = xpc_copy(*(xpc_object_t *)a2);
    os_log_type_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(v7 + 16);
    *(void *)(v7 + 16) = v6;

    id v9 = *(xpc_object_t *)a2;
    applier[0] = MEMORY[0x1895F87A8];
    applier[1] = 3221225472LL;
    applier[2] = __nw_ws_create_client_request_block_invoke_22;
    applier[3] = &__block_descriptor_48_e36_B24__0Q8__NSObject_OS_xpc_object__16l;
    applier[4] = v5;
    applier[5] = a2;
    if (!xpc_array_apply(v9, applier))
    {
      CFRelease(v5);
      return 0LL;
    }
  }

  if (CFStringGetLength(v5) >= 1) {
    CFHTTPMessageSetHeaderFieldValue(*(CFHTTPMessageRef *)(a1 + 32), @"Sec-WebSocket-Protocol", v5);
  }
  CFRelease(v5);
  if ((*(_BYTE *)(a2 + 70) & 8) != 0)
  {
    id v10 = CFStringCreateMutable(0LL, 0LL);
    CFStringAppendCString(v10, "permessage-deflate", 0x8000100u);
    os_log_type_t v11 = *(_BYTE *)(a2 + 70);
    if ((v11 & 0x10) == 0)
    {
      CFStringAppendCString(v10, "; server_no_context_takeover", 0x8000100u);
      os_log_type_t v11 = *(_BYTE *)(a2 + 70);
    }

    if ((v11 & 0x20) == 0) {
      CFStringAppendCString(v10, "; client_no_context_takeover", 0x8000100u);
    }
    if ((*(_BYTE *)(a2 + 68) & 0xF8) == 8) {
      CFStringAppendFormat(v10, 0LL, @"; server_max_window_bits=%d", *(unsigned __int8 *)(a2 + 68));
    }
    if ((*(_BYTE *)(a2 + 69) & 0xF8) == 8) {
      CFStringAppendFormat(v10, 0LL, @"; client_max_window_bits=%d", *(unsigned __int8 *)(a2 + 69));
    }
    CFHTTPMessageSetHeaderFieldValue(*(CFHTTPMessageRef *)(a1 + 32), @"Sec-WebSocket-Extensions", v10);
    if (v10) {
      CFRelease(v10);
    }
  }

  count = xpc_array_get_count(*(xpc_object_t *)(a2 + 8));
  if (!count) {
    return 1LL;
  }
  uint64_t v13 = count;
  uint64_t v14 = 0LL;
  BOOL v15 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  while (1)
  {
    string = xpc_array_get_string(*(xpc_object_t *)(a2 + 8), v14);
    id v17 = xpc_array_get_string(*(xpc_object_t *)(a2 + 16), v14);
    os_log_type_t v18 = CFStringCreateWithCString(v15, string, 0x600u);
    id v19 = CFStringCreateWithCString(v15, v17, 0x600u);
    os_log_type_t v20 = v19;
    if (!v18 || v19 == 0LL) {
      break;
    }
    CFHTTPMessageSetHeaderFieldValue(*(CFHTTPMessageRef *)(a1 + 32), v18, v19);
    CFRelease(v18);
    CFRelease(v20);
    if (v13 == ++v14) {
      return 1LL;
    }
  }

  if (v18) {
    CFRelease(v18);
  }
  if (v20) {
    CFRelease(v20);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v38 = (id)gLogObj;
  *(_DWORD *)addrinfo buf = 136446210;
  BOOL v46 = "nw_ws_create_client_request_block_invoke";
  os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v43 = 0;
  if (__nwlog_fault(v24, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v25 = (os_log_s *)(id)gLogObj;
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v46 = "nw_ws_create_client_request_block_invoke";
        os_log_type_t v34 = "%{public}s CFStringCreateWithCString failed";
        goto LABEL_71;
      }

      goto LABEL_73;
    }

    if (!v43)
    {
      __nwlog_obj();
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v46 = "nw_ws_create_client_request_block_invoke";
        os_log_type_t v34 = "%{public}s CFStringCreateWithCString failed, backtrace limit exceeded";
        goto LABEL_71;
      }

      goto LABEL_73;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v25 = (os_log_s *)(id)gLogObj;
    __int16 v29 = type;
    os_log_type_t v39 = os_log_type_enabled(v25, type);
    if (backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v46 = "nw_ws_create_client_request_block_invoke";
        os_log_type_t v47 = 2082;
        os_log_type_t v48 = backtrace_string;
        uint64_t v31 = "%{public}s CFStringCreateWithCString failed, dumping backtrace:%{public}s";
        goto LABEL_65;
      }

      goto LABEL_74;
    }

    if (!v39)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = v40;
      if (os_log_type_enabled(v17, v40))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_storage_lookup_items";
        id v19 = "%{public}s called with null completion, backtrace limit exceeded";
        goto LABEL_72;
      }

      goto LABEL_73;
    }

    BOOL v26 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v18 = v40;
    uint64_t v31 = os_log_type_enabled(v17, v40);
    if (!v26)
    {
      if (v31)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_storage_lookup_items";
        id v19 = "%{public}s called with null completion, no backtrace";
        goto LABEL_72;
      }

      goto LABEL_73;
    }

    if (v31)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v42 = "nw_storage_lookup_items";
      BOOL v43 = 2082;
      v44 = v26;
      BOOL v28 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_49;
    }

    os_log_type_t v48 = (NWConcrete_nw_unique_connection_request *)nw_service_connector_copy_active_request_for_connection( v15,  (NWConcrete_nw_connection *)v16);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v49 = (os_log_s *)(id)gLogObj;
    os_log_type_t v50 = os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
    if (v48)
    {
      if (v50)
      {
        *(_DWORD *)addrinfo buf = 136447234;
        os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
        v92 = 2114;
        os_log_type_t v93 = v15;
        v94 = 2082;
        *(void *)os_log_type_t v95 = a8;
        *(_WORD *)&v95[8] = 2114;
        *(void *)&v95[10] = v48;
        *(_WORD *)&v95[18] = 1024;
        *(_DWORD *)&v95[20] = v21;
        _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ failed %{public}s read of reply to %{public}@ %{darwin.errno}d",  buf,  0x30u);
      }

      switch(v21)
      {
        case ' ':
        case '1':
        case '6':
        case '9':
        case '<':
        case 'A':
        case 'Y':
          goto LABEL_77;
        case '!':
        case '""':
        case '#':
        case '$':
        case '%':
        case '&':
        case '\'':
        case '(':
        case ')':
        case '*':
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case '0':
        case '2':
        case '3':
        case '4':
        case '5':
        case '7':
        case '8':
        case ':':
        case ';':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case '_':
          goto LABEL_95;
        default:
          if (v21 == 5)
          {
LABEL_77:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v51 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)addrinfo buf = 136446722;
              os_log_type_t v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              os_log_type_t v93 = a8;
              v94 = 1024;
              *(_DWORD *)os_log_type_t v95 = v21;
              _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_ERROR,  "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d",  buf,  0x1Cu);
            }

            goto LABEL_80;
          }

    free(v28);
    goto LABEL_74;
  }

  __nwlog_obj();
  v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  v86 = "strict_calloc";
  v87 = 2048;
  v88 = (char *)1;
  os_log_type_t v89 = 2048;
  v90 = 48LL;
  os_log_type_t v74 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v74))
  {
    free(v74);
    __nwlog_obj();
    BOOL v75 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    v86 = "nw_quic_report_race_result_on_queue";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v83 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v76 = type;
      if (os_log_type_enabled(v65, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl(&dword_181A5C000, v65, v76, "%{public}s called with null association_cache", buf, 0xCu);
      }
    }

    else if (v83)
    {
      os_log_type_t v79 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v80 = type;
      os_log_type_t v81 = os_log_type_enabled(v65, type);
      if (v79)
      {
        if (v81)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v86 = "nw_quic_report_race_result_on_queue";
          v87 = 2082;
          v88 = v79;
          _os_log_impl( &dword_181A5C000,  v65,  v80,  "%{public}s called with null association_cache, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v79);
        if (!v64) {
          goto LABEL_76;
        }
        goto LABEL_131;
      }

      if (v81)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl( &dword_181A5C000,  v65,  v80,  "%{public}s called with null association_cache, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v82 = type;
      if (os_log_type_enabled(v65, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl( &dword_181A5C000,  v65,  v82,  "%{public}s called with null association_cache, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_129;
  }

  __break(1u);
}

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_74;
  }

  handle = (char *)a1->handle;
  if (handle)
  {
    if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        id v19 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v20 = *((_DWORD *)handle + 320);
          *(_DWORD *)addrinfo buf = 136446978;
          __int16 v30 = "nw_protocol_http3_listen_protocol_disconnected";
          uint64_t v31 = 2082;
          os_log_type_t v32 = (nw_protocol_identifier *)(handle + 1289);
          os_log_type_t v33 = 2080;
          os_log_type_t v34 = " ";
          BOOL v35 = 1024;
          __int16 v36 = v20;
          _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> listen protocol is disconnected",  buf,  0x26u);
        }
      }
    }

    if (a2)
    {
      callbacks = a2->callbacks;
      if (callbacks)
      {
        remove_listen_handler = (void (*)(nw_protocol *, char *))callbacks->remove_listen_handler;
        if (remove_listen_handler)
        {
          remove_listen_handler(a2, handle + 136);
LABEL_9:
          nw_http3_async_close_connection_if_no_stream((uint64_t)handle);
          if ((*(_WORD *)(handle + 1373) & 0x800) == 0) {
            nw_protocol_set_output_handler((uint64_t)handle, 0LL);
          }
          return;
        }
      }

      __nwlog_obj();
      identifier = a2->identifier;
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
    }

    else
    {
      __nwlog_obj();
      identifier = (nw_protocol_identifier *)"invalid";
    }

    *(_DWORD *)addrinfo buf = 136446466;
    __int16 v30 = "nw_protocol_http3_listen_protocol_disconnected";
    uint64_t v31 = 2082;
    os_log_type_t v32 = identifier;
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v27 = 0;
    if (__nwlog_fault(v11, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v12 = (os_log_s *)__nwlog_obj();
        uint64_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_63;
        }
        uint64_t v14 = (nw_protocol_identifier *)"invalid";
        if (a2 && a2->identifier) {
          uint64_t v14 = a2->identifier;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        __int16 v30 = "nw_protocol_http3_listen_protocol_disconnected";
        uint64_t v31 = 2082;
        os_log_type_t v32 = v14;
        BOOL v15 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback";
        goto LABEL_62;
      }

      if (!v27)
      {
        id v12 = (os_log_s *)__nwlog_obj();
        uint64_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_63;
        }
        BOOL v21 = (nw_protocol_identifier *)"invalid";
        if (a2 && a2->identifier) {
          BOOL v21 = a2->identifier;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        __int16 v30 = "nw_protocol_http3_listen_protocol_disconnected";
        uint64_t v31 = 2082;
        os_log_type_t v32 = v21;
        BOOL v15 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, backtrace limit exceeded";
        goto LABEL_62;
      }

      os_log_type_t v16 = (char *)__nw_create_backtrace_string();
      id v12 = (os_log_s *)__nwlog_obj();
      uint64_t v13 = type;
      id v17 = os_log_type_enabled(v12, type);
      if (v16)
      {
        if (v17)
        {
          os_log_type_t v18 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            os_log_type_t v18 = a2->identifier;
          }
          *(_DWORD *)addrinfo buf = 136446722;
          __int16 v30 = "nw_protocol_http3_listen_protocol_disconnected";
          uint64_t v31 = 2082;
          os_log_type_t v32 = v18;
          os_log_type_t v33 = 2082;
          os_log_type_t v34 = v16;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s protocol %{public}s has invalid remove_listen_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v16);
        goto LABEL_63;
      }

      if (v17)
      {
        BOOL v26 = (nw_protocol_identifier *)"invalid";
        if (a2 && a2->identifier) {
          BOOL v26 = a2->identifier;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        __int16 v30 = "nw_protocol_http3_listen_protocol_disconnected";
        uint64_t v31 = 2082;
        os_log_type_t v32 = v26;
        BOOL v15 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, no backtrace";
LABEL_62:
        _os_log_impl(&dword_181A5C000, v12, v13, v15, buf, 0x16u);
      }
    }

      free(backtrace_string);
      goto LABEL_83;
    }

    os_log_type_t v38 = (os_log_s *)__nwlog_obj();
    os_log_type_t v39 = type[0];
    if (!os_log_type_enabled(v38, type[0])) {
      goto LABEL_83;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
    os_log_type_t v40 = "%{public}s called with null protocol";
LABEL_82:
    _os_log_impl(&dword_181A5C000, v38, v39, v40, buf, 0xCu);
LABEL_83:
    if (v37) {
      free(v37);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v73 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type[0];
      if (!os_log_type_enabled(v38, type[0])) {
        goto LABEL_83;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
      os_log_type_t v40 = "%{public}s called with null http3_stream";
      goto LABEL_82;
    }

    if (v73 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type[0];
      if (!os_log_type_enabled(v38, type[0])) {
        goto LABEL_83;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
      os_log_type_t v40 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_82;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v38 = (os_log_s *)__nwlog_obj();
    os_log_type_t v39 = type[0];
    os_log_type_t v45 = os_log_type_enabled(v38, type[0]);
    if (backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        v44 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
        goto LABEL_72;
      }

      goto LABEL_73;
    }

    if (!v45) {
      goto LABEL_83;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
    os_log_type_t v40 = "%{public}s called with null http3_stream, no backtrace";
    goto LABEL_82;
  }

  if (gLogDatapath)
  {
    BOOL v41 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = handle;
      _os_log_impl(&dword_181A5C000, v41, OS_LOG_TYPE_DEBUG, "%{public}s called on http3_uni_stream %p", buf, 0x16u);
    }
  }

  if ((handle[131] & 2) == 0) {
    return 0LL;
  }
  if ((handle[131] & 4) == 0)
  {
    output_handler = a1->output_handler;
    if (!output_handler) {
      return 0LL;
    }
    callbacks = output_handler->callbacks;
    if (!callbacks) {
      return 0LL;
    }
    get_input_frames = (unsigned int (*)(void))callbacks->get_input_frames;
    if (!get_input_frames || !get_input_frames()) {
      return 0LL;
    }
    *(void *)os_log_type_t type = 0LL;
    v69 = type;
    uint64_t v70 = 0x2000000000LL;
    os_log_type_t v71 = -1LL;
    v62[0] = MEMORY[0x1895F87A8];
    v62[1] = 0x40000000LL;
    v63 = ___ZL45nw_protocol_http3_uni_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    uint64_t v64 = &unk_189BC4078;
    BOOL v65 = type;
    v66 = handle;
    os_log_type_t v67 = a1;
    uint64_t v14 = *((void *)handle + 13);
    do
    {
      if (!v14) {
        break;
      }
      BOOL v15 = *(void *)(v14 + 32);
      os_log_type_t v16 = ((uint64_t (*)(void *))v63)(v62);
      uint64_t v14 = v15;
    }

    while ((v16 & 1) != 0);
    if ((handle[131] & 4) == 0 || (handle[131] & 2) == 0)
    {
LABEL_51:
      _Block_object_dispose(type, 8);
      return 0LL;
    }

    id v17 = *((void *)v69 + 3);
    id v19 = (void *)*((void *)handle + 9);
    os_log_type_t v18 = *((void *)handle + 10);
    os_log_type_t v20 = (void *)*((void *)handle + 11);
    if (v18)
    {
      *(void *)(v18 + 88) = v20;
      os_log_type_t v20 = (void *)*((void *)handle + 11);
    }

    else
    {
      v19[113] = v20;
    }

    void *v20 = v18;
    switch(v17)
    {
      case 3LL:
        if (!v19[135])
        {
          handle[131] &= ~8u;
          v19[135] = handle;
          nw_http3_decoder_stream_process_input((uint64_t)v19);
          goto LABEL_51;
        }

        goto LABEL_41;
      case 2LL:
        if (!v19[133])
        {
          handle[131] &= ~8u;
          v19[133] = handle;
          nw_http3_encoder_stream_process_input((uint64_t)v19);
          goto LABEL_51;
        }

        goto LABEL_41;
      case 0LL:
        if (!v19[131])
        {
          handle[131] &= ~8u;
          v19[131] = handle;
          v19[26] = handle;
          nw_http3_control_stream_process_input((uint64_t)v19);
          goto LABEL_51;
        }

      free(backtrace_string);
      goto LABEL_83;
    }

    BOOL v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_83;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    id v52 = "nw_protocol_http3_remove_input_handler";
    BOOL v43 = "%{public}s called with null protocol";
LABEL_82:
    _os_log_impl(&dword_181A5C000, v41, v42, v43, buf, 0xCu);
LABEL_83:
    if (v40) {
      free(v40);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    id v52 = "nw_protocol_http3_remove_input_handler";
    os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v49 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      id v52 = "nw_protocol_http3_remove_input_handler";
      BOOL v43 = "%{public}s called with null http3";
      goto LABEL_82;
    }

    if (!v49)
    {
      BOOL v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)addrinfo buf = 136446210;
      id v52 = "nw_protocol_http3_remove_input_handler";
      BOOL v43 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_82;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    os_log_type_t v47 = os_log_type_enabled(v41, type);
    if (backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        id v52 = "nw_protocol_http3_remove_input_handler";
        unsigned int v53 = 2082;
        v54 = backtrace_string;
        BOOL v46 = "%{public}s called with null http3, dumping backtrace:%{public}s";
        goto LABEL_72;
      }

      goto LABEL_73;
    }

    if (!v47) {
      goto LABEL_83;
    }
    *(_DWORD *)addrinfo buf = 136446210;
    id v52 = "nw_protocol_http3_remove_input_handler";
    BOOL v43 = "%{public}s called with null http3, no backtrace";
    goto LABEL_82;
  }

  id v5 = handle + 1373;
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v7 = *((_DWORD *)handle + 320);
      default_input_handler = a1->default_input_handler;
      *(_DWORD *)addrinfo buf = 136447746;
      id v52 = "nw_protocol_http3_remove_input_handler";
      unsigned int v53 = 2082;
      v54 = handle + 1289;
      id v55 = 2080;
      id v56 = " ";
      unsigned int v57 = 1024;
      char v58 = v7;
      os_log_type_t v59 = 2048;
      char v60 = a1;
      os_log_type_t v61 = 2048;
      __int16 v62 = default_input_handler;
      v63 = 2048;
      uint64_t v64 = a2;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> protocol %p, default_input_handler %p, input protocol %p",  buf,  0x44u);
    }
  }

  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
  }
  id v9 = *((void *)handle + 110);
  if (v9)
  {
    id v10 = (unsigned __int16)*v5 | (handle[1375] << 16);
    if ((v10 & 0x200000) == 0 && *((void *)handle + 155) && *((_DWORD *)handle + 319) == 2)
    {
      while ((*(_WORD *)(v9 + 736) & 0x2000) != 0)
      {
        id v9 = *(void *)(v9 + 544);
        if (!v9)
        {
          if ((v10 & 0x400000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v11 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              id v12 = *((_DWORD *)handle + 320);
              *(_DWORD *)addrinfo buf = 136446978;
              id v52 = "nw_protocol_http3_remove_input_handler";
              unsigned int v53 = 2082;
              v54 = handle + 1289;
              id v55 = 2080;
              id v56 = " ";
              unsigned int v57 = 1024;
              char v58 = v12;
              _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> disabling QUIC keepalives due to idleness",  buf,  0x26u);
            }
          }

          handle[1375] |= 0x20u;
          nw_quic_connection_set_keepalive(*((void **)handle + 155), 0);
          buf[0] = 1;
          output_handler = a1->output_handler;
          if (output_handler)
          {
            callbacks = output_handler->callbacks;
            if (callbacks)
            {
              notify = (void (*)(void))callbacks->notify;
              if (notify) {
                notify();
              }
            }
          }

          break;
        }
      }
    }
  }

  if (a1->default_input_handler != a2) {
    return 0LL;
  }
  id v17 = (unsigned __int16)*v5;
  if ((v17 & 0x18) == 0)
  {
    if (((v17 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        id v19 = *((_DWORD *)handle + 320);
        *(_DWORD *)addrinfo buf = 136446978;
        id v52 = "nw_protocol_http3_remove_input_handler";
        unsigned int v53 = 2082;
        v54 = handle + 1289;
        id v55 = 2080;
        id v56 = " ";
        unsigned int v57 = 1024;
        char v58 = v19;
        _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> first input handler bailed, closing",  buf,  0x26u);
      }
    }

    *v5 |= 8u;
    nw_protocol_remove_instance((uint64_t)handle);
    os_log_type_t v20 = (void *)*((void *)handle + 110);
    if (!v20) {
      goto LABEL_33;
    }
    do
    {
      BOOL v21 = (void *)v20[68];
      nw_protocol_notify(v20, (uint64_t)handle, 22);
      os_log_type_t v20 = v21;
    }

    while (v21);
  }

  os_log_type_t v22 = *((void *)handle + 110);
  if (!v22)
  {
LABEL_33:
    nw_protocol_set_input_handler((uint64_t)a1, 0LL);
    BOOL v26 = (unsigned __int16)*v5;
    if ((v26 & 0x800) == 0)
    {
      if (((v26 | (handle[1375] << 16)) & 0x400000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v27 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          BOOL v28 = *((_DWORD *)handle + 320);
          *(_DWORD *)addrinfo buf = 136446978;
          id v52 = "nw_protocol_http3_remove_input_handler";
          unsigned int v53 = 2082;
          v54 = handle + 1289;
          id v55 = 2080;
          id v56 = " ";
          unsigned int v57 = 1024;
          char v58 = v28;
          _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> called before initial connect, will tear down immediately",  buf,  0x26u);
        }
      }

      *v5 |= 8u;
      nw_protocol_remove_instance((uint64_t)handle);
      nw_protocol_set_output_handler((uint64_t)handle, 0LL);
    }

    if (*((void *)handle + 155))
    {
      __int16 v29 = *((_DWORD *)handle + 319);
      if (v29 == 2 || v29 == 1 && (*(_WORD *)(handle + 1373) & 8) != 0)
      {
        if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v30 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v31 = *((_DWORD *)handle + 320);
            *(_DWORD *)addrinfo buf = 136446978;
            id v52 = "nw_protocol_http3_remove_input_handler";
            unsigned int v53 = 2082;
            v54 = handle + 1289;
            id v55 = 2080;
            id v56 = " ";
            unsigned int v57 = 1024;
            char v58 = v31;
            _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> disabling QUIC keepalives",  buf,  0x26u);
          }
        }

        handle[1375] |= 0x20u;
        nw_quic_connection_set_keepalive(*((void **)handle + 155), 0);
      }
    }

    os_log_type_t v32 = *((void *)handle + 158);
    if (v32) {
      nw_queue_cancel_source(v32, v25);
    }
    v48[0] = MEMORY[0x1895F87A8];
    v48[1] = 0x40000000LL;
    v48[2] = ___ZL38nw_protocol_http3_remove_input_handlerP11nw_protocolS0_b_block_invoke;
    v48[3] = &__block_descriptor_tmp_167;
    v48[4] = handle;
    *((void *)handle + 158) = nw_queue_context_create_source(0LL, 2, 3, 0, v48, 0LL);
    os_log_type_t v33 = (nw_protocol *)*((void *)handle + 127);
    os_log_type_t v34 = *((void *)handle + 158);
    BOOL v35 = dispatch_time(0x8000000000000000LL, 1000000LL * (void)v33);
    nw_queue_set_timer_values(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 1000LL * (void)v33);
    if ((((unsigned __int16)*v5 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v37 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v38 = *((_DWORD *)handle + 320);
        *(_DWORD *)addrinfo buf = 136447234;
        id v52 = "nw_protocol_http3_remove_input_handler";
        unsigned int v53 = 2082;
        v54 = handle + 1289;
        id v55 = 2080;
        id v56 = " ";
        unsigned int v57 = 1024;
        char v58 = v38;
        os_log_type_t v59 = 2048;
        char v60 = v33;
        _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> activating destroy timer for %lldms",  buf,  0x30u);
      }
    }

    nw_queue_activate_source(*((void *)handle + 158), v36);
    return 1LL;
  }

  nw_protocol_set_input_handler((uint64_t)a1, *(void *)(v22 + 48));
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v23 = (os_log_s *)gLogObj;
  os_log_type_t v16 = 1LL;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    os_log_type_t v24 = *((_DWORD *)handle + 320);
    *(_DWORD *)addrinfo buf = 136446978;
    id v52 = "nw_protocol_http3_remove_input_handler";
    unsigned int v53 = 2082;
    v54 = handle + 1289;
    id v55 = 2080;
    id v56 = " ";
    unsigned int v57 = 1024;
    char v58 = v24;
    _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> not destroying, has streams",  buf,  0x26u);
  }

  return v16;
}

  if (v11)
  {
    os_log_type_t v42 = (char *)v11;
LABEL_90:
    free(v42);
  }

    _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
    goto LABEL_74;
  }

  handle = (char *)a1->handle;
  if (handle)
  {
    if ((*((_WORD *)handle + 368) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v50 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          id v51 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
          id v52 = *((void *)handle + 30);
          unsigned int v53 = *((_DWORD *)handle + 92);
          *(_DWORD *)addrinfo buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 636;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = " ";
          LOWORD(v76) = 1024;
          *(_DWORD *)((char *)&v76 + 2) = v51;
          WORD3(v76) = 2048;
          *((void *)&v76 + 1) = v52;
          *(_WORD *)v77 = 1024;
          *(_DWORD *)&v77[2] = v53;
          _os_log_impl( &dword_181A5C000,  v50,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> called, state %u",  buf,  0x36u);
        }
      }
    }

    __int128 v4 = 0LL;
    switch(*((_DWORD *)handle + 92))
    {
      case 0:
      case 1:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = *((_DWORD *)handle + 92);
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        id v6 = (const char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        BYTE4(v69) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v7 = (os_log_s *)gLogObj;
          id v8 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            id v9 = *((_DWORD *)handle + 92);
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v9;
            id v10 = "%{public}s Unexpected output state %d";
LABEL_66:
            _os_log_impl(&dword_181A5C000, v7, v8, v10, buf, 0x12u);
          }
        }

        else if (BYTE4(v69))
        {
          os_log_type_t v38 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v7 = (os_log_s *)gLogObj;
          id v8 = type[0];
          os_log_type_t v39 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v38)
          {
            if (v39)
            {
              os_log_type_t v40 = *((_DWORD *)handle + 92);
              *(_DWORD *)addrinfo buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v40;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v38;
              _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s Unexpected output state %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v38);
            goto LABEL_67;
          }

          if (v39)
          {
            BOOL v46 = *((_DWORD *)handle + 92);
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v46;
            id v10 = "%{public}s Unexpected output state %d, no backtrace";
            goto LABEL_66;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v7 = (os_log_s *)gLogObj;
          id v8 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            os_log_type_t v42 = *((_DWORD *)handle + 92);
            *(_DWORD *)addrinfo buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v42;
            id v10 = "%{public}s Unexpected output state %d, backtrace limit exceeded";
            goto LABEL_66;
          }
        }

  *(_OWORD *)(v30 + 104) = *(_OWORD *)(v8 + 5);
  *(_OWORD *)(v30 + 120) = *(_OWORD *)(v8 + 7);
  *((void *)v30 + 17) = v8[9];
  *((void *)v30 + 33) = 0LL;
  *(_DWORD *)__int16 v30 = 0;
  *((void *)v30 + 35) = 0LL;
  *((void *)v30 + 36) = 0LL;
  *((void *)v30 + 46) = 0LL;
  *((void *)v30 + 47) = v30 + 368;
  *((_DWORD *)v30 + 18) = *((_DWORD *)v8 + 2);
  uuid_generate_random((unsigned __int8 *)v30 + 224);
  snprintf(v30 + 160, 0x40uLL, "%s.region.%s.%s", "NWSlab", (const char *)*v8, a2);
  if (gLogDatapath)
  {
    v112 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)addrinfo buf = 136446722;
      v156 = "nw_mem_region_create";
      v157 = 2082;
      *(void *)v158 = v30 + 160;
      *(_WORD *)&v158[8] = 2048;
      *(void *)v159 = v30;
      _os_log_impl(&dword_181A5C000, v112, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: nwr %p ", buf, 0x20u);
    }
  }

  *((_DWORD *)v30 + 19) = v29;
  if ((v29 & 0x10) != 0) {
    *((_DWORD *)v30 + 60) |= 0x10u;
  }
  if ((v29 & 0x20) != 0) {
    *((_DWORD *)v30 + 60) |= 0x20u;
  }
  BOOL v41 = *((void *)v30 + 12) + 63LL;
  *((void *)v30 + 39) = v41 >> 6;
  os_log_type_t v42 = (v41 >> 3) & 0x1FFFFFF8;
  if (!v42)
  {
    os_log_type_t v113 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446210;
    v156 = "strict_calloc";
    os_log_type_t v114 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v114);
    if (result) {
      goto LABEL_216;
    }
    free(v114);
  }

  BOOL v43 = calloc(1uLL, v42);
  if (!v43)
  {
    os_log_type_t v115 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446722;
    v156 = "strict_calloc";
    v157 = 2048;
    *(void *)v158 = 1LL;
    *(_WORD *)&v158[8] = 2048;
    *(void *)v159 = v42;
    os_log_type_t v116 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v116);
    if (result) {
      goto LABEL_216;
    }
    free(v116);
  }

  *((void *)v30 + 38) = v43;
  memset(v43, 255, ((*((_DWORD *)v30 + 24) + 63) >> 3) & 0x1FFFFFF8);
  ++*((_DWORD *)v30 + 1);
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  *((void *)v30 + 18) = 0LL;
  v44 = (void *)qword_18C45F258;
  *((void *)v30 + 19) = qword_18C45F258;
  os_log_s *v44 = v30;
  qword_18C45F258 = (uint64_t)(v30 + 144);
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
  if (gLogDatapath)
  {
    os_log_type_t v117 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v118 = *((void *)v30 + 11);
      v119 = *((void *)v30 + 12);
      v120 = *((void *)v30 + 15);
      os_log_type_t v121 = *((void *)v30 + 16);
      BOOL v122 = *((_DWORD *)v30 + 19);
      *(_DWORD *)addrinfo buf = 136447490;
      v156 = "nw_mem_region_create";
      v157 = 1024;
      *(_DWORD *)v158 = v118;
      *(_WORD *)&v158[4] = 1024;
      *(_DWORD *)&v158[6] = v119;
      *(_WORD *)v159 = 1024;
      *(_DWORD *)&v159[2] = v120;
      *(_WORD *)&v159[6] = 1024;
      *(_DWORD *)&v159[8] = v121;
      *(_WORD *)&v159[12] = 1024;
      *(_DWORD *)&v159[14] = v122;
      _os_log_impl( &dword_181A5C000,  v117,  OS_LOG_TYPE_DEBUG,  "%{public}s   [TOTAL] seg (%u*%u) obj (%u*%u) cflags 0x%u",  buf,  0x2Au);
    }
  }

  v8[10] = v30;
  os_log_type_t v45 = v8[7];
  BOOL v46 = *((void *)v30 + 11);
  os_log_type_t v47 = malloc_zone_calloc((malloc_zone_t *)g_slab_zone, 1uLL, 0x308uLL);
  if (!v47)
  {
    os_log_type_t v123 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446722;
    v156 = "strict_malloc_zone_calloc";
    v157 = 2048;
    *(void *)v158 = 1LL;
    *(_WORD *)&v158[8] = 2048;
    *(void *)v159 = 776LL;
    v124 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v124);
    if (result) {
      goto LABEL_216;
    }
    free(v124);
  }

  os_log_type_t v48 = (-8LL - (void)v47) & 0xFFFFFFFFFFFFFF80LL;
  *(void *)(v48 ^ 0xFFFFFFFFFFFFFFF8LL) = v47;
  if (v46 <= 7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)addrinfo buf = 136446722;
    v156 = "nw_mem_cache_create";
    v157 = 2082;
    *(void *)v158 = "nw_mem_cache_create";
    *(_WORD *)&v158[8] = 2048;
    *(void *)v159 = 8LL;
    os_log_type_t v49 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v49);
    if (result) {
      goto LABEL_216;
    }
    free(v49);
  }

  id v51 = -(uint64_t)v48;
  id v52 = nw_mem_debug;
  if ((nw_mem_debug & 1) != 0) {
    *(_DWORD *)(176 - v48) |= 1u;
  }
  if ((v52 & 2) != 0) {
    *(_DWORD *)(176 - v48) |= 2u;
  }
  snprintf((char *)(96 - v48), 0x40uLL, "NWSlab.mem.%s", a2);
  *(void *)(160 - v48) = v45;
  *(void *)(168 - v48) = 8LL;
  *(_OWORD *)(184 - v48) = 0u;
  *(_OWORD *)(200 - v48) = 0u;
  *(void *)(248 - v48) = v46;
  *(void *)(216 - v48) = v30;
  ++*((_DWORD *)v30 + 1);
  unsigned int v53 = *((void *)v30 + 15);
  *(void *)(240 - v48) = v53;
  v54 = -(uint64_t)(-v45 & 0xFFFFFFFFFFFFFFF8LL);
  if (v53 >= v54)
  {
LABEL_92:
    *(void *)(232 - v48) = v54;
    *(_DWORD *)(224 - v48) = 0;
    *(void *)(296 - v48) = 0LL;
    *(void *)(304 - v48) = 296 - v48;
    *(void *)(312 - v48) = 0LL;
    *(void *)(320 - v48) = 312 - v48;
    *(_OWORD *)(256 - v48) = xmmword_18272D800;
    id v56 = nw_calloc_type<nw_mem_bufctl_bkt>(0x40uLL);
    *(void *)(280 - v48) = *(void *)(256 - v48) - 1LL;
    *(void *)(288 - v48) = v56;
    *(void *)(272 - v48) = flsll(v54) - 1;
    unsigned int v57 = *(void *)(280 - v48);
    char v58 = v57 + 1;
    if (v57 != -1LL)
    {
      os_log_type_t v59 = *(void *)(288 - v48);
      if (v58 >= 0xA)
      {
        os_log_type_t v61 = 0;
        char v60 = 0LL;
        if ((_DWORD)v57 != -1 && !HIDWORD(v57))
        {
          char v60 = v58 & 0xFFFFFFFFFFFFFFFCLL;
          BOOL v75 = *(_OWORD **)(288 - v48);
          os_log_type_t v76 = v58 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            *BOOL v75 = 0uLL;
            v75[1] = 0uLL;
            v75 += 2;
            v76 -= 4LL;
          }

          while (v76);
          os_log_type_t v61 = v58 & 0xFFFFFFFC;
          if (v58 == v60) {
            goto LABEL_97;
          }
        }
      }

      else
      {
        char v60 = 0LL;
        os_log_type_t v61 = 0;
      }

      __int16 v62 = v61 + 1;
      do
      {
        *(void *)(v59 + 8 * v60) = 0LL;
        char v60 = v62++;
      }

      while (v58 > v60);
    }

        goto LABEL_74;
      }

      if (!(_BYTE)v67)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v23 = (os_log_s *)(id)gLogObj;
        BOOL v41 = buf[0];
        if (os_log_type_enabled(v23, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl( &dword_181A5C000,  v23,  v41,  "%{public}s nw_path_create failed, backtrace limit exceeded",  v76,  0xCu);
        }

        goto LABEL_73;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v23 = (os_log_s *)(id)gLogObj;
      os_log_type_t v32 = buf[0];
      os_log_type_t v33 = os_log_type_enabled(v23, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_181A5C000, v23, v32, "%{public}s nw_path_create failed, no backtrace", v76, 0xCu);
        }

        goto LABEL_73;
      }

      if (v33)
      {
        *(_DWORD *)os_log_type_t v76 = 136446466;
        v77 = "nw_path_evaluator_evaluate";
        v78 = 2082;
        os_log_type_t v79 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v23,  v32,  "%{public}s nw_path_create failed, dumping backtrace:%{public}s",  v76,  0x16u);
      }

LABEL_40:
      free(backtrace_string);
      if (!v12) {
        goto LABEL_85;
      }
      goto LABEL_84;
    }

    os_log_type_t v67 = 0LL;
    os_log_type_t v11 = *((unsigned __int8 *)v3 + 107);
    BYTE2(v64) = (v11 & 8) != 0;
    BYTE1(v64) = (v11 & 4) != 0;
    LOBYTE(v64) = *((_BYTE *)v3 + 106);
    id v12 = (char *)nw_path_create_necp_parameters( &v67,  *((void *)v3 + 2),  *((void *)v3 + 3),  *((void *)v3 + 4),  *((void *)v3 + 5),  *((void *)v3 + 1),  (v11 >> 1) & 1,  *((unsigned __int16 *)v3 + 52),  v64);
    if (!v12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v19 = (id)gLogObj;
      *(_DWORD *)os_log_type_t v76 = 136446210;
      v77 = "nw_path_evaluator_evaluate";
      id v12 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (os_log_s *)(id)gLogObj;
        BOOL v21 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s nw_path_create_necp_parameters failed", v76, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (os_log_s *)(id)gLogObj;
        __int16 v30 = buf[0];
        uint64_t v31 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)os_log_type_t v76 = 136446466;
            v77 = "nw_path_evaluator_evaluate";
            v78 = 2082;
            os_log_type_t v79 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s nw_path_create_necp_parameters failed, dumping backtrace:%{public}s",  v76,  0x16u);
          }

          goto LABEL_40;
        }

        if (v31)
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s nw_path_create_necp_parameters failed, no backtrace",  v76,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (os_log_s *)(id)gLogObj;
        os_log_type_t v40 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl( &dword_181A5C000,  v20,  v40,  "%{public}s nw_path_create_necp_parameters failed, backtrace limit exceeded",  v76,  0xCu);
        }
      }

      goto LABEL_74;
    }

    uint64_t v13 = nw_path_create(*((void **)v3 + 2), *((void **)v3 + 1));
    uint64_t v14 = (void *)*((void *)v3 + 6);
    *((void *)v3 + 6) = v13;

    BOOL v15 = *((void *)v3 + 6);
    if (v15)
    {
      objc_storeStrong((id *)(v15 + 32), *((id *)v3 + 3));
      os_log_type_t v16 = (char *)v3 + 48;
      objc_storeStrong((id *)(*((void *)v3 + 6) + 40LL), *((id *)v3 + 4));
      objc_storeStrong((id *)(*((void *)v3 + 6) + 48LL), *((id *)v3 + 5));
      *(_BYTE *)(*(void *)v16 + 475LL) = *(_BYTE *)(*(void *)v16 + 475LL) & 0xFE | ((*((_BYTE *)v3 + 107) & 2) != 0);
      *(_WORD *)(*(void *)v16 + 384LL) = *((_WORD *)v3 + 52);
      *(_BYTE *)(*(void *)v16 + 386LL) = *((_BYTE *)v3 + 106);
      *(_BYTE *)(*(void *)v16 + 475LL) = *(_BYTE *)(*(void *)v16 + 475LL) & 0xFD | (*((_BYTE *)v3 + 107) >> 1) & 2;
      if (nw_path_shared_necp_fd(v6) == -1)
      {
LABEL_66:
        free(v12);
        goto LABEL_67;
      }

      bzero(v76, 0x600uLL);
      if (uuid_is_null((const unsigned __int8 *)v3 + 80) && necp_client_action())
      {
        id v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)addrinfo buf = 136446466;
          v69 = "nw_path_evaluator_evaluate";
          uint64_t v70 = 1024;
          *(_DWORD *)os_log_type_t v71 = v17;
          _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_ERROR,  "%{public}s NECP_CLIENT_ACTION_ADD error %{darwin.errno}d",  buf,  0x12u);
        }

LABEL_13:
        if (a2) {
          *a2 = v17;
        }
        goto LABEL_84;
      }

      if (uuid_is_null((const unsigned __int8 *)v3 + 80))
      {
        os_log_type_t v34 = 0;
        BOOL v35 = 0;
LABEL_58:
        if (uuid_is_null((const unsigned __int8 *)v3 + 80) || !v34 || !v35)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v42 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            BOOL v43 = "failed to parse";
            *(_DWORD *)addrinfo buf = 136447234;
            v69 = "nw_path_evaluator_evaluate";
            uint64_t v70 = 2082;
            if (v35) {
              BOOL v43 = "parsed";
            }
            *(void *)os_log_type_t v71 = v43;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)&v71[10] = v34;
            v72 = 1042;
            v73 = 16;
            os_log_type_t v74 = 2098;
            BOOL v75 = (char *)v3 + 80;
            _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_ERROR,  "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{public}s %d bytes for id %{public,uuid_t}.16P",  buf,  0x2Cu);
          }
        }

        goto LABEL_66;
      }

      *(_OWORD *)(*((void *)v3 + 6) + 120LL) = *((_OWORD *)v3 + 5);
      os_log_type_t v34 = necp_client_action();
      if (v34 > 0)
      {
        BOOL v35 = nw_path_parse_necp_result(*((void **)v3 + 6), (uint64_t)v76, v34);
        goto LABEL_58;
      }

      id v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      __nwlog_obj();
      os_log_type_t v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446466;
      v69 = "nw_path_evaluator_evaluate";
      uint64_t v70 = 1024;
      *(_DWORD *)os_log_type_t v71 = v17;
      os_log_type_t v49 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      BOOL v65 = 0;
      if (__nwlog_fault(v49, &type, &v65))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v51 = type;
          if (os_log_type_enabled(v50, type))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v69 = "nw_path_evaluator_evaluate";
            uint64_t v70 = 1024;
            *(_DWORD *)os_log_type_t v71 = v17;
            _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d",  buf,  0x12u);
          }
        }

        else if (v65)
        {
          id v52 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          unsigned int v53 = type;
          v54 = os_log_type_enabled(v50, type);
          if (v52)
          {
            if (v54)
            {
              *(_DWORD *)addrinfo buf = 136446722;
              v69 = "nw_path_evaluator_evaluate";
              uint64_t v70 = 1024;
              *(_DWORD *)os_log_type_t v71 = v17;
              *(_WORD *)&v71[4] = 2082;
              *(void *)&v71[6] = v52;
              _os_log_impl( &dword_181A5C000,  v50,  v53,  "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v52);
            goto LABEL_104;
          }

          if (v54)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v69 = "nw_path_evaluator_evaluate";
            uint64_t v70 = 1024;
            *(_DWORD *)os_log_type_t v71 = v17;
            _os_log_impl( &dword_181A5C000,  v50,  v53,  "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d, no backtrace",  buf,  0x12u);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v55 = type;
          if (os_log_type_enabled(v50, type))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v69 = "nw_path_evaluator_evaluate";
            uint64_t v70 = 1024;
            *(_DWORD *)os_log_type_t v71 = v17;
            _os_log_impl( &dword_181A5C000,  v50,  v55,  "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
          }
        }
      }

        [v34 setObject:v63 forKeyedSubscript:@"connectionAttemptStatisticsReports"];
        [v7 setMetricType:1];
        objc_storeStrong(v4, v34);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v68 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          v69 = *v4;
          v264 = 136446466;
          v265 = "-[NWConnectionStatistics dictionaryReport]";
          v266 = 2114;
          v267 = v69;
          _os_log_impl( &dword_181A5C000,  v68,  OS_LOG_TYPE_DEBUG,  "%{public}s Generated legacy tcp_connection dictionary report: %{public}@",  (uint8_t *)&v264,  0x16u);
        }

LABEL_178:
        id v3 = *v4;
LABEL_2:
        id v5 = v3;
        return (NSMutableDictionary *)v5;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v53 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      [v7 clientIdentifier];
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v264 = 136446466;
      v265 = "-[NWConnectionStatistics dictionaryReport]";
      v266 = 2114;
      v267 = v54;
      id v55 = "%{public}s failing to create a fallback report for %{public}@";
      id v56 = &v264;
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v53 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
LABEL_60:

        goto LABEL_61;
      }

      [v7 clientIdentifier];
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v269 = 136446466;
      v270 = "-[NWConnectionStatistics dictionaryReport]";
      v271 = 2114;
      v272 = v54;
      id v55 = "%{public}s failing to allocate NWLibnetcoreConnectionStatisticsReportDictionary for client %{public}@";
      id v56 = &v269;
    }

    _os_log_impl(&dword_181A5C000, v53, OS_LOG_TYPE_ERROR, v55, (uint8_t *)v56, 0x16u);

    goto LABEL_60;
  }

      if (!*(_BYTE *)(v58 + 9) && !*(_BYTE *)(v58 + 12))
      {
        os_log_type_t v59 = v6;
        goto LABEL_76;
      }

      if (!v25) {
        return 0LL;
      }
      __int16 v36 = (char *)v25;
LABEL_75:
      free(v36);
      return 0LL;
    }

    if (!v47)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v26 = (os_log_s *)gLogObj;
      uint64_t v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v50 = "nw_protocol_http_messaging_remove_input_handler";
        id v51 = 2048;
        id v52 = a2;
        BOOL v28 = "%{public}s Reentrantly removing default input handler %p, backtrace limit exceeded";
        goto LABEL_72;
      }

      goto LABEL_73;
    }

    __int16 v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v26 = (os_log_s *)gLogObj;
    uint64_t v27 = type;
    os_log_type_t v32 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v29)
    {
      if (v32)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        os_log_type_t v50 = "nw_protocol_http_messaging_remove_input_handler";
        id v51 = 2048;
        id v52 = a2;
        BOOL v28 = "%{public}s Reentrantly removing default input handler %p, no backtrace";
        goto LABEL_72;
      }

      goto LABEL_73;
    }

    if (v32)
    {
      *(_DWORD *)addrinfo buf = 136446722;
      os_log_type_t v50 = "nw_protocol_http_messaging_remove_input_handler";
      id v51 = 2048;
      id v52 = a2;
      unsigned int v53 = 2082;
      v54 = v29;
      uint64_t v31 = "%{public}s Reentrantly removing default input handler %p, dumping backtrace:%{public}s";
      goto LABEL_45;
    }

    goto LABEL_74;
  }

  id v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode == 2)
  {
    os_log_type_t v7 = nw_endpoint_handler_copy_flow(v5);
    id v8 = (void *)*((void *)v7 + 104);
    if (v8)
    {
      id v9 = v8;
      v9[36] = a2;

      id v10 = (id)nw_path_flow_registration_copy_path(*((void **)v7 + 104));
      os_unfair_lock_lock((os_unfair_lock_t)v7 + 220);
      objc_storeStrong((id *)v7 + 2, v10);
      if ((*((_BYTE *)v7 + 33) & 4) != 0) {
        objc_storeStrong((id *)v7 + 1, v10);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v7 + 220);
      os_log_type_t v11 = (const char *)*((void *)v7 + 51);
      id v12 = *((id *)v7 + 2);
      uint64_t v13 = v12;
      if (v11 && (uint64_t v14 = *((void *)v11 + 3)) != 0)
      {
        BOOL v15 = *(void *)(v14 + 168);

        if (v15 && v13)
        {
          os_log_type_t v16 = *((id *)v7 + 2);
          id v17 = v16;
          os_log_type_t v18 = (void *)*((void *)v11 + 5);
          if (v18 == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v45 = *((void *)v11 + 11);
            if (v45) {
              *((void *)v11 + 11) = v45 + 1;
            }
            id v19 = -1;
          }

          else
          {
            id v19 = 0;
          }

          *(void *)os_log_type_t type = v11;
          os_log_type_t v99 = v19;
          BOOL v46 = (void *)*((void *)v7 + 52);
          if (v46 == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v48 = *((void *)v7 + 58);
            if (v48) {
              *((void *)v7 + 58) = v48 + 1;
            }
            os_log_type_t v47 = -1;
          }

          else
          {
            os_log_type_t v47 = 0;
          }

          v96 = (uint64_t)v7 + 376;
          os_log_type_t v97 = v47;
          if (!v16)
          {
            __nwlog_obj();
            os_log_type_t v76 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v101 = "__nw_protocol_updated_path";
            uint64_t v64 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t v95 = OS_LOG_TYPE_ERROR;
            v94 = 0;
            if (__nwlog_fault(v64, &v95, &v94))
            {
              if (v95 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v78 = v95;
                if (os_log_type_enabled(v77, v95))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  os_log_type_t v101 = "__nw_protocol_updated_path";
                  _os_log_impl(&dword_181A5C000, v77, v78, "%{public}s called with null path", buf, 0xCu);
                }
              }

              else if (v94)
              {
                os_log_type_t v83 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v91 = v95;
                os_log_type_t v84 = os_log_type_enabled(v77, v95);
                if (v83)
                {
                  if (v84)
                  {
                    *(_DWORD *)addrinfo buf = 136446466;
                    os_log_type_t v101 = "__nw_protocol_updated_path";
                    BOOL v102 = 2082;
                    os_log_type_t v103 = v83;
                    _os_log_impl( &dword_181A5C000,  v77,  v91,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v83);
                  if (!v64) {
                    goto LABEL_56;
                  }
                  goto LABEL_146;
                }

                if (v84)
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  os_log_type_t v101 = "__nw_protocol_updated_path";
                  _os_log_impl(&dword_181A5C000, v77, v91, "%{public}s called with null path, no backtrace", buf, 0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v88 = v95;
                if (os_log_type_enabled(v77, v95))
                {
                  *(_DWORD *)addrinfo buf = 136446210;
                  os_log_type_t v101 = "__nw_protocol_updated_path";
                  _os_log_impl( &dword_181A5C000,  v77,  v88,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
                }
              }
            }

  os_log_type_t v34 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  BOOL v35 = *(unsigned __int8 *)(a1 + 205) - (_DWORD)v34;
  else {
    __int16 v36 = v35;
  }
  if (!(_DWORD)v36) {
    goto LABEL_125;
  }
  memcpy(&v6[v8], (const void *)(a1 + v34 + 144), v36);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v36;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v36;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) += v36;
  os_log_type_t v16 = v12 >= v36;
  os_log_type_t v37 = (v12 - v36);
  LODWORD(v12) = v12 - v36;
  if (!v16)
  {
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446978;
    v256 = "send_data_callback_block_invoke";
    v257 = 2082;
    v258 = "bodyCopySize";
    v259 = 2048;
    v260 = v36;
    v261 = 2048;
    *(void *)v262 = v37;
    os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v253 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v38, type, &v253))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v39 = (os_log_s *)__nwlog_obj();
        os_log_type_t v40 = type[0];
        if (os_log_type_enabled(v39, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446978;
          v256 = "send_data_callback_block_invoke";
          v257 = 2082;
          v258 = "bodyCopySize";
          v259 = 2048;
          v260 = v36;
          v261 = 2048;
          *(void *)v262 = v37;
          BOOL v41 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_117:
          _os_log_impl(&dword_181A5C000, v39, v40, v41, buf, 0x2Au);
        }
      }

      else if (v253)
      {
        os_log_type_t v42 = (char *)__nw_create_backtrace_string();
        os_log_type_t v39 = (os_log_s *)__nwlog_obj();
        os_log_type_t v40 = type[0];
        BOOL v43 = os_log_type_enabled(v39, type[0]);
        if (v42)
        {
          if (v43)
          {
            *(_DWORD *)addrinfo buf = 136447234;
            v256 = "send_data_callback_block_invoke";
            v257 = 2082;
            v258 = "bodyCopySize";
            v259 = 2048;
            v260 = v36;
            v261 = 2048;
            *(void *)v262 = v37;
            *(_WORD *)&v262[8] = 2082;
            *(void *)&v262[10] = v42;
            _os_log_impl( &dword_181A5C000,  v39,  v40,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v42);
          goto LABEL_118;
        }

        if (v43)
        {
          *(_DWORD *)addrinfo buf = 136446978;
          v256 = "send_data_callback_block_invoke";
          v257 = 2082;
          v258 = "bodyCopySize";
          v259 = 2048;
          v260 = v36;
          v261 = 2048;
          *(void *)v262 = v37;
          BOOL v41 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_117;
        }
      }

      else
      {
        os_log_type_t v39 = (os_log_s *)__nwlog_obj();
        os_log_type_t v40 = type[0];
        if (os_log_type_enabled(v39, type[0]))
        {
          *(_DWORD *)addrinfo buf = 136446978;
          v256 = "send_data_callback_block_invoke";
          v257 = 2082;
          v258 = "bodyCopySize";
          v259 = 2048;
          v260 = v36;
          v261 = 2048;
          *(void *)v262 = v37;
          BOOL v41 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_117;
        }
      }
    }

        if (v24) {
          free(v24);
        }
        goto LABEL_75;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v93 = "nw_protocol_test_access_options";
      os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v90 = 0;
      if (__nwlog_fault(v20, &type, &v90))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v21 = (os_log_s *)gLogObj;
          os_log_type_t v22 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v93 = "nw_protocol_test_access_options";
            id v23 = "%{public}s Failed to copy protocol options";
LABEL_66:
            _os_log_impl(&dword_181A5C000, v21, v22, v23, buf, 0xCu);
          }
        }

        else if (v90)
        {
          __int16 v30 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v21 = (os_log_s *)gLogObj;
          os_log_type_t v22 = type;
          uint64_t v31 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v30)
          {
            if (v31)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              os_log_type_t v93 = "nw_protocol_test_access_options";
              v94 = 2082;
              os_log_type_t v95 = (nw_protocol_identifier *)v30;
              _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s Failed to copy protocol options, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v30);
            goto LABEL_67;
          }

          if (v31)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v93 = "nw_protocol_test_access_options";
            id v23 = "%{public}s Failed to copy protocol options, no backtrace";
            goto LABEL_66;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v21 = (os_log_s *)gLogObj;
          os_log_type_t v22 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            os_log_type_t v93 = "nw_protocol_test_access_options";
            id v23 = "%{public}s Failed to copy protocol options, backtrace limit exceeded";
            goto LABEL_66;
          }
        }
      }

    if (v31) {
      free(v31);
    }
    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    v157 = "__nw_protocol_get_parameters";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v154 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v37, type, &v154))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_89;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v157 = "__nw_protocol_get_parameters";
        os_log_type_t v40 = "%{public}s called with null protocol";
LABEL_88:
        _os_log_impl(&dword_181A5C000, v38, v39, v40, buf, 0xCu);
        goto LABEL_89;
      }

      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_89;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v157 = "__nw_protocol_get_parameters";
        os_log_type_t v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_88;
      }

      BOOL v41 = (char *)__nw_create_backtrace_string();
      os_log_type_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type[0];
      os_log_type_t v42 = os_log_type_enabled(v38, type[0]);
      if (!v41)
      {
        if (!v42) {
          goto LABEL_89;
        }
        *(_DWORD *)addrinfo buf = 136446210;
        v157 = "__nw_protocol_get_parameters";
        os_log_type_t v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_88;
      }

      if (v42)
      {
        *(_DWORD *)addrinfo buf = 136446466;
        v157 = "__nw_protocol_get_parameters";
        v158 = 2082;
        v159 = (nw_protocol_identifier *)v41;
        _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v41);
    }

      if (v32) {
        free(v32);
      }
      os_log_type_t v11 = *(void *)(a1 + 32);
      goto LABEL_10;
    }

    if (!v6 || (*(_BYTE *)(v6 + 136) & 1) == 0)
    {
      os_log_type_t v16 = (os_log_s *)__nwlog_obj();
      id v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
      id v6 = *(void *)(a1 + 32);
      if (v17)
      {
        os_log_type_t v18 = (const char *)(v6 + 137);
        if (!v6) {
          os_log_type_t v18 = "";
        }
        __addrinfo buf = 136446978;
        id v56 = "nw_protocol_ipv4_finalize_output_frames_block_invoke";
        unsigned int v57 = 2082;
        char v58 = (void *)v18;
        id v19 = " ";
        if (!v6) {
          id v19 = "";
        }
        os_log_type_t v59 = 2080;
        char v60 = v19;
        os_log_type_t v61 = 2048;
        __int16 v62 = v6;
        _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p Frame is no longer valid",  (uint8_t *)&__buf,  0x2Au);
        id v6 = *(void *)(a1 + 32);
      }
    }

    *(void *)(v6 + 48) = 0LL;
  }

  return 1LL;
}

LABEL_74:
  if (v30) {
    free(v30);
  }
  uint64_t v13 = 0LL;
LABEL_28:

  return v13;
}

    if (v30) {
      free(v30);
    }

LABEL_77:
    id v19 = 0LL;
    goto LABEL_20;
  }

  *(void *)addrinfo buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  os_log_type_t v49 = 0LL;
  node = nw_hash_table_get_node(v16, (uint64_t)v13, 0LL);
  if (node)
  {
    os_log_type_t v18 = *(char **)(node + 16);
    v45[0] = MEMORY[0x1895F87A8];
    v45[1] = 3221225472LL;
    v45[2] = __nw_context_endpoint_get_active_instance_count_block_invoke;
    v45[3] = &unk_189BB76C0;
    v45[4] = buf;
    nw_hash_table_apply(v18, (uint64_t)v45);
  }

  id v19 = *(void *)(*(void *)&buf[8] + 24LL);
  _Block_object_dispose(buf, 8);

LABEL_20:
  return v19;
}

      goto LABEL_23;
    }

    if (!v40)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v43 = "nw_interface_get_ipv4_network_signature";
        _os_log_impl( &dword_181A5C000,  v24,  v39,  "%{public}s called with null signature_len, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v35 = type;
    __int16 v36 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v43 = "nw_interface_get_ipv4_network_signature";
        _os_log_impl(&dword_181A5C000, v24, v35, "%{public}s called with null signature_len, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v36)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v43 = "nw_interface_get_ipv4_network_signature";
      v44 = 2082;
      *(void *)os_log_type_t v45 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v24,  v35,  "%{public}s called with null signature_len, dumping backtrace:%{public}s",  buf,  0x16u);
    }

  if (v27) {
    free(v27);
  }
LABEL_12:

  if (!v3)
  {
    if (!*((void *)v5 + 2)) {
      *((void *)v5 + 2) = v5;
    }
    os_log_type_t v11 = v5;
    id v3 = 0LL;
    goto LABEL_32;
  }

  id v9 = v3[2];
  if (!v9)
  {
    id v10 = *((double *)v5 + 15);
LABEL_21:
    if (v10 > *((double *)v3 + 15))
    {
      id v12 = (void *)*((void *)v5 + 1);
      *((void *)v5 + 1) = v3;
      uint64_t v13 = v3;

      *((void *)v5 + 2) = v3[2];
      v3[2] = 0LL;

      uint64_t v14 = v5;
LABEL_31:
      id v3 = v14;
      os_log_type_t v11 = v14;
LABEL_32:

      return (BOOL)v11;
    }

    BOOL v15 = (id *)v3;
    while (1)
    {
      os_log_type_t v16 = v15;
      BOOL v15 = (id *)v15[1];
      if (!v15) {
        break;
      }
      if (v10 > *((double *)v15 + 15))
      {
        objc_storeStrong((id *)v5 + 1, v15);
        objc_storeStrong(v16 + 1, a2);
        goto LABEL_30;
      }
    }

    if ((id *)v9 != v16)
    {
      __nwlog_obj();
      os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
      *(_DWORD *)addrinfo buf = 136446210;
      os_log_type_t v45 = "nw_write_request_list_append";
      BOOL v41 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v41);
      if (result) {
        goto LABEL_78;
      }
      free(v41);
    }

    objc_storeStrong(v16 + 1, a2);
LABEL_29:
    v3[2] = v5;
LABEL_30:
    uint64_t v14 = v3;
    goto LABEL_31;
  }

  id v10 = *((double *)v5 + 15);
  if (!*(void *)(v9 + 8))
  {
LABEL_16:
    objc_storeStrong((id *)(v9 + 8), a2);
    goto LABEL_29;
  }

  __nwlog_obj();
  __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446210;
  os_log_type_t v45 = "nw_write_request_list_append";
  os_log_type_t v37 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v37);
  if (!result)
  {
    free(v37);
    id v9 = v3[2];
    goto LABEL_16;
  }

      posix_error = nw_error_create_posix_error(55);
      goto LABEL_7;
    }

    if (os_channel_sync())
    {
      BOOL v43 = *((void *)v11 + 19);
      __nwlog_obj();
      v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
      if (v43)
      {
        if (!v45) {
          goto LABEL_78;
        }
        BOOL v46 = *((void *)v11 + 3);
        os_log_type_t v47 = *((_DWORD *)v11 + 42);
        *(_DWORD *)addrinfo buf = 136447490;
        *(void *)&uint8_t buf[4] = "send_data_on_ring_locked";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v46;
        os_log_type_t v71 = 1042;
        *(_DWORD *)v72 = 16;
        *(_WORD *)&v72[4] = 2098;
        *(void *)&v72[6] = (char *)v11 + 115;
        v73 = 1024;
        os_log_type_t v74 = v47;
        BOOL v75 = 2112;
        os_log_type_t v76 = @"Failed to sync TX";
        os_log_type_t v48 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
        os_log_type_t v49 = v44;
        os_log_type_t v50 = 54;
      }

      else
      {
        if (!v45) {
          goto LABEL_78;
        }
        *(_DWORD *)addrinfo buf = 136446722;
        *(void *)&uint8_t buf[4] = "send_data_on_ring_locked";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v11;
        os_log_type_t v71 = 2112;
        *(void *)v72 = @"Failed to sync TX";
        os_log_type_t v48 = "%{public}s [%{public}@]  %@";
        os_log_type_t v49 = v44;
        os_log_type_t v50 = 32;
      }

      _os_log_impl(&dword_181A5C000, v49, OS_LOG_TYPE_ERROR, v48, buf, v50);
LABEL_78:

      if (*((void *)v11 + 19)) {
        goto LABEL_79;
      }
      goto LABEL_39;
    }

    os_log_type_t v59 = *((void *)v11 + 19);
    __nwlog_obj();
    char v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v61 = os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
    if (v59)
    {
      if (!v61) {
        goto LABEL_97;
      }
      __int16 v62 = *((void *)v11 + 3);
      v63 = *((_DWORD *)v11 + 42);
      *(_DWORD *)addrinfo buf = 136447490;
      *(void *)&uint8_t buf[4] = "send_data_on_ring_locked";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v62;
      os_log_type_t v71 = 1042;
      *(_DWORD *)v72 = 16;
      *(_WORD *)&v72[4] = 2098;
      *(void *)&v72[6] = (char *)v11 + 115;
      v73 = 1024;
      os_log_type_t v74 = v63;
      BOOL v75 = 2112;
      os_log_type_t v76 = @"TX no available slot";
      uint64_t v64 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
      BOOL v65 = v60;
      v66 = 54;
    }

    else
    {
      if (!v61) {
        goto LABEL_97;
      }
      *(_DWORD *)addrinfo buf = 136446722;
      *(void *)&uint8_t buf[4] = "send_data_on_ring_locked";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v11;
      os_log_type_t v71 = 2112;
      *(void *)v72 = @"TX no available slot";
      uint64_t v64 = "%{public}s [%{public}@]  %@";
      BOOL v65 = v60;
      v66 = 32;
    }

    _os_log_impl(&dword_181A5C000, v65, OS_LOG_TYPE_ERROR, v64, buf, v66);
LABEL_97:

    if (*((void *)v11 + 19))
    {
LABEL_79:
    }

  if (v20) {
    free(v20);
  }
  return 0LL;
}

        os_unfair_lock_unlock((os_unfair_lock_t)v15 + 3);
LABEL_75:
        free(v16);
LABEL_76:

        return;
      }

          goto LABEL_95;
        }

        if (v17 == 2)
        {
          id v19 = *((_DWORD *)address + 1);
          os_log_type_t v18 = address + 4;
          if (v19)
          {
            os_log_type_t v20 = v299;
            __nwlog_salted_hash(v18, 4LL, v299);
            BOOL v21 = "IPv4#";
          }

          else
          {
            BOOL v21 = "";
            os_log_type_t v20 = "INADDR_ANY";
          }

          goto LABEL_50;
        }
      }

      BOOL v21 = "";
      os_log_type_t v20 = "<NULL>";
      goto LABEL_50;
    }

    os_log_type_t v22 = *(void *)(v278 + 32);
    if (v22)
    {
      if ((*(_BYTE *)(v22 + 346) & 0x20) != 0) {
        goto LABEL_95;
      }
      if (*(_BYTE *)(v22 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v23 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v24 = *(void *)(v278 + 32);
          uint64_t v25 = dnssd_getaddrinfo_result_get_type() - 1;
          BOOL v26 = "?";
          if (v25 <= 4) {
            BOOL v26 = off_189BB6D78[v25];
          }
          uint64_t v27 = dnssd_getaddrinfo_result_get_interface_index();
          BOOL v28 = dnssd_getaddrinfo_result_get_hostname();
          __int16 v29 = dnssd_getaddrinfo_result_get_actual_hostname();
          if (address) {
            __int16 v30 = *address;
          }
          else {
            __int16 v30 = 0;
          }
          *(_DWORD *)&buf[0].unsigned int sa_len = 136448514;
          v69 = " tracker=";
          if (!tracker_hostname) {
            v69 = "";
          }
          *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          if (tracker_hostname) {
            uint64_t v70 = (const char *)tracker_hostname;
          }
          else {
            uint64_t v70 = "";
          }
          *(_WORD *)&buf[0].sa_data[10] = 2082;
          *(void *)&buf[0].sa_data[12] = v24 + 256;
          *(_WORD *)&buf[1].sa_data[4] = 2080;
          *(void *)&buf[1].sa_data[6] = v26;
          *(_WORD *)&buf[2].unsigned int sa_len = 1024;
          *(_DWORD *)buf[2].sa_data = v27;
          *(_WORD *)&buf[2].sa_data[4] = 2082;
          *(void *)&buf[2].sa_data[6] = v28;
          *(_WORD *)&buf[3].unsigned int sa_len = 2082;
          *(void *)buf[3].sa_data = v29;
          *(_WORD *)&buf[3].sa_data[8] = 1040;
          *(_DWORD *)&buf[3].sa_data[10] = v30;
          *(_WORD *)&buf[4].unsigned int sa_len = 2098;
          *(void *)buf[4].sa_data = address;
          *(_WORD *)&buf[4].sa_data[8] = 2082;
          *(void *)&buf[4].sa_data[10] = v69;
          *(_WORD *)&buf[5].sa_data[2] = 2082;
          *(void *)&buf[5].sa_data[4] = v70;
          _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s] Got DNS result type %s ifindex=%u %{public}s %{public}s %{public,network:sockaddr}. *P%{public}s%{public}s",  &buf[0].sa_len,  0x5Eu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v23 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v37 = *(_DWORD *)(*(void *)(v278 + 32) + 340LL);
          os_log_type_t v38 = dnssd_getaddrinfo_result_get_type() - 1;
          os_log_type_t v39 = "?";
          if (v38 <= 4) {
            os_log_type_t v39 = off_189BB6D78[v38];
          }
          os_log_type_t v40 = dnssd_getaddrinfo_result_get_interface_index();
          BOOL v41 = dnssd_getaddrinfo_result_get_hostname();
          os_log_type_t v42 = dnssd_getaddrinfo_result_get_actual_hostname();
          if (address) {
            BOOL v43 = *address;
          }
          else {
            BOOL v43 = 0;
          }
          *(_DWORD *)&buf[0].unsigned int sa_len = 136448514;
          v73 = "";
          os_log_type_t v74 = " tracker=";
          if (tracker_hostname) {
            v73 = (const char *)tracker_hostname;
          }
          else {
            os_log_type_t v74 = "";
          }
          *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          *(_WORD *)&buf[0].sa_data[10] = 1024;
          *(_DWORD *)&buf[0].sa_data[12] = v37;
          *(_WORD *)buf[1].sa_data = 2080;
          *(void *)&buf[1].sa_data[2] = v39;
          *(_WORD *)&buf[1].sa_data[10] = 1024;
          *(_DWORD *)&buf[1].sa_data[12] = v40;
          *(_WORD *)buf[2].sa_data = 2082;
          *(void *)&buf[2].sa_data[2] = v41;
          *(_WORD *)&buf[2].sa_data[10] = 2082;
          *(void *)&buf[2].sa_data[12] = v42;
          *(_WORD *)&buf[3].sa_data[4] = 1040;
          *(_DWORD *)&buf[3].sa_data[6] = v43;
          *(_WORD *)&buf[3].sa_data[10] = 2098;
          *(void *)&buf[3].sa_data[12] = address;
          *(_WORD *)&buf[4].sa_data[4] = 2082;
          *(void *)&buf[4].sa_data[6] = v74;
          *(_WORD *)&buf[5].unsigned int sa_len = 2082;
          *(void *)buf[5].sa_data = v73;
          _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_INFO,  "%{public}s [R%u] Got DNS result type %s ifindex=%u %{public}s %{public}s %{public,network:sockaddr}.*P%{public}s%{public}s",  &buf[0].sa_len,  0x5Au);
        }
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v23 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = dnssd_getaddrinfo_result_get_type() - 1;
        os_log_type_t v32 = "?";
        if (v31 <= 4) {
          os_log_type_t v32 = off_189BB6D78[v31];
        }
        os_log_type_t v33 = dnssd_getaddrinfo_result_get_interface_index();
        os_log_type_t v34 = dnssd_getaddrinfo_result_get_hostname();
        BOOL v35 = dnssd_getaddrinfo_result_get_actual_hostname();
        if (address) {
          __int16 v36 = *address;
        }
        else {
          __int16 v36 = 0;
        }
        *(_DWORD *)&buf[0].unsigned int sa_len = 136448258;
        os_log_type_t v71 = "";
        v72 = " tracker=";
        if (tracker_hostname) {
          os_log_type_t v71 = (const char *)tracker_hostname;
        }
        else {
          v72 = "";
        }
        *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(void *)&buf[0].sa_data[12] = v32;
        *(_WORD *)&buf[1].sa_data[4] = 1024;
        *(_DWORD *)&buf[1].sa_data[6] = v33;
        *(_WORD *)&buf[1].sa_data[10] = 2082;
        *(void *)&buf[1].sa_data[12] = v34;
        *(_WORD *)&buf[2].sa_data[4] = 2082;
        *(void *)&buf[2].sa_data[6] = v35;
        *(_WORD *)&buf[3].unsigned int sa_len = 1040;
        *(_DWORD *)buf[3].sa_data = v36;
        *(_WORD *)&buf[3].sa_data[4] = 2098;
        *(void *)&buf[3].sa_data[6] = address;
        *(_WORD *)&buf[4].unsigned int sa_len = 2082;
        *(void *)buf[4].sa_data = v72;
        *(_WORD *)&buf[4].sa_data[8] = 2082;
        *(void *)&buf[4].sa_data[10] = v71;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_INFO,  "%{public}s Got DNS result type %s ifindex=%u %{public}s %{public}s %{public,network:sockaddr}.*P%{public}s%{public}s",  &buf[0].sa_len,  0x54u);
      }
    }

LABEL_95:
    ++v13;
    --v12;
  }

  while (v12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(v278 + 32) + 12LL));
  v268 = 0;
  BOOL v75 = a2;
  do
  {
    v276 = v75;
    os_log_type_t v76 = *v75;
    protocol = dnssd_getaddrinfo_result_get_protocol();
    v78 = protocol;
    provider_name = (const char *)dnssd_getaddrinfo_result_get_provider_name();
    BOOL v80 = *(void *)(v278 + 32);
    if ((*(_BYTE *)(v80 + 347) & 0x40) != 0)
    {
      os_log_type_t v81 = *(void **)(v80 + 200);
      v287[0] = MEMORY[0x1895F87A8];
      v287[1] = 3221225472LL;
      v287[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_201;
      v287[3] = &unk_189BB68D0;
      v288 = (id)v80;
      v289 = provider_name;
      nw_path_enumerate_resolver_configs(v81, v287);
    }

    if (provider_name)
    {
      if (!strcmp(provider_name, "dns.google")) {
        *(_DWORD *)(*(void *)(v278 + 32) + 252LL) = 2;
      }
      if (!strcmp(provider_name, "cloudflare-dns.com")) {
        *(_DWORD *)(*(void *)(v278 + 32) + 252LL) = 1;
      }
      if (!strcmp(provider_name, "dns.quad9.net")) {
        *(_DWORD *)(*(void *)(v278 + 32) + 252LL) = 3;
      }
    }

    os_log_type_t v82 = dnssd_getaddrinfo_result_get_type();
    if (v82 == 5)
    {
      os_log_type_t v83 = *(void **)(v278 + 40);
      v274 = (char *)*(id *)(v278 + 32);
      v270 = v83;
      v271 = v76;
      if ((dnssd_getaddrinfo_result_service_is_valid() & 1) == 0) {
        goto LABEL_309;
      }
      service_name = (const char *)dnssd_getaddrinfo_result_get_service_name();
      if (!service_name)
      {
        if (v274)
        {
          if ((v274[346] & 0x20) != 0) {
            goto LABEL_309;
          }
          if (v274[256])
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v115 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)&buf[0].unsigned int sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(void *)&buf[0].sa_data[12] = v274 + 256;
              _os_log_impl( &dword_181A5C000,  v115,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s] Service result did not contain name, ignoring",  &buf[0].sa_len,  0x16u);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v115 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
            {
              v165 = *((_DWORD *)v274 + 85);
              *(_DWORD *)&buf[0].unsigned int sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              *(_WORD *)&buf[0].sa_data[10] = 1024;
              *(_DWORD *)&buf[0].sa_data[12] = v165;
              _os_log_impl( &dword_181A5C000,  v115,  OS_LOG_TYPE_ERROR,  "%{public}s [R%u] Service result did not contain name, ignoring",  &buf[0].sa_len,  0x12u);
            }
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v115 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
            _os_log_impl( &dword_181A5C000,  v115,  OS_LOG_TYPE_ERROR,  "%{public}s Service result did not contain name, ignoring",  &buf[0].sa_len,  0xCu);
          }
        }

LABEL_309:
        v207 = *(id *)(v278 + 32);
        *(void *)v299 = 0LL;
        *(void *)&v299[8] = v299;
        *(void *)&v299[16] = 0x2020000000LL;
        v299[24] = 0;
        v208 = (unsigned __int8 *)*((void *)v207 + 22);
        *(void *)&buf[0].unsigned int sa_len = MEMORY[0x1895F87A8];
        *(void *)&buf[0].sa_data[6] = 3221225472LL;
        *(void *)&buf[1].unsigned int sa_len = ___ZL31nw_resolver_check_svcb_completeP22NWConcrete_nw_resolver_block_invoke;
        *(void *)&buf[1].sa_data[6] = &unk_189BC50D0;
        *(void *)&buf[2].unsigned int sa_len = v299;
        nw_array_apply(v208, (uint64_t)buf);
        if (*(_BYTE *)(*(void *)&v299[8] + 24LL))
        {
          _Block_object_dispose(v299, 8);

          goto LABEL_326;
        }

        *((_WORD *)v207 + 44) |= 0x80u;
        _Block_object_dispose(v299, 8);

        v209 = *(void *)(v278 + 32);
        if (v209)
        {
          if ((*(_BYTE *)(v209 + 346) & 0x20) != 0)
          {
LABEL_325:
            v268 = 1;
            goto LABEL_326;
          }

          if (*(_BYTE *)(v209 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v210 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v210, OS_LOG_TYPE_INFO))
            {
              v211 = *(void *)(v278 + 32) + 256LL;
              *(_DWORD *)&buf[0].unsigned int sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(void *)&buf[0].sa_data[12] = v211;
              _os_log_impl( &dword_181A5C000,  v210,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s] SVCB queries are complete",  &buf[0].sa_len,  0x16u);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v210 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v210, OS_LOG_TYPE_INFO))
            {
              v212 = *(_DWORD *)(*(void *)(v278 + 32) + 340LL);
              *(_DWORD *)&buf[0].unsigned int sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 1024;
              *(_DWORD *)&buf[0].sa_data[12] = v212;
              _os_log_impl( &dword_181A5C000,  v210,  OS_LOG_TYPE_INFO,  "%{public}s [R%u] SVCB queries are complete",  &buf[0].sa_len,  0x12u);
            }
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v210 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v210, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            _os_log_impl( &dword_181A5C000,  v210,  OS_LOG_TYPE_INFO,  "%{public}s SVCB queries are complete",  &buf[0].sa_len,  0xCu);
          }
        }

        goto LABEL_325;
      }

      v274[347] |= 4u;
      v290 = 0LL;
      ech_config = (const void *)dnssd_getaddrinfo_result_get_ech_config();
      v86 = (void *)*((void *)v274 + 3);
      service_priority = dnssd_getaddrinfo_result_get_service_priority();
      service_port = dnssd_getaddrinfo_result_get_service_port();
      os_log_type_t v89 = v290;
      sensitive_redacted = nw_parameters_get_sensitive_redacted(*((void **)v274 + 2));
      os_log_type_t v91 = v86;
      v92 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_resolver_service);
      os_log_type_t v93 = v91;
      if (!v92)
      {
LABEL_419:

        __nwlog_obj();
        v252 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
        *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
        v253 = (char *)_os_log_send_and_compose_impl();

        v299[0] = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v253, v299, type))
        {
          if (v299[0] == 17)
          {
            __nwlog_obj();
            v254 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v255 = v299[0];
            if (os_log_type_enabled(v254, (os_log_type_t)v299[0]))
            {
              *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
              *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              _os_log_impl(&dword_181A5C000, v254, v255, "%{public}s called with null service", &buf[0].sa_len, 0xCu);
            }
          }

          else if (type[0])
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v254 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v257 = v299[0];
            v258 = os_log_type_enabled(v254, (os_log_type_t)v299[0]);
            if (backtrace_string)
            {
              if (v258)
              {
                *(_DWORD *)&buf[0].unsigned int sa_len = 136446466;
                *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                *(_WORD *)&buf[0].sa_data[10] = 2082;
                *(void *)&buf[0].sa_data[12] = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v254,  v257,  "%{public}s called with null service, dumping backtrace:%{public}s",  &buf[0].sa_len,  0x16u);
              }

              free(backtrace_string);
              goto LABEL_435;
            }

            if (v258)
            {
              *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
              *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              _os_log_impl( &dword_181A5C000,  v254,  v257,  "%{public}s called with null service, no backtrace",  &buf[0].sa_len,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            v254 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v259 = v299[0];
            if (os_log_type_enabled(v254, (os_log_type_t)v299[0]))
            {
              *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
              *(void *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              _os_log_impl( &dword_181A5C000,  v254,  v259,  "%{public}s called with null service, backtrace limit exceeded",  &buf[0].sa_len,  0xCu);
            }
          }
        }

      if (v32) {
        free(v32);
      }
LABEL_76:
      uint64_t v14 = 0LL;
      goto LABEL_16;
    }

    __nwlog_obj();
    os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
    id v19 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v43.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v19, &v43, &type))
    {
      if (LOBYTE(v43.receiver) == 17)
      {
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t receiver = (os_log_type_t)v43.receiver;
        if (os_log_type_enabled(v20, (os_log_type_t)v43.receiver))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
          _os_log_impl(&dword_181A5C000, v20, receiver, "%{public}s called with null identifier", buf, 0xCu);
        }

      if (v21) {
        free(v21);
      }
      id v10 = 0LL;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v46 = "__nw_protocol_add_input_handler";
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_add_input_handler";
          os_log_type_t v33 = "%{public}s called with null input_protocol";
LABEL_90:
          _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0xCu);
        }
      }

      else if (v43)
      {
        os_log_type_t v39 = (char *)__nw_create_backtrace_string();
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        os_log_type_t v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v46 = "__nw_protocol_add_input_handler";
            os_log_type_t v47 = 2082;
            os_log_type_t v48 = v39;
            _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v39);
          goto LABEL_91;
        }

        if (v40)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_add_input_handler";
          os_log_type_t v33 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_90;
        }
      }

      else
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_add_input_handler";
          os_log_type_t v33 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }

      if (v21) {
        free(v21);
      }
      id v10 = 0LL;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v46 = "__nw_protocol_remove_input_handler";
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          os_log_type_t v33 = "%{public}s called with null input_protocol";
LABEL_90:
          _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0xCu);
        }
      }

      else if (v43)
      {
        os_log_type_t v39 = (char *)__nw_create_backtrace_string();
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        os_log_type_t v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v46 = "__nw_protocol_remove_input_handler";
            os_log_type_t v47 = 2082;
            os_log_type_t v48 = v39;
            _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v39);
          goto LABEL_91;
        }

        if (v40)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          os_log_type_t v33 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_90;
        }
      }

      else
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          os_log_type_t v33 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }

      if (v21) {
        free(v21);
      }
      id v10 = 0LL;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v46 = "__nw_protocol_connect";
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_connect";
          os_log_type_t v33 = "%{public}s called with null other_protocol";
LABEL_90:
          _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0xCu);
        }
      }

      else if (v43)
      {
        os_log_type_t v39 = (char *)__nw_create_backtrace_string();
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        os_log_type_t v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v46 = "__nw_protocol_connect";
            os_log_type_t v47 = 2082;
            os_log_type_t v48 = v39;
            _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v39);
          goto LABEL_91;
        }

        if (v40)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_connect";
          os_log_type_t v33 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_90;
        }
      }

      else
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_connect";
          os_log_type_t v33 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }

      if (v21) {
        free(v21);
      }
      id v10 = 0LL;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v46 = "__nw_protocol_reset";
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_reset";
          os_log_type_t v33 = "%{public}s called with null other_protocol";
LABEL_90:
          _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0xCu);
        }
      }

      else if (v43)
      {
        os_log_type_t v39 = (char *)__nw_create_backtrace_string();
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        os_log_type_t v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v46 = "__nw_protocol_reset";
            os_log_type_t v47 = 2082;
            os_log_type_t v48 = v39;
            _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v39);
          goto LABEL_91;
        }

        if (v40)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_reset";
          os_log_type_t v33 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_90;
        }
      }

      else
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_reset";
          os_log_type_t v33 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }

      if (v21) {
        free(v21);
      }
      id v10 = 0LL;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    __nwlog_obj();
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v46 = "__nw_protocol_waiting_for_output";
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_waiting_for_output";
          os_log_type_t v33 = "%{public}s called with null other_protocol";
LABEL_90:
          _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0xCu);
        }
      }

      else if (v43)
      {
        os_log_type_t v39 = (char *)__nw_create_backtrace_string();
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        os_log_type_t v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            BOOL v46 = "__nw_protocol_waiting_for_output";
            os_log_type_t v47 = 2082;
            os_log_type_t v48 = v39;
            _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v39);
          goto LABEL_91;
        }

        if (v40)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_waiting_for_output";
          os_log_type_t v33 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_90;
        }
      }

      else
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          BOOL v46 = "__nw_protocol_waiting_for_output";
          os_log_type_t v33 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }

      goto LABEL_75;
    }

    free(v26);
    if (!v20) {
      return;
    }
LABEL_98:
    free(v20);
    return;
  }

  os_log_type_t v7 = nw_http_metadata_copy_response(a3);
  id v8 = os_retain(a3);
  id v9 = *(_BYTE *)(v4 + 568);
  if ((v9 & 1) != 0)
  {
    id v10 = *(void **)(v4 + 560);
    if (v10)
    {
      os_release(v10);
      id v9 = *(_BYTE *)(v4 + 568);
    }
  }

  *(void *)(v4 + 560) = v8;
  *(_BYTE *)(v4 + 568) = v9 | 1;
  os_log_type_t v11 = nw_http_metadata_copy_request(*(void **)(v4 + 576));
  id v12 = nw_http_metadata_copy_response(*(void **)(v4 + 560));
  uint64_t v13 = v12;
  if (!v11)
  {
    __nwlog_obj();
    addrinfo buf = 136446210;
    buf_4 = "nw_http_authentication_process_success";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v33 = (os_log_s *)__nwlog_obj();
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled(v33, type[0])) {
        goto LABEL_126;
      }
      addrinfo buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      BOOL v35 = "%{public}s called with null request";
    }

    else if ((_BYTE)v45)
    {
      BOOL v41 = (char *)__nw_create_backtrace_string();
      os_log_type_t v33 = (os_log_s *)__nwlog_obj();
      os_log_type_t v34 = type[0];
      os_log_type_t v42 = os_log_type_enabled(v33, type[0]);
      if (v41)
      {
        if (v42)
        {
          addrinfo buf = 136446466;
          buf_4 = "nw_http_authentication_process_success";
          os_log_type_t v49 = 2082;
          os_log_type_t v50 = v41;
          _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s called with null request, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x16u);
        }

        free(v41);
LABEL_126:
        if (v32) {
          free(v32);
        }
        if (!v13) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }

      if (!v42) {
        goto LABEL_126;
      }
      addrinfo buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      BOOL v35 = "%{public}s called with null request, no backtrace";
    }

    else
    {
      os_log_type_t v33 = (os_log_s *)__nwlog_obj();
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled(v33, type[0])) {
        goto LABEL_126;
      }
      addrinfo buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      BOOL v35 = "%{public}s called with null request, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v33, v34, v35, (uint8_t *)&buf, 0xCu);
    goto LABEL_126;
  }

  if (!v12)
  {
    __nwlog_obj();
    addrinfo buf = 136446210;
    buf_4 = "nw_http_authentication_process_success";
    __int16 v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_133;
      }
      addrinfo buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      os_log_type_t v39 = "%{public}s called with null response";
    }

    else if ((_BYTE)v45)
    {
      BOOL v43 = (char *)__nw_create_backtrace_string();
      os_log_type_t v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = type[0];
      v44 = os_log_type_enabled(v37, type[0]);
      if (v43)
      {
        if (v44)
        {
          addrinfo buf = 136446466;
          buf_4 = "nw_http_authentication_process_success";
          os_log_type_t v49 = 2082;
          os_log_type_t v50 = v43;
          _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s called with null response, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x16u);
        }

        free(v43);
        goto LABEL_133;
      }

      if (!v44)
      {
LABEL_133:
        if (v36) {
          free(v36);
        }
        goto LABEL_24;
      }

      addrinfo buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      os_log_type_t v39 = "%{public}s called with null response, no backtrace";
    }

    else
    {
      os_log_type_t v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_133;
      }
      addrinfo buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      os_log_type_t v39 = "%{public}s called with null response, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v37, v38, v39, (uint8_t *)&buf, 0xCu);
    goto LABEL_133;
  }

  if ((*(_BYTE *)(v4 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        addrinfo buf = 136446722;
        buf_4 = "nw_http_authentication_process_success";
        os_log_type_t v49 = 2082;
        os_log_type_t v50 = (char *)(v4 + 114);
        id v51 = 2080;
        id v52 = " ";
        _os_log_impl(&dword_181A5C000, v40, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&buf, 0x20u);
      }
    }
  }

  if ((*(_WORD *)(v4 + 1062) & 0x10) != 0) {
    uint64_t v14 = "Proxy-Authentication-Info";
  }
  else {
    uint64_t v14 = "Authentication-Info";
  }
  BOOL v15 = v13;
  have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v15, (unint64_t)v14);

  if (have_field_with_name)
  {
    id v17 = nw_http_response_copy_url_response(v15, v11, 0LL, **((void ***)&unk_189BC9728 + *(int *)(v4 + 1040)));
    CFURLResponseGetHTTPResponse();
    _CFHTTPAuthenticationUpdateFromResponse();
    if (v17) {
      os_release((void *)v17);
    }
  }

  if (*(void *)(v4 + 976)) {
    _CFHTTPAuthenticationClearAccountRefreshState();
  }
  os_release(v15);
LABEL_24:
  uint64_t v13 = v11;
LABEL_25:
  os_release(v13);
LABEL_26:
  os_log_type_t v18 = *(_BYTE *)(v4 + 568);
  if ((v18 & 1) != 0)
  {
    id v19 = *(void **)(v4 + 560);
    if (v19)
    {
      os_release(v19);
      os_log_type_t v18 = *(_BYTE *)(v4 + 568);
    }
  }

  *(void *)(v4 + 560) = 0LL;
  *(_BYTE *)(v4 + 568) = v18 | 1;
  (*(void (**)(uint64_t, uint64_t, void *))(a4 + 16))(a4, 1LL, a3);
  if (v7) {
    os_release(v7);
  }
}

    free(backtrace_string);
    goto LABEL_97;
  }

  os_log_type_t v7 = fullName;
  *fullName = 0;
  if (a2 <= 0x401)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v35 = "nw_endpoint_construct_composite_bonjour_name";
      id v9 = "%{public}s Insufficient buffer size";
LABEL_12:
      _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0xCu);
      goto LABEL_13;
    }

    goto LABEL_13;
  }

  if (DNSServiceConstructFullName(fullName, service, regtype, domain))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)addrinfo buf = 136446210;
      BOOL v35 = "nw_endpoint_construct_composite_bonjour_name";
      id v9 = "%{public}s Failed to construct composite";
      goto LABEL_12;
    }

LABEL_75:
    if (v29) {
      free(v29);
    }
    goto LABEL_42;
  }

  self = v5;
  v5->_receiveWindowPacketCount = 16;
  objc_storeWeak((id *)&v5->_delegate, v4);
  [MEMORY[0x189603FA8] array];
  id v6 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
  writeRequests = self->_writeRequests;
  self->_writeRequests = v6;

  id v8 = (nw_protocol *)calloc(1uLL, 0x40uLL);
  self->_packetProtocol = v8;
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v41 = "-[NWRemotePacketProxy initWithDelegate:]";
    os_log_type_t v42 = 2048;
    BOOL v43 = 64LL;
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      uint64_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v41 = "-[NWRemotePacketProxy initWithDelegate:]";
      os_log_type_t v42 = 2048;
      BOOL v43 = 64LL;
      uint64_t v14 = "%{public}s calloc(%zu) failed";
    }

    else
    {
      if (v38)
      {
        id v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        id v19 = os_log_type_enabled(v12, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)addrinfo buf = 136446722;
            BOOL v41 = "-[NWRemotePacketProxy initWithDelegate:]";
            os_log_type_t v42 = 2048;
            BOOL v43 = 64LL;
            v44 = 2082;
            os_log_type_t v45 = v17;
            _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s calloc(%zu) failed, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v17);
          if (!v11) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }

        if (!v19) {
          goto LABEL_38;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v41 = "-[NWRemotePacketProxy initWithDelegate:]";
        os_log_type_t v42 = 2048;
        BOOL v43 = 64LL;
        uint64_t v14 = "%{public}s calloc(%zu) failed, no backtrace";
        id v23 = v12;
        os_log_type_t v24 = v18;
        goto LABEL_30;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      uint64_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v41 = "-[NWRemotePacketProxy initWithDelegate:]";
      os_log_type_t v42 = 2048;
      BOOL v43 = 64LL;
      uint64_t v14 = "%{public}s calloc(%zu) failed, backtrace limit exceeded";
    }

    id v23 = v12;
    os_log_type_t v24 = v13;
LABEL_30:
    uint64_t v25 = 22;
LABEL_37:
    _os_log_impl(&dword_181A5C000, v23, v24, v14, buf, v25);
    goto LABEL_38;
  }

  if (initWithDelegate__packetProtocolOnceToken[0] != -1) {
    dispatch_once(initWithDelegate__packetProtocolOnceToken, &__block_literal_global_17709);
  }
  self->_packetProtocol->identifier = (nw_protocol_identifier *)&initWithDelegate__NWRemotePacketProtocolIdentifier;
  self->_packetProtocol->callbacks = (nw_protocol_callbacks *)&initWithDelegate__NWRemotePacketProtocolCallbacks;
  self->_packetProtocol->handle = self;
  internal = nw_hash_table_create_internal( 0x11u,  60,  (const void *(*)(const void *, unsigned int *))nw_packet_get_key,  (unsigned int (*)(const void *, unsigned int))nw_packet_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_packet_matches_key,  nw_packet_release);
  if (!internal)
  {
    self->_packetHashTable = 0LL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v15 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v41 = "-[NWRemotePacketProxy initWithDelegate:]";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "-[NWRemotePacketProxy initWithDelegate:]";
        uint64_t v14 = "%{public}s nw_protocol_hash_table_create failed";
LABEL_35:
        id v23 = v12;
        os_log_type_t v24 = v16;
LABEL_36:
        uint64_t v25 = 12;
        goto LABEL_37;
      }

      goto LABEL_38;
    }

    if (!v38)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "-[NWRemotePacketProxy initWithDelegate:]";
        uint64_t v14 = "%{public}s nw_protocol_hash_table_create failed, backtrace limit exceeded";
        goto LABEL_35;
      }

  _Block_object_dispose(&v80, 8);

  _Block_object_dispose(&v106, 8);
}

  if (!*((_BYTE *)v469 + 24))
  {
    v77 = *(_DWORD *)((char *)&v3->path_value + 31);
    switch(v77)
    {
      case 0:
        break;
      case 1:
        v78 = "handover";
        goto LABEL_389;
      case 2:
        v78 = "interactive";
        goto LABEL_389;
      case 3:
        v78 = "aggregate";
        goto LABEL_389;
      default:
        v78 = "?";
LABEL_389:
        if (v77 == 100) {
          v78 = "target-based";
        }
        if (v77 == 101) {
          v292 = "pure handover";
        }
        else {
          v292 = v78;
        }
        v293 = (char *)v477[3];
        v294 = ", ";
        if (v293 == a2) {
          v294 = "";
        }
        v295 = snprintf(v293, v473[3], "%smultipath service: %s", v294, v292);
        v296 = v473;
        v297 = v473[3];
        BOOL v15 = v297 > v295;
        v298 = v297 - v295;
        if (v15)
        {
          if (v295 >= 1)
          {
            v477[3] += v295;
            v296[3] = v298;
          }
        }

        else
        {
          *(_BYTE *)v477[3] = 0;
          *((_BYTE *)v469 + 24) = 1;
        }

        break;
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    companion_preference = v3->path_value.companion_preference;
    if (companion_preference)
    {
      BOOL v80 = (char *)v477[3];
      os_log_type_t v81 = ", ";
      if (v80 == a2) {
        os_log_type_t v81 = "";
      }
      if (companion_preference == 1) {
        os_log_type_t v82 = "prefer";
      }
      else {
        os_log_type_t v82 = "avoid";
      }
      os_log_type_t v83 = snprintf(v80, v473[3], "%scompanion preference: %s", v81, v82);
      os_log_type_t v84 = v473;
      v85 = v473[3];
      BOOL v15 = v85 > v83;
      v86 = v85 - v83;
      if (v15)
      {
        if (v83 >= 1)
        {
          v477[3] += v83;
          v84[3] = v86;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    companion_link_upgrade_preference = v3->path_value.companion_link_upgrade_preference;
    if (companion_link_upgrade_preference)
    {
      v88 = (char *)v477[3];
      os_log_type_t v89 = ", ";
      if (v88 == a2) {
        os_log_type_t v89 = "";
      }
      if (companion_link_upgrade_preference == 1) {
        v90 = "bt";
      }
      else {
        v90 = "wifi";
      }
      os_log_type_t v91 = snprintf(v88, v473[3], "%scompanion link upgrade preference: %s", v89, v90);
      v92 = v473;
      os_log_type_t v93 = v473[3];
      BOOL v15 = v93 > v91;
      v94 = v93 - v91;
      if (v15)
      {
        if (v91 >= 1)
        {
          v477[3] += v91;
          v92[3] = v94;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 1) != 0)
  {
    v63 = (char *)v477[3];
    uint64_t v64 = ", ";
    if (v63 == a2) {
      uint64_t v64 = "";
    }
    BOOL v65 = snprintf(v63, v473[3], "%sprohibit expensive", v64);
    v66 = v473;
    os_log_type_t v67 = v473[3];
    BOOL v15 = v67 > v65;
    id v68 = v67 - v65;
    if (v15)
    {
      if (v65 >= 1)
      {
        v477[3] += v65;
        v66[3] = v68;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 2) != 0)
  {
    v107 = (char *)v477[3];
    os_log_type_t v108 = ", ";
    if (v107 == a2) {
      os_log_type_t v108 = "";
    }
    BOOL v109 = snprintf(v107, v473[3], "%sprohibit constrained", v108);
    v110 = v473;
    v111 = v473[3];
    BOOL v15 = v111 > v109;
    v112 = v111 - v109;
    if (v15)
    {
      if (v109 >= 1)
      {
        v477[3] += v109;
        v110[3] = v112;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 4) != 0)
  {
    os_log_type_t v113 = (char *)v477[3];
    os_log_type_t v114 = ", ";
    if (v113 == a2) {
      os_log_type_t v114 = "";
    }
    os_log_type_t v115 = snprintf(v113, v473[3], "%sallow ultra constrained", v114);
    os_log_type_t v116 = v473;
    os_log_type_t v117 = v473[3];
    BOOL v15 = v117 > v115;
    os_log_type_t v118 = v117 - v115;
    if (v15)
    {
      if (v115 >= 1)
      {
        v477[3] += v115;
        v116[3] = v118;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 8) != 0)
  {
    v119 = (char *)v477[3];
    v120 = ", ";
    if (v119 == a2) {
      v120 = "";
    }
    os_log_type_t v121 = snprintf(v119, v473[3], "%sprohibit roaming", v120);
    BOOL v122 = v473;
    os_log_type_t v123 = v473[3];
    BOOL v15 = v123 > v121;
    v124 = v123 - v121;
    if (v15)
    {
      if (v121 >= 1)
      {
        v477[3] += v121;
        v122[3] = v124;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 2) != 0)
  {
    v125 = (char *)v477[3];
    v126 = ", ";
    if (v125 == a2) {
      v126 = "";
    }
    v127 = snprintf(v125, v473[3], "%sno proxy", v126);
    v128 = v473;
    id v129 = v473[3];
    BOOL v15 = v129 > v127;
    char v130 = v129 - v127;
    if (v15)
    {
      if (v127 >= 1)
      {
        v477[3] += v127;
        v128[3] = v130;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 4) != 0)
  {
    v131 = (char *)v477[3];
    v132 = ", ";
    if (v131 == a2) {
      v132 = "";
    }
    v133 = snprintf(v131, v473[3], "%sno transport", v132);
    __int16 v134 = v473;
    v135 = v473[3];
    BOOL v15 = v135 > v133;
    uint64_t v136 = v135 - v133;
    if (v15)
    {
      if (v133 >= 1)
      {
        v477[3] += v133;
        v134[3] = v136;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 8) != 0)
  {
    v137 = (char *)v477[3];
    v138 = ", ";
    if (v137 == a2) {
      v138 = "";
    }
    v139 = snprintf(v137, v473[3], "%suse awdl", v138);
    v140 = v473;
    v141 = v473[3];
    BOOL v15 = v141 > v139;
    v142 = v141 - v139;
    if (v15)
    {
      if (v139 >= 1)
      {
        v477[3] += v139;
        v140[3] = v142;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x10) != 0)
  {
    v143 = (char *)v477[3];
    v144 = ", ";
    if (v143 == a2) {
      v144 = "";
    }
    v145 = snprintf(v143, v473[3], "%suse p2p", v144);
    v146 = v473;
    v147 = v473[3];
    BOOL v15 = v147 > v145;
    v148 = v147 - v145;
    if (v15)
    {
      if (v145 >= 1)
      {
        v477[3] += v145;
        v146[3] = v148;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x20) != 0)
  {
    v149 = (char *)v477[3];
    v150 = ", ";
    if (v149 == a2) {
      v150 = "";
    }
    v151 = snprintf(v149, v473[3], "%sprohibit fallback", v150);
    v152 = v473;
    v153 = v473[3];
    BOOL v15 = v153 > v151;
    v154 = v153 - v151;
    if (v15)
    {
      if (v151 >= 1)
      {
        v477[3] += v151;
        v152[3] = v154;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x40) != 0)
  {
    v155 = (char *)v477[3];
    v156 = ", ";
    if (v155 == a2) {
      v156 = "";
    }
    v157 = snprintf(v155, v473[3], "%sprohibit cellular fallback", v156);
    v158 = v473;
    v159 = v473[3];
    BOOL v15 = v159 > v157;
    v160 = v159 - v157;
    if (v15)
    {
      if (v157 >= 1)
      {
        v477[3] += v157;
        v158[3] = v160;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x80) != 0)
  {
    v161 = (char *)v477[3];
    v162 = ", ";
    if (v161 == a2) {
      v162 = "";
    }
    v163 = snprintf(v161, v473[3], "%sno wake from sleep", v162);
    v164 = v473;
    v165 = v473[3];
    BOOL v15 = v165 > v163;
    v166 = v165 - v163;
    if (v15)
    {
      if (v163 >= 1)
      {
        v477[3] += v163;
        v164[3] = v166;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 1) != 0)
  {
    v167 = (char *)v477[3];
    v168 = ", ";
    if (v167 == a2) {
      v168 = "";
    }
    v169 = snprintf(v167, v473[3], "%sdiscretionary", v168);
    v170 = v473;
    v171 = v473[3];
    BOOL v15 = v171 > v169;
    v172 = v171 - v169;
    if (v15)
    {
      if (v169 >= 1)
      {
        v477[3] += v169;
        v170[3] = v172;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x10) != 0)
  {
    v173 = (char *)v477[3];
    v174 = ", ";
    if (v173 == a2) {
      v174 = "";
    }
    v175 = snprintf(v173, v473[3], "%sallow socket access", v174);
    v176 = v473;
    v177 = v473[3];
    BOOL v15 = v177 > v175;
    v178 = v177 - v175;
    if (v15)
    {
      if (v175 >= 1)
      {
        v477[3] += v175;
        v176[3] = v178;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x20) != 0)
  {
    v179 = (char *)v477[3];
    v180 = ", ";
    if (v179 == a2) {
      v180 = "";
    }
    v181 = snprintf(v179, v473[3], "%sonly primary requires type", v180);
    v182 = v473;
    v183 = v473[3];
    BOOL v15 = v183 > v181;
    v184 = v183 - v181;
    if (v15)
    {
      if (v181 >= 1)
      {
        v477[3] += v181;
        v182[3] = v184;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x100) != 0)
  {
    v185 = (char *)v477[3];
    v186 = ", ";
    if (v185 == a2) {
      v186 = "";
    }
    v187 = snprintf(v185, v473[3], "%sprefer no proxy", v186);
    v188 = v473;
    v189 = v473[3];
    BOOL v15 = v189 > v187;
    v190 = v189 - v187;
    if (v15)
    {
      if (v187 >= 1)
      {
        v477[3] += v187;
        v188[3] = v190;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x200) != 0)
  {
    v191 = (char *)v477[3];
    v192 = ", ";
    if (v191 == a2) {
      v192 = "";
    }
    v193 = snprintf(v191, v473[3], "%sno proxy path selection", v192);
    v194 = v473;
    v195 = v473[3];
    BOOL v15 = v195 > v193;
    v196 = v195 - v193;
    if (v15)
    {
      if (v193 >= 1)
      {
        v477[3] += v193;
        v194[3] = v196;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x40) != 0)
  {
    v197 = (char *)v477[3];
    v198 = ", ";
    if (v197 == a2) {
      v198 = "";
    }
    v199 = snprintf(v197, v473[3], "%sproxy fail closed", v198);
    v200 = v473;
    v201 = v473[3];
    BOOL v15 = v201 > v199;
    v202 = v201 - v199;
    if (v15)
    {
      if (v199 >= 1)
      {
        v477[3] += v199;
        v200[3] = v202;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x400) != 0)
  {
    v203 = (char *)v477[3];
    v204 = ", ";
    if (v203 == a2) {
      v204 = "";
    }
    v205 = snprintf(v203, v473[3], "%sproxy fail closed for unreachable", v204);
    v206 = v473;
    v207 = v473[3];
    BOOL v15 = v207 > v205;
    v208 = v207 - v205;
    if (v15)
    {
      if (v205 >= 1)
      {
        v477[3] += v205;
        v206[3] = v208;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x80) != 0)
  {
    v209 = (char *)v477[3];
    v210 = ", ";
    if (v209 == a2) {
      v210 = "";
    }
    v211 = snprintf(v209, v473[3], "%sprohibit privacy proxy", v210);
    v212 = v473;
    v213 = v473[3];
    BOOL v15 = v213 > v211;
    v214 = v213 - v211;
    if (v15)
    {
      if (v211 >= 1)
      {
        v477[3] += v211;
        v212[3] = v214;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x4000) != 0)
  {
    v215 = (char *)v477[3];
    v216 = ", ";
    if (v215 == a2) {
      v216 = "";
    }
    v217 = snprintf(v215, v473[3], "%sknown tracker", v216);
    v218 = v473;
    v219 = v473[3];
    BOOL v15 = v219 > v217;
    v220 = v219 - v217;
    if (v15)
    {
      if (v217 >= 1)
      {
        v477[3] += v217;
        v218[3] = v220;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x8000) != 0)
  {
    v221 = (char *)v477[3];
    v222 = ", ";
    if (v221 == a2) {
      v222 = "";
    }
    v223 = snprintf(v221, v473[3], "%sthird party web content", v222);
    v224 = v473;
    v225 = v473[3];
    BOOL v15 = v225 > v223;
    v226 = v225 - v223;
    if (v15)
    {
      if (v223 >= 1)
      {
        v477[3] += v223;
        v224[3] = v226;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x10000) != 0)
  {
    v227 = (char *)v477[3];
    v228 = ", ";
    if (v227 == a2) {
      v228 = "";
    }
    v229 = snprintf(v227, v473[3], "%sapproved app domain", v228);
    v230 = v473;
    v231 = v473[3];
    BOOL v15 = v231 > v229;
    v232 = v231 - v229;
    if (v15)
    {
      if (v229 >= 1)
      {
        v477[3] += v229;
        v230[3] = v232;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x20000) != 0)
  {
    v233 = (char *)v477[3];
    v234 = ", ";
    if (v233 == a2) {
      v234 = "";
    }
    v235 = snprintf(v233, v473[3], "%senhanced privacy", v234);
    v236 = v473;
    v237 = v473[3];
    BOOL v15 = v237 > v235;
    v238 = v237 - v235;
    if (v15)
    {
      if (v235 >= 1)
      {
        v477[3] += v235;
        v236[3] = v238;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x40000) != 0)
  {
    v239 = (char *)v477[3];
    v240 = ", ";
    if (v239 == a2) {
      v240 = "";
    }
    v241 = snprintf(v239, v473[3], "%sweb-search", v240);
    v242 = v473;
    v243 = v473[3];
    BOOL v15 = v243 > v241;
    v244 = v243 - v241;
    if (v15)
    {
      if (v241 >= 1)
      {
        v477[3] += v241;
        v242[3] = v244;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x80000) != 0)
  {
    v245 = (char *)v477[3];
    v246 = ", ";
    if (v245 == a2) {
      v246 = "";
    }
    v247 = snprintf(v245, v473[3], "%suse persona", v246);
    v248 = v473;
    v249 = v473[3];
    BOOL v15 = v249 > v247;
    v250 = v249 - v247;
    if (v15)
    {
      if (v247 >= 1)
      {
        v477[3] += v247;
        v248[3] = v250;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24) && *(void *)&v3->joinable_path_value.fallback_mode)
  {
    v251 = v3->attributed_bundle;
    v252 = v251;
    if (v251 && (v253 = *((_DWORD *)v251 + 31), (v253 - 2) >= 2))
    {
      if (v253 == 1)
      {

LABEL_402:
        v299 = snprintf((char *)v477[3], v473[3], "%saccount id: %s");
        goto LABEL_570;
      }
    }

    else
    {
      if (nwlog_get_sensitive_redacted::onceToken != -1) {
        dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
      }
      v254 = nwlog_get_sensitive_redacted::sensitiveRedacted == 0;

      if (v254) {
        goto LABEL_402;
      }
    }

    v425 = (char *)v477[3];
    v426 = v473[3];
    v427 = strlen(*(const char **)&v3->joinable_path_value.fallback_mode);
    __nwlog_salted_hash(*(const void **)&v3->joinable_path_value.fallback_mode, v427, (char *)out);
    v299 = snprintf(v425, v426, "%saccount id: %s");
LABEL_570:
    v428 = v473;
    v429 = v473[3];
    BOOL v15 = v429 > v299;
    v430 = v429 - v299;
    if (v15)
    {
      if (v299 >= 1)
      {
        v477[3] += v299;
        v428[3] = v430;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    internet_options = v3->internet_options;
    if (internet_options)
    {
      v256 = (char *)v477[3];
      v257 = v473[3];
      v258 = internet_options;
      v480 = 0LL;
      v481 = &v480;
      v482 = 0x2020000000LL;
      v483 = 0LL;
      v259 = v258 + 45;
      out[0] = MEMORY[0x1895F87A8];
      out[1] = 3221225472LL;
      out[2] = __nw_endpoint_get_description_block_invoke;
      out[3] = &unk_189BC9210;
      v260 = v258;
      out[4] = v260;
      out[5] = &v480;
      os_unfair_lock_lock(v259);
      ((void (*)(void *))out[2])(out);
      os_unfair_lock_unlock(v259);
      v261 = (const char *)v481[3];

      _Block_object_dispose(&v480, 8);
      v262 = ", ";
      if (v256 == a2) {
        v262 = "";
      }
      v263 = snprintf(v256, v257, "%slocal address: %s", v262, v261);
      v264 = v473;
      v265 = v473[3];
      BOOL v15 = v265 > v263;
      v266 = v265 - v263;
      if (v15)
      {
        if (v263 >= 1)
        {
          v477[3] += v263;
          v264[3] = v266;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    local_address = v3->local_address;
    if (local_address)
    {
      v268 = (char *)v477[3];
      v269 = ", ";
      if (v268 == a2) {
        v269 = "";
      }
      v270 = snprintf( v268,  v473[3],  "%srequired interface: %s(%u)",  v269,  (const char *)local_address + 104,  *((_DWORD *)local_address + 2));
      v271 = v473;
      v272 = v473[3];
      BOOL v15 = v272 > v270;
      v273 = v272 - v270;
      if (v15)
      {
        if (v270 >= 1)
        {
          v477[3] += v270;
          v271[3] = v273;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24) && v3->account_id)
  {
    v274 = v3->attributed_bundle;
    v275 = v274;
    if (v274 && (v276 = *((_DWORD *)v274 + 31), (v276 - 2) >= 2))
    {
      if (v276 == 1)
      {

LABEL_405:
        v300 = snprintf((char *)v477[3], v473[3], "%sattribution context: %s");
        goto LABEL_576;
      }
    }

    else
    {
      if (nwlog_get_sensitive_redacted::onceToken != -1) {
        dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
      }
      v277 = nwlog_get_sensitive_redacted::sensitiveRedacted == 0;

      if (v277) {
        goto LABEL_405;
      }
    }

    LOBYTE(out[1]) = 0;
    out[0] = 0LL;
    v431 = (char *)v477[3];
    v432 = v473[3];
    v433 = strlen(v3->account_id);
    __nwlog_salted_hash(v3->account_id, v433, (char *)out);
    v300 = snprintf(v431, v432, "%sattribution context: #%s");
LABEL_576:
    v434 = v473;
    v435 = v473[3];
    BOOL v15 = v435 > v300;
    v436 = v435 - v300;
    if (v15)
    {
      if (v300 >= 1)
      {
        v477[3] += v300;
        v434[3] = v436;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    attribution_context = v3->attribution_context;
    if (attribution_context)
    {
      v279 = (char *)v477[3];
      v280 = ", ";
      if (v279 == a2) {
        v280 = "";
      }
      v281 = snprintf(v279, v473[3], "%sattributed bundle: %s", v280, attribution_context);
      v282 = v473;
      v283 = v473[3];
      BOOL v15 = v283 > v281;
      v284 = v283 - v281;
      if (v15)
      {
        if (v281 >= 1)
        {
          v477[3] += v281;
          v282[3] = v284;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    required_interface = (xpc_object_t *)v3->required_interface;
    if (required_interface)
    {
      if (*required_interface && xpc_array_get_count(*required_interface))
      {
        v286 = (char *)v477[3];
        v287 = ", ";
        if (v286 == a2) {
          v287 = "";
        }
        v288 = snprintf(v286, v473[3], "%sprohibited types: ", v287);
        v289 = v473;
        v290 = v473[3];
        BOOL v15 = v290 > v288;
        v291 = v290 - v288;
        if (v15)
        {
          if (v288 >= 1)
          {
            v477[3] += v288;
            v289[3] = v291;
          }
        }

        else
        {
          *(_BYTE *)v477[3] = 0;
          *((_BYTE *)v469 + 24) = 1;
        }

        v313 = *(void **)v3->required_interface;
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke;
        applier[3] = &unk_189BB8E78;
        applier[4] = &v476;
        applier[5] = &v472;
        applier[6] = &v468;
        xpc_array_apply(v313, applier);
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v320 = (void *)*((void *)v3->required_interface + 1);
        if (v320)
        {
          if (xpc_array_get_count(v320))
          {
            v321 = (char *)v477[3];
            v322 = ", ";
            if (v321 == a2) {
              v322 = "";
            }
            v323 = snprintf(v321, v473[3], "%sprohibited subtypes: ", v322);
            v324 = v473;
            v325 = v473[3];
            BOOL v15 = v325 > v323;
            v326 = v325 - v323;
            if (v15)
            {
              if (v323 >= 1)
              {
                v477[3] += v323;
                v324[3] = v326;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v437 = (void *)*((void *)v3->required_interface + 1);
            v466[0] = MEMORY[0x1895F87A8];
            v466[1] = 3221225472LL;
            v466[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_2;
            v466[3] = &unk_189BB8E78;
            v466[4] = &v476;
            v466[5] = &v472;
            v466[6] = &v468;
            xpc_array_apply(v437, v466);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v327 = (void *)*((void *)v3->required_interface + 2);
        if (v327)
        {
          if (xpc_array_get_count(v327))
          {
            v328 = (char *)v477[3];
            v329 = ", ";
            if (v328 == a2) {
              v329 = "";
            }
            v330 = snprintf(v328, v473[3], "%spreferred subtypes: ", v329);
            v331 = v473;
            v332 = v473[3];
            BOOL v15 = v332 > v330;
            v333 = v332 - v330;
            if (v15)
            {
              if (v330 >= 1)
              {
                v477[3] += v330;
                v331[3] = v333;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v438 = (void *)*((void *)v3->required_interface + 2);
            v465[0] = MEMORY[0x1895F87A8];
            v465[1] = 3221225472LL;
            v465[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_3;
            v465[3] = &unk_189BB8E78;
            v465[4] = &v476;
            v465[5] = &v472;
            v465[6] = &v468;
            xpc_array_apply(v438, v465);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v334 = (void *)*((void *)v3->required_interface + 3);
        if (v334)
        {
          if (xpc_array_get_count(v334))
          {
            v335 = (char *)v477[3];
            v336 = ", ";
            if (v335 == a2) {
              v336 = "";
            }
            v337 = snprintf(v335, v473[3], "%sprohibited interfaces: ", v336);
            v338 = v473;
            v339 = v473[3];
            BOOL v15 = v339 > v337;
            v340 = v339 - v337;
            if (v15)
            {
              if (v337 >= 1)
              {
                v477[3] += v337;
                v338[3] = v340;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v439 = (void *)*((void *)v3->required_interface + 3);
            v464[0] = MEMORY[0x1895F87A8];
            v464[1] = 3221225472LL;
            v464[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_4;
            v464[3] = &unk_189BB8E78;
            v464[4] = &v476;
            v464[5] = &v472;
            v464[6] = &v468;
            xpc_array_apply(v439, v464);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v341 = (void *)*((void *)v3->required_interface + 4);
        if (v341)
        {
          if (xpc_array_get_count(v341))
          {
            v342 = (char *)v477[3];
            v343 = ", ";
            if (v342 == a2) {
              v343 = "";
            }
            v344 = snprintf(v342, v473[3], "%sprohibited netagent domains: ", v343);
            v345 = v473;
            v346 = v473[3];
            BOOL v15 = v346 > v344;
            v347 = v346 - v344;
            if (v15)
            {
              if (v344 >= 1)
              {
                v477[3] += v344;
                v345[3] = v347;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v440 = (void *)*((void *)v3->required_interface + 4);
            v463[0] = MEMORY[0x1895F87A8];
            v463[1] = 3221225472LL;
            v463[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_5;
            v463[3] = &unk_189BB8E78;
            v463[4] = &v476;
            v463[5] = &v472;
            v463[6] = &v468;
            xpc_array_apply(v440, v463);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v348 = (void *)*((void *)v3->required_interface + 5);
        if (v348)
        {
          if (xpc_array_get_count(v348))
          {
            v349 = (char *)v477[3];
            v350 = ", ";
            if (v349 == a2) {
              v350 = "";
            }
            v351 = snprintf(v349, v473[3], "%sprohibited netagent types: ", v350);
            v352 = v473;
            v353 = v473[3];
            BOOL v15 = v353 > v351;
            v354 = v353 - v351;
            if (v15)
            {
              if (v351 >= 1)
              {
                v477[3] += v351;
                v352[3] = v354;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v441 = (void *)*((void *)v3->required_interface + 5);
            v462[0] = MEMORY[0x1895F87A8];
            v462[1] = 3221225472LL;
            v462[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_6;
            v462[3] = &unk_189BB8E78;
            v462[4] = &v476;
            v462[5] = &v472;
            v462[6] = &v468;
            xpc_array_apply(v441, v462);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v355 = (void *)*((void *)v3->required_interface + 6);
        if (v355)
        {
          if (xpc_array_get_count(v355))
          {
            v356 = (char *)v477[3];
            v357 = ", ";
            if (v356 == a2) {
              v357 = "";
            }
            v358 = snprintf(v356, v473[3], "%sprohibited netagent uuids: ", v357);
            v359 = v473;
            v360 = v473[3];
            BOOL v15 = v360 > v358;
            v361 = v360 - v358;
            if (v15)
            {
              if (v358 >= 1)
              {
                v477[3] += v358;
                v359[3] = v361;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v442 = (void *)*((void *)v3->required_interface + 6);
            v461[0] = MEMORY[0x1895F87A8];
            v461[1] = 3221225472LL;
            v461[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_7;
            v461[3] = &unk_189BB8E78;
            v461[4] = &v476;
            v461[5] = &v472;
            v461[6] = &v468;
            xpc_array_apply(v442, v461);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v362 = (void *)*((void *)v3->required_interface + 7);
        if (v362)
        {
          if (xpc_array_get_count(v362))
          {
            v363 = (char *)v477[3];
            v364 = ", ";
            if (v363 == a2) {
              v364 = "";
            }
            v365 = snprintf(v363, v473[3], "%srequired netagent domains: ", v364);
            v366 = v473;
            v367 = v473[3];
            BOOL v15 = v367 > v365;
            v368 = v367 - v365;
            if (v15)
            {
              if (v365 >= 1)
              {
                v477[3] += v365;
                v366[3] = v368;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v443 = (void *)*((void *)v3->required_interface + 7);
            v460[0] = MEMORY[0x1895F87A8];
            v460[1] = 3221225472LL;
            v460[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_8;
            v460[3] = &unk_189BB8E78;
            v460[4] = &v476;
            v460[5] = &v472;
            v460[6] = &v468;
            xpc_array_apply(v443, v460);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v369 = (void *)*((void *)v3->required_interface + 8);
        if (v369)
        {
          if (xpc_array_get_count(v369))
          {
            v370 = (char *)v477[3];
            v371 = ", ";
            if (v370 == a2) {
              v371 = "";
            }
            v372 = snprintf(v370, v473[3], "%srequired netagent types: ", v371);
            v373 = v473;
            v374 = v473[3];
            BOOL v15 = v374 > v372;
            v375 = v374 - v372;
            if (v15)
            {
              if (v372 >= 1)
              {
                v477[3] += v372;
                v373[3] = v375;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v444 = (void *)*((void *)v3->required_interface + 8);
            v459[0] = MEMORY[0x1895F87A8];
            v459[1] = 3221225472LL;
            v459[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_9;
            v459[3] = &unk_189BB8E78;
            v459[4] = &v476;
            v459[5] = &v472;
            v459[6] = &v468;
            xpc_array_apply(v444, v459);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v376 = (void *)*((void *)v3->required_interface + 9);
        if (v376)
        {
          if (xpc_array_get_count(v376))
          {
            v377 = (char *)v477[3];
            v378 = ", ";
            if (v377 == a2) {
              v378 = "";
            }
            v379 = snprintf(v377, v473[3], "%srequired netagent uuids: ", v378);
            v380 = v473;
            v381 = v473[3];
            BOOL v15 = v381 > v379;
            v382 = v381 - v379;
            if (v15)
            {
              if (v379 >= 1)
              {
                v477[3] += v379;
                v380[3] = v382;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v445 = (void *)*((void *)v3->required_interface + 9);
            v458[0] = MEMORY[0x1895F87A8];
            v458[1] = 3221225472LL;
            v458[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_10;
            v458[3] = &unk_189BB8E78;
            v458[4] = &v476;
            v458[5] = &v472;
            v458[6] = &v468;
            xpc_array_apply(v445, v458);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v383 = (void *)*((void *)v3->required_interface + 10);
        if (v383)
        {
          if (xpc_array_get_count(v383))
          {
            v384 = (char *)v477[3];
            v385 = ", ";
            if (v384 == a2) {
              v385 = "";
            }
            v386 = snprintf(v384, v473[3], "%spreferred netagent domains: ", v385);
            v387 = v473;
            v388 = v473[3];
            BOOL v15 = v388 > v386;
            v389 = v388 - v386;
            if (v15)
            {
              if (v386 >= 1)
              {
                v477[3] += v386;
                v387[3] = v389;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v446 = (void *)*((void *)v3->required_interface + 10);
            v457[0] = MEMORY[0x1895F87A8];
            v457[1] = 3221225472LL;
            v457[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_11;
            v457[3] = &unk_189BB8E78;
            v457[4] = &v476;
            v457[5] = &v472;
            v457[6] = &v468;
            xpc_array_apply(v446, v457);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v390 = (void *)*((void *)v3->required_interface + 11);
        if (v390)
        {
          if (xpc_array_get_count(v390))
          {
            v391 = (char *)v477[3];
            v392 = ", ";
            if (v391 == a2) {
              v392 = "";
            }
            v393 = snprintf(v391, v473[3], "%spreferred netagent types: ", v392);
            v394 = v473;
            v395 = v473[3];
            BOOL v15 = v395 > v393;
            v396 = v395 - v393;
            if (v15)
            {
              if (v393 >= 1)
              {
                v477[3] += v393;
                v394[3] = v396;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v447 = (void *)*((void *)v3->required_interface + 11);
            v456[0] = MEMORY[0x1895F87A8];
            v456[1] = 3221225472LL;
            v456[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_12;
            v456[3] = &unk_189BB8E78;
            v456[4] = &v476;
            v456[5] = &v472;
            v456[6] = &v468;
            xpc_array_apply(v447, v456);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v397 = (void *)*((void *)v3->required_interface + 12);
        if (v397)
        {
          if (xpc_array_get_count(v397))
          {
            v398 = (char *)v477[3];
            v399 = ", ";
            if (v398 == a2) {
              v399 = "";
            }
            v400 = snprintf(v398, v473[3], "%spreferred netagent uuids: ", v399);
            v401 = v473;
            v402 = v473[3];
            BOOL v15 = v402 > v400;
            v403 = v402 - v400;
            if (v15)
            {
              if (v400 >= 1)
              {
                v477[3] += v400;
                v401[3] = v403;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v448 = (void *)*((void *)v3->required_interface + 12);
            v455[0] = MEMORY[0x1895F87A8];
            v455[1] = 3221225472LL;
            v455[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_13;
            v455[3] = &unk_189BB8E78;
            v455[4] = &v476;
            v455[5] = &v472;
            v455[6] = &v468;
            xpc_array_apply(v448, v455);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v404 = (void *)*((void *)v3->required_interface + 13);
        if (v404)
        {
          if (xpc_array_get_count(v404))
          {
            v405 = (char *)v477[3];
            v406 = ", ";
            if (v405 == a2) {
              v406 = "";
            }
            v407 = snprintf(v405, v473[3], "%savoided netagent domains: ", v406);
            v408 = v473;
            v409 = v473[3];
            BOOL v15 = v409 > v407;
            v410 = v409 - v407;
            if (v15)
            {
              if (v407 >= 1)
              {
                v477[3] += v407;
                v408[3] = v410;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v449 = (void *)*((void *)v3->required_interface + 13);
            v454[0] = MEMORY[0x1895F87A8];
            v454[1] = 3221225472LL;
            v454[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_14;
            v454[3] = &unk_189BB8E78;
            v454[4] = &v476;
            v454[5] = &v472;
            v454[6] = &v468;
            xpc_array_apply(v449, v454);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v411 = (void *)*((void *)v3->required_interface + 14);
        if (v411)
        {
          if (xpc_array_get_count(v411))
          {
            v412 = (char *)v477[3];
            v413 = ", ";
            if (v412 == a2) {
              v413 = "";
            }
            v414 = snprintf(v412, v473[3], "%savoided netagent types: ", v413);
            v415 = v473;
            v416 = v473[3];
            BOOL v15 = v416 > v414;
            v417 = v416 - v414;
            if (v15)
            {
              if (v414 >= 1)
              {
                v477[3] += v414;
                v415[3] = v417;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v450 = (void *)*((void *)v3->required_interface + 14);
            v453[0] = MEMORY[0x1895F87A8];
            v453[1] = 3221225472LL;
            v453[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_15;
            v453[3] = &unk_189BB8E78;
            v453[4] = &v476;
            v453[5] = &v472;
            v453[6] = &v468;
            xpc_array_apply(v450, v453);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24))
      {
        v418 = (void *)*((void *)v3->required_interface + 15);
        if (v418)
        {
          if (xpc_array_get_count(v418))
          {
            v419 = (char *)v477[3];
            v420 = ", ";
            if (v419 == a2) {
              v420 = "";
            }
            v421 = snprintf(v419, v473[3], "%savoided netagent uuids: ", v420);
            v422 = v473;
            v423 = v473[3];
            BOOL v15 = v423 > v421;
            v424 = v423 - v421;
            if (v15)
            {
              if (v421 >= 1)
              {
                v477[3] += v421;
                v422[3] = v424;
              }
            }

            else
            {
              *(_BYTE *)v477[3] = 0;
              *((_BYTE *)v469 + 24) = 1;
            }

            v451 = (void *)*((void *)v3->required_interface + 15);
            v452[0] = MEMORY[0x1895F87A8];
            v452[1] = 3221225472LL;
            v452[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_16;
            v452[3] = &unk_189BB8E78;
            v452[4] = &v476;
            v452[5] = &v472;
            v452[6] = &v468;
            xpc_array_apply(v451, v452);
          }
        }
      }

      if (!*((_BYTE *)v469 + 24) && *((void *)v3->required_interface + 16))
      {
        v314 = (char *)v477[3];
        v315 = ", ";
        if (v314 == a2) {
          v315 = "";
        }
        v316 = snprintf(v314, v473[3], "%shas demux", v315);
        v317 = v473;
        v318 = v473[3];
        BOOL v15 = v318 > v316;
        v319 = v318 - v316;
        if (v15)
        {
          if (v316 >= 1)
          {
            v477[3] += v316;
            v317[3] = v319;
          }
        }

        else
        {
          *(_BYTE *)v477[3] = 0;
          *((_BYTE *)v469 + 24) = 1;
        }
      }
    }
  }

  _Block_object_dispose(&v468, 8);
  _Block_object_dispose(&v472, 8);
  _Block_object_dispose(&v476, 8);
}

        goto LABEL_75;
      }

      __nwlog_obj();
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      id v55 = "nw_protocol_parameters_iterate_stack";
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();

      unsigned int v53 = OS_LOG_TYPE_ERROR;
      id v52 = 0;
      if (__nwlog_fault(v31, &v53, &v52))
      {
        if (v53 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v33 = v53;
          if (os_log_type_enabled(v32, v53))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v55 = "nw_protocol_parameters_iterate_stack";
            _os_log_impl(&dword_181A5C000, v32, v33, "%{public}s called with null stack", buf, 0xCu);
          }
        }

        else if (v52)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v40 = v53;
          BOOL v41 = os_log_type_enabled(v32, v53);
          if (backtrace_string)
          {
            if (v41)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              id v55 = "nw_protocol_parameters_iterate_stack";
              id v56 = 2082;
              unsigned int v57 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v32,  v40,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_71;
          }

          if (v41)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v55 = "nw_protocol_parameters_iterate_stack";
            _os_log_impl(&dword_181A5C000, v32, v40, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v44 = v53;
          if (os_log_type_enabled(v32, v53))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            id v55 = "nw_protocol_parameters_iterate_stack";
            _os_log_impl( &dword_181A5C000,  v32,  v44,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

        free(v28);
        goto LABEL_75;
      }

      if (v38)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_181A5C000, v29, v37, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl( &dword_181A5C000,  v29,  v40,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
    }

    v73 = [v72 countByEnumeratingWithState:&v215 objects:v283 count:16];
  }

  while (v73);

  if (v199 && v197)
  {
    __nwlog_obj();
    os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      v85 = *(void *)(a1 + 32);
      *(_DWORD *)applier = 136446978;
      *(void *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(void *)&applier[14] = v85;
      *(_WORD *)&applier[22] = 2112;
      *(void *)v286 = v199;
      *(_WORD *)&v286[8] = 2112;
      *(void *)&v286[10] = v197;
      _os_log_impl( &dword_181A5C000,  v84,  OS_LOG_TYPE_INFO,  "%{public}s %{public}@ Parsed target host %@ and path %@",  applier,  0x2Au);
    }

    [NSString stringWithFormat:@"https://%@%@", v199, v197];
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v87 = objc_alloc(MEMORY[0x189604030]);
    v88 = MEMORY[0x1895F87A8];
    os_log_type_t v89 = (void *)[v87 initWithString:v86];
    v90 = (void *)[objc_alloc(MEMORY[0x189601EB0]) initWithURL:v89];
    [v90 setHTTPMethod:@"POST"];
    *(void *)applier = 0LL;
    *(void *)&applier[8] = applier;
    *(_DWORD *)v286 = 0;
    *(void *)&applier[16] = 0x2020000000LL;
    v212[0] = v88;
    v212[1] = 3221225472LL;
    v212[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_233;
    v212[3] = &unk_189BBB610;
    os_log_type_t v91 = v90;
    v213 = v91;
    v214 = applier;
    nw_http_fields_enumerate(v195, v212);
    v92 = *(_DWORD *)(*(void *)&applier[8] + 24LL);
    if (v92)
    {
      os_log_type_t v93 = *(void **)(*(void *)(a1 + 32) + 48LL);
      v207[0] = v88;
      v207[1] = 3221225472LL;
      v207[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2_238;
      v207[3] = &unk_189BC5F30;
      v208 = v91;
      v209 = *(id *)(a1 + 32);
      nw_connection_receive_internal(v93, 0LL, v92, v92, v207);

      v94 = v208;
    }

    else
    {
      __nwlog_obj();
      v154 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
      {
        v155 = *(void *)(a1 + 32);
        *(_DWORD *)addrinfo buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v155;
        _os_log_impl( &dword_181A5C000,  v154,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ Request missing content length",  buf,  0x16u);
      }

      v94 = (void *)_nw_http_response_create_well_known(501LL);
      v156 = nw_http_create_metadata_for_response(v94);
      v157 = nw_content_context_create("response");
      v158 = v156;
      nw_content_context_set_metadata_for_protocol(v157, (nw_protocol_metadata_t)v156);
      v159 = *(void **)(a1 + 32);
      v160 = (nw_connection *)v159[6];
      v210[0] = MEMORY[0x1895F87A8];
      v210[1] = 3221225472LL;
      v210[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_237;
      v210[3] = &unk_189BC5E68;
      v211 = v159;
      nw_connection_send(v160, 0LL, v157, 1, v210);
    }

    _Block_object_dispose(applier, 8);
    if (v92) {
      goto LABEL_142;
    }

    goto LABEL_34;
  }

  if (v29) {
    free(v29);
  }
  return 0LL;
}

    if (v29) {
      free(v29);
    }
    *(_DWORD *)(v171 + 456) = 0;
    id v5 = &qword_18C45F000;
    goto LABEL_77;
  }

  if (*(char **)(v171 + 416) == handle)
  {
    if ((*(_BYTE *)(v171 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        v161 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v161, OS_LOG_TYPE_DEBUG))
        {
          v162 = *(_DWORD *)(v171 + 460);
          *(_DWORD *)addrinfo buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v186 = 2082;
          v187 = (const char *)(v171 + 464);
          v188 = 2080;
          v189 = (uint64_t)" ";
          v190 = 1024;
          *(_DWORD *)v191 = v162;
          _os_log_impl( &dword_181A5C000,  v161,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Removing placeholder stream for session",  buf,  0x26u);
        }
      }
    }

    *(void *)(v171 + 416) = 0LL;
  }

  else if (*(char **)(v171 + 424) == handle)
  {
    if ((*(_BYTE *)(v171 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        v163 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
        {
          v164 = *(_DWORD *)(v171 + 460);
          *(_DWORD *)addrinfo buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v186 = 2082;
          v187 = (const char *)(v171 + 464);
          v188 = 2080;
          v189 = (uint64_t)" ";
          v190 = 1024;
          *(_DWORD *)v191 = v164;
          _os_log_impl( &dword_181A5C000,  v163,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Removing datagram stream for session",  buf,  0x26u);
        }
      }
    }

    *(void *)(v171 + 424) = 0LL;
  }

  else
  {
    *(void *)os_log_type_t type = *((void *)handle + 8);
    node = nw_hash_table_get_node(*(void *)(v171 + 184), (uint64_t)type, 8LL);
    if (node)
    {
      if (!nw_hash_table_remove_node(*(void *)(v171 + 184), node) && (*(_BYTE *)(v171 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v14 = *(_DWORD *)(v171 + 460);
          *(_DWORD *)addrinfo buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v186 = 2082;
          v187 = (const char *)(v171 + 464);
          v188 = 2080;
          v189 = (uint64_t)" ";
          v190 = 1024;
          *(_DWORD *)v191 = v14;
          *(_WORD *)&v191[4] = 2048;
          *(void *)&v191[6] = *(void *)type;
          BOOL v15 = "%{public}s %{public}s%s<i%u> Failed to remove stream %lld from hash table";
LABEL_54:
          BOOL v35 = (os_log_s *)v13;
          __int16 v36 = OS_LOG_TYPE_ERROR;
          os_log_type_t v37 = 48;
LABEL_55:
          _os_log_impl(&dword_181A5C000, v35, v36, v15, buf, v37);
        }
      }
    }

    else if ((*(_BYTE *)(v171 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v34 = *(_DWORD *)(v171 + 460);
        *(_DWORD *)addrinfo buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        v186 = 2082;
        v187 = (const char *)(v171 + 464);
        v188 = 2080;
        v189 = (uint64_t)" ";
        v190 = 1024;
        *(_DWORD *)v191 = v34;
        *(_WORD *)&v191[4] = 2048;
        *(void *)&v191[6] = *(void *)type;
        BOOL v15 = "%{public}s %{public}s%s<i%u> called remove_input_handler with stream id %lld, but no stream found";
        goto LABEL_54;
      }
    }
  }

    if (v29) {
      free(v29);
    }
    *(_DWORD *)(v171 + 456) = 0;
    id v5 = &qword_18C45F000;
    goto LABEL_77;
  }

  if (*(char **)(v171 + 416) == handle)
  {
    if ((*(_BYTE *)(v171 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        v161 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v161, OS_LOG_TYPE_DEBUG))
        {
          v162 = *(_DWORD *)(v171 + 460);
          *(_DWORD *)addrinfo buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v186 = 2082;
          v187 = (const char *)(v171 + 464);
          v188 = 2080;
          v189 = (uint64_t)" ";
          v190 = 1024;
          *(_DWORD *)v191 = v162;
          _os_log_impl( &dword_181A5C000,  v161,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Removing placeholder stream for session",  buf,  0x26u);
        }
      }
    }

    *(void *)(v171 + 416) = 0LL;
  }

  else if (*(char **)(v171 + 424) == handle)
  {
    if ((*(_BYTE *)(v171 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        v163 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
        {
          v164 = *(_DWORD *)(v171 + 460);
          *(_DWORD *)addrinfo buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v186 = 2082;
          v187 = (const char *)(v171 + 464);
          v188 = 2080;
          v189 = (uint64_t)" ";
          v190 = 1024;
          *(_DWORD *)v191 = v164;
          _os_log_impl( &dword_181A5C000,  v163,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Removing datagram stream for session",  buf,  0x26u);
        }
      }
    }

    *(void *)(v171 + 424) = 0LL;
  }

  else
  {
    *(void *)os_log_type_t type = *((void *)handle + 8);
    node = nw_hash_table_get_node(*(void *)(v171 + 184), (uint64_t)type, 8LL);
    if (node)
    {
      if (!nw_hash_table_remove_node(*(void *)(v171 + 184), node) && (*(_BYTE *)(v171 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v14 = *(_DWORD *)(v171 + 460);
          *(_DWORD *)addrinfo buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v186 = 2082;
          v187 = (const char *)(v171 + 464);
          v188 = 2080;
          v189 = (uint64_t)" ";
          v190 = 1024;
          *(_DWORD *)v191 = v14;
          *(_WORD *)&v191[4] = 2048;
          *(void *)&v191[6] = *(void *)type;
          BOOL v15 = "%{public}s %{public}s%s<i%u> Failed to remove stream %lld from hash table";
LABEL_54:
          BOOL v35 = (os_log_s *)v13;
          __int16 v36 = OS_LOG_TYPE_ERROR;
          os_log_type_t v37 = 48;
LABEL_55:
          _os_log_impl(&dword_181A5C000, v35, v36, v15, buf, v37);
        }
      }
    }

    else if ((*(_BYTE *)(v171 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v34 = *(_DWORD *)(v171 + 460);
        *(_DWORD *)addrinfo buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        v186 = 2082;
        v187 = (const char *)(v171 + 464);
        v188 = 2080;
        v189 = (uint64_t)" ";
        v190 = 1024;
        *(_DWORD *)v191 = v34;
        *(_WORD *)&v191[4] = 2048;
        *(void *)&v191[6] = *(void *)type;
        BOOL v15 = "%{public}s %{public}s%s<i%u> called remove_input_handler with stream id %lld, but no stream found";
        goto LABEL_54;
      }
    }
  }

  PBDataWriterWriteBOOLField();
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_19:
    if ((has & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_76;
  }

    id v56 = &qword_18C45F000;
    unsigned int v57 = &qword_18C45F000;
    if (nw_endpoint_handler_get_minimize_logging(v8))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v8) & 1) != 0)
      {
LABEL_83:
        *((_BYTE *)self + 108) |= 8u;
        if (!self->result)
        {
          nw_endpoint_fallback_start_fallback_child(v8);
          nw_endpoint_handler_cancel(self->primary_child, 0LL, 1);
          goto LABEL_92;
        }

        if (nw_endpoint_handler_get_minimize_logging(v8))
        {
          if (v56[79] != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v70 = (os_log_s *)(id)v57[68];
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v103 = nw_endpoint_handler_get_id_string(v8);
            BOOL v104 = nw_endpoint_handler_dry_run_string(v8);
            os_log_type_t v105 = nw_endpoint_handler_copy_endpoint(v8);
            BOOL v106 = nw_endpoint_get_logging_description(v105);
            v107 = nw_endpoint_handler_state_string(v8);
            os_log_type_t v108 = nw_endpoint_handler_mode_string(v8);
            BOOL v109 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v8);
            *(_DWORD *)addrinfo buf = 136447746;
            BOOL v122 = "-[NWConcrete_nw_endpoint_fallback updatePathWithHandler:]";
            os_log_type_t v123 = 2082;
            v124 = (void *)v103;
            v125 = 2082;
            v126 = v104;
            v127 = 2082;
            v128 = (void *)v106;
            id v129 = 2082;
            char v130 = v107;
            v131 = 2082;
            v132 = v108;
            v133 = 2114;
            __int16 v134 = v109;
            _os_log_impl( &dword_181A5C000,  v70,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Ignoring immediate fallba ck request since race is complete",  buf,  0x48u);
          }
        }

        else
        {
          id v68 = v8;
          v69 = (*((_BYTE *)v68 + 268) & 0x20) == 0;

          if (!v69)
          {
LABEL_92:

            goto LABEL_93;
          }

          if (v56[79] != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v70 = (os_log_s *)(id)v57[68];
          if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v71 = nw_endpoint_handler_get_id_string(v68);
            v72 = nw_endpoint_handler_dry_run_string(v68);
            v73 = nw_endpoint_handler_copy_endpoint(v68);
            os_log_type_t v74 = nw_endpoint_get_logging_description(v73);
            BOOL v75 = nw_endpoint_handler_state_string(v68);
            os_log_type_t v76 = nw_endpoint_handler_mode_string(v68);
            v77 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v68);
            *(_DWORD *)addrinfo buf = 136447746;
            BOOL v122 = "-[NWConcrete_nw_endpoint_fallback updatePathWithHandler:]";
            os_log_type_t v123 = 2082;
            v124 = (void *)v71;
            v125 = 2082;
            v126 = v72;
            v127 = 2082;
            v128 = (void *)v74;
            id v129 = 2082;
            char v130 = v75;
            v131 = 2082;
            v132 = v76;
            v133 = 2114;
            __int16 v134 = v77;
            _os_log_impl( &dword_181A5C000,  v70,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Ignoring immediate fallba ck request since race is complete",  buf,  0x48u);
          }
        }

        goto LABEL_92;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      char v60 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        logd = nw_endpoint_handler_get_id_string(v8);
        v90 = nw_endpoint_handler_dry_run_string(v8);
        os_log_type_t v91 = nw_endpoint_handler_copy_endpoint(v8);
        v92 = nw_endpoint_get_logging_description(v91);
        os_log_type_t v93 = nw_endpoint_handler_state_string(v8);
        v94 = nw_endpoint_handler_mode_string(v8);
        os_log_type_t v95 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v8);
        *(_DWORD *)addrinfo buf = 136447746;
        BOOL v122 = "-[NWConcrete_nw_endpoint_fallback updatePathWithHandler:]";
        os_log_type_t v123 = 2082;
        v124 = (void *)logd;
        v125 = 2082;
        v126 = v90;
        v127 = 2082;
        v128 = (void *)v92;
        id v129 = 2082;
        char v130 = v93;
        v131 = 2082;
        v132 = v94;
        v133 = 2114;
        __int16 v134 = v95;
        _os_log_impl( &dword_181A5C000,  v60,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Immediate fallback requested",  buf,  0x48u);

        unsigned int v57 = &qword_18C45F000;
        id v56 = &qword_18C45F000;
      }
    }

    else
    {
      char v58 = v8;
      os_log_type_t v59 = (*((_BYTE *)v58 + 268) & 0x20) == 0;

      if (!v59) {
        goto LABEL_83;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      char v60 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v61 = nw_endpoint_handler_get_id_string(v58);
        __int16 v62 = nw_endpoint_handler_dry_run_string(v58);
        logb = v60;
        v63 = nw_endpoint_handler_copy_endpoint(v58);
        uint64_t v64 = nw_endpoint_get_logging_description(v63);
        BOOL v65 = nw_endpoint_handler_state_string(v58);
        v66 = nw_endpoint_handler_mode_string(v58);
        os_log_type_t v67 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v58);
        *(_DWORD *)addrinfo buf = 136447746;
        BOOL v122 = "-[NWConcrete_nw_endpoint_fallback updatePathWithHandler:]";
        os_log_type_t v123 = 2082;
        v124 = (void *)v61;
        v125 = 2082;
        v126 = v62;
        v127 = 2082;
        v128 = (void *)v64;
        id v129 = 2082;
        char v130 = v65;
        v131 = 2082;
        v132 = v66;
        v133 = 2114;
        __int16 v134 = v67;
        char v60 = logb;
        _os_log_impl( &dword_181A5C000,  logb,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Immediate fallback requested",  buf,  0x48u);

        unsigned int v57 = &qword_18C45F000;
        id v56 = &qword_18C45F000;
      }
    }

    goto LABEL_83;
  }

    if (v37) {
      free(v37);
    }
    os_log_type_t v11 = 0;
    id v12 = 0;
LABEL_11:
    if (v7 >= v12 + v11)
    {
      nw_frame_claim(a2, v4, v11, v12);
      if ((*(_BYTE *)(*(void *)(a1 + 56) + 158LL) & 1) == 0)
      {
        if (gLogDatapath)
        {
          id v23 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v24 = *(void *)(a1 + 56);
            uint64_t v25 = v24 + 74;
            LODWORD(v24) = *(_DWORD *)(v24 + 372);
            *(_DWORD *)addrinfo buf = 136447746;
            os_log_type_t v49 = "nw_protocol_http1_get_output_frames_block_invoke";
            os_log_type_t v50 = 2082;
            id v51 = v25;
            id v52 = 2080;
            unsigned int v53 = (uint64_t)" ";
            v54 = 1024;
            id v55 = v24;
            id v56 = 2048;
            *(void *)unsigned int v57 = a2;
            *(_WORD *)&v57[8] = 1024;
            *(_DWORD *)char v58 = v11;
            *(_WORD *)&v58[4] = 1024;
            *(_DWORD *)&v58[6] = v12;
            _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> claimed chunk header from frame %p (start: %u, end: %u)",  buf,  0x3Cu);
          }
        }
      }

      return a2 != 0;
    }

    if ((*(_BYTE *)(*(void *)(a1 + 40) + 158LL) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        BOOL v15 = v14 + 74;
        os_log_type_t v16 = *(void *)(v14 + 488);
        id v17 = *(_DWORD *)(*(void *)(v14 + 480) + 372LL);
        os_log_type_t v18 = *(_DWORD *)(v14 + 860);
        if (v16) {
          LODWORD(v16) = *(_DWORD *)(v16 + 424);
        }
        *(_DWORD *)addrinfo buf = 136448514;
        os_log_type_t v49 = "nw_protocol_http1_get_output_frames_block_invoke";
        os_log_type_t v50 = 2082;
        id v51 = v15;
        id v52 = 2080;
        unsigned int v53 = (uint64_t)" ";
        v54 = 1024;
        id v55 = v17;
        id v56 = 1024;
        *(_DWORD *)unsigned int v57 = v18;
        *(_WORD *)&v57[4] = 1024;
        *(_DWORD *)&v57[6] = v16;
        *(_WORD *)char v58 = 2048;
        *(void *)&v58[2] = a2;
        os_log_type_t v59 = 1024;
        char v60 = v7;
        os_log_type_t v61 = 1024;
        __int16 v62 = v11;
        v63 = 1024;
        uint64_t v64 = v12;
        _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> frame is too small to fit chunk header: %p, raw length: %u, start space: %u, end space: %u",  buf,  0x4Eu);
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v49 = "nw_protocol_http1_get_output_frames_block_invoke";
    id v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v20 = (os_log_s *)gLogObj;
      BOOL v21 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_protocol_http1_get_output_frames_block_invoke";
        os_log_type_t v22 = "%{public}s frame is too small to fit chunk header";
LABEL_34:
        _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
      }
    }

    else if (v46)
    {
      BOOL v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v20 = (os_log_s *)gLogObj;
      BOOL v21 = type;
      uint64_t v27 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v26)
      {
        if (v27)
        {
          *(_DWORD *)addrinfo buf = 136446466;
          os_log_type_t v49 = "nw_protocol_http1_get_output_frames_block_invoke";
          os_log_type_t v50 = 2082;
          id v51 = (uint64_t)v26;
          _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s frame is too small to fit chunk header, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v26);
        goto LABEL_35;
      }

      if (v27)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_protocol_http1_get_output_frames_block_invoke";
        os_log_type_t v22 = "%{public}s frame is too small to fit chunk header, no backtrace";
        goto LABEL_34;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v20 = (os_log_s *)gLogObj;
      BOOL v21 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v49 = "nw_protocol_http1_get_output_frames_block_invoke";
        os_log_type_t v22 = "%{public}s frame is too small to fit chunk header, backtrace limit exceeded";
        goto LABEL_34;
      }
    }

    if (v21) {
      free(v21);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -1;
LABEL_77:
    if (*(_BYTE *)(a1 + 80))
    {
      BOOL v65 = *(void *)(a2 + 32);
      v66 = *(void **)(a2 + 40);
      uint64_t v64 = (void *)(a2 + 32);
      if (v65)
      {
        *(void *)(v65 + 40) = v66;
        **(void **)(a2 + 40) = v65;
        goto LABEL_84;
      }
    }

    else
    {
      BOOL v65 = *(void *)(a2 + 16);
      v66 = *(void **)(a2 + 24);
      uint64_t v64 = (void *)(a2 + 16);
      if (v65)
      {
        *(void *)(v65 + 24) = v66;
        v66 = *(void **)(a2 + 24);
LABEL_83:
        NWConcrete_nw_protocol_options *v66 = v65;
LABEL_84:
        const char *v64 = 0LL;
        v64[1] = 0LL;
        if ((*(_BYTE *)(*(void *)(a1 + 64) + 158LL) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v96 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v97 = *(void *)(a1 + 64);
              v98 = (const char *)(v97 + 74);
              os_log_type_t v99 = *(void *)(v97 + 488);
              BOOL v100 = *(_DWORD *)(*(void *)(v97 + 480) + 372LL);
              os_log_type_t v101 = *(_DWORD *)(v97 + 860);
              if (v99) {
                LODWORD(v99) = *(_DWORD *)(v99 + 424);
              }
              *(_DWORD *)addrinfo buf = 136447746;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = v98;
              os_log_type_t v113 = 2080;
              os_log_type_t v114 = (uint64_t)" ";
              os_log_type_t v115 = 1024;
              *(_DWORD *)os_log_type_t v116 = v100;
              *(_WORD *)&v116[4] = 1024;
              *(_DWORD *)&v116[6] = v101;
              LOWORD(v117) = 1024;
              *(_DWORD *)((char *)&v117 + 2) = v99;
              HIWORD(v117) = 1024;
              *(_DWORD *)os_log_type_t v118 = v5;
              _os_log_impl( &dword_181A5C000,  v96,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Moving entire frame (%u bytes)",  buf,  0x38u);
            }
          }
        }

        os_log_type_t v37 = a2;
LABEL_87:
        os_log_type_t v67 = *(void *)(*(void *)(a1 + 32) + 8LL);
        id v68 = *(unsigned int *)(v67 + 24) + 1LL;
        v69 = v68 << 31 >> 31;
        *(_DWORD *)(v67 + 24) = v68;
        if (v69 == v68 && (v69 & 0x8000000000000000LL) == 0)
        {
LABEL_106:
          os_log_type_t v81 = *(void *)(*(void *)(a1 + 48) + 8LL);
          if (*(_BYTE *)(a1 + 80))
          {
            *(void *)(v37 + 32) = 0LL;
            os_log_type_t v82 = v37 + 32;
          }

          else
          {
            *(void *)(v37 + 16) = 0LL;
            os_log_type_t v82 = v37 + 16;
          }

          os_log_type_t v83 = *(uint64_t **)(v81 + 48);
          *(void *)(v82 + 8) = v83;
          *os_log_type_t v83 = v37;
          *(void *)(v81 + 48) = v82;
          return 1LL;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v70 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        *(_DWORD *)addrinfo buf = 136446978;
        v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
        v111 = 2082;
        v112 = "frame_count";
        os_log_type_t v113 = 2048;
        os_log_type_t v114 = 1LL;
        os_log_type_t v115 = 2048;
        *(void *)os_log_type_t v116 = v70;
        os_log_type_t v71 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v108 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v71, type, &v108))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v72 = (os_log_s *)gLogObj;
            v73 = type[0];
            if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
            {
              os_log_type_t v74 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)addrinfo buf = 136446978;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = "frame_count";
              os_log_type_t v113 = 2048;
              os_log_type_t v114 = 1LL;
              os_log_type_t v115 = 2048;
              *(void *)os_log_type_t v116 = v74;
              BOOL v75 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_102:
              _os_log_impl(&dword_181A5C000, v72, v73, v75, buf, 0x2Au);
            }
          }

          else if (v108)
          {
            os_log_type_t v76 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v72 = (os_log_s *)gLogObj;
            v73 = type[0];
            v77 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
            if (v76)
            {
              if (v77)
              {
                v78 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                *(_DWORD *)addrinfo buf = 136447234;
                v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
                v111 = 2082;
                v112 = "frame_count";
                os_log_type_t v113 = 2048;
                os_log_type_t v114 = 1LL;
                os_log_type_t v115 = 2048;
                *(void *)os_log_type_t v116 = v78;
                *(_WORD *)&v116[8] = 2082;
                os_log_type_t v117 = v76;
                _os_log_impl( &dword_181A5C000,  v72,  v73,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
              }

              free(v76);
              goto LABEL_103;
            }

            if (v77)
            {
              BOOL v80 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)addrinfo buf = 136446978;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = "frame_count";
              os_log_type_t v113 = 2048;
              os_log_type_t v114 = 1LL;
              os_log_type_t v115 = 2048;
              *(void *)os_log_type_t v116 = v80;
              BOOL v75 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_102;
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v72 = (os_log_s *)gLogObj;
            v73 = type[0];
            if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
            {
              os_log_type_t v79 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)addrinfo buf = 136446978;
              v110 = "nw_http1_connection_fulfill_frame_request_block_invoke";
              v111 = 2082;
              v112 = "frame_count";
              os_log_type_t v113 = 2048;
              os_log_type_t v114 = 1LL;
              os_log_type_t v115 = 2048;
              *(void *)os_log_type_t v116 = v79;
              BOOL v75 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_102;
            }
          }
        }

LABEL_75:
    if (v29) {
      free(v29);
    }
    goto LABEL_42;
  }

  self = v5;
  objc_storeWeak((id *)&v5->_delegate, v4);
  self->_maximumDataChunkSize = 10240LL;
  [MEMORY[0x189603FA8] array];
  id v6 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
  writeRequests = self->_writeRequests;
  self->_writeRequests = v6;

  id v8 = (nw_protocol *)calloc(1uLL, 0x40uLL);
  self->_directorProtocol = v8;
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446466;
    BOOL v41 = "-[NWRemoteConnectionDirector initWithDelegate:]";
    os_log_type_t v42 = 2048;
    BOOL v43 = 64LL;
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      uint64_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v41 = "-[NWRemoteConnectionDirector initWithDelegate:]";
      os_log_type_t v42 = 2048;
      BOOL v43 = 64LL;
      uint64_t v14 = "%{public}s calloc(%zu) failed";
    }

    else
    {
      if (v38)
      {
        id v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        id v19 = os_log_type_enabled(v12, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)addrinfo buf = 136446722;
            BOOL v41 = "-[NWRemoteConnectionDirector initWithDelegate:]";
            os_log_type_t v42 = 2048;
            BOOL v43 = 64LL;
            v44 = 2082;
            os_log_type_t v45 = v17;
            _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s calloc(%zu) failed, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v17);
          if (!v11) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }

        if (!v19) {
          goto LABEL_38;
        }
        *(_DWORD *)addrinfo buf = 136446466;
        BOOL v41 = "-[NWRemoteConnectionDirector initWithDelegate:]";
        os_log_type_t v42 = 2048;
        BOOL v43 = 64LL;
        uint64_t v14 = "%{public}s calloc(%zu) failed, no backtrace";
        id v23 = v12;
        os_log_type_t v24 = v18;
        goto LABEL_30;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      uint64_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v41 = "-[NWRemoteConnectionDirector initWithDelegate:]";
      os_log_type_t v42 = 2048;
      BOOL v43 = 64LL;
      uint64_t v14 = "%{public}s calloc(%zu) failed, backtrace limit exceeded";
    }

    id v23 = v12;
    os_log_type_t v24 = v13;
LABEL_30:
    uint64_t v25 = 22;
LABEL_37:
    _os_log_impl(&dword_181A5C000, v23, v24, v14, buf, v25);
    goto LABEL_38;
  }

  if (initWithDelegate__directorProtocolOnceToken != -1) {
    dispatch_once(&initWithDelegate__directorProtocolOnceToken, &__block_literal_global_43365);
  }
  self->_directorProtocol->identifier = (nw_protocol_identifier *)&NWRemoteConnectionDirectorProtocolIdentifier;
  self->_directorProtocol->callbacks = (nw_protocol_callbacks *)&NWRemoteConnectionDirectorProtocolCallbacks;
  self->_directorProtocol->handle = self;
  internal = nw_hash_table_create_internal( 0x11u,  4,  (const void *(*)(const void *, unsigned int *))nw_protocol_get_key,  (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key,  0LL);
  if (!internal)
  {
    self->_protocolHashTable = 0LL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v15 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    BOOL v41 = "-[NWRemoteConnectionDirector initWithDelegate:]";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "-[NWRemoteConnectionDirector initWithDelegate:]";
        uint64_t v14 = "%{public}s nw_protocol_hash_table_create failed";
LABEL_35:
        id v23 = v12;
        os_log_type_t v24 = v16;
LABEL_36:
        uint64_t v25 = 12;
        goto LABEL_37;
      }

      goto LABEL_38;
    }

    if (!v38)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v41 = "-[NWRemoteConnectionDirector initWithDelegate:]";
        uint64_t v14 = "%{public}s nw_protocol_hash_table_create failed, backtrace limit exceeded";
        goto LABEL_35;
      }

      os_log_type_t v39 = v33;
      os_log_type_t v40 = v34;
      BOOL v41 = 12;
      goto LABEL_75;
    }

    BOOL v15 = (uint64_t (*)(uint64_t, void *, const char *))v8[11];
    if (!v15)
    {
      uint64_t v14 = ((uint64_t (*)(uint64_t))v8[10])(a1);
      if (!a3) {
        goto LABEL_37;
      }
      goto LABEL_28;
    }

    uint64_t v14 = v15(a1, a2, a3);
    if (a3) {
      goto LABEL_28;
    }
LABEL_37:
    if (gLogDatapath)
    {
      os_log_type_t v50 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        id v51 = nw_endpoint_get_logging_description(a2);
        id v52 = v8[13];
        *(_DWORD *)addrinfo buf = 136447490;
        os_log_type_t v59 = "nw_protocol_create_internal";
        char v60 = 2080;
        os_log_type_t v61 = a1;
        __int16 v62 = 2048;
        logging_description = (const char *)v14;
        uint64_t v64 = 2080;
        BOOL v65 = v51;
        v66 = 2048;
        os_log_type_t v67 = a3;
        id v68 = 2048;
        v69 = v52;
        _os_log_impl( &dword_181A5C000,  v50,  OS_LOG_TYPE_DEBUG,  "%{public}s protocol %s (%p) not eligible, endpoint %s, parameters %p, accept function %p",  buf,  0x3Eu);
      }
    }

  if (v13) {
LABEL_75:
  }
    free(v13);
  return 0LL;
}

  if (v24) {
LABEL_75:
  }
    free(v24);
  return 0LL;
}

    *__int16 v36 = 0;
    v54 = v37[3];
    v37[3] = v54 - 1;
    if (!v54)
    {
      if (gLogDatapath)
      {
        v96 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v97 = v37[3];
          *(_DWORD *)addrinfo buf = 136446978;
          v205 = "_http_safe_append";
          v206 = 2082;
          v207 = "*remaining";
          v208 = 2048;
          v209 = 1LL;
          v210 = 2048;
          v211 = v97;
          _os_log_impl( &dword_181A5C000,  v96,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
        }
      }

      v37[3] = 0LL;
    }

    v199[3] = (uint64_t)(v36 + 1);
    id v55 = 1LL;
    if (!v30) {
      goto LABEL_79;
    }
LABEL_78:
    os_release(v30);
LABEL_79:
    _Block_object_dispose(&__src, 8);
LABEL_80:
    _Block_object_dispose(&v194, 8);
    _Block_object_dispose(&v198, 8);
    return v55;
  }

  if (a4 > 0x3F)
  {
    if (a4 >> 14)
    {
      if (a4 >> 30)
      {
        if (a4 >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)addrinfo buf = 136446466;
          v205 = "_http_vle_encode";
          v206 = 2048;
          v207 = (const char *)a4;
          v63 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v63);
          if (result) {
            goto LABEL_529;
          }
          free(v63);
          BOOL v46 = (char *)v199[3];
          if (v46)
          {
LABEL_63:
            if (a3)
            {
              os_log_type_t v47 = v195;
              if (v195[3] >= a4)
              {
                memcpy(v46, a3, a4);
                os_log_type_t v48 = v47[3];
                v47[3] = v48 - a4;
                if (v48 < a4)
                {
                  if (gLogDatapath)
                  {
                    v138 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
                    {
                      v139 = v47[3];
                      *(_DWORD *)addrinfo buf = 136446978;
                      v205 = "_http_safe_append";
                      v206 = 2082;
                      v207 = "*remaining";
                      v208 = 2048;
                      v209 = a4;
                      v210 = 2048;
                      v211 = v139;
                      _os_log_impl( &dword_181A5C000,  v138,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
                    }
                  }

                  v47[3] = 0LL;
                }

                v199[3] = (uint64_t)&v46[a4];
                goto LABEL_69;
              }

              __nwlog_obj();
              *(_DWORD *)addrinfo buf = 136446210;
              v205 = "_http_safe_append";
              v98 = (void *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              v178[0] = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault((const char *)v98, type, v178))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  os_log_type_t v99 = (os_log_s *)__nwlog_obj();
                  BOOL v100 = type[0];
                  if (!os_log_type_enabled(v99, type[0])) {
                    goto LABEL_460;
                  }
                  *(_DWORD *)addrinfo buf = 136446210;
                  v205 = "_http_safe_append";
                  os_log_type_t v101 = "%{public}s called with null (*remaining >= length)";
                  goto LABEL_459;
                }

                if (v178[0] == OS_LOG_TYPE_DEFAULT)
                {
                  os_log_type_t v99 = (os_log_s *)__nwlog_obj();
                  BOOL v100 = type[0];
                  if (!os_log_type_enabled(v99, type[0])) {
                    goto LABEL_460;
                  }
                  *(_DWORD *)addrinfo buf = 136446210;
                  v205 = "_http_safe_append";
                  os_log_type_t v101 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
                  goto LABEL_459;
                }

                v140 = (char *)__nw_create_backtrace_string();
                os_log_type_t v99 = (os_log_s *)__nwlog_obj();
                BOOL v100 = type[0];
                v141 = os_log_type_enabled(v99, type[0]);
                if (v140)
                {
                  if (v141)
                  {
                    *(_DWORD *)addrinfo buf = 136446466;
                    v205 = "_http_safe_append";
                    v206 = 2082;
                    v207 = v140;
                    _os_log_impl( &dword_181A5C000,  v99,  v100,  "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v140);
                  if (!v98)
                  {
LABEL_462:
                    v199[3] = 0LL;
                    __nwlog_obj();
                    *(_DWORD *)addrinfo buf = 136446210;
                    v205 = "nw_http_fillout_binary_message_inner";
                    v159 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    v178[0] = OS_LOG_TYPE_DEFAULT;
                    if ((__nwlog_fault(v159, type, v178) & 1) == 0) {
                      goto LABEL_525;
                    }
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v160 = (os_log_s *)__nwlog_obj();
                      v161 = type[0];
                      if (!os_log_type_enabled(v160, type[0])) {
                        goto LABEL_525;
                      }
                      *(_DWORD *)addrinfo buf = 136446210;
                      v205 = "nw_http_fillout_binary_message_inner";
                      v162 = "%{public}s called with null cursor";
                      goto LABEL_524;
                    }

                    if (v178[0] == OS_LOG_TYPE_DEFAULT)
                    {
                      v160 = (os_log_s *)__nwlog_obj();
                      v161 = type[0];
                      if (!os_log_type_enabled(v160, type[0])) {
                        goto LABEL_525;
                      }
                      *(_DWORD *)addrinfo buf = 136446210;
                      v205 = "nw_http_fillout_binary_message_inner";
                      v162 = "%{public}s called with null cursor, backtrace limit exceeded";
                      goto LABEL_524;
                    }

                    v163 = (char *)__nw_create_backtrace_string();
                    v160 = (os_log_s *)__nwlog_obj();
                    v161 = type[0];
                    v168 = os_log_type_enabled(v160, type[0]);
                    if (!v163)
                    {
                      if (!v168) {
                        goto LABEL_525;
                      }
                      *(_DWORD *)addrinfo buf = 136446210;
                      v205 = "nw_http_fillout_binary_message_inner";
                      v162 = "%{public}s called with null cursor, no backtrace";
                      goto LABEL_524;
                    }

                    if (!v168) {
                      goto LABEL_518;
                    }
                    goto LABEL_517;
                  }

    goto LABEL_23;
  }

  if (!v3->activeOutgoingRequests)
  {
    __nwlog_obj();
    os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v47 = 136446210;
    *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
    id v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v23 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl( &dword_181A5C000,  v20,  v23,  "%{public}s called with null serviceConnector->activeOutgoingRequests",  v47,  0xCu);
      }

      goto LABEL_74;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v35 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl( &dword_181A5C000,  v20,  v35,  "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded",  v47,  0xCu);
      }

      goto LABEL_74;
    }

    __int16 v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v30 = buf[0];
    uint64_t v31 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace",  v47,  0xCu);
      }

      goto LABEL_74;
    }

    if (v31)
    {
      *(_DWORD *)os_log_type_t v47 = 136446466;
      *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
      *(_WORD *)&v47[12] = 2082;
      *(void *)&v47[14] = v29;
      _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s",  v47,  0x16u);
    }

    goto LABEL_55;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v47 = 136446210;
    *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
    id v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v25 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null request", v47, 0xCu);
      }

      goto LABEL_74;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v36 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl( &dword_181A5C000,  v20,  v36,  "%{public}s called with null request, backtrace limit exceeded",  v47,  0xCu);
      }

      goto LABEL_74;
    }

    __int16 v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v32 = buf[0];
    os_log_type_t v33 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
    if (!v29)
    {
      if (v33)
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_181A5C000, v20, v32, "%{public}s called with null request, no backtrace", v47, 0xCu);
      }

      goto LABEL_74;
    }

    if (v33)
    {
      *(_DWORD *)os_log_type_t v47 = 136446466;
      *(void *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
      *(_WORD *)&v47[12] = 2082;
      *(void *)&v47[14] = v29;
      _os_log_impl( &dword_181A5C000,  v20,  v32,  "%{public}s called with null request, dumping backtrace:%{public}s",  v47,  0x16u);
    }

    goto LABEL_23;
  }

  if (!v3->activeConnections)
  {
    __nwlog_obj();
    os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v47 = 136446210;
    *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
    id v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v23 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl( &dword_181A5C000,  v20,  v23,  "%{public}s called with null serviceConnector->activeConnections",  v47,  0xCu);
      }

      goto LABEL_74;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v35 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl( &dword_181A5C000,  v20,  v35,  "%{public}s called with null serviceConnector->activeConnections, backtrace limit exceeded",  v47,  0xCu);
      }

      goto LABEL_74;
    }

    __int16 v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v30 = buf[0];
    uint64_t v31 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null serviceConnector->activeConnections, no backtrace",  v47,  0xCu);
      }

      goto LABEL_74;
    }

    if (v31)
    {
      *(_DWORD *)os_log_type_t v47 = 136446466;
      *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
      *(_WORD *)&v47[12] = 2082;
      *(void *)&v47[14] = v29;
      _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null serviceConnector->activeConnections, dumping backtrace:%{public}s",  v47,  0x16u);
    }

    goto LABEL_55;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t v47 = 136446210;
    *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
    id v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v25 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null activeConnection", v47, 0xCu);
      }

      goto LABEL_74;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v36 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl( &dword_181A5C000,  v20,  v36,  "%{public}s called with null activeConnection, backtrace limit exceeded",  v47,  0xCu);
      }

      goto LABEL_74;
    }

    __int16 v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v32 = buf[0];
    os_log_type_t v33 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
    if (!v29)
    {
      if (v33)
      {
        *(_DWORD *)os_log_type_t v47 = 136446210;
        *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl( &dword_181A5C000,  v20,  v32,  "%{public}s called with null activeConnection, no backtrace",  v47,  0xCu);
      }

      goto LABEL_74;
    }

    if (v33)
    {
      *(_DWORD *)os_log_type_t v47 = 136446466;
      *(void *)&v47[4] = "nw_service_connector_remove_active_connection";
      *(_WORD *)&v47[12] = 2082;
      *(void *)&v47[14] = v29;
      _os_log_impl( &dword_181A5C000,  v20,  v32,  "%{public}s called with null activeConnection, dumping backtrace:%{public}s",  v47,  0x16u);
    }

LABEL_75:
          if (!v19)
          {
LABEL_78:
            dispatch_async(v7[4], v10);
            goto LABEL_79;
          }

          goto LABEL_76;
        }

        if (!v74)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v25 = (os_log_s *)(id)gLogObj;
          os_log_type_t v48 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v77 = "nw_service_connector_cancel_active_connection";
            v78 = 2114;
            os_log_type_t v79 = (size_t)v11;
            _os_log_impl( &dword_181A5C000,  v25,  v48,  "%{public}s Specified endpoint %{public}@ is not an address endpoint, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_74;
        }

        __int16 v36 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v37 = type;
        os_log_type_t v38 = os_log_type_enabled(v25, type);
        if (!v36)
        {
          if (v38)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            v77 = "nw_service_connector_cancel_active_connection";
            v78 = 2114;
            os_log_type_t v79 = (size_t)v11;
            _os_log_impl( &dword_181A5C000,  v25,  v37,  "%{public}s Specified endpoint %{public}@ is not an address endpoint, no backtrace",  buf,  0x16u);
          }

          goto LABEL_74;
        }

        if (v38)
        {
          *(_DWORD *)addrinfo buf = 136446722;
          v77 = "nw_service_connector_cancel_active_connection";
          v78 = 2114;
          os_log_type_t v79 = (size_t)v11;
          BOOL v80 = 2082;
          v81[0] = v36;
          _os_log_impl( &dword_181A5C000,  v25,  v37,  "%{public}s Specified endpoint %{public}@ is not an address endpoint, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v36);
        if (!v19) {
          goto LABEL_78;
        }
LABEL_76:
        os_log_type_t v49 = (char *)v19;
LABEL_77:
        free(v49);
        goto LABEL_78;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = (id)gLogObj;
      *(_DWORD *)addrinfo buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      id v19 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v74 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (os_log_s *)(id)gLogObj;
        id v23 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null service", buf, 0xCu);
        }

    if (v28) {
      free(v28);
    }
    return 0LL;
  }

  os_log_type_t v7 = (char *)calloc(1uLL, 0x560uLL);
  if (v7) {
    goto LABEL_3;
  }
  os_log_type_t v32 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)addrinfo buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = 1LL;
  *(_WORD *)&buf[22] = 2048;
  id v55 = 1376LL;
  os_log_type_t v33 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v33);
  if (!result)
  {
    free(v33);
LABEL_3:
    bzero(v7, 0x560uLL);
    *(void *)addrinfo buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000LL;
    id v8 = MEMORY[0x1895F87A8];
    id v55 = (uint64_t)v7;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 0x40000000LL;
    aBlock[2] = __nw_protocol_http3_create_block_invoke;
    aBlock[3] = &unk_189BC3C70;
    aBlock[4] = buf;
    *((void *)v7 + 130) = _Block_copy(aBlock);
    _Block_object_dispose(buf, 8);
    *((void *)v7 + 2) = a1;
    *((void *)v7 + 3) = &nw_protocol_http3_get_callbacks(void)::protocol_callbacks;
    *((void *)v7 + 5) = v7;
    *((void *)v7 + 8) = 0LL;
    *((void *)v7 + 9) = v7;
    v7[130] = 0;
    *((void *)v7 + 17) = &nw_protocol_http3_get_listen_callbacks(void)::listen_protocol_callbacks;
    *((void *)v7 + 20) = v7;
    *((void *)v7 + 21) = -1LL;
    *((_OWORD *)v7 + 11) = 0u;
    *((_OWORD *)v7 + 13) = 0u;
    *((void *)v7 + 28) = v7 + 216;
    *(_OWORD *)(v7 + 232) = 0u;
    *(void *)(v7 + 246) = 0LL;
    *((void *)v7 + 24) = v7;
    *((void *)v7 + 25) = v7;
    *((void *)v7 + 141) = 0LL;
    id v9 = v7 + 1373;
    *(_WORD *)(v7 + 1373) = *(_WORD *)(v7 + 1373) & 0xFFFE | nw_parameters_get_server_mode(a4);
    *((void *)v7 + 157) = nw_parameters_copy_context(a4);
    *((_OWORD *)v7 + 20) = 0u;
    *((_OWORD *)v7 + 21) = 0u;
    *((_OWORD *)v7 + 22) = 0u;
    *((_OWORD *)v7 + 23) = 0u;
    *((_OWORD *)v7 + 16) = 0u;
    *((_OWORD *)v7 + 17) = 0u;
    *((_OWORD *)v7 + 18) = 0u;
    *((_OWORD *)v7 + 19) = 0u;
    *((_OWORD *)v7 + 24) = 0u;
    *((_OWORD *)v7 + 25) = 0u;
    *((_OWORD *)v7 + 26) = 0u;
    *((_OWORD *)v7 + 27) = 0u;
    *((_OWORD *)v7 + 28) = 0u;
    *((_OWORD *)v7 + 29) = 0u;
    *((void *)v7 + 40) = v7 + 312;
    *((void *)v7 + 43) = v7 + 336;
    *((void *)v7 + 45) = v7 + 352;
    *((void *)v7 + 47) = v7 + 368;
    *((_OWORD *)v7 + 51) = 0u;
    *((_OWORD *)v7 + 52) = 0u;
    *((_OWORD *)v7 + 49) = 0u;
    *((_OWORD *)v7 + 50) = 0u;
    *((_OWORD *)v7 + 47) = 0u;
    *((_OWORD *)v7 + 48) = 0u;
    *((_OWORD *)v7 + 45) = 0u;
    *((_OWORD *)v7 + 46) = 0u;
    *((_OWORD *)v7 + 43) = 0u;
    *((_OWORD *)v7 + 44) = 0u;
    *((_OWORD *)v7 + 41) = 0u;
    *((_OWORD *)v7 + 42) = 0u;
    *((_OWORD *)v7 + 39) = 0u;
    *((_OWORD *)v7 + 40) = 0u;
    *((_OWORD *)v7 + 37) = 0u;
    *((_OWORD *)v7 + 38) = 0u;
    *((_OWORD *)v7 + 35) = 0u;
    *((_OWORD *)v7 + 36) = 0u;
    *((_OWORD *)v7 + 33) = 0u;
    *((_OWORD *)v7 + 34) = 0u;
    *((_OWORD *)v7 + 31) = 0u;
    *((_OWORD *)v7 + 32) = 0u;
    *((_OWORD *)v7 + 30) = 0u;
    *(void *)(v7 + 500) = 0x3FFF00003FFFLL;
    *((int32x2_t *)v7 + 66) = vdup_n_s32(0x3FDu);
    *((void *)v7 + 64) = 0x1FF00000064LL;
    *((void *)v7 + 67) = &nw_qpack_dec_callbacks;
    *((void *)v7 + 73) = v7 + 576;
    *((void *)v7 + 75) = v7 + 592;
    *((void *)v7 + 77) = v7 + 608;
    *((void *)v7 + 79) = v7 + 624;
    *((void *)v7 + 81) = v7 + 640;
    *((void *)v7 + 83) = v7 + 656;
    *((void *)v7 + 85) = v7 + 672;
    *((void *)v7 + 87) = v7 + 688;
    *((void *)v7 + 89) = v7 + 704;
    *((void *)v7 + 110) = 0LL;
    *((void *)v7 + 111) = v7 + 880;
    *((void *)v7 + 112) = 0LL;
    *((void *)v7 + 113) = v7 + 896;
    *((void *)v7 + 114) = 0LL;
    *((void *)v7 + 115) = v7 + 912;
    *((void *)v7 + 116) = 0LL;
    *((void *)v7 + 117) = v7 + 928;
    *((void *)v7 + 118) = 0LL;
    *((void *)v7 + 119) = v7 + 944;
    *((void *)v7 + 120) = 0LL;
    *((void *)v7 + 121) = v7 + 960;
    *((_OWORD *)v7 + 62) = 0u;
    *((void *)v7 + 126) = -1LL;
    *((_DWORD *)v7 + 318) = 0;
    else {
      id v10 = 0;
    }
    os_log_type_t v11 = (*(unsigned __int16 *)(v7 + 1373) | (v7[1375] << 16)) & 0xFFBFFFFF;
    *id v9 = *(_WORD *)(v7 + 1373);
    v7[1375] = (v11 | v10) >> 16;
    *((void *)v7 + 127) = 240000LL;
    if (a3)
    {
      *((void *)v7 + 137) = os_retain(a3);
      if (a4)
      {
LABEL_12:
        id v12 = os_retain(a4);
        goto LABEL_15;
      }
    }

    else
    {
      *((void *)v7 + 137) = 0LL;
      if (a4) {
        goto LABEL_12;
      }
    }

    id v12 = 0LL;
LABEL_15:
    *((void *)v7 + 140) = v12;
    uint64_t v13 = (void *)*((void *)v7 + 157);
    v50[0] = v8;
    v50[1] = 0x40000000LL;
    v50[2] = __nw_protocol_http3_create_block_invoke_2;
    v50[3] = &__block_descriptor_tmp_4_60253;
    void v50[4] = v7;
    metadata = nw_http_connection_create_metadata(v13, v50, 0LL);
    *((void *)v7 + 156) = metadata;
    nw_http_connection_metadata_set_version(metadata, 5);
    BOOL v15 = *((id *)v7 + 156);
    os_log_type_t v16 = &__block_literal_global_60254;
    id v17 = &__block_literal_global_60254;
    if (v15)
    {
      os_log_type_t v18 = v15;
      id v19 = *((id *)v18 + 1);

      if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
      }
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v19,  nw_protocol_copy_http_connection_definition_definition);

      if (is_equal_unsafe)
      {
        *(void *)addrinfo buf = v8;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __nw_http_connection_metadata_set_send_certificate_block_invoke;
        id v55 = (uint64_t)&unk_189BC67A0;
        unsigned int v57 = v7;
        BOOL v21 = &__block_literal_global_60254;
        id v56 = &__block_literal_global_60254;
        os_log_type_t v22 = *((void *)v18 + 4);
        if (v22)
        {
          __nw_http_connection_metadata_set_send_certificate_block_invoke((uint64_t)buf, v22);
          os_log_type_t v16 = v56;
        }

        goto LABEL_22;
      }

      __nwlog_obj();
      os_log_type_t v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)addrinfo buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
      BOOL v35 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v52 = 0;
      if (__nwlog_fault(v35, &type, &v52))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v39 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
            _os_log_impl(&dword_181A5C000, v36, v39, "%{public}s metadata must be http_connection", buf, 0xCu);
          }
        }

        else if (v52)
        {
          os_log_type_t v45 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v46 = type;
          os_log_type_t v47 = os_log_type_enabled(v36, type);
          if (v45)
          {
            if (v47)
            {
              *(_DWORD *)addrinfo buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v45;
              _os_log_impl( &dword_181A5C000,  v36,  v46,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v45);
            if (!v35) {
              goto LABEL_22;
            }
            goto LABEL_84;
          }

          if (v47)
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
            _os_log_impl( &dword_181A5C000,  v36,  v46,  "%{public}s metadata must be http_connection, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v49 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)addrinfo buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_send_certificate";
            _os_log_impl( &dword_181A5C000,  v36,  v49,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
          }
        }

        goto LABEL_82;
      }

    if (!v10) {
      return;
    }
    goto LABEL_75;
  }

    if (!v43) {
      return 2LL;
    }
    os_log_type_t v42 = (char *)v43;
    goto LABEL_50;
  }

  os_log_type_t v11 = (_WORD *)(v10 + 1373);
  metadata_with_parsed_fields = nw_http_create_metadata_with_parsed_fields( *(void **)(a1 + 504),  *(_WORD *)(v10 + 1373) & 1);
  uint64_t v13 = *(_BYTE *)(a1 + 408);
  if ((v13 & 1) != 0)
  {
    uint64_t v14 = *(void **)(a1 + 400);
    if (v14)
    {
      os_release(v14);
      uint64_t v13 = *(_BYTE *)(a1 + 408);
    }
  }

  *(void *)(a1 + 400) = metadata_with_parsed_fields;
  *(_BYTE *)(a1 + 408) = v13 | 1;
  if (!metadata_with_parsed_fields) {
    goto LABEL_34;
  }
  nw_http_metadata_set_version(metadata_with_parsed_fields, 5);
  BOOL v15 = (unsigned __int16)*v11;
  os_log_type_t v16 = v15 | (*(unsigned __int8 *)(v10 + 1375) << 16);
  if ((v15 & 1) != 0)
  {
    id v23 = 0;
  }

  else
  {
    if ((v16 & 0x100000) != 0 && *(void *)(v10 + 1240) && *(_DWORD *)(v10 + 1276))
    {
      if ((v16 & 0x400000) == 0)
      {
        id v17 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v18 = *(_DWORD *)(v10 + 1280);
          *(_DWORD *)addrinfo buf = 136446978;
          id v56 = "nw_http3_stream_received_fields_done";
          unsigned int v57 = 2082;
          *(void *)char v58 = v10 + 1289;
          *(_WORD *)&v58[8] = 2080;
          *(void *)&v58[10] = " ";
          os_log_type_t v59 = 1024;
          LODWORD(v60) = v18;
          _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> decreasing QUIC keepalive frequency after receiving a response",  buf,  0x26u);
        }
      }

      id v19 = (unsigned __int16)*v11;
      os_log_type_t v20 = (v19 | (*(unsigned __int8 *)(v10 + 1375) << 16)) & 0xFFEFFFFF;
      *os_log_type_t v11 = v19;
      *(_BYTE *)(v10 + 1375) = BYTE2(v20);
      nw_quic_connection_set_keepalive(*(void **)(v10 + 1240), 0xFFFF);
    }

    BOOL v21 = *(void *)(v10 + 1024);
    *(void *)(v10 + 1024) = v21 - 1;
    if (!v21)
    {
      if (gLogDatapath)
      {
        os_log_type_t v49 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v50 = *(void *)(v10 + 1024);
          *(_DWORD *)addrinfo buf = 136446978;
          id v56 = "nw_http3_stream_received_fields_done";
          unsigned int v57 = 2082;
          *(void *)char v58 = "http3->outstanding_sent_requests";
          *(_WORD *)&v58[8] = 2048;
          *(void *)&v58[10] = 1LL;
          os_log_type_t v59 = 2048;
          char v60 = v50;
          _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
        }
      }

      *(void *)(v10 + 1024) = 0LL;
    }

    os_log_type_t v22 = nw_http_metadata_copy_response(*(void **)(a1 + 400));
    id v23 = (nw_http_response_get_status_code(v22) - 100) < 0x64;
    if (v22) {
      os_release(v22);
    }
  }

  nw_http_connection_metadata_increment_inbound_message_count(*(void **)(v10 + 1248));
  nw_http_transaction_metadata_set_inbound_message(*(void **)(a1 + 392), *(void **)(a1 + 400));
  nw::http::content_length_manager::set_inbound_message( (nw::http::content_length_manager *)(a1 + 272),  *(nw_protocol_metadata **)(a1 + 400));
  os_log_type_t v34 = *(_DWORD **)(a1 + 376);
  BOOL v35 = nw_frame_unclaimed_length(v34);
  nw_frame_claim((uint64_t)v34, v36, v35, 0);
  os_log_type_t v37 = *(void *)(a1 + 376);
  os_log_type_t v38 = *(nw_protocol_metadata **)(a1 + 400);
  is_metadata_complete = nw_frame_is_metadata_complete(v37);
  nw_frame_set_metadata(v37, v38, 1, is_metadata_complete | v23);
  os_log_type_t v40 = 0;
  if (v23) {
    goto LABEL_54;
  }
  if ((*(_WORD *)(a1 + 736) & 0x10) != 0)
  {
    os_log_type_t v40 = 8;
LABEL_54:
    BOOL result = 0LL;
    *(_DWORD *)(a1 + 372) = v40;
    return result;
  }

  *(_DWORD *)(a1 + 372) = 4;
  BOOL result = *(void *)(a1 + 400);
  if (result)
  {
    BOOL result = (uint64_t)nw_http_metadata_copy_request((void *)result);
    if (result)
    {
      BOOL v28 = (void *)result;
      if (nw_http_request_has_method((void *)result, (uint64_t)"CONNECT-UDP"))
      {
        v52[0] = MEMORY[0x1895F87A8];
        v52[1] = 0x40000000LL;
        v52[2] = ___ZL36nw_http3_stream_received_fields_doneP24nw_protocol_http3_stream_block_invoke;
        v52[3] = &__block_descriptor_tmp_83_60733;
        v52[4] = a1;
        nw_http_fields_access_value_by_name(v28, (unint64_t)"Datagram-Flow-Id", v52);
LABEL_57:
        *(_WORD *)(a1 + 736) |= 0x8000u;
        goto LABEL_33;
      }

      if (nw_http_request_has_method(v28, (uint64_t)"CONNECT"))
      {
        v51[0] = MEMORY[0x1895F87A8];
        v51[1] = 0x40000000LL;
        v51[2] = ___ZL36nw_http3_stream_received_fields_doneP24nw_protocol_http3_stream_block_invoke_84;
        v51[3] = &__block_descriptor_tmp_87_60734;
        v51[4] = a1;
        v51[5] = v10;
        nw_http_request_access_extended_connect_protocol(v28, v51);
        goto LABEL_57;
      }

  if (v11)
  {
    os_log_type_t v47 = (char *)v11;
LABEL_76:
    free(v47);
  }

  return 0LL;
}

  if (v19) {
    free(v19);
  }
  return 0LL;
}

    if (v35) {
      free(v35);
    }
    return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
  }

  uint64_t v14 = *(void *)(a2 + 32);
  BOOL v15 = *(void **)(a2 + 40);
  if (v14)
  {
    *(void *)(v14 + 40) = v15;
    BOOL v15 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 80) + 224LL) = v15;
  }

  *BOOL v15 = v14;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  os_log_type_t v7 = 1LL;
  nw_frame_finalize(a2);
  return v7;
}

      goto LABEL_75;
    }

    if (!v37)
    {
      __nwlog_obj();
      BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v36 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl( &dword_181A5C000,  v21,  v36,  "%{public}s called with null request_path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v32 = type;
    os_log_type_t v33 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_181A5C000, v21, v32, "%{public}s called with null request_path, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v33)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v40 = "nw_proxy_hop_create_oblivious_http";
      BOOL v41 = 2082;
      os_log_type_t v42 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null request_path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_56;
  }

      goto LABEL_75;
    }

    if (!v39)
    {
      __nwlog_obj();
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl( &dword_181A5C000,  v23,  v38,  "%{public}s called with null request_path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_181A5C000, v23, v34, "%{public}s called with null request_path, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v35)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v42 = "nw_proxy_hop_create_oblivious_http_with_context";
      BOOL v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v23,  v34,  "%{public}s called with null request_path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_56;
  }

    goto LABEL_75;
  }

  if (!nw_protocol_options_is_masque(*((void **)v5 + 5)))
  {
    __nwlog_obj();
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null nw_protocol_options_is_masque(hop->options)",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    if (!v33)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v30 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v11,  v30,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    os_log_type_t v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v23 = type;
    os_log_type_t v24 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    if (v24)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
      os_log_type_t v37 = 2082;
      os_log_type_t v38 = v22;
      _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

  if (!a2)
  {
    __nwlog_obj();
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null key_bytes", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (!v33)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v31 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v11,  v31,  "%{public}s called with null key_bytes, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    os_log_type_t v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v25 = type;
    BOOL v26 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v11, v25, "%{public}s called with null key_bytes, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v26)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
      os_log_type_t v37 = 2082;
      os_log_type_t v38 = v22;
      _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null key_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

  if (!a3)
  {
    __nwlog_obj();
    id v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null key_length", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (!v33)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl( &dword_181A5C000,  v11,  v32,  "%{public}s called with null key_length, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    os_log_type_t v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v27 = type;
    BOOL v28 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v28)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v11, v27, "%{public}s called with null key_length, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v28)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      __int16 v36 = "nw_proxy_hop_add_server_raw_public_key";
      os_log_type_t v37 = 2082;
      os_log_type_t v38 = v22;
      _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null key_length, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      if (v25) {
        free(v25);
      }
      goto LABEL_76;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (id)gLogObj;
    *(_DWORD *)addrinfo buf = 136446210;
    unsigned int v53 = "nw_path_copy_flow_divert_token";
    id v12 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v12, uu, &type))
    {
      if (uu[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)(id)gLogObj;
        uint64_t v14 = uu[0];
        if (os_log_type_enabled(v13, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          unsigned int v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }

      else if (type)
      {
        BOOL v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v16 = uu[0];
        id v17 = os_log_type_enabled(v13, (os_log_type_t)uu[0]);
        if (v15)
        {
          if (v17)
          {
            *(_DWORD *)addrinfo buf = 136446466;
            unsigned int v53 = "nw_path_copy_flow_divert_token";
            v54 = 2082;
            id v55 = v15;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v15);
          if (!v12) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }

        if (v17)
        {
          *(_DWORD *)addrinfo buf = 136446210;
          unsigned int v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = uu[0];
        if (os_log_type_enabled(v13, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)addrinfo buf = 136446210;
          unsigned int v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s xpc_dictionary_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v12)
    {
LABEL_23:
      id v5 = 0LL;
LABEL_83:

      goto LABEL_84;
    }

        free(v37);
        goto LABEL_75;
      }

      if (v52)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_181A5C000, v38, v51, "%{public}s called with null out_length, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v54 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        char v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl( &dword_181A5C000,  v38,  v54,  "%{public}s called with null out_length, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_75;
  }

  os_log_type_t v7 = v5;
  id v8 = *((id *)v7 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v8,  nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v39 = "nw_http_metadata_add_header";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v37 = OS_LOG_TYPE_ERROR;
    __int16 v36 = 0;
    if (v37 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s metadata must be http", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (!v36)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v39 = "nw_http_metadata_add_header";
        _os_log_impl( &dword_181A5C000,  v13,  v32,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    os_log_type_t v24 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v25 = v37;
    BOOL v26 = os_log_type_enabled(v13, v37);
    if (!v24)
    {
      if (v26)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_181A5C000, v13, v25, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v26)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v39 = "nw_http_metadata_add_header";
      os_log_type_t v40 = 2082;
      BOOL v41 = v24;
      _os_log_impl( &dword_181A5C000,  v13,  v25,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

  if (!a2)
  {
    __nwlog_obj();
    id v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v39 = "nw_http_metadata_add_header";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v37 = OS_LOG_TYPE_ERROR;
    __int16 v36 = 0;
    if (v37 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null name", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (!v36)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v39 = "nw_http_metadata_add_header";
        _os_log_impl( &dword_181A5C000,  v13,  v33,  "%{public}s called with null name, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    os_log_type_t v24 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v27 = v37;
    BOOL v28 = os_log_type_enabled(v13, v37);
    if (!v24)
    {
      if (v28)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_181A5C000, v13, v27, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v28)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v39 = "nw_http_metadata_add_header";
      os_log_type_t v40 = 2082;
      BOOL v41 = v24;
      _os_log_impl( &dword_181A5C000,  v13,  v27,  "%{public}s called with null name, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

  if (!a3)
  {
    __nwlog_obj();
    id v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)addrinfo buf = 136446210;
    os_log_type_t v39 = "nw_http_metadata_add_header";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v37 = OS_LOG_TYPE_ERROR;
    __int16 v36 = 0;
    if (v37 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_181A5C000, v13, v20, "%{public}s called with null value", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (!v36)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v39 = "nw_http_metadata_add_header";
        _os_log_impl( &dword_181A5C000,  v13,  v34,  "%{public}s called with null value, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    os_log_type_t v24 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v29 = v37;
    __int16 v30 = os_log_type_enabled(v13, v37);
    if (!v24)
    {
      if (v30)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        os_log_type_t v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_181A5C000, v13, v29, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v30)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      os_log_type_t v39 = "nw_http_metadata_add_header";
      os_log_type_t v40 = 2082;
      BOOL v41 = v24;
      _os_log_impl( &dword_181A5C000,  v13,  v29,  "%{public}s called with null value, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    uint64_t v25 = v108;
LABEL_75:

    goto LABEL_76;
  }

  os_log_type_t v24 = v5[2];
  if (v24 && !nw_path_parameters_get_logging_disabled(v24[13]))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v25 = (NWConcrete_nw_connection *)(id)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
    {
      BOOL v26 = *((_DWORD *)v5 + 112);
      buf[0] = 136446466;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v26;
      _os_log_impl( &dword_181A5C000,  (os_log_t)v25,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] No path found for endpoint handler",  (uint8_t *)buf,  0x12u);
    }

    goto LABEL_75;
  }

        os_log_type_t v48 = (void *)*((void *)v4 + 119);
        if (!v48) {
          goto LABEL_79;
        }
        if (*(_UNKNOWN **)(internal + 40) == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v49 = *(void **)(internal + 200);
          if (v49)
          {
            xpc_release(v49);
            *(void *)(internal + 200) = 0LL;
          }

          *(void *)(internal + 200) = xpc_retain(v48);
          goto LABEL_79;
        }

        __nwlog_obj();
        *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
        *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
        uint64_t v70 = (char *)_os_log_send_and_compose_impl();
        v102[0] = OS_LOG_TYPE_ERROR;
        v107[0] = 0;
        if (__nwlog_fault(v70, v102, v107))
        {
          if (v102[0] == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v71 = (os_log_s *)__nwlog_obj();
            v72 = v102[0];
            if (!os_log_type_enabled(v71, v102[0])) {
              goto LABEL_165;
            }
            *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
            v73 = "%{public}s called with null socket_handler";
LABEL_163:
            v86 = v71;
LABEL_164:
            _os_log_impl(&dword_181A5C000, v86, v72, v73, &buf[0].sa_len, 0xCu);
            goto LABEL_165;
          }

          if (!v107[0])
          {
            os_log_type_t v71 = (os_log_s *)__nwlog_obj();
            v72 = v102[0];
            if (!os_log_type_enabled(v71, v102[0])) {
              goto LABEL_165;
            }
            *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
            v73 = "%{public}s called with null socket_handler, backtrace limit exceeded";
            goto LABEL_163;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v82 = (os_log_s *)__nwlog_obj();
          v72 = v102[0];
          logb = v82;
          os_log_type_t v83 = os_log_type_enabled(v82, v102[0]);
          if (backtrace_string)
          {
            if (v83)
            {
              *(_DWORD *)&buf[0].unsigned int sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(void *)&buf[0].sa_data[12] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  logb,  v72,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  &buf[0].sa_len,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_165;
          }

          if (v83)
          {
            *(_DWORD *)&buf[0].unsigned int sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
            v73 = "%{public}s called with null socket_handler, no backtrace";
            v86 = logb;
            goto LABEL_164;
          }
        }

  if (v22) {
LABEL_75:
  }
    free(v22);
LABEL_84:
}

  if (v22) {
    free(v22);
  }
  return v8;
}

      _os_log_impl(&dword_181A5C000, v40, v41, v42, buf, 0xCu);
      goto LABEL_75;
    }

    BOOL v35 = v33 | (v34 << 16);
    *(_BYTE *)(v27 + 206) = BYTE2(v35);
    *(_WORD *)(v27 + 204) = v35 | 0x2040;
LABEL_80:
    os_log_type_t v59 = *(void *)(v27 + 16);
    char v60 = *(void **)(v27 + 24);
    char v58 = (void *)(v27 + 16);
    if (*(_OWORD *)(v27 + 16) == 0LL)
    {
      char v60 = 0LL;
      id v3 = 0LL;
    }

    else
    {
      id v3 = *(void *)(v27 + 16);
    }

    if (v59)
    {
      *(void *)(v59 + 24) = v60;
      char v60 = *(void **)(v27 + 24);
    }

    else
    {
      *(void *)(v31 + 296) = v60;
    }

    LODWORD(v6) = data_length + v6;
    *char v60 = v59;
    *char v58 = 0LL;
    *(void *)(v27 + 24) = 0LL;
    os_log_type_t v20 = *(uint64_t **)(v31 + 328);
    *(void *)(v27 + 24) = v20;
    void *v20 = v27;
    *(void *)(v31 + 328) = v58;
    ++*(_DWORD *)(v31 + 416);
    node = v28;
    extra = nw_hash_node_get_extra(v28);
    *(void *)(v27 + 32) = 0LL;
    os_log_type_t v22 = *(uint64_t **)(extra + 8);
    *(void *)(v27 + 40) = v22;
    unsigned __int8 *v22 = v27;
    *(void *)(extra + 8) = v27 + 32;
    ++v19;
    v239 = 1;
    if (buflet_count == v19)
    {
      if ((*(_WORD *)(v243 + 204) & 0x80) == 0)
      {
        v239 = 1;
        id v5 = v238;
        id v8 = v233;
        id v6 = v234;
        goto LABEL_178;
      }

      if (!WORD1(v6))
      {
        v239 = 1;
        id v5 = v238;
        id v8 = v233;
        __int16 v62 = v243;
        os_log_type_t v61 = v236;
LABEL_91:
        *(_WORD *)(v62 + 196) = v6;
        id v6 = v234;
        goto LABEL_179;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)addrinfo buf = 136446466;
      v254 = "nw_channel_add_input_frames";
      v255 = 1024;
      LODWORD(v256[0]) = v6;
      v90 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v252 = OS_LOG_TYPE_DEFAULT;
      id v5 = v238;
      if (__nwlog_fault(v90, type, &v252))
      {
        if (type[0] != OS_LOG_TYPE_FAULT)
        {
          if (v252)
          {
            v107 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v108 = (os_log_s *)gLogObj;
            BOOL v109 = type[0];
            v110 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
            if (v107)
            {
              if (v110)
              {
                *(_DWORD *)addrinfo buf = 136446722;
                v254 = "nw_channel_add_input_frames";
                v255 = 1024;
                LODWORD(v256[0]) = v6;
                WORD2(v256[0]) = 2082;
                *(void *)((char *)v256 + 6) = v107;
                _os_log_impl( &dword_181A5C000,  v108,  v109,  "%{public}s Chained packet-length is too big: %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v107);
              goto LABEL_175;
            }

            if (!v110) {
              goto LABEL_175;
            }
            *(_DWORD *)addrinfo buf = 136446466;
            v254 = "nw_channel_add_input_frames";
            v255 = 1024;
            LODWORD(v256[0]) = v6;
            os_log_type_t v93 = v108;
            v94 = v109;
            os_log_type_t v95 = "%{public}s Chained packet-length is too big: %u, no backtrace";
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v113 = gLogObj;
            os_log_type_t v114 = type[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
              goto LABEL_175;
            }
            *(_DWORD *)addrinfo buf = 136446466;
            v254 = "nw_channel_add_input_frames";
            v255 = 1024;
            LODWORD(v256[0]) = v6;
            os_log_type_t v93 = (os_log_s *)v113;
            v94 = v114;
            os_log_type_t v95 = "%{public}s Chained packet-length is too big: %u, backtrace limit exceeded";
          }

      goto LABEL_23;
    }

    if (!v40)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl( &dword_181A5C000,  v24,  v39,  "%{public}s called with null signature_len, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v35 = type;
    __int16 v36 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)addrinfo buf = 136446210;
        BOOL v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v24, v35, "%{public}s called with null signature_len, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v36)
    {
      *(_DWORD *)addrinfo buf = 136446466;
      BOOL v43 = "nw_interface_get_ipv6_network_signature";
      v44 = 2082;
      *(void *)os_log_type_t v45 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v24,  v35,  "%{public}s called with null signature_len, dumping backtrace:%{public}s",  buf,  0x16u);
    }